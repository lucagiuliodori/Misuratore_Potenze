

Microchip Technology PIC LITE Macro Assembler V1.34 build -361300703 
                                                                                               Wed Feb 17 20:32:03 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK3,global,class=CODE,delta=2
     6                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    19                           	psect	text1,local,class=CODE,merge=1,delta=2
    20                           	psect	text2,local,class=CODE,merge=1,delta=2
    21                           	psect	text3,local,class=CODE,merge=1,delta=2
    22                           	psect	text4,local,class=CODE,merge=1,delta=2
    23                           	psect	text5,local,class=CODE,merge=1,delta=2
    24                           	psect	text6,local,class=CODE,merge=1,delta=2
    25                           	psect	text7,local,class=CODE,merge=1,delta=2
    26                           	psect	text8,local,class=CODE,merge=1,delta=2
    27                           	psect	text9,local,class=CODE,merge=1,delta=2
    28                           	psect	text10,local,class=CODE,merge=1,delta=2
    29                           	psect	text11,local,class=CODE,merge=1,delta=2
    30                           	psect	text12,local,class=CODE,merge=1,delta=2
    31                           	psect	text13,local,class=CODE,merge=1,delta=2
    32                           	psect	text14,local,class=CODE,merge=1,delta=2
    33                           	psect	text15,local,class=CODE,merge=1,delta=2
    34                           	psect	text16,local,class=CODE,merge=1,delta=2
    35                           	psect	text17,local,class=CODE,merge=1,delta=2
    36                           	psect	text18,local,class=CODE,merge=1,delta=2
    37                           	psect	text19,local,class=CODE,merge=1,delta=2
    38                           	psect	text20,local,class=CODE,merge=1,delta=2
    39                           	psect	text21,local,class=CODE,merge=1,delta=2
    40                           	psect	text22,local,class=CODE,merge=1,delta=2
    41                           	psect	text23,local,class=CODE,merge=1,delta=2
    42                           	psect	text24,local,class=CODE,merge=1,delta=2
    43                           	psect	text25,local,class=CODE,merge=1,delta=2
    44                           	psect	text26,local,class=CODE,merge=1,delta=2
    45                           	psect	text27,local,class=CODE,merge=1,delta=2
    46                           	psect	text28,local,class=CODE,merge=1,delta=2
    47                           	psect	text29,local,class=CODE,merge=1,delta=2
    48                           	psect	text30,local,class=CODE,merge=1,delta=2
    49                           	psect	text31,local,class=CODE,merge=1,delta=2
    50                           	psect	text32,local,class=CODE,merge=1,delta=2
    51                           	psect	text33,local,class=CODE,merge=1,delta=2
    52                           	psect	text34,local,class=CODE,merge=1,delta=2
    53                           	psect	text35,local,class=CODE,merge=1,delta=2
    54                           	psect	text36,local,class=CODE,merge=1,delta=2
    55                           	psect	text37,local,class=CODE,merge=1,delta=2
    56                           	psect	text38,local,class=CODE,merge=1,delta=2
    57                           	psect	text39,local,class=CODE,merge=1,delta=2
    58                           	psect	text40,local,class=CODE,merge=1,delta=2
    59                           	psect	text41,local,class=CODE,merge=1,delta=2
    60                           	psect	text42,local,class=CODE,merge=1,delta=2
    61                           	psect	text43,local,class=CODE,merge=1,delta=2
    62                           	psect	text44,local,class=CODE,merge=1,delta=2
    63                           	psect	text45,local,class=CODE,merge=1,delta=2
    64                           	psect	text46,local,class=CODE,merge=1,delta=2
    65                           	psect	text47,local,class=CODE,merge=1,delta=2
    66                           	psect	text48,local,class=CODE,merge=1,delta=2
    67                           	psect	text49,local,class=CODE,merge=1,delta=2
    68                           	psect	text50,local,class=CODE,merge=1,delta=2
    69                           	psect	text51,local,class=CODE,merge=1,delta=2
    70                           	psect	text52,local,class=CODE,merge=1,delta=2
    71                           	psect	text53,local,class=CODE,merge=1,delta=2
    72                           	psect	text54,local,class=CODE,merge=1,delta=2
    73                           	psect	text55,local,class=CODE,merge=1,delta=2
    74                           	psect	text56,local,class=CODE,merge=1,delta=2
    75                           	psect	intentry,global,class=CODE,delta=2
    76                           	psect	text58,local,class=CODE,merge=1,delta=2
    77                           	dabs	1,0x7E,2
    78  0000                     	;# 
    79  0001                     	;# 
    80  0002                     	;# 
    81  0003                     	;# 
    82  0004                     	;# 
    83  0005                     	;# 
    84  0006                     	;# 
    85  0007                     	;# 
    86  0008                     	;# 
    87  0009                     	;# 
    88  000A                     	;# 
    89  000B                     	;# 
    90  000C                     	;# 
    91  000D                     	;# 
    92  000E                     	;# 
    93  0010                     	;# 
    94  0011                     	;# 
    95  0012                     	;# 
    96  0015                     	;# 
    97  0016                     	;# 
    98  0016                     	;# 
    99  0017                     	;# 
   100  0018                     	;# 
   101  0019                     	;# 
   102  001A                     	;# 
   103  001B                     	;# 
   104  001C                     	;# 
   105  008C                     	;# 
   106  008D                     	;# 
   107  008E                     	;# 
   108  0090                     	;# 
   109  0091                     	;# 
   110  0092                     	;# 
   111  0095                     	;# 
   112  0096                     	;# 
   113  0097                     	;# 
   114  0099                     	;# 
   115  009A                     	;# 
   116  009B                     	;# 
   117  009B                     	;# 
   118  009C                     	;# 
   119  009D                     	;# 
   120  009E                     	;# 
   121  010C                     	;# 
   122  010D                     	;# 
   123  010E                     	;# 
   124  0116                     	;# 
   125  0117                     	;# 
   126  011D                     	;# 
   127  018C                     	;# 
   128  018D                     	;# 
   129  018E                     	;# 
   130  0191                     	;# 
   131  0191                     	;# 
   132  0192                     	;# 
   133  0193                     	;# 
   134  0193                     	;# 
   135  0194                     	;# 
   136  0195                     	;# 
   137  0196                     	;# 
   138  0197                     	;# 
   139  0199                     	;# 
   140  019A                     	;# 
   141  019B                     	;# 
   142  019B                     	;# 
   143  019B                     	;# 
   144  019B                     	;# 
   145  019C                     	;# 
   146  019C                     	;# 
   147  019D                     	;# 
   148  019E                     	;# 
   149  019F                     	;# 
   150  020D                     	;# 
   151  0210                     	;# 
   152  0211                     	;# 
   153  0211                     	;# 
   154  0212                     	;# 
   155  0212                     	;# 
   156  0213                     	;# 
   157  0213                     	;# 
   158  0214                     	;# 
   159  0214                     	;# 
   160  0215                     	;# 
   161  0215                     	;# 
   162  0215                     	;# 
   163  0216                     	;# 
   164  0216                     	;# 
   165  0217                     	;# 
   166  0217                     	;# 
   167  0291                     	;# 
   168  0291                     	;# 
   169  0292                     	;# 
   170  0293                     	;# 
   171  0298                     	;# 
   172  0298                     	;# 
   173  0299                     	;# 
   174  029A                     	;# 
   175  0394                     	;# 
   176  0395                     	;# 
   177  0396                     	;# 
   178  0FE4                     	;# 
   179  0FE5                     	;# 
   180  0FE6                     	;# 
   181  0FE7                     	;# 
   182  0FE8                     	;# 
   183  0FE9                     	;# 
   184  0FEA                     	;# 
   185  0FEB                     	;# 
   186  0FED                     	;# 
   187  0FEE                     	;# 
   188  0FEF                     	;# 
   189  0000                     	;# 
   190  0001                     	;# 
   191  0002                     	;# 
   192  0003                     	;# 
   193  0004                     	;# 
   194  0005                     	;# 
   195  0006                     	;# 
   196  0007                     	;# 
   197  0008                     	;# 
   198  0009                     	;# 
   199  000A                     	;# 
   200  000B                     	;# 
   201  000C                     	;# 
   202  000D                     	;# 
   203  000E                     	;# 
   204  0010                     	;# 
   205  0011                     	;# 
   206  0012                     	;# 
   207  0015                     	;# 
   208  0016                     	;# 
   209  0016                     	;# 
   210  0017                     	;# 
   211  0018                     	;# 
   212  0019                     	;# 
   213  001A                     	;# 
   214  001B                     	;# 
   215  001C                     	;# 
   216  008C                     	;# 
   217  008D                     	;# 
   218  008E                     	;# 
   219  0090                     	;# 
   220  0091                     	;# 
   221  0092                     	;# 
   222  0095                     	;# 
   223  0096                     	;# 
   224  0097                     	;# 
   225  0099                     	;# 
   226  009A                     	;# 
   227  009B                     	;# 
   228  009B                     	;# 
   229  009C                     	;# 
   230  009D                     	;# 
   231  009E                     	;# 
   232  010C                     	;# 
   233  010D                     	;# 
   234  010E                     	;# 
   235  0116                     	;# 
   236  0117                     	;# 
   237  011D                     	;# 
   238  018C                     	;# 
   239  018D                     	;# 
   240  018E                     	;# 
   241  0191                     	;# 
   242  0191                     	;# 
   243  0192                     	;# 
   244  0193                     	;# 
   245  0193                     	;# 
   246  0194                     	;# 
   247  0195                     	;# 
   248  0196                     	;# 
   249  0197                     	;# 
   250  0199                     	;# 
   251  019A                     	;# 
   252  019B                     	;# 
   253  019B                     	;# 
   254  019B                     	;# 
   255  019B                     	;# 
   256  019C                     	;# 
   257  019C                     	;# 
   258  019D                     	;# 
   259  019E                     	;# 
   260  019F                     	;# 
   261  020D                     	;# 
   262  0210                     	;# 
   263  0211                     	;# 
   264  0211                     	;# 
   265  0212                     	;# 
   266  0212                     	;# 
   267  0213                     	;# 
   268  0213                     	;# 
   269  0214                     	;# 
   270  0214                     	;# 
   271  0215                     	;# 
   272  0215                     	;# 
   273  0215                     	;# 
   274  0216                     	;# 
   275  0216                     	;# 
   276  0217                     	;# 
   277  0217                     	;# 
   278  0291                     	;# 
   279  0291                     	;# 
   280  0292                     	;# 
   281  0293                     	;# 
   282  0298                     	;# 
   283  0298                     	;# 
   284  0299                     	;# 
   285  029A                     	;# 
   286  0394                     	;# 
   287  0395                     	;# 
   288  0396                     	;# 
   289  0FE4                     	;# 
   290  0FE5                     	;# 
   291  0FE6                     	;# 
   292  0FE7                     	;# 
   293  0FE8                     	;# 
   294  0FE9                     	;# 
   295  0FEA                     	;# 
   296  0FEB                     	;# 
   297  0FED                     	;# 
   298  0FEE                     	;# 
   299  0FEF                     	;# 
   300  0000                     	;# 
   301  0001                     	;# 
   302  0002                     	;# 
   303  0003                     	;# 
   304  0004                     	;# 
   305  0005                     	;# 
   306  0006                     	;# 
   307  0007                     	;# 
   308  0008                     	;# 
   309  0009                     	;# 
   310  000A                     	;# 
   311  000B                     	;# 
   312  000C                     	;# 
   313  000D                     	;# 
   314  000E                     	;# 
   315  0010                     	;# 
   316  0011                     	;# 
   317  0012                     	;# 
   318  0015                     	;# 
   319  0016                     	;# 
   320  0016                     	;# 
   321  0017                     	;# 
   322  0018                     	;# 
   323  0019                     	;# 
   324  001A                     	;# 
   325  001B                     	;# 
   326  001C                     	;# 
   327  008C                     	;# 
   328  008D                     	;# 
   329  008E                     	;# 
   330  0090                     	;# 
   331  0091                     	;# 
   332  0092                     	;# 
   333  0095                     	;# 
   334  0096                     	;# 
   335  0097                     	;# 
   336  0099                     	;# 
   337  009A                     	;# 
   338  009B                     	;# 
   339  009B                     	;# 
   340  009C                     	;# 
   341  009D                     	;# 
   342  009E                     	;# 
   343  010C                     	;# 
   344  010D                     	;# 
   345  010E                     	;# 
   346  0116                     	;# 
   347  0117                     	;# 
   348  011D                     	;# 
   349  018C                     	;# 
   350  018D                     	;# 
   351  018E                     	;# 
   352  0191                     	;# 
   353  0191                     	;# 
   354  0192                     	;# 
   355  0193                     	;# 
   356  0193                     	;# 
   357  0194                     	;# 
   358  0195                     	;# 
   359  0196                     	;# 
   360  0197                     	;# 
   361  0199                     	;# 
   362  019A                     	;# 
   363  019B                     	;# 
   364  019B                     	;# 
   365  019B                     	;# 
   366  019B                     	;# 
   367  019C                     	;# 
   368  019C                     	;# 
   369  019D                     	;# 
   370  019E                     	;# 
   371  019F                     	;# 
   372  020D                     	;# 
   373  0210                     	;# 
   374  0211                     	;# 
   375  0211                     	;# 
   376  0212                     	;# 
   377  0212                     	;# 
   378  0213                     	;# 
   379  0213                     	;# 
   380  0214                     	;# 
   381  0214                     	;# 
   382  0215                     	;# 
   383  0215                     	;# 
   384  0215                     	;# 
   385  0216                     	;# 
   386  0216                     	;# 
   387  0217                     	;# 
   388  0217                     	;# 
   389  0291                     	;# 
   390  0291                     	;# 
   391  0292                     	;# 
   392  0293                     	;# 
   393  0298                     	;# 
   394  0298                     	;# 
   395  0299                     	;# 
   396  029A                     	;# 
   397  0394                     	;# 
   398  0395                     	;# 
   399  0396                     	;# 
   400  0FE4                     	;# 
   401  0FE5                     	;# 
   402  0FE6                     	;# 
   403  0FE7                     	;# 
   404  0FE8                     	;# 
   405  0FE9                     	;# 
   406  0FEA                     	;# 
   407  0FEB                     	;# 
   408  0FED                     	;# 
   409  0FEE                     	;# 
   410  0FEF                     	;# 
   411  0000                     	;# 
   412  0001                     	;# 
   413  0002                     	;# 
   414  0003                     	;# 
   415  0004                     	;# 
   416  0005                     	;# 
   417  0006                     	;# 
   418  0007                     	;# 
   419  0008                     	;# 
   420  0009                     	;# 
   421  000A                     	;# 
   422  000B                     	;# 
   423  000C                     	;# 
   424  000D                     	;# 
   425  000E                     	;# 
   426  0010                     	;# 
   427  0011                     	;# 
   428  0012                     	;# 
   429  0015                     	;# 
   430  0016                     	;# 
   431  0016                     	;# 
   432  0017                     	;# 
   433  0018                     	;# 
   434  0019                     	;# 
   435  001A                     	;# 
   436  001B                     	;# 
   437  001C                     	;# 
   438  008C                     	;# 
   439  008D                     	;# 
   440  008E                     	;# 
   441  0090                     	;# 
   442  0091                     	;# 
   443  0092                     	;# 
   444  0095                     	;# 
   445  0096                     	;# 
   446  0097                     	;# 
   447  0099                     	;# 
   448  009A                     	;# 
   449  009B                     	;# 
   450  009B                     	;# 
   451  009C                     	;# 
   452  009D                     	;# 
   453  009E                     	;# 
   454  010C                     	;# 
   455  010D                     	;# 
   456  010E                     	;# 
   457  0116                     	;# 
   458  0117                     	;# 
   459  011D                     	;# 
   460  018C                     	;# 
   461  018D                     	;# 
   462  018E                     	;# 
   463  0191                     	;# 
   464  0191                     	;# 
   465  0192                     	;# 
   466  0193                     	;# 
   467  0193                     	;# 
   468  0194                     	;# 
   469  0195                     	;# 
   470  0196                     	;# 
   471  0197                     	;# 
   472  0199                     	;# 
   473  019A                     	;# 
   474  019B                     	;# 
   475  019B                     	;# 
   476  019B                     	;# 
   477  019B                     	;# 
   478  019C                     	;# 
   479  019C                     	;# 
   480  019D                     	;# 
   481  019E                     	;# 
   482  019F                     	;# 
   483  020D                     	;# 
   484  0210                     	;# 
   485  0211                     	;# 
   486  0211                     	;# 
   487  0212                     	;# 
   488  0212                     	;# 
   489  0213                     	;# 
   490  0213                     	;# 
   491  0214                     	;# 
   492  0214                     	;# 
   493  0215                     	;# 
   494  0215                     	;# 
   495  0215                     	;# 
   496  0216                     	;# 
   497  0216                     	;# 
   498  0217                     	;# 
   499  0217                     	;# 
   500  0291                     	;# 
   501  0291                     	;# 
   502  0292                     	;# 
   503  0293                     	;# 
   504  0298                     	;# 
   505  0298                     	;# 
   506  0299                     	;# 
   507  029A                     	;# 
   508  0394                     	;# 
   509  0395                     	;# 
   510  0396                     	;# 
   511  0FE4                     	;# 
   512  0FE5                     	;# 
   513  0FE6                     	;# 
   514  0FE7                     	;# 
   515  0FE8                     	;# 
   516  0FE9                     	;# 
   517  0FEA                     	;# 
   518  0FEB                     	;# 
   519  0FED                     	;# 
   520  0FEE                     	;# 
   521  0FEF                     	;# 
   522  0000                     	;# 
   523  0001                     	;# 
   524  0002                     	;# 
   525  0003                     	;# 
   526  0004                     	;# 
   527  0005                     	;# 
   528  0006                     	;# 
   529  0007                     	;# 
   530  0008                     	;# 
   531  0009                     	;# 
   532  000A                     	;# 
   533  000B                     	;# 
   534  000C                     	;# 
   535  000D                     	;# 
   536  000E                     	;# 
   537  0010                     	;# 
   538  0011                     	;# 
   539  0012                     	;# 
   540  0015                     	;# 
   541  0016                     	;# 
   542  0016                     	;# 
   543  0017                     	;# 
   544  0018                     	;# 
   545  0019                     	;# 
   546  001A                     	;# 
   547  001B                     	;# 
   548  001C                     	;# 
   549  008C                     	;# 
   550  008D                     	;# 
   551  008E                     	;# 
   552  0090                     	;# 
   553  0091                     	;# 
   554  0092                     	;# 
   555  0095                     	;# 
   556  0096                     	;# 
   557  0097                     	;# 
   558  0099                     	;# 
   559  009A                     	;# 
   560  009B                     	;# 
   561  009B                     	;# 
   562  009C                     	;# 
   563  009D                     	;# 
   564  009E                     	;# 
   565  010C                     	;# 
   566  010D                     	;# 
   567  010E                     	;# 
   568  0116                     	;# 
   569  0117                     	;# 
   570  011D                     	;# 
   571  018C                     	;# 
   572  018D                     	;# 
   573  018E                     	;# 
   574  0191                     	;# 
   575  0191                     	;# 
   576  0192                     	;# 
   577  0193                     	;# 
   578  0193                     	;# 
   579  0194                     	;# 
   580  0195                     	;# 
   581  0196                     	;# 
   582  0197                     	;# 
   583  0199                     	;# 
   584  019A                     	;# 
   585  019B                     	;# 
   586  019B                     	;# 
   587  019B                     	;# 
   588  019B                     	;# 
   589  019C                     	;# 
   590  019C                     	;# 
   591  019D                     	;# 
   592  019E                     	;# 
   593  019F                     	;# 
   594  020D                     	;# 
   595  0210                     	;# 
   596  0211                     	;# 
   597  0211                     	;# 
   598  0212                     	;# 
   599  0212                     	;# 
   600  0213                     	;# 
   601  0213                     	;# 
   602  0214                     	;# 
   603  0214                     	;# 
   604  0215                     	;# 
   605  0215                     	;# 
   606  0215                     	;# 
   607  0216                     	;# 
   608  0216                     	;# 
   609  0217                     	;# 
   610  0217                     	;# 
   611  0291                     	;# 
   612  0291                     	;# 
   613  0292                     	;# 
   614  0293                     	;# 
   615  0298                     	;# 
   616  0298                     	;# 
   617  0299                     	;# 
   618  029A                     	;# 
   619  0394                     	;# 
   620  0395                     	;# 
   621  0396                     	;# 
   622  0FE4                     	;# 
   623  0FE5                     	;# 
   624  0FE6                     	;# 
   625  0FE7                     	;# 
   626  0FE8                     	;# 
   627  0FE9                     	;# 
   628  0FEA                     	;# 
   629  0FEB                     	;# 
   630  0FED                     	;# 
   631  0FEE                     	;# 
   632  0FEF                     	;# 
   633  0000                     	;# 
   634  0001                     	;# 
   635  0002                     	;# 
   636  0003                     	;# 
   637  0004                     	;# 
   638  0005                     	;# 
   639  0006                     	;# 
   640  0007                     	;# 
   641  0008                     	;# 
   642  0009                     	;# 
   643  000A                     	;# 
   644  000B                     	;# 
   645  000C                     	;# 
   646  000D                     	;# 
   647  000E                     	;# 
   648  0010                     	;# 
   649  0011                     	;# 
   650  0012                     	;# 
   651  0015                     	;# 
   652  0016                     	;# 
   653  0016                     	;# 
   654  0017                     	;# 
   655  0018                     	;# 
   656  0019                     	;# 
   657  001A                     	;# 
   658  001B                     	;# 
   659  001C                     	;# 
   660  008C                     	;# 
   661  008D                     	;# 
   662  008E                     	;# 
   663  0090                     	;# 
   664  0091                     	;# 
   665  0092                     	;# 
   666  0095                     	;# 
   667  0096                     	;# 
   668  0097                     	;# 
   669  0099                     	;# 
   670  009A                     	;# 
   671  009B                     	;# 
   672  009B                     	;# 
   673  009C                     	;# 
   674  009D                     	;# 
   675  009E                     	;# 
   676  010C                     	;# 
   677  010D                     	;# 
   678  010E                     	;# 
   679  0116                     	;# 
   680  0117                     	;# 
   681  011D                     	;# 
   682  018C                     	;# 
   683  018D                     	;# 
   684  018E                     	;# 
   685  0191                     	;# 
   686  0191                     	;# 
   687  0192                     	;# 
   688  0193                     	;# 
   689  0193                     	;# 
   690  0194                     	;# 
   691  0195                     	;# 
   692  0196                     	;# 
   693  0197                     	;# 
   694  0199                     	;# 
   695  019A                     	;# 
   696  019B                     	;# 
   697  019B                     	;# 
   698  019B                     	;# 
   699  019B                     	;# 
   700  019C                     	;# 
   701  019C                     	;# 
   702  019D                     	;# 
   703  019E                     	;# 
   704  019F                     	;# 
   705  020D                     	;# 
   706  0210                     	;# 
   707  0211                     	;# 
   708  0211                     	;# 
   709  0212                     	;# 
   710  0212                     	;# 
   711  0213                     	;# 
   712  0213                     	;# 
   713  0214                     	;# 
   714  0214                     	;# 
   715  0215                     	;# 
   716  0215                     	;# 
   717  0215                     	;# 
   718  0216                     	;# 
   719  0216                     	;# 
   720  0217                     	;# 
   721  0217                     	;# 
   722  0291                     	;# 
   723  0291                     	;# 
   724  0292                     	;# 
   725  0293                     	;# 
   726  0298                     	;# 
   727  0298                     	;# 
   728  0299                     	;# 
   729  029A                     	;# 
   730  0394                     	;# 
   731  0395                     	;# 
   732  0396                     	;# 
   733  0FE4                     	;# 
   734  0FE5                     	;# 
   735  0FE6                     	;# 
   736  0FE7                     	;# 
   737  0FE8                     	;# 
   738  0FE9                     	;# 
   739  0FEA                     	;# 
   740  0FEB                     	;# 
   741  0FED                     	;# 
   742  0FEE                     	;# 
   743  0FEF                     	;# 
   744  0000                     	;# 
   745  0001                     	;# 
   746  0002                     	;# 
   747  0003                     	;# 
   748  0004                     	;# 
   749  0005                     	;# 
   750  0006                     	;# 
   751  0007                     	;# 
   752  0008                     	;# 
   753  0009                     	;# 
   754  000A                     	;# 
   755  000B                     	;# 
   756  000C                     	;# 
   757  000D                     	;# 
   758  000E                     	;# 
   759  0010                     	;# 
   760  0011                     	;# 
   761  0012                     	;# 
   762  0015                     	;# 
   763  0016                     	;# 
   764  0016                     	;# 
   765  0017                     	;# 
   766  0018                     	;# 
   767  0019                     	;# 
   768  001A                     	;# 
   769  001B                     	;# 
   770  001C                     	;# 
   771  008C                     	;# 
   772  008D                     	;# 
   773  008E                     	;# 
   774  0090                     	;# 
   775  0091                     	;# 
   776  0092                     	;# 
   777  0095                     	;# 
   778  0096                     	;# 
   779  0097                     	;# 
   780  0099                     	;# 
   781  009A                     	;# 
   782  009B                     	;# 
   783  009B                     	;# 
   784  009C                     	;# 
   785  009D                     	;# 
   786  009E                     	;# 
   787  010C                     	;# 
   788  010D                     	;# 
   789  010E                     	;# 
   790  0116                     	;# 
   791  0117                     	;# 
   792  011D                     	;# 
   793  018C                     	;# 
   794  018D                     	;# 
   795  018E                     	;# 
   796  0191                     	;# 
   797  0191                     	;# 
   798  0192                     	;# 
   799  0193                     	;# 
   800  0193                     	;# 
   801  0194                     	;# 
   802  0195                     	;# 
   803  0196                     	;# 
   804  0197                     	;# 
   805  0199                     	;# 
   806  019A                     	;# 
   807  019B                     	;# 
   808  019B                     	;# 
   809  019B                     	;# 
   810  019B                     	;# 
   811  019C                     	;# 
   812  019C                     	;# 
   813  019D                     	;# 
   814  019E                     	;# 
   815  019F                     	;# 
   816  020D                     	;# 
   817  0210                     	;# 
   818  0211                     	;# 
   819  0211                     	;# 
   820  0212                     	;# 
   821  0212                     	;# 
   822  0213                     	;# 
   823  0213                     	;# 
   824  0214                     	;# 
   825  0214                     	;# 
   826  0215                     	;# 
   827  0215                     	;# 
   828  0215                     	;# 
   829  0216                     	;# 
   830  0216                     	;# 
   831  0217                     	;# 
   832  0217                     	;# 
   833  0291                     	;# 
   834  0291                     	;# 
   835  0292                     	;# 
   836  0293                     	;# 
   837  0298                     	;# 
   838  0298                     	;# 
   839  0299                     	;# 
   840  029A                     	;# 
   841  0394                     	;# 
   842  0395                     	;# 
   843  0396                     	;# 
   844  0FE4                     	;# 
   845  0FE5                     	;# 
   846  0FE6                     	;# 
   847  0FE7                     	;# 
   848  0FE8                     	;# 
   849  0FE9                     	;# 
   850  0FEA                     	;# 
   851  0FEB                     	;# 
   852  0FED                     	;# 
   853  0FEE                     	;# 
   854  0FEF                     	;# 
   855  0000                     	;# 
   856  0001                     	;# 
   857  0002                     	;# 
   858  0003                     	;# 
   859  0004                     	;# 
   860  0005                     	;# 
   861  0006                     	;# 
   862  0007                     	;# 
   863  0008                     	;# 
   864  0009                     	;# 
   865  000A                     	;# 
   866  000B                     	;# 
   867  000C                     	;# 
   868  000D                     	;# 
   869  000E                     	;# 
   870  0010                     	;# 
   871  0011                     	;# 
   872  0012                     	;# 
   873  0015                     	;# 
   874  0016                     	;# 
   875  0016                     	;# 
   876  0017                     	;# 
   877  0018                     	;# 
   878  0019                     	;# 
   879  001A                     	;# 
   880  001B                     	;# 
   881  001C                     	;# 
   882  008C                     	;# 
   883  008D                     	;# 
   884  008E                     	;# 
   885  0090                     	;# 
   886  0091                     	;# 
   887  0092                     	;# 
   888  0095                     	;# 
   889  0096                     	;# 
   890  0097                     	;# 
   891  0099                     	;# 
   892  009A                     	;# 
   893  009B                     	;# 
   894  009B                     	;# 
   895  009C                     	;# 
   896  009D                     	;# 
   897  009E                     	;# 
   898  010C                     	;# 
   899  010D                     	;# 
   900  010E                     	;# 
   901  0116                     	;# 
   902  0117                     	;# 
   903  011D                     	;# 
   904  018C                     	;# 
   905  018D                     	;# 
   906  018E                     	;# 
   907  0191                     	;# 
   908  0191                     	;# 
   909  0192                     	;# 
   910  0193                     	;# 
   911  0193                     	;# 
   912  0194                     	;# 
   913  0195                     	;# 
   914  0196                     	;# 
   915  0197                     	;# 
   916  0199                     	;# 
   917  019A                     	;# 
   918  019B                     	;# 
   919  019B                     	;# 
   920  019B                     	;# 
   921  019B                     	;# 
   922  019C                     	;# 
   923  019C                     	;# 
   924  019D                     	;# 
   925  019E                     	;# 
   926  019F                     	;# 
   927  020D                     	;# 
   928  0210                     	;# 
   929  0211                     	;# 
   930  0211                     	;# 
   931  0212                     	;# 
   932  0212                     	;# 
   933  0213                     	;# 
   934  0213                     	;# 
   935  0214                     	;# 
   936  0214                     	;# 
   937  0215                     	;# 
   938  0215                     	;# 
   939  0215                     	;# 
   940  0216                     	;# 
   941  0216                     	;# 
   942  0217                     	;# 
   943  0217                     	;# 
   944  0291                     	;# 
   945  0291                     	;# 
   946  0292                     	;# 
   947  0293                     	;# 
   948  0298                     	;# 
   949  0298                     	;# 
   950  0299                     	;# 
   951  029A                     	;# 
   952  0394                     	;# 
   953  0395                     	;# 
   954  0396                     	;# 
   955  0FE4                     	;# 
   956  0FE5                     	;# 
   957  0FE6                     	;# 
   958  0FE7                     	;# 
   959  0FE8                     	;# 
   960  0FE9                     	;# 
   961  0FEA                     	;# 
   962  0FEB                     	;# 
   963  0FED                     	;# 
   964  0FEE                     	;# 
   965  0FEF                     	;# 
   966  0000                     	;# 
   967  0001                     	;# 
   968  0002                     	;# 
   969  0003                     	;# 
   970  0004                     	;# 
   971  0005                     	;# 
   972  0006                     	;# 
   973  0007                     	;# 
   974  0008                     	;# 
   975  0009                     	;# 
   976  000A                     	;# 
   977  000B                     	;# 
   978  000C                     	;# 
   979  000D                     	;# 
   980  000E                     	;# 
   981  0010                     	;# 
   982  0011                     	;# 
   983  0012                     	;# 
   984  0015                     	;# 
   985  0016                     	;# 
   986  0016                     	;# 
   987  0017                     	;# 
   988  0018                     	;# 
   989  0019                     	;# 
   990  001A                     	;# 
   991  001B                     	;# 
   992  001C                     	;# 
   993  008C                     	;# 
   994  008D                     	;# 
   995  008E                     	;# 
   996  0090                     	;# 
   997  0091                     	;# 
   998  0092                     	;# 
   999  0095                     	;# 
  1000  0096                     	;# 
  1001  0097                     	;# 
  1002  0099                     	;# 
  1003  009A                     	;# 
  1004  009B                     	;# 
  1005  009B                     	;# 
  1006  009C                     	;# 
  1007  009D                     	;# 
  1008  009E                     	;# 
  1009  010C                     	;# 
  1010  010D                     	;# 
  1011  010E                     	;# 
  1012  0116                     	;# 
  1013  0117                     	;# 
  1014  011D                     	;# 
  1015  018C                     	;# 
  1016  018D                     	;# 
  1017  018E                     	;# 
  1018  0191                     	;# 
  1019  0191                     	;# 
  1020  0192                     	;# 
  1021  0193                     	;# 
  1022  0193                     	;# 
  1023  0194                     	;# 
  1024  0195                     	;# 
  1025  0196                     	;# 
  1026  0197                     	;# 
  1027  0199                     	;# 
  1028  019A                     	;# 
  1029  019B                     	;# 
  1030  019B                     	;# 
  1031  019B                     	;# 
  1032  019B                     	;# 
  1033  019C                     	;# 
  1034  019C                     	;# 
  1035  019D                     	;# 
  1036  019E                     	;# 
  1037  019F                     	;# 
  1038  020D                     	;# 
  1039  0210                     	;# 
  1040  0211                     	;# 
  1041  0211                     	;# 
  1042  0212                     	;# 
  1043  0212                     	;# 
  1044  0213                     	;# 
  1045  0213                     	;# 
  1046  0214                     	;# 
  1047  0214                     	;# 
  1048  0215                     	;# 
  1049  0215                     	;# 
  1050  0215                     	;# 
  1051  0216                     	;# 
  1052  0216                     	;# 
  1053  0217                     	;# 
  1054  0217                     	;# 
  1055  0291                     	;# 
  1056  0291                     	;# 
  1057  0292                     	;# 
  1058  0293                     	;# 
  1059  0298                     	;# 
  1060  0298                     	;# 
  1061  0299                     	;# 
  1062  029A                     	;# 
  1063  0394                     	;# 
  1064  0395                     	;# 
  1065  0396                     	;# 
  1066  0FE4                     	;# 
  1067  0FE5                     	;# 
  1068  0FE6                     	;# 
  1069  0FE7                     	;# 
  1070  0FE8                     	;# 
  1071  0FE9                     	;# 
  1072  0FEA                     	;# 
  1073  0FEB                     	;# 
  1074  0FED                     	;# 
  1075  0FEE                     	;# 
  1076  0FEF                     	;# 
  1077  0000                     	;# 
  1078  0001                     	;# 
  1079  0002                     	;# 
  1080  0003                     	;# 
  1081  0004                     	;# 
  1082  0005                     	;# 
  1083  0006                     	;# 
  1084  0007                     	;# 
  1085  0008                     	;# 
  1086  0009                     	;# 
  1087  000A                     	;# 
  1088  000B                     	;# 
  1089  000C                     	;# 
  1090  000D                     	;# 
  1091  000E                     	;# 
  1092  0010                     	;# 
  1093  0011                     	;# 
  1094  0012                     	;# 
  1095  0015                     	;# 
  1096  0016                     	;# 
  1097  0016                     	;# 
  1098  0017                     	;# 
  1099  0018                     	;# 
  1100  0019                     	;# 
  1101  001A                     	;# 
  1102  001B                     	;# 
  1103  001C                     	;# 
  1104  008C                     	;# 
  1105  008D                     	;# 
  1106  008E                     	;# 
  1107  0090                     	;# 
  1108  0091                     	;# 
  1109  0092                     	;# 
  1110  0095                     	;# 
  1111  0096                     	;# 
  1112  0097                     	;# 
  1113  0099                     	;# 
  1114  009A                     	;# 
  1115  009B                     	;# 
  1116  009B                     	;# 
  1117  009C                     	;# 
  1118  009D                     	;# 
  1119  009E                     	;# 
  1120  010C                     	;# 
  1121  010D                     	;# 
  1122  010E                     	;# 
  1123  0116                     	;# 
  1124  0117                     	;# 
  1125  011D                     	;# 
  1126  018C                     	;# 
  1127  018D                     	;# 
  1128  018E                     	;# 
  1129  0191                     	;# 
  1130  0191                     	;# 
  1131  0192                     	;# 
  1132  0193                     	;# 
  1133  0193                     	;# 
  1134  0194                     	;# 
  1135  0195                     	;# 
  1136  0196                     	;# 
  1137  0197                     	;# 
  1138  0199                     	;# 
  1139  019A                     	;# 
  1140  019B                     	;# 
  1141  019B                     	;# 
  1142  019B                     	;# 
  1143  019B                     	;# 
  1144  019C                     	;# 
  1145  019C                     	;# 
  1146  019D                     	;# 
  1147  019E                     	;# 
  1148  019F                     	;# 
  1149  020D                     	;# 
  1150  0210                     	;# 
  1151  0211                     	;# 
  1152  0211                     	;# 
  1153  0212                     	;# 
  1154  0212                     	;# 
  1155  0213                     	;# 
  1156  0213                     	;# 
  1157  0214                     	;# 
  1158  0214                     	;# 
  1159  0215                     	;# 
  1160  0215                     	;# 
  1161  0215                     	;# 
  1162  0216                     	;# 
  1163  0216                     	;# 
  1164  0217                     	;# 
  1165  0217                     	;# 
  1166  0291                     	;# 
  1167  0291                     	;# 
  1168  0292                     	;# 
  1169  0293                     	;# 
  1170  0298                     	;# 
  1171  0298                     	;# 
  1172  0299                     	;# 
  1173  029A                     	;# 
  1174  0394                     	;# 
  1175  0395                     	;# 
  1176  0396                     	;# 
  1177  0FE4                     	;# 
  1178  0FE5                     	;# 
  1179  0FE6                     	;# 
  1180  0FE7                     	;# 
  1181  0FE8                     	;# 
  1182  0FE9                     	;# 
  1183  0FEA                     	;# 
  1184  0FEB                     	;# 
  1185  0FED                     	;# 
  1186  0FEE                     	;# 
  1187  0FEF                     	;# 
  1188  0000                     	;# 
  1189  0001                     	;# 
  1190  0002                     	;# 
  1191  0003                     	;# 
  1192  0004                     	;# 
  1193  0005                     	;# 
  1194  0006                     	;# 
  1195  0007                     	;# 
  1196  0008                     	;# 
  1197  0009                     	;# 
  1198  000A                     	;# 
  1199  000B                     	;# 
  1200  000C                     	;# 
  1201  000D                     	;# 
  1202  000E                     	;# 
  1203  0010                     	;# 
  1204  0011                     	;# 
  1205  0012                     	;# 
  1206  0015                     	;# 
  1207  0016                     	;# 
  1208  0016                     	;# 
  1209  0017                     	;# 
  1210  0018                     	;# 
  1211  0019                     	;# 
  1212  001A                     	;# 
  1213  001B                     	;# 
  1214  001C                     	;# 
  1215  008C                     	;# 
  1216  008D                     	;# 
  1217  008E                     	;# 
  1218  0090                     	;# 
  1219  0091                     	;# 
  1220  0092                     	;# 
  1221  0095                     	;# 
  1222  0096                     	;# 
  1223  0097                     	;# 
  1224  0099                     	;# 
  1225  009A                     	;# 
  1226  009B                     	;# 
  1227  009B                     	;# 
  1228  009C                     	;# 
  1229  009D                     	;# 
  1230  009E                     	;# 
  1231  010C                     	;# 
  1232  010D                     	;# 
  1233  010E                     	;# 
  1234  0116                     	;# 
  1235  0117                     	;# 
  1236  011D                     	;# 
  1237  018C                     	;# 
  1238  018D                     	;# 
  1239  018E                     	;# 
  1240  0191                     	;# 
  1241  0191                     	;# 
  1242  0192                     	;# 
  1243  0193                     	;# 
  1244  0193                     	;# 
  1245  0194                     	;# 
  1246  0195                     	;# 
  1247  0196                     	;# 
  1248  0197                     	;# 
  1249  0199                     	;# 
  1250  019A                     	;# 
  1251  019B                     	;# 
  1252  019B                     	;# 
  1253  019B                     	;# 
  1254  019B                     	;# 
  1255  019C                     	;# 
  1256  019C                     	;# 
  1257  019D                     	;# 
  1258  019E                     	;# 
  1259  019F                     	;# 
  1260  020D                     	;# 
  1261  0210                     	;# 
  1262  0211                     	;# 
  1263  0211                     	;# 
  1264  0212                     	;# 
  1265  0212                     	;# 
  1266  0213                     	;# 
  1267  0213                     	;# 
  1268  0214                     	;# 
  1269  0214                     	;# 
  1270  0215                     	;# 
  1271  0215                     	;# 
  1272  0215                     	;# 
  1273  0216                     	;# 
  1274  0216                     	;# 
  1275  0217                     	;# 
  1276  0217                     	;# 
  1277  0291                     	;# 
  1278  0291                     	;# 
  1279  0292                     	;# 
  1280  0293                     	;# 
  1281  0298                     	;# 
  1282  0298                     	;# 
  1283  0299                     	;# 
  1284  029A                     	;# 
  1285  0394                     	;# 
  1286  0395                     	;# 
  1287  0396                     	;# 
  1288  0FE4                     	;# 
  1289  0FE5                     	;# 
  1290  0FE6                     	;# 
  1291  0FE7                     	;# 
  1292  0FE8                     	;# 
  1293  0FE9                     	;# 
  1294  0FEA                     	;# 
  1295  0FEB                     	;# 
  1296  0FED                     	;# 
  1297  0FEE                     	;# 
  1298  0FEF                     	;# 
  1299  0000                     	;# 
  1300  0001                     	;# 
  1301  0002                     	;# 
  1302  0003                     	;# 
  1303  0004                     	;# 
  1304  0005                     	;# 
  1305  0006                     	;# 
  1306  0007                     	;# 
  1307  0008                     	;# 
  1308  0009                     	;# 
  1309  000A                     	;# 
  1310  000B                     	;# 
  1311  000C                     	;# 
  1312  000D                     	;# 
  1313  000E                     	;# 
  1314  0010                     	;# 
  1315  0011                     	;# 
  1316  0012                     	;# 
  1317  0015                     	;# 
  1318  0016                     	;# 
  1319  0016                     	;# 
  1320  0017                     	;# 
  1321  0018                     	;# 
  1322  0019                     	;# 
  1323  001A                     	;# 
  1324  001B                     	;# 
  1325  001C                     	;# 
  1326  008C                     	;# 
  1327  008D                     	;# 
  1328  008E                     	;# 
  1329  0090                     	;# 
  1330  0091                     	;# 
  1331  0092                     	;# 
  1332  0095                     	;# 
  1333  0096                     	;# 
  1334  0097                     	;# 
  1335  0099                     	;# 
  1336  009A                     	;# 
  1337  009B                     	;# 
  1338  009B                     	;# 
  1339  009C                     	;# 
  1340  009D                     	;# 
  1341  009E                     	;# 
  1342  010C                     	;# 
  1343  010D                     	;# 
  1344  010E                     	;# 
  1345  0116                     	;# 
  1346  0117                     	;# 
  1347  011D                     	;# 
  1348  018C                     	;# 
  1349  018D                     	;# 
  1350  018E                     	;# 
  1351  0191                     	;# 
  1352  0191                     	;# 
  1353  0192                     	;# 
  1354  0193                     	;# 
  1355  0193                     	;# 
  1356  0194                     	;# 
  1357  0195                     	;# 
  1358  0196                     	;# 
  1359  0197                     	;# 
  1360  0199                     	;# 
  1361  019A                     	;# 
  1362  019B                     	;# 
  1363  019B                     	;# 
  1364  019B                     	;# 
  1365  019B                     	;# 
  1366  019C                     	;# 
  1367  019C                     	;# 
  1368  019D                     	;# 
  1369  019E                     	;# 
  1370  019F                     	;# 
  1371  020D                     	;# 
  1372  0210                     	;# 
  1373  0211                     	;# 
  1374  0211                     	;# 
  1375  0212                     	;# 
  1376  0212                     	;# 
  1377  0213                     	;# 
  1378  0213                     	;# 
  1379  0214                     	;# 
  1380  0214                     	;# 
  1381  0215                     	;# 
  1382  0215                     	;# 
  1383  0215                     	;# 
  1384  0216                     	;# 
  1385  0216                     	;# 
  1386  0217                     	;# 
  1387  0217                     	;# 
  1388  0291                     	;# 
  1389  0291                     	;# 
  1390  0292                     	;# 
  1391  0293                     	;# 
  1392  0298                     	;# 
  1393  0298                     	;# 
  1394  0299                     	;# 
  1395  029A                     	;# 
  1396  0394                     	;# 
  1397  0395                     	;# 
  1398  0396                     	;# 
  1399  0FE4                     	;# 
  1400  0FE5                     	;# 
  1401  0FE6                     	;# 
  1402  0FE7                     	;# 
  1403  0FE8                     	;# 
  1404  0FE9                     	;# 
  1405  0FEA                     	;# 
  1406  0FEB                     	;# 
  1407  0FED                     	;# 
  1408  0FEE                     	;# 
  1409  0FEF                     	;# 
  1410  0000                     	;# 
  1411  0001                     	;# 
  1412  0002                     	;# 
  1413  0003                     	;# 
  1414  0004                     	;# 
  1415  0005                     	;# 
  1416  0006                     	;# 
  1417  0007                     	;# 
  1418  0008                     	;# 
  1419  0009                     	;# 
  1420  000A                     	;# 
  1421  000B                     	;# 
  1422  000C                     	;# 
  1423  000D                     	;# 
  1424  000E                     	;# 
  1425  0010                     	;# 
  1426  0011                     	;# 
  1427  0012                     	;# 
  1428  0015                     	;# 
  1429  0016                     	;# 
  1430  0016                     	;# 
  1431  0017                     	;# 
  1432  0018                     	;# 
  1433  0019                     	;# 
  1434  001A                     	;# 
  1435  001B                     	;# 
  1436  001C                     	;# 
  1437  008C                     	;# 
  1438  008D                     	;# 
  1439  008E                     	;# 
  1440  0090                     	;# 
  1441  0091                     	;# 
  1442  0092                     	;# 
  1443  0095                     	;# 
  1444  0096                     	;# 
  1445  0097                     	;# 
  1446  0099                     	;# 
  1447  009A                     	;# 
  1448  009B                     	;# 
  1449  009B                     	;# 
  1450  009C                     	;# 
  1451  009D                     	;# 
  1452  009E                     	;# 
  1453  010C                     	;# 
  1454  010D                     	;# 
  1455  010E                     	;# 
  1456  0116                     	;# 
  1457  0117                     	;# 
  1458  011D                     	;# 
  1459  018C                     	;# 
  1460  018D                     	;# 
  1461  018E                     	;# 
  1462  0191                     	;# 
  1463  0191                     	;# 
  1464  0192                     	;# 
  1465  0193                     	;# 
  1466  0193                     	;# 
  1467  0194                     	;# 
  1468  0195                     	;# 
  1469  0196                     	;# 
  1470  0197                     	;# 
  1471  0199                     	;# 
  1472  019A                     	;# 
  1473  019B                     	;# 
  1474  019B                     	;# 
  1475  019B                     	;# 
  1476  019B                     	;# 
  1477  019C                     	;# 
  1478  019C                     	;# 
  1479  019D                     	;# 
  1480  019E                     	;# 
  1481  019F                     	;# 
  1482  020D                     	;# 
  1483  0210                     	;# 
  1484  0211                     	;# 
  1485  0211                     	;# 
  1486  0212                     	;# 
  1487  0212                     	;# 
  1488  0213                     	;# 
  1489  0213                     	;# 
  1490  0214                     	;# 
  1491  0214                     	;# 
  1492  0215                     	;# 
  1493  0215                     	;# 
  1494  0215                     	;# 
  1495  0216                     	;# 
  1496  0216                     	;# 
  1497  0217                     	;# 
  1498  0217                     	;# 
  1499  0291                     	;# 
  1500  0291                     	;# 
  1501  0292                     	;# 
  1502  0293                     	;# 
  1503  0298                     	;# 
  1504  0298                     	;# 
  1505  0299                     	;# 
  1506  029A                     	;# 
  1507  0394                     	;# 
  1508  0395                     	;# 
  1509  0396                     	;# 
  1510  0FE4                     	;# 
  1511  0FE5                     	;# 
  1512  0FE6                     	;# 
  1513  0FE7                     	;# 
  1514  0FE8                     	;# 
  1515  0FE9                     	;# 
  1516  0FEA                     	;# 
  1517  0FEB                     	;# 
  1518  0FED                     	;# 
  1519  0FEE                     	;# 
  1520  0FEF                     	;# 
  1521  0000                     	;# 
  1522  0001                     	;# 
  1523  0002                     	;# 
  1524  0003                     	;# 
  1525  0004                     	;# 
  1526  0005                     	;# 
  1527  0006                     	;# 
  1528  0007                     	;# 
  1529  0008                     	;# 
  1530  0009                     	;# 
  1531  000A                     	;# 
  1532  000B                     	;# 
  1533  000C                     	;# 
  1534  000D                     	;# 
  1535  000E                     	;# 
  1536  0010                     	;# 
  1537  0011                     	;# 
  1538  0012                     	;# 
  1539  0015                     	;# 
  1540  0016                     	;# 
  1541  0016                     	;# 
  1542  0017                     	;# 
  1543  0018                     	;# 
  1544  0019                     	;# 
  1545  001A                     	;# 
  1546  001B                     	;# 
  1547  001C                     	;# 
  1548  008C                     	;# 
  1549  008D                     	;# 
  1550  008E                     	;# 
  1551  0090                     	;# 
  1552  0091                     	;# 
  1553  0092                     	;# 
  1554  0095                     	;# 
  1555  0096                     	;# 
  1556  0097                     	;# 
  1557  0099                     	;# 
  1558  009A                     	;# 
  1559  009B                     	;# 
  1560  009B                     	;# 
  1561  009C                     	;# 
  1562  009D                     	;# 
  1563  009E                     	;# 
  1564  010C                     	;# 
  1565  010D                     	;# 
  1566  010E                     	;# 
  1567  0116                     	;# 
  1568  0117                     	;# 
  1569  011D                     	;# 
  1570  018C                     	;# 
  1571  018D                     	;# 
  1572  018E                     	;# 
  1573  0191                     	;# 
  1574  0191                     	;# 
  1575  0192                     	;# 
  1576  0193                     	;# 
  1577  0193                     	;# 
  1578  0194                     	;# 
  1579  0195                     	;# 
  1580  0196                     	;# 
  1581  0197                     	;# 
  1582  0199                     	;# 
  1583  019A                     	;# 
  1584  019B                     	;# 
  1585  019B                     	;# 
  1586  019B                     	;# 
  1587  019B                     	;# 
  1588  019C                     	;# 
  1589  019C                     	;# 
  1590  019D                     	;# 
  1591  019E                     	;# 
  1592  019F                     	;# 
  1593  020D                     	;# 
  1594  0210                     	;# 
  1595  0211                     	;# 
  1596  0211                     	;# 
  1597  0212                     	;# 
  1598  0212                     	;# 
  1599  0213                     	;# 
  1600  0213                     	;# 
  1601  0214                     	;# 
  1602  0214                     	;# 
  1603  0215                     	;# 
  1604  0215                     	;# 
  1605  0215                     	;# 
  1606  0216                     	;# 
  1607  0216                     	;# 
  1608  0217                     	;# 
  1609  0217                     	;# 
  1610  0291                     	;# 
  1611  0291                     	;# 
  1612  0292                     	;# 
  1613  0293                     	;# 
  1614  0298                     	;# 
  1615  0298                     	;# 
  1616  0299                     	;# 
  1617  029A                     	;# 
  1618  0394                     	;# 
  1619  0395                     	;# 
  1620  0396                     	;# 
  1621  0FE4                     	;# 
  1622  0FE5                     	;# 
  1623  0FE6                     	;# 
  1624  0FE7                     	;# 
  1625  0FE8                     	;# 
  1626  0FE9                     	;# 
  1627  0FEA                     	;# 
  1628  0FEB                     	;# 
  1629  0FED                     	;# 
  1630  0FEE                     	;# 
  1631  0FEF                     	;# 
  1632                           
  1633                           	psect	idataBANK1
  1634  0B08                     __pidataBANK1:	
  1635                           
  1636                           ;initializer for _cc1PaTable
  1637  0B08  3403               	retlw	3
  1638  0B09  340F               	retlw	15
  1639  0B0A  341E               	retlw	30
  1640  0B0B  3427               	retlw	39
  1641  0B0C  3450               	retlw	80
  1642  0B0D  3481               	retlw	129
  1643  0B0E  34CB               	retlw	203
  1644  0B0F  34C2               	retlw	194
  1645                           
  1646                           	psect	idataBANK3
  1647  0EF7                     __pidataBANK3:	
  1648                           
  1649                           ;initializer for _cc1InitVal
  1650  0EF7  3447               	retlw	71
  1651  0EF8  3446               	retlw	70
  1652  0EF9  344E               	retlw	78
  1653  0EFA  340B               	retlw	11
  1654  0EFB  34D3               	retlw	211
  1655  0EFC  3491               	retlw	145
  1656  0EFD  340A               	retlw	10
  1657  0EFE  3408               	retlw	8
  1658  0EFF  3404               	retlw	4
  1659  0F00  3400               	retlw	0
  1660  0F01  3400               	retlw	0
  1661  0F02  3406               	retlw	6
  1662  0F03  3400               	retlw	0
  1663  0F04  3421               	retlw	33
  1664  0F05  3463               	retlw	99
  1665  0F06  3491               	retlw	145
  1666  0F07  34CA               	retlw	202
  1667  0F08  3483               	retlw	131
  1668  0F09  3402               	retlw	2
  1669  0F0A  3402               	retlw	2
  1670  0F0B  343B               	retlw	59
  1671  0F0C  3434               	retlw	52
  1672  0F0D  3407               	retlw	7
  1673  0F0E  343F               	retlw	63
  1674  0F0F  3408               	retlw	8
  1675  0F10  3416               	retlw	22
  1676  0F11  346C               	retlw	108
  1677  0F12  3403               	retlw	3
  1678  0F13  3440               	retlw	64
  1679  0F14  3491               	retlw	145
  1680  0F15  3487               	retlw	135
  1681  0F16  346B               	retlw	107
  1682  0F17  34FB               	retlw	251
  1683  0F18  3456               	retlw	86
  1684  0F19  3416               	retlw	22
  1685  0F1A  34E9               	retlw	233
  1686  0F1B  342A               	retlw	42
  1687  0F1C  3400               	retlw	0
  1688  0F1D  341F               	retlw	31
  1689  0F1E  3441               	retlw	65
  1690  0F1F  3400               	retlw	0
  1691  0F20  3459               	retlw	89
  1692  0F21  347F               	retlw	127
  1693  0F22  343F               	retlw	63
  1694  0F23  3481               	retlw	129
  1695  0F24  3435               	retlw	53
  1696  0F25  3409               	retlw	9
  1697                           
  1698                           	psect	stringtext
  1699  1000                     __pstringtext:	
  1700  1000                     _nvm_pgm_cfg:	
  1701  1000  345C               	retlw	92
  1702  1001  34C5               	retlw	197
  1703  1002  3400               	retlw	0
  1704  1003  3400               	retlw	0
  1705  1004  3400               	retlw	0
  1706  1005                     __end_of_nvm_pgm_cfg:	
  1707  000B                     _INTCON	set	11
  1708  000B                     _INTCONbits	set	11
  1709  0011                     _PIR1	set	17
  1710  0011                     _PIR1bits	set	17
  1711  0012                     _PIR2	set	18
  1712  000C                     _PORTA	set	12
  1713  000D                     _PORTBbits	set	13
  1714  000E                     _PORTC	set	14
  1715  0018                     _T1CON	set	24
  1716  0015                     _TMR0	set	21
  1717  009D                     _ADCON0	set	157
  1718  009D                     _ADCON0bits	set	157
  1719  009E                     _ADCON1	set	158
  1720  009C                     _ADRESH	set	156
  1721  009B                     _ADRESL	set	155
  1722  0095                     _OPTION_REG	set	149
  1723  0099                     _OSCCON	set	153
  1724  0091                     _PIE1	set	145
  1725  0092                     _PIE2	set	146
  1726  008C                     _TRISA	set	140
  1727  008D                     _TRISB	set	141
  1728  008E                     _TRISC	set	142
  1729  0097                     _WDTCON	set	151
  1730  0117                     _FVRCON	set	279
  1731  010C                     _LATAbits	set	268
  1732  010E                     _LATCbits	set	270
  1733  0191                     _PMADR	set	401
  1734  0193                     _PMDAT	set	403
  1735  018C                     _ANSELA	set	396
  1736  018D                     _ANSELB	set	397
  1737  018E                     _ANSELC	set	398
  1738  0195                     _PMCON1	set	405
  1739  0195                     _PMCON1bits	set	405
  1740  0196                     _PMCON2	set	406
  1741  0211                     _SSPBUF	set	529
  1742  0215                     _SSPCON1	set	533
  1743  0216                     _SSPCON2	set	534
  1744  0215                     _SSPCONbits	set	533
  1745  0214                     _SSPSTAT	set	532
  1746  020D                     _WPUB	set	525
  1747  0396                     _IOCBFbits	set	918
  1748  0395                     _IOCBN	set	917
  1749  0394                     _IOCBP	set	916
  1750                           
  1751                           ; #config settings
  1752  0000                     
  1753                           	psect	cinit
  1754  0016                     start_initialization:	
  1755  0016                     __initialization:	
  1756                           
  1757                           ; Clear objects allocated to COMMON
  1758  0016  01FC               	clrf	__pbssCOMMON& (0+127)
  1759                           
  1760                           ; Clear objects allocated to BANK0
  1761  0017  3069               	movlw	low __pbssBANK0
  1762  0018  0084               	movwf	4
  1763  0019  3000               	movlw	high __pbssBANK0
  1764  001A  0085               	movwf	5
  1765  001B  3007               	movlw	7
  1766  001C  318A  22FA  3180   	fcall	clear_ram0
  1767                           
  1768                           ; Clear objects allocated to BANK1
  1769  001F  30A0               	movlw	low __pbssBANK1
  1770  0020  0084               	movwf	4
  1771  0021  3000               	movlw	high __pbssBANK1
  1772  0022  0085               	movwf	5
  1773  0023  302F               	movlw	47
  1774  0024  318A  22FA  3180   	fcall	clear_ram0
  1775                           
  1776                           ; Clear objects allocated to BANK2
  1777  0027  3020               	movlw	low __pbssBANK2
  1778  0028  0084               	movwf	4
  1779  0029  3001               	movlw	high __pbssBANK2
  1780  002A  0085               	movwf	5
  1781  002B  302E               	movlw	46
  1782  002C  318A  22FA  3180   	fcall	clear_ram0
  1783                           
  1784                           ; Initialize objects allocated to BANK1
  1785  002F  3008               	movlw	low __pidataBANK1
  1786  0030  0084               	movwf	4
  1787  0031  308B               	movlw	(high __pidataBANK1)| (0+128)
  1788  0032  0085               	movwf	5
  1789  0033  30CF               	movlw	low __pdataBANK1
  1790  0034  0086               	movwf	6
  1791  0035  3000               	movlw	high __pdataBANK1
  1792  0036  0087               	movwf	7
  1793  0037  3008               	movlw	8
  1794  0038  318A  22F4  3180   	fcall	init_ram
  1795                           
  1796                           ; Initialize objects allocated to BANK3
  1797  003B  30F7               	movlw	low __pidataBANK3
  1798  003C  0084               	movwf	4
  1799  003D  308E               	movlw	(high __pidataBANK3)| (0+128)
  1800  003E  0085               	movwf	5
  1801  003F  30A0               	movlw	low __pdataBANK3
  1802  0040  0086               	movwf	6
  1803  0041  3001               	movlw	high __pdataBANK3
  1804  0042  0087               	movwf	7
  1805  0043  302F               	movlw	47
  1806  0044  318A  22F4         	fcall	init_ram
  1807  0046                     end_of_initialization:	
  1808                           ;End of C runtime variable initialization code
  1809                           
  1810  0046                     __end_of__initialization:	
  1811  0046  0020               	movlb	0
  1812  0047  3187  2F98         	ljmp	_main	;jump to C main() function
  1813                           
  1814                           	psect	bssCOMMON
  1815  007C                     __pbssCOMMON:	
  1816  007C                     _u_in_sta_currTask:	
  1817  007C                     	ds	1
  1818                           
  1819                           	psect	bssBANK0
  1820  0069                     __pbssBANK0:	
  1821  0069                     _adc_ch:	
  1822  0069                     	ds	1
  1823  006A                     _flg_slp:	
  1824  006A                     	ds	1
  1825  006B                     _pgm_flg:	
  1826  006B                     	ds	1
  1827  006C                     _tmrPgm:	
  1828  006C                     	ds	1
  1829  006D                     _tmrRcvPkt:	
  1830  006D                     	ds	1
  1831  006E                     _u_flg_din:	
  1832  006E                     	ds	1
  1833  006F                     _u_in_sta_tmpTask:	
  1834  006F                     	ds	1
  1835                           
  1836                           	psect	bssBANK1
  1837  00A0                     __pbssBANK1:	
  1838  00A0                     _battV:	
  1839  00A0                     	ds	3
  1840  00A3                     _rmsCurr:	
  1841  00A3                     	ds	3
  1842  00A6                     _batt:	
  1843  00A6                     	ds	2
  1844  00A8                     _errno:	
  1845  00A8                     	ds	2
  1846  00AA                     _tmrLongSel:	
  1847  00AA                     	ds	2
  1848  00AC                     _cntSndData:	
  1849  00AC                     	ds	1
  1850  00AD                     _e_POS_PKT:	
  1851  00AD                     	ds	1
  1852  00AE                     _rtx_flg:	
  1853  00AE                     	ds	1
  1854  00AF                     _s_CC1_FLG:	
  1855  00AF                     	ds	1
  1856  00B0                     _sys_pgm_sta:	
  1857  00B0                     	ds	1
  1858  00B1                     _tmrDbncSel:	
  1859  00B1                     	ds	1
  1860  00B2                     _u_SYS_STA:	
  1861  00B2                     	ds	1
  1862  00B3                     _u_in_ev_down:	
  1863  00B3                     	ds	1
  1864  00B4                     _u_in_ev_long:	
  1865  00B4                     	ds	1
  1866  00B5                     _u_in_ev_up:	
  1867  00B5                     	ds	1
  1868  00B6                     _pktRx:	
  1869  00B6                     	ds	10
  1870  00C0                     _pktTx:	
  1871  00C0                     	ds	10
  1872  00CA                     _pgm_cfg:	
  1873  00CA                     	ds	5
  1874                           
  1875                           	psect	dataBANK1
  1876  00CF                     __pdataBANK1:	
  1877  00CF                     _cc1PaTable:	
  1878  00CF                     	ds	8
  1879                           
  1880                           	psect	bssBANK2
  1881  0120                     __pbssBANK2:	
  1882  0120                     _cc1InitVal_tmp:	
  1883  0120                     	ds	46
  1884                           
  1885                           	psect	dataBANK3
  1886  01A0                     __pdataBANK3:	
  1887  01A0                     _cc1InitVal:	
  1888  01A0                     	ds	47
  1889                           
  1890                           	psect	clrtext
  1891  0AFA                     clear_ram0:	
  1892                           ;	Called with FSR0 containing the base address, and
  1893                           ;	WREG with the size to clear
  1894                           
  1895  0AFA  0064               	clrwdt	;clear the watchdog before getting into this loop
  1896  0AFB                     clrloop0:	
  1897  0AFB  0180               	clrf	0	;clear RAM location pointed to by FSR
  1898  0AFC  3101               	addfsr 0,1
  1899  0AFD  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1900  0AFE  2AFB               	goto	clrloop0	;have we reached the end yet?
  1901  0AFF  3400               	retlw	0	;all done for this memory range, return
  1902                           
  1903                           	psect	inittext
  1904  0AF4                     init_ram:	
  1905  0AF4  00FE               	movwf	126
  1906  0AF5                     initloop:	
  1907  0AF5  0012               	moviw fsr0++
  1908  0AF6  001E               	movwi fsr1++
  1909  0AF7  0BFE               	decfsz	126,f
  1910  0AF8  2AF5               	goto	initloop
  1911  0AF9  3400               	retlw	0
  1912                           
  1913                           	psect	cstackCOMMON
  1914  0070                     __pcstackCOMMON:	
  1915  0070                     ?_CC1Strobe:	
  1916  0070                     ?_CC1LoadREG:	
  1917                           ; 0 bytes @ 0x0
  1918                           
  1919  0070                     ?_PGMReadNvm:	
  1920                           ; 0 bytes @ 0x0
  1921                           
  1922  0070                     ?_PGMCheckNvm:	
  1923                           ; 0 bytes @ 0x0
  1924                           
  1925  0070                     ?_PGMNvmReset:	
  1926                           ; 0 bytes @ 0x0
  1927                           
  1928  0070                     ?_RTXStartSendData:	
  1929                           ; 0 bytes @ 0x0
  1930                           
  1931  0070                     ?_RTXSendData:	
  1932                           ; 0 bytes @ 0x0
  1933                           
  1934  0070                     ?_RTXReadPkt:	
  1935                           ; 0 bytes @ 0x0
  1936                           
  1937  0070                     ?_RTXSendRPgm:	
  1938                           ; 0 bytes @ 0x0
  1939                           
  1940  0070                     ?_INInit:	
  1941                           ; 0 bytes @ 0x0
  1942                           
  1943  0070                     ?_OUTInit:	
  1944                           ; 0 bytes @ 0x0
  1945                           
  1946  0070                     ?_SPIInit:	
  1947                           ; 0 bytes @ 0x0
  1948                           
  1949  0070                     ?_ADCInit:	
  1950                           ; 0 bytes @ 0x0
  1951                           
  1952  0070                     ?_ADCConv:	
  1953                           ; 0 bytes @ 0x0
  1954                           
  1955  0070                     ?_CC1Init:	
  1956                           ; 0 bytes @ 0x0
  1957                           
  1958  0070                     ?_CC1Sleep:	
  1959                           ; 0 bytes @ 0x0
  1960                           
  1961  0070                     ?_LEDInit:	
  1962                           ; 0 bytes @ 0x0
  1963                           
  1964  0070                     ?_LEDNormalFlash:	
  1965                           ; 0 bytes @ 0x0
  1966                           
  1967  0070                     ?_LEDFastFlash:	
  1968                           ; 0 bytes @ 0x0
  1969                           
  1970  0070                     ?_NVMInit:	
  1971                           ; 0 bytes @ 0x0
  1972                           
  1973  0070                     ?_DINInit:	
  1974                           ; 0 bytes @ 0x0
  1975                           
  1976  0070                     ?_DINTick:	
  1977                           ; 0 bytes @ 0x0
  1978                           
  1979  0070                     ?_DINTask:	
  1980                           ; 0 bytes @ 0x0
  1981                           
  1982  0070                     ?_SLPSleep:	
  1983                           ; 0 bytes @ 0x0
  1984                           
  1985  0070                     ?_PGMInit:	
  1986                           ; 0 bytes @ 0x0
  1987                           
  1988  0070                     ?_PGMTick:	
  1989                           ; 0 bytes @ 0x0
  1990                           
  1991  0070                     ?_PGMWriteNvm:	
  1992                           ; 0 bytes @ 0x0
  1993                           
  1994  0070                     ?_PGMPgmOff:	
  1995                           ; 0 bytes @ 0x0
  1996                           
  1997  0070                     ?_PGMSelDown:	
  1998                           ; 0 bytes @ 0x0
  1999                           
  2000  0070                     ?_PGMSelLong:	
  2001                           ; 0 bytes @ 0x0
  2002                           
  2003  0070                     ?_RTXInit:	
  2004                           ; 0 bytes @ 0x0
  2005                           
  2006  0070                     ?_RTXTick:	
  2007                           ; 0 bytes @ 0x0
  2008                           
  2009  0070                     ?_RTXTask:	
  2010                           ; 0 bytes @ 0x0
  2011                           
  2012  0070                     ?_RTXAwake:	
  2013                           ; 0 bytes @ 0x0
  2014                           
  2015  0070                     ?_SYSInit:	
  2016                           ; 0 bytes @ 0x0
  2017                           
  2018  0070                     ?_SYSInt:	
  2019                           ; 0 bytes @ 0x0
  2020                           
  2021  0070                     ??_SYSInt:	
  2022                           ; 0 bytes @ 0x0
  2023                           
  2024  0070                     ?_SYSTask:	
  2025                           ; 0 bytes @ 0x0
  2026                           
  2027  0070                     ?_INTIsr:	
  2028                           ; 0 bytes @ 0x0
  2029                           
  2030  0070                     ??_INTIsr:	
  2031                           ; 0 bytes @ 0x0
  2032                           
  2033  0070                     ?_main:	
  2034                           ; 0 bytes @ 0x0
  2035                           
  2036                           
  2037                           ; 0 bytes @ 0x0
  2038  0070                     	ds	1
  2039  0071                     ?_DLYDelay_ms:	
  2040  0071                     ??_INInit:	
  2041                           ; 0 bytes @ 0x1
  2042                           
  2043  0071                     ??_OUTInit:	
  2044                           ; 0 bytes @ 0x1
  2045                           
  2046  0071                     ??_SPIInit:	
  2047                           ; 0 bytes @ 0x1
  2048                           
  2049  0071                     ?_SPIRead:	
  2050                           ; 0 bytes @ 0x1
  2051                           
  2052  0071                     ?_SPIWrite:	
  2053                           ; 0 bytes @ 0x1
  2054                           
  2055  0071                     ??_ADCInit:	
  2056                           ; 0 bytes @ 0x1
  2057                           
  2058  0071                     ??_LEDInit:	
  2059                           ; 0 bytes @ 0x1
  2060                           
  2061  0071                     ??_NVMInit:	
  2062                           ; 0 bytes @ 0x1
  2063                           
  2064  0071                     ?_NVMRead:	
  2065                           ; 0 bytes @ 0x1
  2066                           
  2067  0071                     ?_NVMWrite:	
  2068                           ; 0 bytes @ 0x1
  2069                           
  2070  0071                     ??_DINInit:	
  2071                           ; 0 bytes @ 0x1
  2072                           
  2073  0071                     ??_DINTick:	
  2074                           ; 0 bytes @ 0x1
  2075                           
  2076  0071                     ??_DINTask:	
  2077                           ; 0 bytes @ 0x1
  2078                           
  2079  0071                     ??_PGMTick:	
  2080                           ; 0 bytes @ 0x1
  2081                           
  2082  0071                     ??_PGMPgmOff:	
  2083                           ; 0 bytes @ 0x1
  2084                           
  2085  0071                     ??_SYSInit:	
  2086                           ; 0 bytes @ 0x1
  2087                           
  2088  0071                     ?___ftge:	
  2089                           ; 0 bytes @ 0x1
  2090                           
  2091  0071                     ?___wmul:	
  2092                           ; 1 bit 
  2093                           
  2094  0071                     ?___lwdiv:	
  2095                           ; 2 bytes @ 0x1
  2096                           
  2097  0071                     ?___ftpack:	
  2098                           ; 2 bytes @ 0x1
  2099                           
  2100  0071                     LEDInit@sta:	
  2101                           ; 3 bytes @ 0x1
  2102                           
  2103  0071                     NVMInit@sta:	
  2104                           ; 1 bytes @ 0x1
  2105                           
  2106  0071                     DINInit@sta:	
  2107                           ; 1 bytes @ 0x1
  2108                           
  2109  0071                     SPIRead@dstPtr:	
  2110                           ; 1 bytes @ 0x1
  2111                           
  2112  0071                     SPIWrite@srcPtr:	
  2113                           ; 2 bytes @ 0x1
  2114                           
  2115  0071                     DLYDelay_ms@val:	
  2116                           ; 2 bytes @ 0x1
  2117                           
  2118  0071                     NVMRead@addr:	
  2119                           ; 2 bytes @ 0x1
  2120                           
  2121  0071                     NVMWrite@addr:	
  2122                           ; 2 bytes @ 0x1
  2123                           
  2124  0071                     ___wmul@multiplier:	
  2125                           ; 2 bytes @ 0x1
  2126                           
  2127  0071                     ___lwdiv@divisor:	
  2128                           ; 2 bytes @ 0x1
  2129                           
  2130  0071                     ___ftpack@arg:	
  2131                           ; 2 bytes @ 0x1
  2132                           
  2133  0071                     ___ftge@ff1:	
  2134                           ; 3 bytes @ 0x1
  2135                           
  2136                           
  2137                           ; 3 bytes @ 0x1
  2138  0071                     	ds	1
  2139  0072                     INInit@sta:	
  2140  0072                     OUTInit@sta:	
  2141                           ; 1 bytes @ 0x2
  2142                           
  2143  0072                     SPIInit@state:	
  2144                           ; 1 bytes @ 0x2
  2145                           
  2146  0072                     ADCInit@state:	
  2147                           ; 1 bytes @ 0x2
  2148                           
  2149  0072                     SYSInit@state:	
  2150                           ; 1 bytes @ 0x2
  2151                           
  2152                           
  2153                           ; 1 bytes @ 0x2
  2154  0072                     	ds	1
  2155  0073                     ??_DLYDelay_ms:	
  2156  0073                     SPIRead@len:	
  2157                           ; 0 bytes @ 0x3
  2158                           
  2159  0073                     SPIWrite@len:	
  2160                           ; 1 bytes @ 0x3
  2161                           
  2162  0073                     NVMRead@dest:	
  2163                           ; 1 bytes @ 0x3
  2164                           
  2165  0073                     NVMWrite@source:	
  2166                           ; 1 bytes @ 0x3
  2167                           
  2168  0073                     ___wmul@multiplicand:	
  2169                           ; 1 bytes @ 0x3
  2170                           
  2171  0073                     ___lwdiv@dividend:	
  2172                           ; 2 bytes @ 0x3
  2173                           
  2174                           
  2175                           ; 2 bytes @ 0x3
  2176  0073                     	ds	1
  2177  0074                     ??_SPIRead:	
  2178  0074                     ??_SPIWrite:	
  2179                           ; 0 bytes @ 0x4
  2180                           
  2181  0074                     NVMRead@len:	
  2182                           ; 0 bytes @ 0x4
  2183                           
  2184  0074                     NVMWrite@len:	
  2185                           ; 1 bytes @ 0x4
  2186                           
  2187  0074                     ___ftpack@exp:	
  2188                           ; 1 bytes @ 0x4
  2189                           
  2190  0074                     ___ftge@ff2:	
  2191                           ; 1 bytes @ 0x4
  2192                           
  2193                           
  2194                           ; 3 bytes @ 0x4
  2195  0074                     	ds	1
  2196  0075                     ??_NVMRead:	
  2197  0075                     ??_NVMWrite:	
  2198                           ; 0 bytes @ 0x5
  2199                           
  2200  0075                     ??___wmul:	
  2201                           ; 0 bytes @ 0x5
  2202                           
  2203  0075                     ??___lwdiv:	
  2204                           ; 0 bytes @ 0x5
  2205                           
  2206  0075                     ___ftpack@sign:	
  2207                           ; 0 bytes @ 0x5
  2208                           
  2209  0075                     DLYDelay_ms@i:	
  2210                           ; 1 bytes @ 0x5
  2211                           
  2212  0075                     ___wmul@product:	
  2213                           ; 2 bytes @ 0x5
  2214                           
  2215                           
  2216                           ; 2 bytes @ 0x5
  2217  0075                     	ds	1
  2218  0076                     ??___ftpack:	
  2219  0076                     SPIWrite@i:	
  2220                           ; 0 bytes @ 0x6
  2221                           
  2222  0076                     ___lwdiv@quotient:	
  2223                           ; 1 bytes @ 0x6
  2224                           
  2225                           
  2226                           ; 2 bytes @ 0x6
  2227  0076                     	ds	1
  2228  0077                     ??_CC1Strobe:	
  2229  0077                     ?_CC1Write:	
  2230                           ; 0 bytes @ 0x7
  2231                           
  2232  0077                     ??_LEDNormalFlash:	
  2233                           ; 0 bytes @ 0x7
  2234                           
  2235  0077                     ??_LEDFastFlash:	
  2236                           ; 0 bytes @ 0x7
  2237                           
  2238  0077                     ??___ftge:	
  2239                           ; 0 bytes @ 0x7
  2240                           
  2241  0077                     NVMRead@i:	
  2242                           ; 0 bytes @ 0x7
  2243                           
  2244  0077                     CC1Write@src:	
  2245                           ; 1 bytes @ 0x7
  2246                           
  2247                           
  2248                           ; 2 bytes @ 0x7
  2249  0077                     	ds	1
  2250  0078                     ??_PGMReadNvm:	
  2251  0078                     ??_PGMWriteNvm:	
  2252                           ; 0 bytes @ 0x8
  2253                           
  2254  0078                     SPIRead@i:	
  2255                           ; 0 bytes @ 0x8
  2256                           
  2257  0078                     CC1Strobe@e_stb:	
  2258                           ; 1 bytes @ 0x8
  2259                           
  2260  0078                     LEDNormalFlash@num:	
  2261                           ; 1 bytes @ 0x8
  2262                           
  2263  0078                     LEDFastFlash@num:	
  2264                           ; 1 bytes @ 0x8
  2265                           
  2266  0078                     ___lwdiv@counter:	
  2267                           ; 1 bytes @ 0x8
  2268                           
  2269                           
  2270                           ; 1 bytes @ 0x8
  2271  0078                     	ds	1
  2272  0079                     ?_CC1Read:	
  2273  0079                     ??___lltoft:	
  2274                           ; 0 bytes @ 0x9
  2275                           
  2276  0079                     ?___lwtoft:	
  2277                           ; 0 bytes @ 0x9
  2278                           
  2279  0079                     CC1Strobe@cc1Stb:	
  2280                           ; 3 bytes @ 0x9
  2281                           
  2282  0079                     CC1Write@len:	
  2283                           ; 1 bytes @ 0x9
  2284                           
  2285  0079                     LEDNormalFlash@i:	
  2286                           ; 1 bytes @ 0x9
  2287                           
  2288  0079                     LEDFastFlash@i:	
  2289                           ; 1 bytes @ 0x9
  2290                           
  2291  0079                     ___ftadd@sign:	
  2292                           ; 1 bytes @ 0x9
  2293                           
  2294  0079                     CC1Read@dst:	
  2295                           ; 1 bytes @ 0x9
  2296                           
  2297  0079                     ___lwtoft@c:	
  2298                           ; 2 bytes @ 0x9
  2299                           
  2300                           
  2301                           ; 2 bytes @ 0x9
  2302  0079                     	ds	1
  2303  007A                     ??_PGMNvmReset:	
  2304  007A                     ??_CC1Write:	
  2305                           ; 0 bytes @ 0xA
  2306                           
  2307  007A                     ??_CC1Sleep:	
  2308                           ; 0 bytes @ 0xA
  2309                           
  2310  007A                     ??_SLPSleep:	
  2311                           ; 0 bytes @ 0xA
  2312                           
  2313  007A                     ??_PGMSelDown:	
  2314                           ; 0 bytes @ 0xA
  2315                           
  2316  007A                     ??_PGMSelLong:	
  2317                           ; 0 bytes @ 0xA
  2318                           
  2319  007A                     ___ftadd@exp2:	
  2320                           ; 0 bytes @ 0xA
  2321                           
  2322  007A                     ___lltoft@exp:	
  2323                           ; 1 bytes @ 0xA
  2324                           
  2325                           
  2326                           ; 1 bytes @ 0xA
  2327  007A                     	ds	1
  2328  007B                     ??_PGMCheckNvm:	
  2329  007B                     ??_PGMInit:	
  2330                           ; 0 bytes @ 0xB
  2331                           
  2332  007B                     CC1Read@len:	
  2333                           ; 0 bytes @ 0xB
  2334                           
  2335  007B                     PGMInit@state:	
  2336                           ; 1 bytes @ 0xB
  2337                           
  2338  007B                     ___ftadd@exp1:	
  2339                           ; 1 bytes @ 0xB
  2340                           
  2341                           
  2342                           ; 1 bytes @ 0xB
  2343  007B                     	ds	1
  2344  007C                     ??_RTXStartSendData:	
  2345  007C                     ??_CC1Init:	
  2346                           ; 0 bytes @ 0xC
  2347                           
  2348  007C                     ??_RTXInit:	
  2349                           ; 0 bytes @ 0xC
  2350                           
  2351  007C                     ??_RTXTick:	
  2352                           ; 0 bytes @ 0xC
  2353                           
  2354  007C                     ??_RTXTask:	
  2355                           ; 0 bytes @ 0xC
  2356                           
  2357  007C                     ??_RTXAwake:	
  2358                           ; 0 bytes @ 0xC
  2359                           
  2360  007C                     ??_SYSTask:	
  2361                           ; 0 bytes @ 0xC
  2362                           
  2363  007C                     ??___ftsub:	
  2364                           ; 0 bytes @ 0xC
  2365                           
  2366                           
  2367                           	psect	cstackBANK0
  2368  0020                     __pcstackBANK0:	
  2369                           ; 0 bytes @ 0xC
  2370                           
  2371  0020                     ??_CC1Read:	
  2372  0020                     ??___lwtoft:	
  2373                           ; 0 bytes @ 0x0
  2374                           
  2375  0020                     ?___ftadd:	
  2376                           ; 0 bytes @ 0x0
  2377                           
  2378  0020                     ?___lltoft:	
  2379                           ; 3 bytes @ 0x0
  2380                           
  2381  0020                     CC1Write@addr:	
  2382                           ; 3 bytes @ 0x0
  2383                           
  2384  0020                     SLPSleep@IOCBNTmp:	
  2385                           ; 1 bytes @ 0x0
  2386                           
  2387  0020                     ___ftadd@f1:	
  2388                           ; 1 bytes @ 0x0
  2389                           
  2390  0020                     ___lltoft@c:	
  2391                           ; 3 bytes @ 0x0
  2392                           
  2393  0020                     NVMWrite@bufTmpRow:	
  2394                           ; 4 bytes @ 0x0
  2395                           
  2396                           
  2397                           ; 64 bytes @ 0x0
  2398  0020                     	ds	1
  2399  0021                     CC1Read@addr:	
  2400  0021                     CC1Write@cc1Addr:	
  2401                           ; 1 bytes @ 0x1
  2402                           
  2403  0021                     SLPSleep@INTCONTmp:	
  2404                           ; 1 bytes @ 0x1
  2405                           
  2406                           
  2407                           ; 1 bytes @ 0x1
  2408  0021                     	ds	1
  2409  0022                     CC1Read@cc1Addr:	
  2410  0022                     SLPSleep@WPUBTmp:	
  2411                           ; 1 bytes @ 0x2
  2412                           
  2413                           
  2414                           ; 1 bytes @ 0x2
  2415  0022                     	ds	1
  2416  0023                     ??_CC1LoadREG:	
  2417  0023                     ?_RTXSndPkt:	
  2418                           ; 0 bytes @ 0x3
  2419                           
  2420  0023                     ?_RTXRcvPkt:	
  2421                           ; 0 bytes @ 0x3
  2422                           
  2423  0023                     SLPSleep@WDTCONTmp:	
  2424                           ; 0 bytes @ 0x3
  2425                           
  2426  0023                     RTXSndPkt@len:	
  2427                           ; 1 bytes @ 0x3
  2428                           
  2429  0023                     RTXRcvPkt@len:	
  2430                           ; 1 bytes @ 0x3
  2431                           
  2432  0023                     ___ftadd@f2:	
  2433                           ; 1 bytes @ 0x3
  2434                           
  2435                           
  2436                           ; 3 bytes @ 0x3
  2437  0023                     	ds	1
  2438  0024                     ??_RTXSndPkt:	
  2439  0024                     ??_RTXRcvPkt:	
  2440                           ; 0 bytes @ 0x4
  2441                           
  2442  0024                     ?___ftmul:	
  2443                           ; 0 bytes @ 0x4
  2444                           
  2445  0024                     CC1Init@state:	
  2446                           ; 3 bytes @ 0x4
  2447                           
  2448  0024                     SLPSleep@OPTION_REGTmp:	
  2449                           ; 1 bytes @ 0x4
  2450                           
  2451  0024                     ___ftmul@f1:	
  2452                           ; 1 bytes @ 0x4
  2453                           
  2454                           
  2455                           ; 3 bytes @ 0x4
  2456  0024                     	ds	1
  2457  0025                     SLPSleep@FVRCONTmp:	
  2458  0025                     RTXSndPkt@numRxByte:	
  2459                           ; 1 bytes @ 0x5
  2460                           
  2461  0025                     RTXRcvPkt@dst:	
  2462                           ; 1 bytes @ 0x5
  2463                           
  2464                           
  2465                           ; 1 bytes @ 0x5
  2466  0025                     	ds	1
  2467  0026                     ??___ftadd:	
  2468  0026                     SLPSleep@ADCON0Tmp:	
  2469                           ; 0 bytes @ 0x6
  2470                           
  2471  0026                     RTXSndPkt@src:	
  2472                           ; 1 bytes @ 0x6
  2473                           
  2474                           
  2475                           ; 1 bytes @ 0x6
  2476  0026                     	ds	1
  2477  0027                     SLPSleep@TESTBATTtmp:	
  2478  0027                     RTXSndPkt@numTxByte:	
  2479                           ; 1 bytes @ 0x7
  2480                           
  2481  0027                     ___ftmul@f2:	
  2482                           ; 1 bytes @ 0x7
  2483                           
  2484                           
  2485                           ; 3 bytes @ 0x7
  2486  0027                     	ds	1
  2487  0028                     ??_RTXSendData:	
  2488  0028                     ??_RTXSendRPgm:	
  2489                           ; 0 bytes @ 0x8
  2490                           
  2491                           
  2492                           ; 0 bytes @ 0x8
  2493  0028                     	ds	1
  2494  0029                     RTXSendData@valTemp:	
  2495                           
  2496                           ; 3 bytes @ 0x9
  2497  0029                     	ds	1
  2498  002A                     ??___ftmul:	
  2499  002A                     ?___ftsub:	
  2500                           ; 0 bytes @ 0xA
  2501                           
  2502  002A                     ___ftsub@f2:	
  2503                           ; 3 bytes @ 0xA
  2504                           
  2505                           
  2506                           ; 3 bytes @ 0xA
  2507  002A                     	ds	2
  2508  002C                     RTXSendData@valBatt:	
  2509                           
  2510                           ; 3 bytes @ 0xC
  2511  002C                     	ds	1
  2512  002D                     ___ftsub@f1:	
  2513                           
  2514                           ; 3 bytes @ 0xD
  2515  002D                     	ds	1
  2516  002E                     ___ftmul@exp:	
  2517                           
  2518                           ; 1 bytes @ 0xE
  2519  002E                     	ds	1
  2520  002F                     ___ftmul@f3_as_product:	
  2521                           
  2522                           ; 3 bytes @ 0xF
  2523  002F                     	ds	3
  2524  0032                     ___ftmul@cntr:	
  2525                           
  2526                           ; 1 bytes @ 0x12
  2527  0032                     	ds	1
  2528  0033                     ___ftmul@sign:	
  2529                           
  2530                           ; 1 bytes @ 0x13
  2531  0033                     	ds	1
  2532  0034                     ?_sqrt:	
  2533  0034                     ?___ftdiv:	
  2534                           ; 3 bytes @ 0x14
  2535                           
  2536  0034                     ___ftdiv@f2:	
  2537                           ; 3 bytes @ 0x14
  2538                           
  2539  0034                     sqrt@y:	
  2540                           ; 3 bytes @ 0x14
  2541                           
  2542                           
  2543                           ; 3 bytes @ 0x14
  2544  0034                     	ds	3
  2545  0037                     ??_sqrt:	
  2546  0037                     ___ftdiv@f1:	
  2547                           ; 0 bytes @ 0x17
  2548                           
  2549                           
  2550                           ; 3 bytes @ 0x17
  2551  0037                     	ds	3
  2552  003A                     ??___ftdiv:	
  2553  003A                     sqrt@og:	
  2554                           ; 0 bytes @ 0x1A
  2555                           
  2556                           
  2557                           ; 3 bytes @ 0x1A
  2558  003A                     	ds	3
  2559  003D                     sqrt@z:	
  2560                           
  2561                           ; 3 bytes @ 0x1D
  2562  003D                     	ds	1
  2563  003E                     ___ftdiv@cntr:	
  2564                           
  2565                           ; 1 bytes @ 0x1E
  2566  003E                     	ds	1
  2567  003F                     ___ftdiv@f3:	
  2568                           
  2569                           ; 3 bytes @ 0x1F
  2570  003F                     	ds	1
  2571  0040                     sqrt@i:	
  2572                           
  2573                           ; 1 bytes @ 0x20
  2574  0040                     	ds	1
  2575  0041                     sqrt@q:	
  2576                           
  2577                           ; 3 bytes @ 0x21
  2578  0041                     	ds	1
  2579  0042                     ___ftdiv@exp:	
  2580                           
  2581                           ; 1 bytes @ 0x22
  2582  0042                     	ds	1
  2583  0043                     ___ftdiv@sign:	
  2584                           
  2585                           ; 1 bytes @ 0x23
  2586  0043                     	ds	1
  2587  0044                     sqrt@x:	
  2588                           
  2589                           ; 3 bytes @ 0x24
  2590  0044                     	ds	3
  2591  0047                     ??_ADCConv:	
  2592                           
  2593                           ; 0 bytes @ 0x27
  2594  0047                     	ds	14
  2595  0055                     _ADCConv$1407:	
  2596                           
  2597                           ; 3 bytes @ 0x35
  2598  0055                     	ds	3
  2599  0058                     ADCConv@sumCurr:	
  2600                           
  2601                           ; 4 bytes @ 0x38
  2602  0058                     	ds	4
  2603  005C                     ADCConv@sumBatt:	
  2604                           
  2605                           ; 2 bytes @ 0x3C
  2606  005C                     	ds	2
  2607  005E                     ADCConv@cntSum:	
  2608                           
  2609                           ; 1 bytes @ 0x3E
  2610  005E                     	ds	1
  2611  005F                     RTXInit@state:	
  2612                           
  2613                           ; 1 bytes @ 0x3F
  2614  005F                     	ds	1
  2615  0060                     NVMWrite@rowAddr:	
  2616                           
  2617                           ; 2 bytes @ 0x40
  2618  0060                     	ds	2
  2619  0062                     NVMWrite@i:	
  2620                           
  2621                           ; 1 bytes @ 0x42
  2622  0062                     	ds	1
  2623  0063                     NVMWrite@latchAddr:	
  2624                           
  2625                           ; 1 bytes @ 0x43
  2626  0063                     	ds	1
  2627  0064                     NVMWrite@j:	
  2628                           
  2629                           ; 1 bytes @ 0x44
  2630  0064                     	ds	1
  2631  0065                     ??_RTXReadPkt:	
  2632                           
  2633                           ; 0 bytes @ 0x45
  2634  0065                     	ds	1
  2635  0066                     RTXReadPkt@numRxByte:	
  2636                           
  2637                           ; 1 bytes @ 0x46
  2638  0066                     	ds	1
  2639  0067                     ??_main:	
  2640                           
  2641                           ; 0 bytes @ 0x47
  2642  0067                     	ds	1
  2643  0068                     main@i:	
  2644                           
  2645                           ; 1 bytes @ 0x48
  2646  0068                     	ds	1
  2647                           
  2648                           	psect	maintext
  2649  0798                     __pmaintext:	
  2650 ;;
  2651 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2652 ;;
  2653 ;; *************** function _main *****************
  2654 ;; Defined at:
  2655 ;;		line 54 in file "Sensore.c"
  2656 ;; Parameters:    Size  Location     Type
  2657 ;;		None
  2658 ;; Auto vars:     Size  Location     Type
  2659 ;;  i               1   72[BANK0 ] unsigned char 
  2660 ;; Return value:  Size  Location     Type
  2661 ;;		None               void
  2662 ;; Registers used:
  2663 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2664 ;; Tracked objects:
  2665 ;;		On entry : B1F/0
  2666 ;;		On exit  : 0/0
  2667 ;;		Unchanged: 0/0
  2668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2669 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2670 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2671 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2672 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2673 ;;Total ram usage:        2 bytes
  2674 ;; Hardware stack levels required when called:   11
  2675 ;; This function calls:
  2676 ;;		_ADCInit
  2677 ;;		_CC1Init
  2678 ;;		_DINInit
  2679 ;;		_DINTask
  2680 ;;		_INInit
  2681 ;;		_LEDInit
  2682 ;;		_NVMInit
  2683 ;;		_OUTInit
  2684 ;;		_PGMInit
  2685 ;;		_RTXInit
  2686 ;;		_RTXTask
  2687 ;;		_SPIInit
  2688 ;;		_SYSInit
  2689 ;;		_SYSTask
  2690 ;; This function is called by:
  2691 ;;		Startup code after reset
  2692 ;; This function uses a non-reentrant model
  2693 ;;
  2694                           
  2695                           
  2696                           ;psect for function _main
  2697  0798                     _main:	
  2698                           
  2699                           ;Sensore.c: 56: unsigned char i;
  2700                           ;Sensore.c: 59: for(i=0;i<3;i++)
  2701                           
  2702                           ;incstack = 0
  2703                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2704  0798  0020               	movlb	0	; select bank0
  2705  0799  01E8               	clrf	main@i
  2706  079A  3003               	movlw	3
  2707  079B  0268               	subwf	main@i,w
  2708  079C  1803               	btfsc	3,0
  2709  079D  2FDF               	goto	l678
  2710  079E                     l677:	
  2711  079E  0064               	clrwdt	;# 
  2712                           
  2713                           ;Sensore.c: 63: SYSInit(i);
  2714  079F  0020               	movlb	0	; select bank0
  2715  07A0  0868               	movf	main@i,w
  2716  07A1  318D  25D4  3187   	fcall	_SYSInit
  2717                           
  2718                           ;Sensore.c: 64: INInit(i);
  2719  07A4  0020               	movlb	0	; select bank0
  2720  07A5  0868               	movf	main@i,w
  2721  07A6  318C  241F  3187   	fcall	_INInit
  2722                           
  2723                           ;Sensore.c: 65: OUTInit(i);
  2724  07A9  0020               	movlb	0	; select bank0
  2725  07AA  0868               	movf	main@i,w
  2726  07AB  318E  2649  3187   	fcall	_OUTInit
  2727                           
  2728                           ;Sensore.c: 66: DINInit(i);
  2729  07AE  0020               	movlb	0	; select bank0
  2730  07AF  0868               	movf	main@i,w
  2731  07B0  318B  23AF  3187   	fcall	_DINInit
  2732                           
  2733                           ;Sensore.c: 67: LEDInit(i);
  2734  07B3  0020               	movlb	0	; select bank0
  2735  07B4  0868               	movf	main@i,w
  2736  07B5  318B  2319  3187   	fcall	_LEDInit
  2737                           
  2738                           ;Sensore.c: 68: SPIInit(i);
  2739  07B8  0020               	movlb	0	; select bank0
  2740  07B9  0868               	movf	main@i,w
  2741  07BA  318D  2505  3187   	fcall	_SPIInit
  2742                           
  2743                           ;Sensore.c: 69: CC1Init(i);
  2744  07BD  0020               	movlb	0	; select bank0
  2745  07BE  0868               	movf	main@i,w
  2746  07BF  318C  2455  3187   	fcall	_CC1Init
  2747                           
  2748                           ;Sensore.c: 70: NVMInit(i);
  2749  07C2  0020               	movlb	0	; select bank0
  2750  07C3  0868               	movf	main@i,w
  2751  07C4  318B  2324  3187   	fcall	_NVMInit
  2752                           
  2753                           ;Sensore.c: 71: RTXInit(i);
  2754  07C7  0020               	movlb	0	; select bank0
  2755  07C8  0868               	movf	main@i,w
  2756  07C9  318D  258A  3187   	fcall	_RTXInit
  2757                           
  2758                           ;Sensore.c: 72: PGMInit(i);
  2759  07CC  0020               	movlb	0	; select bank0
  2760  07CD  0868               	movf	main@i,w
  2761  07CE  318B  23D4  3187   	fcall	_PGMInit
  2762                           
  2763                           ;Sensore.c: 73: ADCInit(i);
  2764  07D1  0020               	movlb	0	; select bank0
  2765  07D2  0868               	movf	main@i,w
  2766  07D3  318E  2672  3187   	fcall	_ADCInit
  2767  07D6  3001               	movlw	1
  2768  07D7  0020               	movlb	0	; select bank0
  2769  07D8  00E7               	movwf	??_main
  2770  07D9  0867               	movf	??_main,w
  2771  07DA  07E8               	addwf	main@i,f
  2772  07DB  3003               	movlw	3
  2773  07DC  0268               	subwf	main@i,w
  2774  07DD  1C03               	skipc
  2775  07DE  2F9E               	goto	l677
  2776  07DF                     l678:	
  2777                           
  2778                           ;Sensore.c: 74: }
  2779                           ;Sensore.c: 77: INTCONbits.GIE=1;
  2780  07DF  178B               	bsf	11,7	;volatile
  2781  07E0                     l679:	
  2782                           ;Sensore.c: 80: while(1)
  2783                           
  2784  07E0  0064               	clrwdt	;# 
  2785                           
  2786                           ;Sensore.c: 84: SYSTask();
  2787  07E1  318F  2726  3187   	fcall	_SYSTask
  2788                           
  2789                           ;Sensore.c: 85: DINTask();
  2790  07E4  318C  248D  3187   	fcall	_DINTask
  2791                           
  2792                           ;Sensore.c: 86: RTXTask();
  2793  07E7  318A  22EE  3187   	fcall	_RTXTask
  2794  07EA  2FE0               	goto	l679
  2795  07EB                     __end_of_main:	
  2796                           
  2797                           	psect	text1
  2798  0F26                     __ptext1:	
  2799 ;; *************** function _SYSTask *****************
  2800 ;; Defined at:
  2801 ;;		line 44 in file "SYS.c"
  2802 ;; Parameters:    Size  Location     Type
  2803 ;;		None
  2804 ;; Auto vars:     Size  Location     Type
  2805 ;;		None
  2806 ;; Return value:  Size  Location     Type
  2807 ;;		None               void
  2808 ;; Registers used:
  2809 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2810 ;; Tracked objects:
  2811 ;;		On entry : 0/0
  2812 ;;		On exit  : 0/0
  2813 ;;		Unchanged: 0/0
  2814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2816 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2818 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2819 ;;Total ram usage:        0 bytes
  2820 ;; Hardware stack levels used:    1
  2821 ;; Hardware stack levels required when called:   10
  2822 ;; This function calls:
  2823 ;;		_DINTick
  2824 ;;		_PGMPgmOff
  2825 ;;		_PGMSelDown
  2826 ;;		_PGMSelLong
  2827 ;;		_PGMTick
  2828 ;;		_RTXAwake
  2829 ;;		_RTXTick
  2830 ;;		_SLPSleep
  2831 ;; This function is called by:
  2832 ;;		_main
  2833 ;; This function uses a non-reentrant model
  2834 ;;
  2835                           
  2836                           
  2837                           ;psect for function _SYSTask
  2838  0F26                     _SYSTask:	
  2839                           
  2840                           ;SYS.c: 47: if(u_SYS_STA.TICK)
  2841                           
  2842                           ;incstack = 0
  2843                           ; Regs used in _SYSTask: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2844  0F26  0021               	movlb	1	; select bank1
  2845  0F27  1C32               	btfss	_u_SYS_STA^(0+128),0
  2846  0F28  2F33               	goto	l3691
  2847                           
  2848                           ;SYS.c: 48: {
  2849                           ;SYS.c: 50: u_SYS_STA.TICK=0;
  2850  0F29  1032               	bcf	_u_SYS_STA^(0+128),0
  2851                           
  2852                           ;SYS.c: 53: RTXTick();
  2853  0F2A  318B  233B  318F   	fcall	_RTXTick
  2854                           
  2855                           ;SYS.c: 54: DINTick();
  2856  0F2D  318E  2621  318F   	fcall	_DINTick
  2857                           
  2858                           ;SYS.c: 55: PGMTick();
  2859  0F30  318B  2390  318F   	fcall	_PGMTick
  2860  0F33                     l3691:	
  2861                           
  2862                           ;SYS.c: 56: }
  2863                           ;SYS.c: 58: if(u_in_ev_down.sel)
  2864  0F33  0021               	movlb	1	; select bank1
  2865  0F34  1C33               	btfss	_u_in_ev_down^(0+128),0
  2866  0F35  2F3A               	goto	l3697
  2867                           
  2868                           ;SYS.c: 59: {
  2869                           ;SYS.c: 61: u_in_ev_down.sel=0;
  2870  0F36  1033               	bcf	_u_in_ev_down^(0+128),0
  2871                           
  2872                           ;SYS.c: 62: PGMSelDown();
  2873  0F37  318B  2355  318F   	fcall	_PGMSelDown
  2874  0F3A                     l3697:	
  2875                           
  2876                           ;SYS.c: 63: }
  2877                           ;SYS.c: 64: if(u_in_ev_long.sel)
  2878  0F3A  0021               	movlb	1	; select bank1
  2879  0F3B  1C34               	btfss	_u_in_ev_long^(0+128),0
  2880  0F3C  2F41               	goto	l3703
  2881                           
  2882                           ;SYS.c: 65: {
  2883                           ;SYS.c: 67: u_in_ev_long.sel=0;
  2884  0F3D  1034               	bcf	_u_in_ev_long^(0+128),0
  2885                           
  2886                           ;SYS.c: 68: PGMSelLong();
  2887  0F3E  318B  2310  318F   	fcall	_PGMSelLong
  2888  0F41                     l3703:	
  2889                           
  2890                           ;SYS.c: 69: }
  2891                           ;SYS.c: 72: if(flg_slp.goSleep)
  2892  0F41  0020               	movlb	0	; select bank0
  2893  0F42  1C6A               	btfss	_flg_slp,0
  2894  0F43  2F4A               	goto	l3709
  2895                           
  2896                           ;SYS.c: 73: {
  2897                           ;SYS.c: 75: flg_slp.goSleep=0;
  2898  0F44  106A               	bcf	_flg_slp,0
  2899                           
  2900                           ;SYS.c: 77: if(!(!PORTBbits.RB2))
  2901  0F45  1D0D               	btfss	13,2	;volatile
  2902  0F46  2F4A               	goto	l3709
  2903                           
  2904                           ;SYS.c: 78: SLPSleep();
  2905  0F47  3186  2676  318F   	fcall	_SLPSleep
  2906  0F4A                     l3709:	
  2907                           
  2908                           ;SYS.c: 79: }
  2909                           ;SYS.c: 82: if(rtx_flg.pgmDone)
  2910  0F4A  0021               	movlb	1	; select bank1
  2911  0F4B  1C2E               	btfss	_rtx_flg^(0+128),0
  2912  0F4C  2F51               	goto	l3715
  2913                           
  2914                           ;SYS.c: 83: {
  2915                           ;SYS.c: 85: rtx_flg.pgmDone=0;
  2916  0F4D  102E               	bcf	_rtx_flg^(0+128),0
  2917                           
  2918                           ;SYS.c: 87: PGMPgmOff();
  2919  0F4E  318A  22E4  318F   	fcall	_PGMPgmOff
  2920  0F51                     l3715:	
  2921                           
  2922                           ;SYS.c: 88: }
  2923                           ;SYS.c: 91: if(flg_slp.exitSleep)
  2924  0F51  0020               	movlb	0	; select bank0
  2925  0F52  1CEA               	btfss	_flg_slp,1
  2926  0F53  0008               	return
  2927                           
  2928                           ;SYS.c: 92: {
  2929                           ;SYS.c: 94: flg_slp.exitSleep=0;
  2930  0F54  10EA               	bcf	_flg_slp,1
  2931                           
  2932                           ;SYS.c: 96: RTXAwake();
  2933  0F55  318C  2405         	fcall	_RTXAwake
  2934  0F57  0008               	return
  2935  0F58                     __end_of_SYSTask:	
  2936                           
  2937                           	psect	text2
  2938  0676                     __ptext2:	
  2939 ;; *************** function _SLPSleep *****************
  2940 ;; Defined at:
  2941 ;;		line 6 in file "SLP.c"
  2942 ;; Parameters:    Size  Location     Type
  2943 ;;		None
  2944 ;; Auto vars:     Size  Location     Type
  2945 ;;  TESTBATTtmp     1    7[BANK0 ] unsigned char 
  2946 ;;  ADCON0Tmp       1    6[BANK0 ] unsigned char 
  2947 ;;  FVRCONTmp       1    5[BANK0 ] unsigned char 
  2948 ;;  OPTION_REGTm    1    4[BANK0 ] unsigned char 
  2949 ;;  WDTCONTmp       1    3[BANK0 ] unsigned char 
  2950 ;;  WPUBTmp         1    2[BANK0 ] unsigned char 
  2951 ;;  INTCONTmp       1    1[BANK0 ] unsigned char 
  2952 ;;  IOCBNTmp        1    0[BANK0 ] unsigned char 
  2953 ;; Return value:  Size  Location     Type
  2954 ;;		None               void
  2955 ;; Registers used:
  2956 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2957 ;; Tracked objects:
  2958 ;;		On entry : 0/0
  2959 ;;		On exit  : 0/0
  2960 ;;		Unchanged: 0/0
  2961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2963 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2964 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2965 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2966 ;;Total ram usage:        9 bytes
  2967 ;; Hardware stack levels used:    1
  2968 ;; Hardware stack levels required when called:    5
  2969 ;; This function calls:
  2970 ;;		_CC1Sleep
  2971 ;; This function is called by:
  2972 ;;		_SYSTask
  2973 ;; This function uses a non-reentrant model
  2974 ;;
  2975                           
  2976                           
  2977                           ;psect for function _SLPSleep
  2978  0676                     _SLPSleep:	
  2979                           
  2980                           ;SLP.c: 8: unsigned char IOCBNTmp,INTCONTmp,WPUBTmp,WDTCONTmp,OPTION_REGTmp,FVRCONTmp,AD
      +                          CON0Tmp,TESTBATTtmp;
  2981                           ;SLP.c: 10: CC1Sleep();
  2982                           
  2983                           ;incstack = 0
  2984                           ; Regs used in _SLPSleep: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2985  0676  318B  2300  3186   	fcall	_CC1Sleep
  2986                           
  2987                           ;SLP.c: 12: WPUBTmp=WPUB;
  2988  0679  0024               	movlb	4	; select bank4
  2989  067A  080D               	movf	13,w	;volatile
  2990  067B  00FA               	movwf	??_SLPSleep
  2991  067C  087A               	movf	??_SLPSleep,w
  2992  067D  0020               	movlb	0	; select bank0
  2993  067E  00A2               	movwf	SLPSleep@WPUBTmp
  2994                           
  2995                           ;SLP.c: 13: WPUB=0b00000100;
  2996  067F  3004               	movlw	4
  2997  0680  0024               	movlb	4	; select bank4
  2998  0681  008D               	movwf	13	;volatile
  2999                           
  3000                           ;SLP.c: 15: ADCON0Tmp=ADCON0;
  3001  0682  0021               	movlb	1	; select bank1
  3002  0683  081D               	movf	29,w	;volatile
  3003  0684  00FA               	movwf	??_SLPSleep
  3004  0685  087A               	movf	??_SLPSleep,w
  3005  0686  0020               	movlb	0	; select bank0
  3006  0687  00A6               	movwf	SLPSleep@ADCON0Tmp
  3007                           
  3008                           ;SLP.c: 16: ADCON0=0b00000000;
  3009  0688  0021               	movlb	1	; select bank1
  3010  0689  019D               	clrf	29	;volatile
  3011                           
  3012                           ;SLP.c: 18: FVRCONTmp=FVRCON;
  3013  068A  0022               	movlb	2	; select bank2
  3014  068B  0817               	movf	23,w	;volatile
  3015  068C  00FA               	movwf	??_SLPSleep
  3016  068D  087A               	movf	??_SLPSleep,w
  3017  068E  0020               	movlb	0	; select bank0
  3018  068F  00A5               	movwf	SLPSleep@FVRCONTmp
  3019                           
  3020                           ;SLP.c: 19: FVRCON=0b00000000;
  3021  0690  0022               	movlb	2	; select bank2
  3022  0691  0197               	clrf	23	;volatile
  3023                           
  3024                           ;SLP.c: 21: IOCBNTmp=IOCBN;
  3025  0692  0027               	movlb	7	; select bank7
  3026  0693  0815               	movf	21,w	;volatile
  3027  0694  00FA               	movwf	??_SLPSleep
  3028  0695  087A               	movf	??_SLPSleep,w
  3029  0696  0020               	movlb	0	; select bank0
  3030  0697  00A0               	movwf	SLPSleep@IOCBNTmp
  3031                           
  3032                           ;SLP.c: 22: INTCONTmp=INTCON;
  3033  0698  080B               	movf	11,w	;volatile
  3034  0699  00FA               	movwf	??_SLPSleep
  3035  069A  087A               	movf	??_SLPSleep,w
  3036  069B  00A1               	movwf	SLPSleep@INTCONTmp
  3037                           
  3038                           ;SLP.c: 23: INTCON=0b10001000;
  3039  069C  3088               	movlw	136
  3040  069D  008B               	movwf	11	;volatile
  3041                           
  3042                           ;SLP.c: 24: IOCBN=0b00000100;
  3043  069E  3004               	movlw	4
  3044  069F  0027               	movlb	7	; select bank7
  3045  06A0  0095               	movwf	21	;volatile
  3046                           
  3047                           ;SLP.c: 26: TESTBATTtmp=0;
  3048  06A1  0020               	movlb	0	; select bank0
  3049  06A2  01A7               	clrf	SLPSleep@TESTBATTtmp
  3050                           
  3051                           ;SLP.c: 27: if(LATAbits.LATA0)
  3052  06A3  0022               	movlb	2	; select bank2
  3053  06A4  1C0C               	btfss	12,0	;volatile
  3054  06A5  2EA9               	goto	l3607
  3055                           
  3056                           ;SLP.c: 28: TESTBATTtmp=1;
  3057  06A6  0020               	movlb	0	; select bank0
  3058  06A7  01A7               	clrf	SLPSleep@TESTBATTtmp
  3059  06A8  0AA7               	incf	SLPSleep@TESTBATTtmp,f
  3060  06A9                     l3607:	
  3061                           
  3062                           ;SLP.c: 30: WDTCONTmp=WDTCON;
  3063  06A9  0021               	movlb	1	; select bank1
  3064  06AA  0817               	movf	23,w	;volatile
  3065  06AB  00FA               	movwf	??_SLPSleep
  3066  06AC  087A               	movf	??_SLPSleep,w
  3067  06AD  0020               	movlb	0	; select bank0
  3068  06AE  00A3               	movwf	SLPSleep@WDTCONTmp
  3069                           
  3070                           ;SLP.c: 31: WDTCON=0b00011011;
  3071  06AF  301B               	movlw	27
  3072  06B0  0021               	movlb	1	; select bank1
  3073  06B1  0097               	movwf	23	;volatile
  3074                           
  3075                           ;SLP.c: 33: OPTION_REGTmp=OPTION_REG;
  3076  06B2  0815               	movf	21,w	;volatile
  3077  06B3  00FA               	movwf	??_SLPSleep
  3078  06B4  087A               	movf	??_SLPSleep,w
  3079  06B5  0020               	movlb	0	; select bank0
  3080  06B6  00A4               	movwf	SLPSleep@OPTION_REGTmp
  3081                           
  3082                           ;SLP.c: 34: OPTION_REG=0b00001010;
  3083  06B7  300A               	movlw	10
  3084  06B8  0021               	movlb	1	; select bank1
  3085  06B9  0095               	movwf	21	;volatile
  3086  06BA  0064               	clrwdt	;# 
  3087  06BB  0063               	sleep	;# 
  3088                           
  3089                           ;SLP.c: 39: IOCBN=IOCBNTmp;
  3090  06BC  0020               	movlb	0	; select bank0
  3091  06BD  0820               	movf	SLPSleep@IOCBNTmp,w
  3092  06BE  0027               	movlb	7	; select bank7
  3093  06BF  0095               	movwf	21	;volatile
  3094                           
  3095                           ;SLP.c: 40: INTCON=INTCONTmp;
  3096  06C0  0020               	movlb	0	; select bank0
  3097  06C1  0821               	movf	SLPSleep@INTCONTmp,w
  3098  06C2  008B               	movwf	11	;volatile
  3099                           
  3100                           ;SLP.c: 41: WPUB=WPUBTmp;
  3101  06C3  0822               	movf	SLPSleep@WPUBTmp,w
  3102  06C4  0024               	movlb	4	; select bank4
  3103  06C5  008D               	movwf	13	;volatile
  3104                           
  3105                           ;SLP.c: 42: ADCON0=ADCON0Tmp;
  3106  06C6  0020               	movlb	0	; select bank0
  3107  06C7  0826               	movf	SLPSleep@ADCON0Tmp,w
  3108  06C8  0021               	movlb	1	; select bank1
  3109  06C9  009D               	movwf	29	;volatile
  3110                           
  3111                           ;SLP.c: 43: FVRCON=FVRCONTmp;
  3112  06CA  0020               	movlb	0	; select bank0
  3113  06CB  0825               	movf	SLPSleep@FVRCONTmp,w
  3114  06CC  0022               	movlb	2	; select bank2
  3115  06CD  0097               	movwf	23	;volatile
  3116                           
  3117                           ;SLP.c: 44: LATAbits.LATA0=0;
  3118  06CE  100C               	bcf	12,0	;volatile
  3119                           
  3120                           ;SLP.c: 45: if(TESTBATTtmp)
  3121  06CF  0020               	movlb	0	; select bank0
  3122  06D0  0827               	movf	SLPSleep@TESTBATTtmp,w
  3123  06D1  1903               	btfsc	3,2
  3124  06D2  2ED5               	goto	l3615
  3125                           
  3126                           ;SLP.c: 46: LATAbits.LATA0=1;
  3127  06D3  0022               	movlb	2	; select bank2
  3128  06D4  140C               	bsf	12,0	;volatile
  3129  06D5                     l3615:	
  3130                           
  3131                           ;SLP.c: 47: WDTCON=WDTCONTmp;
  3132  06D5  0020               	movlb	0	; select bank0
  3133  06D6  0823               	movf	SLPSleep@WDTCONTmp,w
  3134  06D7  0021               	movlb	1	; select bank1
  3135  06D8  0097               	movwf	23	;volatile
  3136                           
  3137                           ;SLP.c: 48: OPTION_REG=OPTION_REGTmp;
  3138  06D9  0020               	movlb	0	; select bank0
  3139  06DA  0824               	movf	SLPSleep@OPTION_REGTmp,w
  3140  06DB  0021               	movlb	1	; select bank1
  3141  06DC  0095               	movwf	21	;volatile
  3142                           
  3143                           ;SLP.c: 50: flg_slp.exitSleep=1;
  3144  06DD  0020               	movlb	0	; select bank0
  3145  06DE  14EA               	bsf	_flg_slp,1
  3146  06DF  0008               	return
  3147  06E0                     __end_of_SLPSleep:	
  3148                           
  3149                           	psect	text3
  3150  0B00                     __ptext3:	
  3151 ;; *************** function _CC1Sleep *****************
  3152 ;; Defined at:
  3153 ;;		line 146 in file "CC1.c"
  3154 ;; Parameters:    Size  Location     Type
  3155 ;;		None
  3156 ;; Auto vars:     Size  Location     Type
  3157 ;;		None
  3158 ;; Return value:  Size  Location     Type
  3159 ;;		None               void
  3160 ;; Registers used:
  3161 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3162 ;; Tracked objects:
  3163 ;;		On entry : 0/0
  3164 ;;		On exit  : 0/0
  3165 ;;		Unchanged: 0/0
  3166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3170 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3171 ;;Total ram usage:        0 bytes
  3172 ;; Hardware stack levels used:    1
  3173 ;; Hardware stack levels required when called:    4
  3174 ;; This function calls:
  3175 ;;		_CC1Strobe
  3176 ;; This function is called by:
  3177 ;;		_SLPSleep
  3178 ;; This function uses a non-reentrant model
  3179 ;;
  3180                           
  3181                           
  3182                           ;psect for function _CC1Sleep
  3183  0B00                     _CC1Sleep:	
  3184                           
  3185                           ;CC1.c: 149: LATAbits.LATA5=0;
  3186                           
  3187                           ;incstack = 0
  3188                           ; Regs used in _CC1Sleep: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3189  0B00  0022               	movlb	2	; select bank2
  3190  0B01  128C               	bcf	12,5	;volatile
  3191                           
  3192                           ;CC1.c: 151: CC1Strobe(SWOR);
  3193  0B02  3038               	movlw	56
  3194  0B03  318B  23C0         	fcall	_CC1Strobe
  3195                           
  3196                           ;CC1.c: 153: LATAbits.LATA5=1;
  3197  0B05  0022               	movlb	2	; select bank2
  3198  0B06  168C               	bsf	12,5	;volatile
  3199  0B07  0008               	return
  3200  0B08                     __end_of_CC1Sleep:	
  3201                           
  3202                           	psect	text4
  3203  0B3B                     __ptext4:	
  3204 ;; *************** function _RTXTick *****************
  3205 ;; Defined at:
  3206 ;;		line 89 in file "RTX.c"
  3207 ;; Parameters:    Size  Location     Type
  3208 ;;		None
  3209 ;; Auto vars:     Size  Location     Type
  3210 ;;		None
  3211 ;; Return value:  Size  Location     Type
  3212 ;;		None               void
  3213 ;; Registers used:
  3214 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3215 ;; Tracked objects:
  3216 ;;		On entry : 0/0
  3217 ;;		On exit  : 0/0
  3218 ;;		Unchanged: 0/0
  3219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3223 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3224 ;;Total ram usage:        0 bytes
  3225 ;; Hardware stack levels used:    1
  3226 ;; Hardware stack levels required when called:    6
  3227 ;; This function calls:
  3228 ;;		_RTXSendData
  3229 ;; This function is called by:
  3230 ;;		_SYSTask
  3231 ;; This function uses a non-reentrant model
  3232 ;;
  3233                           
  3234                           
  3235                           ;psect for function _RTXTick
  3236  0B3B                     _RTXTick:	
  3237                           
  3238                           ;RTX.c: 92: if(tmrRcvPkt)
  3239                           
  3240                           ;incstack = 0
  3241                           ; Regs used in _RTXTick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3242  0B3B  0020               	movlb	0	; select bank0
  3243  0B3C  086D               	movf	_tmrRcvPkt,w
  3244  0B3D  1903               	btfsc	3,2
  3245  0B3E  0008               	return
  3246                           
  3247                           ;RTX.c: 93: {
  3248                           ;RTX.c: 94: tmrRcvPkt--;
  3249  0B3F  3001               	movlw	1
  3250  0B40  02ED               	subwf	_tmrRcvPkt,f
  3251                           
  3252                           ;RTX.c: 95: if(!(tmrRcvPkt))
  3253  0B41  086D               	movf	_tmrRcvPkt,w
  3254  0B42  1D03               	btfss	3,2
  3255  0B43  0008               	return
  3256                           
  3257                           ;RTX.c: 96: RTXSendData();
  3258  0B44  3185  25F9         	fcall	_RTXSendData
  3259  0B46  0008               	return
  3260  0B47                     __end_of_RTXTick:	
  3261                           
  3262                           	psect	text5
  3263  0C05                     __ptext5:	
  3264 ;; *************** function _RTXAwake *****************
  3265 ;; Defined at:
  3266 ;;		line 107 in file "RTX.c"
  3267 ;; Parameters:    Size  Location     Type
  3268 ;;		None
  3269 ;; Auto vars:     Size  Location     Type
  3270 ;;		None
  3271 ;; Return value:  Size  Location     Type
  3272 ;;		None               void
  3273 ;; Registers used:
  3274 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3275 ;; Tracked objects:
  3276 ;;		On entry : 0/0
  3277 ;;		On exit  : 0/0
  3278 ;;		Unchanged: 0/0
  3279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3281 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3283 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3284 ;;Total ram usage:        0 bytes
  3285 ;; Hardware stack levels used:    1
  3286 ;; Hardware stack levels required when called:    9
  3287 ;; This function calls:
  3288 ;;		_CC1Init
  3289 ;;		_DLYDelay_ms
  3290 ;;		_RTXInit
  3291 ;; This function is called by:
  3292 ;;		_SYSTask
  3293 ;; This function uses a non-reentrant model
  3294 ;;
  3295                           
  3296                           
  3297                           ;psect for function _RTXAwake
  3298  0C05                     _RTXAwake:	
  3299                           
  3300                           ;RTX.c: 110: LATAbits.LATA5=0;
  3301                           
  3302                           ;incstack = 0
  3303                           ; Regs used in _RTXAwake: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3304  0C05  0022               	movlb	2	; select bank2
  3305  0C06  128C               	bcf	12,5	;volatile
  3306                           
  3307                           ;RTX.c: 111: DLYDelay_ms(1);
  3308  0C07  3001               	movlw	1
  3309  0C08  00F1               	movwf	DLYDelay_ms@val
  3310  0C09  3000               	movlw	0
  3311  0C0A  00F2               	movwf	DLYDelay_ms@val+1
  3312  0C0B  318B  23EC  318C   	fcall	_DLYDelay_ms
  3313                           
  3314                           ;RTX.c: 112: LATAbits.LATA5=1;
  3315  0C0E  0022               	movlb	2	; select bank2
  3316  0C0F  168C               	bsf	12,5	;volatile
  3317                           
  3318                           ;RTX.c: 113: DLYDelay_ms(1);
  3319  0C10  3001               	movlw	1
  3320  0C11  00F1               	movwf	DLYDelay_ms@val
  3321  0C12  3000               	movlw	0
  3322  0C13  00F2               	movwf	DLYDelay_ms@val+1
  3323  0C14  318B  23EC  318C   	fcall	_DLYDelay_ms
  3324                           
  3325                           ;RTX.c: 116: CC1Init(2);
  3326  0C17  3002               	movlw	2
  3327  0C18  318C  2455  318C   	fcall	_CC1Init
  3328                           
  3329                           ;RTX.c: 119: RTXInit(2);
  3330  0C1B  3002               	movlw	2
  3331  0C1C  318D  258A         	fcall	_RTXInit
  3332  0C1E  0008               	return
  3333  0C1F                     __end_of_RTXAwake:	
  3334                           
  3335                           	psect	text6
  3336  0D8A                     __ptext6:	
  3337 ;; *************** function _RTXInit *****************
  3338 ;; Defined at:
  3339 ;;		line 66 in file "RTX.c"
  3340 ;; Parameters:    Size  Location     Type
  3341 ;;  state           1    wreg     unsigned char 
  3342 ;; Auto vars:     Size  Location     Type
  3343 ;;  state           1   63[BANK0 ] unsigned char 
  3344 ;; Return value:  Size  Location     Type
  3345 ;;		None               void
  3346 ;; Registers used:
  3347 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3348 ;; Tracked objects:
  3349 ;;		On entry : 0/0
  3350 ;;		On exit  : 0/0
  3351 ;;		Unchanged: 0/0
  3352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3353 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3354 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3355 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3356 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3357 ;;Total ram usage:        1 bytes
  3358 ;; Hardware stack levels used:    1
  3359 ;; Hardware stack levels required when called:    8
  3360 ;; This function calls:
  3361 ;;		_CC1Strobe
  3362 ;;		_RTXStartSendData
  3363 ;; This function is called by:
  3364 ;;		_RTXAwake
  3365 ;;		_main
  3366 ;; This function uses a non-reentrant model
  3367 ;;
  3368                           
  3369                           
  3370                           ;psect for function _RTXInit
  3371  0D8A                     _RTXInit:	
  3372                           
  3373                           ;incstack = 0
  3374                           ; Regs used in _RTXInit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3375                           ;RTXInit@state stored from wreg
  3376  0D8A  0020               	movlb	0	; select bank0
  3377  0D8B  00DF               	movwf	RTXInit@state
  3378                           
  3379                           ;RTX.c: 68: switch(state)
  3380  0D8C  2DA1               	goto	l3553
  3381  0D8D                     l3545:	
  3382                           ;RTX.c: 73: case 1:
  3383                           
  3384                           ;RTX.c: 72: break;
  3385                           
  3386                           ;RTX.c: 69: {
  3387                           ;RTX.c: 70: case 0:
  3388                           
  3389                           
  3390                           ;RTX.c: 75: tmrRcvPkt=0;
  3391  0D8D  01ED               	clrf	_tmrRcvPkt
  3392                           
  3393                           ;RTX.c: 76: cntSndData=0;
  3394  0D8E  0021               	movlb	1	; select bank1
  3395  0D8F  01AC               	clrf	_cntSndData^(0+128)
  3396                           
  3397                           ;RTX.c: 77: rtx_flg.val=0;
  3398  0D90  01AE               	clrf	_rtx_flg^(0+128)
  3399                           
  3400                           ;RTX.c: 78: break;
  3401  0D91  0008               	return
  3402  0D92                     l3547:	
  3403                           ;RTX.c: 79: case 2:
  3404                           
  3405                           
  3406                           ;RTX.c: 81: CC1Strobe(SIDLE);
  3407  0D92  3036               	movlw	54
  3408  0D93  318B  23C0  318D   	fcall	_CC1Strobe
  3409                           
  3410                           ;RTX.c: 82: CC1Strobe(SCAL);
  3411  0D96  3033               	movlw	51
  3412  0D97  318B  23C0  318D   	fcall	_CC1Strobe
  3413                           
  3414                           ;RTX.c: 83: CC1Strobe(SRX);
  3415  0D9A  3034               	movlw	52
  3416  0D9B  318B  23C0  318D   	fcall	_CC1Strobe
  3417                           
  3418                           ;RTX.c: 84: RTXStartSendData();
  3419  0D9E  318B  2381         	fcall	_RTXStartSendData
  3420                           
  3421                           ;RTX.c: 86: }
  3422                           
  3423                           ;RTX.c: 85: break;
  3424  0DA0  0008               	return
  3425  0DA1                     l3553:	
  3426  0DA1  0020               	movlb	0	; select bank0
  3427  0DA2  085F               	movf	RTXInit@state,w
  3428                           
  3429                           ; Switch size 1, requested type "space"
  3430                           ; Number of cases is 3, Range of values is 0 to 2
  3431                           ; switch strategies available:
  3432                           ; Name         Instructions Cycles
  3433                           ; simple_byte           10     6 (average)
  3434                           ; direct_byte           12     6 (fixed)
  3435                           ; jumptable            260     6 (fixed)
  3436                           ;	Chosen strategy is simple_byte
  3437  0DA3  3A00               	xorlw	0	; case 0
  3438  0DA4  1903               	skipnz
  3439  0DA5  2DAD               	goto	l474
  3440  0DA6  3A01               	xorlw	1	; case 1
  3441  0DA7  1903               	skipnz
  3442  0DA8  2D8D               	goto	l3545
  3443  0DA9  3A03               	xorlw	3	; case 2
  3444  0DAA  1903               	skipnz
  3445  0DAB  2D92               	goto	l3547
  3446  0DAC  2DAD               	goto	l474
  3447  0DAD                     l474:	
  3448  0DAD  0008               	return
  3449  0DAE                     __end_of_RTXInit:	
  3450                           
  3451                           	psect	text7
  3452  0C55                     __ptext7:	
  3453 ;; *************** function _CC1Init *****************
  3454 ;; Defined at:
  3455 ;;		line 76 in file "CC1.c"
  3456 ;; Parameters:    Size  Location     Type
  3457 ;;  state           1    wreg     unsigned char 
  3458 ;; Auto vars:     Size  Location     Type
  3459 ;;  state           1    4[BANK0 ] unsigned char 
  3460 ;; Return value:  Size  Location     Type
  3461 ;;		None               void
  3462 ;; Registers used:
  3463 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3464 ;; Tracked objects:
  3465 ;;		On entry : 0/0
  3466 ;;		On exit  : 0/0
  3467 ;;		Unchanged: 0/0
  3468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3470 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3472 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3473 ;;Total ram usage:        1 bytes
  3474 ;; Hardware stack levels used:    1
  3475 ;; Hardware stack levels required when called:    5
  3476 ;; This function calls:
  3477 ;;		_CC1LoadREG
  3478 ;;		_CC1Strobe
  3479 ;;		_DLYDelay_ms
  3480 ;; This function is called by:
  3481 ;;		_RTXAwake
  3482 ;;		_main
  3483 ;; This function uses a non-reentrant model
  3484 ;;
  3485                           
  3486                           
  3487                           ;psect for function _CC1Init
  3488  0C55                     _CC1Init:	
  3489                           
  3490                           ;incstack = 0
  3491                           ; Regs used in _CC1Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3492                           ;CC1Init@state stored from wreg
  3493  0C55  0020               	movlb	0	; select bank0
  3494  0C56  00A4               	movwf	CC1Init@state
  3495                           
  3496                           ;CC1.c: 78: switch(state)
  3497  0C57  2C66               	goto	l3535
  3498  0C58                     l3527:	
  3499                           ;CC1.c: 86: case 2:
  3500                           
  3501                           ;CC1.c: 85: break;
  3502                           
  3503                           ;CC1.c: 79: {
  3504                           ;CC1.c: 83: case 1:
  3505                           
  3506                           
  3507                           ;CC1.c: 88: CC1Strobe(SRES);
  3508  0C58  3030               	movlw	48
  3509  0C59  318B  23C0  318C   	fcall	_CC1Strobe
  3510                           
  3511                           ;CC1.c: 89: DLYDelay_ms(5);
  3512  0C5C  3005               	movlw	5
  3513  0C5D  00F1               	movwf	DLYDelay_ms@val
  3514  0C5E  3000               	movlw	0
  3515  0C5F  00F2               	movwf	DLYDelay_ms@val+1
  3516  0C60  318B  23EC  318C   	fcall	_DLYDelay_ms
  3517                           
  3518                           ;CC1.c: 90: CC1LoadREG();
  3519  0C63  318D  25FA         	fcall	_CC1LoadREG
  3520                           
  3521                           ;CC1.c: 92: }
  3522                           
  3523                           ;CC1.c: 91: break;
  3524  0C65  0008               	return
  3525  0C66                     l3535:	
  3526  0C66  0020               	movlb	0	; select bank0
  3527  0C67  0824               	movf	CC1Init@state,w
  3528                           
  3529                           ; Switch size 1, requested type "space"
  3530                           ; Number of cases is 2, Range of values is 1 to 2
  3531                           ; switch strategies available:
  3532                           ; Name         Instructions Cycles
  3533                           ; simple_byte            7     4 (average)
  3534                           ; direct_byte           13     9 (fixed)
  3535                           ; jumptable            263     9 (fixed)
  3536                           ;	Chosen strategy is simple_byte
  3537  0C68  3A01               	xorlw	1	; case 1
  3538  0C69  1903               	skipnz
  3539  0C6A  2C6F               	goto	l177
  3540  0C6B  3A03               	xorlw	3	; case 2
  3541  0C6C  1903               	skipnz
  3542  0C6D  2C58               	goto	l3527
  3543  0C6E  2C6F               	goto	l177
  3544  0C6F                     l177:	
  3545  0C6F  0008               	return
  3546  0C70                     __end_of_CC1Init:	
  3547                           
  3548                           	psect	text8
  3549  0DFA                     __ptext8:	
  3550 ;; *************** function _CC1LoadREG *****************
  3551 ;; Defined at:
  3552 ;;		line 157 in file "CC1.c"
  3553 ;; Parameters:    Size  Location     Type
  3554 ;;		None
  3555 ;; Auto vars:     Size  Location     Type
  3556 ;;		None
  3557 ;; Return value:  Size  Location     Type
  3558 ;;		None               void
  3559 ;; Registers used:
  3560 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3561 ;; Tracked objects:
  3562 ;;		On entry : 0/0
  3563 ;;		On exit  : 0/0
  3564 ;;		Unchanged: 0/0
  3565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3567 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3568 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3569 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3570 ;;Total ram usage:        1 bytes
  3571 ;; Hardware stack levels used:    1
  3572 ;; Hardware stack levels required when called:    4
  3573 ;; This function calls:
  3574 ;;		_CC1Read
  3575 ;;		_CC1Write
  3576 ;; This function is called by:
  3577 ;;		_CC1Init
  3578 ;; This function uses a non-reentrant model
  3579 ;;
  3580                           
  3581                           
  3582                           ;psect for function _CC1LoadREG
  3583  0DFA                     _CC1LoadREG:	
  3584                           
  3585                           ;CC1.c: 159: CC1Write(0x00,cc1InitVal,0x2E);
  3586                           
  3587                           ;incstack = 0
  3588                           ; Regs used in _CC1LoadREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3589  0DFA  30A0               	movlw	low _cc1InitVal
  3590  0DFB  00F7               	movwf	CC1Write@src
  3591  0DFC  3001               	movlw	high _cc1InitVal
  3592  0DFD  00F8               	movwf	CC1Write@src+1
  3593  0DFE  302E               	movlw	46
  3594  0DFF  0020               	movlb	0	; select bank0
  3595  0E00  00A3               	movwf	??_CC1LoadREG
  3596  0E01  0823               	movf	??_CC1LoadREG,w
  3597  0E02  00F9               	movwf	CC1Write@len
  3598  0E03  3000               	movlw	0
  3599  0E04  318D  2523  318D   	fcall	_CC1Write
  3600                           
  3601                           ;CC1.c: 160: CC1Write(0x3E,cc1PaTable,8);
  3602  0E07  30CF               	movlw	low _cc1PaTable
  3603  0E08  00F7               	movwf	CC1Write@src
  3604  0E09  3000               	movlw	high _cc1PaTable
  3605  0E0A  00F8               	movwf	CC1Write@src+1
  3606  0E0B  3008               	movlw	8
  3607  0E0C  0020               	movlb	0	; select bank0
  3608  0E0D  00A3               	movwf	??_CC1LoadREG
  3609  0E0E  0823               	movf	??_CC1LoadREG,w
  3610  0E0F  00F9               	movwf	CC1Write@len
  3611  0E10  303E               	movlw	62
  3612  0E11  318D  2523  318D   	fcall	_CC1Write
  3613                           
  3614                           ;CC1.c: 162: CC1Read(0x00,cc1InitVal_tmp,0x2E);
  3615  0E14  3020               	movlw	low _cc1InitVal_tmp
  3616  0E15  00F9               	movwf	CC1Read@dst
  3617  0E16  3001               	movlw	high _cc1InitVal_tmp
  3618  0E17  00FA               	movwf	CC1Read@dst+1
  3619  0E18  302E               	movlw	46
  3620  0E19  0020               	movlb	0	; select bank0
  3621  0E1A  00A3               	movwf	??_CC1LoadREG
  3622  0E1B  0823               	movf	??_CC1LoadREG,w
  3623  0E1C  00FB               	movwf	CC1Read@len
  3624  0E1D  3000               	movlw	0
  3625  0E1E  318D  2544         	fcall	_CC1Read
  3626  0E20  0008               	return
  3627  0E21                     __end_of_CC1LoadREG:	
  3628                           
  3629                           	psect	text9
  3630  0B90                     __ptext9:	
  3631 ;; *************** function _PGMTick *****************
  3632 ;; Defined at:
  3633 ;;		line 41 in file "PGM.c"
  3634 ;; Parameters:    Size  Location     Type
  3635 ;;		None
  3636 ;; Auto vars:     Size  Location     Type
  3637 ;;		None
  3638 ;; Return value:  Size  Location     Type
  3639 ;;		None               void
  3640 ;; Registers used:
  3641 ;;		wreg, status,2, status,0
  3642 ;; Tracked objects:
  3643 ;;		On entry : 0/0
  3644 ;;		On exit  : 0/0
  3645 ;;		Unchanged: 0/0
  3646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3647 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3648 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3650 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3651 ;;Total ram usage:        0 bytes
  3652 ;; Hardware stack levels used:    1
  3653 ;; Hardware stack levels required when called:    2
  3654 ;; This function calls:
  3655 ;;		Nothing
  3656 ;; This function is called by:
  3657 ;;		_SYSTask
  3658 ;; This function uses a non-reentrant model
  3659 ;;
  3660                           
  3661                           
  3662                           ;psect for function _PGMTick
  3663  0B90                     _PGMTick:	
  3664                           
  3665                           ;PGM.c: 44: if(tmrPgm)
  3666                           
  3667                           ;incstack = 0
  3668                           ; Regs used in _PGMTick: [wreg+status,2+status,0]
  3669  0B90  0020               	movlb	0	; select bank0
  3670  0B91  086C               	movf	_tmrPgm,w
  3671  0B92  1903               	btfsc	3,2
  3672  0B93  0008               	return
  3673                           
  3674                           ;PGM.c: 45: {
  3675                           ;PGM.c: 46: tmrPgm--;
  3676  0B94  3001               	movlw	1
  3677  0B95  02EC               	subwf	_tmrPgm,f
  3678                           
  3679                           ;PGM.c: 47: if(!(tmrPgm))
  3680  0B96  086C               	movf	_tmrPgm,w
  3681  0B97  1D03               	btfss	3,2
  3682  0B98  0008               	return
  3683                           
  3684                           ;PGM.c: 48: {
  3685                           ;PGM.c: 50: pgm_flg.pgmonoff=0;
  3686  0B99  106B               	bcf	_pgm_flg,0
  3687                           
  3688                           ;PGM.c: 52: LATCbits.LATC7=1;
  3689  0B9A  0022               	movlb	2	; select bank2
  3690  0B9B  178E               	bsf	14,7	;volatile
  3691                           
  3692                           ;PGM.c: 54: flg_slp.goSleep=1;
  3693  0B9C  0020               	movlb	0	; select bank0
  3694  0B9D  146A               	bsf	_flg_slp,0
  3695  0B9E  0008               	return
  3696  0B9F                     __end_of_PGMTick:	
  3697                           
  3698                           	psect	text10
  3699  0B10                     __ptext10:	
  3700 ;; *************** function _PGMSelLong *****************
  3701 ;; Defined at:
  3702 ;;		line 111 in file "PGM.c"
  3703 ;; Parameters:    Size  Location     Type
  3704 ;;		None
  3705 ;; Auto vars:     Size  Location     Type
  3706 ;;		None
  3707 ;; Return value:  Size  Location     Type
  3708 ;;		None               void
  3709 ;; Registers used:
  3710 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3711 ;; Tracked objects:
  3712 ;;		On entry : 0/0
  3713 ;;		On exit  : 0/0
  3714 ;;		Unchanged: 0/0
  3715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3717 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3719 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3720 ;;Total ram usage:        0 bytes
  3721 ;; Hardware stack levels used:    1
  3722 ;; Hardware stack levels required when called:    4
  3723 ;; This function calls:
  3724 ;;		_LEDNormalFlash
  3725 ;;		_PGMWriteNvm
  3726 ;; This function is called by:
  3727 ;;		_SYSTask
  3728 ;; This function uses a non-reentrant model
  3729 ;;
  3730                           
  3731                           
  3732                           ;psect for function _PGMSelLong
  3733  0B10                     _PGMSelLong:	
  3734                           
  3735                           ;PGM.c: 114: pgm_cfg.menu.val=0x00;
  3736                           
  3737                           ;incstack = 0
  3738                           ; Regs used in _PGMSelLong: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3739  0B10  0021               	movlb	1	; select bank1
  3740  0B11  01CC               	clrf	(_pgm_cfg^(0+128)+2)
  3741                           
  3742                           ;PGM.c: 116: PGMWriteNvm();
  3743  0B12  318B  2363  318B   	fcall	_PGMWriteNvm
  3744                           
  3745                           ;PGM.c: 118: LEDNormalFlash(3);
  3746  0B15  3003               	movlw	3
  3747  0B16  318C  24AB         	fcall	_LEDNormalFlash
  3748  0B18  0008               	return
  3749  0B19                     __end_of_PGMSelLong:	
  3750                           
  3751                           	psect	text11
  3752  0B55                     __ptext11:	
  3753 ;; *************** function _PGMSelDown *****************
  3754 ;; Defined at:
  3755 ;;		line 97 in file "PGM.c"
  3756 ;; Parameters:    Size  Location     Type
  3757 ;;		None
  3758 ;; Auto vars:     Size  Location     Type
  3759 ;;		None
  3760 ;; Return value:  Size  Location     Type
  3761 ;;		None               void
  3762 ;; Registers used:
  3763 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3764 ;; Tracked objects:
  3765 ;;		On entry : 0/0
  3766 ;;		On exit  : 0/0
  3767 ;;		Unchanged: 0/0
  3768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3770 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3771 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3772 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3773 ;;Total ram usage:        1 bytes
  3774 ;; Hardware stack levels used:    1
  3775 ;; Hardware stack levels required when called:    4
  3776 ;; This function calls:
  3777 ;;		_PGMWriteNvm
  3778 ;; This function is called by:
  3779 ;;		_SYSTask
  3780 ;; This function uses a non-reentrant model
  3781 ;;
  3782                           
  3783                           
  3784                           ;psect for function _PGMSelDown
  3785  0B55                     _PGMSelDown:	
  3786                           
  3787                           ;PGM.c: 100: pgm_flg.pgmonoff=1;
  3788                           
  3789                           ;incstack = 0
  3790                           ; Regs used in _PGMSelDown: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3791  0B55  0020               	movlb	0	; select bank0
  3792  0B56  146B               	bsf	_pgm_flg,0
  3793                           
  3794                           ;PGM.c: 102: LATCbits.LATC7=0;
  3795  0B57  0022               	movlb	2	; select bank2
  3796  0B58  138E               	bcf	14,7	;volatile
  3797                           
  3798                           ;PGM.c: 104: pgm_cfg.sensId=0;
  3799  0B59  0021               	movlb	1	; select bank1
  3800  0B5A  01CD               	clrf	(_pgm_cfg^(0+128)+3)
  3801                           
  3802                           ;PGM.c: 106: PGMWriteNvm();
  3803  0B5B  318B  2363         	fcall	_PGMWriteNvm
  3804                           
  3805                           ;PGM.c: 108: tmrPgm=100;
  3806  0B5D  3064               	movlw	100
  3807  0B5E  00FA               	movwf	??_PGMSelDown
  3808  0B5F  087A               	movf	??_PGMSelDown,w
  3809  0B60  0020               	movlb	0	; select bank0
  3810  0B61  00EC               	movwf	_tmrPgm
  3811  0B62  0008               	return
  3812  0B63                     __end_of_PGMSelDown:	
  3813                           
  3814                           	psect	text12
  3815  0AE4                     __ptext12:	
  3816 ;; *************** function _PGMPgmOff *****************
  3817 ;; Defined at:
  3818 ;;		line 89 in file "PGM.c"
  3819 ;; Parameters:    Size  Location     Type
  3820 ;;		None
  3821 ;; Auto vars:     Size  Location     Type
  3822 ;;		None
  3823 ;; Return value:  Size  Location     Type
  3824 ;;		None               void
  3825 ;; Registers used:
  3826 ;;		status,2
  3827 ;; Tracked objects:
  3828 ;;		On entry : 0/0
  3829 ;;		On exit  : 0/0
  3830 ;;		Unchanged: 0/0
  3831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3833 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3835 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3836 ;;Total ram usage:        0 bytes
  3837 ;; Hardware stack levels used:    1
  3838 ;; Hardware stack levels required when called:    2
  3839 ;; This function calls:
  3840 ;;		Nothing
  3841 ;; This function is called by:
  3842 ;;		_SYSTask
  3843 ;; This function uses a non-reentrant model
  3844 ;;
  3845                           
  3846                           
  3847                           ;psect for function _PGMPgmOff
  3848  0AE4                     _PGMPgmOff:	
  3849                           
  3850                           ;PGM.c: 92: tmrPgm=0;
  3851                           
  3852                           ;incstack = 0
  3853                           ; Regs used in _PGMPgmOff: [status,2]
  3854  0AE4  0020               	movlb	0	; select bank0
  3855  0AE5  01EC               	clrf	_tmrPgm
  3856                           
  3857                           ;PGM.c: 94: pgm_flg.pgmonoff=0;
  3858  0AE6  106B               	bcf	_pgm_flg,0
  3859  0AE7  0008               	return
  3860  0AE8                     __end_of_PGMPgmOff:	
  3861                           
  3862                           	psect	text13
  3863  0E21                     __ptext13:	
  3864 ;; *************** function _DINTick *****************
  3865 ;; Defined at:
  3866 ;;		line 46 in file "DIN.c"
  3867 ;; Parameters:    Size  Location     Type
  3868 ;;		None
  3869 ;; Auto vars:     Size  Location     Type
  3870 ;;		None
  3871 ;; Return value:  Size  Location     Type
  3872 ;;		None               void
  3873 ;; Registers used:
  3874 ;;		wreg, status,2, status,0
  3875 ;; Tracked objects:
  3876 ;;		On entry : 0/0
  3877 ;;		On exit  : 0/0
  3878 ;;		Unchanged: 0/0
  3879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3882 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3883 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3884 ;;Total ram usage:        1 bytes
  3885 ;; Hardware stack levels used:    1
  3886 ;; Hardware stack levels required when called:    2
  3887 ;; This function calls:
  3888 ;;		Nothing
  3889 ;; This function is called by:
  3890 ;;		_SYSTask
  3891 ;; This function uses a non-reentrant model
  3892 ;;
  3893                           
  3894                           
  3895                           ;psect for function _DINTick
  3896  0E21                     _DINTick:	
  3897                           
  3898                           ;DIN.c: 50: if(u_flg_din.tmrDbncSel)
  3899                           
  3900                           ;incstack = 0
  3901                           ; Regs used in _DINTick: [wreg+status,2+status,0]
  3902  0E21  0020               	movlb	0	; select bank0
  3903  0E22  1C6E               	btfss	_u_flg_din,0
  3904  0E23  2E36               	goto	l300
  3905                           
  3906                           ;DIN.c: 51: {
  3907                           ;DIN.c: 52: tmrDbncSel++;
  3908  0E24  3001               	movlw	1
  3909  0E25  00F1               	movwf	??_DINTick
  3910  0E26  0871               	movf	??_DINTick,w
  3911  0E27  0021               	movlb	1	; select bank1
  3912  0E28  07B1               	addwf	_tmrDbncSel^(0+128),f
  3913                           
  3914                           ;DIN.c: 53: if(tmrDbncSel>5)
  3915  0E29  3006               	movlw	6
  3916  0E2A  0231               	subwf	_tmrDbncSel^(0+128),w
  3917  0E2B  1C03               	skipc
  3918  0E2C  2E36               	goto	l300
  3919                           
  3920                           ;DIN.c: 54: {
  3921                           ;DIN.c: 55: u_flg_din.tmrDbncSel=0;
  3922  0E2D  0020               	movlb	0	; select bank0
  3923  0E2E  106E               	bcf	_u_flg_din,0
  3924                           
  3925                           ;DIN.c: 56: tmrDbncSel=0;
  3926  0E2F  0021               	movlb	1	; select bank1
  3927  0E30  01B1               	clrf	_tmrDbncSel^(0+128)
  3928                           
  3929                           ;DIN.c: 58: if(u_in_sta_currTask.sel)
  3930  0E31  1C7C               	btfss	_u_in_sta_currTask,0
  3931  0E32  2E35               	goto	l302
  3932                           
  3933                           ;DIN.c: 59: u_in_ev_down.sel=1;
  3934  0E33  1433               	bsf	_u_in_ev_down^(0+128),0
  3935  0E34  2E36               	goto	l300
  3936  0E35                     l302:	
  3937                           
  3938                           ;DIN.c: 60: else
  3939                           ;DIN.c: 61: u_in_ev_up.sel=1;
  3940  0E35  1435               	bsf	_u_in_ev_up^(0+128),0
  3941  0E36                     l300:	
  3942                           
  3943                           ;DIN.c: 62: }
  3944                           ;DIN.c: 63: }
  3945                           ;DIN.c: 66: if(u_flg_din.tmrLongSel)
  3946  0E36  0020               	movlb	0	; select bank0
  3947  0E37  1CEE               	btfss	_u_flg_din,1
  3948  0E38  0008               	return
  3949                           
  3950                           ;DIN.c: 67: {
  3951                           ;DIN.c: 68: tmrLongSel++;
  3952  0E39  3001               	movlw	1
  3953  0E3A  0021               	movlb	1	; select bank1
  3954  0E3B  07AA               	addwf	_tmrLongSel^(0+128),f
  3955  0E3C  3000               	movlw	0
  3956  0E3D  3DAB               	addwfc	(_tmrLongSel+1)^(0+128),f
  3957                           
  3958                           ;DIN.c: 69: if(tmrLongSel>200)
  3959  0E3E  3000               	movlw	0
  3960  0E3F  022B               	subwf	(_tmrLongSel+1)^(0+128),w
  3961  0E40  30C9               	movlw	201
  3962  0E41  1903               	skipnz
  3963  0E42  022A               	subwf	_tmrLongSel^(0+128),w
  3964  0E43  1C03               	skipc
  3965  0E44  0008               	return
  3966                           
  3967                           ;DIN.c: 70: {
  3968                           ;DIN.c: 72: tmrLongSel=0;
  3969  0E45  01AA               	clrf	_tmrLongSel^(0+128)
  3970  0E46  01AB               	clrf	(_tmrLongSel+1)^(0+128)
  3971                           
  3972                           ;DIN.c: 74: u_in_ev_long.sel=1;
  3973  0E47  1434               	bsf	_u_in_ev_long^(0+128),0
  3974  0E48  0008               	return
  3975  0E49                     __end_of_DINTick:	
  3976                           
  3977                           	psect	text14
  3978  0DD4                     __ptext14:	
  3979 ;; *************** function _SYSInit *****************
  3980 ;; Defined at:
  3981 ;;		line 17 in file "SYS.c"
  3982 ;; Parameters:    Size  Location     Type
  3983 ;;  state           1    wreg     unsigned char 
  3984 ;; Auto vars:     Size  Location     Type
  3985 ;;  state           1    2[COMMON] unsigned char 
  3986 ;; Return value:  Size  Location     Type
  3987 ;;		None               void
  3988 ;; Registers used:
  3989 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3990 ;; Tracked objects:
  3991 ;;		On entry : 0/0
  3992 ;;		On exit  : 0/0
  3993 ;;		Unchanged: 0/0
  3994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3996 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3997 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3998 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3999 ;;Total ram usage:        2 bytes
  4000 ;; Hardware stack levels used:    1
  4001 ;; Hardware stack levels required when called:    2
  4002 ;; This function calls:
  4003 ;;		Nothing
  4004 ;; This function is called by:
  4005 ;;		_main
  4006 ;; This function uses a non-reentrant model
  4007 ;;
  4008                           
  4009                           
  4010                           ;psect for function _SYSInit
  4011  0DD4                     _SYSInit:	
  4012                           
  4013                           ;incstack = 0
  4014                           ; Regs used in _SYSInit: [wreg-fsr0h+status,2+status,0]
  4015                           ;SYSInit@state stored from wreg
  4016  0DD4  00F2               	movwf	SYSInit@state
  4017                           
  4018                           ;SYS.c: 19: switch(state)
  4019  0DD5  2DF1               	goto	l3035
  4020  0DD6                     l3013:	
  4021                           ;SYS.c: 20: {
  4022                           ;SYS.c: 21: case 0:
  4023                           
  4024                           
  4025                           ;SYS.c: 23: OPTION_REG=0b00000110; OSCCON=0b01110011; WDTCON=0b00001001; IOCBP=0b0000000
      +                          0; IOCBN=0b00000000; TMR0=255-156; INTCON|=0b00100000; INTCON&=0b11111011; PIR1=0b000000
      +                          00; PIR2=0b00000000; PIE1=0b00000000; PIE2=0b00000000;
  4026  0DD6  3006               	movlw	6
  4027  0DD7  0021               	movlb	1	; select bank1
  4028  0DD8  0095               	movwf	21	;volatile
  4029  0DD9  3073               	movlw	115
  4030  0DDA  0099               	movwf	25	;volatile
  4031  0DDB  3009               	movlw	9
  4032  0DDC  0097               	movwf	23	;volatile
  4033  0DDD  0027               	movlb	7	; select bank7
  4034  0DDE  0194               	clrf	20	;volatile
  4035  0DDF  0195               	clrf	21	;volatile
  4036  0DE0  3063               	movlw	99
  4037  0DE1  0020               	movlb	0	; select bank0
  4038  0DE2  0095               	movwf	21	;volatile
  4039  0DE3  168B               	bsf	11,5	;volatile
  4040  0DE4  30FB               	movlw	251
  4041  0DE5  00F1               	movwf	??_SYSInit
  4042  0DE6  0871               	movf	??_SYSInit,w
  4043  0DE7  058B               	andwf	11,f	;volatile
  4044  0DE8  0191               	clrf	17	;volatile
  4045  0DE9  0192               	clrf	18	;volatile
  4046  0DEA  0021               	movlb	1	; select bank1
  4047  0DEB  0191               	clrf	17	;volatile
  4048  0DEC  0192               	clrf	18	;volatile
  4049                           
  4050                           ;SYS.c: 24: break;
  4051  0DED  0008               	return
  4052  0DEE                     l3031:	
  4053                           ;SYS.c: 25: case 1:
  4054                           
  4055                           
  4056                           ;SYS.c: 27: u_SYS_STA.VAL=0;
  4057  0DEE  0021               	movlb	1	; select bank1
  4058  0DEF  01B2               	clrf	_u_SYS_STA^(0+128)
  4059                           
  4060                           ;SYS.c: 32: }
  4061                           
  4062                           ;SYS.c: 28: break;
  4063  0DF0  0008               	return
  4064  0DF1                     l3035:	
  4065  0DF1  0872               	movf	SYSInit@state,w
  4066                           
  4067                           ; Switch size 1, requested type "space"
  4068                           ; Number of cases is 2, Range of values is 0 to 1
  4069                           ; switch strategies available:
  4070                           ; Name         Instructions Cycles
  4071                           ; simple_byte            7     4 (average)
  4072                           ; direct_byte           10     6 (fixed)
  4073                           ; jumptable            260     6 (fixed)
  4074                           ;	Chosen strategy is simple_byte
  4075  0DF2  3A00               	xorlw	0	; case 0
  4076  0DF3  1903               	skipnz
  4077  0DF4  2DD6               	goto	l3013
  4078  0DF5  3A01               	xorlw	1	; case 1
  4079  0DF6  1903               	skipnz
  4080  0DF7  2DEE               	goto	l3031
  4081  0DF8  2DF9               	goto	l596
  4082  0DF9                     l596:	
  4083  0DF9  0008               	return
  4084  0DFA                     __end_of_SYSInit:	
  4085                           
  4086                           	psect	text15
  4087  0D05                     __ptext15:	
  4088 ;; *************** function _SPIInit *****************
  4089 ;; Defined at:
  4090 ;;		line 8 in file "SPI.c"
  4091 ;; Parameters:    Size  Location     Type
  4092 ;;  state           1    wreg     unsigned char 
  4093 ;; Auto vars:     Size  Location     Type
  4094 ;;  state           1    2[COMMON] unsigned char 
  4095 ;; Return value:  Size  Location     Type
  4096 ;;		None               void
  4097 ;; Registers used:
  4098 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  4099 ;; Tracked objects:
  4100 ;;		On entry : 0/0
  4101 ;;		On exit  : 0/0
  4102 ;;		Unchanged: 0/0
  4103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4105 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4106 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4107 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4108 ;;Total ram usage:        2 bytes
  4109 ;; Hardware stack levels used:    1
  4110 ;; Hardware stack levels required when called:    2
  4111 ;; This function calls:
  4112 ;;		Nothing
  4113 ;; This function is called by:
  4114 ;;		_main
  4115 ;; This function uses a non-reentrant model
  4116 ;;
  4117                           
  4118                           
  4119                           ;psect for function _SPIInit
  4120  0D05                     _SPIInit:	
  4121                           
  4122                           ;incstack = 0
  4123                           ; Regs used in _SPIInit: [wreg-fsr0h+status,2+status,0]
  4124                           ;SPIInit@state stored from wreg
  4125  0D05  00F2               	movwf	SPIInit@state
  4126                           
  4127                           ;SPI.c: 10: switch(state)
  4128  0D06  2D17               	goto	l2931
  4129  0D07                     l58:	
  4130                           ;SPI.c: 11: {
  4131                           ;SPI.c: 12: case 0:
  4132                           
  4133                           
  4134                           ;SPI.c: 14: TRISC|=0b00010000; TRISC&=0b11010111; SSPCONbits.SSPEN=0; SSPBUF=0x00; SSPCO
      +                          N1=0b00000001; SSPCON2=0b00000000; SSPSTAT=0b01000000; SSPCONbits.SSPEN=1;
  4135  0D07  0021               	movlb	1	; select bank1
  4136  0D08  160E               	bsf	14,4	;volatile
  4137  0D09  30D7               	movlw	215
  4138  0D0A  00F1               	movwf	??_SPIInit
  4139  0D0B  0871               	movf	??_SPIInit,w
  4140  0D0C  058E               	andwf	14,f	;volatile
  4141  0D0D  0024               	movlb	4	; select bank4
  4142  0D0E  1295               	bcf	21,5	;volatile
  4143  0D0F  0191               	clrf	17	;volatile
  4144  0D10  3001               	movlw	1
  4145  0D11  0095               	movwf	21	;volatile
  4146  0D12  0196               	clrf	22	;volatile
  4147  0D13  3040               	movlw	64
  4148  0D14  0094               	movwf	20	;volatile
  4149  0D15  1695               	bsf	21,5	;volatile
  4150                           
  4151                           ;SPI.c: 22: }
  4152                           
  4153                           ;SPI.c: 21: break;
  4154                           
  4155                           ;SPI.c: 19: case 2:
  4156                           
  4157                           ;SPI.c: 18: break;
  4158                           
  4159                           ;SPI.c: 16: case 1:
  4160                           
  4161                           ;SPI.c: 15: break;
  4162  0D16  0008               	return
  4163  0D17                     l2931:	
  4164  0D17  0872               	movf	SPIInit@state,w
  4165                           
  4166                           ; Switch size 1, requested type "space"
  4167                           ; Number of cases is 3, Range of values is 0 to 2
  4168                           ; switch strategies available:
  4169                           ; Name         Instructions Cycles
  4170                           ; simple_byte           10     6 (average)
  4171                           ; direct_byte           12     6 (fixed)
  4172                           ; jumptable            260     6 (fixed)
  4173                           ;	Chosen strategy is simple_byte
  4174  0D18  3A00               	xorlw	0	; case 0
  4175  0D19  1903               	skipnz
  4176  0D1A  2D07               	goto	l58
  4177  0D1B  3A01               	xorlw	1	; case 1
  4178  0D1C  1903               	skipnz
  4179  0D1D  2D22               	goto	l62
  4180  0D1E  3A03               	xorlw	3	; case 2
  4181  0D1F  1903               	skipnz
  4182  0D20  2D22               	goto	l62
  4183  0D21  2D22               	goto	l62
  4184  0D22                     l62:	
  4185  0D22  0008               	return
  4186  0D23                     __end_of_SPIInit:	
  4187                           
  4188                           	psect	text16
  4189  0AEE                     __ptext16:	
  4190 ;; *************** function _RTXTask *****************
  4191 ;; Defined at:
  4192 ;;		line 100 in file "RTX.c"
  4193 ;; Parameters:    Size  Location     Type
  4194 ;;		None
  4195 ;; Auto vars:     Size  Location     Type
  4196 ;;		None
  4197 ;; Return value:  Size  Location     Type
  4198 ;;		None               void
  4199 ;; Registers used:
  4200 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4201 ;; Tracked objects:
  4202 ;;		On entry : 0/0
  4203 ;;		On exit  : 0/0
  4204 ;;		Unchanged: 0/0
  4205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4207 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4209 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4210 ;;Total ram usage:        0 bytes
  4211 ;; Hardware stack levels used:    1
  4212 ;; Hardware stack levels required when called:    9
  4213 ;; This function calls:
  4214 ;;		_RTXReadPkt
  4215 ;; This function is called by:
  4216 ;;		_main
  4217 ;; This function uses a non-reentrant model
  4218 ;;
  4219                           
  4220                           
  4221                           ;psect for function _RTXTask
  4222  0AEE                     _RTXTask:	
  4223                           
  4224                           ;RTX.c: 103: if(!(PORTBbits.RB0))
  4225                           
  4226                           ;incstack = 0
  4227                           ; Regs used in _RTXTask: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4228  0AEE  0020               	movlb	0	; select bank0
  4229  0AEF  180D               	btfsc	13,0	;volatile
  4230  0AF0  0008               	return
  4231                           
  4232                           ;RTX.c: 104: RTXReadPkt();
  4233  0AF1  3187  2744         	fcall	_RTXReadPkt
  4234  0AF3  0008               	return
  4235  0AF4                     __end_of_RTXTask:	
  4236                           
  4237                           	psect	text17
  4238  0744                     __ptext17:	
  4239 ;; *************** function _RTXReadPkt *****************
  4240 ;; Defined at:
  4241 ;;		line 152 in file "RTX.c"
  4242 ;; Parameters:    Size  Location     Type
  4243 ;;		None
  4244 ;; Auto vars:     Size  Location     Type
  4245 ;;  numRxByte       1   70[BANK0 ] unsigned char 
  4246 ;; Return value:  Size  Location     Type
  4247 ;;		None               void
  4248 ;; Registers used:
  4249 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4250 ;; Tracked objects:
  4251 ;;		On entry : 0/0
  4252 ;;		On exit  : 0/0
  4253 ;;		Unchanged: 0/0
  4254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4256 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4257 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4258 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4259 ;;Total ram usage:        2 bytes
  4260 ;; Hardware stack levels used:    1
  4261 ;; Hardware stack levels required when called:    8
  4262 ;; This function calls:
  4263 ;;		_CC1Read
  4264 ;;		_CC1Strobe
  4265 ;;		_LEDNormalFlash
  4266 ;;		_PGMWriteNvm
  4267 ;;		_RTXRcvPkt
  4268 ;;		_RTXSendRPgm
  4269 ;;		_RTXStartSendData
  4270 ;; This function is called by:
  4271 ;;		_RTXTask
  4272 ;; This function uses a non-reentrant model
  4273 ;;
  4274                           
  4275                           
  4276                           ;psect for function _RTXReadPkt
  4277  0744                     _RTXReadPkt:	
  4278                           
  4279                           ;RTX.c: 154: unsigned char numRxByte;
  4280                           ;RTX.c: 157: CC1Read(0x3B,(&(numRxByte)),1);
  4281                           
  4282                           ;incstack = 0
  4283                           ; Regs used in _RTXReadPkt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4284  0744  3066               	movlw	low RTXReadPkt@numRxByte
  4285  0745  00F9               	movwf	CC1Read@dst
  4286  0746  3000               	movlw	high RTXReadPkt@numRxByte
  4287  0747  00FA               	movwf	CC1Read@dst+1
  4288  0748  01FB               	clrf	CC1Read@len
  4289  0749  0AFB               	incf	CC1Read@len,f
  4290  074A  303B               	movlw	59
  4291  074B  318D  2544  3187   	fcall	_CC1Read
  4292                           
  4293                           ;RTX.c: 158: while(numRxByte>=0x0A)
  4294  074E  300A               	movlw	10
  4295  074F  0020               	movlb	0	; select bank0
  4296  0750  0266               	subwf	RTXReadPkt@numRxByte,w
  4297  0751  1C03               	btfss	3,0
  4298  0752  0008               	return
  4299  0753  0064               	clrwdt	;# 
  4300                           
  4301                           ;RTX.c: 162: RTXRcvPkt(pktRx,0x0A);
  4302  0754  300A               	movlw	10
  4303  0755  0020               	movlb	0	; select bank0
  4304  0756  00E5               	movwf	??_RTXReadPkt
  4305  0757  0865               	movf	??_RTXReadPkt,w
  4306  0758  00A3               	movwf	RTXRcvPkt@len
  4307  0759  30B6               	movlw	(low (_pktRx| 0))& (0+255)
  4308  075A  318B  2347  3187   	fcall	_RTXRcvPkt
  4309                           
  4310                           ;RTX.c: 164: if(pgm_flg.pgmonoff)
  4311  075D  0020               	movlb	0	; select bank0
  4312  075E  1C6B               	btfss	_pgm_flg,0
  4313  075F  2F80               	goto	l3651
  4314                           
  4315                           ;RTX.c: 165: {
  4316                           ;RTX.c: 166: if(pktRx[ID_DEST]==0x00)
  4317  0760  0021               	movlb	1	; select bank1
  4318  0761  0836               	movf	_pktRx^(0+128),w
  4319  0762  1D03               	btfss	3,2
  4320  0763  2F44               	goto	_RTXReadPkt
  4321                           
  4322                           ;RTX.c: 167: {
  4323                           ;RTX.c: 169: if(pktRx[OP]==PGM)
  4324  0764  0339               	decf	(_pktRx^(0+128)+3),w
  4325  0765  1D03               	btfss	3,2
  4326  0766  2F44               	goto	_RTXReadPkt
  4327                           
  4328                           ;RTX.c: 170: {
  4329                           ;RTX.c: 172: pgm_cfg.baseId=pktRx[ID_SOURCE];
  4330  0767  0837               	movf	(_pktRx^(0+128)+1),w
  4331  0768  0020               	movlb	0	; select bank0
  4332  0769  00E5               	movwf	??_RTXReadPkt
  4333  076A  0865               	movf	??_RTXReadPkt,w
  4334  076B  0021               	movlb	1	; select bank1
  4335  076C  00CE               	movwf	(_pgm_cfg^(0+128)+4)
  4336                           
  4337                           ;RTX.c: 174: pgm_cfg.menu.baseIdProg=1;
  4338  076D  144C               	bsf	(_pgm_cfg^(0+128)+2),0
  4339                           
  4340                           ;RTX.c: 175: PGMWriteNvm();
  4341  076E  318B  2363  3187   	fcall	_PGMWriteNvm
  4342                           
  4343                           ;RTX.c: 177: RTXSendRPgm();
  4344  0771  318E  26C8  3187   	fcall	_RTXSendRPgm
  4345                           
  4346                           ;RTX.c: 179: rtx_flg.pgmDone=1;
  4347  0774  0021               	movlb	1	; select bank1
  4348  0775  142E               	bsf	_rtx_flg^(0+128),0
  4349                           
  4350                           ;RTX.c: 181: tmrRcvPkt=0;
  4351  0776  0020               	movlb	0	; select bank0
  4352  0777  01ED               	clrf	_tmrRcvPkt
  4353                           
  4354                           ;RTX.c: 183: RTXStartSendData();
  4355  0778  318B  2381  3187   	fcall	_RTXStartSendData
  4356                           
  4357                           ;RTX.c: 185: LEDNormalFlash(3);
  4358  077B  3003               	movlw	3
  4359  077C  318C  24AB  3187   	fcall	_LEDNormalFlash
  4360                           
  4361                           ;RTX.c: 186: }
  4362                           ;RTX.c: 187: }
  4363                           ;RTX.c: 188: }
  4364  077F  2F44               	goto	_RTXReadPkt
  4365  0780                     l3651:	
  4366                           
  4367                           ;RTX.c: 189: else
  4368                           ;RTX.c: 190: {
  4369                           ;RTX.c: 191: if((pktRx[ID_DEST]==pgm_cfg.sensId) && (pktRx[ID_SOURCE]==pgm_cfg.baseId))
  4370  0780  0021               	movlb	1	; select bank1
  4371  0781  084D               	movf	(_pgm_cfg^(0+128)+3),w
  4372  0782  0636               	xorwf	_pktRx^(0+128),w
  4373  0783  1D03               	skipz
  4374  0784  2F44               	goto	_RTXReadPkt
  4375  0785  084E               	movf	(_pgm_cfg^(0+128)+4),w
  4376  0786  0637               	xorwf	(_pktRx^(0+128)+1),w
  4377  0787  1D03               	skipz
  4378  0788  2F44               	goto	_RTXReadPkt
  4379                           
  4380                           ;RTX.c: 192: {
  4381                           ;RTX.c: 194: if(pktRx[OP]==rDAT)
  4382  0789  3080               	movlw	128
  4383  078A  0639               	xorwf	(_pktRx^(0+128)+3),w
  4384  078B  1D03               	btfss	3,2
  4385  078C  2F44               	goto	_RTXReadPkt
  4386                           
  4387                           ;RTX.c: 195: {
  4388                           ;RTX.c: 197: CC1Strobe(SIDLE);
  4389  078D  3036               	movlw	54
  4390  078E  318B  23C0  3187   	fcall	_CC1Strobe
  4391                           
  4392                           ;RTX.c: 199: tmrRcvPkt=0;
  4393  0791  0020               	movlb	0	; select bank0
  4394  0792  01ED               	clrf	_tmrRcvPkt
  4395                           
  4396                           ;RTX.c: 201: cntSndData=0;
  4397  0793  0021               	movlb	1	; select bank1
  4398  0794  01AC               	clrf	_cntSndData^(0+128)
  4399                           
  4400                           ;RTX.c: 203: flg_slp.goSleep=1;
  4401  0795  0020               	movlb	0	; select bank0
  4402  0796  146A               	bsf	_flg_slp,0
  4403  0797  2F44               	goto	_RTXReadPkt
  4404  0798                     __end_of_RTXReadPkt:	
  4405                           ;RTX.c: 204: }
  4406                           ;RTX.c: 205: }
  4407                           ;RTX.c: 206: }
  4408                           ;RTX.c: 208: CC1Read(0x3B,(&(numRxByte)),1);
  4409                           
  4410                           
  4411                           	psect	text18
  4412  0B81                     __ptext18:	
  4413 ;; *************** function _RTXStartSendData *****************
  4414 ;; Defined at:
  4415 ;;		line 212 in file "RTX.c"
  4416 ;; Parameters:    Size  Location     Type
  4417 ;;		None
  4418 ;; Auto vars:     Size  Location     Type
  4419 ;;		None
  4420 ;; Return value:  Size  Location     Type
  4421 ;;		None               void
  4422 ;; Registers used:
  4423 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4424 ;; Tracked objects:
  4425 ;;		On entry : 0/0
  4426 ;;		On exit  : 0/0
  4427 ;;		Unchanged: 0/0
  4428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4430 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4432 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4433 ;;Total ram usage:        0 bytes
  4434 ;; Hardware stack levels used:    1
  4435 ;; Hardware stack levels required when called:    7
  4436 ;; This function calls:
  4437 ;;		_ADCConv
  4438 ;;		_DLYDelay_ms
  4439 ;;		_RTXSendData
  4440 ;; This function is called by:
  4441 ;;		_RTXInit
  4442 ;;		_RTXReadPkt
  4443 ;; This function uses a non-reentrant model
  4444 ;;
  4445                           
  4446                           
  4447                           ;psect for function _RTXStartSendData
  4448  0B81                     _RTXStartSendData:	
  4449                           
  4450                           ;RTX.c: 215: DLYDelay_ms(100);
  4451                           
  4452                           ;incstack = 0
  4453                           ; Regs used in _RTXStartSendData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4454  0B81  3064               	movlw	100
  4455  0B82  00F1               	movwf	DLYDelay_ms@val
  4456  0B83  3000               	movlw	0
  4457  0B84  00F2               	movwf	DLYDelay_ms@val+1
  4458  0B85  318B  23EC  318B   	fcall	_DLYDelay_ms
  4459                           
  4460                           ;RTX.c: 217: ADCConv();
  4461  0B88  3180  2049  318B   	fcall	_ADCConv
  4462                           
  4463                           ;RTX.c: 219: cntSndData=0;
  4464  0B8B  0021               	movlb	1	; select bank1
  4465  0B8C  01AC               	clrf	_cntSndData^(0+128)
  4466                           
  4467                           ;RTX.c: 220: RTXSendData();
  4468  0B8D  3185  25F9         	fcall	_RTXSendData
  4469  0B8F  0008               	return
  4470  0B90                     __end_of_RTXStartSendData:	
  4471                           
  4472                           	psect	text19
  4473  05F9                     __ptext19:	
  4474 ;; *************** function _RTXSendData *****************
  4475 ;; Defined at:
  4476 ;;		line 223 in file "RTX.c"
  4477 ;; Parameters:    Size  Location     Type
  4478 ;;		None
  4479 ;; Auto vars:     Size  Location     Type
  4480 ;;  valBatt         3   12[BANK0 ] struct _RTX_DATA
  4481 ;;  valTemp         3    9[BANK0 ] struct _RTX_DATA
  4482 ;; Return value:  Size  Location     Type
  4483 ;;		None               void
  4484 ;; Registers used:
  4485 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4486 ;; Tracked objects:
  4487 ;;		On entry : 0/0
  4488 ;;		On exit  : 0/0
  4489 ;;		Unchanged: 0/0
  4490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4492 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4493 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4494 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4495 ;;Total ram usage:        7 bytes
  4496 ;; Hardware stack levels used:    1
  4497 ;; Hardware stack levels required when called:    5
  4498 ;; This function calls:
  4499 ;;		_LEDFastFlash
  4500 ;;		_RTXSndPkt
  4501 ;; This function is called by:
  4502 ;;		_RTXTick
  4503 ;;		_RTXStartSendData
  4504 ;; This function uses a non-reentrant model
  4505 ;;
  4506                           
  4507                           
  4508                           ;psect for function _RTXSendData
  4509  05F9                     _RTXSendData:	
  4510                           
  4511                           ;RTX.c: 225: tu_RTX_DATA valTemp,valBatt;
  4512                           ;RTX.c: 227: if(pgm_flg.pgmonoff)
  4513                           
  4514                           ;incstack = 0
  4515                           ; Regs used in _RTXSendData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4516  05F9  0020               	movlb	0	; select bank0
  4517  05FA  1C6B               	btfss	_pgm_flg,0
  4518  05FB  2E04               	goto	l3479
  4519                           
  4520                           ;RTX.c: 228: {
  4521                           ;RTX.c: 230: cntSndData=0;
  4522  05FC  0021               	movlb	1	; select bank1
  4523  05FD  01AC               	clrf	_cntSndData^(0+128)
  4524                           
  4525                           ;RTX.c: 232: tmrRcvPkt=100;
  4526  05FE  3064               	movlw	100
  4527  05FF  0020               	movlb	0	; select bank0
  4528  0600  00A8               	movwf	??_RTXSendData
  4529  0601  0828               	movf	??_RTXSendData,w
  4530  0602  00ED               	movwf	_tmrRcvPkt
  4531                           
  4532                           ;RTX.c: 233: }
  4533  0603  0008               	return
  4534  0604                     l3479:	
  4535                           
  4536                           ;RTX.c: 234: else
  4537                           ;RTX.c: 235: {
  4538                           ;RTX.c: 237: if(cntSndData<5)
  4539  0604  3005               	movlw	5
  4540  0605  0021               	movlb	1	; select bank1
  4541  0606  022C               	subwf	_cntSndData^(0+128),w
  4542  0607  1803               	skipnc
  4543  0608  2E73               	goto	l512
  4544                           
  4545                           ;RTX.c: 238: {
  4546                           ;RTX.c: 241: {
  4547                           ;RTX.c: 243: pktTx[ID_DEST]=pgm_cfg.baseId;
  4548  0609  084E               	movf	(_pgm_cfg^(0+128)+4),w
  4549  060A  0020               	movlb	0	; select bank0
  4550  060B  00A8               	movwf	??_RTXSendData
  4551  060C  0828               	movf	??_RTXSendData,w
  4552  060D  0021               	movlb	1	; select bank1
  4553  060E  00C0               	movwf	_pktTx^(0+128)
  4554                           
  4555                           ;RTX.c: 244: pktTx[ID_SOURCE]=pgm_cfg.sensId;
  4556  060F  084D               	movf	(_pgm_cfg^(0+128)+3),w
  4557  0610  0020               	movlb	0	; select bank0
  4558  0611  00A8               	movwf	??_RTXSendData
  4559  0612  0828               	movf	??_RTXSendData,w
  4560  0613  0021               	movlb	1	; select bank1
  4561  0614  00C1               	movwf	(_pktTx^(0+128)+1)
  4562                           
  4563                           ;RTX.c: 246: if(PORTBbits.RB5)
  4564  0615  0020               	movlb	0	; select bank0
  4565  0616  1E8D               	btfss	13,5	;volatile
  4566  0617  2E1C               	goto	l3487
  4567                           
  4568                           ;RTX.c: 247: pktTx[TYPE]=SENS_CURRGEN;
  4569  0618  0021               	movlb	1	; select bank1
  4570  0619  01C2               	clrf	(_pktTx^(0+128)+2)
  4571  061A  0AC2               	incf	(_pktTx^(0+128)+2),f
  4572  061B  2E22               	goto	l3489
  4573  061C                     l3487:	
  4574                           
  4575                           ;RTX.c: 248: else
  4576                           ;RTX.c: 249: pktTx[TYPE]=SENS_CURRCON;
  4577  061C  3002               	movlw	2
  4578  061D  0020               	movlb	0	; select bank0
  4579  061E  00A8               	movwf	??_RTXSendData
  4580  061F  0828               	movf	??_RTXSendData,w
  4581  0620  0021               	movlb	1	; select bank1
  4582  0621  00C2               	movwf	(_pktTx^(0+128)+2)
  4583  0622                     l3489:	
  4584                           
  4585                           ;RTX.c: 250: pktTx[OP]=DAT;
  4586  0622  01C3               	clrf	(_pktTx^(0+128)+3)
  4587                           
  4588                           ;RTX.c: 251: valTemp.val=rmsCurr+0;
  4589  0623  0823               	movf	_rmsCurr^(0+128),w
  4590  0624  0020               	movlb	0	; select bank0
  4591  0625  00A9               	movwf	RTXSendData@valTemp
  4592  0626  0021               	movlb	1	; select bank1
  4593  0627  0824               	movf	(_rmsCurr+1)^(0+128),w
  4594  0628  0020               	movlb	0	; select bank0
  4595  0629  00AA               	movwf	RTXSendData@valTemp+1
  4596  062A  0021               	movlb	1	; select bank1
  4597  062B  0825               	movf	(_rmsCurr+2)^(0+128),w
  4598  062C  0020               	movlb	0	; select bank0
  4599  062D  00AB               	movwf	RTXSendData@valTemp+2
  4600                           
  4601                           ;RTX.c: 252: pktTx[VAL]=valTemp.val_byte[0];
  4602  062E  0829               	movf	RTXSendData@valTemp,w
  4603  062F  00A8               	movwf	??_RTXSendData
  4604  0630  0828               	movf	??_RTXSendData,w
  4605  0631  0021               	movlb	1	; select bank1
  4606  0632  00C4               	movwf	(_pktTx^(0+128)+4)
  4607                           
  4608                           ;RTX.c: 253: pktTx[VAL+1]=valTemp.val_byte[1];
  4609  0633  0020               	movlb	0	; select bank0
  4610  0634  082A               	movf	RTXSendData@valTemp+1,w
  4611  0635  00A8               	movwf	??_RTXSendData
  4612  0636  0828               	movf	??_RTXSendData,w
  4613  0637  0021               	movlb	1	; select bank1
  4614  0638  00C5               	movwf	(_pktTx^(0+128)+5)
  4615                           
  4616                           ;RTX.c: 254: pktTx[VAL+2]=valTemp.val_byte[2];
  4617  0639  0020               	movlb	0	; select bank0
  4618  063A  082B               	movf	RTXSendData@valTemp+2,w
  4619  063B  00A8               	movwf	??_RTXSendData
  4620  063C  0828               	movf	??_RTXSendData,w
  4621  063D  0021               	movlb	1	; select bank1
  4622  063E  00C6               	movwf	(_pktTx^(0+128)+6)
  4623                           
  4624                           ;RTX.c: 255: valBatt.val=battV;
  4625  063F  0820               	movf	_battV^(0+128),w
  4626  0640  0020               	movlb	0	; select bank0
  4627  0641  00AC               	movwf	RTXSendData@valBatt
  4628  0642  0021               	movlb	1	; select bank1
  4629  0643  0821               	movf	(_battV+1)^(0+128),w
  4630  0644  0020               	movlb	0	; select bank0
  4631  0645  00AD               	movwf	RTXSendData@valBatt+1
  4632  0646  0021               	movlb	1	; select bank1
  4633  0647  0822               	movf	(_battV+2)^(0+128),w
  4634  0648  0020               	movlb	0	; select bank0
  4635  0649  00AE               	movwf	RTXSendData@valBatt+2
  4636                           
  4637                           ;RTX.c: 256: pktTx[BAT]=valBatt.val_byte[0];
  4638  064A  082C               	movf	RTXSendData@valBatt,w
  4639  064B  00A8               	movwf	??_RTXSendData
  4640  064C  0828               	movf	??_RTXSendData,w
  4641  064D  0021               	movlb	1	; select bank1
  4642  064E  00C6               	movwf	(_pktTx^(0+128)+6)
  4643                           
  4644                           ;RTX.c: 257: pktTx[BAT+1]=valBatt.val_byte[1];
  4645  064F  0020               	movlb	0	; select bank0
  4646  0650  082D               	movf	RTXSendData@valBatt+1,w
  4647  0651  00A8               	movwf	??_RTXSendData
  4648  0652  0828               	movf	??_RTXSendData,w
  4649  0653  0021               	movlb	1	; select bank1
  4650  0654  00C7               	movwf	(_pktTx^(0+128)+7)
  4651                           
  4652                           ;RTX.c: 258: pktTx[BAT+2]=valBatt.val_byte[2];
  4653  0655  0020               	movlb	0	; select bank0
  4654  0656  082E               	movf	RTXSendData@valBatt+2,w
  4655  0657  00A8               	movwf	??_RTXSendData
  4656  0658  0828               	movf	??_RTXSendData,w
  4657  0659  0021               	movlb	1	; select bank1
  4658  065A  00C8               	movwf	(_pktTx^(0+128)+8)
  4659                           
  4660                           ;RTX.c: 261: RTXSndPkt(pktTx,0x0A);
  4661  065B  300A               	movlw	10
  4662  065C  0020               	movlb	0	; select bank0
  4663  065D  00A8               	movwf	??_RTXSendData
  4664  065E  0828               	movf	??_RTXSendData,w
  4665  065F  00A3               	movwf	RTXSndPkt@len
  4666  0660  30C0               	movlw	(low (_pktTx| 0))& (0+255)
  4667  0661  318F  278C  3185   	fcall	_RTXSndPkt
  4668                           
  4669                           ;RTX.c: 264: cntSndData++;
  4670  0664  3001               	movlw	1
  4671  0665  0020               	movlb	0	; select bank0
  4672  0666  00A8               	movwf	??_RTXSendData
  4673  0667  0828               	movf	??_RTXSendData,w
  4674  0668  0021               	movlb	1	; select bank1
  4675  0669  07AC               	addwf	_cntSndData^(0+128),f
  4676                           
  4677                           ;RTX.c: 267: LEDFastFlash(1);
  4678  066A  3001               	movlw	1
  4679  066B  318C  24E7         	fcall	_LEDFastFlash
  4680                           
  4681                           ;RTX.c: 268: }
  4682                           ;RTX.c: 271: tmrRcvPkt=100;
  4683  066D  3064               	movlw	100
  4684  066E  0020               	movlb	0	; select bank0
  4685  066F  00A8               	movwf	??_RTXSendData
  4686  0670  0828               	movf	??_RTXSendData,w
  4687  0671  00ED               	movwf	_tmrRcvPkt
  4688                           
  4689                           ;RTX.c: 272: }
  4690  0672  0008               	return
  4691  0673                     l512:	
  4692                           
  4693                           ;RTX.c: 273: else
  4694                           ;RTX.c: 274: flg_slp.goSleep=1;
  4695  0673  0020               	movlb	0	; select bank0
  4696  0674  146A               	bsf	_flg_slp,0
  4697  0675  0008               	return
  4698  0676                     __end_of_RTXSendData:	
  4699                           
  4700                           	psect	text20
  4701  0CE7                     __ptext20:	
  4702 ;; *************** function _LEDFastFlash *****************
  4703 ;; Defined at:
  4704 ;;		line 38 in file "LED.c"
  4705 ;; Parameters:    Size  Location     Type
  4706 ;;  num             1    wreg     unsigned char 
  4707 ;; Auto vars:     Size  Location     Type
  4708 ;;  num             1    8[COMMON] unsigned char 
  4709 ;;  i               1    9[COMMON] unsigned char 
  4710 ;; Return value:  Size  Location     Type
  4711 ;;		None               void
  4712 ;; Registers used:
  4713 ;;		wreg, status,2, status,0, pclath, cstack
  4714 ;; Tracked objects:
  4715 ;;		On entry : 0/0
  4716 ;;		On exit  : 0/0
  4717 ;;		Unchanged: 0/0
  4718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4720 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4721 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4722 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4723 ;;Total ram usage:        3 bytes
  4724 ;; Hardware stack levels used:    1
  4725 ;; Hardware stack levels required when called:    3
  4726 ;; This function calls:
  4727 ;;		_DLYDelay_ms
  4728 ;; This function is called by:
  4729 ;;		_RTXSendData
  4730 ;; This function uses a non-reentrant model
  4731 ;;
  4732                           
  4733                           
  4734                           ;psect for function _LEDFastFlash
  4735  0CE7                     _LEDFastFlash:	
  4736                           
  4737                           ;incstack = 0
  4738                           ; Regs used in _LEDFastFlash: [wreg+status,2+status,0+pclath+cstack]
  4739                           ;LEDFastFlash@num stored from wreg
  4740  0CE7  00F8               	movwf	LEDFastFlash@num
  4741                           
  4742                           ;LED.c: 40: unsigned char i;
  4743                           ;LED.c: 42: for(i=0;i<num;i++)
  4744  0CE8  01F9               	clrf	LEDFastFlash@i
  4745  0CE9                     l2379:	
  4746  0CE9  0878               	movf	LEDFastFlash@num,w
  4747  0CEA  0279               	subwf	LEDFastFlash@i,w
  4748  0CEB  1803               	btfsc	3,0
  4749  0CEC  0008               	return
  4750  0CED  0064               	clrwdt	;# 
  4751                           
  4752                           ;LED.c: 45: LATCbits.LATC7=0;
  4753  0CEE  0022               	movlb	2	; select bank2
  4754  0CEF  138E               	bcf	14,7	;volatile
  4755                           
  4756                           ;LED.c: 46: DLYDelay_ms(5);
  4757  0CF0  3005               	movlw	5
  4758  0CF1  00F1               	movwf	DLYDelay_ms@val
  4759  0CF2  3000               	movlw	0
  4760  0CF3  00F2               	movwf	DLYDelay_ms@val+1
  4761  0CF4  318B  23EC  318C   	fcall	_DLYDelay_ms
  4762                           
  4763                           ;LED.c: 47: LATCbits.LATC7=1;
  4764  0CF7  0022               	movlb	2	; select bank2
  4765  0CF8  178E               	bsf	14,7	;volatile
  4766                           
  4767                           ;LED.c: 48: DLYDelay_ms(5);
  4768  0CF9  3005               	movlw	5
  4769  0CFA  00F1               	movwf	DLYDelay_ms@val
  4770  0CFB  3000               	movlw	0
  4771  0CFC  00F2               	movwf	DLYDelay_ms@val+1
  4772  0CFD  318B  23EC  318C   	fcall	_DLYDelay_ms
  4773  0D00  3001               	movlw	1
  4774  0D01  00F7               	movwf	??_LEDFastFlash
  4775  0D02  0877               	movf	??_LEDFastFlash,w
  4776  0D03  07F9               	addwf	LEDFastFlash@i,f
  4777  0D04  2CE9               	goto	l2379
  4778  0D05                     __end_of_LEDFastFlash:	
  4779                           
  4780                           	psect	text21
  4781  0049                     __ptext21:	
  4782 ;; *************** function _ADCConv *****************
  4783 ;; Defined at:
  4784 ;;		line 52 in file "ADC.c"
  4785 ;; Parameters:    Size  Location     Type
  4786 ;;		None
  4787 ;; Auto vars:     Size  Location     Type
  4788 ;;  sumCurr         4   56[BANK0 ] unsigned long 
  4789 ;;  sumBatt         2   60[BANK0 ] unsigned short 
  4790 ;;  curTmp          2    0        unsigned short 
  4791 ;;  cntSum          1   62[BANK0 ] unsigned char 
  4792 ;; Return value:  Size  Location     Type
  4793 ;;		None               void
  4794 ;; Registers used:
  4795 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4796 ;; Tracked objects:
  4797 ;;		On entry : 0/0
  4798 ;;		On exit  : 0/0
  4799 ;;		Unchanged: 0/0
  4800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4801 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4802 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4803 ;;      Temps:          0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4804 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4805 ;;Total ram usage:       24 bytes
  4806 ;; Hardware stack levels used:    1
  4807 ;; Hardware stack levels required when called:    6
  4808 ;; This function calls:
  4809 ;;		_DLYDelay_ms
  4810 ;;		___ftdiv
  4811 ;;		___ftmul
  4812 ;;		___lltoft
  4813 ;;		___lwdiv
  4814 ;;		___lwtoft
  4815 ;;		___wmul
  4816 ;;		_sqrt
  4817 ;; This function is called by:
  4818 ;;		_RTXStartSendData
  4819 ;; This function uses a non-reentrant model
  4820 ;;
  4821                           
  4822                           
  4823                           ;psect for function _ADCConv
  4824  0049                     _ADCConv:	
  4825                           
  4826                           ;ADC.c: 59: {
  4827                           ;ADC.c: 61: switch(adc_ch)
  4828                           
  4829                           ;incstack = 0
  4830                           ; Regs used in _ADCConv: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4831                           ;ADC.c: 54: unsigned char cntSum;
  4832                           ;ADC.c: 55: unsigned short sumBatt,curTmp;
  4833                           ;ADC.c: 56: unsigned long sumCurr;
  4834                           ;ADC.c: 58: while(1)
  4835  0049  29D5               	goto	l3463
  4836  004A                     l122:	
  4837                           ;ADC.c: 62: {
  4838                           ;ADC.c: 63: case ADC_CH_OFF:
  4839                           
  4840                           
  4841                           ;ADC.c: 65: LATAbits.LATA0=1;
  4842  004A  0022               	movlb	2	; select bank2
  4843  004B  140C               	bsf	12,0	;volatile
  4844                           
  4845                           ;ADC.c: 67: sumBatt=0;
  4846  004C  0020               	movlb	0	; select bank0
  4847  004D  01DC               	clrf	ADCConv@sumBatt
  4848  004E  01DD               	clrf	ADCConv@sumBatt+1
  4849                           
  4850                           ;ADC.c: 69: cntSum=0;
  4851  004F  01DE               	clrf	ADCConv@cntSum
  4852                           
  4853                           ;ADC.c: 71: ADCON1=0b10000011;
  4854  0050  3083               	movlw	131
  4855  0051  0021               	movlb	1	; select bank1
  4856  0052  009E               	movwf	30	;volatile
  4857                           
  4858                           ;ADC.c: 72: ADCON0=0b00000101;
  4859  0053  3005               	movlw	5
  4860  0054  009D               	movwf	29	;volatile
  4861                           
  4862                           ;ADC.c: 73: adc_ch=ADC_CH_BATT;
  4863  0055  0020               	movlb	0	; select bank0
  4864  0056  01E9               	clrf	_adc_ch
  4865  0057  0AE9               	incf	_adc_ch,f
  4866                           
  4867                           ;ADC.c: 74: break;
  4868  0058  29E1               	goto	l3465
  4869  0059                     l3427:	
  4870                           ;ADC.c: 75: case ADC_CH_BATT:
  4871                           
  4872                           
  4873                           ;ADC.c: 77: if(cntSum==10)
  4874  0059  300A               	movlw	10
  4875  005A  065E               	xorwf	ADCConv@cntSum,w
  4876  005B  1D03               	btfss	3,2
  4877  005C  28CF               	goto	l3443
  4878                           
  4879                           ;ADC.c: 78: {
  4880                           ;ADC.c: 80: batt=sumBatt/10;
  4881  005D  300A               	movlw	10
  4882  005E  00F1               	movwf	___lwdiv@divisor
  4883  005F  3000               	movlw	0
  4884  0060  00F2               	movwf	___lwdiv@divisor+1
  4885  0061  085D               	movf	ADCConv@sumBatt+1,w
  4886  0062  00F4               	movwf	___lwdiv@dividend+1
  4887  0063  085C               	movf	ADCConv@sumBatt,w
  4888  0064  00F3               	movwf	___lwdiv@dividend
  4889  0065  318F  2758  3180   	fcall	___lwdiv
  4890  0068  0872               	movf	?___lwdiv+1,w
  4891  0069  0021               	movlb	1	; select bank1
  4892  006A  00A7               	movwf	(_batt+1)^(0+128)
  4893  006B  0871               	movf	?___lwdiv,w
  4894  006C  00A6               	movwf	_batt^(0+128)
  4895                           
  4896                           ;ADC.c: 84: battV=batt*1.024/1024*11;
  4897  006D  3000               	movlw	0
  4898  006E  0020               	movlb	0	; select bank0
  4899  006F  00B4               	movwf	___ftdiv@f2
  4900  0070  3080               	movlw	128
  4901  0071  00B5               	movwf	___ftdiv@f2+1
  4902  0072  3044               	movlw	68
  4903  0073  00B6               	movwf	___ftdiv@f2+2
  4904  0074  3012               	movlw	18
  4905  0075  00A4               	movwf	___ftmul@f1
  4906  0076  3083               	movlw	131
  4907  0077  00A5               	movwf	___ftmul@f1+1
  4908  0078  303F               	movlw	63
  4909  0079  00A6               	movwf	___ftmul@f1+2
  4910  007A  0021               	movlb	1	; select bank1
  4911  007B  0827               	movf	(_batt+1)^(0+128),w
  4912  007C  00FA               	movwf	___lwtoft@c+1
  4913  007D  0826               	movf	_batt^(0+128),w
  4914  007E  00F9               	movwf	___lwtoft@c
  4915  007F  3187  27EB  3180   	fcall	___lwtoft
  4916  0082  0879               	movf	?___lwtoft,w
  4917  0083  0020               	movlb	0	; select bank0
  4918  0084  00A7               	movwf	___ftmul@f2
  4919  0085  087A               	movf	?___lwtoft+1,w
  4920  0086  00A8               	movwf	___ftmul@f2+1
  4921  0087  087B               	movf	?___lwtoft+2,w
  4922  0088  00A9               	movwf	___ftmul@f2+2
  4923  0089  3184  249C  3180   	fcall	___ftmul
  4924  008C  0020               	movlb	0	; select bank0
  4925  008D  0824               	movf	?___ftmul,w
  4926  008E  00B7               	movwf	___ftdiv@f1
  4927  008F  0825               	movf	?___ftmul+1,w
  4928  0090  00B8               	movwf	___ftdiv@f1+1
  4929  0091  0826               	movf	?___ftmul+2,w
  4930  0092  00B9               	movwf	___ftdiv@f1+2
  4931  0093  3185  2550  3180   	fcall	___ftdiv
  4932  0096  0020               	movlb	0	; select bank0
  4933  0097  0834               	movf	?___ftdiv,w
  4934  0098  00D5               	movwf	_ADCConv$1407
  4935  0099  0835               	movf	?___ftdiv+1,w
  4936  009A  00D6               	movwf	_ADCConv$1407+1
  4937  009B  0836               	movf	?___ftdiv+2,w
  4938  009C  00D7               	movwf	_ADCConv$1407+2
  4939                           
  4940                           ;ADC.c: 84: battV=batt*1.024/1024*11;
  4941  009D  3000               	movlw	0
  4942  009E  00A4               	movwf	___ftmul@f1
  4943  009F  3030               	movlw	48
  4944  00A0  00A5               	movwf	___ftmul@f1+1
  4945  00A1  3041               	movlw	65
  4946  00A2  00A6               	movwf	___ftmul@f1+2
  4947  00A3  0855               	movf	_ADCConv$1407,w
  4948  00A4  00A7               	movwf	___ftmul@f2
  4949  00A5  0856               	movf	_ADCConv$1407+1,w
  4950  00A6  00A8               	movwf	___ftmul@f2+1
  4951  00A7  0857               	movf	_ADCConv$1407+2,w
  4952  00A8  00A9               	movwf	___ftmul@f2+2
  4953  00A9  3184  249C  3180   	fcall	___ftmul
  4954  00AC  0020               	movlb	0	; select bank0
  4955  00AD  0824               	movf	?___ftmul,w
  4956  00AE  0021               	movlb	1	; select bank1
  4957  00AF  00A0               	movwf	_battV^(0+128)
  4958  00B0  0020               	movlb	0	; select bank0
  4959  00B1  0825               	movf	?___ftmul+1,w
  4960  00B2  0021               	movlb	1	; select bank1
  4961  00B3  00A1               	movwf	(_battV+1)^(0+128)
  4962  00B4  0020               	movlb	0	; select bank0
  4963  00B5  0826               	movf	?___ftmul+2,w
  4964  00B6  0021               	movlb	1	; select bank1
  4965  00B7  00A2               	movwf	(_battV+2)^(0+128)
  4966                           
  4967                           ;ADC.c: 86: sumCurr=0;
  4968  00B8  3000               	movlw	0
  4969  00B9  0020               	movlb	0	; select bank0
  4970  00BA  00DB               	movwf	ADCConv@sumCurr+3
  4971  00BB  3000               	movlw	0
  4972  00BC  00DA               	movwf	ADCConv@sumCurr+2
  4973  00BD  3000               	movlw	0
  4974  00BE  00D9               	movwf	ADCConv@sumCurr+1
  4975  00BF  3000               	movlw	0
  4976  00C0  00D8               	movwf	ADCConv@sumCurr
  4977                           
  4978                           ;ADC.c: 88: cntSum=0;
  4979  00C1  01DE               	clrf	ADCConv@cntSum
  4980                           
  4981                           ;ADC.c: 90: LATAbits.LATA0=0;
  4982  00C2  0022               	movlb	2	; select bank2
  4983  00C3  100C               	bcf	12,0	;volatile
  4984                           
  4985                           ;ADC.c: 92: ADCON1=0b10000011;
  4986  00C4  3083               	movlw	131
  4987  00C5  0021               	movlb	1	; select bank1
  4988  00C6  009E               	movwf	30	;volatile
  4989                           
  4990                           ;ADC.c: 93: ADCON0=0b00001001;
  4991  00C7  3009               	movlw	9
  4992  00C8  009D               	movwf	29	;volatile
  4993                           
  4994                           ;ADC.c: 94: adc_ch=ADC_CH_CURR;
  4995  00C9  3002               	movlw	2
  4996  00CA  0020               	movlb	0	; select bank0
  4997  00CB  00C7               	movwf	??_ADCConv
  4998  00CC  0847               	movf	??_ADCConv,w
  4999  00CD  00E9               	movwf	_adc_ch
  5000                           
  5001                           ;ADC.c: 95: }
  5002  00CE  29E1               	goto	l3465
  5003  00CF                     l3443:	
  5004                           
  5005                           ;ADC.c: 96: else
  5006                           ;ADC.c: 97: {
  5007                           ;ADC.c: 99: sumBatt+=(ADRESH<<8|ADRESL);
  5008  00CF  0021               	movlb	1	; select bank1
  5009  00D0  081B               	movf	27,w	;volatile
  5010  00D1  0020               	movlb	0	; select bank0
  5011  00D2  07DC               	addwf	ADCConv@sumBatt,f
  5012  00D3  0021               	movlb	1	; select bank1
  5013  00D4  081C               	movf	28,w	;volatile
  5014  00D5  0020               	movlb	0	; select bank0
  5015  00D6  3DDD               	addwfc	ADCConv@sumBatt+1,f
  5016  00D7  29D0               	goto	l3459
  5017  00D8                     l3447:	
  5018                           ;ADC.c: 104: case ADC_CH_CURR:
  5019                           
  5020                           ;ADC.c: 102: }
  5021                           ;ADC.c: 103: break;
  5022                           
  5023                           ;ADC.c: 101: cntSum++;
  5024                           
  5025                           
  5026                           ;ADC.c: 106: if(cntSum==20)
  5027  00D8  3014               	movlw	20
  5028  00D9  065E               	xorwf	ADCConv@cntSum,w
  5029  00DA  1D03               	btfss	3,2
  5030  00DB  2995               	goto	l3457
  5031                           
  5032                           ;ADC.c: 107: {
  5033                           ;ADC.c: 114: rmsCurr=sumCurr*(1.024*1.024)/(1024*1024);
  5034  00DC  3000               	movlw	0
  5035  00DD  00B4               	movwf	___ftdiv@f2
  5036  00DE  3000               	movlw	0
  5037  00DF  00B5               	movwf	___ftdiv@f2+1
  5038  00E0  3000               	movlw	0
  5039  00E1  00B6               	movwf	___ftdiv@f2+2
  5040  00E2  3038               	movlw	56
  5041  00E3  00A4               	movwf	___ftmul@f1
  5042  00E4  3086               	movlw	134
  5043  00E5  00A5               	movwf	___ftmul@f1+1
  5044  00E6  303F               	movlw	63
  5045  00E7  00A6               	movwf	___ftmul@f1+2
  5046  00E8  085B               	movf	ADCConv@sumCurr+3,w
  5047  00E9  00A3               	movwf	___lltoft@c+3
  5048  00EA  085A               	movf	ADCConv@sumCurr+2,w
  5049  00EB  00A2               	movwf	___lltoft@c+2
  5050  00EC  0859               	movf	ADCConv@sumCurr+1,w
  5051  00ED  00A1               	movwf	___lltoft@c+1
  5052  00EE  0858               	movf	ADCConv@sumCurr,w
  5053  00EF  00A0               	movwf	___lltoft@c
  5054  00F0  318E  269D  3180   	fcall	___lltoft
  5055  00F3  0020               	movlb	0	; select bank0
  5056  00F4  0820               	movf	?___lltoft,w
  5057  00F5  00A7               	movwf	___ftmul@f2
  5058  00F6  0821               	movf	?___lltoft+1,w
  5059  00F7  00A8               	movwf	___ftmul@f2+1
  5060  00F8  0822               	movf	?___lltoft+2,w
  5061  00F9  00A9               	movwf	___ftmul@f2+2
  5062  00FA  3184  249C  3180   	fcall	___ftmul
  5063  00FD  0020               	movlb	0	; select bank0
  5064  00FE  0824               	movf	?___ftmul,w
  5065  00FF  00B7               	movwf	___ftdiv@f1
  5066  0100  0825               	movf	?___ftmul+1,w
  5067  0101  00B8               	movwf	___ftdiv@f1+1
  5068  0102  0826               	movf	?___ftmul+2,w
  5069  0103  00B9               	movwf	___ftdiv@f1+2
  5070  0104  3185  2550  3180   	fcall	___ftdiv
  5071  0107  0020               	movlb	0	; select bank0
  5072  0108  0834               	movf	?___ftdiv,w
  5073  0109  0021               	movlb	1	; select bank1
  5074  010A  00A3               	movwf	_rmsCurr^(0+128)
  5075  010B  0020               	movlb	0	; select bank0
  5076  010C  0835               	movf	?___ftdiv+1,w
  5077  010D  0021               	movlb	1	; select bank1
  5078  010E  00A4               	movwf	(_rmsCurr+1)^(0+128)
  5079  010F  0020               	movlb	0	; select bank0
  5080  0110  0836               	movf	?___ftdiv+2,w
  5081  0111  0021               	movlb	1	; select bank1
  5082  0112  00A5               	movwf	(_rmsCurr+2)^(0+128)
  5083                           
  5084                           ;ADC.c: 115: rmsCurr/=(33*33);
  5085  0113  3020               	movlw	32
  5086  0114  0020               	movlb	0	; select bank0
  5087  0115  00B4               	movwf	___ftdiv@f2
  5088  0116  3088               	movlw	136
  5089  0117  00B5               	movwf	___ftdiv@f2+1
  5090  0118  3044               	movlw	68
  5091  0119  00B6               	movwf	___ftdiv@f2+2
  5092  011A  0021               	movlb	1	; select bank1
  5093  011B  0823               	movf	_rmsCurr^(0+128),w
  5094  011C  0020               	movlb	0	; select bank0
  5095  011D  00B7               	movwf	___ftdiv@f1
  5096  011E  0021               	movlb	1	; select bank1
  5097  011F  0824               	movf	(_rmsCurr+1)^(0+128),w
  5098  0120  0020               	movlb	0	; select bank0
  5099  0121  00B8               	movwf	___ftdiv@f1+1
  5100  0122  0021               	movlb	1	; select bank1
  5101  0123  0825               	movf	(_rmsCurr+2)^(0+128),w
  5102  0124  0020               	movlb	0	; select bank0
  5103  0125  00B9               	movwf	___ftdiv@f1+2
  5104  0126  3185  2550  3180   	fcall	___ftdiv
  5105  0129  0020               	movlb	0	; select bank0
  5106  012A  0834               	movf	?___ftdiv,w
  5107  012B  0021               	movlb	1	; select bank1
  5108  012C  00A3               	movwf	_rmsCurr^(0+128)
  5109  012D  0020               	movlb	0	; select bank0
  5110  012E  0835               	movf	?___ftdiv+1,w
  5111  012F  0021               	movlb	1	; select bank1
  5112  0130  00A4               	movwf	(_rmsCurr+1)^(0+128)
  5113  0131  0020               	movlb	0	; select bank0
  5114  0132  0836               	movf	?___ftdiv+2,w
  5115  0133  0021               	movlb	1	; select bank1
  5116  0134  00A5               	movwf	(_rmsCurr+2)^(0+128)
  5117                           
  5118                           ;ADC.c: 116: rmsCurr*=(2000*2000);
  5119  0135  3000               	movlw	0
  5120  0136  0020               	movlb	0	; select bank0
  5121  0137  00A4               	movwf	___ftmul@f1
  5122  0138  3010               	movlw	16
  5123  0139  00A5               	movwf	___ftmul@f1+1
  5124  013A  3045               	movlw	69
  5125  013B  00A6               	movwf	___ftmul@f1+2
  5126  013C  0021               	movlb	1	; select bank1
  5127  013D  0823               	movf	_rmsCurr^(0+128),w
  5128  013E  0020               	movlb	0	; select bank0
  5129  013F  00A7               	movwf	___ftmul@f2
  5130  0140  0021               	movlb	1	; select bank1
  5131  0141  0824               	movf	(_rmsCurr+1)^(0+128),w
  5132  0142  0020               	movlb	0	; select bank0
  5133  0143  00A8               	movwf	___ftmul@f2+1
  5134  0144  0021               	movlb	1	; select bank1
  5135  0145  0825               	movf	(_rmsCurr+2)^(0+128),w
  5136  0146  0020               	movlb	0	; select bank0
  5137  0147  00A9               	movwf	___ftmul@f2+2
  5138  0148  3184  249C  3180   	fcall	___ftmul
  5139  014B  0020               	movlb	0	; select bank0
  5140  014C  0824               	movf	?___ftmul,w
  5141  014D  0021               	movlb	1	; select bank1
  5142  014E  00A3               	movwf	_rmsCurr^(0+128)
  5143  014F  0020               	movlb	0	; select bank0
  5144  0150  0825               	movf	?___ftmul+1,w
  5145  0151  0021               	movlb	1	; select bank1
  5146  0152  00A4               	movwf	(_rmsCurr+1)^(0+128)
  5147  0153  0020               	movlb	0	; select bank0
  5148  0154  0826               	movf	?___ftmul+2,w
  5149  0155  0021               	movlb	1	; select bank1
  5150  0156  00A5               	movwf	(_rmsCurr+2)^(0+128)
  5151                           
  5152                           ;ADC.c: 117: rmsCurr/=20;
  5153  0157  3000               	movlw	0
  5154  0158  0020               	movlb	0	; select bank0
  5155  0159  00B4               	movwf	___ftdiv@f2
  5156  015A  30A0               	movlw	160
  5157  015B  00B5               	movwf	___ftdiv@f2+1
  5158  015C  3041               	movlw	65
  5159  015D  00B6               	movwf	___ftdiv@f2+2
  5160  015E  0021               	movlb	1	; select bank1
  5161  015F  0823               	movf	_rmsCurr^(0+128),w
  5162  0160  0020               	movlb	0	; select bank0
  5163  0161  00B7               	movwf	___ftdiv@f1
  5164  0162  0021               	movlb	1	; select bank1
  5165  0163  0824               	movf	(_rmsCurr+1)^(0+128),w
  5166  0164  0020               	movlb	0	; select bank0
  5167  0165  00B8               	movwf	___ftdiv@f1+1
  5168  0166  0021               	movlb	1	; select bank1
  5169  0167  0825               	movf	(_rmsCurr+2)^(0+128),w
  5170  0168  0020               	movlb	0	; select bank0
  5171  0169  00B9               	movwf	___ftdiv@f1+2
  5172  016A  3185  2550  3180   	fcall	___ftdiv
  5173  016D  0020               	movlb	0	; select bank0
  5174  016E  0834               	movf	?___ftdiv,w
  5175  016F  0021               	movlb	1	; select bank1
  5176  0170  00A3               	movwf	_rmsCurr^(0+128)
  5177  0171  0020               	movlb	0	; select bank0
  5178  0172  0835               	movf	?___ftdiv+1,w
  5179  0173  0021               	movlb	1	; select bank1
  5180  0174  00A4               	movwf	(_rmsCurr+1)^(0+128)
  5181  0175  0020               	movlb	0	; select bank0
  5182  0176  0836               	movf	?___ftdiv+2,w
  5183  0177  0021               	movlb	1	; select bank1
  5184  0178  00A5               	movwf	(_rmsCurr+2)^(0+128)
  5185                           
  5186                           ;ADC.c: 118: rmsCurr=sqrt(rmsCurr);
  5187  0179  0823               	movf	_rmsCurr^(0+128),w
  5188  017A  0020               	movlb	0	; select bank0
  5189  017B  00B4               	movwf	sqrt@y
  5190  017C  0021               	movlb	1	; select bank1
  5191  017D  0824               	movf	(_rmsCurr+1)^(0+128),w
  5192  017E  0020               	movlb	0	; select bank0
  5193  017F  00B5               	movwf	sqrt@y+1
  5194  0180  0021               	movlb	1	; select bank1
  5195  0181  0825               	movf	(_rmsCurr+2)^(0+128),w
  5196  0182  0020               	movlb	0	; select bank0
  5197  0183  00B6               	movwf	sqrt@y+2
  5198  0184  3182  22F0         	fcall	_sqrt
  5199  0186  0020               	movlb	0	; select bank0
  5200  0187  0834               	movf	?_sqrt,w
  5201  0188  0021               	movlb	1	; select bank1
  5202  0189  00A3               	movwf	_rmsCurr^(0+128)
  5203  018A  0020               	movlb	0	; select bank0
  5204  018B  0835               	movf	?_sqrt+1,w
  5205  018C  0021               	movlb	1	; select bank1
  5206  018D  00A4               	movwf	(_rmsCurr+1)^(0+128)
  5207  018E  0020               	movlb	0	; select bank0
  5208  018F  0836               	movf	?_sqrt+2,w
  5209  0190  0021               	movlb	1	; select bank1
  5210  0191  00A5               	movwf	(_rmsCurr+2)^(0+128)
  5211                           
  5212                           ;ADC.c: 120: adc_ch=ADC_CH_OFF;
  5213  0192  0020               	movlb	0	; select bank0
  5214  0193  01E9               	clrf	_adc_ch
  5215                           
  5216                           ;ADC.c: 121: return;
  5217  0194  0008               	return
  5218  0195                     l3457:	
  5219                           ;ADC.c: 122: }
  5220                           
  5221                           
  5222                           ;ADC.c: 123: else
  5223                           ;ADC.c: 124: {
  5224                           ;ADC.c: 126: sumCurr+=((ADRESH<<8|ADRESL)*(ADRESH<<8|ADRESL));
  5225  0195  0021               	movlb	1	; select bank1
  5226  0196  081B               	movf	27,w	;volatile
  5227  0197  0020               	movlb	0	; select bank0
  5228  0198  00C7               	movwf	??_ADCConv
  5229  0199  01C8               	clrf	??_ADCConv+1
  5230  019A  0021               	movlb	1	; select bank1
  5231  019B  081C               	movf	28,w	;volatile
  5232  019C  0020               	movlb	0	; select bank0
  5233  019D  00C9               	movwf	??_ADCConv+2
  5234  019E  01CA               	clrf	??_ADCConv+3
  5235  019F  0849               	movf	??_ADCConv+2,w
  5236  01A0  00CA               	movwf	??_ADCConv+3
  5237  01A1  01C9               	clrf	??_ADCConv+2
  5238  01A2  0847               	movf	??_ADCConv,w
  5239  01A3  0449               	iorwf	??_ADCConv+2,w
  5240  01A4  00F1               	movwf	___wmul@multiplier
  5241  01A5  0848               	movf	??_ADCConv+1,w
  5242  01A6  044A               	iorwf	??_ADCConv+3,w
  5243  01A7  00F2               	movwf	___wmul@multiplier+1
  5244  01A8  0021               	movlb	1	; select bank1
  5245  01A9  081B               	movf	27,w	;volatile
  5246  01AA  0020               	movlb	0	; select bank0
  5247  01AB  00CC               	movwf	??_ADCConv+5
  5248  01AC  01CD               	clrf	??_ADCConv+6
  5249  01AD  0021               	movlb	1	; select bank1
  5250  01AE  081C               	movf	28,w	;volatile
  5251  01AF  0020               	movlb	0	; select bank0
  5252  01B0  00CE               	movwf	??_ADCConv+7
  5253  01B1  01CF               	clrf	??_ADCConv+8
  5254  01B2  084E               	movf	??_ADCConv+7,w
  5255  01B3  00CF               	movwf	??_ADCConv+8
  5256  01B4  01CE               	clrf	??_ADCConv+7
  5257  01B5  084C               	movf	??_ADCConv+5,w
  5258  01B6  044E               	iorwf	??_ADCConv+7,w
  5259  01B7  00F3               	movwf	___wmul@multiplicand
  5260  01B8  084D               	movf	??_ADCConv+6,w
  5261  01B9  044F               	iorwf	??_ADCConv+8,w
  5262  01BA  00F4               	movwf	___wmul@multiplicand+1
  5263  01BB  318C  243A  3180   	fcall	___wmul
  5264  01BE  0871               	movf	?___wmul,w
  5265  01BF  0020               	movlb	0	; select bank0
  5266  01C0  00D1               	movwf	??_ADCConv+10
  5267  01C1  0872               	movf	?___wmul+1,w
  5268  01C2  00D2               	movwf	??_ADCConv+11
  5269  01C3  3000               	movlw	0
  5270  01C4  1BD2               	btfsc	??_ADCConv+11,7
  5271  01C5  30FF               	movlw	255
  5272  01C6  00D3               	movwf	??_ADCConv+12
  5273  01C7  00D4               	movwf	??_ADCConv+13
  5274  01C8  0851               	movf	??_ADCConv+10,w
  5275  01C9  07D8               	addwf	ADCConv@sumCurr,f
  5276  01CA  0852               	movf	??_ADCConv+11,w
  5277  01CB  3DD9               	addwfc	ADCConv@sumCurr+1,f
  5278  01CC  0853               	movf	??_ADCConv+12,w
  5279  01CD  3DDA               	addwfc	ADCConv@sumCurr+2,f
  5280  01CE  0854               	movf	??_ADCConv+13,w
  5281  01CF  3DDB               	addwfc	ADCConv@sumCurr+3,f
  5282  01D0                     l3459:	
  5283                           
  5284                           ;ADC.c: 128: cntSum++;
  5285  01D0  3001               	movlw	1
  5286  01D1  00C7               	movwf	??_ADCConv
  5287  01D2  0847               	movf	??_ADCConv,w
  5288  01D3  07DE               	addwf	ADCConv@cntSum,f
  5289                           
  5290                           ;ADC.c: 131: }
  5291                           
  5292                           ;ADC.c: 129: }
  5293                           ;ADC.c: 130: break;
  5294  01D4  29E1               	goto	l3465
  5295  01D5                     l3463:	
  5296  01D5  0020               	movlb	0	; select bank0
  5297  01D6  0869               	movf	_adc_ch,w
  5298                           
  5299                           ; Switch size 1, requested type "space"
  5300                           ; Number of cases is 3, Range of values is 0 to 2
  5301                           ; switch strategies available:
  5302                           ; Name         Instructions Cycles
  5303                           ; simple_byte           10     6 (average)
  5304                           ; direct_byte           12     6 (fixed)
  5305                           ; jumptable            260     6 (fixed)
  5306                           ;	Chosen strategy is simple_byte
  5307  01D7  3A00               	xorlw	0	; case 0
  5308  01D8  1903               	skipnz
  5309  01D9  284A               	goto	l122
  5310  01DA  3A01               	xorlw	1	; case 1
  5311  01DB  1903               	skipnz
  5312  01DC  2859               	goto	l3427
  5313  01DD  3A03               	xorlw	3	; case 2
  5314  01DE  1903               	skipnz
  5315  01DF  28D8               	goto	l3447
  5316  01E0  29E1               	goto	l3465
  5317  01E1                     l3465:	
  5318                           
  5319                           ;ADC.c: 133: _delay((unsigned long)((10)*(8000000/4000000.0)));
  5320  01E1  3006               	movlw	6
  5321  01E2  00C7               	movwf	??_ADCConv
  5322  01E3                     u3817:	
  5323  01E3  0BC7               	decfsz	??_ADCConv,f
  5324  01E4  29E3               	goto	u3817
  5325  01E5  0000               	nop
  5326                           
  5327                           ;ADC.c: 135: ADCON0bits.GO=1;
  5328  01E6  0021               	movlb	1	; select bank1
  5329  01E7  149D               	bsf	29,1	;volatile
  5330  01E8                     l131:	
  5331                           ;ADC.c: 137: while(ADCON0bits.GO)
  5332                           
  5333  01E8  0021               	movlb	1	; select bank1
  5334  01E9  1C9D               	btfss	29,1	;volatile
  5335  01EA  29ED               	goto	l3469
  5336  01EB  0064               	clrwdt	;# 
  5337  01EC  29E8               	goto	l131
  5338  01ED                     l3469:	
  5339                           
  5340                           ;ADC.c: 140: if(adc_ch==ADC_CH_CURR)
  5341  01ED  3002               	movlw	2
  5342  01EE  0020               	movlb	0	; select bank0
  5343  01EF  0669               	xorwf	_adc_ch,w
  5344  01F0  1D03               	btfss	3,2
  5345  01F1  29D5               	goto	l3463
  5346                           
  5347                           ;ADC.c: 141: DLYDelay_ms(8);
  5348  01F2  3008               	movlw	8
  5349  01F3  00F1               	movwf	DLYDelay_ms@val
  5350  01F4  3000               	movlw	0
  5351  01F5  00F2               	movwf	DLYDelay_ms@val+1
  5352  01F6  318B  23EC  3180   	fcall	_DLYDelay_ms
  5353  01F9  29D5               	goto	l3463
  5354  01FA                     __end_of_ADCConv:	
  5355                           
  5356                           	psect	text22
  5357  02F0                     __ptext22:	
  5358 ;; *************** function _sqrt *****************
  5359 ;; Defined at:
  5360 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\sqrt.c"
  5361 ;; Parameters:    Size  Location     Type
  5362 ;;  y               3   20[BANK0 ] unsigned char 
  5363 ;; Auto vars:     Size  Location     Type
  5364 ;;  x               3   36[BANK0 ] unsigned char 
  5365 ;;  q               3   33[BANK0 ] unsigned char 
  5366 ;;  z               3   29[BANK0 ] unsigned char 
  5367 ;;  og              3   26[BANK0 ] unsigned char 
  5368 ;;  i               1   32[BANK0 ] unsigned char 
  5369 ;; Return value:  Size  Location     Type
  5370 ;;                  3   20[BANK0 ] unsigned char 
  5371 ;; Registers used:
  5372 ;;		wreg, status,2, status,0, pclath, cstack
  5373 ;; Tracked objects:
  5374 ;;		On entry : 0/0
  5375 ;;		On exit  : 0/0
  5376 ;;		Unchanged: 0/0
  5377 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5378 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5379 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5380 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5381 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5382 ;;Total ram usage:       19 bytes
  5383 ;; Hardware stack levels used:    1
  5384 ;; Hardware stack levels required when called:    5
  5385 ;; This function calls:
  5386 ;;		___ftge
  5387 ;;		___ftmul
  5388 ;;		___ftsub
  5389 ;; This function is called by:
  5390 ;;		_ADCConv
  5391 ;; This function uses a non-reentrant model
  5392 ;;
  5393                           
  5394                           
  5395                           ;psect for function _sqrt
  5396  02F0                     _sqrt:	
  5397                           
  5398                           ;incstack = 0
  5399                           ; Regs used in _sqrt: [wreg+status,2+status,0+pclath+cstack]
  5400  02F0  3000               	movlw	0
  5401  02F1  00F1               	movwf	___ftge@ff1
  5402  02F2  3000               	movlw	0
  5403  02F3  00F2               	movwf	___ftge@ff1+1
  5404  02F4  3000               	movlw	0
  5405  02F5  00F3               	movwf	___ftge@ff1+2
  5406  02F6  0020               	movlb	0	; select bank0
  5407  02F7  0834               	movf	sqrt@y,w
  5408  02F8  00F4               	movwf	___ftge@ff2
  5409  02F9  0835               	movf	sqrt@y+1,w
  5410  02FA  00F5               	movwf	___ftge@ff2+1
  5411  02FB  0836               	movf	sqrt@y+2,w
  5412  02FC  00F6               	movwf	___ftge@ff2+2
  5413  02FD  318F  27C5  3182   	fcall	___ftge
  5414  0300  1C03               	btfss	3,0
  5415  0301  2B21               	goto	l3339
  5416  0302  0020               	movlb	0	; select bank0
  5417  0303  0834               	movf	sqrt@y,w
  5418  0304  00F1               	movwf	___ftge@ff1
  5419  0305  0835               	movf	sqrt@y+1,w
  5420  0306  00F2               	movwf	___ftge@ff1+1
  5421  0307  0836               	movf	sqrt@y+2,w
  5422  0308  00F3               	movwf	___ftge@ff1+2
  5423  0309  3000               	movlw	0
  5424  030A  00F4               	movwf	___ftge@ff2
  5425  030B  3000               	movlw	0
  5426  030C  00F5               	movwf	___ftge@ff2+1
  5427  030D  3000               	movlw	0
  5428  030E  00F6               	movwf	___ftge@ff2+2
  5429  030F  318F  27C5  3182   	fcall	___ftge
  5430  0312  1803               	btfsc	3,0
  5431  0313  2B19               	goto	l1046
  5432  0314  3021               	movlw	33
  5433  0315  0021               	movlb	1	; select bank1
  5434  0316  00A8               	movwf	_errno^(0+128)
  5435  0317  3000               	movlw	0
  5436  0318  00A9               	movwf	(_errno^(0+128)+1)
  5437  0319                     l1046:	
  5438  0319  3000               	movlw	0
  5439  031A  0020               	movlb	0	; select bank0
  5440  031B  00B4               	movwf	?_sqrt
  5441  031C  3000               	movlw	0
  5442  031D  00B5               	movwf	?_sqrt+1
  5443  031E  3000               	movlw	0
  5444  031F  00B6               	movwf	?_sqrt+2
  5445  0320  0008               	return
  5446  0321                     l3339:	
  5447  0321  0020               	movlb	0	; select bank0
  5448  0322  0834               	movf	sqrt@y,w
  5449  0323  00BD               	movwf	sqrt@z
  5450  0324  0835               	movf	sqrt@y+1,w
  5451  0325  00BE               	movwf	sqrt@z+1
  5452  0326  0836               	movf	sqrt@y+2,w
  5453  0327  00BF               	movwf	sqrt@z+2
  5454  0328  0934               	comf	sqrt@y,w
  5455  0329  00B7               	movwf	??_sqrt
  5456  032A  0935               	comf	sqrt@y+1,w
  5457  032B  00B8               	movwf	??_sqrt+1
  5458  032C  0936               	comf	sqrt@y+2,w
  5459  032D  00B9               	movwf	??_sqrt+2
  5460  032E  0AB7               	incf	??_sqrt,f
  5461  032F  1903               	skipnz
  5462  0330  0AB8               	incf	??_sqrt+1,f
  5463  0331  1903               	skipnz
  5464  0332  0AB9               	incf	??_sqrt+2,f
  5465  0333  30C8               	movlw	200
  5466  0334  0737               	addwf	??_sqrt,w
  5467  0335  00C4               	movwf	sqrt@x
  5468  0336  306E               	movlw	110
  5469  0337  3D38               	addwfc	??_sqrt+1,w
  5470  0338  00C5               	movwf	sqrt@x+1
  5471  0339  30BE               	movlw	190
  5472  033A  3D39               	addwfc	??_sqrt+2,w
  5473  033B  00C6               	movwf	sqrt@x+2
  5474  033C  3001               	movlw	1
  5475  033D                     u3405:	
  5476  033D  36C6               	lsrf	sqrt@x+2,f
  5477  033E  0CC5               	rrf	sqrt@x+1,f
  5478  033F  0CC4               	rrf	sqrt@x,f
  5479  0340  0B89               	decfsz	9,f
  5480  0341  2B3D               	goto	u3405
  5481  0342  3000               	movlw	0
  5482  0343  00B7               	movwf	??_sqrt
  5483  0344  3080               	movlw	128
  5484  0345  00B8               	movwf	??_sqrt+1
  5485  0346  3000               	movlw	0
  5486  0347  00B9               	movwf	??_sqrt+2
  5487  0348  0837               	movf	??_sqrt,w
  5488  0349  02BD               	subwf	sqrt@z,f
  5489  034A  0838               	movf	??_sqrt+1,w
  5490  034B  3BBE               	subwfb	sqrt@z+1,f
  5491  034C  0839               	movf	??_sqrt+2,w
  5492  034D  3BBF               	subwfb	sqrt@z+2,f
  5493  034E  3004               	movlw	4
  5494  034F  00B7               	movwf	??_sqrt
  5495  0350  0837               	movf	??_sqrt,w
  5496  0351  00C0               	movwf	sqrt@i
  5497  0352                     l1048:	
  5498  0352  0844               	movf	sqrt@x,w
  5499  0353  00BA               	movwf	sqrt@og
  5500  0354  0845               	movf	sqrt@x+1,w
  5501  0355  00BB               	movwf	sqrt@og+1
  5502  0356  0846               	movf	sqrt@x+2,w
  5503  0357  00BC               	movwf	sqrt@og+2
  5504  0358  083D               	movf	sqrt@z,w
  5505  0359  00A4               	movwf	___ftmul@f1
  5506  035A  083E               	movf	sqrt@z+1,w
  5507  035B  00A5               	movwf	___ftmul@f1+1
  5508  035C  083F               	movf	sqrt@z+2,w
  5509  035D  00A6               	movwf	___ftmul@f1+2
  5510  035E  0844               	movf	sqrt@x,w
  5511  035F  00A7               	movwf	___ftmul@f2
  5512  0360  0845               	movf	sqrt@x+1,w
  5513  0361  00A8               	movwf	___ftmul@f2+1
  5514  0362  0846               	movf	sqrt@x+2,w
  5515  0363  00A9               	movwf	___ftmul@f2+2
  5516  0364  3184  249C  3182   	fcall	___ftmul
  5517  0367  0020               	movlb	0	; select bank0
  5518  0368  0824               	movf	?___ftmul,w
  5519  0369  00C1               	movwf	sqrt@q
  5520  036A  0825               	movf	?___ftmul+1,w
  5521  036B  00C2               	movwf	sqrt@q+1
  5522  036C  0826               	movf	?___ftmul+2,w
  5523  036D  00C3               	movwf	sqrt@q+2
  5524  036E  0844               	movf	sqrt@x,w
  5525  036F  00A4               	movwf	___ftmul@f1
  5526  0370  0845               	movf	sqrt@x+1,w
  5527  0371  00A5               	movwf	___ftmul@f1+1
  5528  0372  0846               	movf	sqrt@x+2,w
  5529  0373  00A6               	movwf	___ftmul@f1+2
  5530  0374  0841               	movf	sqrt@q,w
  5531  0375  00A7               	movwf	___ftmul@f2
  5532  0376  0842               	movf	sqrt@q+1,w
  5533  0377  00A8               	movwf	___ftmul@f2+1
  5534  0378  0843               	movf	sqrt@q+2,w
  5535  0379  00A9               	movwf	___ftmul@f2+2
  5536  037A  3184  249C  3182   	fcall	___ftmul
  5537  037D  0020               	movlb	0	; select bank0
  5538  037E  0824               	movf	?___ftmul,w
  5539  037F  00C1               	movwf	sqrt@q
  5540  0380  0825               	movf	?___ftmul+1,w
  5541  0381  00C2               	movwf	sqrt@q+1
  5542  0382  0826               	movf	?___ftmul+2,w
  5543  0383  00C3               	movwf	sqrt@q+2
  5544  0384  0844               	movf	sqrt@x,w
  5545  0385  00A4               	movwf	___ftmul@f1
  5546  0386  0845               	movf	sqrt@x+1,w
  5547  0387  00A5               	movwf	___ftmul@f1+1
  5548  0388  0846               	movf	sqrt@x+2,w
  5549  0389  00A6               	movwf	___ftmul@f1+2
  5550  038A  0841               	movf	sqrt@q,w
  5551  038B  00A7               	movwf	___ftmul@f2
  5552  038C  0842               	movf	sqrt@q+1,w
  5553  038D  00A8               	movwf	___ftmul@f2+1
  5554  038E  0843               	movf	sqrt@q+2,w
  5555  038F  00A9               	movwf	___ftmul@f2+2
  5556  0390  3184  249C  3182   	fcall	___ftmul
  5557  0393  0020               	movlb	0	; select bank0
  5558  0394  0824               	movf	?___ftmul,w
  5559  0395  00C1               	movwf	sqrt@q
  5560  0396  0825               	movf	?___ftmul+1,w
  5561  0397  00C2               	movwf	sqrt@q+1
  5562  0398  0826               	movf	?___ftmul+2,w
  5563  0399  00C3               	movwf	sqrt@q+2
  5564  039A  3000               	movlw	0
  5565  039B  00A4               	movwf	___ftmul@f1
  5566  039C  30C0               	movlw	192
  5567  039D  00A5               	movwf	___ftmul@f1+1
  5568  039E  303F               	movlw	63
  5569  039F  00A6               	movwf	___ftmul@f1+2
  5570  03A0  0844               	movf	sqrt@x,w
  5571  03A1  00A7               	movwf	___ftmul@f2
  5572  03A2  0845               	movf	sqrt@x+1,w
  5573  03A3  00A8               	movwf	___ftmul@f2+1
  5574  03A4  0846               	movf	sqrt@x+2,w
  5575  03A5  00A9               	movwf	___ftmul@f2+2
  5576  03A6  3184  249C  3182   	fcall	___ftmul
  5577  03A9  0020               	movlb	0	; select bank0
  5578  03AA  0824               	movf	?___ftmul,w
  5579  03AB  00C4               	movwf	sqrt@x
  5580  03AC  0825               	movf	?___ftmul+1,w
  5581  03AD  00C5               	movwf	sqrt@x+1
  5582  03AE  0826               	movf	?___ftmul+2,w
  5583  03AF  00C6               	movwf	sqrt@x+2
  5584  03B0  0841               	movf	sqrt@q,w
  5585  03B1  00AA               	movwf	___ftsub@f2
  5586  03B2  0842               	movf	sqrt@q+1,w
  5587  03B3  00AB               	movwf	___ftsub@f2+1
  5588  03B4  0843               	movf	sqrt@q+2,w
  5589  03B5  00AC               	movwf	___ftsub@f2+2
  5590  03B6  0844               	movf	sqrt@x,w
  5591  03B7  00AD               	movwf	___ftsub@f1
  5592  03B8  0845               	movf	sqrt@x+1,w
  5593  03B9  00AE               	movwf	___ftsub@f1+1
  5594  03BA  0846               	movf	sqrt@x+2,w
  5595  03BB  00AF               	movwf	___ftsub@f1+2
  5596  03BC  318C  24C9  3182   	fcall	___ftsub
  5597  03BF  0020               	movlb	0	; select bank0
  5598  03C0  082A               	movf	?___ftsub,w
  5599  03C1  00C4               	movwf	sqrt@x
  5600  03C2  082B               	movf	?___ftsub+1,w
  5601  03C3  00C5               	movwf	sqrt@x+1
  5602  03C4  082C               	movf	?___ftsub+2,w
  5603  03C5  00C6               	movwf	sqrt@x+2
  5604  03C6  3001               	movlw	1
  5605  03C7  02C0               	subwf	sqrt@i,f
  5606  03C8  1D03               	btfss	3,2
  5607  03C9  2B52               	goto	l1048
  5608  03CA  0834               	movf	sqrt@y,w
  5609  03CB  00A4               	movwf	___ftmul@f1
  5610  03CC  0835               	movf	sqrt@y+1,w
  5611  03CD  00A5               	movwf	___ftmul@f1+1
  5612  03CE  0836               	movf	sqrt@y+2,w
  5613  03CF  00A6               	movwf	___ftmul@f1+2
  5614  03D0  0844               	movf	sqrt@x,w
  5615  03D1  00A7               	movwf	___ftmul@f2
  5616  03D2  0845               	movf	sqrt@x+1,w
  5617  03D3  00A8               	movwf	___ftmul@f2+1
  5618  03D4  0846               	movf	sqrt@x+2,w
  5619  03D5  00A9               	movwf	___ftmul@f2+2
  5620  03D6  3184  249C         	fcall	___ftmul
  5621  03D8  0020               	movlb	0	; select bank0
  5622  03D9  0824               	movf	?___ftmul,w
  5623  03DA  00B4               	movwf	?_sqrt
  5624  03DB  0825               	movf	?___ftmul+1,w
  5625  03DC  00B5               	movwf	?_sqrt+1
  5626  03DD  0826               	movf	?___ftmul+2,w
  5627  03DE  00B6               	movwf	?_sqrt+2
  5628  03DF  0008               	return
  5629  03E0                     __end_of_sqrt:	
  5630                           
  5631                           	psect	text23
  5632  0CC9                     __ptext23:	
  5633 ;; *************** function ___ftsub *****************
  5634 ;; Defined at:
  5635 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftsub.c"
  5636 ;; Parameters:    Size  Location     Type
  5637 ;;  f2              3   10[BANK0 ] float 
  5638 ;;  f1              3   13[BANK0 ] float 
  5639 ;; Auto vars:     Size  Location     Type
  5640 ;;		None
  5641 ;; Return value:  Size  Location     Type
  5642 ;;                  3   10[BANK0 ] float 
  5643 ;; Registers used:
  5644 ;;		wreg, status,2, status,0, pclath, cstack
  5645 ;; Tracked objects:
  5646 ;;		On entry : 0/0
  5647 ;;		On exit  : 0/0
  5648 ;;		Unchanged: 0/0
  5649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5650 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5651 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5653 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5654 ;;Total ram usage:        6 bytes
  5655 ;; Hardware stack levels used:    1
  5656 ;; Hardware stack levels required when called:    4
  5657 ;; This function calls:
  5658 ;;		___ftadd
  5659 ;; This function is called by:
  5660 ;;		_sqrt
  5661 ;; This function uses a non-reentrant model
  5662 ;;
  5663                           
  5664                           
  5665                           ;psect for function ___ftsub
  5666  0CC9                     ___ftsub:	
  5667                           
  5668                           ;incstack = 0
  5669                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  5670  0CC9  0020               	movlb	0	; select bank0
  5671  0CCA  082C               	movf	___ftsub@f2+2,w
  5672  0CCB  042B               	iorwf	___ftsub@f2+1,w
  5673  0CCC  042A               	iorwf	___ftsub@f2,w
  5674  0CCD  1903               	skipnz
  5675  0CCE  2CD1               	goto	l3327
  5676  0CCF  3080               	movlw	128
  5677  0CD0  06AC               	xorwf	___ftsub@f2+2,f
  5678  0CD1                     l3327:	
  5679  0CD1  082D               	movf	___ftsub@f1,w
  5680  0CD2  00A0               	movwf	___ftadd@f1
  5681  0CD3  082E               	movf	___ftsub@f1+1,w
  5682  0CD4  00A1               	movwf	___ftadd@f1+1
  5683  0CD5  082F               	movf	___ftsub@f1+2,w
  5684  0CD6  00A2               	movwf	___ftadd@f1+2
  5685  0CD7  082A               	movf	___ftsub@f2,w
  5686  0CD8  00A3               	movwf	___ftadd@f2
  5687  0CD9  082B               	movf	___ftsub@f2+1,w
  5688  0CDA  00A4               	movwf	___ftadd@f2+1
  5689  0CDB  082C               	movf	___ftsub@f2+2,w
  5690  0CDC  00A5               	movwf	___ftadd@f2+2
  5691  0CDD  3181  21FA         	fcall	___ftadd
  5692  0CDF  0020               	movlb	0	; select bank0
  5693  0CE0  0820               	movf	?___ftadd,w
  5694  0CE1  00AA               	movwf	?___ftsub
  5695  0CE2  0821               	movf	?___ftadd+1,w
  5696  0CE3  00AB               	movwf	?___ftsub+1
  5697  0CE4  0822               	movf	?___ftadd+2,w
  5698  0CE5  00AC               	movwf	?___ftsub+2
  5699  0CE6  0008               	return
  5700  0CE7                     __end_of___ftsub:	
  5701                           
  5702                           	psect	text24
  5703  01FA                     __ptext24:	
  5704 ;; *************** function ___ftadd *****************
  5705 ;; Defined at:
  5706 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftadd.c"
  5707 ;; Parameters:    Size  Location     Type
  5708 ;;  f1              3    0[BANK0 ] float 
  5709 ;;  f2              3    3[BANK0 ] float 
  5710 ;; Auto vars:     Size  Location     Type
  5711 ;;  exp1            1   11[COMMON] unsigned char 
  5712 ;;  exp2            1   10[COMMON] unsigned char 
  5713 ;;  sign            1    9[COMMON] unsigned char 
  5714 ;; Return value:  Size  Location     Type
  5715 ;;                  3    0[BANK0 ] float 
  5716 ;; Registers used:
  5717 ;;		wreg, status,2, status,0, pclath, cstack
  5718 ;; Tracked objects:
  5719 ;;		On entry : 0/0
  5720 ;;		On exit  : 0/0
  5721 ;;		Unchanged: 0/0
  5722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5723 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5724 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5725 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5726 ;;      Totals:         3      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5727 ;;Total ram usage:       13 bytes
  5728 ;; Hardware stack levels used:    1
  5729 ;; Hardware stack levels required when called:    3
  5730 ;; This function calls:
  5731 ;;		___ftpack
  5732 ;; This function is called by:
  5733 ;;		___ftsub
  5734 ;; This function uses a non-reentrant model
  5735 ;;
  5736                           
  5737                           
  5738                           ;psect for function ___ftadd
  5739  01FA                     ___ftadd:	
  5740                           
  5741                           ;incstack = 0
  5742                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  5743  01FA  0020               	movlb	0	; select bank0
  5744  01FB  0820               	movf	___ftadd@f1,w
  5745  01FC  00A6               	movwf	??___ftadd
  5746  01FD  0821               	movf	___ftadd@f1+1,w
  5747  01FE  00A7               	movwf	??___ftadd+1
  5748  01FF  0822               	movf	___ftadd@f1+2,w
  5749  0200  00A8               	movwf	??___ftadd+2
  5750  0201  1003               	clrc
  5751  0202  0D27               	rlf	??___ftadd+1,w
  5752  0203  0D28               	rlf	??___ftadd+2,w
  5753  0204  00A9               	movwf	??___ftadd+3
  5754  0205  0829               	movf	??___ftadd+3,w
  5755  0206  00FB               	movwf	___ftadd@exp1
  5756  0207  0823               	movf	___ftadd@f2,w
  5757  0208  00A6               	movwf	??___ftadd
  5758  0209  0824               	movf	___ftadd@f2+1,w
  5759  020A  00A7               	movwf	??___ftadd+1
  5760  020B  0825               	movf	___ftadd@f2+2,w
  5761  020C  00A8               	movwf	??___ftadd+2
  5762  020D  1003               	clrc
  5763  020E  0D27               	rlf	??___ftadd+1,w
  5764  020F  0D28               	rlf	??___ftadd+2,w
  5765  0210  00A9               	movwf	??___ftadd+3
  5766  0211  0829               	movf	??___ftadd+3,w
  5767  0212  00FA               	movwf	___ftadd@exp2
  5768  0213  087B               	movf	___ftadd@exp1,w
  5769  0214  1903               	btfsc	3,2
  5770  0215  2A22               	goto	l3181
  5771  0216  087A               	movf	___ftadd@exp2,w
  5772  0217  027B               	subwf	___ftadd@exp1,w
  5773  0218  1803               	skipnc
  5774  0219  2A29               	goto	l3185
  5775  021A  037B               	decf	___ftadd@exp1,w
  5776  021B  3AFF               	xorlw	255
  5777  021C  077A               	addwf	___ftadd@exp2,w
  5778  021D  00A6               	movwf	??___ftadd
  5779  021E  3019               	movlw	25
  5780  021F  0226               	subwf	??___ftadd,w
  5781  0220  1C03               	skipc
  5782  0221  2A29               	goto	l3185
  5783  0222                     l3181:	
  5784  0222  0823               	movf	___ftadd@f2,w
  5785  0223  00A0               	movwf	?___ftadd
  5786  0224  0824               	movf	___ftadd@f2+1,w
  5787  0225  00A1               	movwf	?___ftadd+1
  5788  0226  0825               	movf	___ftadd@f2+2,w
  5789  0227  00A2               	movwf	?___ftadd+2
  5790  0228  0008               	return
  5791  0229                     l3185:	
  5792  0229  087A               	movf	___ftadd@exp2,w
  5793  022A  1903               	btfsc	3,2
  5794  022B  0008               	return
  5795  022C  087B               	movf	___ftadd@exp1,w
  5796  022D  027A               	subwf	___ftadd@exp2,w
  5797  022E  1803               	skipnc
  5798  022F  2A38               	goto	l3191
  5799  0230  037A               	decf	___ftadd@exp2,w
  5800  0231  3AFF               	xorlw	255
  5801  0232  077B               	addwf	___ftadd@exp1,w
  5802  0233  00A6               	movwf	??___ftadd
  5803  0234  3019               	movlw	25
  5804  0235  0226               	subwf	??___ftadd,w
  5805  0236  1803               	btfsc	3,0
  5806  0237  0008               	return
  5807  0238                     l3191:	
  5808  0238  3006               	movlw	6
  5809  0239  00A6               	movwf	??___ftadd
  5810  023A  0826               	movf	??___ftadd,w
  5811  023B  00F9               	movwf	___ftadd@sign
  5812  023C  1BA2               	btfsc	___ftadd@f1+2,7
  5813  023D  17F9               	bsf	___ftadd@sign,7
  5814  023E  1BA5               	btfsc	___ftadd@f2+2,7
  5815  023F  1779               	bsf	___ftadd@sign,6
  5816  0240  17A1               	bsf	___ftadd@f1+1,7
  5817  0241  30FF               	movlw	255
  5818  0242  05A0               	andwf	___ftadd@f1,f
  5819  0243  30FF               	movlw	255
  5820  0244  05A1               	andwf	___ftadd@f1+1,f
  5821  0245  3000               	movlw	0
  5822  0246  05A2               	andwf	___ftadd@f1+2,f
  5823  0247  17A4               	bsf	___ftadd@f2+1,7
  5824  0248  30FF               	movlw	255
  5825  0249  05A3               	andwf	___ftadd@f2,f
  5826  024A  30FF               	movlw	255
  5827  024B  05A4               	andwf	___ftadd@f2+1,f
  5828  024C  3000               	movlw	0
  5829  024D  05A5               	andwf	___ftadd@f2+2,f
  5830  024E  087A               	movf	___ftadd@exp2,w
  5831  024F  027B               	subwf	___ftadd@exp1,w
  5832  0250  1803               	skipnc
  5833  0251  2A74               	goto	l3213
  5834  0252                     l3203:	
  5835  0252  3001               	movlw	1
  5836  0253                     u3115:	
  5837  0253  35A3               	lslf	___ftadd@f2,f
  5838  0254  0DA4               	rlf	___ftadd@f2+1,f
  5839  0255  0DA5               	rlf	___ftadd@f2+2,f
  5840  0256  0B89               	decfsz	9,f
  5841  0257  2A53               	goto	u3115
  5842  0258  3001               	movlw	1
  5843  0259  02FA               	subwf	___ftadd@exp2,f
  5844  025A  087A               	movf	___ftadd@exp2,w
  5845  025B  067B               	xorwf	___ftadd@exp1,w
  5846  025C  1903               	skipnz
  5847  025D  2A6F               	goto	l3211
  5848  025E  3001               	movlw	1
  5849  025F  02F9               	subwf	___ftadd@sign,f
  5850  0260  0879               	movf	___ftadd@sign,w
  5851  0261  3907               	andlw	7
  5852  0262  1903               	btfsc	3,2
  5853  0263  2A6F               	goto	l3211
  5854  0264  2A52               	goto	l3203
  5855  0265                     l3209:	
  5856  0265  3001               	movlw	1
  5857  0266                     u3145:	
  5858  0266  36A2               	lsrf	___ftadd@f1+2,f
  5859  0267  0CA1               	rrf	___ftadd@f1+1,f
  5860  0268  0CA0               	rrf	___ftadd@f1,f
  5861  0269  0B89               	decfsz	9,f
  5862  026A  2A66               	goto	u3145
  5863  026B  3001               	movlw	1
  5864  026C  00A6               	movwf	??___ftadd
  5865  026D  0826               	movf	??___ftadd,w
  5866  026E  07FB               	addwf	___ftadd@exp1,f
  5867  026F                     l3211:	
  5868  026F  087B               	movf	___ftadd@exp1,w
  5869  0270  067A               	xorwf	___ftadd@exp2,w
  5870  0271  1903               	btfsc	3,2
  5871  0272  2A99               	goto	l878
  5872  0273  2A65               	goto	l3209
  5873  0274                     l3213:	
  5874  0274  087B               	movf	___ftadd@exp1,w
  5875  0275  027A               	subwf	___ftadd@exp2,w
  5876  0276  1803               	skipnc
  5877  0277  2A99               	goto	l878
  5878  0278                     l3215:	
  5879  0278  3001               	movlw	1
  5880  0279                     u3175:	
  5881  0279  35A0               	lslf	___ftadd@f1,f
  5882  027A  0DA1               	rlf	___ftadd@f1+1,f
  5883  027B  0DA2               	rlf	___ftadd@f1+2,f
  5884  027C  0B89               	decfsz	9,f
  5885  027D  2A79               	goto	u3175
  5886  027E  3001               	movlw	1
  5887  027F  02FB               	subwf	___ftadd@exp1,f
  5888  0280  087A               	movf	___ftadd@exp2,w
  5889  0281  067B               	xorwf	___ftadd@exp1,w
  5890  0282  1903               	skipnz
  5891  0283  2A95               	goto	l3223
  5892  0284  3001               	movlw	1
  5893  0285  02F9               	subwf	___ftadd@sign,f
  5894  0286  0879               	movf	___ftadd@sign,w
  5895  0287  3907               	andlw	7
  5896  0288  1903               	btfsc	3,2
  5897  0289  2A95               	goto	l3223
  5898  028A  2A78               	goto	l3215
  5899  028B                     l3221:	
  5900  028B  3001               	movlw	1
  5901  028C                     u3205:	
  5902  028C  36A5               	lsrf	___ftadd@f2+2,f
  5903  028D  0CA4               	rrf	___ftadd@f2+1,f
  5904  028E  0CA3               	rrf	___ftadd@f2,f
  5905  028F  0B89               	decfsz	9,f
  5906  0290  2A8C               	goto	u3205
  5907  0291  3001               	movlw	1
  5908  0292  00A6               	movwf	??___ftadd
  5909  0293  0826               	movf	??___ftadd,w
  5910  0294  07FA               	addwf	___ftadd@exp2,f
  5911  0295                     l3223:	
  5912  0295  087B               	movf	___ftadd@exp1,w
  5913  0296  067A               	xorwf	___ftadd@exp2,w
  5914  0297  1D03               	skipz
  5915  0298  2A8B               	goto	l3221
  5916  0299                     l878:	
  5917  0299  1FF9               	btfss	___ftadd@sign,7
  5918  029A  2AAB               	goto	l3227
  5919  029B  30FF               	movlw	255
  5920  029C  06A0               	xorwf	___ftadd@f1,f
  5921  029D  30FF               	movlw	255
  5922  029E  06A1               	xorwf	___ftadd@f1+1,f
  5923  029F  30FF               	movlw	255
  5924  02A0  06A2               	xorwf	___ftadd@f1+2,f
  5925  02A1  3001               	movlw	1
  5926  02A2  07A0               	addwf	___ftadd@f1,f
  5927  02A3  3000               	movlw	0
  5928  02A4  1803               	skipnc
  5929  02A5  3001               	movlw	1
  5930  02A6  07A1               	addwf	___ftadd@f1+1,f
  5931  02A7  3000               	movlw	0
  5932  02A8  1803               	skipnc
  5933  02A9  3001               	movlw	1
  5934  02AA  07A2               	addwf	___ftadd@f1+2,f
  5935  02AB                     l3227:	
  5936  02AB  1F79               	btfss	___ftadd@sign,6
  5937  02AC  2ABD               	goto	l3231
  5938  02AD  30FF               	movlw	255
  5939  02AE  06A3               	xorwf	___ftadd@f2,f
  5940  02AF  30FF               	movlw	255
  5941  02B0  06A4               	xorwf	___ftadd@f2+1,f
  5942  02B1  30FF               	movlw	255
  5943  02B2  06A5               	xorwf	___ftadd@f2+2,f
  5944  02B3  3001               	movlw	1
  5945  02B4  07A3               	addwf	___ftadd@f2,f
  5946  02B5  3000               	movlw	0
  5947  02B6  1803               	skipnc
  5948  02B7  3001               	movlw	1
  5949  02B8  07A4               	addwf	___ftadd@f2+1,f
  5950  02B9  3000               	movlw	0
  5951  02BA  1803               	skipnc
  5952  02BB  3001               	movlw	1
  5953  02BC  07A5               	addwf	___ftadd@f2+2,f
  5954  02BD                     l3231:	
  5955  02BD  01F9               	clrf	___ftadd@sign
  5956  02BE  0820               	movf	___ftadd@f1,w
  5957  02BF  07A3               	addwf	___ftadd@f2,f
  5958  02C0  0821               	movf	___ftadd@f1+1,w
  5959  02C1  3DA4               	addwfc	___ftadd@f2+1,f
  5960  02C2  0822               	movf	___ftadd@f1+2,w
  5961  02C3  3DA5               	addwfc	___ftadd@f2+2,f
  5962  02C4  1FA5               	btfss	___ftadd@f2+2,7
  5963  02C5  2AD8               	goto	l3241
  5964  02C6  30FF               	movlw	255
  5965  02C7  06A3               	xorwf	___ftadd@f2,f
  5966  02C8  30FF               	movlw	255
  5967  02C9  06A4               	xorwf	___ftadd@f2+1,f
  5968  02CA  30FF               	movlw	255
  5969  02CB  06A5               	xorwf	___ftadd@f2+2,f
  5970  02CC  3001               	movlw	1
  5971  02CD  07A3               	addwf	___ftadd@f2,f
  5972  02CE  3000               	movlw	0
  5973  02CF  1803               	skipnc
  5974  02D0  3001               	movlw	1
  5975  02D1  07A4               	addwf	___ftadd@f2+1,f
  5976  02D2  3000               	movlw	0
  5977  02D3  1803               	skipnc
  5978  02D4  3001               	movlw	1
  5979  02D5  07A5               	addwf	___ftadd@f2+2,f
  5980  02D6  01F9               	clrf	___ftadd@sign
  5981  02D7  0AF9               	incf	___ftadd@sign,f
  5982  02D8                     l3241:	
  5983  02D8  0823               	movf	___ftadd@f2,w
  5984  02D9  00F1               	movwf	___ftpack@arg
  5985  02DA  0824               	movf	___ftadd@f2+1,w
  5986  02DB  00F2               	movwf	___ftpack@arg+1
  5987  02DC  0825               	movf	___ftadd@f2+2,w
  5988  02DD  00F3               	movwf	___ftpack@arg+2
  5989  02DE  087B               	movf	___ftadd@exp1,w
  5990  02DF  00A6               	movwf	??___ftadd
  5991  02E0  0826               	movf	??___ftadd,w
  5992  02E1  00F4               	movwf	___ftpack@exp
  5993  02E2  0879               	movf	___ftadd@sign,w
  5994  02E3  00A7               	movwf	??___ftadd+1
  5995  02E4  0827               	movf	??___ftadd+1,w
  5996  02E5  00F5               	movwf	___ftpack@sign
  5997  02E6  3186  26E0         	fcall	___ftpack
  5998  02E8  0871               	movf	?___ftpack,w
  5999  02E9  0020               	movlb	0	; select bank0
  6000  02EA  00A0               	movwf	?___ftadd
  6001  02EB  0872               	movf	?___ftpack+1,w
  6002  02EC  00A1               	movwf	?___ftadd+1
  6003  02ED  0873               	movf	?___ftpack+2,w
  6004  02EE  00A2               	movwf	?___ftadd+2
  6005  02EF  0008               	return
  6006  02F0                     __end_of___ftadd:	
  6007                           
  6008                           	psect	text25
  6009  049C                     __ptext25:	
  6010 ;; *************** function ___ftmul *****************
  6011 ;; Defined at:
  6012 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  6013 ;; Parameters:    Size  Location     Type
  6014 ;;  f1              3    4[BANK0 ] float 
  6015 ;;  f2              3    7[BANK0 ] float 
  6016 ;; Auto vars:     Size  Location     Type
  6017 ;;  f3_as_produc    3   15[BANK0 ] unsigned um
  6018 ;;  sign            1   19[BANK0 ] unsigned char 
  6019 ;;  cntr            1   18[BANK0 ] unsigned char 
  6020 ;;  exp             1   14[BANK0 ] unsigned char 
  6021 ;; Return value:  Size  Location     Type
  6022 ;;                  3    4[BANK0 ] float 
  6023 ;; Registers used:
  6024 ;;		wreg, status,2, status,0, pclath, cstack
  6025 ;; Tracked objects:
  6026 ;;		On entry : 0/0
  6027 ;;		On exit  : 0/0
  6028 ;;		Unchanged: 0/0
  6029 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6030 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6031 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6032 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6033 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6034 ;;Total ram usage:       16 bytes
  6035 ;; Hardware stack levels used:    1
  6036 ;; Hardware stack levels required when called:    3
  6037 ;; This function calls:
  6038 ;;		___ftpack
  6039 ;; This function is called by:
  6040 ;;		_ADCConv
  6041 ;;		_sqrt
  6042 ;; This function uses a non-reentrant model
  6043 ;;
  6044                           
  6045                           
  6046                           ;psect for function ___ftmul
  6047  049C                     ___ftmul:	
  6048                           
  6049                           ;incstack = 0
  6050                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  6051  049C  0020               	movlb	0	; select bank0
  6052  049D  0824               	movf	___ftmul@f1,w
  6053  049E  00AA               	movwf	??___ftmul
  6054  049F  0825               	movf	___ftmul@f1+1,w
  6055  04A0  00AB               	movwf	??___ftmul+1
  6056  04A1  0826               	movf	___ftmul@f1+2,w
  6057  04A2  00AC               	movwf	??___ftmul+2
  6058  04A3  1003               	clrc
  6059  04A4  0D2B               	rlf	??___ftmul+1,w
  6060  04A5  0D2C               	rlf	??___ftmul+2,w
  6061  04A6  00AD               	movwf	??___ftmul+3
  6062  04A7  082D               	movf	??___ftmul+3,w
  6063  04A8  00AE               	movwf	___ftmul@exp
  6064  04A9  082E               	movf	___ftmul@exp,w
  6065  04AA  1D03               	btfss	3,2
  6066  04AB  2CB3               	goto	l3279
  6067  04AC  3000               	movlw	0
  6068  04AD  00A4               	movwf	?___ftmul
  6069  04AE  3000               	movlw	0
  6070  04AF  00A5               	movwf	?___ftmul+1
  6071  04B0  3000               	movlw	0
  6072  04B1  00A6               	movwf	?___ftmul+2
  6073  04B2  0008               	return
  6074  04B3                     l3279:	
  6075  04B3  0827               	movf	___ftmul@f2,w
  6076  04B4  00AA               	movwf	??___ftmul
  6077  04B5  0828               	movf	___ftmul@f2+1,w
  6078  04B6  00AB               	movwf	??___ftmul+1
  6079  04B7  0829               	movf	___ftmul@f2+2,w
  6080  04B8  00AC               	movwf	??___ftmul+2
  6081  04B9  1003               	clrc
  6082  04BA  0D2B               	rlf	??___ftmul+1,w
  6083  04BB  0D2C               	rlf	??___ftmul+2,w
  6084  04BC  00AD               	movwf	??___ftmul+3
  6085  04BD  082D               	movf	??___ftmul+3,w
  6086  04BE  00B3               	movwf	___ftmul@sign
  6087  04BF  0833               	movf	___ftmul@sign,w
  6088  04C0  1D03               	btfss	3,2
  6089  04C1  2CC9               	goto	l3285
  6090  04C2  3000               	movlw	0
  6091  04C3  00A4               	movwf	?___ftmul
  6092  04C4  3000               	movlw	0
  6093  04C5  00A5               	movwf	?___ftmul+1
  6094  04C6  3000               	movlw	0
  6095  04C7  00A6               	movwf	?___ftmul+2
  6096  04C8  0008               	return
  6097  04C9                     l3285:	
  6098  04C9  0833               	movf	___ftmul@sign,w
  6099  04CA  3E7B               	addlw	123
  6100  04CB  00AA               	movwf	??___ftmul
  6101  04CC  082A               	movf	??___ftmul,w
  6102  04CD  07AE               	addwf	___ftmul@exp,f
  6103  04CE  0824               	movf	___ftmul@f1,w
  6104  04CF  00AA               	movwf	??___ftmul
  6105  04D0  0825               	movf	___ftmul@f1+1,w
  6106  04D1  00AB               	movwf	??___ftmul+1
  6107  04D2  0826               	movf	___ftmul@f1+2,w
  6108  04D3  00AC               	movwf	??___ftmul+2
  6109  04D4  3010               	movlw	16
  6110  04D5                     u3275:	
  6111  04D5  36AC               	lsrf	??___ftmul+2,f
  6112  04D6  0CAB               	rrf	??___ftmul+1,f
  6113  04D7  0CAA               	rrf	??___ftmul,f
  6114  04D8  0B89               	decfsz	9,f
  6115  04D9  2CD5               	goto	u3275
  6116  04DA  082A               	movf	??___ftmul,w
  6117  04DB  00AD               	movwf	??___ftmul+3
  6118  04DC  082D               	movf	??___ftmul+3,w
  6119  04DD  00B3               	movwf	___ftmul@sign
  6120  04DE  0827               	movf	___ftmul@f2,w
  6121  04DF  00AA               	movwf	??___ftmul
  6122  04E0  0828               	movf	___ftmul@f2+1,w
  6123  04E1  00AB               	movwf	??___ftmul+1
  6124  04E2  0829               	movf	___ftmul@f2+2,w
  6125  04E3  00AC               	movwf	??___ftmul+2
  6126  04E4  3010               	movlw	16
  6127  04E5                     u3285:	
  6128  04E5  36AC               	lsrf	??___ftmul+2,f
  6129  04E6  0CAB               	rrf	??___ftmul+1,f
  6130  04E7  0CAA               	rrf	??___ftmul,f
  6131  04E8  0B89               	decfsz	9,f
  6132  04E9  2CE5               	goto	u3285
  6133  04EA  082A               	movf	??___ftmul,w
  6134  04EB  00AD               	movwf	??___ftmul+3
  6135  04EC  082D               	movf	??___ftmul+3,w
  6136  04ED  06B3               	xorwf	___ftmul@sign,f
  6137  04EE  3080               	movlw	128
  6138  04EF  00AA               	movwf	??___ftmul
  6139  04F0  082A               	movf	??___ftmul,w
  6140  04F1  05B3               	andwf	___ftmul@sign,f
  6141  04F2  17A5               	bsf	___ftmul@f1+1,7
  6142  04F3  17A8               	bsf	___ftmul@f2+1,7
  6143  04F4  30FF               	movlw	255
  6144  04F5  05A7               	andwf	___ftmul@f2,f
  6145  04F6  30FF               	movlw	255
  6146  04F7  05A8               	andwf	___ftmul@f2+1,f
  6147  04F8  3000               	movlw	0
  6148  04F9  05A9               	andwf	___ftmul@f2+2,f
  6149  04FA  3000               	movlw	0
  6150  04FB  00AF               	movwf	___ftmul@f3_as_product
  6151  04FC  3000               	movlw	0
  6152  04FD  00B0               	movwf	___ftmul@f3_as_product+1
  6153  04FE  3000               	movlw	0
  6154  04FF  00B1               	movwf	___ftmul@f3_as_product+2
  6155  0500  3007               	movlw	7
  6156  0501  00AA               	movwf	??___ftmul
  6157  0502  082A               	movf	??___ftmul,w
  6158  0503  00B2               	movwf	___ftmul@cntr
  6159  0504                     l3297:	
  6160  0504  1C24               	btfss	___ftmul@f1,0
  6161  0505  2D0C               	goto	l3301
  6162  0506  0827               	movf	___ftmul@f2,w
  6163  0507  07AF               	addwf	___ftmul@f3_as_product,f
  6164  0508  0828               	movf	___ftmul@f2+1,w
  6165  0509  3DB0               	addwfc	___ftmul@f3_as_product+1,f
  6166  050A  0829               	movf	___ftmul@f2+2,w
  6167  050B  3DB1               	addwfc	___ftmul@f3_as_product+2,f
  6168  050C                     l3301:	
  6169  050C  3001               	movlw	1
  6170  050D                     u3305:	
  6171  050D  36A6               	lsrf	___ftmul@f1+2,f
  6172  050E  0CA5               	rrf	___ftmul@f1+1,f
  6173  050F  0CA4               	rrf	___ftmul@f1,f
  6174  0510  0B89               	decfsz	9,f
  6175  0511  2D0D               	goto	u3305
  6176  0512  3001               	movlw	1
  6177  0513                     u3315:	
  6178  0513  35A7               	lslf	___ftmul@f2,f
  6179  0514  0DA8               	rlf	___ftmul@f2+1,f
  6180  0515  0DA9               	rlf	___ftmul@f2+2,f
  6181  0516  0B89               	decfsz	9,f
  6182  0517  2D13               	goto	u3315
  6183  0518  3001               	movlw	1
  6184  0519  02B2               	subwf	___ftmul@cntr,f
  6185  051A  1D03               	btfss	3,2
  6186  051B  2D04               	goto	l3297
  6187  051C  3009               	movlw	9
  6188  051D  00AA               	movwf	??___ftmul
  6189  051E  082A               	movf	??___ftmul,w
  6190  051F  00B2               	movwf	___ftmul@cntr
  6191  0520                     l3309:	
  6192  0520  1C24               	btfss	___ftmul@f1,0
  6193  0521  2D28               	goto	l3313
  6194  0522  0827               	movf	___ftmul@f2,w
  6195  0523  07AF               	addwf	___ftmul@f3_as_product,f
  6196  0524  0828               	movf	___ftmul@f2+1,w
  6197  0525  3DB0               	addwfc	___ftmul@f3_as_product+1,f
  6198  0526  0829               	movf	___ftmul@f2+2,w
  6199  0527  3DB1               	addwfc	___ftmul@f3_as_product+2,f
  6200  0528                     l3313:	
  6201  0528  3001               	movlw	1
  6202  0529                     u3345:	
  6203  0529  36A6               	lsrf	___ftmul@f1+2,f
  6204  052A  0CA5               	rrf	___ftmul@f1+1,f
  6205  052B  0CA4               	rrf	___ftmul@f1,f
  6206  052C  0B89               	decfsz	9,f
  6207  052D  2D29               	goto	u3345
  6208  052E  3001               	movlw	1
  6209  052F                     u3355:	
  6210  052F  36B1               	lsrf	___ftmul@f3_as_product+2,f
  6211  0530  0CB0               	rrf	___ftmul@f3_as_product+1,f
  6212  0531  0CAF               	rrf	___ftmul@f3_as_product,f
  6213  0532  0B89               	decfsz	9,f
  6214  0533  2D2F               	goto	u3355
  6215  0534  3001               	movlw	1
  6216  0535  02B2               	subwf	___ftmul@cntr,f
  6217  0536  1D03               	btfss	3,2
  6218  0537  2D20               	goto	l3309
  6219  0538  082F               	movf	___ftmul@f3_as_product,w
  6220  0539  00F1               	movwf	___ftpack@arg
  6221  053A  0830               	movf	___ftmul@f3_as_product+1,w
  6222  053B  00F2               	movwf	___ftpack@arg+1
  6223  053C  0831               	movf	___ftmul@f3_as_product+2,w
  6224  053D  00F3               	movwf	___ftpack@arg+2
  6225  053E  082E               	movf	___ftmul@exp,w
  6226  053F  00AA               	movwf	??___ftmul
  6227  0540  082A               	movf	??___ftmul,w
  6228  0541  00F4               	movwf	___ftpack@exp
  6229  0542  0833               	movf	___ftmul@sign,w
  6230  0543  00AB               	movwf	??___ftmul+1
  6231  0544  082B               	movf	??___ftmul+1,w
  6232  0545  00F5               	movwf	___ftpack@sign
  6233  0546  3186  26E0         	fcall	___ftpack
  6234  0548  0871               	movf	?___ftpack,w
  6235  0549  0020               	movlb	0	; select bank0
  6236  054A  00A4               	movwf	?___ftmul
  6237  054B  0872               	movf	?___ftpack+1,w
  6238  054C  00A5               	movwf	?___ftmul+1
  6239  054D  0873               	movf	?___ftpack+2,w
  6240  054E  00A6               	movwf	?___ftmul+2
  6241  054F  0008               	return
  6242  0550                     __end_of___ftmul:	
  6243                           
  6244                           	psect	text26
  6245  0FC5                     __ptext26:	
  6246 ;; *************** function ___ftge *****************
  6247 ;; Defined at:
  6248 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
  6249 ;; Parameters:    Size  Location     Type
  6250 ;;  ff1             3    1[COMMON] float 
  6251 ;;  ff2             3    4[COMMON] float 
  6252 ;; Auto vars:     Size  Location     Type
  6253 ;;		None
  6254 ;; Return value:  Size  Location     Type
  6255 ;;		None               void
  6256 ;; Registers used:
  6257 ;;		wreg, status,2, status,0
  6258 ;; Tracked objects:
  6259 ;;		On entry : 0/0
  6260 ;;		On exit  : 0/0
  6261 ;;		Unchanged: 0/0
  6262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6263 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6264 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6265 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6266 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6267 ;;Total ram usage:        9 bytes
  6268 ;; Hardware stack levels used:    1
  6269 ;; Hardware stack levels required when called:    2
  6270 ;; This function calls:
  6271 ;;		Nothing
  6272 ;; This function is called by:
  6273 ;;		_sqrt
  6274 ;; This function uses a non-reentrant model
  6275 ;;
  6276                           
  6277                           
  6278                           ;psect for function ___ftge
  6279  0FC5                     ___ftge:	
  6280                           
  6281                           ;incstack = 0
  6282                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  6283  0FC5  1FF3               	btfss	___ftge@ff1+2,7
  6284  0FC6  2FDB               	goto	l2267
  6285  0FC7  0971               	comf	___ftge@ff1,w
  6286  0FC8  00F7               	movwf	??___ftge
  6287  0FC9  0972               	comf	___ftge@ff1+1,w
  6288  0FCA  00F8               	movwf	??___ftge+1
  6289  0FCB  0973               	comf	___ftge@ff1+2,w
  6290  0FCC  00F9               	movwf	??___ftge+2
  6291  0FCD  0AF7               	incf	??___ftge,f
  6292  0FCE  1903               	skipnz
  6293  0FCF  0AF8               	incf	??___ftge+1,f
  6294  0FD0  1903               	skipnz
  6295  0FD1  0AF9               	incf	??___ftge+2,f
  6296  0FD2  3000               	movlw	0
  6297  0FD3  0777               	addwf	??___ftge,w
  6298  0FD4  00F1               	movwf	___ftge@ff1
  6299  0FD5  3000               	movlw	0
  6300  0FD6  3D78               	addwfc	??___ftge+1,w
  6301  0FD7  00F2               	movwf	___ftge@ff1+1
  6302  0FD8  3080               	movlw	128
  6303  0FD9  3D79               	addwfc	??___ftge+2,w
  6304  0FDA  00F3               	movwf	___ftge@ff1+2
  6305  0FDB                     l2267:	
  6306  0FDB  1FF6               	btfss	___ftge@ff2+2,7
  6307  0FDC  2FF1               	goto	l2271
  6308  0FDD  0974               	comf	___ftge@ff2,w
  6309  0FDE  00F7               	movwf	??___ftge
  6310  0FDF  0975               	comf	___ftge@ff2+1,w
  6311  0FE0  00F8               	movwf	??___ftge+1
  6312  0FE1  0976               	comf	___ftge@ff2+2,w
  6313  0FE2  00F9               	movwf	??___ftge+2
  6314  0FE3  0AF7               	incf	??___ftge,f
  6315  0FE4  1903               	skipnz
  6316  0FE5  0AF8               	incf	??___ftge+1,f
  6317  0FE6  1903               	skipnz
  6318  0FE7  0AF9               	incf	??___ftge+2,f
  6319  0FE8  3000               	movlw	0
  6320  0FE9  0777               	addwf	??___ftge,w
  6321  0FEA  00F4               	movwf	___ftge@ff2
  6322  0FEB  3000               	movlw	0
  6323  0FEC  3D78               	addwfc	??___ftge+1,w
  6324  0FED  00F5               	movwf	___ftge@ff2+1
  6325  0FEE  3080               	movlw	128
  6326  0FEF  3D79               	addwfc	??___ftge+2,w
  6327  0FF0  00F6               	movwf	___ftge@ff2+2
  6328  0FF1                     l2271:	
  6329  0FF1  3080               	movlw	128
  6330  0FF2  06F3               	xorwf	___ftge@ff1+2,f
  6331  0FF3  3080               	movlw	128
  6332  0FF4  06F6               	xorwf	___ftge@ff2+2,f
  6333  0FF5  0876               	movf	___ftge@ff2+2,w
  6334  0FF6  0273               	subwf	___ftge@ff1+2,w
  6335  0FF7  1D03               	skipz
  6336  0FF8  0008               	return
  6337  0FF9  0875               	movf	___ftge@ff2+1,w
  6338  0FFA  0272               	subwf	___ftge@ff1+1,w
  6339  0FFB  1D03               	skipz
  6340  0FFC  0008               	return
  6341  0FFD  0874               	movf	___ftge@ff2,w
  6342  0FFE  0271               	subwf	___ftge@ff1,w
  6343  0FFF  0008               	return
  6344  1000                     __end_of___ftge:	
  6345                           
  6346                           	psect	text27
  6347  0C3A                     __ptext27:	
  6348 ;; *************** function ___wmul *****************
  6349 ;; Defined at:
  6350 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  6351 ;; Parameters:    Size  Location     Type
  6352 ;;  multiplier      2    1[COMMON] unsigned int 
  6353 ;;  multiplicand    2    3[COMMON] unsigned int 
  6354 ;; Auto vars:     Size  Location     Type
  6355 ;;  product         2    5[COMMON] unsigned int 
  6356 ;; Return value:  Size  Location     Type
  6357 ;;                  2    1[COMMON] unsigned int 
  6358 ;; Registers used:
  6359 ;;		wreg, status,2, status,0
  6360 ;; Tracked objects:
  6361 ;;		On entry : 0/0
  6362 ;;		On exit  : 0/0
  6363 ;;		Unchanged: 0/0
  6364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6365 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6366 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6367 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6368 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6369 ;;Total ram usage:        6 bytes
  6370 ;; Hardware stack levels used:    1
  6371 ;; Hardware stack levels required when called:    2
  6372 ;; This function calls:
  6373 ;;		Nothing
  6374 ;; This function is called by:
  6375 ;;		_ADCConv
  6376 ;; This function uses a non-reentrant model
  6377 ;;
  6378                           
  6379                           
  6380                           ;psect for function ___wmul
  6381  0C3A                     ___wmul:	
  6382                           
  6383                           ;incstack = 0
  6384                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6385  0C3A  01F5               	clrf	___wmul@product
  6386  0C3B  01F6               	clrf	___wmul@product+1
  6387  0C3C                     l2385:	
  6388  0C3C  1C71               	btfss	___wmul@multiplier,0
  6389  0C3D  2C42               	goto	l686
  6390  0C3E  0873               	movf	___wmul@multiplicand,w
  6391  0C3F  07F5               	addwf	___wmul@product,f
  6392  0C40  0874               	movf	___wmul@multiplicand+1,w
  6393  0C41  3DF6               	addwfc	___wmul@product+1,f
  6394  0C42                     l686:	
  6395  0C42  3001               	movlw	1
  6396  0C43                     u2065:	
  6397  0C43  35F3               	lslf	___wmul@multiplicand,f
  6398  0C44  0DF4               	rlf	___wmul@multiplicand+1,f
  6399  0C45  0B89               	decfsz	9,f
  6400  0C46  2C43               	goto	u2065
  6401  0C47  3001               	movlw	1
  6402  0C48                     u2075:	
  6403  0C48  36F2               	lsrf	___wmul@multiplier+1,f
  6404  0C49  0CF1               	rrf	___wmul@multiplier,f
  6405  0C4A  0B89               	decfsz	9,f
  6406  0C4B  2C48               	goto	u2075
  6407  0C4C  0871               	movf	___wmul@multiplier,w
  6408  0C4D  0472               	iorwf	___wmul@multiplier+1,w
  6409  0C4E  1D03               	btfss	3,2
  6410  0C4F  2C3C               	goto	l2385
  6411  0C50  0876               	movf	___wmul@product+1,w
  6412  0C51  00F2               	movwf	?___wmul+1
  6413  0C52  0875               	movf	___wmul@product,w
  6414  0C53  00F1               	movwf	?___wmul
  6415  0C54  0008               	return
  6416  0C55                     __end_of___wmul:	
  6417                           
  6418                           	psect	text28
  6419  07EB                     __ptext28:	
  6420 ;; *************** function ___lwtoft *****************
  6421 ;; Defined at:
  6422 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwtoft.c"
  6423 ;; Parameters:    Size  Location     Type
  6424 ;;  c               2    9[COMMON] unsigned int 
  6425 ;; Auto vars:     Size  Location     Type
  6426 ;;		None
  6427 ;; Return value:  Size  Location     Type
  6428 ;;                  3    9[COMMON] float 
  6429 ;; Registers used:
  6430 ;;		wreg, status,2, status,0, pclath, cstack
  6431 ;; Tracked objects:
  6432 ;;		On entry : 0/0
  6433 ;;		On exit  : 0/0
  6434 ;;		Unchanged: 0/0
  6435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6436 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6438 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6439 ;;      Totals:         3       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6440 ;;Total ram usage:        4 bytes
  6441 ;; Hardware stack levels used:    1
  6442 ;; Hardware stack levels required when called:    3
  6443 ;; This function calls:
  6444 ;;		___ftpack
  6445 ;; This function is called by:
  6446 ;;		_ADCConv
  6447 ;; This function uses a non-reentrant model
  6448 ;;
  6449                           
  6450                           
  6451                           ;psect for function ___lwtoft
  6452  07EB                     ___lwtoft:	
  6453                           
  6454                           ;incstack = 0
  6455                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  6456  07EB  0879               	movf	___lwtoft@c,w
  6457  07EC  00F1               	movwf	___ftpack@arg
  6458  07ED  087A               	movf	___lwtoft@c+1,w
  6459  07EE  00F2               	movwf	___ftpack@arg+1
  6460  07EF  01F3               	clrf	___ftpack@arg+2
  6461  07F0  308E               	movlw	142
  6462  07F1  0020               	movlb	0	; select bank0
  6463  07F2  00A0               	movwf	??___lwtoft
  6464  07F3  0820               	movf	??___lwtoft,w
  6465  07F4  00F4               	movwf	___ftpack@exp
  6466  07F5  01F5               	clrf	___ftpack@sign
  6467  07F6  3186  26E0         	fcall	___ftpack
  6468  07F8  0871               	movf	?___ftpack,w
  6469  07F9  00F9               	movwf	?___lwtoft
  6470  07FA  0872               	movf	?___ftpack+1,w
  6471  07FB  00FA               	movwf	?___lwtoft+1
  6472  07FC  0873               	movf	?___ftpack+2,w
  6473  07FD  00FB               	movwf	?___lwtoft+2
  6474  07FE  0008               	return
  6475  07FF                     __end_of___lwtoft:	
  6476                           
  6477                           	psect	text29
  6478  0F58                     __ptext29:	
  6479 ;; *************** function ___lwdiv *****************
  6480 ;; Defined at:
  6481 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  6482 ;; Parameters:    Size  Location     Type
  6483 ;;  divisor         2    1[COMMON] unsigned int 
  6484 ;;  dividend        2    3[COMMON] unsigned int 
  6485 ;; Auto vars:     Size  Location     Type
  6486 ;;  quotient        2    6[COMMON] unsigned int 
  6487 ;;  counter         1    8[COMMON] unsigned char 
  6488 ;; Return value:  Size  Location     Type
  6489 ;;                  2    1[COMMON] unsigned int 
  6490 ;; Registers used:
  6491 ;;		wreg, status,2, status,0
  6492 ;; Tracked objects:
  6493 ;;		On entry : 0/0
  6494 ;;		On exit  : 0/0
  6495 ;;		Unchanged: 0/0
  6496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6497 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6498 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6499 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6500 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6501 ;;Total ram usage:        8 bytes
  6502 ;; Hardware stack levels used:    1
  6503 ;; Hardware stack levels required when called:    2
  6504 ;; This function calls:
  6505 ;;		Nothing
  6506 ;; This function is called by:
  6507 ;;		_ADCConv
  6508 ;; This function uses a non-reentrant model
  6509 ;;
  6510                           
  6511                           
  6512                           ;psect for function ___lwdiv
  6513  0F58                     ___lwdiv:	
  6514                           
  6515                           ;incstack = 0
  6516                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6517  0F58  01F6               	clrf	___lwdiv@quotient
  6518  0F59  01F7               	clrf	___lwdiv@quotient+1
  6519  0F5A  0871               	movf	___lwdiv@divisor,w
  6520  0F5B  0472               	iorwf	___lwdiv@divisor+1,w
  6521  0F5C  1903               	btfsc	3,2
  6522  0F5D  2F87               	goto	l2471
  6523  0F5E  01F8               	clrf	___lwdiv@counter
  6524  0F5F  0AF8               	incf	___lwdiv@counter,f
  6525  0F60                     l2459:	
  6526  0F60  1BF2               	btfsc	___lwdiv@divisor+1,7
  6527  0F61  2F6C               	goto	l2461
  6528  0F62  3001               	movlw	1
  6529  0F63                     u2205:	
  6530  0F63  35F1               	lslf	___lwdiv@divisor,f
  6531  0F64  0DF2               	rlf	___lwdiv@divisor+1,f
  6532  0F65  0B89               	decfsz	9,f
  6533  0F66  2F63               	goto	u2205
  6534  0F67  3001               	movlw	1
  6535  0F68  00F5               	movwf	??___lwdiv
  6536  0F69  0875               	movf	??___lwdiv,w
  6537  0F6A  07F8               	addwf	___lwdiv@counter,f
  6538  0F6B  2F60               	goto	l2459
  6539  0F6C                     l2461:	
  6540  0F6C  3001               	movlw	1
  6541  0F6D                     u2225:	
  6542  0F6D  35F6               	lslf	___lwdiv@quotient,f
  6543  0F6E  0DF7               	rlf	___lwdiv@quotient+1,f
  6544  0F6F  0B89               	decfsz	9,f
  6545  0F70  2F6D               	goto	u2225
  6546  0F71  0872               	movf	___lwdiv@divisor+1,w
  6547  0F72  0274               	subwf	___lwdiv@dividend+1,w
  6548  0F73  1D03               	skipz
  6549  0F74  2F77               	goto	u2235
  6550  0F75  0871               	movf	___lwdiv@divisor,w
  6551  0F76  0273               	subwf	___lwdiv@dividend,w
  6552  0F77                     u2235:	
  6553  0F77  1C03               	skipc
  6554  0F78  2F7E               	goto	l2467
  6555  0F79  0871               	movf	___lwdiv@divisor,w
  6556  0F7A  02F3               	subwf	___lwdiv@dividend,f
  6557  0F7B  0872               	movf	___lwdiv@divisor+1,w
  6558  0F7C  3BF4               	subwfb	___lwdiv@dividend+1,f
  6559  0F7D  1476               	bsf	___lwdiv@quotient,0
  6560  0F7E                     l2467:	
  6561  0F7E  3001               	movlw	1
  6562  0F7F                     u2245:	
  6563  0F7F  36F2               	lsrf	___lwdiv@divisor+1,f
  6564  0F80  0CF1               	rrf	___lwdiv@divisor,f
  6565  0F81  0B89               	decfsz	9,f
  6566  0F82  2F7F               	goto	u2245
  6567  0F83  3001               	movlw	1
  6568  0F84  02F8               	subwf	___lwdiv@counter,f
  6569  0F85  1D03               	btfss	3,2
  6570  0F86  2F6C               	goto	l2461
  6571  0F87                     l2471:	
  6572  0F87  0877               	movf	___lwdiv@quotient+1,w
  6573  0F88  00F2               	movwf	?___lwdiv+1
  6574  0F89  0876               	movf	___lwdiv@quotient,w
  6575  0F8A  00F1               	movwf	?___lwdiv
  6576  0F8B  0008               	return
  6577  0F8C                     __end_of___lwdiv:	
  6578                           
  6579                           	psect	text30
  6580  0E9D                     __ptext30:	
  6581 ;; *************** function ___lltoft *****************
  6582 ;; Defined at:
  6583 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lltoft.c"
  6584 ;; Parameters:    Size  Location     Type
  6585 ;;  c               4    0[BANK0 ] unsigned long 
  6586 ;; Auto vars:     Size  Location     Type
  6587 ;;  exp             1   10[COMMON] unsigned char 
  6588 ;; Return value:  Size  Location     Type
  6589 ;;                  3    0[BANK0 ] float 
  6590 ;; Registers used:
  6591 ;;		wreg, status,2, status,0, pclath, cstack
  6592 ;; Tracked objects:
  6593 ;;		On entry : 0/0
  6594 ;;		On exit  : 0/0
  6595 ;;		Unchanged: 0/0
  6596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6597 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6598 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6599 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6600 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6601 ;;Total ram usage:        6 bytes
  6602 ;; Hardware stack levels used:    1
  6603 ;; Hardware stack levels required when called:    3
  6604 ;; This function calls:
  6605 ;;		___ftpack
  6606 ;; This function is called by:
  6607 ;;		_ADCConv
  6608 ;; This function uses a non-reentrant model
  6609 ;;
  6610                           
  6611                           
  6612                           ;psect for function ___lltoft
  6613  0E9D                     ___lltoft:	
  6614                           
  6615                           ;incstack = 0
  6616                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  6617  0E9D  308E               	movlw	142
  6618  0E9E  00F9               	movwf	??___lltoft
  6619  0E9F  0879               	movf	??___lltoft,w
  6620  0EA0  00FA               	movwf	___lltoft@exp
  6621  0EA1                     l3409:	
  6622  0EA1  30FF               	movlw	255
  6623  0EA2  0020               	movlb	0	; select bank0
  6624  0EA3  0523               	andwf	___lltoft@c+3,w
  6625  0EA4  1903               	btfsc	3,2
  6626  0EA5  2EB3               	goto	l3411
  6627  0EA6  3001               	movlw	1
  6628  0EA7                     u3505:	
  6629  0EA7  0020               	movlb	0	; select bank0
  6630  0EA8  36A3               	lsrf	___lltoft@c+3,f
  6631  0EA9  0CA2               	rrf	___lltoft@c+2,f
  6632  0EAA  0CA1               	rrf	___lltoft@c+1,f
  6633  0EAB  0CA0               	rrf	___lltoft@c,f
  6634  0EAC  0B89               	decfsz	9,f
  6635  0EAD  2EA7               	goto	u3505
  6636  0EAE  3001               	movlw	1
  6637  0EAF  00F9               	movwf	??___lltoft
  6638  0EB0  0879               	movf	??___lltoft,w
  6639  0EB1  07FA               	addwf	___lltoft@exp,f
  6640  0EB2  2EA1               	goto	l3409
  6641  0EB3                     l3411:	
  6642  0EB3  0820               	movf	___lltoft@c,w
  6643  0EB4  00F1               	movwf	___ftpack@arg
  6644  0EB5  0821               	movf	___lltoft@c+1,w
  6645  0EB6  00F2               	movwf	___ftpack@arg+1
  6646  0EB7  0822               	movf	___lltoft@c+2,w
  6647  0EB8  00F3               	movwf	___ftpack@arg+2
  6648  0EB9  087A               	movf	___lltoft@exp,w
  6649  0EBA  00F9               	movwf	??___lltoft
  6650  0EBB  0879               	movf	??___lltoft,w
  6651  0EBC  00F4               	movwf	___ftpack@exp
  6652  0EBD  01F5               	clrf	___ftpack@sign
  6653  0EBE  3186  26E0         	fcall	___ftpack
  6654  0EC0  0871               	movf	?___ftpack,w
  6655  0EC1  0020               	movlb	0	; select bank0
  6656  0EC2  00A0               	movwf	?___lltoft
  6657  0EC3  0872               	movf	?___ftpack+1,w
  6658  0EC4  00A1               	movwf	?___lltoft+1
  6659  0EC5  0873               	movf	?___ftpack+2,w
  6660  0EC6  00A2               	movwf	?___lltoft+2
  6661  0EC7  0008               	return
  6662  0EC8                     __end_of___lltoft:	
  6663                           
  6664                           	psect	text31
  6665  0550                     __ptext31:	
  6666 ;; *************** function ___ftdiv *****************
  6667 ;; Defined at:
  6668 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  6669 ;; Parameters:    Size  Location     Type
  6670 ;;  f2              3   20[BANK0 ] float 
  6671 ;;  f1              3   23[BANK0 ] float 
  6672 ;; Auto vars:     Size  Location     Type
  6673 ;;  f3              3   31[BANK0 ] float 
  6674 ;;  sign            1   35[BANK0 ] unsigned char 
  6675 ;;  exp             1   34[BANK0 ] unsigned char 
  6676 ;;  cntr            1   30[BANK0 ] unsigned char 
  6677 ;; Return value:  Size  Location     Type
  6678 ;;                  3   20[BANK0 ] float 
  6679 ;; Registers used:
  6680 ;;		wreg, status,2, status,0, pclath, cstack
  6681 ;; Tracked objects:
  6682 ;;		On entry : 0/0
  6683 ;;		On exit  : 0/0
  6684 ;;		Unchanged: 0/0
  6685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6686 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6687 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6688 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6689 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6690 ;;Total ram usage:       16 bytes
  6691 ;; Hardware stack levels used:    1
  6692 ;; Hardware stack levels required when called:    3
  6693 ;; This function calls:
  6694 ;;		___ftpack
  6695 ;; This function is called by:
  6696 ;;		_ADCConv
  6697 ;; This function uses a non-reentrant model
  6698 ;;
  6699                           
  6700                           
  6701                           ;psect for function ___ftdiv
  6702  0550                     ___ftdiv:	
  6703                           
  6704                           ;incstack = 0
  6705                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  6706  0550  0020               	movlb	0	; select bank0
  6707  0551  0837               	movf	___ftdiv@f1,w
  6708  0552  00BA               	movwf	??___ftdiv
  6709  0553  0838               	movf	___ftdiv@f1+1,w
  6710  0554  00BB               	movwf	??___ftdiv+1
  6711  0555  0839               	movf	___ftdiv@f1+2,w
  6712  0556  00BC               	movwf	??___ftdiv+2
  6713  0557  1003               	clrc
  6714  0558  0D3B               	rlf	??___ftdiv+1,w
  6715  0559  0D3C               	rlf	??___ftdiv+2,w
  6716  055A  00BD               	movwf	??___ftdiv+3
  6717  055B  083D               	movf	??___ftdiv+3,w
  6718  055C  00C2               	movwf	___ftdiv@exp
  6719  055D  0842               	movf	___ftdiv@exp,w
  6720  055E  1D03               	btfss	3,2
  6721  055F  2D67               	goto	l3369
  6722  0560  3000               	movlw	0
  6723  0561  00B4               	movwf	?___ftdiv
  6724  0562  3000               	movlw	0
  6725  0563  00B5               	movwf	?___ftdiv+1
  6726  0564  3000               	movlw	0
  6727  0565  00B6               	movwf	?___ftdiv+2
  6728  0566  0008               	return
  6729  0567                     l3369:	
  6730  0567  0834               	movf	___ftdiv@f2,w
  6731  0568  00BA               	movwf	??___ftdiv
  6732  0569  0835               	movf	___ftdiv@f2+1,w
  6733  056A  00BB               	movwf	??___ftdiv+1
  6734  056B  0836               	movf	___ftdiv@f2+2,w
  6735  056C  00BC               	movwf	??___ftdiv+2
  6736  056D  1003               	clrc
  6737  056E  0D3B               	rlf	??___ftdiv+1,w
  6738  056F  0D3C               	rlf	??___ftdiv+2,w
  6739  0570  00BD               	movwf	??___ftdiv+3
  6740  0571  083D               	movf	??___ftdiv+3,w
  6741  0572  00C3               	movwf	___ftdiv@sign
  6742  0573  0843               	movf	___ftdiv@sign,w
  6743  0574  1D03               	btfss	3,2
  6744  0575  2D7D               	goto	l3375
  6745  0576  3000               	movlw	0
  6746  0577  00B4               	movwf	?___ftdiv
  6747  0578  3000               	movlw	0
  6748  0579  00B5               	movwf	?___ftdiv+1
  6749  057A  3000               	movlw	0
  6750  057B  00B6               	movwf	?___ftdiv+2
  6751  057C  0008               	return
  6752  057D                     l3375:	
  6753  057D  3000               	movlw	0
  6754  057E  00BF               	movwf	___ftdiv@f3
  6755  057F  3000               	movlw	0
  6756  0580  00C0               	movwf	___ftdiv@f3+1
  6757  0581  3000               	movlw	0
  6758  0582  00C1               	movwf	___ftdiv@f3+2
  6759  0583  3089               	movlw	137
  6760  0584  0743               	addwf	___ftdiv@sign,w
  6761  0585  00BA               	movwf	??___ftdiv
  6762  0586  083A               	movf	??___ftdiv,w
  6763  0587  02C2               	subwf	___ftdiv@exp,f
  6764  0588  0837               	movf	___ftdiv@f1,w
  6765  0589  00BA               	movwf	??___ftdiv
  6766  058A  0838               	movf	___ftdiv@f1+1,w
  6767  058B  00BB               	movwf	??___ftdiv+1
  6768  058C  0839               	movf	___ftdiv@f1+2,w
  6769  058D  00BC               	movwf	??___ftdiv+2
  6770  058E  3010               	movlw	16
  6771  058F                     u3445:	
  6772  058F  36BC               	lsrf	??___ftdiv+2,f
  6773  0590  0CBB               	rrf	??___ftdiv+1,f
  6774  0591  0CBA               	rrf	??___ftdiv,f
  6775  0592  0B89               	decfsz	9,f
  6776  0593  2D8F               	goto	u3445
  6777  0594  083A               	movf	??___ftdiv,w
  6778  0595  00BD               	movwf	??___ftdiv+3
  6779  0596  083D               	movf	??___ftdiv+3,w
  6780  0597  00C3               	movwf	___ftdiv@sign
  6781  0598  0834               	movf	___ftdiv@f2,w
  6782  0599  00BA               	movwf	??___ftdiv
  6783  059A  0835               	movf	___ftdiv@f2+1,w
  6784  059B  00BB               	movwf	??___ftdiv+1
  6785  059C  0836               	movf	___ftdiv@f2+2,w
  6786  059D  00BC               	movwf	??___ftdiv+2
  6787  059E  3010               	movlw	16
  6788  059F                     u3455:	
  6789  059F  36BC               	lsrf	??___ftdiv+2,f
  6790  05A0  0CBB               	rrf	??___ftdiv+1,f
  6791  05A1  0CBA               	rrf	??___ftdiv,f
  6792  05A2  0B89               	decfsz	9,f
  6793  05A3  2D9F               	goto	u3455
  6794  05A4  083A               	movf	??___ftdiv,w
  6795  05A5  00BD               	movwf	??___ftdiv+3
  6796  05A6  083D               	movf	??___ftdiv+3,w
  6797  05A7  06C3               	xorwf	___ftdiv@sign,f
  6798  05A8  3080               	movlw	128
  6799  05A9  00BA               	movwf	??___ftdiv
  6800  05AA  083A               	movf	??___ftdiv,w
  6801  05AB  05C3               	andwf	___ftdiv@sign,f
  6802  05AC  17B8               	bsf	___ftdiv@f1+1,7
  6803  05AD  30FF               	movlw	255
  6804  05AE  05B7               	andwf	___ftdiv@f1,f
  6805  05AF  30FF               	movlw	255
  6806  05B0  05B8               	andwf	___ftdiv@f1+1,f
  6807  05B1  3000               	movlw	0
  6808  05B2  05B9               	andwf	___ftdiv@f1+2,f
  6809  05B3  17B5               	bsf	___ftdiv@f2+1,7
  6810  05B4  30FF               	movlw	255
  6811  05B5  05B4               	andwf	___ftdiv@f2,f
  6812  05B6  30FF               	movlw	255
  6813  05B7  05B5               	andwf	___ftdiv@f2+1,f
  6814  05B8  3000               	movlw	0
  6815  05B9  05B6               	andwf	___ftdiv@f2+2,f
  6816  05BA  3018               	movlw	24
  6817  05BB  00BA               	movwf	??___ftdiv
  6818  05BC  083A               	movf	??___ftdiv,w
  6819  05BD  00BE               	movwf	___ftdiv@cntr
  6820  05BE                     l3389:	
  6821  05BE  3001               	movlw	1
  6822  05BF                     u3465:	
  6823  05BF  35BF               	lslf	___ftdiv@f3,f
  6824  05C0  0DC0               	rlf	___ftdiv@f3+1,f
  6825  05C1  0DC1               	rlf	___ftdiv@f3+2,f
  6826  05C2  0B89               	decfsz	9,f
  6827  05C3  2DBF               	goto	u3465
  6828  05C4  0836               	movf	___ftdiv@f2+2,w
  6829  05C5  0239               	subwf	___ftdiv@f1+2,w
  6830  05C6  1D03               	skipz
  6831  05C7  2DCE               	goto	u3475
  6832  05C8  0835               	movf	___ftdiv@f2+1,w
  6833  05C9  0238               	subwf	___ftdiv@f1+1,w
  6834  05CA  1D03               	skipz
  6835  05CB  2DCE               	goto	u3475
  6836  05CC  0834               	movf	___ftdiv@f2,w
  6837  05CD  0237               	subwf	___ftdiv@f1,w
  6838  05CE                     u3475:	
  6839  05CE  1C03               	skipc
  6840  05CF  2DD7               	goto	l3397
  6841  05D0  0834               	movf	___ftdiv@f2,w
  6842  05D1  02B7               	subwf	___ftdiv@f1,f
  6843  05D2  0835               	movf	___ftdiv@f2+1,w
  6844  05D3  3BB8               	subwfb	___ftdiv@f1+1,f
  6845  05D4  0836               	movf	___ftdiv@f2+2,w
  6846  05D5  3BB9               	subwfb	___ftdiv@f1+2,f
  6847  05D6  143F               	bsf	___ftdiv@f3,0
  6848  05D7                     l3397:	
  6849  05D7  3001               	movlw	1
  6850  05D8                     u3485:	
  6851  05D8  35B7               	lslf	___ftdiv@f1,f
  6852  05D9  0DB8               	rlf	___ftdiv@f1+1,f
  6853  05DA  0DB9               	rlf	___ftdiv@f1+2,f
  6854  05DB  0B89               	decfsz	9,f
  6855  05DC  2DD8               	goto	u3485
  6856  05DD  3001               	movlw	1
  6857  05DE  02BE               	subwf	___ftdiv@cntr,f
  6858  05DF  1D03               	btfss	3,2
  6859  05E0  2DBE               	goto	l3389
  6860  05E1  083F               	movf	___ftdiv@f3,w
  6861  05E2  00F1               	movwf	___ftpack@arg
  6862  05E3  0840               	movf	___ftdiv@f3+1,w
  6863  05E4  00F2               	movwf	___ftpack@arg+1
  6864  05E5  0841               	movf	___ftdiv@f3+2,w
  6865  05E6  00F3               	movwf	___ftpack@arg+2
  6866  05E7  0842               	movf	___ftdiv@exp,w
  6867  05E8  00BA               	movwf	??___ftdiv
  6868  05E9  083A               	movf	??___ftdiv,w
  6869  05EA  00F4               	movwf	___ftpack@exp
  6870  05EB  0843               	movf	___ftdiv@sign,w
  6871  05EC  00BB               	movwf	??___ftdiv+1
  6872  05ED  083B               	movf	??___ftdiv+1,w
  6873  05EE  00F5               	movwf	___ftpack@sign
  6874  05EF  3186  26E0         	fcall	___ftpack
  6875  05F1  0871               	movf	?___ftpack,w
  6876  05F2  0020               	movlb	0	; select bank0
  6877  05F3  00B4               	movwf	?___ftdiv
  6878  05F4  0872               	movf	?___ftpack+1,w
  6879  05F5  00B5               	movwf	?___ftdiv+1
  6880  05F6  0873               	movf	?___ftpack+2,w
  6881  05F7  00B6               	movwf	?___ftdiv+2
  6882  05F8  0008               	return
  6883  05F9                     __end_of___ftdiv:	
  6884                           
  6885                           	psect	text32
  6886  06E0                     __ptext32:	
  6887 ;; *************** function ___ftpack *****************
  6888 ;; Defined at:
  6889 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  6890 ;; Parameters:    Size  Location     Type
  6891 ;;  arg             3    1[COMMON] unsigned um
  6892 ;;  exp             1    4[COMMON] unsigned char 
  6893 ;;  sign            1    5[COMMON] unsigned char 
  6894 ;; Auto vars:     Size  Location     Type
  6895 ;;		None
  6896 ;; Return value:  Size  Location     Type
  6897 ;;                  3    1[COMMON] float 
  6898 ;; Registers used:
  6899 ;;		wreg, status,2, status,0
  6900 ;; Tracked objects:
  6901 ;;		On entry : 0/0
  6902 ;;		On exit  : 0/0
  6903 ;;		Unchanged: 0/0
  6904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6905 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6906 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6907 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6908 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6909 ;;Total ram usage:        8 bytes
  6910 ;; Hardware stack levels used:    1
  6911 ;; Hardware stack levels required when called:    2
  6912 ;; This function calls:
  6913 ;;		Nothing
  6914 ;; This function is called by:
  6915 ;;		___ftadd
  6916 ;;		___ftdiv
  6917 ;;		___ftmul
  6918 ;;		___lltoft
  6919 ;;		___lwtoft
  6920 ;; This function uses a non-reentrant model
  6921 ;;
  6922                           
  6923                           
  6924                           ;psect for function ___ftpack
  6925  06E0                     ___ftpack:	
  6926                           
  6927                           ;incstack = 0
  6928                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  6929  06E0  0874               	movf	___ftpack@exp,w
  6930  06E1  1903               	btfsc	3,2
  6931  06E2  2EE8               	goto	l3129
  6932  06E3  0873               	movf	___ftpack@arg+2,w
  6933  06E4  0472               	iorwf	___ftpack@arg+1,w
  6934  06E5  0471               	iorwf	___ftpack@arg,w
  6935  06E6  1D03               	skipz
  6936  06E7  2EF9               	goto	l3135
  6937  06E8                     l3129:	
  6938  06E8  3000               	movlw	0
  6939  06E9  00F1               	movwf	?___ftpack
  6940  06EA  3000               	movlw	0
  6941  06EB  00F2               	movwf	?___ftpack+1
  6942  06EC  3000               	movlw	0
  6943  06ED  00F3               	movwf	?___ftpack+2
  6944  06EE  0008               	return
  6945  06EF                     l3133:	
  6946  06EF  3001               	movlw	1
  6947  06F0  00F6               	movwf	??___ftpack
  6948  06F1  0876               	movf	??___ftpack,w
  6949  06F2  07F4               	addwf	___ftpack@exp,f
  6950  06F3  3001               	movlw	1
  6951  06F4                     u2885:	
  6952  06F4  36F3               	lsrf	___ftpack@arg+2,f
  6953  06F5  0CF2               	rrf	___ftpack@arg+1,f
  6954  06F6  0CF1               	rrf	___ftpack@arg,f
  6955  06F7  0B89               	decfsz	9,f
  6956  06F8  2EF4               	goto	u2885
  6957  06F9                     l3135:	
  6958  06F9  30FE               	movlw	254
  6959  06FA  0573               	andwf	___ftpack@arg+2,w
  6960  06FB  1903               	btfsc	3,2
  6961  06FC  2F12               	goto	l847
  6962  06FD  2EEF               	goto	l3133
  6963  06FE                     l3137:	
  6964  06FE  3001               	movlw	1
  6965  06FF  00F6               	movwf	??___ftpack
  6966  0700  0876               	movf	??___ftpack,w
  6967  0701  07F4               	addwf	___ftpack@exp,f
  6968  0702  3001               	movlw	1
  6969  0703  07F1               	addwf	___ftpack@arg,f
  6970  0704  3000               	movlw	0
  6971  0705  1803               	skipnc
  6972  0706  3001               	movlw	1
  6973  0707  07F2               	addwf	___ftpack@arg+1,f
  6974  0708  3000               	movlw	0
  6975  0709  1803               	skipnc
  6976  070A  3001               	movlw	1
  6977  070B  07F3               	addwf	___ftpack@arg+2,f
  6978  070C  3001               	movlw	1
  6979  070D                     u2905:	
  6980  070D  36F3               	lsrf	___ftpack@arg+2,f
  6981  070E  0CF2               	rrf	___ftpack@arg+1,f
  6982  070F  0CF1               	rrf	___ftpack@arg,f
  6983  0710  0B89               	decfsz	9,f
  6984  0711  2F0D               	goto	u2905
  6985  0712                     l847:	
  6986  0712  30FF               	movlw	255
  6987  0713  0573               	andwf	___ftpack@arg+2,w
  6988  0714  1903               	btfsc	3,2
  6989  0715  2F23               	goto	l3145
  6990  0716  2EFE               	goto	l3137
  6991  0717                     l3147:	
  6992  0717  3002               	movlw	2
  6993  0718  0274               	subwf	___ftpack@exp,w
  6994  0719  1C03               	btfss	3,0
  6995  071A  2F25               	goto	l854
  6996  071B  3001               	movlw	1
  6997  071C  02F4               	subwf	___ftpack@exp,f
  6998  071D  3001               	movlw	1
  6999  071E                     u2925:	
  7000  071E  35F1               	lslf	___ftpack@arg,f
  7001  071F  0DF2               	rlf	___ftpack@arg+1,f
  7002  0720  0DF3               	rlf	___ftpack@arg+2,f
  7003  0721  0B89               	decfsz	9,f
  7004  0722  2F1E               	goto	u2925
  7005  0723                     l3145:	
  7006  0723  1FF2               	btfss	___ftpack@arg+1,7
  7007  0724  2F17               	goto	l3147
  7008  0725                     l854:	
  7009  0725  1874               	btfsc	___ftpack@exp,0
  7010  0726  2F2D               	goto	l855
  7011  0727  30FF               	movlw	255
  7012  0728  05F1               	andwf	___ftpack@arg,f
  7013  0729  307F               	movlw	127
  7014  072A  05F2               	andwf	___ftpack@arg+1,f
  7015  072B  30FF               	movlw	255
  7016  072C  05F3               	andwf	___ftpack@arg+2,f
  7017  072D                     l855:	
  7018  072D  1003               	clrc
  7019  072E  0CF4               	rrf	___ftpack@exp,f
  7020  072F  0874               	movf	___ftpack@exp,w
  7021  0730  00F6               	movwf	??___ftpack
  7022  0731  01F7               	clrf	??___ftpack+1
  7023  0732  01F8               	clrf	??___ftpack+2
  7024  0733  3010               	movlw	16
  7025  0734                     u2965:	
  7026  0734  35F6               	lslf	??___ftpack,f
  7027  0735  0DF7               	rlf	??___ftpack+1,f
  7028  0736  0DF8               	rlf	??___ftpack+2,f
  7029  0737  0B89               	decfsz	9,f
  7030  0738  2F34               	goto	u2965
  7031  0739  0876               	movf	??___ftpack,w
  7032  073A  04F1               	iorwf	___ftpack@arg,f
  7033  073B  0877               	movf	??___ftpack+1,w
  7034  073C  04F2               	iorwf	___ftpack@arg+1,f
  7035  073D  0878               	movf	??___ftpack+2,w
  7036  073E  04F3               	iorwf	___ftpack@arg+2,f
  7037  073F  0875               	movf	___ftpack@sign,w
  7038  0740  1903               	btfsc	3,2
  7039  0741  0008               	return
  7040  0742  17F3               	bsf	___ftpack@arg+2,7
  7041  0743  0008               	return
  7042  0744                     __end_of___ftpack:	
  7043                           
  7044                           	psect	text33
  7045  0EC8                     __ptext33:	
  7046 ;; *************** function _RTXSendRPgm *****************
  7047 ;; Defined at:
  7048 ;;		line 278 in file "RTX.c"
  7049 ;; Parameters:    Size  Location     Type
  7050 ;;		None
  7051 ;; Auto vars:     Size  Location     Type
  7052 ;;		None
  7053 ;; Return value:  Size  Location     Type
  7054 ;;		None               void
  7055 ;; Registers used:
  7056 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7057 ;; Tracked objects:
  7058 ;;		On entry : 0/0
  7059 ;;		On exit  : 0/0
  7060 ;;		Unchanged: 0/0
  7061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7064 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7065 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7066 ;;Total ram usage:        1 bytes
  7067 ;; Hardware stack levels used:    1
  7068 ;; Hardware stack levels required when called:    5
  7069 ;; This function calls:
  7070 ;;		_RTXSndPkt
  7071 ;; This function is called by:
  7072 ;;		_RTXReadPkt
  7073 ;; This function uses a non-reentrant model
  7074 ;;
  7075                           
  7076                           
  7077                           ;psect for function _RTXSendRPgm
  7078  0EC8                     _RTXSendRPgm:	
  7079                           
  7080                           ;RTX.c: 281: pktTx[ID_DEST]=pgm_cfg.baseId;
  7081                           
  7082                           ;incstack = 0
  7083                           ; Regs used in _RTXSendRPgm: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7084  0EC8  0021               	movlb	1	; select bank1
  7085  0EC9  084E               	movf	(_pgm_cfg^(0+128)+4),w
  7086  0ECA  0020               	movlb	0	; select bank0
  7087  0ECB  00A8               	movwf	??_RTXSendRPgm
  7088  0ECC  0828               	movf	??_RTXSendRPgm,w
  7089  0ECD  0021               	movlb	1	; select bank1
  7090  0ECE  00C0               	movwf	_pktTx^(0+128)
  7091                           
  7092                           ;RTX.c: 282: pktTx[ID_SOURCE]=pgm_cfg.sensId;
  7093  0ECF  084D               	movf	(_pgm_cfg^(0+128)+3),w
  7094  0ED0  0020               	movlb	0	; select bank0
  7095  0ED1  00A8               	movwf	??_RTXSendRPgm
  7096  0ED2  0828               	movf	??_RTXSendRPgm,w
  7097  0ED3  0021               	movlb	1	; select bank1
  7098  0ED4  00C1               	movwf	(_pktTx^(0+128)+1)
  7099                           
  7100                           ;RTX.c: 284: if(PORTBbits.RB5)
  7101  0ED5  0020               	movlb	0	; select bank0
  7102  0ED6  1E8D               	btfss	13,5	;volatile
  7103  0ED7  2EDC               	goto	l3563
  7104                           
  7105                           ;RTX.c: 285: pktTx[TYPE]=SENS_CURRGEN;
  7106  0ED8  0021               	movlb	1	; select bank1
  7107  0ED9  01C2               	clrf	(_pktTx^(0+128)+2)
  7108  0EDA  0AC2               	incf	(_pktTx^(0+128)+2),f
  7109  0EDB  2EE2               	goto	l520
  7110  0EDC                     l3563:	
  7111                           
  7112                           ;RTX.c: 286: else
  7113                           ;RTX.c: 287: pktTx[TYPE]=SENS_CURRCON;
  7114  0EDC  3002               	movlw	2
  7115  0EDD  0020               	movlb	0	; select bank0
  7116  0EDE  00A8               	movwf	??_RTXSendRPgm
  7117  0EDF  0828               	movf	??_RTXSendRPgm,w
  7118  0EE0  0021               	movlb	1	; select bank1
  7119  0EE1  00C2               	movwf	(_pktTx^(0+128)+2)
  7120  0EE2                     l520:	
  7121                           
  7122                           ;RTX.c: 288: pktTx[OP]=rPGM;
  7123  0EE2  3081               	movlw	129
  7124  0EE3  0020               	movlb	0	; select bank0
  7125  0EE4  00A8               	movwf	??_RTXSendRPgm
  7126  0EE5  0828               	movf	??_RTXSendRPgm,w
  7127  0EE6  0021               	movlb	1	; select bank1
  7128  0EE7  00C3               	movwf	(_pktTx^(0+128)+3)
  7129                           
  7130                           ;RTX.c: 289: pktTx[VAL]=0x00;
  7131  0EE8  01C4               	clrf	(_pktTx^(0+128)+4)
  7132                           
  7133                           ;RTX.c: 290: pktTx[VAL+1]=0x00;
  7134  0EE9  01C5               	clrf	(_pktTx^(0+128)+5)
  7135                           
  7136                           ;RTX.c: 291: pktTx[VAL+2]=0x00;
  7137  0EEA  01C6               	clrf	(_pktTx^(0+128)+6)
  7138                           
  7139                           ;RTX.c: 292: pktTx[BAT]=0x00;
  7140  0EEB  01C6               	clrf	(_pktTx^(0+128)+6)
  7141                           
  7142                           ;RTX.c: 293: pktTx[BAT+1]=0x00;
  7143  0EEC  01C7               	clrf	(_pktTx^(0+128)+7)
  7144                           
  7145                           ;RTX.c: 294: pktTx[BAT+2]=0x00;
  7146  0EED  01C8               	clrf	(_pktTx^(0+128)+8)
  7147                           
  7148                           ;RTX.c: 297: RTXSndPkt(pktTx,0x0A);
  7149  0EEE  300A               	movlw	10
  7150  0EEF  0020               	movlb	0	; select bank0
  7151  0EF0  00A8               	movwf	??_RTXSendRPgm
  7152  0EF1  0828               	movf	??_RTXSendRPgm,w
  7153  0EF2  00A3               	movwf	RTXSndPkt@len
  7154  0EF3  30C0               	movlw	(low (_pktTx| 0))& (0+255)
  7155  0EF4  318F  278C         	fcall	_RTXSndPkt
  7156  0EF6  0008               	return
  7157  0EF7                     __end_of_RTXSendRPgm:	
  7158                           
  7159                           	psect	text34
  7160  0F8C                     __ptext34:	
  7161 ;; *************** function _RTXSndPkt *****************
  7162 ;; Defined at:
  7163 ;;		line 122 in file "RTX.c"
  7164 ;; Parameters:    Size  Location     Type
  7165 ;;  src             1    wreg     PTR unsigned char 
  7166 ;;		 -> pktTx(10), 
  7167 ;;  len             1    3[BANK0 ] unsigned char 
  7168 ;; Auto vars:     Size  Location     Type
  7169 ;;  src             1    6[BANK0 ] PTR unsigned char 
  7170 ;;		 -> pktTx(10), 
  7171 ;;  numTxByte       1    7[BANK0 ] unsigned char 
  7172 ;;  numRxByte       1    5[BANK0 ] unsigned char 
  7173 ;;  sta             1    0        unsigned char 
  7174 ;; Return value:  Size  Location     Type
  7175 ;;		None               void
  7176 ;; Registers used:
  7177 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7178 ;; Tracked objects:
  7179 ;;		On entry : 0/0
  7180 ;;		On exit  : 0/0
  7181 ;;		Unchanged: 0/0
  7182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7183 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7184 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7185 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7186 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7187 ;;Total ram usage:        5 bytes
  7188 ;; Hardware stack levels used:    1
  7189 ;; Hardware stack levels required when called:    4
  7190 ;; This function calls:
  7191 ;;		_CC1Read
  7192 ;;		_CC1Strobe
  7193 ;;		_CC1Write
  7194 ;; This function is called by:
  7195 ;;		_RTXSendData
  7196 ;;		_RTXSendRPgm
  7197 ;; This function uses a non-reentrant model
  7198 ;;
  7199                           
  7200                           
  7201                           ;psect for function _RTXSndPkt
  7202  0F8C                     _RTXSndPkt:	
  7203                           
  7204                           ;incstack = 0
  7205                           ; Regs used in _RTXSndPkt: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7206                           ;RTXSndPkt@src stored from wreg
  7207  0F8C  0020               	movlb	0	; select bank0
  7208  0F8D  00A6               	movwf	RTXSndPkt@src
  7209                           
  7210                           ;RTX.c: 124: unsigned char sta,numRxByte,numTxByte;
  7211                           ;RTX.c: 134: CC1Strobe(SIDLE);
  7212  0F8E  3036               	movlw	54
  7213  0F8F  318B  23C0  318F   	fcall	_CC1Strobe
  7214                           
  7215                           ;RTX.c: 135: CC1Read(0x3B,(&(numRxByte)),1);
  7216  0F92  3025               	movlw	low RTXSndPkt@numRxByte
  7217  0F93  00F9               	movwf	CC1Read@dst
  7218  0F94  3000               	movlw	high RTXSndPkt@numRxByte
  7219  0F95  00FA               	movwf	CC1Read@dst+1
  7220  0F96  01FB               	clrf	CC1Read@len
  7221  0F97  0AFB               	incf	CC1Read@len,f
  7222  0F98  303B               	movlw	59
  7223  0F99  318D  2544  318F   	fcall	_CC1Read
  7224                           
  7225                           ;RTX.c: 136: CC1Read(0x3A,(&(numTxByte)),1);
  7226  0F9C  3027               	movlw	low RTXSndPkt@numTxByte
  7227  0F9D  00F9               	movwf	CC1Read@dst
  7228  0F9E  3000               	movlw	high RTXSndPkt@numTxByte
  7229  0F9F  00FA               	movwf	CC1Read@dst+1
  7230  0FA0  01FB               	clrf	CC1Read@len
  7231  0FA1  0AFB               	incf	CC1Read@len,f
  7232  0FA2  303A               	movlw	58
  7233  0FA3  318D  2544  318F   	fcall	_CC1Read
  7234                           
  7235                           ;RTX.c: 138: CC1Strobe(SFTX);
  7236  0FA6  303B               	movlw	59
  7237  0FA7  318B  23C0  318F   	fcall	_CC1Strobe
  7238                           
  7239                           ;RTX.c: 139: CC1Read(0x3A,(&(numTxByte)),1);
  7240  0FAA  3027               	movlw	low RTXSndPkt@numTxByte
  7241  0FAB  00F9               	movwf	CC1Read@dst
  7242  0FAC  3000               	movlw	high RTXSndPkt@numTxByte
  7243  0FAD  00FA               	movwf	CC1Read@dst+1
  7244  0FAE  01FB               	clrf	CC1Read@len
  7245  0FAF  0AFB               	incf	CC1Read@len,f
  7246  0FB0  303A               	movlw	58
  7247  0FB1  318D  2544  318F   	fcall	_CC1Read
  7248                           
  7249                           ;RTX.c: 141: CC1Write(0x3F,src,len);
  7250  0FB4  0020               	movlb	0	; select bank0
  7251  0FB5  0826               	movf	RTXSndPkt@src,w
  7252  0FB6  00F7               	movwf	CC1Write@src
  7253  0FB7  3000               	movlw	0
  7254  0FB8  00F8               	movwf	CC1Write@src+1
  7255  0FB9  0823               	movf	RTXSndPkt@len,w
  7256  0FBA  00A4               	movwf	??_RTXSndPkt
  7257  0FBB  0824               	movf	??_RTXSndPkt,w
  7258  0FBC  00F9               	movwf	CC1Write@len
  7259  0FBD  303F               	movlw	63
  7260  0FBE  318D  2523  318F   	fcall	_CC1Write
  7261                           
  7262                           ;RTX.c: 143: CC1Strobe(STX);
  7263  0FC1  3035               	movlw	53
  7264  0FC2  318B  23C0         	fcall	_CC1Strobe
  7265  0FC4  0008               	return
  7266  0FC5                     __end_of_RTXSndPkt:	
  7267                           
  7268                           	psect	text35
  7269  0D23                     __ptext35:	
  7270 ;; *************** function _CC1Write *****************
  7271 ;; Defined at:
  7272 ;;		line 128 in file "CC1.c"
  7273 ;; Parameters:    Size  Location     Type
  7274 ;;  addr            1    wreg     unsigned char 
  7275 ;;  src             2    7[COMMON] PTR unsigned char 
  7276 ;;		 -> pktTx(10), cc1PaTable(8), cc1InitVal(47), 
  7277 ;;  len             1    9[COMMON] unsigned char 
  7278 ;; Auto vars:     Size  Location     Type
  7279 ;;  addr            1    0[BANK0 ] unsigned char 
  7280 ;;  cc1Addr         1    1[BANK0 ] unsigned char 
  7281 ;; Return value:  Size  Location     Type
  7282 ;;		None               void
  7283 ;; Registers used:
  7284 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7285 ;; Tracked objects:
  7286 ;;		On entry : 0/0
  7287 ;;		On exit  : 0/0
  7288 ;;		Unchanged: 0/0
  7289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7290 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7291 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7292 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7293 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7294 ;;Total ram usage:        6 bytes
  7295 ;; Hardware stack levels used:    1
  7296 ;; Hardware stack levels required when called:    3
  7297 ;; This function calls:
  7298 ;;		_SPIWrite
  7299 ;; This function is called by:
  7300 ;;		_CC1LoadREG
  7301 ;;		_RTXSndPkt
  7302 ;; This function uses a non-reentrant model
  7303 ;;
  7304                           
  7305                           
  7306                           ;psect for function _CC1Write
  7307  0D23                     _CC1Write:	
  7308                           
  7309                           ;incstack = 0
  7310                           ; Regs used in _CC1Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7311                           ;CC1Write@addr stored from wreg
  7312  0D23  0020               	movlb	0	; select bank0
  7313  0D24  00A0               	movwf	CC1Write@addr
  7314                           
  7315                           ;CC1.c: 130: unsigned char cc1Addr;
  7316                           ;CC1.c: 133: LATAbits.LATA5=0;
  7317  0D25  0022               	movlb	2	; select bank2
  7318  0D26  128C               	bcf	12,5	;volatile
  7319                           
  7320                           ;CC1.c: 136: cc1Addr=((addr&0b00111111)|0b01000000);
  7321  0D27  0020               	movlb	0	; select bank0
  7322  0D28  0820               	movf	CC1Write@addr,w
  7323  0D29  393F               	andlw	63
  7324  0D2A  3840               	iorlw	64
  7325  0D2B  00FA               	movwf	??_CC1Write
  7326  0D2C  087A               	movf	??_CC1Write,w
  7327  0D2D  00A1               	movwf	CC1Write@cc1Addr
  7328                           
  7329                           ;CC1.c: 137: SPIWrite((&(cc1Addr)),1);
  7330  0D2E  3021               	movlw	low CC1Write@cc1Addr
  7331  0D2F  00F1               	movwf	SPIWrite@srcPtr
  7332  0D30  3000               	movlw	high CC1Write@cc1Addr
  7333  0D31  00F2               	movwf	SPIWrite@srcPtr+1
  7334  0D32  01F3               	clrf	SPIWrite@len
  7335  0D33  0AF3               	incf	SPIWrite@len,f
  7336  0D34  318C  2470  318D   	fcall	_SPIWrite
  7337                           
  7338                           ;CC1.c: 140: SPIWrite(src,len);
  7339  0D37  0877               	movf	CC1Write@src,w
  7340  0D38  00F1               	movwf	SPIWrite@srcPtr
  7341  0D39  0878               	movf	CC1Write@src+1,w
  7342  0D3A  00F2               	movwf	SPIWrite@srcPtr+1
  7343  0D3B  0879               	movf	CC1Write@len,w
  7344  0D3C  00FA               	movwf	??_CC1Write
  7345  0D3D  087A               	movf	??_CC1Write,w
  7346  0D3E  00F3               	movwf	SPIWrite@len
  7347  0D3F  318C  2470         	fcall	_SPIWrite
  7348                           
  7349                           ;CC1.c: 143: LATAbits.LATA5=1;
  7350  0D41  0022               	movlb	2	; select bank2
  7351  0D42  168C               	bsf	12,5	;volatile
  7352  0D43  0008               	return
  7353  0D44                     __end_of_CC1Write:	
  7354                           
  7355                           	psect	text36
  7356  0BC0                     __ptext36:	
  7357 ;; *************** function _CC1Strobe *****************
  7358 ;; Defined at:
  7359 ;;		line 95 in file "CC1.c"
  7360 ;; Parameters:    Size  Location     Type
  7361 ;;  e_stb           1    wreg     enum E1836
  7362 ;; Auto vars:     Size  Location     Type
  7363 ;;  e_stb           1    8[COMMON] enum E1836
  7364 ;;  cc1Stb          1    9[COMMON] unsigned char 
  7365 ;;  i               1    0        unsigned char 
  7366 ;; Return value:  Size  Location     Type
  7367 ;;		None               void
  7368 ;; Registers used:
  7369 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7370 ;; Tracked objects:
  7371 ;;		On entry : 0/0
  7372 ;;		On exit  : 0/0
  7373 ;;		Unchanged: 0/0
  7374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7375 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7376 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7377 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7378 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7379 ;;Total ram usage:        3 bytes
  7380 ;; Hardware stack levels used:    1
  7381 ;; Hardware stack levels required when called:    3
  7382 ;; This function calls:
  7383 ;;		_SPIWrite
  7384 ;; This function is called by:
  7385 ;;		_CC1Init
  7386 ;;		_CC1Sleep
  7387 ;;		_RTXInit
  7388 ;;		_RTXSndPkt
  7389 ;;		_RTXReadPkt
  7390 ;; This function uses a non-reentrant model
  7391 ;;
  7392                           
  7393                           
  7394                           ;psect for function _CC1Strobe
  7395  0BC0                     _CC1Strobe:	
  7396                           
  7397                           ;incstack = 0
  7398                           ; Regs used in _CC1Strobe: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7399                           ;CC1Strobe@e_stb stored from wreg
  7400  0BC0  00F8               	movwf	CC1Strobe@e_stb
  7401                           
  7402                           ;CC1.c: 97: unsigned char cc1Stb,i;
  7403                           ;CC1.c: 100: LATAbits.LATA5=0;
  7404  0BC1  0022               	movlb	2	; select bank2
  7405  0BC2  128C               	bcf	12,5	;volatile
  7406                           
  7407                           ;CC1.c: 103: cc1Stb=((e_stb&0b00111111)|0b10000000);
  7408  0BC3  0878               	movf	CC1Strobe@e_stb,w
  7409  0BC4  393F               	andlw	63
  7410  0BC5  3880               	iorlw	128
  7411  0BC6  00F7               	movwf	??_CC1Strobe
  7412  0BC7  0877               	movf	??_CC1Strobe,w
  7413  0BC8  00F9               	movwf	CC1Strobe@cc1Stb
  7414                           
  7415                           ;CC1.c: 104: SPIWrite((&(cc1Stb)),1);
  7416  0BC9  3079               	movlw	low CC1Strobe@cc1Stb
  7417  0BCA  00F1               	movwf	SPIWrite@srcPtr
  7418  0BCB  3000               	movlw	high CC1Strobe@cc1Stb
  7419  0BCC  00F2               	movwf	SPIWrite@srcPtr+1
  7420  0BCD  01F3               	clrf	SPIWrite@len
  7421  0BCE  0AF3               	incf	SPIWrite@len,f
  7422  0BCF  318C  2470         	fcall	_SPIWrite
  7423                           
  7424                           ;CC1.c: 107: LATAbits.LATA5=1;
  7425  0BD1  0022               	movlb	2	; select bank2
  7426  0BD2  168C               	bsf	12,5	;volatile
  7427  0BD3  0008               	return
  7428  0BD4                     __end_of_CC1Strobe:	
  7429                           
  7430                           	psect	text37
  7431  0B47                     __ptext37:	
  7432 ;; *************** function _RTXRcvPkt *****************
  7433 ;; Defined at:
  7434 ;;		line 146 in file "RTX.c"
  7435 ;; Parameters:    Size  Location     Type
  7436 ;;  dst             1    wreg     PTR unsigned char 
  7437 ;;		 -> pktRx(10), 
  7438 ;;  len             1    3[BANK0 ] unsigned char 
  7439 ;; Auto vars:     Size  Location     Type
  7440 ;;  dst             1    5[BANK0 ] PTR unsigned char 
  7441 ;;		 -> pktRx(10), 
  7442 ;; Return value:  Size  Location     Type
  7443 ;;		None               void
  7444 ;; Registers used:
  7445 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7446 ;; Tracked objects:
  7447 ;;		On entry : 0/0
  7448 ;;		On exit  : 0/0
  7449 ;;		Unchanged: 0/0
  7450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7451 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7452 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7453 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7454 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7455 ;;Total ram usage:        3 bytes
  7456 ;; Hardware stack levels used:    1
  7457 ;; Hardware stack levels required when called:    4
  7458 ;; This function calls:
  7459 ;;		_CC1Read
  7460 ;; This function is called by:
  7461 ;;		_RTXReadPkt
  7462 ;; This function uses a non-reentrant model
  7463 ;;
  7464                           
  7465                           
  7466                           ;psect for function _RTXRcvPkt
  7467  0B47                     _RTXRcvPkt:	
  7468                           
  7469                           ;incstack = 0
  7470                           ; Regs used in _RTXRcvPkt: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7471                           ;RTXRcvPkt@dst stored from wreg
  7472  0B47  0020               	movlb	0	; select bank0
  7473  0B48  00A5               	movwf	RTXRcvPkt@dst
  7474                           
  7475                           ;RTX.c: 149: CC1Read(0x3F,dst,len);
  7476  0B49  0825               	movf	RTXRcvPkt@dst,w
  7477  0B4A  00F9               	movwf	CC1Read@dst
  7478  0B4B  3000               	movlw	0
  7479  0B4C  00FA               	movwf	CC1Read@dst+1
  7480  0B4D  0823               	movf	RTXRcvPkt@len,w
  7481  0B4E  00A4               	movwf	??_RTXRcvPkt
  7482  0B4F  0824               	movf	??_RTXRcvPkt,w
  7483  0B50  00FB               	movwf	CC1Read@len
  7484  0B51  303F               	movlw	63
  7485  0B52  318D  2544         	fcall	_CC1Read
  7486  0B54  0008               	return
  7487  0B55                     __end_of_RTXRcvPkt:	
  7488                           
  7489                           	psect	text38
  7490  0D44                     __ptext38:	
  7491 ;; *************** function _CC1Read *****************
  7492 ;; Defined at:
  7493 ;;		line 110 in file "CC1.c"
  7494 ;; Parameters:    Size  Location     Type
  7495 ;;  addr            1    wreg     unsigned char 
  7496 ;;  dst             2    9[COMMON] PTR unsigned char 
  7497 ;;		 -> pktRx(10), RTXReadPkt@numRxByte(1), RTXSndPkt@numTxByte(1), RTXSndPkt@numRxByte(1), 
  7498 ;;		 -> cc1InitVal_tmp(46), 
  7499 ;;  len             1   11[COMMON] unsigned char 
  7500 ;; Auto vars:     Size  Location     Type
  7501 ;;  addr            1    1[BANK0 ] unsigned char 
  7502 ;;  cc1Addr         1    2[BANK0 ] unsigned char 
  7503 ;; Return value:  Size  Location     Type
  7504 ;;		None               void
  7505 ;; Registers used:
  7506 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7507 ;; Tracked objects:
  7508 ;;		On entry : 0/0
  7509 ;;		On exit  : 0/0
  7510 ;;		Unchanged: 0/0
  7511 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7512 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7513 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7514 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7515 ;;      Totals:         3       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7516 ;;Total ram usage:        6 bytes
  7517 ;; Hardware stack levels used:    1
  7518 ;; Hardware stack levels required when called:    3
  7519 ;; This function calls:
  7520 ;;		_SPIRead
  7521 ;;		_SPIWrite
  7522 ;; This function is called by:
  7523 ;;		_CC1LoadREG
  7524 ;;		_RTXSndPkt
  7525 ;;		_RTXRcvPkt
  7526 ;;		_RTXReadPkt
  7527 ;; This function uses a non-reentrant model
  7528 ;;
  7529                           
  7530                           
  7531                           ;psect for function _CC1Read
  7532  0D44                     _CC1Read:	
  7533                           
  7534                           ;incstack = 0
  7535                           ; Regs used in _CC1Read: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7536                           ;CC1Read@addr stored from wreg
  7537  0D44  0020               	movlb	0	; select bank0
  7538  0D45  00A1               	movwf	CC1Read@addr
  7539                           
  7540                           ;CC1.c: 112: unsigned char cc1Addr;
  7541                           ;CC1.c: 115: LATAbits.LATA5=0;
  7542  0D46  0022               	movlb	2	; select bank2
  7543  0D47  128C               	bcf	12,5	;volatile
  7544                           
  7545                           ;CC1.c: 118: cc1Addr=((addr&0b00111111)|0b11000000);
  7546  0D48  0020               	movlb	0	; select bank0
  7547  0D49  0821               	movf	CC1Read@addr,w
  7548  0D4A  393F               	andlw	63
  7549  0D4B  38C0               	iorlw	192
  7550  0D4C  00A0               	movwf	??_CC1Read
  7551  0D4D  0820               	movf	??_CC1Read,w
  7552  0D4E  00A2               	movwf	CC1Read@cc1Addr
  7553                           
  7554                           ;CC1.c: 119: SPIWrite((&(cc1Addr)),1);
  7555  0D4F  3022               	movlw	low CC1Read@cc1Addr
  7556  0D50  00F1               	movwf	SPIWrite@srcPtr
  7557  0D51  3000               	movlw	high CC1Read@cc1Addr
  7558  0D52  00F2               	movwf	SPIWrite@srcPtr+1
  7559  0D53  01F3               	clrf	SPIWrite@len
  7560  0D54  0AF3               	incf	SPIWrite@len,f
  7561  0D55  318C  2470  318D   	fcall	_SPIWrite
  7562                           
  7563                           ;CC1.c: 122: SPIRead(dst,len);
  7564  0D58  0879               	movf	CC1Read@dst,w
  7565  0D59  00F1               	movwf	SPIRead@dstPtr
  7566  0D5A  087A               	movf	CC1Read@dst+1,w
  7567  0D5B  00F2               	movwf	SPIRead@dstPtr+1
  7568  0D5C  087B               	movf	CC1Read@len,w
  7569  0D5D  0020               	movlb	0	; select bank0
  7570  0D5E  00A0               	movwf	??_CC1Read
  7571  0D5F  0820               	movf	??_CC1Read,w
  7572  0D60  00F3               	movwf	SPIRead@len
  7573  0D61  318D  2566         	fcall	_SPIRead
  7574                           
  7575                           ;CC1.c: 125: LATAbits.LATA5=1;
  7576  0D63  0022               	movlb	2	; select bank2
  7577  0D64  168C               	bsf	12,5	;volatile
  7578  0D65  0008               	return
  7579  0D66                     __end_of_CC1Read:	
  7580                           
  7581                           	psect	text39
  7582  0C70                     __ptext39:	
  7583 ;; *************** function _SPIWrite *****************
  7584 ;; Defined at:
  7585 ;;		line 39 in file "SPI.c"
  7586 ;; Parameters:    Size  Location     Type
  7587 ;;  srcPtr          2    1[COMMON] PTR unsigned char 
  7588 ;;		 -> pktTx(10), cc1PaTable(8), cc1InitVal(47), CC1Write@cc1Addr(1), 
  7589 ;;		 -> CC1Read@cc1Addr(1), CC1Strobe@cc1Stb(1), 
  7590 ;;  len             1    3[COMMON] unsigned char 
  7591 ;; Auto vars:     Size  Location     Type
  7592 ;;  i               1    6[COMMON] unsigned char 
  7593 ;; Return value:  Size  Location     Type
  7594 ;;		None               void
  7595 ;; Registers used:
  7596 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7597 ;; Tracked objects:
  7598 ;;		On entry : 0/0
  7599 ;;		On exit  : 0/0
  7600 ;;		Unchanged: 0/0
  7601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7602 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7603 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7604 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7605 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7606 ;;Total ram usage:        6 bytes
  7607 ;; Hardware stack levels used:    1
  7608 ;; Hardware stack levels required when called:    2
  7609 ;; This function calls:
  7610 ;;		Nothing
  7611 ;; This function is called by:
  7612 ;;		_CC1Strobe
  7613 ;;		_CC1Read
  7614 ;;		_CC1Write
  7615 ;; This function uses a non-reentrant model
  7616 ;;
  7617                           
  7618                           
  7619                           ;psect for function _SPIWrite
  7620  0C70                     _SPIWrite:	
  7621                           
  7622                           ;SPI.c: 41: unsigned char i;
  7623                           ;SPI.c: 43: for(i=0;i<len;i++)
  7624                           
  7625                           ;incstack = 0
  7626                           ; Regs used in _SPIWrite: [wreg+fsr1l+fsr1h+status,2+status,0]
  7627  0C70  01F6               	clrf	SPIWrite@i
  7628  0C71                     l3173:	
  7629  0C71  0873               	movf	SPIWrite@len,w
  7630  0C72  0276               	subwf	SPIWrite@i,w
  7631  0C73  1803               	btfsc	3,0
  7632  0C74  0008               	return
  7633                           
  7634                           ;SPI.c: 44: {
  7635                           ;SPI.c: 45: PIR1bits.SSPIF=0;
  7636  0C75  0020               	movlb	0	; select bank0
  7637  0C76  1191               	bcf	17,3	;volatile
  7638                           
  7639                           ;SPI.c: 46: SSPBUF=(*(srcPtr+i));
  7640  0C77  0876               	movf	SPIWrite@i,w
  7641  0C78  00F4               	movwf	??_SPIWrite
  7642  0C79  01F5               	clrf	??_SPIWrite+1
  7643  0C7A  0874               	movf	??_SPIWrite,w
  7644  0C7B  0771               	addwf	SPIWrite@srcPtr,w
  7645  0C7C  0086               	movwf	6
  7646  0C7D  0875               	movf	??_SPIWrite+1,w
  7647  0C7E  3D72               	addwfc	SPIWrite@srcPtr+1,w
  7648  0C7F  0087               	movwf	7
  7649  0C80  0801               	movf	1,w
  7650  0C81  0024               	movlb	4	; select bank4
  7651  0C82  0091               	movwf	17	;volatile
  7652  0C83                     l76:	
  7653                           ;SPI.c: 47: while(!(PIR1bits.SSPIF))
  7654                           
  7655  0C83  0020               	movlb	0	; select bank0
  7656  0C84  1991               	btfsc	17,3	;volatile
  7657  0C85  2C88               	goto	l3171
  7658                           
  7659                           ;SPI.c: 48: __nop();
  7660  0C86  0000               	nop
  7661  0C87  2C83               	goto	l76
  7662  0C88                     l3171:	
  7663  0C88  3001               	movlw	1
  7664  0C89  00F4               	movwf	??_SPIWrite
  7665  0C8A  0874               	movf	??_SPIWrite,w
  7666  0C8B  07F6               	addwf	SPIWrite@i,f
  7667  0C8C  2C71               	goto	l3173
  7668  0C8D                     __end_of_SPIWrite:	
  7669                           
  7670                           	psect	text40
  7671  0D66                     __ptext40:	
  7672 ;; *************** function _SPIRead *****************
  7673 ;; Defined at:
  7674 ;;		line 25 in file "SPI.c"
  7675 ;; Parameters:    Size  Location     Type
  7676 ;;  dstPtr          2    1[COMMON] PTR unsigned char 
  7677 ;;		 -> pktRx(10), RTXReadPkt@numRxByte(1), RTXSndPkt@numTxByte(1), RTXSndPkt@numRxByte(1), 
  7678 ;;		 -> cc1InitVal_tmp(46), 
  7679 ;;  len             1    3[COMMON] unsigned char 
  7680 ;; Auto vars:     Size  Location     Type
  7681 ;;  i               1    8[COMMON] unsigned char 
  7682 ;; Return value:  Size  Location     Type
  7683 ;;		None               void
  7684 ;; Registers used:
  7685 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7686 ;; Tracked objects:
  7687 ;;		On entry : 0/0
  7688 ;;		On exit  : 0/0
  7689 ;;		Unchanged: 0/0
  7690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7691 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7692 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7693 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7694 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7695 ;;Total ram usage:        8 bytes
  7696 ;; Hardware stack levels used:    1
  7697 ;; Hardware stack levels required when called:    2
  7698 ;; This function calls:
  7699 ;;		Nothing
  7700 ;; This function is called by:
  7701 ;;		_CC1Read
  7702 ;; This function uses a non-reentrant model
  7703 ;;
  7704                           
  7705                           
  7706                           ;psect for function _SPIRead
  7707  0D66                     _SPIRead:	
  7708                           
  7709                           ;SPI.c: 27: unsigned char i;
  7710                           ;SPI.c: 29: for(i=0;i<len;i++)
  7711                           
  7712                           ;incstack = 0
  7713                           ; Regs used in _SPIRead: [wreg+fsr1l+fsr1h+status,2+status,0]
  7714  0D66  01F8               	clrf	SPIRead@i
  7715  0D67                     l3165:	
  7716  0D67  0873               	movf	SPIRead@len,w
  7717  0D68  0278               	subwf	SPIRead@i,w
  7718  0D69  1803               	btfsc	3,0
  7719  0D6A  0008               	return
  7720                           
  7721                           ;SPI.c: 30: {
  7722                           ;SPI.c: 31: PIR1bits.SSPIF=0;
  7723  0D6B  0020               	movlb	0	; select bank0
  7724  0D6C  1191               	bcf	17,3	;volatile
  7725                           
  7726                           ;SPI.c: 32: SSPBUF=0xFF;
  7727  0D6D  30FF               	movlw	255
  7728  0D6E  0024               	movlb	4	; select bank4
  7729  0D6F  0091               	movwf	17	;volatile
  7730  0D70                     l67:	
  7731                           ;SPI.c: 33: while(!(PIR1bits.SSPIF))
  7732                           
  7733  0D70  0020               	movlb	0	; select bank0
  7734  0D71  1991               	btfsc	17,3	;volatile
  7735  0D72  2D75               	goto	l3161
  7736                           
  7737                           ;SPI.c: 34: __nop();
  7738  0D73  0000               	nop
  7739  0D74  2D70               	goto	l67
  7740  0D75                     l3161:	
  7741                           
  7742                           ;SPI.c: 35: (*(dstPtr+i))=SSPBUF;
  7743  0D75  0878               	movf	SPIRead@i,w
  7744  0D76  00F4               	movwf	??_SPIRead
  7745  0D77  01F5               	clrf	??_SPIRead+1
  7746  0D78  0874               	movf	??_SPIRead,w
  7747  0D79  0771               	addwf	SPIRead@dstPtr,w
  7748  0D7A  00F6               	movwf	??_SPIRead+2
  7749  0D7B  0875               	movf	??_SPIRead+1,w
  7750  0D7C  3D72               	addwfc	SPIRead@dstPtr+1,w
  7751  0D7D  00F7               	movwf	??_SPIRead+3
  7752  0D7E  0876               	movf	??_SPIRead+2,w
  7753  0D7F  0086               	movwf	6
  7754  0D80  0877               	movf	??_SPIRead+3,w
  7755  0D81  0087               	movwf	7
  7756  0D82  0024               	movlb	4	; select bank4
  7757  0D83  0811               	movf	17,w	;volatile
  7758  0D84  0081               	movwf	1
  7759  0D85  3001               	movlw	1
  7760  0D86  00F4               	movwf	??_SPIRead
  7761  0D87  0874               	movf	??_SPIRead,w
  7762  0D88  07F8               	addwf	SPIRead@i,f
  7763  0D89  2D67               	goto	l3165
  7764  0D8A                     __end_of_SPIRead:	
  7765                           
  7766                           	psect	text41
  7767  0CAB                     __ptext41:	
  7768 ;; *************** function _LEDNormalFlash *****************
  7769 ;; Defined at:
  7770 ;;		line 24 in file "LED.c"
  7771 ;; Parameters:    Size  Location     Type
  7772 ;;  num             1    wreg     unsigned char 
  7773 ;; Auto vars:     Size  Location     Type
  7774 ;;  num             1    8[COMMON] unsigned char 
  7775 ;;  i               1    9[COMMON] unsigned char 
  7776 ;; Return value:  Size  Location     Type
  7777 ;;		None               void
  7778 ;; Registers used:
  7779 ;;		wreg, status,2, status,0, pclath, cstack
  7780 ;; Tracked objects:
  7781 ;;		On entry : 0/0
  7782 ;;		On exit  : 0/0
  7783 ;;		Unchanged: 0/0
  7784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7786 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7787 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7788 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7789 ;;Total ram usage:        3 bytes
  7790 ;; Hardware stack levels used:    1
  7791 ;; Hardware stack levels required when called:    3
  7792 ;; This function calls:
  7793 ;;		_DLYDelay_ms
  7794 ;; This function is called by:
  7795 ;;		_PGMSelLong
  7796 ;;		_RTXReadPkt
  7797 ;; This function uses a non-reentrant model
  7798 ;;
  7799                           
  7800                           
  7801                           ;psect for function _LEDNormalFlash
  7802  0CAB                     _LEDNormalFlash:	
  7803                           
  7804                           ;incstack = 0
  7805                           ; Regs used in _LEDNormalFlash: [wreg+status,2+status,0+pclath+cstack]
  7806                           ;LEDNormalFlash@num stored from wreg
  7807  0CAB  00F8               	movwf	LEDNormalFlash@num
  7808                           
  7809                           ;LED.c: 26: unsigned char i;
  7810                           ;LED.c: 28: for(i=0;i<num;i++)
  7811  0CAC  01F9               	clrf	LEDNormalFlash@i
  7812  0CAD                     l2679:	
  7813  0CAD  0878               	movf	LEDNormalFlash@num,w
  7814  0CAE  0279               	subwf	LEDNormalFlash@i,w
  7815  0CAF  1803               	btfsc	3,0
  7816  0CB0  0008               	return
  7817  0CB1  0064               	clrwdt	;# 
  7818                           
  7819                           ;LED.c: 31: LATCbits.LATC7=0;
  7820  0CB2  0022               	movlb	2	; select bank2
  7821  0CB3  138E               	bcf	14,7	;volatile
  7822                           
  7823                           ;LED.c: 32: DLYDelay_ms(200);
  7824  0CB4  30C8               	movlw	200
  7825  0CB5  00F1               	movwf	DLYDelay_ms@val
  7826  0CB6  3000               	movlw	0
  7827  0CB7  00F2               	movwf	DLYDelay_ms@val+1
  7828  0CB8  318B  23EC  318C   	fcall	_DLYDelay_ms
  7829                           
  7830                           ;LED.c: 33: LATCbits.LATC7=1;
  7831  0CBB  0022               	movlb	2	; select bank2
  7832  0CBC  178E               	bsf	14,7	;volatile
  7833                           
  7834                           ;LED.c: 34: DLYDelay_ms(200);
  7835  0CBD  30C8               	movlw	200
  7836  0CBE  00F1               	movwf	DLYDelay_ms@val
  7837  0CBF  3000               	movlw	0
  7838  0CC0  00F2               	movwf	DLYDelay_ms@val+1
  7839  0CC1  318B  23EC  318C   	fcall	_DLYDelay_ms
  7840  0CC4  3001               	movlw	1
  7841  0CC5  00F7               	movwf	??_LEDNormalFlash
  7842  0CC6  0877               	movf	??_LEDNormalFlash,w
  7843  0CC7  07F9               	addwf	LEDNormalFlash@i,f
  7844  0CC8  2CAD               	goto	l2679
  7845  0CC9                     __end_of_LEDNormalFlash:	
  7846                           
  7847                           	psect	text42
  7848  0BEC                     __ptext42:	
  7849 ;; *************** function _DLYDelay_ms *****************
  7850 ;; Defined at:
  7851 ;;		line 17 in file "DLY.c"
  7852 ;; Parameters:    Size  Location     Type
  7853 ;;  val             2    1[COMMON] unsigned short 
  7854 ;; Auto vars:     Size  Location     Type
  7855 ;;  i               2    5[COMMON] unsigned short 
  7856 ;; Return value:  Size  Location     Type
  7857 ;;		None               void
  7858 ;; Registers used:
  7859 ;;		wreg, status,2
  7860 ;; Tracked objects:
  7861 ;;		On entry : 0/0
  7862 ;;		On exit  : 0/0
  7863 ;;		Unchanged: 0/0
  7864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7865 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7866 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7867 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7868 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7869 ;;Total ram usage:        6 bytes
  7870 ;; Hardware stack levels used:    1
  7871 ;; Hardware stack levels required when called:    2
  7872 ;; This function calls:
  7873 ;;		Nothing
  7874 ;; This function is called by:
  7875 ;;		_ADCConv
  7876 ;;		_CC1Init
  7877 ;;		_LEDNormalFlash
  7878 ;;		_LEDFastFlash
  7879 ;;		_RTXAwake
  7880 ;;		_RTXStartSendData
  7881 ;;		_LEDVFastFlash
  7882 ;; This function uses a non-reentrant model
  7883 ;;
  7884                           
  7885                           
  7886                           ;psect for function _DLYDelay_ms
  7887  0BEC                     _DLYDelay_ms:	
  7888                           
  7889                           ;DLY.c: 19: unsigned short i;
  7890                           ;DLY.c: 21: for(i=0;i<val;i++)
  7891                           
  7892                           ;incstack = 0
  7893                           ; Regs used in _DLYDelay_ms: [wreg+status,2]
  7894  0BEC  01F5               	clrf	DLYDelay_ms@i
  7895  0BED  01F6               	clrf	DLYDelay_ms@i+1
  7896  0BEE                     l147:	
  7897  0BEE  0872               	movf	DLYDelay_ms@val+1,w
  7898  0BEF  0276               	subwf	DLYDelay_ms@i+1,w
  7899  0BF0  1D03               	skipz
  7900  0BF1  2BF4               	goto	u1835
  7901  0BF2  0871               	movf	DLYDelay_ms@val,w
  7902  0BF3  0275               	subwf	DLYDelay_ms@i,w
  7903  0BF4                     u1835:	
  7904  0BF4  1803               	btfsc	3,0
  7905  0BF5  0008               	return
  7906  0BF6  0064               	clrwdt	;# 
  7907                           
  7908                           ;DLY.c: 24: _delay((unsigned long)((1)*(8000000/4000.0)));
  7909  0BF7  3003               	movlw	3
  7910  0BF8  00F4               	movwf	??_DLYDelay_ms+1
  7911  0BF9  3097               	movlw	151
  7912  0BFA  00F3               	movwf	??_DLYDelay_ms
  7913  0BFB                     u3827:	
  7914  0BFB  0BF3               	decfsz	??_DLYDelay_ms,f
  7915  0BFC  2BFB               	goto	u3827
  7916  0BFD  0BF4               	decfsz	??_DLYDelay_ms+1,f
  7917  0BFE  2BFB               	goto	u3827
  7918  0BFF  3200               	nop2
  7919  0C00  3001               	movlw	1
  7920  0C01  07F5               	addwf	DLYDelay_ms@i,f
  7921  0C02  3000               	movlw	0
  7922  0C03  3DF6               	addwfc	DLYDelay_ms@i+1,f
  7923  0C04  2BEE               	goto	l147
  7924  0C05                     __end_of_DLYDelay_ms:	
  7925                           
  7926                           	psect	text43
  7927  0BD4                     __ptext43:	
  7928 ;; *************** function _PGMInit *****************
  7929 ;; Defined at:
  7930 ;;		line 20 in file "PGM.c"
  7931 ;; Parameters:    Size  Location     Type
  7932 ;;  state           1    wreg     unsigned char 
  7933 ;; Auto vars:     Size  Location     Type
  7934 ;;  state           1   11[COMMON] unsigned char 
  7935 ;; Return value:  Size  Location     Type
  7936 ;;		None               void
  7937 ;; Registers used:
  7938 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7939 ;; Tracked objects:
  7940 ;;		On entry : 0/0
  7941 ;;		On exit  : 0/0
  7942 ;;		Unchanged: 0/0
  7943 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7944 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7945 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7946 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7947 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7948 ;;Total ram usage:        1 bytes
  7949 ;; Hardware stack levels used:    1
  7950 ;; Hardware stack levels required when called:    6
  7951 ;; This function calls:
  7952 ;;		_PGMCheckNvm
  7953 ;;		_PGMReadNvm
  7954 ;; This function is called by:
  7955 ;;		_main
  7956 ;; This function uses a non-reentrant model
  7957 ;;
  7958                           
  7959                           
  7960                           ;psect for function _PGMInit
  7961  0BD4                     _PGMInit:	
  7962                           
  7963                           ;incstack = 0
  7964                           ; Regs used in _PGMInit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7965                           ;PGMInit@state stored from wreg
  7966  0BD4  00FB               	movwf	PGMInit@state
  7967                           
  7968                           ;PGM.c: 22: switch(state)
  7969  0BD5  2BE3               	goto	l3005
  7970  0BD6                     l2995:	
  7971                           ;PGM.c: 23: {
  7972                           ;PGM.c: 24: case 0:
  7973                           
  7974                           
  7975                           ;PGM.c: 26: T1CON=0b00000001;
  7976  0BD6  3001               	movlw	1
  7977  0BD7  0020               	movlb	0	; select bank0
  7978  0BD8  0098               	movwf	24	;volatile
  7979                           
  7980                           ;PGM.c: 27: break;
  7981  0BD9  0008               	return
  7982  0BDA                     l2997:	
  7983                           ;PGM.c: 28: case 1:
  7984                           
  7985                           
  7986                           ;PGM.c: 30: tmrPgm=0;
  7987  0BDA  0020               	movlb	0	; select bank0
  7988  0BDB  01EC               	clrf	_tmrPgm
  7989                           
  7990                           ;PGM.c: 31: pgm_flg.val=0;
  7991  0BDC  01EB               	clrf	_pgm_flg
  7992                           
  7993                           ;PGM.c: 32: PGMReadNvm();
  7994  0BDD  318B  2372  318B   	fcall	_PGMReadNvm
  7995                           
  7996                           ;PGM.c: 33: PGMCheckNvm();
  7997  0BE0  318B  232F         	fcall	_PGMCheckNvm
  7998                           
  7999                           ;PGM.c: 38: }
  8000                           
  8001                           ;PGM.c: 34: break;
  8002  0BE2  0008               	return
  8003  0BE3                     l3005:	
  8004  0BE3  087B               	movf	PGMInit@state,w
  8005                           
  8006                           ; Switch size 1, requested type "space"
  8007                           ; Number of cases is 2, Range of values is 0 to 1
  8008                           ; switch strategies available:
  8009                           ; Name         Instructions Cycles
  8010                           ; simple_byte            7     4 (average)
  8011                           ; direct_byte           10     6 (fixed)
  8012                           ; jumptable            260     6 (fixed)
  8013                           ;	Chosen strategy is simple_byte
  8014  0BE4  3A00               	xorlw	0	; case 0
  8015  0BE5  1903               	skipnz
  8016  0BE6  2BD6               	goto	l2995
  8017  0BE7  3A01               	xorlw	1	; case 1
  8018  0BE8  1903               	skipnz
  8019  0BE9  2BDA               	goto	l2997
  8020  0BEA  2BEB               	goto	l379
  8021  0BEB                     l379:	
  8022  0BEB  0008               	return
  8023  0BEC                     __end_of_PGMInit:	
  8024                           
  8025                           	psect	text44
  8026  0B72                     __ptext44:	
  8027 ;; *************** function _PGMReadNvm *****************
  8028 ;; Defined at:
  8029 ;;		line 59 in file "PGM.c"
  8030 ;; Parameters:    Size  Location     Type
  8031 ;;		None
  8032 ;; Auto vars:     Size  Location     Type
  8033 ;;		None
  8034 ;; Return value:  Size  Location     Type
  8035 ;;		None               void
  8036 ;; Registers used:
  8037 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8038 ;; Tracked objects:
  8039 ;;		On entry : 0/0
  8040 ;;		On exit  : 0/0
  8041 ;;		Unchanged: 0/0
  8042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8044 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8045 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8046 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8047 ;;Total ram usage:        2 bytes
  8048 ;; Hardware stack levels used:    1
  8049 ;; Hardware stack levels required when called:    3
  8050 ;; This function calls:
  8051 ;;		_NVMRead
  8052 ;; This function is called by:
  8053 ;;		_PGMInit
  8054 ;; This function uses a non-reentrant model
  8055 ;;
  8056                           
  8057                           
  8058                           ;psect for function _PGMReadNvm
  8059  0B72                     _PGMReadNvm:	
  8060                           
  8061                           ;PGM.c: 61: NVMRead((unsigned short)(&(nvm_pgm_cfg)),(char *)(&(pgm_cfg)),sizeof(ts_PGM_
      +                          CFG));
  8062                           
  8063                           ;incstack = 0
  8064                           ; Regs used in _PGMReadNvm: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8065  0B72  3000               	movlw	low (_nvm_pgm_cfg| (0+32768))
  8066  0B73  00F1               	movwf	NVMRead@addr
  8067  0B74  3090               	movlw	high (_nvm_pgm_cfg| (0+32768))
  8068  0B75  00F2               	movwf	NVMRead@addr+1
  8069  0B76  30CA               	movlw	(low (_pgm_cfg| 0))& (0+255)
  8070  0B77  00F8               	movwf	??_PGMReadNvm
  8071  0B78  0878               	movf	??_PGMReadNvm,w
  8072  0B79  00F3               	movwf	NVMRead@dest
  8073  0B7A  3005               	movlw	5
  8074  0B7B  00F9               	movwf	??_PGMReadNvm+1
  8075  0B7C  0879               	movf	??_PGMReadNvm+1,w
  8076  0B7D  00F4               	movwf	NVMRead@len
  8077  0B7E  318D  25AE         	fcall	_NVMRead
  8078  0B80  0008               	return
  8079  0B81                     __end_of_PGMReadNvm:	
  8080                           
  8081                           	psect	text45
  8082  0DAE                     __ptext45:	
  8083 ;; *************** function _NVMRead *****************
  8084 ;; Defined at:
  8085 ;;		line 23 in file "NVM.c"
  8086 ;; Parameters:    Size  Location     Type
  8087 ;;  addr            2    1[COMMON] unsigned short 
  8088 ;;  dest            1    3[COMMON] PTR unsigned char 
  8089 ;;		 -> pgm_cfg(5), 
  8090 ;;  len             1    4[COMMON] unsigned char 
  8091 ;; Auto vars:     Size  Location     Type
  8092 ;;  i               1    7[COMMON] unsigned char 
  8093 ;; Return value:  Size  Location     Type
  8094 ;;		None               void
  8095 ;; Registers used:
  8096 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8097 ;; Tracked objects:
  8098 ;;		On entry : 0/0
  8099 ;;		On exit  : 0/0
  8100 ;;		Unchanged: 0/0
  8101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8102 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8103 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8104 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8105 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8106 ;;Total ram usage:        7 bytes
  8107 ;; Hardware stack levels used:    1
  8108 ;; Hardware stack levels required when called:    2
  8109 ;; This function calls:
  8110 ;;		Nothing
  8111 ;; This function is called by:
  8112 ;;		_PGMReadNvm
  8113 ;; This function uses a non-reentrant model
  8114 ;;
  8115                           
  8116                           
  8117                           ;psect for function _NVMRead
  8118  0DAE                     _NVMRead:	
  8119                           
  8120                           ;NVM.c: 25: unsigned char i;
  8121                           ;NVM.c: 27: PMCON1bits.CFGS=0;
  8122                           
  8123                           ;incstack = 0
  8124                           ; Regs used in _NVMRead: [wreg+fsr1l+fsr1h+status,2+status,0]
  8125  0DAE  0023               	movlb	3	; select bank3
  8126  0DAF  1315               	bcf	21,6	;volatile
  8127                           
  8128                           ;NVM.c: 28: for(i=0;i<len;i++)
  8129  0DB0  01F7               	clrf	NVMRead@i
  8130  0DB1                     l2693:	
  8131  0DB1  0874               	movf	NVMRead@len,w
  8132  0DB2  0277               	subwf	NVMRead@i,w
  8133  0DB3  1803               	btfsc	3,0
  8134  0DB4  0008               	return
  8135  0DB5  0064               	clrwdt	;# 
  8136                           
  8137                           ;NVM.c: 31: PMADR=(addr+i);
  8138  0DB6  0877               	movf	NVMRead@i,w
  8139  0DB7  0771               	addwf	NVMRead@addr,w
  8140  0DB8  00F5               	movwf	??_NVMRead
  8141  0DB9  0872               	movf	NVMRead@addr+1,w
  8142  0DBA  1803               	skipnc
  8143  0DBB  0A72               	incf	NVMRead@addr+1,w
  8144  0DBC  00F6               	movwf	??_NVMRead+1
  8145  0DBD  0875               	movf	??_NVMRead,w
  8146  0DBE  0023               	movlb	3	; select bank3
  8147  0DBF  0091               	movwf	17	;volatile
  8148  0DC0  0876               	movf	??_NVMRead+1,w
  8149  0DC1  0092               	movwf	18	;volatile
  8150                           
  8151                           ;NVM.c: 32: PMCON1bits.RD=1;
  8152  0DC2  1415               	bsf	21,0	;volatile
  8153  0DC3                     l245:	
  8154                           ;NVM.c: 33: while(PMCON1bits.RD);
  8155                           
  8156  0DC3  1815               	btfsc	21,0	;volatile
  8157  0DC4  2DC3               	goto	l245
  8158                           
  8159                           ;NVM.c: 34: (*(dest+i))=PMDAT;
  8160  0DC5  0813               	movf	19,w	;volatile
  8161  0DC6  00F5               	movwf	??_NVMRead
  8162  0DC7  0877               	movf	NVMRead@i,w
  8163  0DC8  0773               	addwf	NVMRead@dest,w
  8164  0DC9  00F6               	movwf	??_NVMRead+1
  8165  0DCA  0876               	movf	??_NVMRead+1,w
  8166  0DCB  0086               	movwf	6
  8167  0DCC  0187               	clrf	7
  8168  0DCD  0875               	movf	??_NVMRead,w
  8169  0DCE  0081               	movwf	1
  8170  0DCF  3001               	movlw	1
  8171  0DD0  00F5               	movwf	??_NVMRead
  8172  0DD1  0875               	movf	??_NVMRead,w
  8173  0DD2  07F7               	addwf	NVMRead@i,f
  8174  0DD3  2DB1               	goto	l2693
  8175  0DD4                     __end_of_NVMRead:	
  8176                           
  8177                           	psect	text46
  8178  0B2F                     __ptext46:	
  8179 ;; *************** function _PGMCheckNvm *****************
  8180 ;; Defined at:
  8181 ;;		line 69 in file "PGM.c"
  8182 ;; Parameters:    Size  Location     Type
  8183 ;;		None
  8184 ;; Auto vars:     Size  Location     Type
  8185 ;;		None
  8186 ;; Return value:  Size  Location     Type
  8187 ;;		None               void
  8188 ;; Registers used:
  8189 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8190 ;; Tracked objects:
  8191 ;;		On entry : 0/0
  8192 ;;		On exit  : 0/0
  8193 ;;		Unchanged: 0/0
  8194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8195 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8196 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8198 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8199 ;;Total ram usage:        0 bytes
  8200 ;; Hardware stack levels used:    1
  8201 ;; Hardware stack levels required when called:    5
  8202 ;; This function calls:
  8203 ;;		_PGMNvmReset
  8204 ;; This function is called by:
  8205 ;;		_PGMInit
  8206 ;; This function uses a non-reentrant model
  8207 ;;
  8208                           
  8209                           
  8210                           ;psect for function _PGMCheckNvm
  8211  0B2F                     _PGMCheckNvm:	
  8212                           
  8213                           ;PGM.c: 71: if(pgm_cfg.valChk1!=0x5C || pgm_cfg.valChk2!=0xC5)
  8214                           
  8215                           ;incstack = 0
  8216                           ; Regs used in _PGMCheckNvm: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8217  0B2F  305C               	movlw	92
  8218  0B30  0021               	movlb	1	; select bank1
  8219  0B31  064A               	xorwf	_pgm_cfg^(0+128),w
  8220  0B32  1D03               	btfss	3,2
  8221  0B33  2B38               	goto	l2807
  8222  0B34  30C5               	movlw	197
  8223  0B35  064B               	xorwf	(_pgm_cfg^(0+128)+1),w
  8224  0B36  1903               	btfsc	3,2
  8225  0B37  0008               	return
  8226  0B38                     l2807:	
  8227                           
  8228                           ;PGM.c: 72: PGMNvmReset();
  8229  0B38  318B  239F         	fcall	_PGMNvmReset
  8230  0B3A  0008               	return
  8231  0B3B                     __end_of_PGMCheckNvm:	
  8232                           
  8233                           	psect	text47
  8234  0B9F                     __ptext47:	
  8235 ;; *************** function _PGMNvmReset *****************
  8236 ;; Defined at:
  8237 ;;		line 75 in file "PGM.c"
  8238 ;; Parameters:    Size  Location     Type
  8239 ;;		None
  8240 ;; Auto vars:     Size  Location     Type
  8241 ;;		None
  8242 ;; Return value:  Size  Location     Type
  8243 ;;		None               void
  8244 ;; Registers used:
  8245 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8246 ;; Tracked objects:
  8247 ;;		On entry : 0/0
  8248 ;;		On exit  : 0/0
  8249 ;;		Unchanged: 0/0
  8250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8252 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8253 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8254 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8255 ;;Total ram usage:        1 bytes
  8256 ;; Hardware stack levels used:    1
  8257 ;; Hardware stack levels required when called:    4
  8258 ;; This function calls:
  8259 ;;		_PGMWriteNvm
  8260 ;; This function is called by:
  8261 ;;		_PGMCheckNvm
  8262 ;; This function uses a non-reentrant model
  8263 ;;
  8264                           
  8265                           
  8266                           ;psect for function _PGMNvmReset
  8267  0B9F                     _PGMNvmReset:	
  8268                           
  8269                           ;PGM.c: 78: pgm_cfg.valChk1=0x5C;
  8270                           
  8271                           ;incstack = 0
  8272                           ; Regs used in _PGMNvmReset: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8273  0B9F  305C               	movlw	92
  8274  0BA0  00FA               	movwf	??_PGMNvmReset
  8275  0BA1  087A               	movf	??_PGMNvmReset,w
  8276  0BA2  0021               	movlb	1	; select bank1
  8277  0BA3  00CA               	movwf	_pgm_cfg^(0+128)
  8278                           
  8279                           ;PGM.c: 79: pgm_cfg.valChk2=0xC5;
  8280  0BA4  30C5               	movlw	197
  8281  0BA5  00FA               	movwf	??_PGMNvmReset
  8282  0BA6  087A               	movf	??_PGMNvmReset,w
  8283  0BA7  00CB               	movwf	(_pgm_cfg^(0+128)+1)
  8284                           
  8285                           ;PGM.c: 80: pgm_cfg.menu.val=0x00;
  8286  0BA8  01CC               	clrf	(_pgm_cfg^(0+128)+2)
  8287                           
  8288                           ;PGM.c: 81: pgm_cfg.sensId=0x00;
  8289  0BA9  01CD               	clrf	(_pgm_cfg^(0+128)+3)
  8290                           
  8291                           ;PGM.c: 82: pgm_cfg.baseId=0x00;
  8292  0BAA  01CE               	clrf	(_pgm_cfg^(0+128)+4)
  8293                           
  8294                           ;PGM.c: 84: PGMWriteNvm();
  8295  0BAB  318B  2363         	fcall	_PGMWriteNvm
  8296  0BAD  0001               	reset	;# 
  8297  0BAE  0008               	return
  8298  0BAF                     __end_of_PGMNvmReset:	
  8299                           
  8300                           	psect	text48
  8301  0B63                     __ptext48:	
  8302 ;; *************** function _PGMWriteNvm *****************
  8303 ;; Defined at:
  8304 ;;		line 64 in file "PGM.c"
  8305 ;; Parameters:    Size  Location     Type
  8306 ;;		None
  8307 ;; Auto vars:     Size  Location     Type
  8308 ;;		None
  8309 ;; Return value:  Size  Location     Type
  8310 ;;		None               void
  8311 ;; Registers used:
  8312 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8313 ;; Tracked objects:
  8314 ;;		On entry : 0/0
  8315 ;;		On exit  : 0/0
  8316 ;;		Unchanged: 0/0
  8317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8319 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8320 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8321 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8322 ;;Total ram usage:        2 bytes
  8323 ;; Hardware stack levels used:    1
  8324 ;; Hardware stack levels required when called:    3
  8325 ;; This function calls:
  8326 ;;		_NVMWrite
  8327 ;; This function is called by:
  8328 ;;		_PGMNvmReset
  8329 ;;		_PGMSelDown
  8330 ;;		_PGMSelLong
  8331 ;;		_RTXReadPkt
  8332 ;; This function uses a non-reentrant model
  8333 ;;
  8334                           
  8335                           
  8336                           ;psect for function _PGMWriteNvm
  8337  0B63                     _PGMWriteNvm:	
  8338                           
  8339                           ;PGM.c: 66: NVMWrite((unsigned short)(&(nvm_pgm_cfg)),(char *)(&(pgm_cfg)),sizeof(ts_PGM
      +                          _CFG));
  8340                           
  8341                           ;incstack = 0
  8342                           ; Regs used in _PGMWriteNvm: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8343  0B63  3000               	movlw	low (_nvm_pgm_cfg| (0+32768))
  8344  0B64  00F1               	movwf	NVMWrite@addr
  8345  0B65  3090               	movlw	high (_nvm_pgm_cfg| (0+32768))
  8346  0B66  00F2               	movwf	NVMWrite@addr+1
  8347  0B67  30CA               	movlw	(low (_pgm_cfg| 0))& (0+255)
  8348  0B68  00F8               	movwf	??_PGMWriteNvm
  8349  0B69  0878               	movf	??_PGMWriteNvm,w
  8350  0B6A  00F3               	movwf	NVMWrite@source
  8351  0B6B  3005               	movlw	5
  8352  0B6C  00F9               	movwf	??_PGMWriteNvm+1
  8353  0B6D  0879               	movf	??_PGMWriteNvm+1,w
  8354  0B6E  00F4               	movwf	NVMWrite@len
  8355  0B6F  3183  23E0         	fcall	_NVMWrite
  8356  0B71  0008               	return
  8357  0B72                     __end_of_PGMWriteNvm:	
  8358                           
  8359                           	psect	text49
  8360  03E0                     __ptext49:	
  8361 ;; *************** function _NVMWrite *****************
  8362 ;; Defined at:
  8363 ;;		line 38 in file "NVM.c"
  8364 ;; Parameters:    Size  Location     Type
  8365 ;;  addr            2    1[COMMON] unsigned short 
  8366 ;;  source          1    3[COMMON] PTR unsigned char 
  8367 ;;		 -> pgm_cfg(5), 
  8368 ;;  len             1    4[COMMON] unsigned char 
  8369 ;; Auto vars:     Size  Location     Type
  8370 ;;  bufTmpRow      64    0[BANK0 ] unsigned short [32]
  8371 ;;  rowAddr         2   64[BANK0 ] unsigned short 
  8372 ;;  j               1   68[BANK0 ] unsigned char 
  8373 ;;  latchAddr       1   67[BANK0 ] unsigned char 
  8374 ;;  i               1   66[BANK0 ] unsigned char 
  8375 ;; Return value:  Size  Location     Type
  8376 ;;		None               void
  8377 ;; Registers used:
  8378 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8379 ;; Tracked objects:
  8380 ;;		On entry : 0/0
  8381 ;;		On exit  : 0/0
  8382 ;;		Unchanged: 0/0
  8383 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8384 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8385 ;;      Locals:         0      69       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8386 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8387 ;;      Totals:         7      69       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8388 ;;Total ram usage:       76 bytes
  8389 ;; Hardware stack levels used:    1
  8390 ;; Hardware stack levels required when called:    2
  8391 ;; This function calls:
  8392 ;;		Nothing
  8393 ;; This function is called by:
  8394 ;;		_PGMWriteNvm
  8395 ;; This function uses a non-reentrant model
  8396 ;;
  8397                           
  8398                           
  8399                           ;psect for function _NVMWrite
  8400  03E0                     _NVMWrite:	
  8401                           
  8402                           ;NVM.c: 40: unsigned char i,j,latchAddr;
  8403                           ;NVM.c: 41: unsigned short rowAddr,bufTmpRow[0x20];
  8404                           ;NVM.c: 43: INTCONbits.GIE=0;
  8405                           
  8406                           ;incstack = 0
  8407                           ; Regs used in _NVMWrite: [wreg+fsr1l+fsr1h+status,2+status,0]
  8408  03E0  138B               	bcf	11,7	;volatile
  8409                           
  8410                           ;NVM.c: 44: PMCON1bits.WREN=1;
  8411  03E1  0023               	movlb	3	; select bank3
  8412  03E2  1515               	bsf	21,2	;volatile
  8413                           
  8414                           ;NVM.c: 45: PMCON1bits.CFGS=0;
  8415  03E3  1315               	bcf	21,6	;volatile
  8416                           
  8417                           ;NVM.c: 48: i=0;
  8418  03E4  0020               	movlb	0	; select bank0
  8419  03E5  01E2               	clrf	NVMWrite@i
  8420                           
  8421                           ;NVM.c: 50: rowAddr=(addr&(~(0x001F)));
  8422  03E6  30E0               	movlw	224
  8423  03E7  0571               	andwf	NVMWrite@addr,w
  8424  03E8  00E0               	movwf	NVMWrite@rowAddr
  8425  03E9  30FF               	movlw	255
  8426  03EA  0572               	andwf	NVMWrite@addr+1,w
  8427  03EB  00E1               	movwf	NVMWrite@rowAddr+1
  8428                           
  8429                           ;NVM.c: 51: latchAddr=(addr&0x001F);
  8430  03EC  0871               	movf	NVMWrite@addr,w
  8431  03ED  391F               	andlw	31
  8432  03EE  00F5               	movwf	??_NVMWrite
  8433  03EF  0875               	movf	??_NVMWrite,w
  8434  03F0  00E3               	movwf	NVMWrite@latchAddr
  8435  03F1                     l252:	
  8436                           ;NVM.c: 52: while(i<len)
  8437                           
  8438  03F1  0874               	movf	NVMWrite@len,w
  8439  03F2  0262               	subwf	NVMWrite@i,w
  8440  03F3  1803               	btfsc	3,0
  8441  03F4  2C98               	goto	l272
  8442  03F5  0064               	clrwdt	;# 
  8443                           
  8444                           ;NVM.c: 57: for(j=0;j<sizeof(bufTmpRow)/sizeof(unsigned short);j++)
  8445  03F6  0020               	movlb	0	; select bank0
  8446  03F7  01E4               	clrf	NVMWrite@j
  8447  03F8  3020               	movlw	32
  8448  03F9  0264               	subwf	NVMWrite@j,w
  8449  03FA  1803               	btfsc	3,0
  8450  03FB  2C20               	goto	l255
  8451  03FC                     l254:	
  8452  03FC  0064               	clrwdt	;# 
  8453                           
  8454                           ;NVM.c: 60: PMADR=(rowAddr+j);
  8455  03FD  0020               	movlb	0	; select bank0
  8456  03FE  0864               	movf	NVMWrite@j,w
  8457  03FF  0760               	addwf	NVMWrite@rowAddr,w
  8458  0400  00F5               	movwf	??_NVMWrite
  8459  0401  0861               	movf	NVMWrite@rowAddr+1,w
  8460  0402  1803               	skipnc
  8461  0403  0A61               	incf	NVMWrite@rowAddr+1,w
  8462  0404  00F6               	movwf	??_NVMWrite+1
  8463  0405  0875               	movf	??_NVMWrite,w
  8464  0406  0023               	movlb	3	; select bank3
  8465  0407  0091               	movwf	17	;volatile
  8466  0408  0876               	movf	??_NVMWrite+1,w
  8467  0409  0092               	movwf	18	;volatile
  8468                           
  8469                           ;NVM.c: 61: PMCON1bits.RD=1;
  8470  040A  1415               	bsf	21,0	;volatile
  8471  040B                     l256:	
  8472                           ;NVM.c: 62: while(PMCON1bits.RD);
  8473                           
  8474  040B  1815               	btfsc	21,0	;volatile
  8475  040C  2C0B               	goto	l256
  8476                           
  8477                           ;NVM.c: 63: bufTmpRow[j]=PMDAT;
  8478  040D  0020               	movlb	0	; select bank0
  8479  040E  3564               	lslf	NVMWrite@j,w
  8480  040F  3E20               	addlw	(low (NVMWrite@bufTmpRow| 0))& (0+255)
  8481  0410  0086               	movwf	6
  8482  0411  0187               	clrf	7
  8483  0412  0023               	movlb	3	; select bank3
  8484  0413  0813               	movf	19,w	;volatile
  8485  0414  3FC0               	movwi [0]fsr1
  8486  0415  0814               	movf	20,w	;volatile
  8487  0416  3FC1               	movwi [1]fsr1
  8488  0417  3001               	movlw	1
  8489  0418  00F5               	movwf	??_NVMWrite
  8490  0419  0875               	movf	??_NVMWrite,w
  8491  041A  0020               	movlb	0	; select bank0
  8492  041B  07E4               	addwf	NVMWrite@j,f
  8493  041C  3020               	movlw	32
  8494  041D  0264               	subwf	NVMWrite@j,w
  8495  041E  1C03               	skipc
  8496  041F  2BFC               	goto	l254
  8497  0420                     l255:	
  8498                           
  8499                           ;NVM.c: 64: }
  8500                           ;NVM.c: 67: PMCON1bits.FREE=1;
  8501  0420  0023               	movlb	3	; select bank3
  8502  0421  1615               	bsf	21,4	;volatile
  8503                           
  8504                           ;NVM.c: 68: PMADR=rowAddr;
  8505  0422  0020               	movlb	0	; select bank0
  8506  0423  0861               	movf	NVMWrite@rowAddr+1,w
  8507  0424  0023               	movlb	3	; select bank3
  8508  0425  0092               	movwf	18	;volatile
  8509  0426  0020               	movlb	0	; select bank0
  8510  0427  0860               	movf	NVMWrite@rowAddr,w
  8511  0428  0023               	movlb	3	; select bank3
  8512  0429  0091               	movwf	17	;volatile
  8513                           
  8514                           ;NVM.c: 69: PMCON2=0x55;
  8515  042A  3055               	movlw	85
  8516  042B  0096               	movwf	22	;volsfr
  8517                           
  8518                           ;NVM.c: 70: PMCON2=0xAA;
  8519  042C  30AA               	movlw	170
  8520  042D  0096               	movwf	22	;volsfr
  8521                           
  8522                           ;NVM.c: 71: PMCON1bits.WR=1;
  8523  042E  1495               	bsf	21,1	;volatile
  8524  042F                     l259:	
  8525                           ;NVM.c: 72: while(PMCON1bits.WR);
  8526                           
  8527  042F  1895               	btfsc	21,1	;volatile
  8528  0430  2C2F               	goto	l259
  8529                           
  8530                           ;NVM.c: 73: __nop();
  8531  0431  0000               	nop
  8532                           
  8533                           ;NVM.c: 74: __nop();
  8534  0432  0000               	nop
  8535                           
  8536                           ;NVM.c: 77: for(;latchAddr<sizeof(bufTmpRow)/sizeof(unsigned short);latchAddr++)
  8537  0433  3020               	movlw	32
  8538  0434  0020               	movlb	0	; select bank0
  8539  0435  0263               	subwf	NVMWrite@latchAddr,w
  8540  0436  1803               	btfsc	3,0
  8541  0437  2C5B               	goto	l2575
  8542  0438                     l262:	
  8543  0438  0064               	clrwdt	;# 
  8544                           
  8545                           ;NVM.c: 81: if(i>=len)
  8546  0439  0874               	movf	NVMWrite@len,w
  8547  043A  0020               	movlb	0	; select bank0
  8548  043B  0262               	subwf	NVMWrite@i,w
  8549  043C  1803               	btfsc	3,0
  8550  043D  2C5B               	goto	l2575
  8551                           
  8552                           ;NVM.c: 84: bufTmpRow[latchAddr]=(*(source+i));
  8553                           
  8554                           ;NVM.c: 82: break;
  8555  043E  0862               	movf	NVMWrite@i,w
  8556  043F  0773               	addwf	NVMWrite@source,w
  8557  0440  00F5               	movwf	??_NVMWrite
  8558  0441  0875               	movf	??_NVMWrite,w
  8559  0442  0086               	movwf	6
  8560  0443  0187               	clrf	7
  8561  0444  0801               	movf	1,w
  8562  0445  00F6               	movwf	??_NVMWrite+1
  8563  0446  01F7               	clrf	??_NVMWrite+2
  8564  0447  3563               	lslf	NVMWrite@latchAddr,w
  8565  0448  3E20               	addlw	(low (NVMWrite@bufTmpRow| 0))& (0+255)
  8566  0449  0086               	movwf	6
  8567  044A  0187               	clrf	7
  8568  044B  0876               	movf	??_NVMWrite+1,w
  8569  044C  3FC0               	movwi [0]fsr1
  8570  044D  0877               	movf	??_NVMWrite+2,w
  8571  044E  3FC1               	movwi [1]fsr1
  8572                           
  8573                           ;NVM.c: 85: i++;
  8574  044F  3001               	movlw	1
  8575  0450  00F5               	movwf	??_NVMWrite
  8576  0451  0875               	movf	??_NVMWrite,w
  8577  0452  07E2               	addwf	NVMWrite@i,f
  8578  0453  3001               	movlw	1
  8579  0454  00F5               	movwf	??_NVMWrite
  8580  0455  0875               	movf	??_NVMWrite,w
  8581  0456  07E3               	addwf	NVMWrite@latchAddr,f
  8582  0457  3020               	movlw	32
  8583  0458  0263               	subwf	NVMWrite@latchAddr,w
  8584  0459  1C03               	skipc
  8585  045A  2C38               	goto	l262
  8586  045B                     l2575:	
  8587                           
  8588                           ;NVM.c: 86: }
  8589                           ;NVM.c: 88: latchAddr=0;
  8590  045B  01E3               	clrf	NVMWrite@latchAddr
  8591                           
  8592                           ;NVM.c: 91: for(j=0;j<sizeof(bufTmpRow)/sizeof(unsigned short);j++)
  8593  045C  01E4               	clrf	NVMWrite@j
  8594  045D  3020               	movlw	32
  8595  045E  0264               	subwf	NVMWrite@j,w
  8596  045F  1803               	btfsc	3,0
  8597  0460  2C93               	goto	l2597
  8598  0461                     l2581:	
  8599                           
  8600                           ;NVM.c: 92: {
  8601                           ;NVM.c: 94: PMADR=(rowAddr+j);
  8602  0461  0864               	movf	NVMWrite@j,w
  8603  0462  0760               	addwf	NVMWrite@rowAddr,w
  8604  0463  00F5               	movwf	??_NVMWrite
  8605  0464  0861               	movf	NVMWrite@rowAddr+1,w
  8606  0465  1803               	skipnc
  8607  0466  0A61               	incf	NVMWrite@rowAddr+1,w
  8608  0467  00F6               	movwf	??_NVMWrite+1
  8609  0468  0875               	movf	??_NVMWrite,w
  8610  0469  0023               	movlb	3	; select bank3
  8611  046A  0091               	movwf	17	;volatile
  8612  046B  0876               	movf	??_NVMWrite+1,w
  8613  046C  0092               	movwf	18	;volatile
  8614                           
  8615                           ;NVM.c: 95: PMDAT=bufTmpRow[j];
  8616  046D  0020               	movlb	0	; select bank0
  8617  046E  3564               	lslf	NVMWrite@j,w
  8618  046F  3E20               	addlw	(low (NVMWrite@bufTmpRow| 0))& (0+255)
  8619  0470  0086               	movwf	6
  8620  0471  0187               	clrf	7
  8621  0472  3F40               	moviw [0]fsr1
  8622  0473  0023               	movlb	3	; select bank3
  8623  0474  0093               	movwf	19	;volatile
  8624  0475  3F41               	moviw [1]fsr1
  8625  0476  0094               	movwf	20	;volatile
  8626                           
  8627                           ;NVM.c: 97: if(j==(sizeof(bufTmpRow)/sizeof(unsigned short)-1))
  8628  0477  301F               	movlw	31
  8629  0478  0020               	movlb	0	; select bank0
  8630  0479  0664               	xorwf	NVMWrite@j,w
  8631  047A  1D03               	btfss	3,2
  8632  047B  2C7F               	goto	l267
  8633                           
  8634                           ;NVM.c: 98: PMCON1bits.LWLO=0;
  8635  047C  0023               	movlb	3	; select bank3
  8636  047D  1295               	bcf	21,5	;volatile
  8637  047E  2C81               	goto	l2589
  8638  047F                     l267:	
  8639                           
  8640                           ;NVM.c: 99: else
  8641                           ;NVM.c: 100: PMCON1bits.LWLO=1;
  8642  047F  0023               	movlb	3	; select bank3
  8643  0480  1695               	bsf	21,5	;volatile
  8644  0481                     l2589:	
  8645                           
  8646                           ;NVM.c: 101: PMCON2=0x55;
  8647  0481  3055               	movlw	85
  8648  0482  0096               	movwf	22	;volsfr
  8649                           
  8650                           ;NVM.c: 102: PMCON2=0xAA;
  8651  0483  30AA               	movlw	170
  8652  0484  0096               	movwf	22	;volsfr
  8653                           
  8654                           ;NVM.c: 103: PMCON1bits.WR=1;
  8655  0485  1495               	bsf	21,1	;volatile
  8656  0486                     l269:	
  8657                           ;NVM.c: 104: while(PMCON1bits.WR);
  8658                           
  8659  0486  1895               	btfsc	21,1	;volatile
  8660  0487  2C86               	goto	l269
  8661                           
  8662                           ;NVM.c: 105: __nop();
  8663  0488  0000               	nop
  8664                           
  8665                           ;NVM.c: 106: __nop();
  8666  0489  0000               	nop
  8667  048A  3001               	movlw	1
  8668  048B  00F5               	movwf	??_NVMWrite
  8669  048C  0875               	movf	??_NVMWrite,w
  8670  048D  0020               	movlb	0	; select bank0
  8671  048E  07E4               	addwf	NVMWrite@j,f
  8672  048F  3020               	movlw	32
  8673  0490  0264               	subwf	NVMWrite@j,w
  8674  0491  1C03               	skipc
  8675  0492  2C61               	goto	l2581
  8676  0493                     l2597:	
  8677                           
  8678                           ;NVM.c: 107: }
  8679                           ;NVM.c: 109: rowAddr+=0x0020;
  8680  0493  3020               	movlw	32
  8681  0494  07E0               	addwf	NVMWrite@rowAddr,f
  8682  0495  3000               	movlw	0
  8683  0496  3DE1               	addwfc	NVMWrite@rowAddr+1,f
  8684  0497  2BF1               	goto	l252
  8685  0498                     l272:	
  8686                           
  8687                           ;NVM.c: 110: }
  8688                           ;NVM.c: 112: INTCONbits.GIE=1;
  8689  0498  178B               	bsf	11,7	;volatile
  8690                           
  8691                           ;NVM.c: 113: PMCON1bits.WREN=0;
  8692  0499  0023               	movlb	3	; select bank3
  8693  049A  1115               	bcf	21,2	;volatile
  8694  049B  0008               	return
  8695  049C                     __end_of_NVMWrite:	
  8696                           
  8697                           	psect	text50
  8698  0E49                     __ptext50:	
  8699 ;; *************** function _OUTInit *****************
  8700 ;; Defined at:
  8701 ;;		line 6 in file "OUT.c"
  8702 ;; Parameters:    Size  Location     Type
  8703 ;;  sta             1    wreg     unsigned char 
  8704 ;; Auto vars:     Size  Location     Type
  8705 ;;  sta             1    2[COMMON] unsigned char 
  8706 ;; Return value:  Size  Location     Type
  8707 ;;		None               void
  8708 ;; Registers used:
  8709 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8710 ;; Tracked objects:
  8711 ;;		On entry : 0/0
  8712 ;;		On exit  : 0/0
  8713 ;;		Unchanged: 0/0
  8714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8716 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8717 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8718 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8719 ;;Total ram usage:        2 bytes
  8720 ;; Hardware stack levels used:    1
  8721 ;; Hardware stack levels required when called:    2
  8722 ;; This function calls:
  8723 ;;		Nothing
  8724 ;; This function is called by:
  8725 ;;		_main
  8726 ;; This function uses a non-reentrant model
  8727 ;;
  8728                           
  8729                           
  8730                           ;psect for function _OUTInit
  8731  0E49                     _OUTInit:	
  8732                           
  8733                           ;incstack = 0
  8734                           ; Regs used in _OUTInit: [wreg-fsr0h+status,2+status,0]
  8735                           ;OUTInit@sta stored from wreg
  8736  0E49  00F2               	movwf	OUTInit@sta
  8737                           
  8738                           ;OUT.c: 8: switch(sta)
  8739  0E4A  2E6C               	goto	l2911
  8740  0E4B                     l2905:	
  8741                           ;OUT.c: 9: {
  8742                           ;OUT.c: 10: case 0:
  8743                           
  8744                           
  8745                           ;OUT.c: 12: TRISA&=0b00000110; TRISB&=0b00100111; TRISC&=0b00010000; ANSELA&=0b11111001;
      +                           ANSELB&=0b11011000; ANSELC&=0b00010000; PORTA&=0b11111110; PORTC|=0b10000000;
  8746  0E4B  3006               	movlw	6
  8747  0E4C  00F1               	movwf	??_OUTInit
  8748  0E4D  0871               	movf	??_OUTInit,w
  8749  0E4E  0021               	movlb	1	; select bank1
  8750  0E4F  058C               	andwf	12,f	;volatile
  8751  0E50  3027               	movlw	39
  8752  0E51  00F1               	movwf	??_OUTInit
  8753  0E52  0871               	movf	??_OUTInit,w
  8754  0E53  058D               	andwf	13,f	;volatile
  8755  0E54  3010               	movlw	16
  8756  0E55  00F1               	movwf	??_OUTInit
  8757  0E56  0871               	movf	??_OUTInit,w
  8758  0E57  058E               	andwf	14,f	;volatile
  8759  0E58  30F9               	movlw	249
  8760  0E59  00F1               	movwf	??_OUTInit
  8761  0E5A  0871               	movf	??_OUTInit,w
  8762  0E5B  0023               	movlb	3	; select bank3
  8763  0E5C  058C               	andwf	12,f	;volatile
  8764  0E5D  30D8               	movlw	216
  8765  0E5E  00F1               	movwf	??_OUTInit
  8766  0E5F  0871               	movf	??_OUTInit,w
  8767  0E60  058D               	andwf	13,f	;volatile
  8768  0E61  3010               	movlw	16
  8769  0E62  00F1               	movwf	??_OUTInit
  8770  0E63  0871               	movf	??_OUTInit,w
  8771  0E64  058E               	andwf	14,f	;volatile
  8772  0E65  30FE               	movlw	254
  8773  0E66  00F1               	movwf	??_OUTInit
  8774  0E67  0871               	movf	??_OUTInit,w
  8775  0E68  0020               	movlb	0	; select bank0
  8776  0E69  058C               	andwf	12,f	;volatile
  8777  0E6A  178E               	bsf	14,7	;volatile
  8778                           
  8779                           ;OUT.c: 20: }
  8780                           
  8781                           ;OUT.c: 13: break;
  8782  0E6B  0008               	return
  8783  0E6C                     l2911:	
  8784  0E6C  0872               	movf	OUTInit@sta,w
  8785                           
  8786                           ; Switch size 1, requested type "space"
  8787                           ; Number of cases is 1, Range of values is 0 to 0
  8788                           ; switch strategies available:
  8789                           ; Name         Instructions Cycles
  8790                           ; simple_byte            4     3 (average)
  8791                           ; direct_byte            8     6 (fixed)
  8792                           ; jumptable            260     6 (fixed)
  8793                           ;	Chosen strategy is simple_byte
  8794  0E6D  3A00               	xorlw	0	; case 0
  8795  0E6E  1903               	skipnz
  8796  0E6F  2E4B               	goto	l2905
  8797  0E70  2E71               	goto	l38
  8798  0E71                     l38:	
  8799  0E71  0008               	return
  8800  0E72                     __end_of_OUTInit:	
  8801                           
  8802                           	psect	text51
  8803  0B24                     __ptext51:	
  8804 ;; *************** function _NVMInit *****************
  8805 ;; Defined at:
  8806 ;;		line 6 in file "NVM.c"
  8807 ;; Parameters:    Size  Location     Type
  8808 ;;  sta             1    wreg     unsigned char 
  8809 ;; Auto vars:     Size  Location     Type
  8810 ;;  sta             1    1[COMMON] unsigned char 
  8811 ;; Return value:  Size  Location     Type
  8812 ;;		None               void
  8813 ;; Registers used:
  8814 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8815 ;; Tracked objects:
  8816 ;;		On entry : 0/0
  8817 ;;		On exit  : 0/0
  8818 ;;		Unchanged: 0/0
  8819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8821 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8823 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8824 ;;Total ram usage:        1 bytes
  8825 ;; Hardware stack levels used:    1
  8826 ;; Hardware stack levels required when called:    2
  8827 ;; This function calls:
  8828 ;;		Nothing
  8829 ;; This function is called by:
  8830 ;;		_main
  8831 ;; This function uses a non-reentrant model
  8832 ;;
  8833                           
  8834                           
  8835                           ;psect for function _NVMInit
  8836  0B24                     _NVMInit:	
  8837                           
  8838                           ;incstack = 0
  8839                           ; Regs used in _NVMInit: [wreg-fsr0h+status,2+status,0]
  8840                           ;NVMInit@sta stored from wreg
  8841  0B24  00F1               	movwf	NVMInit@sta
  8842                           
  8843                           ;NVM.c: 8: switch(sta)
  8844  0B25  2B29               	goto	l2961
  8845  0B26                     l2957:	
  8846                           ;NVM.c: 9: {
  8847                           ;NVM.c: 10: case 0:
  8848                           
  8849                           
  8850                           ;NVM.c: 12: PMCON1=0b00000000;
  8851  0B26  0023               	movlb	3	; select bank3
  8852  0B27  0195               	clrf	21	;volatile
  8853                           
  8854                           ;NVM.c: 20: }
  8855                           
  8856                           ;NVM.c: 13: break;
  8857  0B28  0008               	return
  8858  0B29                     l2961:	
  8859  0B29  0871               	movf	NVMInit@sta,w
  8860                           
  8861                           ; Switch size 1, requested type "space"
  8862                           ; Number of cases is 1, Range of values is 0 to 0
  8863                           ; switch strategies available:
  8864                           ; Name         Instructions Cycles
  8865                           ; simple_byte            4     3 (average)
  8866                           ; direct_byte            8     6 (fixed)
  8867                           ; jumptable            260     6 (fixed)
  8868                           ;	Chosen strategy is simple_byte
  8869  0B2A  3A00               	xorlw	0	; case 0
  8870  0B2B  1903               	skipnz
  8871  0B2C  2B26               	goto	l2957
  8872  0B2D  2B2E               	goto	l240
  8873  0B2E                     l240:	
  8874  0B2E  0008               	return
  8875  0B2F                     __end_of_NVMInit:	
  8876                           
  8877                           	psect	text52
  8878  0B19                     __ptext52:	
  8879 ;; *************** function _LEDInit *****************
  8880 ;; Defined at:
  8881 ;;		line 7 in file "LED.c"
  8882 ;; Parameters:    Size  Location     Type
  8883 ;;  sta             1    wreg     unsigned char 
  8884 ;; Auto vars:     Size  Location     Type
  8885 ;;  sta             1    1[COMMON] unsigned char 
  8886 ;; Return value:  Size  Location     Type
  8887 ;;		None               void
  8888 ;; Registers used:
  8889 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8890 ;; Tracked objects:
  8891 ;;		On entry : 0/0
  8892 ;;		On exit  : 0/0
  8893 ;;		Unchanged: 0/0
  8894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8896 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8897 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8898 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8899 ;;Total ram usage:        1 bytes
  8900 ;; Hardware stack levels used:    1
  8901 ;; Hardware stack levels required when called:    2
  8902 ;; This function calls:
  8903 ;;		Nothing
  8904 ;; This function is called by:
  8905 ;;		_main
  8906 ;; This function uses a non-reentrant model
  8907 ;;
  8908                           
  8909                           
  8910                           ;psect for function _LEDInit
  8911  0B19                     _LEDInit:	
  8912                           
  8913                           ;incstack = 0
  8914                           ; Regs used in _LEDInit: [wreg-fsr0h+status,2+status,0]
  8915                           ;LEDInit@sta stored from wreg
  8916  0B19  00F1               	movwf	LEDInit@sta
  8917                           
  8918                           ;LED.c: 9: switch(sta)
  8919  0B1A  2B1E               	goto	l2953
  8920  0B1B                     l200:	
  8921                           ;LED.c: 10: {
  8922                           ;LED.c: 17: case 2:
  8923                           
  8924                           
  8925                           ;LED.c: 19: LATCbits.LATC7=1;
  8926  0B1B  0022               	movlb	2	; select bank2
  8927  0B1C  178E               	bsf	14,7	;volatile
  8928                           
  8929                           ;LED.c: 21: }
  8930                           
  8931                           ;LED.c: 20: break;
  8932  0B1D  0008               	return
  8933  0B1E                     l2953:	
  8934  0B1E  0871               	movf	LEDInit@sta,w
  8935                           
  8936                           ; Switch size 1, requested type "space"
  8937                           ; Number of cases is 1, Range of values is 2 to 2
  8938                           ; switch strategies available:
  8939                           ; Name         Instructions Cycles
  8940                           ; simple_byte            4     3 (average)
  8941                           ; direct_byte           11     9 (fixed)
  8942                           ; jumptable            263     9 (fixed)
  8943                           ;	Chosen strategy is simple_byte
  8944  0B1F  3A02               	xorlw	2	; case 2
  8945  0B20  1903               	skipnz
  8946  0B21  2B1B               	goto	l200
  8947  0B22  2B23               	goto	l202
  8948  0B23                     l202:	
  8949  0B23  0008               	return
  8950  0B24                     __end_of_LEDInit:	
  8951                           
  8952                           	psect	text53
  8953  0C1F                     __ptext53:	
  8954 ;; *************** function _INInit *****************
  8955 ;; Defined at:
  8956 ;;		line 6 in file "IN.c"
  8957 ;; Parameters:    Size  Location     Type
  8958 ;;  sta             1    wreg     unsigned char 
  8959 ;; Auto vars:     Size  Location     Type
  8960 ;;  sta             1    2[COMMON] unsigned char 
  8961 ;; Return value:  Size  Location     Type
  8962 ;;		None               void
  8963 ;; Registers used:
  8964 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8965 ;; Tracked objects:
  8966 ;;		On entry : 0/0
  8967 ;;		On exit  : 0/0
  8968 ;;		Unchanged: 0/0
  8969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8970 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8971 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8972 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8973 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8974 ;;Total ram usage:        2 bytes
  8975 ;; Hardware stack levels used:    1
  8976 ;; Hardware stack levels required when called:    2
  8977 ;; This function calls:
  8978 ;;		Nothing
  8979 ;; This function is called by:
  8980 ;;		_main
  8981 ;; This function uses a non-reentrant model
  8982 ;;
  8983                           
  8984                           
  8985                           ;psect for function _INInit
  8986  0C1F                     _INInit:	
  8987                           
  8988                           ;incstack = 0
  8989                           ; Regs used in _INInit: [wreg-fsr0h+status,2+status,0]
  8990                           ;INInit@sta stored from wreg
  8991  0C1F  00F2               	movwf	INInit@sta
  8992                           
  8993                           ;IN.c: 8: switch(sta)
  8994  0C20  2C34               	goto	l2901
  8995  0C21                     l2893:	
  8996                           ;IN.c: 9: {
  8997                           ;IN.c: 10: case 0:
  8998                           
  8999                           
  9000                           ;IN.c: 12: TRISA|=0b00000110; TRISB|=0b00100111; TRISC|=0b00010000; ANSELB&=0b11011000; 
      +                          WPUB=0b00100111;
  9001  0C21  3006               	movlw	6
  9002  0C22  00F1               	movwf	??_INInit
  9003  0C23  0871               	movf	??_INInit,w
  9004  0C24  0021               	movlb	1	; select bank1
  9005  0C25  048C               	iorwf	12,f	;volatile
  9006  0C26  3027               	movlw	39
  9007  0C27  00F1               	movwf	??_INInit
  9008  0C28  0871               	movf	??_INInit,w
  9009  0C29  048D               	iorwf	13,f	;volatile
  9010  0C2A  160E               	bsf	14,4	;volatile
  9011  0C2B  30D8               	movlw	216
  9012  0C2C  00F1               	movwf	??_INInit
  9013  0C2D  0871               	movf	??_INInit,w
  9014  0C2E  0023               	movlb	3	; select bank3
  9015  0C2F  058D               	andwf	13,f	;volatile
  9016  0C30  3027               	movlw	39
  9017  0C31  0024               	movlb	4	; select bank4
  9018  0C32  008D               	movwf	13	;volatile
  9019                           
  9020                           ;IN.c: 20: }
  9021                           
  9022                           ;IN.c: 13: break;
  9023  0C33  0008               	return
  9024  0C34                     l2901:	
  9025  0C34  0872               	movf	INInit@sta,w
  9026                           
  9027                           ; Switch size 1, requested type "space"
  9028                           ; Number of cases is 1, Range of values is 0 to 0
  9029                           ; switch strategies available:
  9030                           ; Name         Instructions Cycles
  9031                           ; simple_byte            4     3 (average)
  9032                           ; direct_byte            8     6 (fixed)
  9033                           ; jumptable            260     6 (fixed)
  9034                           ;	Chosen strategy is simple_byte
  9035  0C35  3A00               	xorlw	0	; case 0
  9036  0C36  1903               	skipnz
  9037  0C37  2C21               	goto	l2893
  9038  0C38  2C39               	goto	l16
  9039  0C39                     l16:	
  9040  0C39  0008               	return
  9041  0C3A                     __end_of_INInit:	
  9042                           
  9043                           	psect	text54
  9044  0C8D                     __ptext54:	
  9045 ;; *************** function _DINTask *****************
  9046 ;; Defined at:
  9047 ;;		line 79 in file "DIN.c"
  9048 ;; Parameters:    Size  Location     Type
  9049 ;;		None
  9050 ;; Auto vars:     Size  Location     Type
  9051 ;;		None
  9052 ;; Return value:  Size  Location     Type
  9053 ;;		None               void
  9054 ;; Registers used:
  9055 ;;		wreg, status,2, status,0
  9056 ;; Tracked objects:
  9057 ;;		On entry : 0/0
  9058 ;;		On exit  : 0/0
  9059 ;;		Unchanged: 0/0
  9060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9062 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9063 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9064 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9065 ;;Total ram usage:        1 bytes
  9066 ;; Hardware stack levels used:    1
  9067 ;; Hardware stack levels required when called:    2
  9068 ;; This function calls:
  9069 ;;		Nothing
  9070 ;; This function is called by:
  9071 ;;		_main
  9072 ;; This function uses a non-reentrant model
  9073 ;;
  9074                           
  9075                           
  9076                           ;psect for function _DINTask
  9077  0C8D                     _DINTask:	
  9078                           
  9079                           ;DIN.c: 81: u_in_sta_tmpTask.val=0;
  9080                           
  9081                           ;incstack = 0
  9082                           ; Regs used in _DINTask: [wreg+status,2+status,0]
  9083  0C8D  0020               	movlb	0	; select bank0
  9084  0C8E  01EF               	clrf	_u_in_sta_tmpTask
  9085                           
  9086                           ;DIN.c: 82: if(!PORTBbits.RB2)
  9087  0C8F  1D0D               	btfss	13,2	;volatile
  9088                           
  9089                           ;DIN.c: 83: u_in_sta_tmpTask.sel=1;
  9090  0C90  146F               	bsf	_u_in_sta_tmpTask,0
  9091                           
  9092                           ;DIN.c: 86: if(u_in_sta_currTask.sel!=u_in_sta_tmpTask.sel)
  9093  0C91  086F               	movf	_u_in_sta_tmpTask,w
  9094  0C92  3901               	andlw	1
  9095  0C93  00F1               	movwf	??_DINTask
  9096  0C94  087C               	movf	_u_in_sta_currTask,w
  9097  0C95  3901               	andlw	1
  9098  0C96  0671               	xorwf	??_DINTask,w
  9099  0C97  1903               	skipnz
  9100  0C98  2CA1               	goto	l2985
  9101                           
  9102                           ;DIN.c: 87: {
  9103                           ;DIN.c: 88: u_in_sta_currTask.sel=u_in_sta_tmpTask.sel;
  9104  0C99  107C               	bcf	_u_in_sta_currTask,0
  9105  0C9A  1C6F               	btfss	_u_in_sta_tmpTask,0
  9106  0C9B  2C9D               	goto	l2981
  9107  0C9C  147C               	bsf	_u_in_sta_currTask,0
  9108  0C9D                     l2981:	
  9109                           
  9110                           ;DIN.c: 89: tmrDbncSel=0;
  9111  0C9D  0021               	movlb	1	; select bank1
  9112  0C9E  01B1               	clrf	_tmrDbncSel^(0+128)
  9113                           
  9114                           ;DIN.c: 90: u_flg_din.tmrDbncSel=1;
  9115  0C9F  0020               	movlb	0	; select bank0
  9116  0CA0  146E               	bsf	_u_flg_din,0
  9117  0CA1                     l2985:	
  9118                           
  9119                           ;DIN.c: 91: }
  9120                           ;DIN.c: 94: if(u_in_sta_currTask.sel)
  9121  0CA1  1C7C               	btfss	_u_in_sta_currTask,0
  9122  0CA2  2CA5               	goto	l2989
  9123                           
  9124                           ;DIN.c: 95: u_flg_din.tmrLongSel=1;
  9125  0CA3  14EE               	bsf	_u_flg_din,1
  9126  0CA4  0008               	return
  9127  0CA5                     l2989:	
  9128                           
  9129                           ;DIN.c: 96: else
  9130                           ;DIN.c: 97: {
  9131                           ;DIN.c: 98: tmrLongSel=0;
  9132  0CA5  0021               	movlb	1	; select bank1
  9133  0CA6  01AA               	clrf	_tmrLongSel^(0+128)
  9134  0CA7  01AB               	clrf	(_tmrLongSel+1)^(0+128)
  9135                           
  9136                           ;DIN.c: 99: u_flg_din.tmrLongSel=0;
  9137  0CA8  0020               	movlb	0	; select bank0
  9138  0CA9  10EE               	bcf	_u_flg_din,1
  9139  0CAA  0008               	return
  9140  0CAB                     __end_of_DINTask:	
  9141                           
  9142                           	psect	text55
  9143  0BAF                     __ptext55:	
  9144 ;; *************** function _DINInit *****************
  9145 ;; Defined at:
  9146 ;;		line 24 in file "DIN.c"
  9147 ;; Parameters:    Size  Location     Type
  9148 ;;  sta             1    wreg     unsigned char 
  9149 ;; Auto vars:     Size  Location     Type
  9150 ;;  sta             1    1[COMMON] unsigned char 
  9151 ;; Return value:  Size  Location     Type
  9152 ;;		None               void
  9153 ;; Registers used:
  9154 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9155 ;; Tracked objects:
  9156 ;;		On entry : 0/0
  9157 ;;		On exit  : 0/0
  9158 ;;		Unchanged: 0/0
  9159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9161 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9163 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9164 ;;Total ram usage:        1 bytes
  9165 ;; Hardware stack levels used:    1
  9166 ;; Hardware stack levels required when called:    2
  9167 ;; This function calls:
  9168 ;;		Nothing
  9169 ;; This function is called by:
  9170 ;;		_main
  9171 ;; This function uses a non-reentrant model
  9172 ;;
  9173                           
  9174                           
  9175                           ;psect for function _DINInit
  9176  0BAF                     _DINInit:	
  9177                           
  9178                           ;incstack = 0
  9179                           ; Regs used in _DINInit: [wreg-fsr0h+status,2+status,0]
  9180                           ;DINInit@sta stored from wreg
  9181  0BAF  00F1               	movwf	DINInit@sta
  9182                           
  9183                           ;DIN.c: 26: switch(sta)
  9184  0BB0  2BBA               	goto	l2969
  9185  0BB1                     l2965:	
  9186                           ;DIN.c: 27: {
  9187                           ;DIN.c: 31: case 1:
  9188                           
  9189                           
  9190                           ;DIN.c: 33: u_flg_din.val=0;
  9191  0BB1  0020               	movlb	0	; select bank0
  9192  0BB2  01EE               	clrf	_u_flg_din
  9193                           
  9194                           ;DIN.c: 34: u_in_sta_currTask.val=0;
  9195  0BB3  01FC               	clrf	_u_in_sta_currTask
  9196                           
  9197                           ;DIN.c: 35: u_in_sta_tmpTask.val=0;
  9198  0BB4  01EF               	clrf	_u_in_sta_tmpTask
  9199                           
  9200                           ;DIN.c: 36: u_in_ev_up.val=0;
  9201  0BB5  0021               	movlb	1	; select bank1
  9202  0BB6  01B5               	clrf	_u_in_ev_up^(0+128)
  9203                           
  9204                           ;DIN.c: 37: u_in_ev_down.val=0;
  9205  0BB7  01B3               	clrf	_u_in_ev_down^(0+128)
  9206                           
  9207                           ;DIN.c: 38: u_in_ev_long.val=0;
  9208  0BB8  01B4               	clrf	_u_in_ev_long^(0+128)
  9209                           
  9210                           ;DIN.c: 43: }
  9211                           
  9212                           ;DIN.c: 39: break;
  9213  0BB9  0008               	return
  9214  0BBA                     l2969:	
  9215  0BBA  0871               	movf	DINInit@sta,w
  9216                           
  9217                           ; Switch size 1, requested type "space"
  9218                           ; Number of cases is 1, Range of values is 1 to 1
  9219                           ; switch strategies available:
  9220                           ; Name         Instructions Cycles
  9221                           ; simple_byte            4     3 (average)
  9222                           ; direct_byte           11     9 (fixed)
  9223                           ; jumptable            263     9 (fixed)
  9224                           ;	Chosen strategy is simple_byte
  9225  0BBB  3A01               	xorlw	1	; case 1
  9226  0BBC  1903               	skipnz
  9227  0BBD  2BB1               	goto	l2965
  9228  0BBE  2BBF               	goto	l297
  9229  0BBF                     l297:	
  9230  0BBF  0008               	return
  9231  0BC0                     __end_of_DINInit:	
  9232                           
  9233                           	psect	text56
  9234  0E72                     __ptext56:	
  9235 ;; *************** function _ADCInit *****************
  9236 ;; Defined at:
  9237 ;;		line 31 in file "ADC.c"
  9238 ;; Parameters:    Size  Location     Type
  9239 ;;  state           1    wreg     unsigned char 
  9240 ;; Auto vars:     Size  Location     Type
  9241 ;;  state           1    2[COMMON] unsigned char 
  9242 ;; Return value:  Size  Location     Type
  9243 ;;		None               void
  9244 ;; Registers used:
  9245 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9246 ;; Tracked objects:
  9247 ;;		On entry : 0/0
  9248 ;;		On exit  : 0/0
  9249 ;;		Unchanged: 0/0
  9250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9252 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9253 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9254 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9255 ;;Total ram usage:        2 bytes
  9256 ;; Hardware stack levels used:    1
  9257 ;; Hardware stack levels required when called:    2
  9258 ;; This function calls:
  9259 ;;		Nothing
  9260 ;; This function is called by:
  9261 ;;		_main
  9262 ;; This function uses a non-reentrant model
  9263 ;;
  9264                           
  9265                           
  9266                           ;psect for function _ADCInit
  9267  0E72                     _ADCInit:	
  9268                           
  9269                           ;incstack = 0
  9270                           ; Regs used in _ADCInit: [wreg-fsr0h+status,2+status,0]
  9271                           ;ADCInit@state stored from wreg
  9272  0E72  00F2               	movwf	ADCInit@state
  9273                           
  9274                           ;ADC.c: 33: switch(state)
  9275  0E73  2E94               	goto	l2947
  9276  0E74                     l2935:	
  9277                           ;ADC.c: 34: {
  9278                           ;ADC.c: 35: case 0:
  9279                           
  9280                           
  9281                           ;ADC.c: 37: ADCON0=0b00000101; ADCON1=0b10000011; FVRCON=0b10000001; ANSELA|=0b00000110;
      +                          ;
  9282  0E74  3005               	movlw	5
  9283  0E75  0021               	movlb	1	; select bank1
  9284  0E76  009D               	movwf	29	;volatile
  9285  0E77  3083               	movlw	131
  9286  0E78  009E               	movwf	30	;volatile
  9287  0E79  3081               	movlw	129
  9288  0E7A  0022               	movlb	2	; select bank2
  9289  0E7B  0097               	movwf	23	;volatile
  9290  0E7C  3006               	movlw	6
  9291  0E7D  00F1               	movwf	??_ADCInit
  9292  0E7E  0871               	movf	??_ADCInit,w
  9293  0E7F  0023               	movlb	3	; select bank3
  9294  0E80  048C               	iorwf	12,f	;volatile
  9295                           
  9296                           ;ADC.c: 38: break;
  9297  0E81  0008               	return
  9298  0E82                     l2939:	
  9299                           ;ADC.c: 39: case 1:
  9300                           
  9301                           
  9302                           ;ADC.c: 41: adc_ch=ADC_CH_OFF;
  9303  0E82  0020               	movlb	0	; select bank0
  9304  0E83  01E9               	clrf	_adc_ch
  9305                           
  9306                           ;ADC.c: 42: batt=0;
  9307  0E84  0021               	movlb	1	; select bank1
  9308  0E85  01A6               	clrf	_batt^(0+128)
  9309  0E86  01A7               	clrf	(_batt+1)^(0+128)
  9310                           
  9311                           ;ADC.c: 43: battV=0;
  9312  0E87  3000               	movlw	0
  9313  0E88  00A0               	movwf	_battV^(0+128)
  9314  0E89  3000               	movlw	0
  9315  0E8A  00A1               	movwf	(_battV+1)^(0+128)
  9316  0E8B  3000               	movlw	0
  9317  0E8C  00A2               	movwf	(_battV+2)^(0+128)
  9318                           
  9319                           ;ADC.c: 44: rmsCurr=0;
  9320  0E8D  3000               	movlw	0
  9321  0E8E  00A3               	movwf	_rmsCurr^(0+128)
  9322  0E8F  3000               	movlw	0
  9323  0E90  00A4               	movwf	(_rmsCurr+1)^(0+128)
  9324  0E91  3000               	movlw	0
  9325  0E92  00A5               	movwf	(_rmsCurr+2)^(0+128)
  9326                           
  9327                           ;ADC.c: 49: }
  9328                           
  9329                           ;ADC.c: 45: break;
  9330  0E93  0008               	return
  9331  0E94                     l2947:	
  9332  0E94  0872               	movf	ADCInit@state,w
  9333                           
  9334                           ; Switch size 1, requested type "space"
  9335                           ; Number of cases is 2, Range of values is 0 to 1
  9336                           ; switch strategies available:
  9337                           ; Name         Instructions Cycles
  9338                           ; simple_byte            7     4 (average)
  9339                           ; direct_byte           10     6 (fixed)
  9340                           ; jumptable            260     6 (fixed)
  9341                           ;	Chosen strategy is simple_byte
  9342  0E95  3A00               	xorlw	0	; case 0
  9343  0E96  1903               	skipnz
  9344  0E97  2E74               	goto	l2935
  9345  0E98  3A01               	xorlw	1	; case 1
  9346  0E99  1903               	skipnz
  9347  0E9A  2E82               	goto	l2939
  9348  0E9B  2E9C               	goto	l117
  9349  0E9C                     l117:	
  9350  0E9C  0008               	return
  9351  0E9D                     __end_of_ADCInit:	
  9352                           
  9353                           	psect	intentry
  9354  0004                     __pintentry:	
  9355 ;; *************** function _INTIsr *****************
  9356 ;; Defined at:
  9357 ;;		line 37 in file "Sensore.c"
  9358 ;; Parameters:    Size  Location     Type
  9359 ;;		None
  9360 ;; Auto vars:     Size  Location     Type
  9361 ;;		None
  9362 ;; Return value:  Size  Location     Type
  9363 ;;		None               void
  9364 ;; Registers used:
  9365 ;;		wreg, status,2, status,0, pclath, cstack
  9366 ;; Tracked objects:
  9367 ;;		On entry : 0/0
  9368 ;;		On exit  : 0/0
  9369 ;;		Unchanged: 0/0
  9370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9372 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9373 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9374 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9375 ;;Total ram usage:        1 bytes
  9376 ;; Hardware stack levels used:    1
  9377 ;; Hardware stack levels required when called:    1
  9378 ;; This function calls:
  9379 ;;		_SYSInt
  9380 ;; This function is called by:
  9381 ;;		Interrupt level 1
  9382 ;; This function uses a non-reentrant model
  9383 ;;
  9384                           
  9385  0004                     _INTIsr:	
  9386                           
  9387                           ;incstack = 0
  9388                           ; Regs used in _INTIsr: [wreg+status,2+status,0+pclath+cstack]
  9389  0004  3180               	pagesel	$
  9390  0005  0020               	movlb	0	; select bank0
  9391  0006  087F               	movf	127,w
  9392  0007  00F0               	movwf	??_INTIsr
  9393                           
  9394                           ;Sensore.c: 40: if(INTCONbits.TMR0IF)
  9395  0008  1D0B               	btfss	11,2	;volatile
  9396  0009  280D               	goto	i1l3097
  9397                           
  9398                           ;Sensore.c: 41: {
  9399                           ;Sensore.c: 43: INTCONbits.TMR0IF=0;
  9400  000A  110B               	bcf	11,2	;volatile
  9401                           
  9402                           ;Sensore.c: 46: SYSInt();
  9403  000B  318A  22E8         	fcall	_SYSInt
  9404  000D                     i1l3097:	
  9405                           
  9406                           ;Sensore.c: 47: }
  9407                           ;Sensore.c: 50: if(IOCBFbits.IOCBF2)
  9408  000D  0027               	movlb	7	; select bank7
  9409  000E  1916               	btfsc	22,2	;volatile
  9410                           
  9411                           ;Sensore.c: 51: IOCBFbits.IOCBF2=0;
  9412  000F  1116               	bcf	22,2	;volatile
  9413  0010  0870               	movf	??_INTIsr,w
  9414  0011  0020               	movlb	0	; select bank0
  9415  0012  00FF               	movwf	127
  9416  0013  0009               	retfie
  9417  0014                     __end_of_INTIsr:	
  9418                           
  9419                           	psect	text58
  9420  0AE8                     __ptext58:	
  9421 ;; *************** function _SYSInt *****************
  9422 ;; Defined at:
  9423 ;;		line 35 in file "SYS.c"
  9424 ;; Parameters:    Size  Location     Type
  9425 ;;		None
  9426 ;; Auto vars:     Size  Location     Type
  9427 ;;		None
  9428 ;; Return value:  Size  Location     Type
  9429 ;;		None               void
  9430 ;; Registers used:
  9431 ;;		wreg
  9432 ;; Tracked objects:
  9433 ;;		On entry : 0/0
  9434 ;;		On exit  : 0/0
  9435 ;;		Unchanged: 0/0
  9436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9440 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9441 ;;Total ram usage:        0 bytes
  9442 ;; Hardware stack levels used:    1
  9443 ;; This function calls:
  9444 ;;		Nothing
  9445 ;; This function is called by:
  9446 ;;		_INTIsr
  9447 ;; This function uses a non-reentrant model
  9448 ;;
  9449                           
  9450                           
  9451                           ;psect for function _SYSInt
  9452  0AE8                     _SYSInt:	
  9453                           
  9454                           ;SYS.c: 38: u_SYS_STA.TICK=1;
  9455                           
  9456                           ;incstack = 0
  9457                           ; Regs used in _SYSInt: [wreg]
  9458  0AE8  0021               	movlb	1	; select bank1
  9459  0AE9  1432               	bsf	_u_SYS_STA^(0+128),0
  9460                           
  9461                           ;SYS.c: 41: TMR0=255-156;
  9462  0AEA  3063               	movlw	99
  9463  0AEB  0020               	movlb	0	; select bank0
  9464  0AEC  0095               	movwf	21	;volatile
  9465  0AED  0008               	return
  9466  0AEE                     __end_of_SYSInt:	
  9467  007E                     btemp	set	126	;btemp
  9468  007E                     wtemp	set	126
  9469  007E                     wtemp0	set	126
  9470  0080                     wtemp1	set	128
  9471  0082                     wtemp2	set	130
  9472  0084                     wtemp3	set	132
  9473  0086                     wtemp4	set	134
  9474  0088                     wtemp5	set	136
  9475  007F                     wtemp6	set	127
  9476  007E                     ttemp	set	126
  9477  007E                     ttemp0	set	126
  9478  0081                     ttemp1	set	129
  9479  0084                     ttemp2	set	132
  9480  0087                     ttemp3	set	135
  9481  007F                     ttemp4	set	127
  9482  007E                     ltemp	set	126
  9483  007E                     ltemp0	set	126
  9484  0082                     ltemp1	set	130
  9485  0086                     ltemp2	set	134
  9486  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    5
    Data        55
    BSS         101
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     73      80
    BANK1            80      0      55
    BANK2            80      0      46
    BANK3            80      0      47
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    RTXRcvPkt@dst	PTR unsigned char  size(1) Largest target is 10
		 -> pktRx(BANK1[10]), 

    RTXSndPkt@src	PTR unsigned char  size(1) Largest target is 10
		 -> pktTx(BANK1[10]), 

    NVMWrite@source	PTR unsigned char  size(1) Largest target is 5
		 -> pgm_cfg(BANK1[5]), 

    NVMRead@dest	PTR unsigned char  size(1) Largest target is 5
		 -> pgm_cfg(BANK1[5]), 

    CC1Write@src	PTR unsigned char  size(2) Largest target is 47
		 -> pktTx(BANK1[10]), cc1PaTable(BANK1[8]), cc1InitVal(BANK3[47]), 

    CC1Read@dst	PTR unsigned char  size(2) Largest target is 46
		 -> pktRx(BANK1[10]), RTXReadPkt@numRxByte(BANK0[1]), RTXSndPkt@numTxByte(BANK0[1]), RTXSndPkt@numRxByte(BANK0[1]), 
		 -> cc1InitVal_tmp(BANK2[46]), 

    SPIWrite@srcPtr	PTR unsigned char  size(2) Largest target is 47
		 -> pktTx(BANK1[10]), cc1PaTable(BANK1[8]), cc1InitVal(BANK3[47]), CC1Write@cc1Addr(BANK0[1]), 
		 -> CC1Read@cc1Addr(BANK0[1]), CC1Strobe@cc1Stb(COMMON[1]), 

    SPIRead@dstPtr	PTR unsigned char  size(2) Largest target is 46
		 -> pktRx(BANK1[10]), RTXReadPkt@numRxByte(BANK0[1]), RTXSndPkt@numTxByte(BANK0[1]), RTXSndPkt@numRxByte(BANK0[1]), 
		 -> cc1InitVal_tmp(BANK2[46]), 


Critical Paths under _main in COMMON

    _main->_PGMInit
    _CC1Sleep->_CC1Strobe
    _CC1LoadREG->_CC1Read
    _PGMSelLong->_LEDNormalFlash
    _PGMSelLong->_PGMWriteNvm
    _PGMSelDown->_PGMWriteNvm
    _RTXReadPkt->_CC1Read
    _LEDFastFlash->_DLYDelay_ms
    _ADCConv->___lwtoft
    ___ftsub->___ftadd
    ___ftadd->___ftpack
    ___ftmul->___lwtoft
    ___lwtoft->___ftpack
    ___lltoft->___ftpack
    ___ftdiv->___lwtoft
    _RTXSndPkt->_CC1Read
    _CC1Write->_SPIWrite
    _CC1Strobe->_SPIWrite
    _RTXRcvPkt->_CC1Read
    _CC1Read->_SPIRead
    _LEDNormalFlash->_DLYDelay_ms
    _PGMReadNvm->_NVMRead
    _PGMCheckNvm->_PGMNvmReset
    _PGMNvmReset->_PGMWriteNvm
    _PGMWriteNvm->_NVMWrite

Critical Paths under _INTIsr in COMMON

    None.

Critical Paths under _main in BANK0

    _RTXTick->_RTXSendData
    _RTXAwake->_RTXInit
    _CC1Init->_CC1LoadREG
    _CC1LoadREG->_CC1Read
    _RTXTask->_RTXReadPkt
    _RTXStartSendData->_ADCConv
    _RTXSendData->_RTXSndPkt
    _ADCConv->_sqrt
    _sqrt->___ftmul
    ___ftsub->___ftadd
    ___ftmul->___lltoft
    ___ftdiv->___ftmul
    _RTXSendRPgm->_RTXSndPkt
    _RTXSndPkt->_CC1Read
    _RTXRcvPkt->_CC1Read
    _PGMWriteNvm->_NVMWrite

Critical Paths under _INTIsr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTIsr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTIsr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTIsr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTIsr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTIsr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTIsr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTIsr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTIsr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTIsr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTIsr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTIsr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTIsr in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  124548
                                             71 BANK0      2     2      0
                            _ADCInit
                            _CC1Init
                            _DINInit
                            _DINTask
                             _INInit
                            _LEDInit
                            _NVMInit
                            _OUTInit
                            _PGMInit
                            _RTXInit
                            _RTXTask
                            _SPIInit
                            _SYSInit
                            _SYSTask
 ---------------------------------------------------------------------------------
 (1) _SYSTask                                              0     0      0   45382
                            _DINTick
                          _PGMPgmOff
                         _PGMSelDown
                         _PGMSelLong
                            _PGMTick
                           _RTXAwake
                            _RTXTick
                           _SLPSleep
 ---------------------------------------------------------------------------------
 (2) _SLPSleep                                             9     9      0     965
                                             10 COMMON     1     1      0
                                              0 BANK0      8     8      0
                           _CC1Sleep
 ---------------------------------------------------------------------------------
 (3) _CC1Sleep                                             0     0      0     690
                          _CC1Strobe
 ---------------------------------------------------------------------------------
 (2) _RTXTick                                              0     0      0    5383
                        _RTXSendData
 ---------------------------------------------------------------------------------
 (2) _RTXAwake                                             0     0      0   36678
                            _CC1Init
                        _DLYDelay_ms
                            _RTXInit
 ---------------------------------------------------------------------------------
 (3) _RTXInit                                              1     1      0   31169
                                             63 BANK0      1     1      0
                          _CC1Strobe
                   _RTXStartSendData
 ---------------------------------------------------------------------------------
 (3) _CC1Init                                              1     1      0    4759
                                              4 BANK0      1     1      0
                         _CC1LoadREG
                          _CC1Strobe
                        _DLYDelay_ms
 ---------------------------------------------------------------------------------
 (4) _CC1LoadREG                                           1     1      0    3288
                                              3 BANK0      1     1      0
                            _CC1Read
                           _CC1Write
 ---------------------------------------------------------------------------------
 (2) _PGMTick                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PGMSelLong                                           0     0      0    1576
                     _LEDNormalFlash
                        _PGMWriteNvm
 ---------------------------------------------------------------------------------
 (2) _PGMSelDown                                           1     1      0     780
                                             10 COMMON     1     1      0
                        _PGMWriteNvm
 ---------------------------------------------------------------------------------
 (2) _PGMPgmOff                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _DINTick                                              1     1      0       0
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSInit                                              2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _SPIInit                                              2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _RTXTask                                              0     0      0   41525
                         _RTXReadPkt
 ---------------------------------------------------------------------------------
 (2) _RTXReadPkt                                           2     2      0   41525
                                             69 BANK0      2     2      0
                            _CC1Read
                          _CC1Strobe
                     _LEDNormalFlash
                        _PGMWriteNvm
                          _RTXRcvPkt
                        _RTXSendRPgm
                   _RTXStartSendData
 ---------------------------------------------------------------------------------
 (4) _RTXStartSendData                                     0     0      0   30448
                            _ADCConv
                        _DLYDelay_ms
                        _RTXSendData
 ---------------------------------------------------------------------------------
 (3) _RTXSendData                                          7     7      0    5383
                                              8 BANK0      7     7      0
                       _LEDFastFlash
                          _RTXSndPkt
 ---------------------------------------------------------------------------------
 (4) _LEDFastFlash                                         3     3      0     796
                                              7 COMMON     3     3      0
                        _DLYDelay_ms
 ---------------------------------------------------------------------------------
 (5) _ADCConv                                             26    26      0   24315
                                             39 BANK0     24    24      0
                        _DLYDelay_ms
                            ___ftdiv
                            ___ftmul
                           ___lltoft
                            ___lwdiv
                           ___lwtoft
                             ___wmul
                               _sqrt
 ---------------------------------------------------------------------------------
 (6) _sqrt                                                19    16      3    9580
                                             20 BANK0     19    16      3
                             ___ftge
                            ___ftmul
                            ___ftsub
 ---------------------------------------------------------------------------------
 (7) ___ftsub                                              6     0      6    4153
                                             10 BANK0      6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (8) ___ftadd                                             13     7      6    3903
                                              9 COMMON     3     3      0
                                              0 BANK0     10     4      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             16    10      6    4398
                                              4 BANK0     16    10      6
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftge                                               9     3      6     392
                                              1 COMMON     9     3      6
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4     220
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___lwtoft                                             4     1      3    2632
                                              9 COMMON     3     0      3
                                              0 BANK0      1     1      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              8     4      4     290
                                              1 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (6) ___lltoft                                             6     2      4    2703
                                              9 COMMON     2     2      0
                                              0 BANK0      4     0      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    3560
                                             20 BANK0     16    10      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftpack                                             8     3      5    2524
                                              1 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (3) _RTXSendRPgm                                          1     1      0    4383
                                              8 BANK0      1     1      0
                          _RTXSndPkt
 ---------------------------------------------------------------------------------
 (4) _RTXSndPkt                                            6     5      1    4383
                                              3 BANK0      5     4      1
                            _CC1Read
                          _CC1Strobe
                           _CC1Write
 ---------------------------------------------------------------------------------
 (5) _CC1Write                                             6     3      3    1214
                                              7 COMMON     4     1      3
                                              0 BANK0      2     2      0
                           _SPIWrite
 ---------------------------------------------------------------------------------
 (4) _CC1Strobe                                            4     4      0     690
                                              7 COMMON     3     3      0
                           _SPIWrite
 ---------------------------------------------------------------------------------
 (3) _RTXRcvPkt                                            3     2      1    2255
                                              3 BANK0      3     2      1
                            _CC1Read
 ---------------------------------------------------------------------------------
 (5) _CC1Read                                              6     3      3    2074
                                              9 COMMON     3     0      3
                                              0 BANK0      3     3      0
                            _SPIRead
                           _SPIWrite
 ---------------------------------------------------------------------------------
 (5) _SPIWrite                                             6     3      3     622
                                              1 COMMON     6     3      3
 ---------------------------------------------------------------------------------
 (6) _SPIRead                                              8     5      3     244
                                              1 COMMON     8     5      3
 ---------------------------------------------------------------------------------
 (3) _LEDNormalFlash                                       3     3      0     796
                                              7 COMMON     3     3      0
                        _DLYDelay_ms
 ---------------------------------------------------------------------------------
 (5) _DLYDelay_ms                                          6     4      2     750
                                              1 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (1) _PGMInit                                              1     1      0    1128
                                             11 COMMON     1     1      0
                        _PGMCheckNvm
                         _PGMReadNvm
 ---------------------------------------------------------------------------------
 (2) _PGMReadNvm                                           2     2      0     326
                                              8 COMMON     2     2      0
                            _NVMRead
 ---------------------------------------------------------------------------------
 (3) _NVMRead                                              7     3      4     326
                                              1 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) _PGMCheckNvm                                          0     0      0     780
                        _PGMNvmReset
 ---------------------------------------------------------------------------------
 (3) _PGMNvmReset                                          1     1      0     780
                                             10 COMMON     1     1      0
                        _PGMWriteNvm
 ---------------------------------------------------------------------------------
 (3) _PGMWriteNvm                                          2     2      0     780
                                              8 COMMON     2     2      0
                           _NVMWrite
 ---------------------------------------------------------------------------------
 (4) _NVMWrite                                            76    72      4     780
                                              1 COMMON     7     3      4
                                              0 BANK0     69    69      0
 ---------------------------------------------------------------------------------
 (1) _OUTInit                                              2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _NVMInit                                              1     1      0      22
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LEDInit                                              1     1      0      22
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _INInit                                               2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DINTask                                              1     1      0       0
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DINInit                                              1     1      0      22
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADCInit                                              2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _INTIsr                                              1     1      0       0
                                              0 COMMON     1     1      0
                             _SYSInt
 ---------------------------------------------------------------------------------
 (11) _SYSInt                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCInit
   _CC1Init
     _CC1LoadREG
       _CC1Read
         _SPIRead
         _SPIWrite
       _CC1Write
         _SPIWrite
     _CC1Strobe
       _SPIWrite
     _DLYDelay_ms
   _DINInit
   _DINTask
   _INInit
   _LEDInit
   _NVMInit
   _OUTInit
   _PGMInit
     _PGMCheckNvm
       _PGMNvmReset
         _PGMWriteNvm
           _NVMWrite
     _PGMReadNvm
       _NVMRead
   _RTXInit
     _CC1Strobe
       _SPIWrite
     _RTXStartSendData
       _ADCConv
         _DLYDelay_ms
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___lltoft
           ___ftpack
         ___lwdiv
         ___lwtoft
           ___ftpack
         ___wmul
         _sqrt
           ___ftge
           ___ftmul
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftsub
             ___ftadd
               ___ftpack
       _DLYDelay_ms
       _RTXSendData
         _LEDFastFlash
           _DLYDelay_ms
         _RTXSndPkt
           _CC1Read
             _SPIRead
             _SPIWrite
           _CC1Strobe
             _SPIWrite
           _CC1Write
             _SPIWrite
   _RTXTask
     _RTXReadPkt
       _CC1Read
         _SPIRead
         _SPIWrite
       _CC1Strobe
         _SPIWrite
       _LEDNormalFlash
         _DLYDelay_ms
       _PGMWriteNvm
         _NVMWrite
       _RTXRcvPkt
         _CC1Read
           _SPIRead
           _SPIWrite
       _RTXSendRPgm
         _RTXSndPkt
           _CC1Read
             _SPIRead
             _SPIWrite
           _CC1Strobe
             _SPIWrite
           _CC1Write
             _SPIWrite
       _RTXStartSendData
         _ADCConv
           _DLYDelay_ms
           ___ftdiv
             ___ftmul (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___lltoft
             ___ftpack
           ___lwdiv
           ___lwtoft
             ___ftpack
           ___wmul
           _sqrt
             ___ftge
             ___ftmul
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftsub
               ___ftadd
                 ___ftpack
         _DLYDelay_ms
         _RTXSendData
           _LEDFastFlash
             _DLYDelay_ms
           _RTXSndPkt
             _CC1Read
               _SPIRead
               _SPIWrite
             _CC1Strobe
               _SPIWrite
             _CC1Write
               _SPIWrite
   _SPIInit
   _SYSInit
   _SYSTask
     _DINTick
     _PGMPgmOff
     _PGMSelDown
       _PGMWriteNvm
         _NVMWrite
     _PGMSelLong
       _LEDNormalFlash
         _DLYDelay_ms
       _PGMWriteNvm
         _NVMWrite
     _PGMTick
     _RTXAwake
       _CC1Init
         _CC1LoadREG
           _CC1Read
             _SPIRead
             _SPIWrite
           _CC1Write
             _SPIWrite
         _CC1Strobe
           _SPIWrite
         _DLYDelay_ms
       _DLYDelay_ms
       _RTXInit
         _CC1Strobe
           _SPIWrite
         _RTXStartSendData
           _ADCConv
             _DLYDelay_ms
             ___ftdiv
               ___ftmul (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___lltoft
               ___ftpack
             ___lwdiv
             ___lwtoft
               ___ftpack
             ___wmul
             _sqrt
               ___ftge
               ___ftmul
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftsub
                 ___ftadd
                   ___ftpack
           _DLYDelay_ms
           _RTXSendData
             _LEDFastFlash
               _DLYDelay_ms
             _RTXSndPkt
               _CC1Read
                 _SPIRead
                 _SPIWrite
               _CC1Strobe
                 _SPIWrite
               _CC1Write
                 _SPIWrite
     _RTXTick
       _RTXSendData
         _LEDFastFlash
           _DLYDelay_ms
         _RTXSndPkt
           _CC1Read
             _SPIRead
             _SPIWrite
           _CC1Strobe
             _SPIWrite
           _CC1Write
             _SPIWrite
     _SLPSleep
       _CC1Sleep
         _CC1Strobe
           _SPIWrite

 _INTIsr (ROOT)
   _SYSInt

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     49      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      37       7       68.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      2E       9       57.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      2F      11       58.8%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      F1      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      F1      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed Feb 17 20:32:03 2016

       __size_of_CC1Strobe 0014                 __CFG_CP$ON 0000            SLPSleep@WPUBTmp 0022  
                       l16 0C39                         l38 0E71                         l62 0D22  
            ?_LEDFastFlash 0070                         l58 0D07                         l67 0D70  
                       l76 0C83        ___wmul@multiplicand 0073               ?_DLYDelay_ms 0071  
             ___ftadd@exp1 007B               ___ftadd@exp2 007A               ___ftadd@sign 0079  
                      l200 0B1B                        l202 0B23                        l122 004A  
                      l131 01E8                        l300 0E36                        l117 0E9C  
                      l302 0E35                        l240 0B2E                        l147 0BEE  
                      l252 03F1                        l245 0DC3                        l262 0438  
                      l254 03FC                        l255 0420                        l272 0498  
                      l256 040B                        l520 0EE2                        l512 0673  
                      l177 0C6F                        l267 047F                        l259 042F  
                      l269 0486                        l297 0BBF                        l474 0DAD  
                      l379 0BEB                        l596 0DF9                        l677 079E  
                      l854 0725                        l686 0C42                        l678 07DF  
                      l855 072D                        l847 0712                        l679 07E0  
                      l878 0299            __end_of_CC1Init 0C70            __end_of_CC1Read 0D66  
          __end_of_ADCConv 01FA            __end_of_ADCInit 0E9D               __CFG_BORV$LO 0000  
                      wreg 0009                 _RTXReadPkt 0744            __end_of_DINInit 0BC0  
          __end_of_DINTask 0CAB            __end_of_DINTick 0E49               __CFG_LVP$OFF 0000  
         _RTXStartSendData 0B81            __end_of_LEDInit 0B24               ___ftdiv@cntr 003E  
             ___ftdiv@sign 0043                       l1046 0319                       l1048 0352  
                     l3005 0BE3                       l3013 0DD6                       l3031 0DEE  
                     l3211 026F                       l3203 0252                       l3035 0DF1  
                     l3133 06EF                       l3301 050C                       l3221 028B  
                     l3213 0274                       l3135 06F9                       l2271 0FF1  
                     l3231 02BD                       l3223 0295                       l3215 0278  
                     l3161 0D75                       l3145 0723                       l3137 06FE  
                     l3129 06E8                       l3313 0528                       l3241 02D8  
                     l3209 0265                       l3171 0C88                       l3147 0717  
                     l3411 0EB3                       l2267 0FDB                       l3227 02AB  
                     l3165 0D67                       l3173 0C71                       l2461 0F6C  
                     l3309 0520                       l3181 0222                       l2471 0F87  
                     l3191 0238                       l3327 0CD1                       l3409 0EA1  
                     l2385 0C3C                       l3185 0229                       l2467 0F7E  
                     l2459 0F60                       l3339 0321                       l3443 00CF  
                     l3427 0059                       l2379 0CE9                       l2901 0C34  
                     l2581 0461                       l3285 04C9                       l2911 0E6C  
                     l2575 045B                       l2807 0B38                       l3375 057D  
                     l3279 04B3                       l3447 00D8                       l3463 01D5  
                     l3527 0C58                       l3535 0C66                       l3615 06D5  
                     l3607 06A9                       l3703 0F41                       l2905 0E4B  
                     l3369 0567                       l3297 0504                       l3457 0195  
                     l3465 01E1                       l3545 0D8D                       l3553 0DA1  
                     l3563 0EDC                       l3459 01D0                       l3651 0780  
                     l2931 0D17                       l3547 0D92                       l3715 0F51  
                     l2589 0481                       l2597 0493                       l2693 0DB1  
                     l3397 05D7                       l3389 05BE                       l3469 01ED  
                     l3709 0F4A                       l2935 0E74                       l2679 0CAD  
                     l3487 061C                       l3479 0604                       l2953 0B1E  
                     l2961 0B29                       l3489 0622                       l2939 0E82  
                     l2947 0E94                       l3691 0F33                       l2965 0BB1  
                     l2981 0C9D                       l2893 0C21                       l2957 0B26  
                     l2969 0BBA                       l2985 0CA1                       l3697 0F3A  
                     l2995 0BD6                       l2989 0CA5                       l2997 0BDA  
             __CFG_WDTE$ON 0000          NVMWrite@bufTmpRow 0020                       u2205 0F63  
                     u2225 0F6D                       u2065 0C43                       u2235 0F77  
                     u2075 0C48                       u3115 0253                       u2245 0F7F  
                     u3205 028C                       u3305 050D                       u3145 0266  
                     u3315 0513                       u3405 033D                       u3175 0279  
                     _PIE1 0091                       _PIE2 0092                       u3505 0EA7  
                     u3345 0529                       u1835 0BF4                       u3355 052F  
                     u3275 04D5                       u3445 058F                       u3285 04E5  
                     u3455 059F                       u2905 070D                       u3465 05BF  
                     u3475 05CE                       u2925 071E                       u3485 05D8  
                     u3817 01E3                       u3827 0BFB                       u2965 0734  
                     u2885 06F4                       _PIR1 0011                       _PIR2 0012  
                     _TMR0 0015                       _WPUB 020D            __end_of_PGMInit 0BEC  
          __end_of_PGMTick 0B9F               __CFG_WRT$OFF 0000              __CFG_FCMEN$ON 0000  
         __end_of_CC1Sleep 0B08                       _batt 00A6                       _main 0798  
         __end_of_CC1Write 0D44               ___ftpack@arg 0071            __end_of_NVMInit 0B2F  
          __end_of_NVMRead 0DD4               ___ftpack@exp 0074            __end_of_SPIInit 0D23  
          __end_of_SPIRead 0D8A                       fsr0h 0005                       fsr1h 0007  
                     fsr0l 0004                       indf0 0000                       indf1 0001  
                     fsr1l 0006                       btemp 007E                       _sqrt 02F0  
          __end_of_OUTInit 0E72              __CFG_BOREN$ON 0000                       ltemp 007E  
                     start 0014            __end_of_RTXInit 0DAE                       ttemp 007E  
        NVMWrite@latchAddr 0063            __end_of_RTXTask 0AF4            __end_of_RTXTick 0B47  
                     wtemp 007E              __CFG_IESO$OFF 0000            __end_of_SYSInit 0DFA  
          __end_of_SYSTask 0F58               ___ftmul@cntr 0032               ___ftmul@sign 0033  
             _ADCConv$1407 0055                ?_PGMReadNvm 0070              __CFG_LPBOR$ON 0000  
           ??_LEDFastFlash 0077                ?_PGMSelDown 0070                ?_PGMSelLong 0070  
              _RTXSendData 05F9                _RTXSendRPgm 0EC8               SPIInit@state 0072  
                    ?_main 0070            __end_of___ftadd 02F0            __end_of___ftdiv 05F9  
                    ?_sqrt 0034            __end_of___ftmul 0550                      _T1CON 0018  
          __end_of___ftsub 0CE7         __size_of_PGMPgmOff 0004                      _IOCBN 0395  
                    _IOCBP 0394            __end_of___lwdiv 0F8C                      _PMADR 0191  
                    _PMDAT 0193                      _PORTA 000C                      _PORTC 000E  
                    _TRISA 008C                      _TRISB 008D                      _TRISC 008E  
            __CFG_PWRTE$ON 0000               ___lltoft@exp 007A                      _battV 00A0  
              _sys_pgm_sta 00B0          __end_of_CC1Strobe 0BD4                      _errno 00A8  
                    _pktRx 00B6                      _pktTx 00C0              ___ftpack@sign 0075  
                    main@i 0068           __end_of_SLPSleep 06E0           __end_of_NVMWrite 049C  
         __end_of_SPIWrite 0C8D                      ltemp0 007E                      ltemp1 0082  
                    ltemp2 0086                      ltemp3 0080           __end_of_RTXAwake 0C1F  
                    ttemp0 007E                      ttemp1 0081                      ttemp2 0084  
                    ttemp3 0087                      ttemp4 007F                      sqrt@i 0040  
                    sqrt@q 0041                      sqrt@x 0044                      sqrt@y 0034  
                    sqrt@z 003D          LEDNormalFlash@num 0078                      status 0003  
                    wtemp0 007E                      wtemp1 0080                      wtemp2 0082  
                    wtemp3 0084                      wtemp4 0086                      wtemp5 0088  
                    wtemp6 007F               ?_PGMCheckNvm 0070             __CFG_MCLRE$OFF 0000  
          __initialization 0016               DLYDelay_ms@i 0075               __end_of_main 07EB  
       __size_of_RTXRcvPkt 000E         __size_of_RTXSndPkt 0039               __end_of_sqrt 03E0  
                ??_CC1Init 007C                  ??_CC1Read 0020                  ??_ADCConv 0047  
                ??_ADCInit 0071             CC1Strobe@e_stb 0078               ??_CC1LoadREG 0023  
                   ??_main 0067                 _cc1PaTable 00CF                     ??_sqrt 0037  
             CC1Init@state 0024                  ??_DINInit 0071               NVMWrite@addr 0071  
                ??_DINTask 0071                  ??_DINTick 0071                 _cc1InitVal 01A0  
                ??_LEDInit 0071               ?_PGMNvmReset 0070                  ??_PGMInit 007B  
                ??_PGMTick 0071                ?_RTXReadPkt 0070                     _ADCON0 009D  
                   _ADCON1 009E              SPIRead@dstPtr 0071                  ??_NVMInit 0071  
                ??_NVMRead 0075                     _ADRESH 009C                     _ADRESL 009B  
                ??_SPIInit 0071                  ??_SPIRead 0074             _LEDNormalFlash 0CAB  
                ??_OUTInit 0071                     _ANSELA 018C                     _ANSELB 018D  
                   _ANSELC 018E           __end_of___ftpack 0744        __size_of_PGMReadNvm 000F  
         __end_of___lltoft 0EC8                  ??_RTXInit 007C               ?_PGMWriteNvm 0070  
      __size_of_PGMSelDown 000E                     i1l3097 000D                  ??_RTXTask 007C  
                ??_RTXTick 007C        __size_of_PGMSelLong 0009                     _INTCON 000B  
                   _FVRCON 0117                  ??_SYSInit 0071           __end_of___lwtoft 07FF  
                   _PMCON1 0195                     _PMCON2 0196                  ??_SYSTask 007C  
                   _INTIsr 0004                     _OSCCON 0099                     _INInit 0C1F  
                   _WDTCON 0097                     _SSPBUF 0211              LEDFastFlash@i 0079  
        __end_of_PGMPgmOff 0AE8                     _SYSInt 0AE8         __end_of_CC1LoadREG 0E21  
      RTXReadPkt@numRxByte 0066                     ___ftge 0FC5                     _adc_ch 0069  
                   ___wmul 0C3A                  ??___ftadd 0026             __CFG_STVREN$ON 0000  
                ??___ftdiv 003A                  ??___ftmul 002A                  ??___ftsub 007C  
                ??___lwdiv 0075                     _tmrPgm 006C      ___ftmul@f3_as_product 002F  
                ?_CC1Sleep 0070       __size_of_DLYDelay_ms 0019                  ?_CC1Write 0077  
   __end_of_LEDNormalFlash 0CC9                     sqrt@og 003A          __end_of_RTXRcvPkt 0B55  
        __end_of_RTXSndPkt 0FC5       __end_of_LEDFastFlash 0D05    __end_of__initialization 0046  
               ___ftadd@f1 0020                 ___ftadd@f2 0023                 ___ftge@ff1 0071  
               ___ftge@ff2 0074                 ___ftdiv@f1 0037                 ___ftdiv@f2 0034  
               ___ftdiv@f3 003F                 ___ftmul@f1 0024                 ___ftmul@f2 0027  
               ___ftsub@f1 002D                 ___ftsub@f2 002A             __pcstackCOMMON 0070  
             __pidataBANK1 0B08               __pidataBANK3 0EF7        __size_of_RTXReadPkt 0054  
 __end_of_RTXStartSendData 0B90                 ___lltoft@c 0020            NVMWrite@rowAddr 0060  
                ?_SLPSleep 0070                  ?_NVMWrite 0071            CC1Strobe@cc1Stb 0079  
               ___lwtoft@c 0079                  ?_SPIWrite 0071                 CC1Read@len 007B  
               CC1Read@dst 0079                 ??_CC1Sleep 007A                  ?_RTXAwake 0070  
               ??_CC1Write 007A               CC1Write@addr 0020             ADCConv@sumBatt 005C  
           ADCConv@sumCurr 0058            ?_LEDNormalFlash 0070                 __pbssBANK0 0069  
               __pbssBANK1 00A0                 __pbssBANK2 0120                    ?_INTIsr 0070  
                  ?_INInit 0070            __CFG_VCAPEN$OFF 0000                    ?_SYSInt 0070  
                INInit@sta 0072       __size_of_PGMCheckNvm 000C                 __pmaintext 0798  
                  ?___ftge 0071               ??_PGMReadNvm 0078            CC1Write@cc1Addr 0021  
                  ?___wmul 0071               ??_PGMSelDown 007A               ??_PGMSelLong 007A  
               __pintentry 0004               ?_RTXSendData 0070               ?_RTXSendRPgm 0070  
                  _CC1Init 0C55                    _CC1Read 0D44                    _ADCConv 0049  
                  _ADCInit 0E72          _u_in_sta_currTask 007C                  ?___ftpack 0071  
               ??_SLPSleep 007A                 ??_NVMWrite 0075                 _cntSndData 00AC  
                ?___lltoft 0020                 ??_SPIWrite 0074                  ?___lwtoft 0079  
                  _DINInit 0BAF                 ??_RTXAwake 007C                    _DINTick 0E21  
                  _DINTask 0C8D               ADCInit@state 0072                    _LEDInit 0B19  
       RTXSendData@valBatt 002C                    _PGMInit 0BD4                    _PGMTick 0B90  
       RTXSendData@valTemp 0029       __size_of_PGMNvmReset 0010                    _SSPCON1 0215  
                  _SSPCON2 0216                    _NVMInit 0B24                    _NVMRead 0DAE  
                  _SPIInit 0D05                    _SPIRead 0D66                    _SSPSTAT 0214  
                  _OUTInit 0E49                    _RTXInit 0D8A                    _RTXTick 0B3B  
                  _RTXTask 0AEE         __end_of_PGMReadNvm 0B81                    _SYSInit 0DD4  
                  _SYSTask 0F26         __end_of_PGMSelDown 0B63         __end_of_PGMSelLong 0B19  
                _CC1Strobe 0BC0            __size_of_INTIsr 0010            __size_of_INInit 001B  
     __size_of_PGMWriteNvm 000F            __size_of_SYSInt 0006                  NVMWrite@i 0062  
                NVMWrite@j 0064                  SPIWrite@i 0076            __size_of___ftge 003B  
                  ___ftadd 01FA               RTXInit@state 005F                    ___ftdiv 0550  
          __size_of___wmul 001B                    ___ftmul 049C                    ___ftsub 0CC9  
                  ___lwdiv 0F58                 ??___ftpack 0076                 ??___lltoft 0079  
                  __ptext1 0F26                    __ptext2 0676                    __ptext3 0B00  
                  __ptext4 0B3B                    __ptext5 0C05                    __ptext6 0D8A  
                  __ptext7 0C55                    __ptext8 0DFA                    __ptext9 0B90  
                  _flg_slp 006A                 ??___lwtoft 0020                    _pgm_cfg 00CA  
                  _pgm_flg 006B      __size_of_LEDFastFlash 001E                  _IOCBFbits 0396  
                  _rmsCurr 00A3               ??_RTXReadPkt 0065                    clrloop0 0AFB  
                  _rtx_flg 00AE               RTXRcvPkt@len 0023               RTXRcvPkt@dst 0025  
     end_of_initialization 0046                 _u_in_ev_up 00B5                 ?_CC1Strobe 0070  
       RTXSndPkt@numRxByte 0025                    init_ram 0AF4         RTXSndPkt@numTxByte 0027  
                  initloop 0AF5               RTXSndPkt@len 0023               RTXSndPkt@src 0026  
                _PGMPgmOff 0AE4                 _tmrDbncSel 00B1               __pstringtext 1000  
       __end_of_RTXReadPkt 0798                 DINInit@sta 0071               _LEDFastFlash 0CE7  
                _PORTBbits 000D                 _tmrLongSel 00AA           __CFG_FOSC$INTOSC 0000  
        __size_of_CC1Sleep 0008          __size_of_CC1Write 0021                NVMRead@addr 0071  
              NVMRead@dest 0073                  _RTXRcvPkt 0B47                  _RTXSndPkt 0F8C  
              ___ftdiv@exp 0042             __end_of_INTIsr 0014             __end_of_INInit 0C3A  
           __end_of_SYSInt 0AEE                ___ftmul@exp 002E                 ?_PGMPgmOff 0070  
               LEDInit@sta 0071             DLYDelay_ms@val 0071          ?_RTXStartSendData 0070  
           __end_of___ftge 1000             __end_of___wmul 0C55              ??_DLYDelay_ms 0073  
       ??_RTXStartSendData 007C       __size_of_RTXSendData 007D           ??_LEDNormalFlash 0077  
     __size_of_RTXSendRPgm 002F             _cc1InitVal_tmp 0120               SYSInit@state 0072  
        __size_of_SLPSleep 006A          __size_of_NVMWrite 00BC          __size_of_SPIWrite 001D  
      start_initialization 0016          __size_of_RTXAwake 001A                CC1Read@addr 0021  
              NVMWrite@len 0074                   ??_INTIsr 0070                   ??_INInit 0071  
              ??_CC1Strobe 0077                 ?_RTXRcvPkt 0023                 ?_RTXSndPkt 0023  
                 ??_SYSInt 0070             CC1Read@cc1Addr 0022                   ??___ftge 0077  
                _e_POS_PKT 00AD                   ??___wmul 0075                   ?_CC1Init 0070  
              __pdataBANK1 00CF                   ?_CC1Read 0079                __pdataBANK3 01A0  
              SPIWrite@len 0073                   ?_ADCConv 0070                   ?_ADCInit 0070  
                 ?_DINInit 0070                   ?_DINTask 0070                   ?_DINTick 0070  
        __size_of___ftpack 0064                   ?_LEDInit 0070          __size_of___lltoft 002B  
              __pbssCOMMON 007C                  ___latbits 0003          __size_of___lwtoft 0014  
            __pcstackBANK0 0020        __end_of_DLYDelay_ms 0C05                  _s_CC1_FLG 00AF  
                 ?_PGMInit 0070                   ?_PGMTick 0070                   ?_NVMInit 0070  
                 ?_NVMRead 0071                   ?_SPIInit 0070              ADCConv@cntSum 005E  
                 ?_SPIRead 0071             NVMWrite@source 0073                   ?_OUTInit 0070  
             PGMInit@state 007B                   ?_RTXInit 0070                   ?_RTXTask 0070  
                 ?_RTXTick 0070                CC1Write@len 0079                   ?_SYSInit 0070  
              CC1Write@src 0077                   ?_SYSTask 0070              ??_PGMCheckNvm 007B  
         ___lwdiv@dividend 0073                ??_PGMPgmOff 0071                   ?___ftadd 0020  
                 ?___ftdiv 0034                   ?___ftmul 0024                   ?___ftsub 002A  
                 ?___lwdiv 0071                  _u_SYS_STA 00B2           _u_in_sta_tmpTask 006F  
                 NVMRead@i 0077                   _CC1Sleep 0B00              ??_PGMNvmReset 007A  
                 SPIRead@i 0078                   _CC1Write 0D23           ___lwdiv@quotient 0076  
            ??_PGMWriteNvm 0078                  _u_flg_din 006E                ??_RTXRcvPkt 0024  
              ??_RTXSndPkt 0024             ___wmul@product 0075                   _LATAbits 010C  
                 _LATCbits 010E                  clear_ram0 0AFA                   _PIR1bits 0011  
      __end_of_PGMCheckNvm 0B3B      SLPSleep@OPTION_REGTmp 0024                  _tmrRcvPkt 006D  
         __size_of_CC1Init 001B           __size_of_CC1Read 0022                   _SLPSleep 0676  
              _DLYDelay_ms 0BEC                 _CC1LoadREG 0DFA                   _NVMWrite 03E0  
         __size_of_ADCConv 01B1           __size_of_ADCInit 002B                 _ADCON0bits 009D  
                 _SPIWrite 0C70          ___wmul@multiplier 0071                 NVMInit@sta 0071  
               NVMRead@len 0074            LEDFastFlash@num 0078                   _RTXAwake 0C05  
         __size_of_DINInit 0011           __size_of_DINTask 001E           __size_of_DINTick 0028  
         __size_of_LEDInit 000B                 SPIRead@len 0073           __size_of_PGMInit 0018  
         __size_of_PGMTick 000F        __end_of_PGMNvmReset 0BAF           __size_of_NVMInit 000B  
         __size_of_NVMRead 0026           __size_of_SPIInit 001E           __size_of_SPIRead 0024  
             _u_in_ev_down 00B3            LEDNormalFlash@i 0079               _u_in_ev_long 00B4  
         __size_of_OUTInit 0029           __size_of_RTXInit 0024           __size_of_RTXTask 0006  
         __size_of_RTXTick 000C           __size_of_SYSInit 0026           __size_of_SYSTask 0032  
               OUTInit@sta 0072        __end_of_PGMWriteNvm 0B72           __size_of___ftadd 00F6  
         __size_of___ftdiv 00A9           __size_of___ftmul 00B4           __size_of___ftsub 001E  
         __size_of___lwdiv 0034                   ___ftpack 06E0                   ___lltoft 0E9D  
                 ___lwtoft 07EB            ___lwdiv@divisor 0071            ___lwdiv@counter 0078  
                 __ptext10 0B10                   __ptext11 0B55                   __ptext20 0CE7  
                 __ptext12 0AE4                   __ptext21 0049                   __ptext13 0E21  
                 __ptext30 0E9D                   __ptext22 02F0                   __ptext14 0DD4  
                 __ptext31 0550                   __ptext23 0CC9                   __ptext15 0D05  
                 __ptext40 0D66                   __ptext32 06E0                   __ptext24 01FA  
                 __ptext16 0AEE                   __ptext41 0CAB                   __ptext33 0EC8  
                 __ptext25 049C                   __ptext17 0744                   __ptext50 0E49  
                 __ptext42 0BEC                   __ptext34 0F8C                   __ptext26 0FC5  
                 __ptext18 0B81                   __ptext51 0B24                   __ptext43 0BD4  
                 __ptext35 0D23                   __ptext27 0C3A                   __ptext19 05F9  
                 __ptext52 0B19                   __ptext44 0B72                   __ptext36 0BC0  
                 __ptext28 07EB                   __ptext53 0C1F                   __ptext45 0DAE  
                 __ptext37 0B47                   __ptext29 0F58                   __ptext54 0C8D  
                 __ptext46 0B2F                   __ptext38 0D44                   __ptext55 0BAF  
                 __ptext47 0B9F                   __ptext39 0C70                   __ptext56 0E72  
                 __ptext48 0B63                   __ptext49 03E0                   __ptext58 0AE8  
__size_of_RTXStartSendData 000F        __end_of_nvm_pgm_cfg 1005              __size_of_main 0053  
              _PGMCheckNvm 0B2F              __size_of_sqrt 00F0              ??_RTXSendData 0028  
            ??_RTXSendRPgm 0028          SLPSleep@ADCON0Tmp 0026                ?_CC1LoadREG 0070  
              _PGMNvmReset 0B9F                 _INTCONbits 000B             SPIWrite@srcPtr 0071  
                 intlevel1 0000                _PGMWriteNvm 0B63                 _PMCON1bits 0195  
        __CFG_CLKOUTEN$OFF 0000        SLPSleep@TESTBATTtmp 0027                 _PGMReadNvm 0B72  
               _PGMSelDown 0B55                 _PGMSelLong 0B10          SLPSleep@INTCONTmp 0021  
        SLPSleep@FVRCONTmp 0025                 _OPTION_REG 0095        __end_of_RTXSendData 0676  
      __end_of_RTXSendRPgm 0EF7                _nvm_pgm_cfg 1000           SLPSleep@IOCBNTmp 0020  
  __size_of_LEDNormalFlash 001E        __size_of_CC1LoadREG 0027          SLPSleep@WDTCONTmp 0023  
               _SSPCONbits 0215  
