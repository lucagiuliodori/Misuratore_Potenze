

Microchip Technology PIC LITE Macro Assembler V1.34 build -361300703 
                                                                                               Wed Feb 17 20:27:32 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK2,global,class=CODE,delta=2
     5                           	psect	idataBANK3,global,class=CODE,delta=2
     6                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,delta=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2
    35                           	psect	text16,local,class=CODE,merge=1,delta=2
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,delta=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2
    47                           	psect	text28,local,class=CODE,merge=1,delta=2
    48                           	psect	text29,local,class=CODE,merge=1,delta=2
    49                           	psect	text30,local,class=CODE,merge=1,delta=2
    50                           	psect	text31,local,class=CODE,merge=1,delta=2
    51                           	psect	text32,local,class=CODE,merge=1,delta=2
    52                           	psect	text33,local,class=CODE,merge=1,delta=2
    53                           	psect	text34,local,class=CODE,merge=1,delta=2
    54                           	psect	text35,local,class=CODE,merge=1,delta=2
    55                           	psect	text36,local,class=CODE,merge=1,delta=2
    56                           	psect	text37,local,class=CODE,merge=1,delta=2
    57                           	psect	text38,local,class=CODE,merge=1,delta=2
    58                           	psect	text39,local,class=CODE,merge=1,delta=2
    59                           	psect	text40,local,class=CODE,merge=1,delta=2
    60                           	psect	text41,local,class=CODE,merge=1,delta=2
    61                           	psect	text42,local,class=CODE,merge=1,delta=2
    62                           	psect	text43,local,class=CODE,merge=1,delta=2
    63                           	psect	text44,local,class=CODE,merge=1,delta=2
    64                           	psect	text45,local,class=CODE,merge=1,delta=2
    65                           	psect	text46,local,class=CODE,merge=1,delta=2
    66                           	psect	text47,local,class=CODE,merge=1,delta=2
    67                           	psect	text48,local,class=CODE,merge=1,delta=2
    68                           	psect	text49,local,class=CODE,merge=1,delta=2
    69                           	psect	text50,local,class=CODE,merge=1,delta=2
    70                           	psect	text51,local,class=CODE,merge=1,delta=2
    71                           	psect	text52,local,class=CODE,merge=1,delta=2
    72                           	psect	text53,local,class=CODE,merge=1,delta=2
    73                           	psect	text54,local,class=CODE,merge=1,delta=2
    74                           	psect	text55,local,class=CODE,merge=1,delta=2
    75                           	psect	text56,local,class=CODE,merge=1,delta=2
    76                           	psect	text57,local,class=CODE,merge=1,delta=2
    77                           	psect	text58,local,class=CODE,merge=1,delta=2
    78                           	psect	text59,local,class=CODE,merge=1,delta=2
    79                           	psect	text60,local,class=CODE,merge=1,delta=2
    80                           	psect	text61,local,class=CODE,merge=1,delta=2
    81                           	psect	text62,local,class=CODE,merge=1,delta=2
    82                           	psect	text63,local,class=CODE,merge=1,delta=2
    83                           	psect	text64,local,class=CODE,merge=1,delta=2
    84                           	psect	text65,local,class=CODE,merge=1,delta=2
    85                           	psect	text66,local,class=CODE,merge=1,delta=2
    86                           	psect	text67,local,class=CODE,merge=1,delta=2
    87                           	psect	text68,local,class=CODE,merge=1,delta=2
    88                           	psect	text69,local,class=CODE,merge=1,delta=2
    89                           	psect	text70,local,class=CODE,merge=1,delta=2
    90                           	psect	intentry,global,class=CODE,delta=2
    91                           	psect	text72,local,class=CODE,merge=1,delta=2
    92                           	dabs	1,0x7E,2
    93  0000                     	;# 
    94  0001                     	;# 
    95  0002                     	;# 
    96  0003                     	;# 
    97  0004                     	;# 
    98  0005                     	;# 
    99  0006                     	;# 
   100  0007                     	;# 
   101  0008                     	;# 
   102  0009                     	;# 
   103  000A                     	;# 
   104  000B                     	;# 
   105  000C                     	;# 
   106  000D                     	;# 
   107  000E                     	;# 
   108  0010                     	;# 
   109  0011                     	;# 
   110  0012                     	;# 
   111  0015                     	;# 
   112  0016                     	;# 
   113  0016                     	;# 
   114  0017                     	;# 
   115  0018                     	;# 
   116  0019                     	;# 
   117  001A                     	;# 
   118  001B                     	;# 
   119  001C                     	;# 
   120  008C                     	;# 
   121  008D                     	;# 
   122  008E                     	;# 
   123  0090                     	;# 
   124  0091                     	;# 
   125  0092                     	;# 
   126  0095                     	;# 
   127  0096                     	;# 
   128  0097                     	;# 
   129  0099                     	;# 
   130  009A                     	;# 
   131  009B                     	;# 
   132  009B                     	;# 
   133  009C                     	;# 
   134  009D                     	;# 
   135  009E                     	;# 
   136  010C                     	;# 
   137  010D                     	;# 
   138  010E                     	;# 
   139  0116                     	;# 
   140  0117                     	;# 
   141  011D                     	;# 
   142  018C                     	;# 
   143  018D                     	;# 
   144  018E                     	;# 
   145  0191                     	;# 
   146  0191                     	;# 
   147  0192                     	;# 
   148  0193                     	;# 
   149  0193                     	;# 
   150  0194                     	;# 
   151  0195                     	;# 
   152  0196                     	;# 
   153  0197                     	;# 
   154  0199                     	;# 
   155  019A                     	;# 
   156  019B                     	;# 
   157  019B                     	;# 
   158  019B                     	;# 
   159  019B                     	;# 
   160  019C                     	;# 
   161  019C                     	;# 
   162  019D                     	;# 
   163  019E                     	;# 
   164  019F                     	;# 
   165  020D                     	;# 
   166  0210                     	;# 
   167  0211                     	;# 
   168  0211                     	;# 
   169  0212                     	;# 
   170  0212                     	;# 
   171  0213                     	;# 
   172  0213                     	;# 
   173  0214                     	;# 
   174  0214                     	;# 
   175  0215                     	;# 
   176  0215                     	;# 
   177  0215                     	;# 
   178  0216                     	;# 
   179  0216                     	;# 
   180  0217                     	;# 
   181  0217                     	;# 
   182  0291                     	;# 
   183  0291                     	;# 
   184  0292                     	;# 
   185  0293                     	;# 
   186  0298                     	;# 
   187  0298                     	;# 
   188  0299                     	;# 
   189  029A                     	;# 
   190  0394                     	;# 
   191  0395                     	;# 
   192  0396                     	;# 
   193  0FE4                     	;# 
   194  0FE5                     	;# 
   195  0FE6                     	;# 
   196  0FE7                     	;# 
   197  0FE8                     	;# 
   198  0FE9                     	;# 
   199  0FEA                     	;# 
   200  0FEB                     	;# 
   201  0FED                     	;# 
   202  0FEE                     	;# 
   203  0FEF                     	;# 
   204  0000                     	;# 
   205  0001                     	;# 
   206  0002                     	;# 
   207  0003                     	;# 
   208  0004                     	;# 
   209  0005                     	;# 
   210  0006                     	;# 
   211  0007                     	;# 
   212  0008                     	;# 
   213  0009                     	;# 
   214  000A                     	;# 
   215  000B                     	;# 
   216  000C                     	;# 
   217  000D                     	;# 
   218  000E                     	;# 
   219  0010                     	;# 
   220  0011                     	;# 
   221  0012                     	;# 
   222  0015                     	;# 
   223  0016                     	;# 
   224  0016                     	;# 
   225  0017                     	;# 
   226  0018                     	;# 
   227  0019                     	;# 
   228  001A                     	;# 
   229  001B                     	;# 
   230  001C                     	;# 
   231  008C                     	;# 
   232  008D                     	;# 
   233  008E                     	;# 
   234  0090                     	;# 
   235  0091                     	;# 
   236  0092                     	;# 
   237  0095                     	;# 
   238  0096                     	;# 
   239  0097                     	;# 
   240  0099                     	;# 
   241  009A                     	;# 
   242  009B                     	;# 
   243  009B                     	;# 
   244  009C                     	;# 
   245  009D                     	;# 
   246  009E                     	;# 
   247  010C                     	;# 
   248  010D                     	;# 
   249  010E                     	;# 
   250  0116                     	;# 
   251  0117                     	;# 
   252  011D                     	;# 
   253  018C                     	;# 
   254  018D                     	;# 
   255  018E                     	;# 
   256  0191                     	;# 
   257  0191                     	;# 
   258  0192                     	;# 
   259  0193                     	;# 
   260  0193                     	;# 
   261  0194                     	;# 
   262  0195                     	;# 
   263  0196                     	;# 
   264  0197                     	;# 
   265  0199                     	;# 
   266  019A                     	;# 
   267  019B                     	;# 
   268  019B                     	;# 
   269  019B                     	;# 
   270  019B                     	;# 
   271  019C                     	;# 
   272  019C                     	;# 
   273  019D                     	;# 
   274  019E                     	;# 
   275  019F                     	;# 
   276  020D                     	;# 
   277  0210                     	;# 
   278  0211                     	;# 
   279  0211                     	;# 
   280  0212                     	;# 
   281  0212                     	;# 
   282  0213                     	;# 
   283  0213                     	;# 
   284  0214                     	;# 
   285  0214                     	;# 
   286  0215                     	;# 
   287  0215                     	;# 
   288  0215                     	;# 
   289  0216                     	;# 
   290  0216                     	;# 
   291  0217                     	;# 
   292  0217                     	;# 
   293  0291                     	;# 
   294  0291                     	;# 
   295  0292                     	;# 
   296  0293                     	;# 
   297  0298                     	;# 
   298  0298                     	;# 
   299  0299                     	;# 
   300  029A                     	;# 
   301  0394                     	;# 
   302  0395                     	;# 
   303  0396                     	;# 
   304  0FE4                     	;# 
   305  0FE5                     	;# 
   306  0FE6                     	;# 
   307  0FE7                     	;# 
   308  0FE8                     	;# 
   309  0FE9                     	;# 
   310  0FEA                     	;# 
   311  0FEB                     	;# 
   312  0FED                     	;# 
   313  0FEE                     	;# 
   314  0FEF                     	;# 
   315  0000                     	;# 
   316  0001                     	;# 
   317  0002                     	;# 
   318  0003                     	;# 
   319  0004                     	;# 
   320  0005                     	;# 
   321  0006                     	;# 
   322  0007                     	;# 
   323  0008                     	;# 
   324  0009                     	;# 
   325  000A                     	;# 
   326  000B                     	;# 
   327  000C                     	;# 
   328  000D                     	;# 
   329  000E                     	;# 
   330  0010                     	;# 
   331  0011                     	;# 
   332  0012                     	;# 
   333  0015                     	;# 
   334  0016                     	;# 
   335  0016                     	;# 
   336  0017                     	;# 
   337  0018                     	;# 
   338  0019                     	;# 
   339  001A                     	;# 
   340  001B                     	;# 
   341  001C                     	;# 
   342  008C                     	;# 
   343  008D                     	;# 
   344  008E                     	;# 
   345  0090                     	;# 
   346  0091                     	;# 
   347  0092                     	;# 
   348  0095                     	;# 
   349  0096                     	;# 
   350  0097                     	;# 
   351  0099                     	;# 
   352  009A                     	;# 
   353  009B                     	;# 
   354  009B                     	;# 
   355  009C                     	;# 
   356  009D                     	;# 
   357  009E                     	;# 
   358  010C                     	;# 
   359  010D                     	;# 
   360  010E                     	;# 
   361  0116                     	;# 
   362  0117                     	;# 
   363  011D                     	;# 
   364  018C                     	;# 
   365  018D                     	;# 
   366  018E                     	;# 
   367  0191                     	;# 
   368  0191                     	;# 
   369  0192                     	;# 
   370  0193                     	;# 
   371  0193                     	;# 
   372  0194                     	;# 
   373  0195                     	;# 
   374  0196                     	;# 
   375  0197                     	;# 
   376  0199                     	;# 
   377  019A                     	;# 
   378  019B                     	;# 
   379  019B                     	;# 
   380  019B                     	;# 
   381  019B                     	;# 
   382  019C                     	;# 
   383  019C                     	;# 
   384  019D                     	;# 
   385  019E                     	;# 
   386  019F                     	;# 
   387  020D                     	;# 
   388  0210                     	;# 
   389  0211                     	;# 
   390  0211                     	;# 
   391  0212                     	;# 
   392  0212                     	;# 
   393  0213                     	;# 
   394  0213                     	;# 
   395  0214                     	;# 
   396  0214                     	;# 
   397  0215                     	;# 
   398  0215                     	;# 
   399  0215                     	;# 
   400  0216                     	;# 
   401  0216                     	;# 
   402  0217                     	;# 
   403  0217                     	;# 
   404  0291                     	;# 
   405  0291                     	;# 
   406  0292                     	;# 
   407  0293                     	;# 
   408  0298                     	;# 
   409  0298                     	;# 
   410  0299                     	;# 
   411  029A                     	;# 
   412  0394                     	;# 
   413  0395                     	;# 
   414  0396                     	;# 
   415  0FE4                     	;# 
   416  0FE5                     	;# 
   417  0FE6                     	;# 
   418  0FE7                     	;# 
   419  0FE8                     	;# 
   420  0FE9                     	;# 
   421  0FEA                     	;# 
   422  0FEB                     	;# 
   423  0FED                     	;# 
   424  0FEE                     	;# 
   425  0FEF                     	;# 
   426  0000                     	;# 
   427  0001                     	;# 
   428  0002                     	;# 
   429  0003                     	;# 
   430  0004                     	;# 
   431  0005                     	;# 
   432  0006                     	;# 
   433  0007                     	;# 
   434  0008                     	;# 
   435  0009                     	;# 
   436  000A                     	;# 
   437  000B                     	;# 
   438  000C                     	;# 
   439  000D                     	;# 
   440  000E                     	;# 
   441  0010                     	;# 
   442  0011                     	;# 
   443  0012                     	;# 
   444  0015                     	;# 
   445  0016                     	;# 
   446  0016                     	;# 
   447  0017                     	;# 
   448  0018                     	;# 
   449  0019                     	;# 
   450  001A                     	;# 
   451  001B                     	;# 
   452  001C                     	;# 
   453  008C                     	;# 
   454  008D                     	;# 
   455  008E                     	;# 
   456  0090                     	;# 
   457  0091                     	;# 
   458  0092                     	;# 
   459  0095                     	;# 
   460  0096                     	;# 
   461  0097                     	;# 
   462  0099                     	;# 
   463  009A                     	;# 
   464  009B                     	;# 
   465  009B                     	;# 
   466  009C                     	;# 
   467  009D                     	;# 
   468  009E                     	;# 
   469  010C                     	;# 
   470  010D                     	;# 
   471  010E                     	;# 
   472  0116                     	;# 
   473  0117                     	;# 
   474  011D                     	;# 
   475  018C                     	;# 
   476  018D                     	;# 
   477  018E                     	;# 
   478  0191                     	;# 
   479  0191                     	;# 
   480  0192                     	;# 
   481  0193                     	;# 
   482  0193                     	;# 
   483  0194                     	;# 
   484  0195                     	;# 
   485  0196                     	;# 
   486  0197                     	;# 
   487  0199                     	;# 
   488  019A                     	;# 
   489  019B                     	;# 
   490  019B                     	;# 
   491  019B                     	;# 
   492  019B                     	;# 
   493  019C                     	;# 
   494  019C                     	;# 
   495  019D                     	;# 
   496  019E                     	;# 
   497  019F                     	;# 
   498  020D                     	;# 
   499  0210                     	;# 
   500  0211                     	;# 
   501  0211                     	;# 
   502  0212                     	;# 
   503  0212                     	;# 
   504  0213                     	;# 
   505  0213                     	;# 
   506  0214                     	;# 
   507  0214                     	;# 
   508  0215                     	;# 
   509  0215                     	;# 
   510  0215                     	;# 
   511  0216                     	;# 
   512  0216                     	;# 
   513  0217                     	;# 
   514  0217                     	;# 
   515  0291                     	;# 
   516  0291                     	;# 
   517  0292                     	;# 
   518  0293                     	;# 
   519  0298                     	;# 
   520  0298                     	;# 
   521  0299                     	;# 
   522  029A                     	;# 
   523  0394                     	;# 
   524  0395                     	;# 
   525  0396                     	;# 
   526  0FE4                     	;# 
   527  0FE5                     	;# 
   528  0FE6                     	;# 
   529  0FE7                     	;# 
   530  0FE8                     	;# 
   531  0FE9                     	;# 
   532  0FEA                     	;# 
   533  0FEB                     	;# 
   534  0FED                     	;# 
   535  0FEE                     	;# 
   536  0FEF                     	;# 
   537  0000                     	;# 
   538  0001                     	;# 
   539  0002                     	;# 
   540  0003                     	;# 
   541  0004                     	;# 
   542  0005                     	;# 
   543  0006                     	;# 
   544  0007                     	;# 
   545  0008                     	;# 
   546  0009                     	;# 
   547  000A                     	;# 
   548  000B                     	;# 
   549  000C                     	;# 
   550  000D                     	;# 
   551  000E                     	;# 
   552  0010                     	;# 
   553  0011                     	;# 
   554  0012                     	;# 
   555  0015                     	;# 
   556  0016                     	;# 
   557  0016                     	;# 
   558  0017                     	;# 
   559  0018                     	;# 
   560  0019                     	;# 
   561  001A                     	;# 
   562  001B                     	;# 
   563  001C                     	;# 
   564  008C                     	;# 
   565  008D                     	;# 
   566  008E                     	;# 
   567  0090                     	;# 
   568  0091                     	;# 
   569  0092                     	;# 
   570  0095                     	;# 
   571  0096                     	;# 
   572  0097                     	;# 
   573  0099                     	;# 
   574  009A                     	;# 
   575  009B                     	;# 
   576  009B                     	;# 
   577  009C                     	;# 
   578  009D                     	;# 
   579  009E                     	;# 
   580  010C                     	;# 
   581  010D                     	;# 
   582  010E                     	;# 
   583  0116                     	;# 
   584  0117                     	;# 
   585  011D                     	;# 
   586  018C                     	;# 
   587  018D                     	;# 
   588  018E                     	;# 
   589  0191                     	;# 
   590  0191                     	;# 
   591  0192                     	;# 
   592  0193                     	;# 
   593  0193                     	;# 
   594  0194                     	;# 
   595  0195                     	;# 
   596  0196                     	;# 
   597  0197                     	;# 
   598  0199                     	;# 
   599  019A                     	;# 
   600  019B                     	;# 
   601  019B                     	;# 
   602  019B                     	;# 
   603  019B                     	;# 
   604  019C                     	;# 
   605  019C                     	;# 
   606  019D                     	;# 
   607  019E                     	;# 
   608  019F                     	;# 
   609  020D                     	;# 
   610  0210                     	;# 
   611  0211                     	;# 
   612  0211                     	;# 
   613  0212                     	;# 
   614  0212                     	;# 
   615  0213                     	;# 
   616  0213                     	;# 
   617  0214                     	;# 
   618  0214                     	;# 
   619  0215                     	;# 
   620  0215                     	;# 
   621  0215                     	;# 
   622  0216                     	;# 
   623  0216                     	;# 
   624  0217                     	;# 
   625  0217                     	;# 
   626  0291                     	;# 
   627  0291                     	;# 
   628  0292                     	;# 
   629  0293                     	;# 
   630  0298                     	;# 
   631  0298                     	;# 
   632  0299                     	;# 
   633  029A                     	;# 
   634  0394                     	;# 
   635  0395                     	;# 
   636  0396                     	;# 
   637  0FE4                     	;# 
   638  0FE5                     	;# 
   639  0FE6                     	;# 
   640  0FE7                     	;# 
   641  0FE8                     	;# 
   642  0FE9                     	;# 
   643  0FEA                     	;# 
   644  0FEB                     	;# 
   645  0FED                     	;# 
   646  0FEE                     	;# 
   647  0FEF                     	;# 
   648  0000                     	;# 
   649  0001                     	;# 
   650  0002                     	;# 
   651  0003                     	;# 
   652  0004                     	;# 
   653  0005                     	;# 
   654  0006                     	;# 
   655  0007                     	;# 
   656  0008                     	;# 
   657  0009                     	;# 
   658  000A                     	;# 
   659  000B                     	;# 
   660  000C                     	;# 
   661  000D                     	;# 
   662  000E                     	;# 
   663  0010                     	;# 
   664  0011                     	;# 
   665  0012                     	;# 
   666  0015                     	;# 
   667  0016                     	;# 
   668  0016                     	;# 
   669  0017                     	;# 
   670  0018                     	;# 
   671  0019                     	;# 
   672  001A                     	;# 
   673  001B                     	;# 
   674  001C                     	;# 
   675  008C                     	;# 
   676  008D                     	;# 
   677  008E                     	;# 
   678  0090                     	;# 
   679  0091                     	;# 
   680  0092                     	;# 
   681  0095                     	;# 
   682  0096                     	;# 
   683  0097                     	;# 
   684  0099                     	;# 
   685  009A                     	;# 
   686  009B                     	;# 
   687  009B                     	;# 
   688  009C                     	;# 
   689  009D                     	;# 
   690  009E                     	;# 
   691  010C                     	;# 
   692  010D                     	;# 
   693  010E                     	;# 
   694  0116                     	;# 
   695  0117                     	;# 
   696  011D                     	;# 
   697  018C                     	;# 
   698  018D                     	;# 
   699  018E                     	;# 
   700  0191                     	;# 
   701  0191                     	;# 
   702  0192                     	;# 
   703  0193                     	;# 
   704  0193                     	;# 
   705  0194                     	;# 
   706  0195                     	;# 
   707  0196                     	;# 
   708  0197                     	;# 
   709  0199                     	;# 
   710  019A                     	;# 
   711  019B                     	;# 
   712  019B                     	;# 
   713  019B                     	;# 
   714  019B                     	;# 
   715  019C                     	;# 
   716  019C                     	;# 
   717  019D                     	;# 
   718  019E                     	;# 
   719  019F                     	;# 
   720  020D                     	;# 
   721  0210                     	;# 
   722  0211                     	;# 
   723  0211                     	;# 
   724  0212                     	;# 
   725  0212                     	;# 
   726  0213                     	;# 
   727  0213                     	;# 
   728  0214                     	;# 
   729  0214                     	;# 
   730  0215                     	;# 
   731  0215                     	;# 
   732  0215                     	;# 
   733  0216                     	;# 
   734  0216                     	;# 
   735  0217                     	;# 
   736  0217                     	;# 
   737  0291                     	;# 
   738  0291                     	;# 
   739  0292                     	;# 
   740  0293                     	;# 
   741  0298                     	;# 
   742  0298                     	;# 
   743  0299                     	;# 
   744  029A                     	;# 
   745  0394                     	;# 
   746  0395                     	;# 
   747  0396                     	;# 
   748  0FE4                     	;# 
   749  0FE5                     	;# 
   750  0FE6                     	;# 
   751  0FE7                     	;# 
   752  0FE8                     	;# 
   753  0FE9                     	;# 
   754  0FEA                     	;# 
   755  0FEB                     	;# 
   756  0FED                     	;# 
   757  0FEE                     	;# 
   758  0FEF                     	;# 
   759  0000                     	;# 
   760  0001                     	;# 
   761  0002                     	;# 
   762  0003                     	;# 
   763  0004                     	;# 
   764  0005                     	;# 
   765  0006                     	;# 
   766  0007                     	;# 
   767  0008                     	;# 
   768  0009                     	;# 
   769  000A                     	;# 
   770  000B                     	;# 
   771  000C                     	;# 
   772  000D                     	;# 
   773  000E                     	;# 
   774  0010                     	;# 
   775  0011                     	;# 
   776  0012                     	;# 
   777  0015                     	;# 
   778  0016                     	;# 
   779  0016                     	;# 
   780  0017                     	;# 
   781  0018                     	;# 
   782  0019                     	;# 
   783  001A                     	;# 
   784  001B                     	;# 
   785  001C                     	;# 
   786  008C                     	;# 
   787  008D                     	;# 
   788  008E                     	;# 
   789  0090                     	;# 
   790  0091                     	;# 
   791  0092                     	;# 
   792  0095                     	;# 
   793  0096                     	;# 
   794  0097                     	;# 
   795  0099                     	;# 
   796  009A                     	;# 
   797  009B                     	;# 
   798  009B                     	;# 
   799  009C                     	;# 
   800  009D                     	;# 
   801  009E                     	;# 
   802  010C                     	;# 
   803  010D                     	;# 
   804  010E                     	;# 
   805  0116                     	;# 
   806  0117                     	;# 
   807  011D                     	;# 
   808  018C                     	;# 
   809  018D                     	;# 
   810  018E                     	;# 
   811  0191                     	;# 
   812  0191                     	;# 
   813  0192                     	;# 
   814  0193                     	;# 
   815  0193                     	;# 
   816  0194                     	;# 
   817  0195                     	;# 
   818  0196                     	;# 
   819  0197                     	;# 
   820  0199                     	;# 
   821  019A                     	;# 
   822  019B                     	;# 
   823  019B                     	;# 
   824  019B                     	;# 
   825  019B                     	;# 
   826  019C                     	;# 
   827  019C                     	;# 
   828  019D                     	;# 
   829  019E                     	;# 
   830  019F                     	;# 
   831  020D                     	;# 
   832  0210                     	;# 
   833  0211                     	;# 
   834  0211                     	;# 
   835  0212                     	;# 
   836  0212                     	;# 
   837  0213                     	;# 
   838  0213                     	;# 
   839  0214                     	;# 
   840  0214                     	;# 
   841  0215                     	;# 
   842  0215                     	;# 
   843  0215                     	;# 
   844  0216                     	;# 
   845  0216                     	;# 
   846  0217                     	;# 
   847  0217                     	;# 
   848  0291                     	;# 
   849  0291                     	;# 
   850  0292                     	;# 
   851  0293                     	;# 
   852  0298                     	;# 
   853  0298                     	;# 
   854  0299                     	;# 
   855  029A                     	;# 
   856  0394                     	;# 
   857  0395                     	;# 
   858  0396                     	;# 
   859  0FE4                     	;# 
   860  0FE5                     	;# 
   861  0FE6                     	;# 
   862  0FE7                     	;# 
   863  0FE8                     	;# 
   864  0FE9                     	;# 
   865  0FEA                     	;# 
   866  0FEB                     	;# 
   867  0FED                     	;# 
   868  0FEE                     	;# 
   869  0FEF                     	;# 
   870  0000                     	;# 
   871  0001                     	;# 
   872  0002                     	;# 
   873  0003                     	;# 
   874  0004                     	;# 
   875  0005                     	;# 
   876  0006                     	;# 
   877  0007                     	;# 
   878  0008                     	;# 
   879  0009                     	;# 
   880  000A                     	;# 
   881  000B                     	;# 
   882  000C                     	;# 
   883  000D                     	;# 
   884  000E                     	;# 
   885  0010                     	;# 
   886  0011                     	;# 
   887  0012                     	;# 
   888  0015                     	;# 
   889  0016                     	;# 
   890  0016                     	;# 
   891  0017                     	;# 
   892  0018                     	;# 
   893  0019                     	;# 
   894  001A                     	;# 
   895  001B                     	;# 
   896  001C                     	;# 
   897  008C                     	;# 
   898  008D                     	;# 
   899  008E                     	;# 
   900  0090                     	;# 
   901  0091                     	;# 
   902  0092                     	;# 
   903  0095                     	;# 
   904  0096                     	;# 
   905  0097                     	;# 
   906  0099                     	;# 
   907  009A                     	;# 
   908  009B                     	;# 
   909  009B                     	;# 
   910  009C                     	;# 
   911  009D                     	;# 
   912  009E                     	;# 
   913  010C                     	;# 
   914  010D                     	;# 
   915  010E                     	;# 
   916  0116                     	;# 
   917  0117                     	;# 
   918  011D                     	;# 
   919  018C                     	;# 
   920  018D                     	;# 
   921  018E                     	;# 
   922  0191                     	;# 
   923  0191                     	;# 
   924  0192                     	;# 
   925  0193                     	;# 
   926  0193                     	;# 
   927  0194                     	;# 
   928  0195                     	;# 
   929  0196                     	;# 
   930  0197                     	;# 
   931  0199                     	;# 
   932  019A                     	;# 
   933  019B                     	;# 
   934  019B                     	;# 
   935  019B                     	;# 
   936  019B                     	;# 
   937  019C                     	;# 
   938  019C                     	;# 
   939  019D                     	;# 
   940  019E                     	;# 
   941  019F                     	;# 
   942  020D                     	;# 
   943  0210                     	;# 
   944  0211                     	;# 
   945  0211                     	;# 
   946  0212                     	;# 
   947  0212                     	;# 
   948  0213                     	;# 
   949  0213                     	;# 
   950  0214                     	;# 
   951  0214                     	;# 
   952  0215                     	;# 
   953  0215                     	;# 
   954  0215                     	;# 
   955  0216                     	;# 
   956  0216                     	;# 
   957  0217                     	;# 
   958  0217                     	;# 
   959  0291                     	;# 
   960  0291                     	;# 
   961  0292                     	;# 
   962  0293                     	;# 
   963  0298                     	;# 
   964  0298                     	;# 
   965  0299                     	;# 
   966  029A                     	;# 
   967  0394                     	;# 
   968  0395                     	;# 
   969  0396                     	;# 
   970  0FE4                     	;# 
   971  0FE5                     	;# 
   972  0FE6                     	;# 
   973  0FE7                     	;# 
   974  0FE8                     	;# 
   975  0FE9                     	;# 
   976  0FEA                     	;# 
   977  0FEB                     	;# 
   978  0FED                     	;# 
   979  0FEE                     	;# 
   980  0FEF                     	;# 
   981  0000                     	;# 
   982  0001                     	;# 
   983  0002                     	;# 
   984  0003                     	;# 
   985  0004                     	;# 
   986  0005                     	;# 
   987  0006                     	;# 
   988  0007                     	;# 
   989  0008                     	;# 
   990  0009                     	;# 
   991  000A                     	;# 
   992  000B                     	;# 
   993  000C                     	;# 
   994  000D                     	;# 
   995  000E                     	;# 
   996  0010                     	;# 
   997  0011                     	;# 
   998  0012                     	;# 
   999  0015                     	;# 
  1000  0016                     	;# 
  1001  0016                     	;# 
  1002  0017                     	;# 
  1003  0018                     	;# 
  1004  0019                     	;# 
  1005  001A                     	;# 
  1006  001B                     	;# 
  1007  001C                     	;# 
  1008  008C                     	;# 
  1009  008D                     	;# 
  1010  008E                     	;# 
  1011  0090                     	;# 
  1012  0091                     	;# 
  1013  0092                     	;# 
  1014  0095                     	;# 
  1015  0096                     	;# 
  1016  0097                     	;# 
  1017  0099                     	;# 
  1018  009A                     	;# 
  1019  009B                     	;# 
  1020  009B                     	;# 
  1021  009C                     	;# 
  1022  009D                     	;# 
  1023  009E                     	;# 
  1024  010C                     	;# 
  1025  010D                     	;# 
  1026  010E                     	;# 
  1027  0116                     	;# 
  1028  0117                     	;# 
  1029  011D                     	;# 
  1030  018C                     	;# 
  1031  018D                     	;# 
  1032  018E                     	;# 
  1033  0191                     	;# 
  1034  0191                     	;# 
  1035  0192                     	;# 
  1036  0193                     	;# 
  1037  0193                     	;# 
  1038  0194                     	;# 
  1039  0195                     	;# 
  1040  0196                     	;# 
  1041  0197                     	;# 
  1042  0199                     	;# 
  1043  019A                     	;# 
  1044  019B                     	;# 
  1045  019B                     	;# 
  1046  019B                     	;# 
  1047  019B                     	;# 
  1048  019C                     	;# 
  1049  019C                     	;# 
  1050  019D                     	;# 
  1051  019E                     	;# 
  1052  019F                     	;# 
  1053  020D                     	;# 
  1054  0210                     	;# 
  1055  0211                     	;# 
  1056  0211                     	;# 
  1057  0212                     	;# 
  1058  0212                     	;# 
  1059  0213                     	;# 
  1060  0213                     	;# 
  1061  0214                     	;# 
  1062  0214                     	;# 
  1063  0215                     	;# 
  1064  0215                     	;# 
  1065  0215                     	;# 
  1066  0216                     	;# 
  1067  0216                     	;# 
  1068  0217                     	;# 
  1069  0217                     	;# 
  1070  0291                     	;# 
  1071  0291                     	;# 
  1072  0292                     	;# 
  1073  0293                     	;# 
  1074  0298                     	;# 
  1075  0298                     	;# 
  1076  0299                     	;# 
  1077  029A                     	;# 
  1078  0394                     	;# 
  1079  0395                     	;# 
  1080  0396                     	;# 
  1081  0FE4                     	;# 
  1082  0FE5                     	;# 
  1083  0FE6                     	;# 
  1084  0FE7                     	;# 
  1085  0FE8                     	;# 
  1086  0FE9                     	;# 
  1087  0FEA                     	;# 
  1088  0FEB                     	;# 
  1089  0FED                     	;# 
  1090  0FEE                     	;# 
  1091  0FEF                     	;# 
  1092  0000                     	;# 
  1093  0001                     	;# 
  1094  0002                     	;# 
  1095  0003                     	;# 
  1096  0004                     	;# 
  1097  0005                     	;# 
  1098  0006                     	;# 
  1099  0007                     	;# 
  1100  0008                     	;# 
  1101  0009                     	;# 
  1102  000A                     	;# 
  1103  000B                     	;# 
  1104  000C                     	;# 
  1105  000D                     	;# 
  1106  000E                     	;# 
  1107  0010                     	;# 
  1108  0011                     	;# 
  1109  0012                     	;# 
  1110  0015                     	;# 
  1111  0016                     	;# 
  1112  0016                     	;# 
  1113  0017                     	;# 
  1114  0018                     	;# 
  1115  0019                     	;# 
  1116  001A                     	;# 
  1117  001B                     	;# 
  1118  001C                     	;# 
  1119  008C                     	;# 
  1120  008D                     	;# 
  1121  008E                     	;# 
  1122  0090                     	;# 
  1123  0091                     	;# 
  1124  0092                     	;# 
  1125  0095                     	;# 
  1126  0096                     	;# 
  1127  0097                     	;# 
  1128  0099                     	;# 
  1129  009A                     	;# 
  1130  009B                     	;# 
  1131  009B                     	;# 
  1132  009C                     	;# 
  1133  009D                     	;# 
  1134  009E                     	;# 
  1135  010C                     	;# 
  1136  010D                     	;# 
  1137  010E                     	;# 
  1138  0116                     	;# 
  1139  0117                     	;# 
  1140  011D                     	;# 
  1141  018C                     	;# 
  1142  018D                     	;# 
  1143  018E                     	;# 
  1144  0191                     	;# 
  1145  0191                     	;# 
  1146  0192                     	;# 
  1147  0193                     	;# 
  1148  0193                     	;# 
  1149  0194                     	;# 
  1150  0195                     	;# 
  1151  0196                     	;# 
  1152  0197                     	;# 
  1153  0199                     	;# 
  1154  019A                     	;# 
  1155  019B                     	;# 
  1156  019B                     	;# 
  1157  019B                     	;# 
  1158  019B                     	;# 
  1159  019C                     	;# 
  1160  019C                     	;# 
  1161  019D                     	;# 
  1162  019E                     	;# 
  1163  019F                     	;# 
  1164  020D                     	;# 
  1165  0210                     	;# 
  1166  0211                     	;# 
  1167  0211                     	;# 
  1168  0212                     	;# 
  1169  0212                     	;# 
  1170  0213                     	;# 
  1171  0213                     	;# 
  1172  0214                     	;# 
  1173  0214                     	;# 
  1174  0215                     	;# 
  1175  0215                     	;# 
  1176  0215                     	;# 
  1177  0216                     	;# 
  1178  0216                     	;# 
  1179  0217                     	;# 
  1180  0217                     	;# 
  1181  0291                     	;# 
  1182  0291                     	;# 
  1183  0292                     	;# 
  1184  0293                     	;# 
  1185  0298                     	;# 
  1186  0298                     	;# 
  1187  0299                     	;# 
  1188  029A                     	;# 
  1189  0394                     	;# 
  1190  0395                     	;# 
  1191  0396                     	;# 
  1192  0FE4                     	;# 
  1193  0FE5                     	;# 
  1194  0FE6                     	;# 
  1195  0FE7                     	;# 
  1196  0FE8                     	;# 
  1197  0FE9                     	;# 
  1198  0FEA                     	;# 
  1199  0FEB                     	;# 
  1200  0FED                     	;# 
  1201  0FEE                     	;# 
  1202  0FEF                     	;# 
  1203  0000                     	;# 
  1204  0001                     	;# 
  1205  0002                     	;# 
  1206  0003                     	;# 
  1207  0004                     	;# 
  1208  0005                     	;# 
  1209  0006                     	;# 
  1210  0007                     	;# 
  1211  0008                     	;# 
  1212  0009                     	;# 
  1213  000A                     	;# 
  1214  000B                     	;# 
  1215  000C                     	;# 
  1216  000D                     	;# 
  1217  000E                     	;# 
  1218  0010                     	;# 
  1219  0011                     	;# 
  1220  0012                     	;# 
  1221  0015                     	;# 
  1222  0016                     	;# 
  1223  0016                     	;# 
  1224  0017                     	;# 
  1225  0018                     	;# 
  1226  0019                     	;# 
  1227  001A                     	;# 
  1228  001B                     	;# 
  1229  001C                     	;# 
  1230  008C                     	;# 
  1231  008D                     	;# 
  1232  008E                     	;# 
  1233  0090                     	;# 
  1234  0091                     	;# 
  1235  0092                     	;# 
  1236  0095                     	;# 
  1237  0096                     	;# 
  1238  0097                     	;# 
  1239  0099                     	;# 
  1240  009A                     	;# 
  1241  009B                     	;# 
  1242  009B                     	;# 
  1243  009C                     	;# 
  1244  009D                     	;# 
  1245  009E                     	;# 
  1246  010C                     	;# 
  1247  010D                     	;# 
  1248  010E                     	;# 
  1249  0116                     	;# 
  1250  0117                     	;# 
  1251  011D                     	;# 
  1252  018C                     	;# 
  1253  018D                     	;# 
  1254  018E                     	;# 
  1255  0191                     	;# 
  1256  0191                     	;# 
  1257  0192                     	;# 
  1258  0193                     	;# 
  1259  0193                     	;# 
  1260  0194                     	;# 
  1261  0195                     	;# 
  1262  0196                     	;# 
  1263  0197                     	;# 
  1264  0199                     	;# 
  1265  019A                     	;# 
  1266  019B                     	;# 
  1267  019B                     	;# 
  1268  019B                     	;# 
  1269  019B                     	;# 
  1270  019C                     	;# 
  1271  019C                     	;# 
  1272  019D                     	;# 
  1273  019E                     	;# 
  1274  019F                     	;# 
  1275  020D                     	;# 
  1276  0210                     	;# 
  1277  0211                     	;# 
  1278  0211                     	;# 
  1279  0212                     	;# 
  1280  0212                     	;# 
  1281  0213                     	;# 
  1282  0213                     	;# 
  1283  0214                     	;# 
  1284  0214                     	;# 
  1285  0215                     	;# 
  1286  0215                     	;# 
  1287  0215                     	;# 
  1288  0216                     	;# 
  1289  0216                     	;# 
  1290  0217                     	;# 
  1291  0217                     	;# 
  1292  0291                     	;# 
  1293  0291                     	;# 
  1294  0292                     	;# 
  1295  0293                     	;# 
  1296  0298                     	;# 
  1297  0298                     	;# 
  1298  0299                     	;# 
  1299  029A                     	;# 
  1300  0394                     	;# 
  1301  0395                     	;# 
  1302  0396                     	;# 
  1303  0FE4                     	;# 
  1304  0FE5                     	;# 
  1305  0FE6                     	;# 
  1306  0FE7                     	;# 
  1307  0FE8                     	;# 
  1308  0FE9                     	;# 
  1309  0FEA                     	;# 
  1310  0FEB                     	;# 
  1311  0FED                     	;# 
  1312  0FEE                     	;# 
  1313  0FEF                     	;# 
  1314  0000                     	;# 
  1315  0001                     	;# 
  1316  0002                     	;# 
  1317  0003                     	;# 
  1318  0004                     	;# 
  1319  0005                     	;# 
  1320  0006                     	;# 
  1321  0007                     	;# 
  1322  0008                     	;# 
  1323  0009                     	;# 
  1324  000A                     	;# 
  1325  000B                     	;# 
  1326  000C                     	;# 
  1327  000D                     	;# 
  1328  000E                     	;# 
  1329  0010                     	;# 
  1330  0011                     	;# 
  1331  0012                     	;# 
  1332  0015                     	;# 
  1333  0016                     	;# 
  1334  0016                     	;# 
  1335  0017                     	;# 
  1336  0018                     	;# 
  1337  0019                     	;# 
  1338  001A                     	;# 
  1339  001B                     	;# 
  1340  001C                     	;# 
  1341  008C                     	;# 
  1342  008D                     	;# 
  1343  008E                     	;# 
  1344  0090                     	;# 
  1345  0091                     	;# 
  1346  0092                     	;# 
  1347  0095                     	;# 
  1348  0096                     	;# 
  1349  0097                     	;# 
  1350  0099                     	;# 
  1351  009A                     	;# 
  1352  009B                     	;# 
  1353  009B                     	;# 
  1354  009C                     	;# 
  1355  009D                     	;# 
  1356  009E                     	;# 
  1357  010C                     	;# 
  1358  010D                     	;# 
  1359  010E                     	;# 
  1360  0116                     	;# 
  1361  0117                     	;# 
  1362  011D                     	;# 
  1363  018C                     	;# 
  1364  018D                     	;# 
  1365  018E                     	;# 
  1366  0191                     	;# 
  1367  0191                     	;# 
  1368  0192                     	;# 
  1369  0193                     	;# 
  1370  0193                     	;# 
  1371  0194                     	;# 
  1372  0195                     	;# 
  1373  0196                     	;# 
  1374  0197                     	;# 
  1375  0199                     	;# 
  1376  019A                     	;# 
  1377  019B                     	;# 
  1378  019B                     	;# 
  1379  019B                     	;# 
  1380  019B                     	;# 
  1381  019C                     	;# 
  1382  019C                     	;# 
  1383  019D                     	;# 
  1384  019E                     	;# 
  1385  019F                     	;# 
  1386  020D                     	;# 
  1387  0210                     	;# 
  1388  0211                     	;# 
  1389  0211                     	;# 
  1390  0212                     	;# 
  1391  0212                     	;# 
  1392  0213                     	;# 
  1393  0213                     	;# 
  1394  0214                     	;# 
  1395  0214                     	;# 
  1396  0215                     	;# 
  1397  0215                     	;# 
  1398  0215                     	;# 
  1399  0216                     	;# 
  1400  0216                     	;# 
  1401  0217                     	;# 
  1402  0217                     	;# 
  1403  0291                     	;# 
  1404  0291                     	;# 
  1405  0292                     	;# 
  1406  0293                     	;# 
  1407  0298                     	;# 
  1408  0298                     	;# 
  1409  0299                     	;# 
  1410  029A                     	;# 
  1411  0394                     	;# 
  1412  0395                     	;# 
  1413  0396                     	;# 
  1414  0FE4                     	;# 
  1415  0FE5                     	;# 
  1416  0FE6                     	;# 
  1417  0FE7                     	;# 
  1418  0FE8                     	;# 
  1419  0FE9                     	;# 
  1420  0FEA                     	;# 
  1421  0FEB                     	;# 
  1422  0FED                     	;# 
  1423  0FEE                     	;# 
  1424  0FEF                     	;# 
  1425                           
  1426                           	psect	idataBANK2
  1427  1032                     __pidataBANK2:	
  1428                           
  1429                           ;initializer for _cc1PaTable
  1430  1032  3403               	retlw	3
  1431  1033  340F               	retlw	15
  1432  1034  341E               	retlw	30
  1433  1035  3427               	retlw	39
  1434  1036  3450               	retlw	80
  1435  1037  3481               	retlw	129
  1436  1038  34CB               	retlw	203
  1437  1039  34C2               	retlw	194
  1438                           
  1439                           	psect	idataBANK3
  1440  1503                     __pidataBANK3:	
  1441                           
  1442                           ;initializer for _cc1InitVal
  1443  1503  3447               	retlw	71
  1444  1504  3446               	retlw	70
  1445  1505  344E               	retlw	78
  1446  1506  340B               	retlw	11
  1447  1507  34D3               	retlw	211
  1448  1508  3491               	retlw	145
  1449  1509  340A               	retlw	10
  1450  150A  3408               	retlw	8
  1451  150B  3404               	retlw	4
  1452  150C  3400               	retlw	0
  1453  150D  3400               	retlw	0
  1454  150E  3406               	retlw	6
  1455  150F  3400               	retlw	0
  1456  1510  3421               	retlw	33
  1457  1511  3463               	retlw	99
  1458  1512  3491               	retlw	145
  1459  1513  34CA               	retlw	202
  1460  1514  3483               	retlw	131
  1461  1515  3402               	retlw	2
  1462  1516  3402               	retlw	2
  1463  1517  343B               	retlw	59
  1464  1518  3434               	retlw	52
  1465  1519  3407               	retlw	7
  1466  151A  343F               	retlw	63
  1467  151B  3408               	retlw	8
  1468  151C  3416               	retlw	22
  1469  151D  346C               	retlw	108
  1470  151E  3403               	retlw	3
  1471  151F  3440               	retlw	64
  1472  1520  3491               	retlw	145
  1473  1521  3487               	retlw	135
  1474  1522  346B               	retlw	107
  1475  1523  34FB               	retlw	251
  1476  1524  3456               	retlw	86
  1477  1525  3416               	retlw	22
  1478  1526  34E9               	retlw	233
  1479  1527  342A               	retlw	42
  1480  1528  3400               	retlw	0
  1481  1529  341F               	retlw	31
  1482  152A  3441               	retlw	65
  1483  152B  3400               	retlw	0
  1484  152C  3459               	retlw	89
  1485  152D  347F               	retlw	127
  1486  152E  343F               	retlw	63
  1487  152F  3481               	retlw	129
  1488  1530  3435               	retlw	53
  1489  1531  3409               	retlw	9
  1490                           
  1491                           ;initializer for _picBatt
  1492  1532  340E               	retlw	14
  1493  1533  341F               	retlw	31
  1494  1534  3411               	retlw	17
  1495  1535  3411               	retlw	17
  1496  1536  3411               	retlw	17
  1497  1537  3411               	retlw	17
  1498  1538  3411               	retlw	17
  1499  1539  341F               	retlw	31
  1500  153A  3400               	retlw	0
  1501                           
  1502                           	psect	stringtext
  1503  1800                     __pstringtext:	
  1504  1800                     _dpowers:	
  1505  1800  3401               	retlw	1
  1506  1801  3400               	retlw	0
  1507  1802  3400               	retlw	0
  1508  1803  3400               	retlw	0
  1509  1804  340A               	retlw	10
  1510  1805  3400               	retlw	0
  1511  1806  3400               	retlw	0
  1512  1807  3400               	retlw	0
  1513  1808  3464               	retlw	100
  1514  1809  3400               	retlw	0
  1515  180A  3400               	retlw	0
  1516  180B  3400               	retlw	0
  1517  180C  34E8               	retlw	232
  1518  180D  3403               	retlw	3
  1519  180E  3400               	retlw	0
  1520  180F  3400               	retlw	0
  1521  1810  3410               	retlw	16
  1522  1811  3427               	retlw	39
  1523  1812  3400               	retlw	0
  1524  1813  3400               	retlw	0
  1525  1814  34A0               	retlw	160
  1526  1815  3486               	retlw	134
  1527  1816  3401               	retlw	1
  1528  1817  3400               	retlw	0
  1529  1818  3440               	retlw	64
  1530  1819  3442               	retlw	66
  1531  181A  340F               	retlw	15
  1532  181B  3400               	retlw	0
  1533  181C  3480               	retlw	128
  1534  181D  3496               	retlw	150
  1535  181E  3498               	retlw	152
  1536  181F  3400               	retlw	0
  1537  1820  3400               	retlw	0
  1538  1821  34E1               	retlw	225
  1539  1822  34F5               	retlw	245
  1540  1823  3405               	retlw	5
  1541  1824  3400               	retlw	0
  1542  1825  34CA               	retlw	202
  1543  1826  349A               	retlw	154
  1544  1827  343B               	retlw	59
  1545  1828                     __end_of_dpowers:	
  1546  1828                     _nvm_pgm_cfg:	
  1547  1828  345C               	retlw	92
  1548  1829  34C5               	retlw	197
  1549  182A  3401               	retlw	1
  1550  182B  3400               	retlw	0
  1551  182C  3400               	retlw	0
  1552  182D  3400               	retlw	0
  1553  182E  3400               	retlw	0
  1554  182F  3400               	retlw	0
  1555  1830  3400               	retlw	0
  1556  1831  3400               	retlw	0
  1557  1832  3400               	retlw	0
  1558  1833                     __end_of_nvm_pgm_cfg:	
  1559  000B                     _INTCON	set	11
  1560  000B                     _INTCONbits	set	11
  1561  0011                     _PIR1	set	17
  1562  0011                     _PIR1bits	set	17
  1563  0012                     _PIR2	set	18
  1564  000C                     _PORTAbits	set	12
  1565  000D                     _PORTBbits	set	13
  1566  0018                     _T1CON	set	24
  1567  0015                     _TMR0	set	21
  1568  0017                     _TMR1H	set	23
  1569  0016                     _TMR1L	set	22
  1570  0095                     _OPTION_REG	set	149
  1571  0099                     _OSCCON	set	153
  1572  0091                     _PIE1	set	145
  1573  0092                     _PIE2	set	146
  1574  008C                     _TRISA	set	140
  1575  008D                     _TRISB	set	141
  1576  008E                     _TRISC	set	142
  1577  0097                     _WDTCON	set	151
  1578  010C                     _LATA	set	268
  1579  010C                     _LATAbits	set	268
  1580  0191                     _PMADR	set	401
  1581  0193                     _PMDAT	set	403
  1582  018C                     _ANSELA	set	396
  1583  018D                     _ANSELB	set	397
  1584  018E                     _ANSELC	set	398
  1585  0195                     _PMCON1	set	405
  1586  0195                     _PMCON1bits	set	405
  1587  0196                     _PMCON2	set	406
  1588  0211                     _SSPBUF	set	529
  1589  0215                     _SSPCON1	set	533
  1590  0216                     _SSPCON2	set	534
  1591  0215                     _SSPCONbits	set	533
  1592  0214                     _SSPSTAT	set	532
  1593  020D                     _WPUB	set	525
  1594  0395                     _IOCBN	set	917
  1595  0394                     _IOCBP	set	916
  1596  1833                     STR_1:	
  1597  1833  3425               	retlw	37	;'%'
  1598  1834  346C               	retlw	108	;'l'
  1599  1835  3475               	retlw	117	;'u'
  1600  1836  342E               	retlw	46	;'.'
  1601  1837  3425               	retlw	37	;'%'
  1602  1838  3436               	retlw	54	;'6'
  1603  1839  342E               	retlw	46	;'.'
  1604  183A  3436               	retlw	54	;'6'
  1605  183B  346C               	retlw	108	;'l'
  1606  183C  3475               	retlw	117	;'u'
  1607  183D  3400               	retlw	0
  1608                           
  1609                           ; #config settings
  1610  0000                     
  1611                           	psect	cinit
  1612  0013                     start_initialization:	
  1613  0013                     __initialization:	
  1614                           
  1615                           ; Clear objects allocated to COMMON
  1616  0013  01FC               	clrf	__pbssCOMMON& (0+127)
  1617                           
  1618                           ; Clear objects allocated to BANK1
  1619  0014  30E3               	movlw	low __pbssBANK1
  1620  0015  0084               	movwf	4
  1621  0016  3000               	movlw	high __pbssBANK1
  1622  0017  0085               	movwf	5
  1623  0018  300D               	movlw	13
  1624  0019  3190  2024  3180   	fcall	clear_ram0
  1625                           
  1626                           ; Clear objects allocated to BANK2
  1627  001C  3020               	movlw	low __pbssBANK2
  1628  001D  0084               	movwf	4
  1629  001E  3001               	movlw	high __pbssBANK2
  1630  001F  0085               	movwf	5
  1631  0020  3042               	movlw	66
  1632  0021  3190  2024  3180   	fcall	clear_ram0
  1633                           
  1634                           ; Clear objects allocated to BANK3
  1635  0024  30D8               	movlw	low __pbssBANK3
  1636  0025  0084               	movwf	4
  1637  0026  3001               	movlw	high __pbssBANK3
  1638  0027  0085               	movwf	5
  1639  0028  3011               	movlw	17
  1640  0029  3190  2024  3180   	fcall	clear_ram0
  1641                           
  1642                           ; Initialize objects allocated to BANK2
  1643  002C  3032               	movlw	low __pidataBANK2
  1644  002D  0084               	movwf	4
  1645  002E  3090               	movlw	(high __pidataBANK2)| (0+128)
  1646  002F  0085               	movwf	5
  1647  0030  3062               	movlw	low __pdataBANK2
  1648  0031  0086               	movwf	6
  1649  0032  3001               	movlw	high __pdataBANK2
  1650  0033  0087               	movwf	7
  1651  0034  3008               	movlw	8
  1652  0035  3190  201E  3180   	fcall	init_ram
  1653                           
  1654                           ; Initialize objects allocated to BANK3
  1655  0038  3003               	movlw	low __pidataBANK3
  1656  0039  0084               	movwf	4
  1657  003A  3095               	movlw	(high __pidataBANK3)| (0+128)
  1658  003B  0085               	movwf	5
  1659  003C  30A0               	movlw	low __pdataBANK3
  1660  003D  0086               	movwf	6
  1661  003E  3001               	movlw	high __pdataBANK3
  1662  003F  0087               	movwf	7
  1663  0040  3038               	movlw	56
  1664  0041  3190  201E         	fcall	init_ram
  1665  0043                     end_of_initialization:	
  1666                           ;End of C runtime variable initialization code
  1667                           
  1668  0043                     __end_of__initialization:	
  1669  0043  0020               	movlb	0
  1670  0044  3196  2EB7         	ljmp	_main	;jump to C main() function
  1671                           
  1672                           	psect	bssCOMMON
  1673  007C                     __pbssCOMMON:	
  1674  007C                     _sta:	
  1675  007C                     	ds	1
  1676                           
  1677                           	psect	bssBANK1
  1678  00E3                     __pbssBANK1:	
  1679  00E3                     _tmrVisBatt:	
  1680  00E3                     	ds	2
  1681  00E5                     _pgm_flg:	
  1682  00E5                     	ds	1
  1683  00E6                     _rtx_flg:	
  1684  00E6                     	ds	1
  1685  00E7                     _tmrDbncSel:	
  1686  00E7                     	ds	1
  1687  00E8                     _tmrRcvPkt:	
  1688  00E8                     	ds	1
  1689  00E9                     _u_flg_din:	
  1690  00E9                     	ds	1
  1691  00EA                     _u_in_ev_down:	
  1692  00EA                     	ds	1
  1693  00EB                     _u_in_ev_long:	
  1694  00EB                     	ds	1
  1695  00EC                     _u_in_sta_currTask:	
  1696  00EC                     	ds	1
  1697  00ED                     _u_in_sta_tmpTask:	
  1698  00ED                     	ds	1
  1699  00EE                     _numRxByte:	
  1700  00EE                     	ds	1
  1701  00EF                     _numTxByte:	
  1702  00EF                     	ds	1
  1703                           
  1704                           	psect	bssBANK2
  1705  0120                     __pbssBANK2:	
  1706  0120                     _batt_con_curr_sens:	
  1707  0120                     	ds	3
  1708  0123                     _batt_gen_curr_sens:	
  1709  0123                     	ds	3
  1710  0126                     _batt_volt_sens:	
  1711  0126                     	ds	3
  1712  0129                     _con_curr_sens:	
  1713  0129                     	ds	3
  1714  012C                     _con_power:	
  1715  012C                     	ds	3
  1716  012F                     _gen_curr_sens:	
  1717  012F                     	ds	3
  1718  0132                     _gen_power:	
  1719  0132                     	ds	3
  1720  0135                     _volt_sens:	
  1721  0135                     	ds	3
  1722  0138                     _tmrCalibration:	
  1723  0138                     	ds	2
  1724  013A                     _tmrLongSel:	
  1725  013A                     	ds	2
  1726  013C                     _tmrPgm:	
  1727  013C                     	ds	2
  1728  013E                     _e_POS_PKT:	
  1729  013E                     	ds	1
  1730  013F                     _s_CC1_FLG:	
  1731  013F                     	ds	1
  1732  0140                     _sys_pgm_sta:	
  1733  0140                     	ds	1
  1734  0141                     _u_SYS_STA:	
  1735  0141                     	ds	1
  1736  0142                     _u_in_ev_up:	
  1737  0142                     	ds	1
  1738  0143                     _pgm_cfg:	
  1739  0143                     	ds	11
  1740  014E                     _pktRx:	
  1741  014E                     	ds	10
  1742  0158                     _pktTx:	
  1743  0158                     	ds	10
  1744                           
  1745                           	psect	dataBANK2
  1746  0162                     __pdataBANK2:	
  1747  0162                     _cc1PaTable:	
  1748  0162                     	ds	8
  1749                           
  1750                           	psect	bssBANK3
  1751  01D8                     __pbssBANK3:	
  1752  01D8                     ftoa@buf:	
  1753  01D8                     	ds	17
  1754                           
  1755                           	psect	dataBANK3
  1756  01A0                     __pdataBANK3:	
  1757  01A0                     _cc1InitVal:	
  1758  01A0                     	ds	47
  1759  01CF                     _picBatt:	
  1760  01CF                     	ds	9
  1761                           
  1762                           	psect	clrtext
  1763  1024                     clear_ram0:	
  1764                           ;	Called with FSR0 containing the base address, and
  1765                           ;	WREG with the size to clear
  1766                           
  1767  1024  0064               	clrwdt	;clear the watchdog before getting into this loop
  1768  1025                     clrloop0:	
  1769  1025  0180               	clrf	0	;clear RAM location pointed to by FSR
  1770  1026  3101               	addfsr 0,1
  1771  1027  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1772  1028  2825               	goto	clrloop0	;have we reached the end yet?
  1773  1029  3400               	retlw	0	;all done for this memory range, return
  1774                           
  1775                           	psect	inittext
  1776  101E                     init_ram:	
  1777  101E  00FE               	movwf	126
  1778  101F                     initloop:	
  1779  101F  0012               	moviw fsr0++
  1780  1020  001E               	movwi fsr1++
  1781  1021  0BFE               	decfsz	126,f
  1782  1022  281F               	goto	initloop
  1783  1023  3400               	retlw	0
  1784                           
  1785                           	psect	cstackBANK1
  1786  00A0                     __pcstackBANK1:	
  1787  00A0                     RTXVisDec@strTmp:	
  1788                           
  1789                           ; 16 bytes @ 0x0
  1790  00A0                     	ds	16
  1791  00B0                     RTXVisDec@status:	
  1792                           
  1793                           ; 2 bytes @ 0x10
  1794  00B0                     	ds	2
  1795  00B2                     RTXVisDec@posDec:	
  1796                           
  1797                           ; 1 bytes @ 0x12
  1798  00B2                     	ds	1
  1799  00B3                     RTXVisDec@isDec:	
  1800                           
  1801                           ; 1 bytes @ 0x13
  1802  00B3                     	ds	1
  1803  00B4                     RTXVisDec@p:	
  1804                           
  1805                           ; 1 bytes @ 0x14
  1806  00B4                     	ds	1
  1807  00B5                     RTXVisDec@j:	
  1808                           
  1809                           ; 1 bytes @ 0x15
  1810  00B5                     	ds	1
  1811  00B6                     RTXVisDec@i:	
  1812                           
  1813                           ; 1 bytes @ 0x16
  1814  00B6                     	ds	1
  1815  00B7                     _RTXUpdateDisplay$1513:	
  1816                           
  1817                           ; 3 bytes @ 0x17
  1818  00B7                     	ds	3
  1819  00BA                     RTXUpdateDisplay@charIdSens:	
  1820                           
  1821                           ; 4 bytes @ 0x1A
  1822  00BA                     	ds	4
  1823  00BE                     RTXUpdateDisplay@strRow2:	
  1824                           
  1825                           ; 16 bytes @ 0x1E
  1826  00BE                     	ds	16
  1827  00CE                     RTXUpdateDisplay@strRow1:	
  1828                           
  1829                           ; 16 bytes @ 0x2E
  1830  00CE                     	ds	16
  1831  00DE                     RTXUpdateDisplay@i:	
  1832                           
  1833                           ; 1 bytes @ 0x3E
  1834  00DE                     	ds	1
  1835  00DF                     RTXUpdateDisplay@val:	
  1836                           
  1837                           ; 1 bytes @ 0x3F
  1838  00DF                     	ds	1
  1839  00E0                     RTXUpdateDisplay@iR:	
  1840                           
  1841                           ; 1 bytes @ 0x40
  1842  00E0                     	ds	1
  1843  00E1                     ??_main:	
  1844                           
  1845                           ; 0 bytes @ 0x41
  1846  00E1                     	ds	1
  1847  00E2                     main@i:	
  1848                           
  1849                           ; 1 bytes @ 0x42
  1850  00E2                     	ds	1
  1851                           
  1852                           	psect	cstackCOMMON
  1853  0070                     __pcstackCOMMON:	
  1854  0070                     ?_CC1Strobe:	
  1855  0070                     ?_DPYInitDisplay:	
  1856                           ; 0 bytes @ 0x0
  1857                           
  1858  0070                     ?_PGMReadNvm:	
  1859                           ; 0 bytes @ 0x0
  1860                           
  1861  0070                     ?_PGMCheckNvm:	
  1862                           ; 0 bytes @ 0x0
  1863                           
  1864  0070                     ?_PGMPgmOff:	
  1865                           ; 0 bytes @ 0x0
  1866                           
  1867  0070                     ?_PGMNvmReset:	
  1868                           ; 0 bytes @ 0x0
  1869                           
  1870  0070                     ?_RTXUpdateDisplay:	
  1871                           ; 0 bytes @ 0x0
  1872                           
  1873  0070                     ?_RTXPgmOff:	
  1874                           ; 0 bytes @ 0x0
  1875                           
  1876  0070                     ?_RTXSup:	
  1877                           ; 0 bytes @ 0x0
  1878                           
  1879  0070                     ?_RTXSendPgm:	
  1880                           ; 0 bytes @ 0x0
  1881                           
  1882  0070                     ?_RTXReadPkt:	
  1883                           ; 0 bytes @ 0x0
  1884                           
  1885  0070                     ?_RTXSendRData:	
  1886                           ; 0 bytes @ 0x0
  1887                           
  1888  0070                     ?_isdigit:	
  1889                           ; 0 bytes @ 0x0
  1890                           
  1891  0070                     ?_INInit:	
  1892                           ; 1 bit 
  1893                           
  1894  0070                     ?_OUTInit:	
  1895                           ; 0 bytes @ 0x0
  1896                           
  1897  0070                     ?_OUTSetHTCDataNibble:	
  1898                           ; 0 bytes @ 0x0
  1899                           
  1900  0070                     ?_SPIInit:	
  1901                           ; 0 bytes @ 0x0
  1902                           
  1903  0070                     ?_CC1Init:	
  1904                           ; 0 bytes @ 0x0
  1905                           
  1906  0070                     ?_NVMInit:	
  1907                           ; 0 bytes @ 0x0
  1908                           
  1909  0070                     ?_DINInit:	
  1910                           ; 0 bytes @ 0x0
  1911                           
  1912  0070                     ?_DINTick:	
  1913                           ; 0 bytes @ 0x0
  1914                           
  1915  0070                     ?_DINTask:	
  1916                           ; 0 bytes @ 0x0
  1917                           
  1918  0070                     ?_DPYInit:	
  1919                           ; 0 bytes @ 0x0
  1920                           
  1921  0070                     ?_DPYSendChar:	
  1922                           ; 0 bytes @ 0x0
  1923                           
  1924  0070                     ?_PGMInit:	
  1925                           ; 0 bytes @ 0x0
  1926                           
  1927  0070                     ?_PGMTick:	
  1928                           ; 0 bytes @ 0x0
  1929                           
  1930  0070                     ?_PGMWriteNvm:	
  1931                           ; 0 bytes @ 0x0
  1932                           
  1933  0070                     ?_PGMSelDown:	
  1934                           ; 0 bytes @ 0x0
  1935                           
  1936  0070                     ?_PGMSelLong:	
  1937                           ; 0 bytes @ 0x0
  1938                           
  1939  0070                     ?_RTXInit:	
  1940                           ; 0 bytes @ 0x0
  1941                           
  1942  0070                     ?_RTXTick:	
  1943                           ; 0 bytes @ 0x0
  1944                           
  1945  0070                     ?_RTXTask:	
  1946                           ; 0 bytes @ 0x0
  1947                           
  1948  0070                     ?_RTXSelDown:	
  1949                           ; 0 bytes @ 0x0
  1950                           
  1951  0070                     ?_RTXPgmOn:	
  1952                           ; 0 bytes @ 0x0
  1953                           
  1954  0070                     ?_SYSInit:	
  1955                           ; 0 bytes @ 0x0
  1956                           
  1957  0070                     ?_SYSInt:	
  1958                           ; 0 bytes @ 0x0
  1959                           
  1960  0070                     ??_SYSInt:	
  1961                           ; 0 bytes @ 0x0
  1962                           
  1963  0070                     ?_SYSTask:	
  1964                           ; 0 bytes @ 0x0
  1965                           
  1966  0070                     ?_INTIsr:	
  1967                           ; 0 bytes @ 0x0
  1968                           
  1969  0070                     ??_INTIsr:	
  1970                           ; 0 bytes @ 0x0
  1971                           
  1972  0070                     ?_main:	
  1973                           ; 0 bytes @ 0x0
  1974                           
  1975  0070                     ?_DPYIsBusy:	
  1976                           ; 0 bytes @ 0x0
  1977                           
  1978                           
  1979                           ; 1 bytes @ 0x0
  1980  0070                     	ds	1
  1981  0071                     ??_RTXPgmOff:	
  1982  0071                     ??_isdigit:	
  1983                           ; 0 bytes @ 0x1
  1984                           
  1985  0071                     ??_INInit:	
  1986                           ; 0 bytes @ 0x1
  1987                           
  1988  0071                     ??_OUTInit:	
  1989                           ; 0 bytes @ 0x1
  1990                           
  1991  0071                     ??_OUTSetHTCDataNibble:	
  1992                           ; 0 bytes @ 0x1
  1993                           
  1994  0071                     ??_SPIInit:	
  1995                           ; 0 bytes @ 0x1
  1996                           
  1997  0071                     ?_SPIRead:	
  1998                           ; 0 bytes @ 0x1
  1999                           
  2000  0071                     ?_SPIWrite:	
  2001                           ; 0 bytes @ 0x1
  2002                           
  2003  0071                     ?_DLYDelay_us:	
  2004                           ; 0 bytes @ 0x1
  2005                           
  2006  0071                     ?_DLYDelay_ms:	
  2007                           ; 0 bytes @ 0x1
  2008                           
  2009  0071                     ??_NVMInit:	
  2010                           ; 0 bytes @ 0x1
  2011                           
  2012  0071                     ?_NVMRead:	
  2013                           ; 0 bytes @ 0x1
  2014                           
  2015  0071                     ?_NVMWrite:	
  2016                           ; 0 bytes @ 0x1
  2017                           
  2018  0071                     ??_DINInit:	
  2019                           ; 0 bytes @ 0x1
  2020                           
  2021  0071                     ??_DINTick:	
  2022                           ; 0 bytes @ 0x1
  2023                           
  2024  0071                     ??_DINTask:	
  2025                           ; 0 bytes @ 0x1
  2026                           
  2027  0071                     ??_SYSInit:	
  2028                           ; 0 bytes @ 0x1
  2029                           
  2030  0071                     ?___ftge:	
  2031                           ; 0 bytes @ 0x1
  2032                           
  2033  0071                     ?___wmul:	
  2034                           ; 1 bit 
  2035                           
  2036  0071                     ?___lwdiv:	
  2037                           ; 2 bytes @ 0x1
  2038                           
  2039  0071                     ?___lwmod:	
  2040                           ; 2 bytes @ 0x1
  2041                           
  2042  0071                     ?___ftpack:	
  2043                           ; 2 bytes @ 0x1
  2044                           
  2045  0071                     ?___ftneg:	
  2046                           ; 3 bytes @ 0x1
  2047                           
  2048  0071                     ?___lldiv:	
  2049                           ; 3 bytes @ 0x1
  2050                           
  2051  0071                     NVMInit@sta:	
  2052                           ; 4 bytes @ 0x1
  2053                           
  2054  0071                     DINInit@sta:	
  2055                           ; 1 bytes @ 0x1
  2056                           
  2057  0071                     _isdigit$1264:	
  2058                           ; 1 bytes @ 0x1
  2059                           
  2060  0071                     SPIRead@dstPtr:	
  2061                           ; 1 bytes @ 0x1
  2062                           
  2063  0071                     SPIWrite@srcPtr:	
  2064                           ; 2 bytes @ 0x1
  2065                           
  2066  0071                     DLYDelay_us@val:	
  2067                           ; 2 bytes @ 0x1
  2068                           
  2069  0071                     DLYDelay_ms@val:	
  2070                           ; 2 bytes @ 0x1
  2071                           
  2072  0071                     NVMRead@addr:	
  2073                           ; 2 bytes @ 0x1
  2074                           
  2075  0071                     NVMWrite@addr:	
  2076                           ; 2 bytes @ 0x1
  2077                           
  2078  0071                     ___wmul@multiplier:	
  2079                           ; 2 bytes @ 0x1
  2080                           
  2081  0071                     ___lwdiv@divisor:	
  2082                           ; 2 bytes @ 0x1
  2083                           
  2084  0071                     ___lwmod@divisor:	
  2085                           ; 2 bytes @ 0x1
  2086                           
  2087  0071                     ___ftpack@arg:	
  2088                           ; 2 bytes @ 0x1
  2089                           
  2090  0071                     ___ftge@ff1:	
  2091                           ; 3 bytes @ 0x1
  2092                           
  2093  0071                     ___ftneg@f1:	
  2094                           ; 3 bytes @ 0x1
  2095                           
  2096  0071                     ___lldiv@divisor:	
  2097                           ; 3 bytes @ 0x1
  2098                           
  2099                           
  2100                           ; 4 bytes @ 0x1
  2101  0071                     	ds	1
  2102  0072                     INInit@sta:	
  2103  0072                     OUTInit@sta:	
  2104                           ; 1 bytes @ 0x2
  2105                           
  2106  0072                     OUTSetHTCDataNibble@val:	
  2107                           ; 1 bytes @ 0x2
  2108                           
  2109  0072                     SPIInit@state:	
  2110                           ; 1 bytes @ 0x2
  2111                           
  2112  0072                     SYSInit@state:	
  2113                           ; 1 bytes @ 0x2
  2114                           
  2115  0072                     isdigit@c:	
  2116                           ; 1 bytes @ 0x2
  2117                           
  2118                           
  2119                           ; 1 bytes @ 0x2
  2120  0072                     	ds	1
  2121  0073                     ??_DLYDelay_us:	
  2122  0073                     ??_DLYDelay_ms:	
  2123                           ; 0 bytes @ 0x3
  2124                           
  2125  0073                     OUTSetHTCDataNibble@dataToSet:	
  2126                           ; 0 bytes @ 0x3
  2127                           
  2128  0073                     SPIRead@len:	
  2129                           ; 1 bytes @ 0x3
  2130                           
  2131  0073                     SPIWrite@len:	
  2132                           ; 1 bytes @ 0x3
  2133                           
  2134  0073                     NVMRead@dest:	
  2135                           ; 1 bytes @ 0x3
  2136                           
  2137  0073                     NVMWrite@source:	
  2138                           ; 1 bytes @ 0x3
  2139                           
  2140  0073                     DLYDelay_us@i:	
  2141                           ; 1 bytes @ 0x3
  2142                           
  2143  0073                     ___wmul@multiplicand:	
  2144                           ; 2 bytes @ 0x3
  2145                           
  2146  0073                     ___lwdiv@dividend:	
  2147                           ; 2 bytes @ 0x3
  2148                           
  2149  0073                     ___lwmod@dividend:	
  2150                           ; 2 bytes @ 0x3
  2151                           
  2152                           
  2153                           ; 2 bytes @ 0x3
  2154  0073                     	ds	1
  2155  0074                     ??_SPIRead:	
  2156  0074                     ??_SPIWrite:	
  2157                           ; 0 bytes @ 0x4
  2158                           
  2159  0074                     ??___ftneg:	
  2160                           ; 0 bytes @ 0x4
  2161                           
  2162  0074                     NVMRead@len:	
  2163                           ; 0 bytes @ 0x4
  2164                           
  2165  0074                     NVMWrite@len:	
  2166                           ; 1 bytes @ 0x4
  2167                           
  2168  0074                     ___ftpack@exp:	
  2169                           ; 1 bytes @ 0x4
  2170                           
  2171  0074                     ___ftge@ff2:	
  2172                           ; 1 bytes @ 0x4
  2173                           
  2174                           
  2175                           ; 3 bytes @ 0x4
  2176  0074                     	ds	1
  2177  0075                     ?_DPYWriteNibble:	
  2178  0075                     ?_DPYWriteByte:	
  2179                           ; 0 bytes @ 0x5
  2180                           
  2181  0075                     ??_DPYIsBusy:	
  2182                           ; 0 bytes @ 0x5
  2183                           
  2184  0075                     ??_NVMRead:	
  2185                           ; 0 bytes @ 0x5
  2186                           
  2187  0075                     ??_NVMWrite:	
  2188                           ; 0 bytes @ 0x5
  2189                           
  2190  0075                     ??___wmul:	
  2191                           ; 0 bytes @ 0x5
  2192                           
  2193  0075                     ??___lwdiv:	
  2194                           ; 0 bytes @ 0x5
  2195                           
  2196  0075                     ??___lwmod:	
  2197                           ; 0 bytes @ 0x5
  2198                           
  2199  0075                     DPYWriteNibble@val:	
  2200                           ; 0 bytes @ 0x5
  2201                           
  2202  0075                     DPYWriteByte@val:	
  2203                           ; 1 bytes @ 0x5
  2204                           
  2205  0075                     ___ftpack@sign:	
  2206                           ; 1 bytes @ 0x5
  2207                           
  2208  0075                     DLYDelay_ms@i:	
  2209                           ; 1 bytes @ 0x5
  2210                           
  2211  0075                     ___wmul@product:	
  2212                           ; 2 bytes @ 0x5
  2213                           
  2214  0075                     ___lldiv@dividend:	
  2215                           ; 2 bytes @ 0x5
  2216                           
  2217                           
  2218                           ; 4 bytes @ 0x5
  2219  0075                     	ds	1
  2220  0076                     ??_DPYWriteNibble:	
  2221  0076                     ??_DPYWriteByte:	
  2222                           ; 0 bytes @ 0x6
  2223                           
  2224  0076                     ??___ftpack:	
  2225                           ; 0 bytes @ 0x6
  2226                           
  2227  0076                     SPIWrite@i:	
  2228                           ; 0 bytes @ 0x6
  2229                           
  2230  0076                     DPYWriteNibble@rs:	
  2231                           ; 1 bytes @ 0x6
  2232                           
  2233  0076                     DPYIsBusy@bf:	
  2234                           ; 1 bytes @ 0x6
  2235                           
  2236  0076                     ___lwmod@counter:	
  2237                           ; 1 bytes @ 0x6
  2238                           
  2239  0076                     ___lwdiv@quotient:	
  2240                           ; 1 bytes @ 0x6
  2241                           
  2242                           
  2243                           ; 2 bytes @ 0x6
  2244  0076                     	ds	1
  2245  0077                     ??_CC1Strobe:	
  2246  0077                     ?_CC1Write:	
  2247                           ; 0 bytes @ 0x7
  2248                           
  2249  0077                     ??___ftge:	
  2250                           ; 0 bytes @ 0x7
  2251                           
  2252  0077                     CC1Write@src:	
  2253                           ; 0 bytes @ 0x7
  2254                           
  2255  0077                     NVMRead@i:	
  2256                           ; 1 bytes @ 0x7
  2257                           
  2258  0077                     DPYWriteByte@rs:	
  2259                           ; 1 bytes @ 0x7
  2260                           
  2261                           
  2262                           ; 1 bytes @ 0x7
  2263  0077                     	ds	1
  2264  0078                     ?_DPYDrawChar:	
  2265  0078                     ??_PGMReadNvm:	
  2266                           ; 0 bytes @ 0x8
  2267                           
  2268  0078                     ?_DPYSetCur:	
  2269                           ; 0 bytes @ 0x8
  2270                           
  2271  0078                     ??_DPYSendChar:	
  2272                           ; 0 bytes @ 0x8
  2273                           
  2274  0078                     ??_PGMWriteNvm:	
  2275                           ; 0 bytes @ 0x8
  2276                           
  2277  0078                     SPIRead@i:	
  2278                           ; 0 bytes @ 0x8
  2279                           
  2280  0078                     CC1Strobe@e_stb:	
  2281                           ; 1 bytes @ 0x8
  2282                           
  2283  0078                     CC1Write@len:	
  2284                           ; 1 bytes @ 0x8
  2285                           
  2286  0078                     DPYDrawChar@p:	
  2287                           ; 1 bytes @ 0x8
  2288                           
  2289  0078                     DPYSetCur@col:	
  2290                           ; 1 bytes @ 0x8
  2291                           
  2292  0078                     ___lwdiv@counter:	
  2293                           ; 1 bytes @ 0x8
  2294                           
  2295                           
  2296                           ; 1 bytes @ 0x8
  2297  0078                     	ds	1
  2298  0079                     ??_CC1Write:	
  2299  0079                     ??_DPYDrawChar:	
  2300                           ; 0 bytes @ 0x9
  2301                           
  2302  0079                     ??_utoa:	
  2303                           ; 0 bytes @ 0x9
  2304                           
  2305  0079                     ?_CC1Read:	
  2306                           ; 0 bytes @ 0x9
  2307                           
  2308  0079                     ??_DPYSetCur:	
  2309                           ; 0 bytes @ 0x9
  2310                           
  2311  0079                     ??___lldiv:	
  2312                           ; 0 bytes @ 0x9
  2313                           
  2314  0079                     ??___lltoft:	
  2315                           ; 0 bytes @ 0x9
  2316                           
  2317  0079                     CC1Strobe@cc1Stb:	
  2318                           ; 0 bytes @ 0x9
  2319                           
  2320  0079                     DPYSendChar@c:	
  2321                           ; 1 bytes @ 0x9
  2322                           
  2323  0079                     ___ftadd@sign:	
  2324                           ; 1 bytes @ 0x9
  2325                           
  2326  0079                     CC1Read@dst:	
  2327                           ; 1 bytes @ 0x9
  2328                           
  2329                           
  2330                           ; 2 bytes @ 0x9
  2331  0079                     	ds	1
  2332  007A                     ??_PGMNvmReset:	
  2333  007A                     ??_itoa:	
  2334                           ; 0 bytes @ 0xA
  2335                           
  2336  007A                     ??___llmod:	
  2337                           ; 0 bytes @ 0xA
  2338                           
  2339  007A                     CC1Write@addr:	
  2340                           ; 0 bytes @ 0xA
  2341                           
  2342  007A                     DPYSetCur@row:	
  2343                           ; 1 bytes @ 0xA
  2344                           
  2345  007A                     ___ftadd@exp2:	
  2346                           ; 1 bytes @ 0xA
  2347                           
  2348  007A                     ___lltoft@exp:	
  2349                           ; 1 bytes @ 0xA
  2350                           
  2351                           
  2352                           ; 1 bytes @ 0xA
  2353  007A                     	ds	1
  2354  007B                     ??_DPYInitDisplay:	
  2355  007B                     ??_PGMCheckNvm:	
  2356                           ; 0 bytes @ 0xB
  2357                           
  2358  007B                     ??_PGMInit:	
  2359                           ; 0 bytes @ 0xB
  2360                           
  2361  007B                     CC1Read@len:	
  2362                           ; 0 bytes @ 0xB
  2363                           
  2364  007B                     CC1Write@cc1Addr:	
  2365                           ; 1 bytes @ 0xB
  2366                           
  2367  007B                     DPYSetCur@addr:	
  2368                           ; 1 bytes @ 0xB
  2369                           
  2370  007B                     PGMInit@state:	
  2371                           ; 1 bytes @ 0xB
  2372                           
  2373  007B                     ___ftadd@exp1:	
  2374                           ; 1 bytes @ 0xB
  2375                           
  2376  007B                     ___llmod@counter:	
  2377                           ; 1 bytes @ 0xB
  2378                           
  2379                           
  2380                           ; 1 bytes @ 0xB
  2381  007B                     	ds	1
  2382  007C                     ??_PGMPgmOff:	
  2383  007C                     ??_RTXSup:	
  2384                           ; 0 bytes @ 0xC
  2385                           
  2386  007C                     ??_DPYInit:	
  2387                           ; 0 bytes @ 0xC
  2388                           
  2389  007C                     ??_PGMTick:	
  2390                           ; 0 bytes @ 0xC
  2391                           
  2392  007C                     ??_PGMSelDown:	
  2393                           ; 0 bytes @ 0xC
  2394                           
  2395  007C                     ??_RTXInit:	
  2396                           ; 0 bytes @ 0xC
  2397                           
  2398  007C                     ??_RTXTick:	
  2399                           ; 0 bytes @ 0xC
  2400                           
  2401  007C                     ??_RTXTask:	
  2402                           ; 0 bytes @ 0xC
  2403                           
  2404  007C                     ??_RTXSelDown:	
  2405                           ; 0 bytes @ 0xC
  2406                           
  2407  007C                     ??_RTXPgmOn:	
  2408                           ; 0 bytes @ 0xC
  2409                           
  2410  007C                     ??_SYSTask:	
  2411                           ; 0 bytes @ 0xC
  2412                           
  2413  007C                     ??___ftsub:	
  2414                           ; 0 bytes @ 0xC
  2415                           
  2416                           
  2417                           	psect	cstackBANK0
  2418  0020                     __pcstackBANK0:	
  2419                           ; 0 bytes @ 0xC
  2420                           
  2421  0020                     ??_CC1Init:	
  2422  0020                     ??_CC1Read:	
  2423                           ; 0 bytes @ 0x0
  2424                           
  2425  0020                     ?_DPYSendStr:	
  2426                           ; 0 bytes @ 0x0
  2427                           
  2428  0020                     ?_utoa:	
  2429                           ; 0 bytes @ 0x0
  2430                           
  2431  0020                     ?___ftadd:	
  2432                           ; 1 bytes @ 0x0
  2433                           
  2434  0020                     ?___ftmul:	
  2435                           ; 3 bytes @ 0x0
  2436                           
  2437  0020                     ?___lltoft:	
  2438                           ; 3 bytes @ 0x0
  2439                           
  2440  0020                     DPYDrawChar@addr:	
  2441                           ; 3 bytes @ 0x0
  2442                           
  2443  0020                     DPYSendStr@col:	
  2444                           ; 1 bytes @ 0x0
  2445                           
  2446  0020                     utoa@val:	
  2447                           ; 1 bytes @ 0x0
  2448                           
  2449  0020                     ___ftadd@f1:	
  2450                           ; 2 bytes @ 0x0
  2451                           
  2452  0020                     ___ftmul@f1:	
  2453                           ; 3 bytes @ 0x0
  2454                           
  2455  0020                     ___lldiv@quotient:	
  2456                           ; 3 bytes @ 0x0
  2457                           
  2458  0020                     ___lltoft@c:	
  2459                           ; 4 bytes @ 0x0
  2460                           
  2461  0020                     NVMWrite@bufTmpRow:	
  2462                           ; 4 bytes @ 0x0
  2463                           
  2464                           
  2465                           ; 64 bytes @ 0x0
  2466  0020                     	ds	1
  2467  0021                     CC1Read@addr:	
  2468  0021                     DPYDrawChar@tmpAddr:	
  2469                           ; 1 bytes @ 0x1
  2470                           
  2471  0021                     DPYSendStr@data:	
  2472                           ; 1 bytes @ 0x1
  2473                           
  2474                           
  2475                           ; 1 bytes @ 0x1
  2476  0021                     	ds	1
  2477  0022                     CC1Init@state:	
  2478  0022                     CC1Read@cc1Addr:	
  2479                           ; 1 bytes @ 0x2
  2480                           
  2481  0022                     DPYDrawChar@i:	
  2482                           ; 1 bytes @ 0x2
  2483                           
  2484  0022                     DPYSendStr@len:	
  2485                           ; 1 bytes @ 0x2
  2486                           
  2487  0022                     utoa@base:	
  2488                           ; 1 bytes @ 0x2
  2489                           
  2490                           
  2491                           ; 2 bytes @ 0x2
  2492  0022                     	ds	1
  2493  0023                     ??_DPYSendStr:	
  2494  0023                     ?_RTXSndPkt:	
  2495                           ; 0 bytes @ 0x3
  2496                           
  2497  0023                     ?_RTXRcvPkt:	
  2498                           ; 0 bytes @ 0x3
  2499                           
  2500  0023                     DPYInitDisplay@tmp:	
  2501                           ; 0 bytes @ 0x3
  2502                           
  2503  0023                     RTXSndPkt@len:	
  2504                           ; 1 bytes @ 0x3
  2505                           
  2506  0023                     RTXRcvPkt@len:	
  2507                           ; 1 bytes @ 0x3
  2508                           
  2509  0023                     ___ftadd@f2:	
  2510                           ; 1 bytes @ 0x3
  2511                           
  2512  0023                     ___ftmul@f2:	
  2513                           ; 3 bytes @ 0x3
  2514                           
  2515                           
  2516                           ; 3 bytes @ 0x3
  2517  0023                     	ds	1
  2518  0024                     ??_RTXSndPkt:	
  2519  0024                     ??_RTXRcvPkt:	
  2520                           ; 0 bytes @ 0x4
  2521                           
  2522  0024                     DPYInit@sta:	
  2523                           ; 0 bytes @ 0x4
  2524                           
  2525  0024                     DPYSendStr@i:	
  2526                           ; 1 bytes @ 0x4
  2527                           
  2528  0024                     ___lldiv@counter:	
  2529                           ; 1 bytes @ 0x4
  2530                           
  2531  0024                     utoa@v:	
  2532                           ; 1 bytes @ 0x4
  2533                           
  2534                           
  2535                           ; 2 bytes @ 0x4
  2536  0024                     	ds	1
  2537  0025                     ?___llmod:	
  2538  0025                     DPYSendStr@row:	
  2539                           ; 4 bytes @ 0x5
  2540                           
  2541  0025                     RTXRcvPkt@dst:	
  2542                           ; 1 bytes @ 0x5
  2543                           
  2544  0025                     ___llmod@divisor:	
  2545                           ; 1 bytes @ 0x5
  2546                           
  2547                           
  2548                           ; 4 bytes @ 0x5
  2549  0025                     	ds	1
  2550  0026                     ??___ftadd:	
  2551  0026                     ??___ftmul:	
  2552                           ; 0 bytes @ 0x6
  2553                           
  2554  0026                     RTXSndPkt@src:	
  2555                           ; 0 bytes @ 0x6
  2556                           
  2557  0026                     utoa@c:	
  2558                           ; 1 bytes @ 0x6
  2559                           
  2560                           
  2561                           ; 1 bytes @ 0x6
  2562  0026                     	ds	1
  2563  0027                     ??_RTXSendPgm:	
  2564  0027                     ??_RTXSendRData:	
  2565                           ; 0 bytes @ 0x7
  2566                           
  2567  0027                     utoa@buf:	
  2568                           ; 0 bytes @ 0x7
  2569                           
  2570                           
  2571                           ; 1 bytes @ 0x7
  2572  0027                     	ds	1
  2573  0028                     ?_itoa:	
  2574  0028                     RTXSendRData@sensId:	
  2575                           ; 1 bytes @ 0x8
  2576                           
  2577  0028                     itoa@val:	
  2578                           ; 1 bytes @ 0x8
  2579                           
  2580                           
  2581                           ; 2 bytes @ 0x8
  2582  0028                     	ds	1
  2583  0029                     ___llmod@dividend:	
  2584                           
  2585                           ; 4 bytes @ 0x9
  2586  0029                     	ds	1
  2587  002A                     ?___ftsub:	
  2588  002A                     ___ftmul@exp:	
  2589                           ; 3 bytes @ 0xA
  2590                           
  2591  002A                     itoa@base:	
  2592                           ; 1 bytes @ 0xA
  2593                           
  2594  002A                     ___ftsub@f2:	
  2595                           ; 2 bytes @ 0xA
  2596                           
  2597                           
  2598                           ; 3 bytes @ 0xA
  2599  002A                     	ds	1
  2600  002B                     ___ftmul@f3_as_product:	
  2601                           
  2602                           ; 3 bytes @ 0xB
  2603  002B                     	ds	1
  2604  002C                     itoa@cp:	
  2605                           
  2606                           ; 1 bytes @ 0xC
  2607  002C                     	ds	1
  2608  002D                     ?_sprintf:	
  2609  002D                     itoa@buf:	
  2610                           ; 2 bytes @ 0xD
  2611                           
  2612  002D                     sprintf@f:	
  2613                           ; 1 bytes @ 0xD
  2614                           
  2615  002D                     ___ftsub@f1:	
  2616                           ; 2 bytes @ 0xD
  2617                           
  2618                           
  2619                           ; 3 bytes @ 0xD
  2620  002D                     	ds	1
  2621  002E                     ___ftmul@cntr:	
  2622                           
  2623                           ; 1 bytes @ 0xE
  2624  002E                     	ds	1
  2625  002F                     ___ftmul@sign:	
  2626                           
  2627                           ; 1 bytes @ 0xF
  2628  002F                     	ds	1
  2629  0030                     ?___fttol:	
  2630  0030                     ___fttol@f1:	
  2631                           ; 4 bytes @ 0x10
  2632                           
  2633                           
  2634                           ; 3 bytes @ 0x10
  2635  0030                     	ds	4
  2636  0034                     ??___fttol:	
  2637                           
  2638                           ; 0 bytes @ 0x14
  2639  0034                     	ds	3
  2640  0037                     ??_sprintf:	
  2641                           
  2642                           ; 0 bytes @ 0x17
  2643  0037                     	ds	1
  2644  0038                     ___fttol@sign1:	
  2645                           
  2646                           ; 1 bytes @ 0x18
  2647  0038                     	ds	1
  2648  0039                     ___fttol@lval:	
  2649                           
  2650                           ; 4 bytes @ 0x19
  2651  0039                     	ds	4
  2652  003D                     sprintf@flag:	
  2653  003D                     ___fttol@exp1:	
  2654                           ; 1 bytes @ 0x1D
  2655                           
  2656                           
  2657                           ; 1 bytes @ 0x1D
  2658  003D                     	ds	1
  2659  003E                     sprintf@ap:	
  2660                           
  2661                           ; 1 bytes @ 0x1E
  2662  003E                     	ds	1
  2663  003F                     sprintf@val:	
  2664                           
  2665                           ; 4 bytes @ 0x1F
  2666  003F                     	ds	4
  2667  0043                     sprintf@sp:	
  2668                           
  2669                           ; 1 bytes @ 0x23
  2670  0043                     	ds	1
  2671  0044                     sprintf@width:	
  2672                           
  2673                           ; 2 bytes @ 0x24
  2674  0044                     	ds	2
  2675  0046                     sprintf@prec:	
  2676                           
  2677                           ; 2 bytes @ 0x26
  2678  0046                     	ds	2
  2679  0048                     sprintf@c:	
  2680                           
  2681                           ; 1 bytes @ 0x28
  2682  0048                     	ds	1
  2683  0049                     ?_ftoa:	
  2684  0049                     ftoa@f:	
  2685                           ; 1 bytes @ 0x29
  2686                           
  2687                           
  2688                           ; 3 bytes @ 0x29
  2689  0049                     	ds	3
  2690  004C                     ftoa@status:	
  2691                           
  2692                           ; 1 bytes @ 0x2C
  2693  004C                     	ds	1
  2694  004D                     ??_ftoa:	
  2695                           
  2696                           ; 0 bytes @ 0x2D
  2697  004D                     	ds	1
  2698  004E                     ftoa@rem:	
  2699                           
  2700                           ; 4 bytes @ 0x2E
  2701  004E                     	ds	4
  2702  0052                     ftoa@l:	
  2703                           
  2704                           ; 4 bytes @ 0x32
  2705  0052                     	ds	4
  2706  0056                     ftoa@cp:	
  2707                           
  2708                           ; 1 bytes @ 0x36
  2709  0056                     	ds	1
  2710  0057                     ?_RTXVisDec:	
  2711  0057                     RTXVisDec@val:	
  2712                           ; 1 bytes @ 0x37
  2713                           
  2714                           
  2715                           ; 3 bytes @ 0x37
  2716  0057                     	ds	3
  2717  005A                     RTXVisDec@buff:	
  2718                           
  2719                           ; 1 bytes @ 0x3A
  2720  005A                     	ds	1
  2721  005B                     RTXVisDec@maxDigit:	
  2722                           
  2723                           ; 1 bytes @ 0x3B
  2724  005B                     	ds	1
  2725  005C                     RTXVisDec@offset:	
  2726                           
  2727                           ; 1 bytes @ 0x3C
  2728  005C                     	ds	1
  2729  005D                     ??_RTXVisDec:	
  2730                           
  2731                           ; 0 bytes @ 0x3D
  2732  005D                     	ds	3
  2733  0060                     NVMWrite@rowAddr:	
  2734                           
  2735                           ; 2 bytes @ 0x40
  2736  0060                     	ds	2
  2737  0062                     ??_RTXUpdateDisplay:	
  2738  0062                     NVMWrite@i:	
  2739                           ; 0 bytes @ 0x42
  2740                           
  2741                           
  2742                           ; 1 bytes @ 0x42
  2743  0062                     	ds	1
  2744  0063                     NVMWrite@latchAddr:	
  2745                           
  2746                           ; 1 bytes @ 0x43
  2747  0063                     	ds	1
  2748  0064                     NVMWrite@j:	
  2749                           
  2750                           ; 1 bytes @ 0x44
  2751  0064                     	ds	2
  2752  0066                     ??_RTXReadPkt:	
  2753  0066                     ??_PGMSelLong:	
  2754                           ; 0 bytes @ 0x46
  2755                           
  2756  0066                     RTXInit@state:	
  2757                           ; 0 bytes @ 0x46
  2758                           
  2759                           
  2760                           ; 1 bytes @ 0x46
  2761  0066                     	ds	1
  2762  0067                     RTXReadPkt@volt4Calc:	
  2763                           
  2764                           ; 3 bytes @ 0x47
  2765  0067                     	ds	3
  2766  006A                     RTXReadPkt@valVoltCurr:	
  2767                           
  2768                           ; 3 bytes @ 0x4A
  2769  006A                     	ds	3
  2770  006D                     RTXReadPkt@valBatt:	
  2771                           
  2772                           ; 3 bytes @ 0x4D
  2773  006D                     	ds	3
  2774                           
  2775                           	psect	maintext
  2776  16B7                     __pmaintext:	
  2777 ;;
  2778 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2779 ;;
  2780 ;; *************** function _main *****************
  2781 ;; Defined at:
  2782 ;;		line 50 in file "Base.c"
  2783 ;; Parameters:    Size  Location     Type
  2784 ;;		None
  2785 ;; Auto vars:     Size  Location     Type
  2786 ;;  i               1   66[BANK1 ] unsigned char 
  2787 ;; Return value:  Size  Location     Type
  2788 ;;		None               void
  2789 ;; Registers used:
  2790 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2791 ;; Tracked objects:
  2792 ;;		On entry : B1F/0
  2793 ;;		On exit  : 0/0
  2794 ;;		Unchanged: 0/0
  2795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2797 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  2798 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  2799 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  2800 ;;Total ram usage:        2 bytes
  2801 ;; Hardware stack levels required when called:   11
  2802 ;; This function calls:
  2803 ;;		_CC1Init
  2804 ;;		_DINInit
  2805 ;;		_DINTask
  2806 ;;		_DPYInit
  2807 ;;		_INInit
  2808 ;;		_NVMInit
  2809 ;;		_OUTInit
  2810 ;;		_PGMInit
  2811 ;;		_RTXInit
  2812 ;;		_RTXTask
  2813 ;;		_SPIInit
  2814 ;;		_SYSInit
  2815 ;;		_SYSTask
  2816 ;; This function is called by:
  2817 ;;		Startup code after reset
  2818 ;; This function uses a non-reentrant model
  2819 ;;
  2820                           
  2821                           
  2822                           ;psect for function _main
  2823  16B7                     _main:	
  2824                           
  2825                           ;Base.c: 52: unsigned char i;
  2826                           ;Base.c: 55: for(i=0;i<3;i++)
  2827                           
  2828                           ;incstack = 0
  2829                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2830  16B7  0021               	movlb	1	; select bank1
  2831  16B8  01E2               	clrf	main@i^(0+128)
  2832  16B9  3003               	movlw	3
  2833  16BA  0262               	subwf	main@i^(0+128),w
  2834  16BB  1803               	btfsc	3,0
  2835  16BC  2EF9               	goto	l790
  2836  16BD                     l789:	
  2837  16BD  0064               	clrwdt	;# 
  2838                           
  2839                           ;Base.c: 59: SYSInit(i);
  2840  16BE  0021               	movlb	1	; select bank1
  2841  16BF  0862               	movf	main@i^(0+128),w
  2842  16C0  3188  2000  3196   	fcall	_SYSInit
  2843                           
  2844                           ;Base.c: 60: INInit(i);
  2845  16C3  0021               	movlb	1	; select bank1
  2846  16C4  0862               	movf	main@i^(0+128),w
  2847  16C5  3191  2122  3196   	fcall	_INInit
  2848                           
  2849                           ;Base.c: 61: OUTInit(i);
  2850  16C8  0021               	movlb	1	; select bank1
  2851  16C9  0862               	movf	main@i^(0+128),w
  2852  16CA  3191  2139  3196   	fcall	_OUTInit
  2853                           
  2854                           ;Base.c: 62: DINInit(i);
  2855  16CD  0021               	movlb	1	; select bank1
  2856  16CE  0862               	movf	main@i^(0+128),w
  2857  16CF  3190  20BF  3196   	fcall	_DINInit
  2858                           
  2859                           ;Base.c: 63: SPIInit(i);
  2860  16D2  0021               	movlb	1	; select bank1
  2861  16D3  0862               	movf	main@i^(0+128),w
  2862  16D4  3192  220A  3196   	fcall	_SPIInit
  2863                           
  2864                           ;Base.c: 64: CC1Init(i);
  2865  16D7  0021               	movlb	1	; select bank1
  2866  16D8  0862               	movf	main@i^(0+128),w
  2867  16D9  3194  2438  3196   	fcall	_CC1Init
  2868                           
  2869                           ;Base.c: 65: NVMInit(i);
  2870  16DC  0021               	movlb	1	; select bank1
  2871  16DD  0862               	movf	main@i^(0+128),w
  2872  16DE  3190  204D  3196   	fcall	_NVMInit
  2873                           
  2874                           ;Base.c: 66: DPYInit(i);
  2875  16E1  0021               	movlb	1	; select bank1
  2876  16E2  0862               	movf	main@i^(0+128),w
  2877  16E3  3190  20D1  3196   	fcall	_DPYInit
  2878                           
  2879                           ;Base.c: 67: RTXInit(i);
  2880  16E6  0021               	movlb	1	; select bank1
  2881  16E7  0862               	movf	main@i^(0+128),w
  2882  16E8  3188  2023  3196   	fcall	_RTXInit
  2883                           
  2884                           ;Base.c: 68: PGMInit(i);
  2885  16EB  0021               	movlb	1	; select bank1
  2886  16EC  0862               	movf	main@i^(0+128),w
  2887  16ED  3191  2199  3196   	fcall	_PGMInit
  2888  16F0  3001               	movlw	1
  2889  16F1  0021               	movlb	1	; select bank1
  2890  16F2  00E1               	movwf	??_main^(0+128)
  2891  16F3  0861               	movf	??_main^(0+128),w
  2892  16F4  07E2               	addwf	main@i^(0+128),f
  2893  16F5  3003               	movlw	3
  2894  16F6  0262               	subwf	main@i^(0+128),w
  2895  16F7  1C03               	skipc
  2896  16F8  2EBD               	goto	l789
  2897  16F9                     l790:	
  2898                           
  2899                           ;Base.c: 69: }
  2900                           ;Base.c: 72: INTCONbits.GIE=1;
  2901  16F9  178B               	bsf	11,7	;volatile
  2902  16FA                     l791:	
  2903                           ;Base.c: 75: while(1)
  2904                           
  2905  16FA  0064               	clrwdt	;# 
  2906                           
  2907                           ;Base.c: 79: SYSTask();
  2908  16FB  3194  249C  3196   	fcall	_SYSTask
  2909                           
  2910                           ;Base.c: 80: DINTask();
  2911  16FE  3192  2267  3196   	fcall	_DINTask
  2912                           
  2913                           ;Base.c: 81: RTXTask();
  2914  1701  3190  2018  3196   	fcall	_RTXTask
  2915  1704  2EFA               	goto	l791
  2916  1705                     __end_of_main:	
  2917                           
  2918                           	psect	text1
  2919  149C                     __ptext1:	
  2920 ;; *************** function _SYSTask *****************
  2921 ;; Defined at:
  2922 ;;		line 41 in file "SYS.c"
  2923 ;; Parameters:    Size  Location     Type
  2924 ;;		None
  2925 ;; Auto vars:     Size  Location     Type
  2926 ;;		None
  2927 ;; Return value:  Size  Location     Type
  2928 ;;		None               void
  2929 ;; Registers used:
  2930 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2931 ;; Tracked objects:
  2932 ;;		On entry : 0/0
  2933 ;;		On exit  : 0/0
  2934 ;;		Unchanged: 0/0
  2935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2937 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2939 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2940 ;;Total ram usage:        0 bytes
  2941 ;; Hardware stack levels used:    1
  2942 ;; Hardware stack levels required when called:   10
  2943 ;; This function calls:
  2944 ;;		_DINTick
  2945 ;;		_PGMPgmOff
  2946 ;;		_PGMSelDown
  2947 ;;		_PGMSelLong
  2948 ;;		_PGMTick
  2949 ;;		_RTXPgmOff
  2950 ;;		_RTXPgmOn
  2951 ;;		_RTXSelDown
  2952 ;;		_RTXTick
  2953 ;; This function is called by:
  2954 ;;		_main
  2955 ;; This function uses a non-reentrant model
  2956 ;;
  2957                           
  2958                           
  2959                           ;psect for function _SYSTask
  2960  149C                     _SYSTask:	
  2961                           
  2962                           ;SYS.c: 44: if(u_SYS_STA.TICK)
  2963                           
  2964                           ;incstack = 0
  2965                           ; Regs used in _SYSTask: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2966  149C  0022               	movlb	2	; select bank2
  2967  149D  1C41               	btfss	_u_SYS_STA^(0+256),0
  2968  149E  2CA9               	goto	l6139
  2969                           
  2970                           ;SYS.c: 45: {
  2971                           ;SYS.c: 47: u_SYS_STA.TICK=0;
  2972  149F  1041               	bcf	_u_SYS_STA^(0+256),0
  2973                           
  2974                           ;SYS.c: 50: RTXTick();
  2975  14A0  3195  253B  3194   	fcall	_RTXTick
  2976                           
  2977                           ;SYS.c: 51: DINTick();
  2978  14A3  3193  233C  3194   	fcall	_DINTick
  2979                           
  2980                           ;SYS.c: 52: PGMTick();
  2981  14A6  3190  209E  3194   	fcall	_PGMTick
  2982  14A9                     l6139:	
  2983                           
  2984                           ;SYS.c: 53: }
  2985                           ;SYS.c: 55: if(u_in_ev_down.sel)
  2986  14A9  0021               	movlb	1	; select bank1
  2987  14AA  1C6A               	btfss	_u_in_ev_down^(0+128),0
  2988  14AB  2CB3               	goto	l6145
  2989                           
  2990                           ;SYS.c: 56: {
  2991                           ;SYS.c: 58: u_in_ev_down.sel=0;
  2992  14AC  106A               	bcf	_u_in_ev_down^(0+128),0
  2993                           
  2994                           ;SYS.c: 59: PGMSelDown();
  2995  14AD  3191  210D  3194   	fcall	_PGMSelDown
  2996                           
  2997                           ;SYS.c: 60: RTXSelDown();
  2998  14B0  3191  2180  3194   	fcall	_RTXSelDown
  2999  14B3                     l6145:	
  3000                           
  3001                           ;SYS.c: 61: }
  3002                           ;SYS.c: 62: if(u_in_ev_long.sel)
  3003  14B3  0021               	movlb	1	; select bank1
  3004  14B4  1C6B               	btfss	_u_in_ev_long^(0+128),0
  3005  14B5  2CBA               	goto	l6151
  3006                           
  3007                           ;SYS.c: 63: {
  3008                           ;SYS.c: 65: u_in_ev_long.sel=0;
  3009  14B6  106B               	bcf	_u_in_ev_long^(0+128),0
  3010                           
  3011                           ;SYS.c: 66: PGMSelLong();
  3012  14B7  3193  2363  3194   	fcall	_PGMSelLong
  3013  14BA                     l6151:	
  3014                           
  3015                           ;SYS.c: 67: }
  3016                           ;SYS.c: 71: if(rtx_flg.pgmDone)
  3017  14BA  0021               	movlb	1	; select bank1
  3018  14BB  1CE6               	btfss	_rtx_flg^(0+128),1
  3019  14BC  2CC1               	goto	l6157
  3020                           
  3021                           ;SYS.c: 72: {
  3022                           ;SYS.c: 74: rtx_flg.pgmDone=0;
  3023  14BD  10E6               	bcf	_rtx_flg^(0+128),1
  3024                           
  3025                           ;SYS.c: 76: PGMPgmOff();
  3026  14BE  3190  2043  3194   	fcall	_PGMPgmOff
  3027  14C1                     l6157:	
  3028                           
  3029                           ;SYS.c: 77: }
  3030                           ;SYS.c: 80: if(pgm_flg.evPgmOn)
  3031  14C1  0021               	movlb	1	; select bank1
  3032  14C2  1CE5               	btfss	_pgm_flg^(0+128),1
  3033  14C3  2CC8               	goto	l6163
  3034                           
  3035                           ;SYS.c: 81: {
  3036                           ;SYS.c: 83: pgm_flg.evPgmOn=0;
  3037  14C4  10E5               	bcf	_pgm_flg^(0+128),1
  3038                           
  3039                           ;SYS.c: 85: RTXPgmOn();
  3040  14C5  3190  2007  3194   	fcall	_RTXPgmOn
  3041  14C8                     l6163:	
  3042                           
  3043                           ;SYS.c: 86: }
  3044                           ;SYS.c: 87: if(pgm_flg.evPgmOff)
  3045  14C8  0021               	movlb	1	; select bank1
  3046  14C9  1D65               	btfss	_pgm_flg^(0+128),2
  3047  14CA  0008               	return
  3048                           
  3049                           ;SYS.c: 88: {
  3050                           ;SYS.c: 90: pgm_flg.evPgmOff=0;
  3051  14CB  1165               	bcf	_pgm_flg^(0+128),2
  3052                           
  3053                           ;SYS.c: 92: RTXPgmOff();
  3054  14CC  3190  2012         	fcall	_RTXPgmOff
  3055  14CE  0008               	return
  3056  14CF                     __end_of_SYSTask:	
  3057                           
  3058                           	psect	text2
  3059  153B                     __ptext2:	
  3060 ;; *************** function _RTXTick *****************
  3061 ;; Defined at:
  3062 ;;		line 110 in file "RTX.c"
  3063 ;; Parameters:    Size  Location     Type
  3064 ;;		None
  3065 ;; Auto vars:     Size  Location     Type
  3066 ;;		None
  3067 ;; Return value:  Size  Location     Type
  3068 ;;		None               void
  3069 ;; Registers used:
  3070 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3071 ;; Tracked objects:
  3072 ;;		On entry : 0/0
  3073 ;;		On exit  : 0/0
  3074 ;;		Unchanged: 0/0
  3075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3077 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3079 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3080 ;;Total ram usage:        0 bytes
  3081 ;; Hardware stack levels used:    1
  3082 ;; Hardware stack levels required when called:    8
  3083 ;; This function calls:
  3084 ;;		_CC1Strobe
  3085 ;;		_RTXSendPgm
  3086 ;;		_RTXSup
  3087 ;;		_RTXUpdateDisplay
  3088 ;; This function is called by:
  3089 ;;		_SYSTask
  3090 ;; This function uses a non-reentrant model
  3091 ;;
  3092                           
  3093                           
  3094                           ;psect for function _RTXTick
  3095  153B                     _RTXTick:	
  3096                           
  3097                           ;RTX.c: 113: RTXSup();
  3098                           
  3099                           ;incstack = 0
  3100                           ; Regs used in _RTXTick: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3101  153B  3193  23B5  3195   	fcall	_RTXSup
  3102                           
  3103                           ;RTX.c: 115: tmrCalibration++;
  3104  153E  3001               	movlw	1
  3105  153F  0022               	movlb	2	; select bank2
  3106  1540  07B8               	addwf	_tmrCalibration^(0+256),f
  3107  1541  3000               	movlw	0
  3108  1542  3DB9               	addwfc	(_tmrCalibration+1)^(0+256),f
  3109                           
  3110                           ;RTX.c: 116: if(tmrCalibration>1000)
  3111  1543  3003               	movlw	3
  3112  1544  0239               	subwf	(_tmrCalibration+1)^(0+256),w
  3113  1545  30E9               	movlw	233
  3114  1546  1903               	skipnz
  3115  1547  0238               	subwf	_tmrCalibration^(0+256),w
  3116  1548  1C03               	skipc
  3117  1549  2D58               	goto	l5935
  3118                           
  3119                           ;RTX.c: 117: {
  3120                           ;RTX.c: 118: tmrCalibration=0;
  3121  154A  01B8               	clrf	_tmrCalibration^(0+256)
  3122  154B  01B9               	clrf	(_tmrCalibration+1)^(0+256)
  3123                           
  3124                           ;RTX.c: 119: CC1Strobe(SIDLE);
  3125  154C  3036               	movlw	54
  3126  154D  3190  20E4  3195   	fcall	_CC1Strobe
  3127                           
  3128                           ;RTX.c: 120: CC1Strobe(SCAL);
  3129  1550  3033               	movlw	51
  3130  1551  3190  20E4  3195   	fcall	_CC1Strobe
  3131                           
  3132                           ;RTX.c: 121: CC1Strobe(SFRX);
  3133  1554  303A               	movlw	58
  3134  1555  3190  20E4  3195   	fcall	_CC1Strobe
  3135  1558                     l5935:	
  3136                           
  3137                           ;RTX.c: 122: }
  3138                           ;RTX.c: 125: if(tmrRcvPkt)
  3139  1558  0021               	movlb	1	; select bank1
  3140  1559  0868               	movf	_tmrRcvPkt^(0+128),w
  3141  155A  1903               	btfsc	3,2
  3142  155B  2D64               	goto	l5941
  3143                           
  3144                           ;RTX.c: 126: {
  3145                           ;RTX.c: 127: tmrRcvPkt--;
  3146  155C  3001               	movlw	1
  3147  155D  02E8               	subwf	_tmrRcvPkt^(0+128),f
  3148                           
  3149                           ;RTX.c: 128: if(!(tmrRcvPkt))
  3150  155E  0868               	movf	_tmrRcvPkt^(0+128),w
  3151  155F  1D03               	btfss	3,2
  3152  1560  2D64               	goto	l5941
  3153                           
  3154                           ;RTX.c: 129: RTXSendPgm();
  3155  1561  3192  2247  3195   	fcall	_RTXSendPgm
  3156  1564                     l5941:	
  3157                           
  3158                           ;RTX.c: 130: }
  3159                           ;RTX.c: 133: if(tmrVisBatt)
  3160  1564  0021               	movlb	1	; select bank1
  3161  1565  0863               	movf	_tmrVisBatt^(0+128),w
  3162  1566  0464               	iorwf	(_tmrVisBatt+1)^(0+128),w
  3163  1567  1903               	btfsc	3,2
  3164  1568  0008               	return
  3165                           
  3166                           ;RTX.c: 134: {
  3167                           ;RTX.c: 135: tmrVisBatt--;
  3168  1569  3001               	movlw	1
  3169  156A  02E3               	subwf	_tmrVisBatt^(0+128),f
  3170  156B  3000               	movlw	0
  3171  156C  3BE4               	subwfb	(_tmrVisBatt+1)^(0+128),f
  3172                           
  3173                           ;RTX.c: 136: if(!(tmrVisBatt))
  3174  156D  0863               	movf	_tmrVisBatt^(0+128),w
  3175  156E  0464               	iorwf	(_tmrVisBatt+1)^(0+128),w
  3176  156F  1D03               	btfss	3,2
  3177  1570  0008               	return
  3178                           
  3179                           ;RTX.c: 137: RTXUpdateDisplay(UPD_DPY_POWER);
  3180  1571  3000               	movlw	0
  3181  1572  3180  2046         	fcall	_RTXUpdateDisplay
  3182  1574  0008               	return
  3183  1575                     __end_of_RTXTick:	
  3184                           
  3185                           	psect	text3
  3186  1180                     __ptext3:	
  3187 ;; *************** function _RTXSelDown *****************
  3188 ;; Defined at:
  3189 ;;		line 389 in file "RTX.c"
  3190 ;; Parameters:    Size  Location     Type
  3191 ;;		None
  3192 ;; Auto vars:     Size  Location     Type
  3193 ;;		None
  3194 ;; Return value:  Size  Location     Type
  3195 ;;		None               void
  3196 ;; Registers used:
  3197 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3198 ;; Tracked objects:
  3199 ;;		On entry : 0/0
  3200 ;;		On exit  : 0/0
  3201 ;;		Unchanged: 0/0
  3202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3204 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3206 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3207 ;;Total ram usage:        0 bytes
  3208 ;; Hardware stack levels used:    1
  3209 ;; Hardware stack levels required when called:    8
  3210 ;; This function calls:
  3211 ;;		_RTXUpdateDisplay
  3212 ;; This function is called by:
  3213 ;;		_SYSTask
  3214 ;; This function uses a non-reentrant model
  3215 ;;
  3216                           
  3217                           
  3218                           ;psect for function _RTXSelDown
  3219  1180                     _RTXSelDown:	
  3220                           
  3221                           ;RTX.c: 391: if(pgm_cfg.menu.val)
  3222                           
  3223                           ;incstack = 0
  3224                           ; Regs used in _RTXSelDown: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3225  1180  0022               	movlb	2	; select bank2
  3226  1181  0845               	movf	(_pgm_cfg^(0+256)+2),w
  3227  1182  1903               	btfsc	3,2
  3228  1183  0008               	return
  3229                           
  3230                           ;RTX.c: 392: {
  3231                           ;RTX.c: 393: if(tmrVisBatt)
  3232  1184  0021               	movlb	1	; select bank1
  3233  1185  0863               	movf	_tmrVisBatt^(0+128),w
  3234  1186  0464               	iorwf	(_tmrVisBatt+1)^(0+128),w
  3235  1187  1903               	btfsc	3,2
  3236  1188  2990               	goto	l6071
  3237                           
  3238                           ;RTX.c: 394: {
  3239                           ;RTX.c: 396: RTXUpdateDisplay(UPD_DPY_POWER);
  3240  1189  3000               	movlw	0
  3241  118A  3180  2046         	fcall	_RTXUpdateDisplay
  3242                           
  3243                           ;RTX.c: 398: tmrVisBatt=0;
  3244  118C  0021               	movlb	1	; select bank1
  3245  118D  01E3               	clrf	_tmrVisBatt^(0+128)
  3246  118E  01E4               	clrf	(_tmrVisBatt+1)^(0+128)
  3247                           
  3248                           ;RTX.c: 399: }
  3249  118F  0008               	return
  3250  1190                     l6071:	
  3251                           
  3252                           ;RTX.c: 400: else
  3253                           ;RTX.c: 401: {
  3254                           ;RTX.c: 403: RTXUpdateDisplay(UPD_DPY_BATT);
  3255  1190  3001               	movlw	1
  3256  1191  3180  2046         	fcall	_RTXUpdateDisplay
  3257                           
  3258                           ;RTX.c: 405: tmrVisBatt=500;
  3259  1193  30F4               	movlw	244
  3260  1194  0021               	movlb	1	; select bank1
  3261  1195  00E3               	movwf	_tmrVisBatt^(0+128)
  3262  1196  3001               	movlw	1
  3263  1197  00E4               	movwf	(_tmrVisBatt^(0+128)+1)
  3264  1198  0008               	return
  3265  1199                     __end_of_RTXSelDown:	
  3266                           
  3267                           	psect	text4
  3268  1007                     __ptext4:	
  3269 ;; *************** function _RTXPgmOn *****************
  3270 ;; Defined at:
  3271 ;;		line 599 in file "RTX.c"
  3272 ;; Parameters:    Size  Location     Type
  3273 ;;		None
  3274 ;; Auto vars:     Size  Location     Type
  3275 ;;		None
  3276 ;; Return value:  Size  Location     Type
  3277 ;;		None               void
  3278 ;; Registers used:
  3279 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3280 ;; Tracked objects:
  3281 ;;		On entry : 0/0
  3282 ;;		On exit  : 0/0
  3283 ;;		Unchanged: 0/0
  3284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3286 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3288 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3289 ;;Total ram usage:        0 bytes
  3290 ;; Hardware stack levels used:    1
  3291 ;; Hardware stack levels required when called:    6
  3292 ;; This function calls:
  3293 ;;		_RTXSendPgm
  3294 ;; This function is called by:
  3295 ;;		_SYSTask
  3296 ;; This function uses a non-reentrant model
  3297 ;;
  3298                           
  3299                           
  3300                           ;psect for function _RTXPgmOn
  3301  1007                     _RTXPgmOn:	
  3302                           
  3303                           ;RTX.c: 602: rtx_flg.pgmonoff=1;
  3304                           
  3305                           ;incstack = 0
  3306                           ; Regs used in _RTXPgmOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3307  1007  0021               	movlb	1	; select bank1
  3308  1008  1566               	bsf	_rtx_flg^(0+128),2
  3309                           
  3310                           ;RTX.c: 604: RTXSendPgm();
  3311  1009  3192  2247         	fcall	_RTXSendPgm
  3312  100B  0008               	return
  3313  100C                     __end_of_RTXPgmOn:	
  3314                           
  3315                           	psect	text5
  3316  1247                     __ptext5:	
  3317 ;; *************** function _RTXSendPgm *****************
  3318 ;; Defined at:
  3319 ;;		line 578 in file "RTX.c"
  3320 ;; Parameters:    Size  Location     Type
  3321 ;;		None
  3322 ;; Auto vars:     Size  Location     Type
  3323 ;;		None
  3324 ;; Return value:  Size  Location     Type
  3325 ;;		None               void
  3326 ;; Registers used:
  3327 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3328 ;; Tracked objects:
  3329 ;;		On entry : 0/0
  3330 ;;		On exit  : 0/0
  3331 ;;		Unchanged: 0/0
  3332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3334 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3335 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3336 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3337 ;;Total ram usage:        1 bytes
  3338 ;; Hardware stack levels used:    1
  3339 ;; Hardware stack levels required when called:    5
  3340 ;; This function calls:
  3341 ;;		_RTXSndPkt
  3342 ;; This function is called by:
  3343 ;;		_RTXTick
  3344 ;;		_RTXPgmOn
  3345 ;; This function uses a non-reentrant model
  3346 ;;
  3347                           
  3348                           
  3349                           ;psect for function _RTXSendPgm
  3350  1247                     _RTXSendPgm:	
  3351                           
  3352                           ;RTX.c: 581: pktTx[ID_DEST]=0;
  3353                           
  3354                           ;incstack = 0
  3355                           ; Regs used in _RTXSendPgm: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3356  1247  0022               	movlb	2	; select bank2
  3357  1248  01D8               	clrf	_pktTx^(0+256)
  3358                           
  3359                           ;RTX.c: 582: pktTx[ID_SOURCE]=pgm_cfg.base.id;
  3360  1249  0847               	movf	(_pgm_cfg^(0+256)+4),w
  3361  124A  0020               	movlb	0	; select bank0
  3362  124B  00A7               	movwf	??_RTXSendPgm
  3363  124C  0827               	movf	??_RTXSendPgm,w
  3364  124D  0022               	movlb	2	; select bank2
  3365  124E  00D9               	movwf	(_pktTx^(0+256)+1)
  3366                           
  3367                           ;RTX.c: 583: pktTx[TYPE]=BASE;
  3368  124F  01DA               	clrf	(_pktTx^(0+256)+2)
  3369                           
  3370                           ;RTX.c: 584: pktTx[OP]=PGM;
  3371  1250  01DB               	clrf	(_pktTx^(0+256)+3)
  3372  1251  0ADB               	incf	(_pktTx^(0+256)+3),f
  3373                           
  3374                           ;RTX.c: 585: pktTx[VAL]=0x00;
  3375  1252  01DC               	clrf	(_pktTx^(0+256)+4)
  3376                           
  3377                           ;RTX.c: 586: pktTx[VAL+1]=0x00;
  3378  1253  01DD               	clrf	(_pktTx^(0+256)+5)
  3379                           
  3380                           ;RTX.c: 587: pktTx[VAL+2]=0x00;
  3381  1254  01DE               	clrf	(_pktTx^(0+256)+6)
  3382                           
  3383                           ;RTX.c: 588: pktTx[BAT]=0x00;
  3384  1255  01DE               	clrf	(_pktTx^(0+256)+6)
  3385                           
  3386                           ;RTX.c: 589: pktTx[BAT+1]=0x00;
  3387  1256  01DF               	clrf	(_pktTx^(0+256)+7)
  3388                           
  3389                           ;RTX.c: 590: pktTx[BAT+2]=0x00;
  3390  1257  01E0               	clrf	(_pktTx^(0+256)+8)
  3391                           
  3392                           ;RTX.c: 593: RTXSndPkt(pktTx,0x0A);
  3393  1258  300A               	movlw	10
  3394  1259  0020               	movlb	0	; select bank0
  3395  125A  00A7               	movwf	??_RTXSendPgm
  3396  125B  0827               	movf	??_RTXSendPgm,w
  3397  125C  00A3               	movwf	RTXSndPkt@len
  3398  125D  3058               	movlw	(low (_pktTx| (0+256)))& (0+255)
  3399  125E  3197  2705         	fcall	_RTXSndPkt
  3400                           
  3401                           ;RTX.c: 596: tmrRcvPkt=10;
  3402  1260  300A               	movlw	10
  3403  1261  0020               	movlb	0	; select bank0
  3404  1262  00A7               	movwf	??_RTXSendPgm
  3405  1263  0827               	movf	??_RTXSendPgm,w
  3406  1264  0021               	movlb	1	; select bank1
  3407  1265  00E8               	movwf	_tmrRcvPkt^(0+128)
  3408  1266  0008               	return
  3409  1267                     __end_of_RTXSendPgm:	
  3410                           
  3411                           	psect	text6
  3412  109E                     __ptext6:	
  3413 ;; *************** function _PGMTick *****************
  3414 ;; Defined at:
  3415 ;;		line 42 in file "PGM.c"
  3416 ;; Parameters:    Size  Location     Type
  3417 ;;		None
  3418 ;; Auto vars:     Size  Location     Type
  3419 ;;		None
  3420 ;; Return value:  Size  Location     Type
  3421 ;;		None               void
  3422 ;; Registers used:
  3423 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3424 ;; Tracked objects:
  3425 ;;		On entry : 0/0
  3426 ;;		On exit  : 0/0
  3427 ;;		Unchanged: 0/0
  3428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3429 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3430 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3432 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3433 ;;Total ram usage:        0 bytes
  3434 ;; Hardware stack levels used:    1
  3435 ;; Hardware stack levels required when called:    9
  3436 ;; This function calls:
  3437 ;;		_PGMPgmOff
  3438 ;; This function is called by:
  3439 ;;		_SYSTask
  3440 ;; This function uses a non-reentrant model
  3441 ;;
  3442                           
  3443                           
  3444                           ;psect for function _PGMTick
  3445  109E                     _PGMTick:	
  3446                           
  3447                           ;PGM.c: 45: if(tmrPgm)
  3448                           
  3449                           ;incstack = 0
  3450                           ; Regs used in _PGMTick: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3451  109E  0022               	movlb	2	; select bank2
  3452  109F  083C               	movf	_tmrPgm^(0+256),w
  3453  10A0  043D               	iorwf	(_tmrPgm+1)^(0+256),w
  3454  10A1  1903               	btfsc	3,2
  3455  10A2  0008               	return
  3456                           
  3457                           ;PGM.c: 46: {
  3458                           ;PGM.c: 47: tmrPgm--;
  3459  10A3  3001               	movlw	1
  3460  10A4  02BC               	subwf	_tmrPgm^(0+256),f
  3461  10A5  3000               	movlw	0
  3462  10A6  3BBD               	subwfb	(_tmrPgm+1)^(0+256),f
  3463                           
  3464                           ;PGM.c: 48: if(!(tmrPgm))
  3465  10A7  083C               	movf	_tmrPgm^(0+256),w
  3466  10A8  043D               	iorwf	(_tmrPgm+1)^(0+256),w
  3467  10A9  1D03               	btfss	3,2
  3468  10AA  0008               	return
  3469                           
  3470                           ;PGM.c: 49: PGMPgmOff();
  3471  10AB  3190  2043         	fcall	_PGMPgmOff
  3472  10AD  0008               	return
  3473  10AE                     __end_of_PGMTick:	
  3474                           
  3475                           	psect	text7
  3476  1363                     __ptext7:	
  3477 ;; *************** function _PGMSelLong *****************
  3478 ;; Defined at:
  3479 ;;		line 119 in file "PGM.c"
  3480 ;; Parameters:    Size  Location     Type
  3481 ;;		None
  3482 ;; Auto vars:     Size  Location     Type
  3483 ;;		None
  3484 ;; Return value:  Size  Location     Type
  3485 ;;		None               void
  3486 ;; Registers used:
  3487 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3488 ;; Tracked objects:
  3489 ;;		On entry : 0/0
  3490 ;;		On exit  : 0/0
  3491 ;;		Unchanged: 0/0
  3492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3495 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3496 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3497 ;;Total ram usage:        1 bytes
  3498 ;; Hardware stack levels used:    1
  3499 ;; Hardware stack levels required when called:    9
  3500 ;; This function calls:
  3501 ;;		_DLYDelay_ms
  3502 ;;		_PGMPgmOff
  3503 ;;		_PGMWriteNvm
  3504 ;;		_RTXPgmOff
  3505 ;;		_RTXUpdateDisplay
  3506 ;; This function is called by:
  3507 ;;		_SYSTask
  3508 ;; This function uses a non-reentrant model
  3509 ;;
  3510                           
  3511                           
  3512                           ;psect for function _PGMSelLong
  3513  1363                     _PGMSelLong:	
  3514                           
  3515                           ;PGM.c: 122: pgm_cfg.base.id=TMR1L^TMR1H;
  3516                           
  3517                           ;incstack = 0
  3518                           ; Regs used in _PGMSelLong: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3519  1363  0020               	movlb	0	; select bank0
  3520  1364  0816               	movf	22,w	;volatile
  3521  1365  0617               	xorwf	23,w	;volatile
  3522  1366  00E6               	movwf	??_PGMSelLong
  3523  1367  0866               	movf	??_PGMSelLong,w
  3524  1368  0022               	movlb	2	; select bank2
  3525  1369  00C7               	movwf	(_pgm_cfg^(0+256)+4)
  3526                           
  3527                           ;PGM.c: 124: pgm_cfg.gen_curr_sens.id=0x00;
  3528  136A  01C9               	clrf	(_pgm_cfg^(0+256)+6)
  3529                           
  3530                           ;PGM.c: 125: pgm_cfg.gen_curr_sens.type=0x00;
  3531  136B  01C8               	clrf	(_pgm_cfg^(0+256)+5)
  3532                           
  3533                           ;PGM.c: 126: pgm_cfg.con_curr_sens.id=0x00;
  3534  136C  01CB               	clrf	(_pgm_cfg^(0+256)+8)
  3535                           
  3536                           ;PGM.c: 127: pgm_cfg.con_curr_sens.type=0x00;
  3537  136D  01CA               	clrf	(_pgm_cfg^(0+256)+7)
  3538                           
  3539                           ;PGM.c: 128: pgm_cfg.volt_sens.id=0x00;
  3540  136E  01CD               	clrf	(_pgm_cfg^(0+256)+10)
  3541                           
  3542                           ;PGM.c: 129: pgm_cfg.volt_sens.type=0x00;
  3543  136F  01CC               	clrf	(_pgm_cfg^(0+256)+9)
  3544                           
  3545                           ;PGM.c: 131: pgm_cfg.menu.val=0x01;
  3546  1370  01C5               	clrf	(_pgm_cfg^(0+256)+2)
  3547  1371  0AC5               	incf	(_pgm_cfg^(0+256)+2),f
  3548                           
  3549                           ;PGM.c: 133: PGMWriteNvm();
  3550  1372  3190  2080  3193   	fcall	_PGMWriteNvm
  3551                           
  3552                           ;PGM.c: 135: RTXUpdateDisplay(UPD_DPY_PGMRST);
  3553  1375  3006               	movlw	6
  3554  1376  3180  2046  3193   	fcall	_RTXUpdateDisplay
  3555                           
  3556                           ;PGM.c: 137: DLYDelay_ms(2000);
  3557  1379  30D0               	movlw	208
  3558  137A  00F1               	movwf	DLYDelay_ms@val
  3559  137B  3007               	movlw	7
  3560  137C  00F2               	movwf	DLYDelay_ms@val+1
  3561  137D  3191  2167  3193   	fcall	_DLYDelay_ms
  3562                           
  3563                           ;PGM.c: 139: RTXUpdateDisplay(UPD_DPY_POWER);
  3564  1380  3000               	movlw	0
  3565  1381  3180  2046  3193   	fcall	_RTXUpdateDisplay
  3566                           
  3567                           ;PGM.c: 141: PGMPgmOff();
  3568  1384  3190  2043  3193   	fcall	_PGMPgmOff
  3569                           
  3570                           ;PGM.c: 142: RTXPgmOff();
  3571  1387  3190  2012         	fcall	_RTXPgmOff
  3572  1389  0008               	return
  3573  138A                     __end_of_PGMSelLong:	
  3574                           
  3575                           	psect	text8
  3576  110D                     __ptext8:	
  3577 ;; *************** function _PGMSelDown *****************
  3578 ;; Defined at:
  3579 ;;		line 100 in file "PGM.c"
  3580 ;; Parameters:    Size  Location     Type
  3581 ;;		None
  3582 ;; Auto vars:     Size  Location     Type
  3583 ;;		None
  3584 ;; Return value:  Size  Location     Type
  3585 ;;		None               void
  3586 ;; Registers used:
  3587 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3588 ;; Tracked objects:
  3589 ;;		On entry : 0/0
  3590 ;;		On exit  : 0/0
  3591 ;;		Unchanged: 0/0
  3592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3593 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3594 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3595 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3596 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3597 ;;Total ram usage:        0 bytes
  3598 ;; Hardware stack levels used:    1
  3599 ;; Hardware stack levels required when called:    9
  3600 ;; This function calls:
  3601 ;;		_PGMPgmOff
  3602 ;;		_RTXUpdateDisplay
  3603 ;; This function is called by:
  3604 ;;		_SYSTask
  3605 ;; This function uses a non-reentrant model
  3606 ;;
  3607                           
  3608                           
  3609                           ;psect for function _PGMSelDown
  3610  110D                     _PGMSelDown:	
  3611                           
  3612                           ;PGM.c: 102: if(!(pgm_cfg.menu.val))
  3613                           
  3614                           ;incstack = 0
  3615                           ; Regs used in _PGMSelDown: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3616  110D  0022               	movlb	2	; select bank2
  3617  110E  0845               	movf	(_pgm_cfg^(0+256)+2),w
  3618  110F  1D03               	btfss	3,2
  3619  1110  0008               	return
  3620                           
  3621                           ;PGM.c: 103: {
  3622                           ;PGM.c: 104: if(pgm_flg.pgmonoff)
  3623  1111  0021               	movlb	1	; select bank1
  3624  1112  1C65               	btfss	_pgm_flg^(0+128),0
  3625  1113  2917               	goto	l394
  3626                           
  3627                           ;PGM.c: 105: PGMPgmOff();
  3628  1114  3190  2043         	fcall	_PGMPgmOff
  3629  1116  0008               	return
  3630  1117                     l394:	
  3631                           
  3632                           ;PGM.c: 106: else
  3633                           ;PGM.c: 107: {
  3634                           ;PGM.c: 109: pgm_flg.pgmonoff=1;
  3635  1117  1465               	bsf	_pgm_flg^(0+128),0
  3636                           
  3637                           ;PGM.c: 110: pgm_flg.evPgmOn=1;
  3638  1118  14E5               	bsf	_pgm_flg^(0+128),1
  3639                           
  3640                           ;PGM.c: 112: tmrPgm=1000;
  3641  1119  30E8               	movlw	232
  3642  111A  0022               	movlb	2	; select bank2
  3643  111B  00BC               	movwf	_tmrPgm^(0+256)
  3644  111C  3003               	movlw	3
  3645  111D  00BD               	movwf	(_tmrPgm^(0+256)+1)
  3646                           
  3647                           ;PGM.c: 114: RTXUpdateDisplay(UPD_DPY_PGM);
  3648  111E  3002               	movlw	2
  3649  111F  3180  2046         	fcall	_RTXUpdateDisplay
  3650  1121  0008               	return
  3651  1122                     __end_of_PGMSelDown:	
  3652                           
  3653                           	psect	text9
  3654  1043                     __ptext9:	
  3655 ;; *************** function _PGMPgmOff *****************
  3656 ;; Defined at:
  3657 ;;		line 89 in file "PGM.c"
  3658 ;; Parameters:    Size  Location     Type
  3659 ;;		None
  3660 ;; Auto vars:     Size  Location     Type
  3661 ;;		None
  3662 ;; Return value:  Size  Location     Type
  3663 ;;		None               void
  3664 ;; Registers used:
  3665 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3666 ;; Tracked objects:
  3667 ;;		On entry : 0/0
  3668 ;;		On exit  : 0/0
  3669 ;;		Unchanged: 0/0
  3670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3672 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3674 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3675 ;;Total ram usage:        0 bytes
  3676 ;; Hardware stack levels used:    1
  3677 ;; Hardware stack levels required when called:    8
  3678 ;; This function calls:
  3679 ;;		_RTXUpdateDisplay
  3680 ;; This function is called by:
  3681 ;;		_PGMTick
  3682 ;;		_PGMSelDown
  3683 ;;		_PGMSelLong
  3684 ;;		_SYSTask
  3685 ;; This function uses a non-reentrant model
  3686 ;;
  3687                           
  3688                           
  3689                           ;psect for function _PGMPgmOff
  3690  1043                     _PGMPgmOff:	
  3691                           
  3692                           ;PGM.c: 92: tmrPgm=0;
  3693                           
  3694                           ;incstack = 0
  3695                           ; Regs used in _PGMPgmOff: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3696  1043  0022               	movlb	2	; select bank2
  3697  1044  01BC               	clrf	_tmrPgm^(0+256)
  3698  1045  01BD               	clrf	(_tmrPgm+1)^(0+256)
  3699                           
  3700                           ;PGM.c: 94: pgm_flg.pgmonoff=0;
  3701  1046  0021               	movlb	1	; select bank1
  3702  1047  1065               	bcf	_pgm_flg^(0+128),0
  3703                           
  3704                           ;PGM.c: 95: pgm_flg.evPgmOff=1;
  3705  1048  1565               	bsf	_pgm_flg^(0+128),2
  3706                           
  3707                           ;PGM.c: 97: RTXUpdateDisplay(UPD_DPY_POWER);
  3708  1049  3000               	movlw	0
  3709  104A  3180  2046         	fcall	_RTXUpdateDisplay
  3710  104C  0008               	return
  3711  104D                     __end_of_PGMPgmOff:	
  3712                           
  3713                           	psect	text10
  3714  133C                     __ptext10:	
  3715 ;; *************** function _DINTick *****************
  3716 ;; Defined at:
  3717 ;;		line 46 in file "DIN.c"
  3718 ;; Parameters:    Size  Location     Type
  3719 ;;		None
  3720 ;; Auto vars:     Size  Location     Type
  3721 ;;		None
  3722 ;; Return value:  Size  Location     Type
  3723 ;;		None               void
  3724 ;; Registers used:
  3725 ;;		wreg, status,2, status,0
  3726 ;; Tracked objects:
  3727 ;;		On entry : 0/0
  3728 ;;		On exit  : 0/0
  3729 ;;		Unchanged: 0/0
  3730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3732 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3733 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3734 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3735 ;;Total ram usage:        1 bytes
  3736 ;; Hardware stack levels used:    1
  3737 ;; Hardware stack levels required when called:    2
  3738 ;; This function calls:
  3739 ;;		Nothing
  3740 ;; This function is called by:
  3741 ;;		_SYSTask
  3742 ;; This function uses a non-reentrant model
  3743 ;;
  3744                           
  3745                           
  3746                           ;psect for function _DINTick
  3747  133C                     _DINTick:	
  3748                           
  3749                           ;DIN.c: 50: if(u_flg_din.tmrDbncSel)
  3750                           
  3751                           ;incstack = 0
  3752                           ; Regs used in _DINTick: [wreg+status,2+status,0]
  3753  133C  0021               	movlb	1	; select bank1
  3754  133D  1C69               	btfss	_u_flg_din^(0+128),0
  3755  133E  2B4F               	goto	l214
  3756                           
  3757                           ;DIN.c: 51: {
  3758                           ;DIN.c: 52: tmrDbncSel++;
  3759  133F  3001               	movlw	1
  3760  1340  00F1               	movwf	??_DINTick
  3761  1341  0871               	movf	??_DINTick,w
  3762  1342  07E7               	addwf	_tmrDbncSel^(0+128),f
  3763                           
  3764                           ;DIN.c: 53: if(tmrDbncSel>5)
  3765  1343  3006               	movlw	6
  3766  1344  0267               	subwf	_tmrDbncSel^(0+128),w
  3767  1345  1C03               	skipc
  3768  1346  2B4F               	goto	l214
  3769                           
  3770                           ;DIN.c: 54: {
  3771                           ;DIN.c: 55: u_flg_din.tmrDbncSel=0;
  3772  1347  1069               	bcf	_u_flg_din^(0+128),0
  3773                           
  3774                           ;DIN.c: 56: tmrDbncSel=0;
  3775  1348  01E7               	clrf	_tmrDbncSel^(0+128)
  3776                           
  3777                           ;DIN.c: 58: if(u_in_sta_currTask.sel)
  3778  1349  1C6C               	btfss	_u_in_sta_currTask^(0+128),0
  3779  134A  2B4D               	goto	l216
  3780                           
  3781                           ;DIN.c: 59: u_in_ev_down.sel=1;
  3782  134B  146A               	bsf	_u_in_ev_down^(0+128),0
  3783  134C  2B4F               	goto	l214
  3784  134D                     l216:	
  3785                           
  3786                           ;DIN.c: 60: else
  3787                           ;DIN.c: 61: u_in_ev_up.sel=1;
  3788  134D  0022               	movlb	2	; select bank2
  3789  134E  1442               	bsf	_u_in_ev_up^(0+256),0
  3790  134F                     l214:	
  3791                           
  3792                           ;DIN.c: 62: }
  3793                           ;DIN.c: 63: }
  3794                           ;DIN.c: 66: if(u_flg_din.tmrLongSel)
  3795  134F  0021               	movlb	1	; select bank1
  3796  1350  1CE9               	btfss	_u_flg_din^(0+128),1
  3797  1351  0008               	return
  3798                           
  3799                           ;DIN.c: 67: {
  3800                           ;DIN.c: 68: tmrLongSel++;
  3801  1352  3001               	movlw	1
  3802  1353  0022               	movlb	2	; select bank2
  3803  1354  07BA               	addwf	_tmrLongSel^(0+256),f
  3804  1355  3000               	movlw	0
  3805  1356  3DBB               	addwfc	(_tmrLongSel+1)^(0+256),f
  3806                           
  3807                           ;DIN.c: 69: if(tmrLongSel>200)
  3808  1357  3000               	movlw	0
  3809  1358  023B               	subwf	(_tmrLongSel+1)^(0+256),w
  3810  1359  30C9               	movlw	201
  3811  135A  1903               	skipnz
  3812  135B  023A               	subwf	_tmrLongSel^(0+256),w
  3813  135C  1C03               	skipc
  3814  135D  0008               	return
  3815                           
  3816                           ;DIN.c: 70: {
  3817                           ;DIN.c: 72: tmrLongSel=0;
  3818  135E  01BA               	clrf	_tmrLongSel^(0+256)
  3819  135F  01BB               	clrf	(_tmrLongSel+1)^(0+256)
  3820                           
  3821                           ;DIN.c: 74: u_in_ev_long.sel=1;
  3822  1360  0021               	movlb	1	; select bank1
  3823  1361  146B               	bsf	_u_in_ev_long^(0+128),0
  3824  1362  0008               	return
  3825  1363                     __end_of_DINTick:	
  3826                           
  3827                           	psect	text11
  3828  0800                     __ptext11:	
  3829 ;; *************** function _SYSInit *****************
  3830 ;; Defined at:
  3831 ;;		line 14 in file "SYS.c"
  3832 ;; Parameters:    Size  Location     Type
  3833 ;;  state           1    wreg     unsigned char 
  3834 ;; Auto vars:     Size  Location     Type
  3835 ;;  state           1    2[COMMON] unsigned char 
  3836 ;; Return value:  Size  Location     Type
  3837 ;;		None               void
  3838 ;; Registers used:
  3839 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3840 ;; Tracked objects:
  3841 ;;		On entry : 0/0
  3842 ;;		On exit  : 0/0
  3843 ;;		Unchanged: 0/0
  3844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3846 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3847 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3848 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3849 ;;Total ram usage:        2 bytes
  3850 ;; Hardware stack levels used:    1
  3851 ;; Hardware stack levels required when called:    2
  3852 ;; This function calls:
  3853 ;;		Nothing
  3854 ;; This function is called by:
  3855 ;;		_main
  3856 ;; This function uses a non-reentrant model
  3857 ;;
  3858                           
  3859                           
  3860                           ;psect for function _SYSInit
  3861  0800                     _SYSInit:	
  3862                           
  3863                           ;incstack = 0
  3864                           ; Regs used in _SYSInit: [wreg-fsr0h+status,2+status,0]
  3865                           ;SYSInit@state stored from wreg
  3866  0800  00F2               	movwf	SYSInit@state
  3867                           
  3868                           ;SYS.c: 16: switch(state)
  3869  0801  281A               	goto	l4847
  3870  0802                     l4829:	
  3871                           ;SYS.c: 17: {
  3872                           ;SYS.c: 18: case 0:
  3873                           
  3874                           
  3875                           ;SYS.c: 20: OPTION_REG=0b00000110; OSCCON=0b01110001; WDTCON=0b00001001; TMR0=255-156; I
      +                          NTCON|=0b00100000; INTCON&=0b11111011; PIR1=0b00000000; PIR2=0b00000000; PIE1=0b00000000
      +                          ; PIE2=0b00000000;
  3876  0802  3006               	movlw	6
  3877  0803  0021               	movlb	1	; select bank1
  3878  0804  0095               	movwf	21	;volatile
  3879  0805  3071               	movlw	113
  3880  0806  0099               	movwf	25	;volatile
  3881  0807  3009               	movlw	9
  3882  0808  0097               	movwf	23	;volatile
  3883  0809  3063               	movlw	99
  3884  080A  0020               	movlb	0	; select bank0
  3885  080B  0095               	movwf	21	;volatile
  3886  080C  168B               	bsf	11,5	;volatile
  3887  080D  30FB               	movlw	251
  3888  080E  00F1               	movwf	??_SYSInit
  3889  080F  0871               	movf	??_SYSInit,w
  3890  0810  058B               	andwf	11,f	;volatile
  3891  0811  0191               	clrf	17	;volatile
  3892  0812  0192               	clrf	18	;volatile
  3893  0813  0021               	movlb	1	; select bank1
  3894  0814  0191               	clrf	17	;volatile
  3895  0815  0192               	clrf	18	;volatile
  3896                           
  3897                           ;SYS.c: 21: break;
  3898  0816  0008               	return
  3899  0817                     l4843:	
  3900                           ;SYS.c: 22: case 1:
  3901                           
  3902                           
  3903                           ;SYS.c: 24: u_SYS_STA.VAL=0;
  3904  0817  0022               	movlb	2	; select bank2
  3905  0818  01C1               	clrf	_u_SYS_STA^(0+256)
  3906                           
  3907                           ;SYS.c: 29: }
  3908                           
  3909                           ;SYS.c: 25: break;
  3910  0819  0008               	return
  3911  081A                     l4847:	
  3912  081A  0872               	movf	SYSInit@state,w
  3913                           
  3914                           ; Switch size 1, requested type "space"
  3915                           ; Number of cases is 2, Range of values is 0 to 1
  3916                           ; switch strategies available:
  3917                           ; Name         Instructions Cycles
  3918                           ; simple_byte            7     4 (average)
  3919                           ; direct_byte           10     6 (fixed)
  3920                           ; jumptable            260     6 (fixed)
  3921                           ;	Chosen strategy is simple_byte
  3922  081B  3A00               	xorlw	0	; case 0
  3923  081C  1903               	skipnz
  3924  081D  2802               	goto	l4829
  3925  081E  3A01               	xorlw	1	; case 1
  3926  081F  1903               	skipnz
  3927  0820  2817               	goto	l4843
  3928  0821  2822               	goto	l704
  3929  0822                     l704:	
  3930  0822  0008               	return
  3931  0823                     __end_of_SYSInit:	
  3932                           
  3933                           	psect	text12
  3934  120A                     __ptext12:	
  3935 ;; *************** function _SPIInit *****************
  3936 ;; Defined at:
  3937 ;;		line 8 in file "SPI.c"
  3938 ;; Parameters:    Size  Location     Type
  3939 ;;  state           1    wreg     unsigned char 
  3940 ;; Auto vars:     Size  Location     Type
  3941 ;;  state           1    2[COMMON] unsigned char 
  3942 ;; Return value:  Size  Location     Type
  3943 ;;		None               void
  3944 ;; Registers used:
  3945 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3946 ;; Tracked objects:
  3947 ;;		On entry : 0/0
  3948 ;;		On exit  : 0/0
  3949 ;;		Unchanged: 0/0
  3950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3952 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3953 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3954 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3955 ;;Total ram usage:        2 bytes
  3956 ;; Hardware stack levels used:    1
  3957 ;; Hardware stack levels required when called:    2
  3958 ;; This function calls:
  3959 ;;		Nothing
  3960 ;; This function is called by:
  3961 ;;		_main
  3962 ;; This function uses a non-reentrant model
  3963 ;;
  3964                           
  3965                           
  3966                           ;psect for function _SPIInit
  3967  120A                     _SPIInit:	
  3968                           
  3969                           ;incstack = 0
  3970                           ; Regs used in _SPIInit: [wreg-fsr0h+status,2+status,0]
  3971                           ;SPIInit@state stored from wreg
  3972  120A  00F2               	movwf	SPIInit@state
  3973                           
  3974                           ;SPI.c: 10: switch(state)
  3975  120B  2A1C               	goto	l4723
  3976  120C                     l61:	
  3977                           ;SPI.c: 11: {
  3978                           ;SPI.c: 12: case 0:
  3979                           
  3980                           
  3981                           ;SPI.c: 14: TRISC|=0b00010000; TRISC&=0b11010111; SSPCONbits.SSPEN=0; SSPBUF=0x00; SSPCO
      +                          N1=0b00000001; SSPCON2=0b00000000; SSPSTAT=0b01000000; SSPCONbits.SSPEN=1;
  3982  120C  0021               	movlb	1	; select bank1
  3983  120D  160E               	bsf	14,4	;volatile
  3984  120E  30D7               	movlw	215
  3985  120F  00F1               	movwf	??_SPIInit
  3986  1210  0871               	movf	??_SPIInit,w
  3987  1211  058E               	andwf	14,f	;volatile
  3988  1212  0024               	movlb	4	; select bank4
  3989  1213  1295               	bcf	21,5	;volatile
  3990  1214  0191               	clrf	17	;volatile
  3991  1215  3001               	movlw	1
  3992  1216  0095               	movwf	21	;volatile
  3993  1217  0196               	clrf	22	;volatile
  3994  1218  3040               	movlw	64
  3995  1219  0094               	movwf	20	;volatile
  3996  121A  1695               	bsf	21,5	;volatile
  3997                           
  3998                           ;SPI.c: 22: }
  3999                           
  4000                           ;SPI.c: 21: break;
  4001                           
  4002                           ;SPI.c: 19: case 2:
  4003                           
  4004                           ;SPI.c: 18: break;
  4005                           
  4006                           ;SPI.c: 16: case 1:
  4007                           
  4008                           ;SPI.c: 15: break;
  4009  121B  0008               	return
  4010  121C                     l4723:	
  4011  121C  0872               	movf	SPIInit@state,w
  4012                           
  4013                           ; Switch size 1, requested type "space"
  4014                           ; Number of cases is 3, Range of values is 0 to 2
  4015                           ; switch strategies available:
  4016                           ; Name         Instructions Cycles
  4017                           ; simple_byte           10     6 (average)
  4018                           ; direct_byte           12     6 (fixed)
  4019                           ; jumptable            260     6 (fixed)
  4020                           ;	Chosen strategy is simple_byte
  4021  121D  3A00               	xorlw	0	; case 0
  4022  121E  1903               	skipnz
  4023  121F  2A0C               	goto	l61
  4024  1220  3A01               	xorlw	1	; case 1
  4025  1221  1903               	skipnz
  4026  1222  2A27               	goto	l65
  4027  1223  3A03               	xorlw	3	; case 2
  4028  1224  1903               	skipnz
  4029  1225  2A27               	goto	l65
  4030  1226  2A27               	goto	l65
  4031  1227                     l65:	
  4032  1227  0008               	return
  4033  1228                     __end_of_SPIInit:	
  4034                           
  4035                           	psect	text13
  4036  1018                     __ptext13:	
  4037 ;; *************** function _RTXTask *****************
  4038 ;; Defined at:
  4039 ;;		line 141 in file "RTX.c"
  4040 ;; Parameters:    Size  Location     Type
  4041 ;;		None
  4042 ;; Auto vars:     Size  Location     Type
  4043 ;;		None
  4044 ;; Return value:  Size  Location     Type
  4045 ;;		None               void
  4046 ;; Registers used:
  4047 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4048 ;; Tracked objects:
  4049 ;;		On entry : 0/0
  4050 ;;		On exit  : 0/0
  4051 ;;		Unchanged: 0/0
  4052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4053 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4054 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4055 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4056 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4057 ;;Total ram usage:        0 bytes
  4058 ;; Hardware stack levels used:    1
  4059 ;; Hardware stack levels required when called:    9
  4060 ;; This function calls:
  4061 ;;		_RTXReadPkt
  4062 ;; This function is called by:
  4063 ;;		_main
  4064 ;; This function uses a non-reentrant model
  4065 ;;
  4066                           
  4067                           
  4068                           ;psect for function _RTXTask
  4069  1018                     _RTXTask:	
  4070                           
  4071                           ;RTX.c: 144: if(!(PORTBbits.RB0))
  4072                           
  4073                           ;incstack = 0
  4074                           ; Regs used in _RTXTask: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4075  1018  0020               	movlb	0	; select bank0
  4076  1019  180D               	btfsc	13,0	;volatile
  4077  101A  0008               	return
  4078                           
  4079                           ;RTX.c: 145: RTXReadPkt();
  4080  101B  318C  2486         	fcall	_RTXReadPkt
  4081  101D  0008               	return
  4082  101E                     __end_of_RTXTask:	
  4083                           
  4084                           	psect	text14
  4085  0C86                     __ptext14:	
  4086 ;; *************** function _RTXReadPkt *****************
  4087 ;; Defined at:
  4088 ;;		line 438 in file "RTX.c"
  4089 ;; Parameters:    Size  Location     Type
  4090 ;;		None
  4091 ;; Auto vars:     Size  Location     Type
  4092 ;;  valBatt         3   77[BANK0 ] struct _RTX_DATA
  4093 ;;  valVoltCurr     3   74[BANK0 ] struct _RTX_DATA
  4094 ;;  volt4Calc       3   71[BANK0 ] float 
  4095 ;; Return value:  Size  Location     Type
  4096 ;;		None               void
  4097 ;; Registers used:
  4098 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4099 ;; Tracked objects:
  4100 ;;		On entry : 0/0
  4101 ;;		On exit  : 0/0
  4102 ;;		Unchanged: 0/0
  4103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4105 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4106 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4107 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4108 ;;Total ram usage:       10 bytes
  4109 ;; Hardware stack levels used:    1
  4110 ;; Hardware stack levels required when called:    8
  4111 ;; This function calls:
  4112 ;;		_CC1Read
  4113 ;;		_DLYDelay_ms
  4114 ;;		_PGMWriteNvm
  4115 ;;		_RTXPgmOff
  4116 ;;		_RTXRcvPkt
  4117 ;;		_RTXSendRData
  4118 ;;		_RTXSup
  4119 ;;		_RTXUpdateDisplay
  4120 ;;		___ftmul
  4121 ;; This function is called by:
  4122 ;;		_RTXTask
  4123 ;; This function uses a non-reentrant model
  4124 ;;
  4125                           
  4126                           
  4127                           ;psect for function _RTXReadPkt
  4128  0C86                     _RTXReadPkt:	
  4129                           
  4130                           ;RTX.c: 440: tu_RTX_DATA valVoltCurr,valBatt;
  4131                           ;RTX.c: 441: float volt4Calc;
  4132                           ;RTX.c: 444: CC1Read(0x3B,(&(numRxByte)),1);
  4133                           
  4134                           ;incstack = 0
  4135                           ; Regs used in _RTXReadPkt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4136  0C86  30EE               	movlw	low _numRxByte
  4137  0C87  00F9               	movwf	CC1Read@dst
  4138  0C88  3000               	movlw	high _numRxByte
  4139  0C89  00FA               	movwf	CC1Read@dst+1
  4140  0C8A  01FB               	clrf	CC1Read@len
  4141  0C8B  0AFB               	incf	CC1Read@len,f
  4142  0C8C  303B               	movlw	59
  4143  0C8D  3192  2288  318C   	fcall	_CC1Read
  4144  0C90                     l6061:	
  4145                           ;RTX.c: 445: while(numRxByte>=0x0A)
  4146                           
  4147  0C90  300A               	movlw	10
  4148  0C91  0021               	movlb	1	; select bank1
  4149  0C92  026E               	subwf	_numRxByte^(0+128),w
  4150  0C93  1C03               	btfss	3,0
  4151  0C94  0008               	return
  4152  0C95  0064               	clrwdt	;# 
  4153                           
  4154                           ;RTX.c: 449: RTXRcvPkt(pktRx,0x0A);
  4155  0C96  300A               	movlw	10
  4156  0C97  0020               	movlb	0	; select bank0
  4157  0C98  00E6               	movwf	??_RTXReadPkt
  4158  0C99  0866               	movf	??_RTXReadPkt,w
  4159  0C9A  00A3               	movwf	RTXRcvPkt@len
  4160  0C9B  304E               	movlw	(low (_pktRx| (0+256)))& (0+255)
  4161  0C9C  3190  2072  318C   	fcall	_RTXRcvPkt
  4162                           
  4163                           ;RTX.c: 451: if(rtx_flg.pgmonoff)
  4164  0C9F  0021               	movlb	1	; select bank1
  4165  0CA0  1D66               	btfss	_rtx_flg^(0+128),2
  4166  0CA1  2D0A               	goto	l6001
  4167                           
  4168                           ;RTX.c: 452: {
  4169                           ;RTX.c: 453: if((pktRx[ID_DEST]==pgm_cfg.base.id))
  4170  0CA2  0022               	movlb	2	; select bank2
  4171  0CA3  0847               	movf	(_pgm_cfg^(0+256)+4),w
  4172  0CA4  064E               	xorwf	_pktRx^(0+256),w
  4173  0CA5  1D03               	skipz
  4174  0CA6  2E0F               	goto	l6057
  4175                           
  4176                           ;RTX.c: 454: {
  4177                           ;RTX.c: 456: if(pktRx[OP]==rPGM)
  4178  0CA7  3081               	movlw	129
  4179  0CA8  0651               	xorwf	(_pktRx^(0+256)+3),w
  4180  0CA9  1D03               	btfss	3,2
  4181  0CAA  2E0F               	goto	l6057
  4182                           
  4183                           ;RTX.c: 457: {
  4184                           ;RTX.c: 459: if(pktRx[TYPE]==SENS_VOLT)
  4185  0CAB  3003               	movlw	3
  4186  0CAC  0650               	xorwf	(_pktRx^(0+256)+2),w
  4187  0CAD  1D03               	btfss	3,2
  4188  0CAE  2CBD               	goto	l5965
  4189                           
  4190                           ;RTX.c: 460: {
  4191                           ;RTX.c: 462: pgm_cfg.volt_sens.id=pktRx[ID_SOURCE];
  4192  0CAF  084F               	movf	(_pktRx^(0+256)+1),w
  4193  0CB0  0020               	movlb	0	; select bank0
  4194  0CB1  00E6               	movwf	??_RTXReadPkt
  4195  0CB2  0866               	movf	??_RTXReadPkt,w
  4196  0CB3  0022               	movlb	2	; select bank2
  4197  0CB4  00CD               	movwf	(_pgm_cfg^(0+256)+10)
  4198                           
  4199                           ;RTX.c: 463: pgm_cfg.volt_sens.type=pktRx[TYPE];
  4200  0CB5  0850               	movf	(_pktRx^(0+256)+2),w
  4201  0CB6  0020               	movlb	0	; select bank0
  4202  0CB7  00E6               	movwf	??_RTXReadPkt
  4203  0CB8  0866               	movf	??_RTXReadPkt,w
  4204  0CB9  0022               	movlb	2	; select bank2
  4205  0CBA  00CC               	movwf	(_pgm_cfg^(0+256)+9)
  4206                           
  4207                           ;RTX.c: 464: pgm_cfg.menu.volt_sensIsProg=1;
  4208  0CBB  1545               	bsf	(_pgm_cfg^(0+256)+2),2
  4209                           
  4210                           ;RTX.c: 465: }
  4211  0CBC  2CDF               	goto	l5977
  4212  0CBD                     l5965:	
  4213                           
  4214                           ;RTX.c: 466: else if(pktRx[TYPE]==SENS_CURRGEN)
  4215  0CBD  0350               	decf	(_pktRx^(0+256)+2),w
  4216  0CBE  1D03               	btfss	3,2
  4217  0CBF  2CCE               	goto	l5971
  4218                           
  4219                           ;RTX.c: 467: {
  4220                           ;RTX.c: 469: pgm_cfg.gen_curr_sens.id=pktRx[ID_SOURCE];
  4221  0CC0  084F               	movf	(_pktRx^(0+256)+1),w
  4222  0CC1  0020               	movlb	0	; select bank0
  4223  0CC2  00E6               	movwf	??_RTXReadPkt
  4224  0CC3  0866               	movf	??_RTXReadPkt,w
  4225  0CC4  0022               	movlb	2	; select bank2
  4226  0CC5  00C9               	movwf	(_pgm_cfg^(0+256)+6)
  4227                           
  4228                           ;RTX.c: 470: pgm_cfg.gen_curr_sens.type=pktRx[TYPE];
  4229  0CC6  0850               	movf	(_pktRx^(0+256)+2),w
  4230  0CC7  0020               	movlb	0	; select bank0
  4231  0CC8  00E6               	movwf	??_RTXReadPkt
  4232  0CC9  0866               	movf	??_RTXReadPkt,w
  4233  0CCA  0022               	movlb	2	; select bank2
  4234  0CCB  00C8               	movwf	(_pgm_cfg^(0+256)+5)
  4235                           
  4236                           ;RTX.c: 471: pgm_cfg.menu.gen_curr_sensIsProg=1;
  4237  0CCC  1445               	bsf	(_pgm_cfg^(0+256)+2),0
  4238                           
  4239                           ;RTX.c: 472: }
  4240  0CCD  2CDF               	goto	l5977
  4241  0CCE                     l5971:	
  4242                           
  4243                           ;RTX.c: 473: else if(pktRx[TYPE]==SENS_CURRCON)
  4244  0CCE  3002               	movlw	2
  4245  0CCF  0650               	xorwf	(_pktRx^(0+256)+2),w
  4246  0CD0  1D03               	btfss	3,2
  4247  0CD1  2CDF               	goto	l5977
  4248                           
  4249                           ;RTX.c: 474: {
  4250                           ;RTX.c: 476: pgm_cfg.con_curr_sens.id=pktRx[ID_SOURCE];
  4251  0CD2  084F               	movf	(_pktRx^(0+256)+1),w
  4252  0CD3  0020               	movlb	0	; select bank0
  4253  0CD4  00E6               	movwf	??_RTXReadPkt
  4254  0CD5  0866               	movf	??_RTXReadPkt,w
  4255  0CD6  0022               	movlb	2	; select bank2
  4256  0CD7  00CB               	movwf	(_pgm_cfg^(0+256)+8)
  4257                           
  4258                           ;RTX.c: 477: pgm_cfg.con_curr_sens.type=pktRx[TYPE];
  4259  0CD8  0850               	movf	(_pktRx^(0+256)+2),w
  4260  0CD9  0020               	movlb	0	; select bank0
  4261  0CDA  00E6               	movwf	??_RTXReadPkt
  4262  0CDB  0866               	movf	??_RTXReadPkt,w
  4263  0CDC  0022               	movlb	2	; select bank2
  4264  0CDD  00CA               	movwf	(_pgm_cfg^(0+256)+7)
  4265                           
  4266                           ;RTX.c: 478: pgm_cfg.menu.con_curr_sensIsProg=1;
  4267  0CDE  14C5               	bsf	(_pgm_cfg^(0+256)+2),1
  4268  0CDF                     l5977:	
  4269                           
  4270                           ;RTX.c: 479: }
  4271                           ;RTX.c: 480: PGMWriteNvm();
  4272  0CDF  3190  2080  318C   	fcall	_PGMWriteNvm
  4273                           
  4274                           ;RTX.c: 482: rtx_flg.pgmDone=1;
  4275  0CE2  0021               	movlb	1	; select bank1
  4276  0CE3  14E6               	bsf	_rtx_flg^(0+128),1
  4277                           
  4278                           ;RTX.c: 484: tmrRcvPkt=0;
  4279  0CE4  01E8               	clrf	_tmrRcvPkt^(0+128)
  4280                           
  4281                           ;RTX.c: 486: if(pktRx[TYPE]==SENS_VOLT)
  4282  0CE5  3003               	movlw	3
  4283  0CE6  0022               	movlb	2	; select bank2
  4284  0CE7  0650               	xorwf	(_pktRx^(0+256)+2),w
  4285  0CE8  1D03               	btfss	3,2
  4286  0CE9  2CEC               	goto	l5987
  4287                           
  4288                           ;RTX.c: 487: RTXUpdateDisplay(UPD_DPY_PGMDONEVOLTSENS);
  4289  0CEA  3005               	movlw	5
  4290  0CEB  2CF8               	goto	L1
  4291  0CEC                     l5987:	
  4292                           
  4293                           ;RTX.c: 488: else if(pktRx[TYPE]==SENS_CURRGEN)
  4294  0CEC  0022               	movlb	2	; select bank2
  4295  0CED  0350               	decf	(_pktRx^(0+256)+2),w
  4296  0CEE  1D03               	btfss	3,2
  4297  0CEF  2CF2               	goto	l5991
  4298                           
  4299                           ;RTX.c: 489: RTXUpdateDisplay(UPD_DPY_PGMDONECURRSENSGEN);
  4300  0CF0  3003               	movlw	3
  4301  0CF1  2CF8               	goto	L1
  4302  0CF2                     l5991:	
  4303                           
  4304                           ;RTX.c: 490: else if(pktRx[TYPE]==SENS_CURRCON)
  4305  0CF2  3002               	movlw	2
  4306  0CF3  0022               	movlb	2	; select bank2
  4307  0CF4  0650               	xorwf	(_pktRx^(0+256)+2),w
  4308  0CF5  1D03               	btfss	3,2
  4309  0CF6  2CFB               	goto	l5995
  4310                           
  4311                           ;RTX.c: 491: RTXUpdateDisplay(UPD_DPY_PGMDONECURRSENSCON);
  4312  0CF7  3004               	movlw	4
  4313  0CF8                     L1:	
  4314  0CF8  3180  2046  318C   	fcall	_RTXUpdateDisplay
  4315  0CFB                     l5995:	
  4316                           
  4317                           ;RTX.c: 493: DLYDelay_ms(2000);
  4318  0CFB  30D0               	movlw	208
  4319  0CFC  00F1               	movwf	DLYDelay_ms@val
  4320  0CFD  3007               	movlw	7
  4321  0CFE  00F2               	movwf	DLYDelay_ms@val+1
  4322  0CFF  3191  2167  318C   	fcall	_DLYDelay_ms
  4323                           
  4324                           ;RTX.c: 495: RTXUpdateDisplay(UPD_DPY_POWER);
  4325  0D02  3000               	movlw	0
  4326  0D03  3180  2046  318C   	fcall	_RTXUpdateDisplay
  4327                           
  4328                           ;RTX.c: 497: RTXPgmOff();
  4329  0D06  3190  2012  318C   	fcall	_RTXPgmOff
  4330                           
  4331                           ;RTX.c: 498: }
  4332                           ;RTX.c: 499: }
  4333                           ;RTX.c: 500: }
  4334  0D09  2E0F               	goto	l6057
  4335  0D0A                     l6001:	
  4336                           
  4337                           ;RTX.c: 501: else
  4338                           ;RTX.c: 502: {
  4339                           ;RTX.c: 503: if((pktRx[ID_DEST]==pgm_cfg.base.id) && ((pktRx[ID_SOURCE]==pgm_cfg.gen_cur
      +                          r_sens.id) || (pktRx[ID_SOURCE]==pgm_cfg.con_curr_sens.id)) || (pktRx[ID_SOURCE]==pgm_cf
      +                          g.volt_sens.id))
  4340  0D0A  0022               	movlb	2	; select bank2
  4341  0D0B  0847               	movf	(_pgm_cfg^(0+256)+4),w
  4342  0D0C  064E               	xorwf	_pktRx^(0+256),w
  4343  0D0D  1D03               	skipz
  4344  0D0E  2D17               	goto	l6007
  4345  0D0F  0849               	movf	(_pgm_cfg^(0+256)+6),w
  4346  0D10  064F               	xorwf	(_pktRx^(0+256)+1),w
  4347  0D11  1903               	skipnz
  4348  0D12  2D1B               	goto	l6009
  4349  0D13  084B               	movf	(_pgm_cfg^(0+256)+8),w
  4350  0D14  064F               	xorwf	(_pktRx^(0+256)+1),w
  4351  0D15  1903               	skipnz
  4352  0D16  2D1B               	goto	l6009
  4353  0D17                     l6007:	
  4354  0D17  084D               	movf	(_pgm_cfg^(0+256)+10),w
  4355  0D18  064F               	xorwf	(_pktRx^(0+256)+1),w
  4356  0D19  1D03               	skipz
  4357  0D1A  2E0F               	goto	l6057
  4358  0D1B                     l6009:	
  4359                           
  4360                           ;RTX.c: 504: {
  4361                           ;RTX.c: 506: if(pktRx[OP]==DAT)
  4362  0D1B  0851               	movf	(_pktRx^(0+256)+3),w
  4363  0D1C  1D03               	btfss	3,2
  4364  0D1D  2E0F               	goto	l6057
  4365                           
  4366                           ;RTX.c: 507: {
  4367                           ;RTX.c: 509: valVoltCurr.val_byte[0]=pktRx[VAL];
  4368  0D1E  0852               	movf	(_pktRx^(0+256)+4),w
  4369  0D1F  0020               	movlb	0	; select bank0
  4370  0D20  00E6               	movwf	??_RTXReadPkt
  4371  0D21  0866               	movf	??_RTXReadPkt,w
  4372  0D22  00EA               	movwf	RTXReadPkt@valVoltCurr
  4373                           
  4374                           ;RTX.c: 510: valVoltCurr.val_byte[1]=pktRx[VAL+1];
  4375  0D23  0022               	movlb	2	; select bank2
  4376  0D24  0853               	movf	(_pktRx^(0+256)+5),w
  4377  0D25  0020               	movlb	0	; select bank0
  4378  0D26  00E6               	movwf	??_RTXReadPkt
  4379  0D27  0866               	movf	??_RTXReadPkt,w
  4380  0D28  00EB               	movwf	RTXReadPkt@valVoltCurr+1
  4381                           
  4382                           ;RTX.c: 511: valVoltCurr.val_byte[2]=pktRx[VAL+2];
  4383  0D29  0022               	movlb	2	; select bank2
  4384  0D2A  0854               	movf	(_pktRx^(0+256)+6),w
  4385  0D2B  0020               	movlb	0	; select bank0
  4386  0D2C  00E6               	movwf	??_RTXReadPkt
  4387  0D2D  0866               	movf	??_RTXReadPkt,w
  4388  0D2E  00EC               	movwf	RTXReadPkt@valVoltCurr+2
  4389                           
  4390                           ;RTX.c: 513: valBatt.val_byte[0]=pktRx[BAT];
  4391  0D2F  0022               	movlb	2	; select bank2
  4392  0D30  0854               	movf	(_pktRx^(0+256)+6),w
  4393  0D31  0020               	movlb	0	; select bank0
  4394  0D32  00E6               	movwf	??_RTXReadPkt
  4395  0D33  0866               	movf	??_RTXReadPkt,w
  4396  0D34  00ED               	movwf	RTXReadPkt@valBatt
  4397                           
  4398                           ;RTX.c: 514: valBatt.val_byte[1]=pktRx[BAT+1];
  4399  0D35  0022               	movlb	2	; select bank2
  4400  0D36  0855               	movf	(_pktRx^(0+256)+7),w
  4401  0D37  0020               	movlb	0	; select bank0
  4402  0D38  00E6               	movwf	??_RTXReadPkt
  4403  0D39  0866               	movf	??_RTXReadPkt,w
  4404  0D3A  00EE               	movwf	RTXReadPkt@valBatt+1
  4405                           
  4406                           ;RTX.c: 515: valBatt.val_byte[2]=pktRx[BAT+2];
  4407  0D3B  0022               	movlb	2	; select bank2
  4408  0D3C  0856               	movf	(_pktRx^(0+256)+8),w
  4409  0D3D  0020               	movlb	0	; select bank0
  4410  0D3E  00E6               	movwf	??_RTXReadPkt
  4411  0D3F  0866               	movf	??_RTXReadPkt,w
  4412  0D40  00EF               	movwf	RTXReadPkt@valBatt+2
  4413                           
  4414                           ;RTX.c: 517: if((pktRx[TYPE]==SENS_CURRGEN) && pgm_cfg.menu.gen_curr_sensIsProg && (pktR
      +                          x[ID_SOURCE]==pgm_cfg.gen_curr_sens.id))
  4415  0D41  0022               	movlb	2	; select bank2
  4416  0D42  0350               	decf	(_pktRx^(0+256)+2),w
  4417  0D43  1903               	btfsc	3,2
  4418  0D44  1C45               	btfss	(_pgm_cfg^(0+256)+2),0
  4419  0D45  2D63               	goto	l6021
  4420  0D46  0849               	movf	(_pgm_cfg^(0+256)+6),w
  4421  0D47  064F               	xorwf	(_pktRx^(0+256)+1),w
  4422  0D48  1D03               	skipz
  4423  0D49  2D63               	goto	l6021
  4424                           
  4425                           ;RTX.c: 518: {
  4426                           ;RTX.c: 519: gen_curr_sens=valVoltCurr.val;
  4427  0D4A  0020               	movlb	0	; select bank0
  4428  0D4B  086A               	movf	RTXReadPkt@valVoltCurr,w
  4429  0D4C  0022               	movlb	2	; select bank2
  4430  0D4D  00AF               	movwf	_gen_curr_sens^(0+256)
  4431  0D4E  0020               	movlb	0	; select bank0
  4432  0D4F  086B               	movf	RTXReadPkt@valVoltCurr+1,w
  4433  0D50  0022               	movlb	2	; select bank2
  4434  0D51  00B0               	movwf	(_gen_curr_sens+1)^(0+256)
  4435  0D52  0020               	movlb	0	; select bank0
  4436  0D53  086C               	movf	RTXReadPkt@valVoltCurr+2,w
  4437  0D54  0022               	movlb	2	; select bank2
  4438  0D55  00B1               	movwf	(_gen_curr_sens+2)^(0+256)
  4439                           
  4440                           ;RTX.c: 520: batt_gen_curr_sens=valBatt.val;
  4441  0D56  0020               	movlb	0	; select bank0
  4442  0D57  086D               	movf	RTXReadPkt@valBatt,w
  4443  0D58  0022               	movlb	2	; select bank2
  4444  0D59  00A3               	movwf	_batt_gen_curr_sens^(0+256)
  4445  0D5A  0020               	movlb	0	; select bank0
  4446  0D5B  086E               	movf	RTXReadPkt@valBatt+1,w
  4447  0D5C  0022               	movlb	2	; select bank2
  4448  0D5D  00A4               	movwf	(_batt_gen_curr_sens+1)^(0+256)
  4449  0D5E  0020               	movlb	0	; select bank0
  4450  0D5F  086F               	movf	RTXReadPkt@valBatt+2,w
  4451  0D60  0022               	movlb	2	; select bank2
  4452  0D61  00A5               	movwf	(_batt_gen_curr_sens+2)^(0+256)
  4453                           
  4454                           ;RTX.c: 521: }
  4455  0D62  2DA6               	goto	l603
  4456  0D63                     l6021:	
  4457                           
  4458                           ;RTX.c: 522: else if((pktRx[TYPE]==SENS_CURRCON) && pgm_cfg.menu.gen_curr_sensIsProg && 
      +                          (pktRx[ID_SOURCE]==pgm_cfg.con_curr_sens.id))
  4459  0D63  3002               	movlw	2
  4460  0D64  0650               	xorwf	(_pktRx^(0+256)+2),w
  4461  0D65  1903               	btfsc	3,2
  4462  0D66  1C45               	btfss	(_pgm_cfg^(0+256)+2),0
  4463  0D67  2D85               	goto	l6029
  4464  0D68  084B               	movf	(_pgm_cfg^(0+256)+8),w
  4465  0D69  064F               	xorwf	(_pktRx^(0+256)+1),w
  4466  0D6A  1D03               	skipz
  4467  0D6B  2D85               	goto	l6029
  4468                           
  4469                           ;RTX.c: 523: {
  4470                           ;RTX.c: 524: con_curr_sens=valVoltCurr.val;
  4471  0D6C  0020               	movlb	0	; select bank0
  4472  0D6D  086A               	movf	RTXReadPkt@valVoltCurr,w
  4473  0D6E  0022               	movlb	2	; select bank2
  4474  0D6F  00A9               	movwf	_con_curr_sens^(0+256)
  4475  0D70  0020               	movlb	0	; select bank0
  4476  0D71  086B               	movf	RTXReadPkt@valVoltCurr+1,w
  4477  0D72  0022               	movlb	2	; select bank2
  4478  0D73  00AA               	movwf	(_con_curr_sens+1)^(0+256)
  4479  0D74  0020               	movlb	0	; select bank0
  4480  0D75  086C               	movf	RTXReadPkt@valVoltCurr+2,w
  4481  0D76  0022               	movlb	2	; select bank2
  4482  0D77  00AB               	movwf	(_con_curr_sens+2)^(0+256)
  4483                           
  4484                           ;RTX.c: 525: batt_con_curr_sens=valBatt.val;
  4485  0D78  0020               	movlb	0	; select bank0
  4486  0D79  086D               	movf	RTXReadPkt@valBatt,w
  4487  0D7A  0022               	movlb	2	; select bank2
  4488  0D7B  00A0               	movwf	_batt_con_curr_sens^(0+256)
  4489  0D7C  0020               	movlb	0	; select bank0
  4490  0D7D  086E               	movf	RTXReadPkt@valBatt+1,w
  4491  0D7E  0022               	movlb	2	; select bank2
  4492  0D7F  00A1               	movwf	(_batt_con_curr_sens+1)^(0+256)
  4493  0D80  0020               	movlb	0	; select bank0
  4494  0D81  086F               	movf	RTXReadPkt@valBatt+2,w
  4495  0D82  0022               	movlb	2	; select bank2
  4496  0D83  00A2               	movwf	(_batt_con_curr_sens+2)^(0+256)
  4497                           
  4498                           ;RTX.c: 526: }
  4499  0D84  2DA6               	goto	l603
  4500  0D85                     l6029:	
  4501                           
  4502                           ;RTX.c: 527: else if((pktRx[TYPE]==SENS_VOLT) && pgm_cfg.menu.volt_sensIsProg && (pktRx[
      +                          ID_SOURCE]==pgm_cfg.volt_sens.id))
  4503  0D85  3003               	movlw	3
  4504  0D86  0650               	xorwf	(_pktRx^(0+256)+2),w
  4505  0D87  1903               	btfsc	3,2
  4506  0D88  1D45               	btfss	(_pgm_cfg^(0+256)+2),2
  4507  0D89  2DA6               	goto	l603
  4508  0D8A  084D               	movf	(_pgm_cfg^(0+256)+10),w
  4509  0D8B  064F               	xorwf	(_pktRx^(0+256)+1),w
  4510  0D8C  1D03               	skipz
  4511  0D8D  2DA6               	goto	l603
  4512                           
  4513                           ;RTX.c: 528: {
  4514                           ;RTX.c: 529: volt_sens=valVoltCurr.val;
  4515  0D8E  0020               	movlb	0	; select bank0
  4516  0D8F  086A               	movf	RTXReadPkt@valVoltCurr,w
  4517  0D90  0022               	movlb	2	; select bank2
  4518  0D91  00B5               	movwf	_volt_sens^(0+256)
  4519  0D92  0020               	movlb	0	; select bank0
  4520  0D93  086B               	movf	RTXReadPkt@valVoltCurr+1,w
  4521  0D94  0022               	movlb	2	; select bank2
  4522  0D95  00B6               	movwf	(_volt_sens+1)^(0+256)
  4523  0D96  0020               	movlb	0	; select bank0
  4524  0D97  086C               	movf	RTXReadPkt@valVoltCurr+2,w
  4525  0D98  0022               	movlb	2	; select bank2
  4526  0D99  00B7               	movwf	(_volt_sens+2)^(0+256)
  4527                           
  4528                           ;RTX.c: 530: batt_volt_sens=valBatt.val;
  4529  0D9A  0020               	movlb	0	; select bank0
  4530  0D9B  086D               	movf	RTXReadPkt@valBatt,w
  4531  0D9C  0022               	movlb	2	; select bank2
  4532  0D9D  00A6               	movwf	_batt_volt_sens^(0+256)
  4533  0D9E  0020               	movlb	0	; select bank0
  4534  0D9F  086E               	movf	RTXReadPkt@valBatt+1,w
  4535  0DA0  0022               	movlb	2	; select bank2
  4536  0DA1  00A7               	movwf	(_batt_volt_sens+1)^(0+256)
  4537  0DA2  0020               	movlb	0	; select bank0
  4538  0DA3  086F               	movf	RTXReadPkt@valBatt+2,w
  4539  0DA4  0022               	movlb	2	; select bank2
  4540  0DA5  00A8               	movwf	(_batt_volt_sens+2)^(0+256)
  4541  0DA6                     l603:	
  4542                           
  4543                           ;RTX.c: 531: }
  4544                           ;RTX.c: 534: volt4Calc=230;
  4545  0DA6  3000               	movlw	0
  4546  0DA7  0020               	movlb	0	; select bank0
  4547  0DA8  00E7               	movwf	RTXReadPkt@volt4Calc
  4548  0DA9  3066               	movlw	102
  4549  0DAA  00E8               	movwf	RTXReadPkt@volt4Calc+1
  4550  0DAB  3043               	movlw	67
  4551  0DAC  00E9               	movwf	RTXReadPkt@volt4Calc+2
  4552                           
  4553                           ;RTX.c: 535: if(pgm_cfg.menu.volt_sensIsProg)
  4554  0DAD  0022               	movlb	2	; select bank2
  4555  0DAE  1D45               	btfss	(_pgm_cfg^(0+256)+2),2
  4556  0DAF  2DBB               	goto	l6041
  4557                           
  4558                           ;RTX.c: 536: volt4Calc=volt_sens;
  4559  0DB0  0835               	movf	_volt_sens^(0+256),w
  4560  0DB1  0020               	movlb	0	; select bank0
  4561  0DB2  00E7               	movwf	RTXReadPkt@volt4Calc
  4562  0DB3  0022               	movlb	2	; select bank2
  4563  0DB4  0836               	movf	(_volt_sens+1)^(0+256),w
  4564  0DB5  0020               	movlb	0	; select bank0
  4565  0DB6  00E8               	movwf	RTXReadPkt@volt4Calc+1
  4566  0DB7  0022               	movlb	2	; select bank2
  4567  0DB8  0837               	movf	(_volt_sens+2)^(0+256),w
  4568  0DB9  0020               	movlb	0	; select bank0
  4569  0DBA  00E9               	movwf	RTXReadPkt@volt4Calc+2
  4570  0DBB                     l6041:	
  4571                           
  4572                           ;RTX.c: 538: if(pgm_cfg.menu.gen_curr_sensIsProg)
  4573  0DBB  0022               	movlb	2	; select bank2
  4574  0DBC  1C45               	btfss	(_pgm_cfg^(0+256)+2),0
  4575  0DBD  2DDE               	goto	l6045
  4576                           
  4577                           ;RTX.c: 539: gen_power=volt4Calc*gen_curr_sens;
  4578  0DBE  082F               	movf	_gen_curr_sens^(0+256),w
  4579  0DBF  0020               	movlb	0	; select bank0
  4580  0DC0  00A0               	movwf	___ftmul@f1
  4581  0DC1  0022               	movlb	2	; select bank2
  4582  0DC2  0830               	movf	(_gen_curr_sens+1)^(0+256),w
  4583  0DC3  0020               	movlb	0	; select bank0
  4584  0DC4  00A1               	movwf	___ftmul@f1+1
  4585  0DC5  0022               	movlb	2	; select bank2
  4586  0DC6  0831               	movf	(_gen_curr_sens+2)^(0+256),w
  4587  0DC7  0020               	movlb	0	; select bank0
  4588  0DC8  00A2               	movwf	___ftmul@f1+2
  4589  0DC9  0867               	movf	RTXReadPkt@volt4Calc,w
  4590  0DCA  00A3               	movwf	___ftmul@f2
  4591  0DCB  0868               	movf	RTXReadPkt@volt4Calc+1,w
  4592  0DCC  00A4               	movwf	___ftmul@f2+1
  4593  0DCD  0869               	movf	RTXReadPkt@volt4Calc+2,w
  4594  0DCE  00A5               	movwf	___ftmul@f2+2
  4595  0DCF  318B  2315  318C   	fcall	___ftmul
  4596  0DD2  0020               	movlb	0	; select bank0
  4597  0DD3  0820               	movf	?___ftmul,w
  4598  0DD4  0022               	movlb	2	; select bank2
  4599  0DD5  00B2               	movwf	_gen_power^(0+256)
  4600  0DD6  0020               	movlb	0	; select bank0
  4601  0DD7  0821               	movf	?___ftmul+1,w
  4602  0DD8  0022               	movlb	2	; select bank2
  4603  0DD9  00B3               	movwf	(_gen_power+1)^(0+256)
  4604  0DDA  0020               	movlb	0	; select bank0
  4605  0DDB  0822               	movf	?___ftmul+2,w
  4606  0DDC  0022               	movlb	2	; select bank2
  4607  0DDD  00B4               	movwf	(_gen_power+2)^(0+256)
  4608  0DDE                     l6045:	
  4609                           
  4610                           ;RTX.c: 540: if(pgm_cfg.menu.con_curr_sensIsProg)
  4611  0DDE  1CC5               	btfss	(_pgm_cfg^(0+256)+2),1
  4612  0DDF  2E00               	goto	l6049
  4613                           
  4614                           ;RTX.c: 541: con_power=volt4Calc*con_curr_sens;
  4615  0DE0  0829               	movf	_con_curr_sens^(0+256),w
  4616  0DE1  0020               	movlb	0	; select bank0
  4617  0DE2  00A0               	movwf	___ftmul@f1
  4618  0DE3  0022               	movlb	2	; select bank2
  4619  0DE4  082A               	movf	(_con_curr_sens+1)^(0+256),w
  4620  0DE5  0020               	movlb	0	; select bank0
  4621  0DE6  00A1               	movwf	___ftmul@f1+1
  4622  0DE7  0022               	movlb	2	; select bank2
  4623  0DE8  082B               	movf	(_con_curr_sens+2)^(0+256),w
  4624  0DE9  0020               	movlb	0	; select bank0
  4625  0DEA  00A2               	movwf	___ftmul@f1+2
  4626  0DEB  0867               	movf	RTXReadPkt@volt4Calc,w
  4627  0DEC  00A3               	movwf	___ftmul@f2
  4628  0DED  0868               	movf	RTXReadPkt@volt4Calc+1,w
  4629  0DEE  00A4               	movwf	___ftmul@f2+1
  4630  0DEF  0869               	movf	RTXReadPkt@volt4Calc+2,w
  4631  0DF0  00A5               	movwf	___ftmul@f2+2
  4632  0DF1  318B  2315  318C   	fcall	___ftmul
  4633  0DF4  0020               	movlb	0	; select bank0
  4634  0DF5  0820               	movf	?___ftmul,w
  4635  0DF6  0022               	movlb	2	; select bank2
  4636  0DF7  00AC               	movwf	_con_power^(0+256)
  4637  0DF8  0020               	movlb	0	; select bank0
  4638  0DF9  0821               	movf	?___ftmul+1,w
  4639  0DFA  0022               	movlb	2	; select bank2
  4640  0DFB  00AD               	movwf	(_con_power+1)^(0+256)
  4641  0DFC  0020               	movlb	0	; select bank0
  4642  0DFD  0822               	movf	?___ftmul+2,w
  4643  0DFE  0022               	movlb	2	; select bank2
  4644  0DFF  00AE               	movwf	(_con_power+2)^(0+256)
  4645  0E00                     l6049:	
  4646                           
  4647                           ;RTX.c: 544: RTXSendRData(pktRx[ID_SOURCE]);
  4648  0E00  084F               	movf	(_pktRx^(0+256)+1),w
  4649  0E01  3192  22AA  318C   	fcall	_RTXSendRData
  4650                           
  4651                           ;RTX.c: 546: if(tmrVisBatt)
  4652  0E04  0021               	movlb	1	; select bank1
  4653  0E05  0863               	movf	_tmrVisBatt^(0+128),w
  4654  0E06  0464               	iorwf	(_tmrVisBatt+1)^(0+128),w
  4655  0E07  1903               	btfsc	3,2
  4656  0E08  2E0B               	goto	l6055
  4657                           
  4658                           ;RTX.c: 547: RTXUpdateDisplay(UPD_DPY_BATT);
  4659  0E09  3001               	movlw	1
  4660  0E0A  2E0C               	goto	L2
  4661  0E0B                     l6055:	
  4662                           
  4663                           ;RTX.c: 548: else
  4664                           ;RTX.c: 549: RTXUpdateDisplay(UPD_DPY_POWER);
  4665  0E0B  3000               	movlw	0
  4666  0E0C                     L2:	
  4667  0E0C  3180  2046  318C   	fcall	_RTXUpdateDisplay
  4668  0E0F                     l6057:	
  4669                           
  4670                           ;RTX.c: 550: }
  4671                           ;RTX.c: 551: }
  4672                           ;RTX.c: 552: }
  4673                           ;RTX.c: 554: CC1Read(0x3B,(&(numRxByte)),1);
  4674  0E0F  30EE               	movlw	low _numRxByte
  4675  0E10  00F9               	movwf	CC1Read@dst
  4676  0E11  3000               	movlw	high _numRxByte
  4677  0E12  00FA               	movwf	CC1Read@dst+1
  4678  0E13  01FB               	clrf	CC1Read@len
  4679  0E14  0AFB               	incf	CC1Read@len,f
  4680  0E15  303B               	movlw	59
  4681  0E16  3192  2288  318C   	fcall	_CC1Read
  4682                           
  4683                           ;RTX.c: 556: RTXSup();
  4684  0E19  3193  23B5  318C   	fcall	_RTXSup
  4685  0E1C  2C90               	goto	l6061
  4686  0E1D                     __end_of_RTXReadPkt:	
  4687                           
  4688                           	psect	text15
  4689  13B5                     __ptext15:	
  4690 ;; *************** function _RTXSup *****************
  4691 ;; Defined at:
  4692 ;;		line 367 in file "RTX.c"
  4693 ;; Parameters:    Size  Location     Type
  4694 ;;		None
  4695 ;; Auto vars:     Size  Location     Type
  4696 ;;		None
  4697 ;; Return value:  Size  Location     Type
  4698 ;;		None               void
  4699 ;; Registers used:
  4700 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4701 ;; Tracked objects:
  4702 ;;		On entry : 0/0
  4703 ;;		On exit  : 0/0
  4704 ;;		Unchanged: 0/0
  4705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4709 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4710 ;;Total ram usage:        0 bytes
  4711 ;; Hardware stack levels used:    1
  4712 ;; Hardware stack levels required when called:    4
  4713 ;; This function calls:
  4714 ;;		_CC1Read
  4715 ;;		_CC1Strobe
  4716 ;; This function is called by:
  4717 ;;		_RTXTick
  4718 ;;		_RTXReadPkt
  4719 ;; This function uses a non-reentrant model
  4720 ;;
  4721                           
  4722                           
  4723                           ;psect for function _RTXSup
  4724  13B5                     _RTXSup:	
  4725                           
  4726                           ;RTX.c: 370: CC1Read(0x35,(&(sta)),1);
  4727                           
  4728                           ;incstack = 0
  4729                           ; Regs used in _RTXSup: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4730  13B5  307C               	movlw	low _sta
  4731  13B6  00F9               	movwf	CC1Read@dst
  4732  13B7  3000               	movlw	high _sta
  4733  13B8  00FA               	movwf	CC1Read@dst+1
  4734  13B9  01FB               	clrf	CC1Read@len
  4735  13BA  0AFB               	incf	CC1Read@len,f
  4736  13BB  3035               	movlw	53
  4737  13BC  3192  2288  3193   	fcall	_CC1Read
  4738                           
  4739                           ;RTX.c: 373: switch(sta)
  4740  13BF  2BD4               	goto	l5819
  4741  13C0                     l5811:	
  4742                           ;RTX.c: 374: {
  4743                           ;RTX.c: 375: case IDLE:
  4744                           
  4745                           
  4746                           ;RTX.c: 376: CC1Strobe(SRX);
  4747  13C0  3034               	movlw	52
  4748  13C1  3190  20E4         	fcall	_CC1Strobe
  4749                           
  4750                           ;RTX.c: 377: break;
  4751  13C3  0008               	return
  4752  13C4                     l5813:	
  4753                           ;RTX.c: 378: case RXFIFO_OVERFLOW:
  4754                           
  4755                           
  4756                           ;RTX.c: 379: CC1Strobe(SFRX);
  4757  13C4  303A               	movlw	58
  4758  13C5  3190  20E4  3193   	fcall	_CC1Strobe
  4759                           
  4760                           ;RTX.c: 380: CC1Strobe(SRX);
  4761  13C8  3034               	movlw	52
  4762  13C9  3190  20E4         	fcall	_CC1Strobe
  4763                           
  4764                           ;RTX.c: 381: break;
  4765  13CB  0008               	return
  4766  13CC                     l5815:	
  4767                           ;RTX.c: 382: case TXFIFO_UNDERFLOW:
  4768                           
  4769                           
  4770                           ;RTX.c: 383: CC1Strobe(SFTX);
  4771  13CC  303B               	movlw	59
  4772  13CD  3190  20E4  3193   	fcall	_CC1Strobe
  4773                           
  4774                           ;RTX.c: 384: CC1Strobe(SRX);
  4775  13D0  3034               	movlw	52
  4776  13D1  3190  20E4         	fcall	_CC1Strobe
  4777                           
  4778                           ;RTX.c: 386: }
  4779                           
  4780                           ;RTX.c: 385: break;
  4781  13D3  0008               	return
  4782  13D4                     l5819:	
  4783  13D4  087C               	movf	_sta,w
  4784                           
  4785                           ; Switch size 1, requested type "space"
  4786                           ; Number of cases is 3, Range of values is 1 to 22
  4787                           ; switch strategies available:
  4788                           ; Name         Instructions Cycles
  4789                           ; simple_byte           10     6 (average)
  4790                           ; direct_byte           53     9 (fixed)
  4791                           ; jumptable            263     9 (fixed)
  4792                           ;	Chosen strategy is simple_byte
  4793  13D5  3A01               	xorlw	1	; case 1
  4794  13D6  1903               	skipnz
  4795  13D7  2BC0               	goto	l5811
  4796  13D8  3A10               	xorlw	16	; case 17
  4797  13D9  1903               	skipnz
  4798  13DA  2BC4               	goto	l5813
  4799  13DB  3A07               	xorlw	7	; case 22
  4800  13DC  1903               	skipnz
  4801  13DD  2BCC               	goto	l5815
  4802  13DE  2BDF               	goto	l561
  4803  13DF                     l561:	
  4804  13DF  0008               	return
  4805  13E0                     __end_of_RTXSup:	
  4806                           
  4807                           	psect	text16
  4808  12AA                     __ptext16:	
  4809 ;; *************** function _RTXSendRData *****************
  4810 ;; Defined at:
  4811 ;;		line 560 in file "RTX.c"
  4812 ;; Parameters:    Size  Location     Type
  4813 ;;  sensId          1    wreg     unsigned char 
  4814 ;; Auto vars:     Size  Location     Type
  4815 ;;  sensId          1    8[BANK0 ] unsigned char 
  4816 ;; Return value:  Size  Location     Type
  4817 ;;		None               void
  4818 ;; Registers used:
  4819 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4820 ;; Tracked objects:
  4821 ;;		On entry : 0/0
  4822 ;;		On exit  : 0/0
  4823 ;;		Unchanged: 0/0
  4824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4825 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4826 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4827 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4828 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4829 ;;Total ram usage:        2 bytes
  4830 ;; Hardware stack levels used:    1
  4831 ;; Hardware stack levels required when called:    5
  4832 ;; This function calls:
  4833 ;;		_RTXSndPkt
  4834 ;; This function is called by:
  4835 ;;		_RTXReadPkt
  4836 ;; This function uses a non-reentrant model
  4837 ;;
  4838                           
  4839                           
  4840                           ;psect for function _RTXSendRData
  4841  12AA                     _RTXSendRData:	
  4842                           
  4843                           ;incstack = 0
  4844                           ; Regs used in _RTXSendRData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4845                           ;RTXSendRData@sensId stored from wreg
  4846  12AA  0020               	movlb	0	; select bank0
  4847  12AB  00A8               	movwf	RTXSendRData@sensId
  4848                           
  4849                           ;RTX.c: 563: pktTx[ID_DEST]=sensId;
  4850  12AC  0828               	movf	RTXSendRData@sensId,w
  4851  12AD  00A7               	movwf	??_RTXSendRData
  4852  12AE  0827               	movf	??_RTXSendRData,w
  4853  12AF  0022               	movlb	2	; select bank2
  4854  12B0  00D8               	movwf	_pktTx^(0+256)
  4855                           
  4856                           ;RTX.c: 564: pktTx[ID_SOURCE]=pgm_cfg.base.id;
  4857  12B1  0847               	movf	(_pgm_cfg^(0+256)+4),w
  4858  12B2  0020               	movlb	0	; select bank0
  4859  12B3  00A7               	movwf	??_RTXSendRData
  4860  12B4  0827               	movf	??_RTXSendRData,w
  4861  12B5  0022               	movlb	2	; select bank2
  4862  12B6  00D9               	movwf	(_pktTx^(0+256)+1)
  4863                           
  4864                           ;RTX.c: 565: pktTx[TYPE]=BASE;
  4865  12B7  01DA               	clrf	(_pktTx^(0+256)+2)
  4866                           
  4867                           ;RTX.c: 566: pktTx[OP]=rDAT;
  4868  12B8  3080               	movlw	128
  4869  12B9  0020               	movlb	0	; select bank0
  4870  12BA  00A7               	movwf	??_RTXSendRData
  4871  12BB  0827               	movf	??_RTXSendRData,w
  4872  12BC  0022               	movlb	2	; select bank2
  4873  12BD  00DB               	movwf	(_pktTx^(0+256)+3)
  4874                           
  4875                           ;RTX.c: 567: pktTx[VAL]=0x00;
  4876  12BE  01DC               	clrf	(_pktTx^(0+256)+4)
  4877                           
  4878                           ;RTX.c: 568: pktTx[VAL+1]=0x00;
  4879  12BF  01DD               	clrf	(_pktTx^(0+256)+5)
  4880                           
  4881                           ;RTX.c: 569: pktTx[VAL+2]=0x00;
  4882  12C0  01DE               	clrf	(_pktTx^(0+256)+6)
  4883                           
  4884                           ;RTX.c: 570: pktTx[BAT]=0x00;
  4885  12C1  01DE               	clrf	(_pktTx^(0+256)+6)
  4886                           
  4887                           ;RTX.c: 571: pktTx[BAT+1]=0x00;
  4888  12C2  01DF               	clrf	(_pktTx^(0+256)+7)
  4889                           
  4890                           ;RTX.c: 572: pktTx[BAT+2]=0x00;
  4891  12C3  01E0               	clrf	(_pktTx^(0+256)+8)
  4892                           
  4893                           ;RTX.c: 575: RTXSndPkt(pktTx,0x0A);
  4894  12C4  300A               	movlw	10
  4895  12C5  0020               	movlb	0	; select bank0
  4896  12C6  00A7               	movwf	??_RTXSendRData
  4897  12C7  0827               	movf	??_RTXSendRData,w
  4898  12C8  00A3               	movwf	RTXSndPkt@len
  4899  12C9  3058               	movlw	(low (_pktTx| (0+256)))& (0+255)
  4900  12CA  3197  2705         	fcall	_RTXSndPkt
  4901  12CC  0008               	return
  4902  12CD                     __end_of_RTXSendRData:	
  4903                           
  4904                           	psect	text17
  4905  1705                     __ptext17:	
  4906 ;; *************** function _RTXSndPkt *****************
  4907 ;; Defined at:
  4908 ;;		line 410 in file "RTX.c"
  4909 ;; Parameters:    Size  Location     Type
  4910 ;;  src             1    wreg     PTR unsigned char 
  4911 ;;		 -> pktTx(10), 
  4912 ;;  len             1    3[BANK0 ] unsigned char 
  4913 ;; Auto vars:     Size  Location     Type
  4914 ;;  src             1    6[BANK0 ] PTR unsigned char 
  4915 ;;		 -> pktTx(10), 
  4916 ;; Return value:  Size  Location     Type
  4917 ;;		None               void
  4918 ;; Registers used:
  4919 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4920 ;; Tracked objects:
  4921 ;;		On entry : 0/0
  4922 ;;		On exit  : 0/0
  4923 ;;		Unchanged: 0/0
  4924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4925 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4926 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4927 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4928 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4929 ;;Total ram usage:        4 bytes
  4930 ;; Hardware stack levels used:    1
  4931 ;; Hardware stack levels required when called:    4
  4932 ;; This function calls:
  4933 ;;		_CC1Read
  4934 ;;		_CC1Strobe
  4935 ;;		_CC1Write
  4936 ;; This function is called by:
  4937 ;;		_RTXSendRData
  4938 ;;		_RTXSendPgm
  4939 ;; This function uses a non-reentrant model
  4940 ;;
  4941                           
  4942                           
  4943                           ;psect for function _RTXSndPkt
  4944  1705                     _RTXSndPkt:	
  4945                           
  4946                           ;incstack = 0
  4947                           ; Regs used in _RTXSndPkt: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4948                           ;RTXSndPkt@src stored from wreg
  4949  1705  0020               	movlb	0	; select bank0
  4950  1706  00A6               	movwf	RTXSndPkt@src
  4951  1707                     l570:	
  4952                           ;RTX.c: 413: do
  4953                           
  4954  1707  0064               	clrwdt	;# 
  4955                           
  4956                           ;RTX.c: 416: CC1Read(0x35,(&(sta)),1);
  4957  1708  307C               	movlw	low _sta
  4958  1709  00F9               	movwf	CC1Read@dst
  4959  170A  3000               	movlw	high _sta
  4960  170B  00FA               	movwf	CC1Read@dst+1
  4961  170C  01FB               	clrf	CC1Read@len
  4962  170D  0AFB               	incf	CC1Read@len,f
  4963  170E  3035               	movlw	53
  4964  170F  3192  2288  3197   	fcall	_CC1Read
  4965                           
  4966                           ;RTX.c: 417: }
  4967                           ;RTX.c: 418: while(!(((sta&0b00011111)==0x0D) || ((sta&0b00011111)==0x01)));
  4968  1712  301F               	movlw	31
  4969  1713  057C               	andwf	_sta,w
  4970  1714  0020               	movlb	0	; select bank0
  4971  1715  00A4               	movwf	??_RTXSndPkt
  4972  1716  300D               	movlw	13
  4973  1717  0624               	xorwf	??_RTXSndPkt,w
  4974  1718  1903               	btfsc	3,2
  4975  1719  2F20               	goto	l5763
  4976  171A  301F               	movlw	31
  4977  171B  057C               	andwf	_sta,w
  4978  171C  00A4               	movwf	??_RTXSndPkt
  4979  171D  0324               	decf	??_RTXSndPkt,w
  4980  171E  1D03               	btfss	3,2
  4981  171F  2F07               	goto	l570
  4982  1720                     l5763:	
  4983                           
  4984                           ;RTX.c: 420: CC1Strobe(SIDLE);
  4985  1720  3036               	movlw	54
  4986  1721  3190  20E4  3197   	fcall	_CC1Strobe
  4987                           
  4988                           ;RTX.c: 421: CC1Read(0x3B,(&(numRxByte)),1);
  4989  1724  30EE               	movlw	low _numRxByte
  4990  1725  00F9               	movwf	CC1Read@dst
  4991  1726  3000               	movlw	high _numRxByte
  4992  1727  00FA               	movwf	CC1Read@dst+1
  4993  1728  01FB               	clrf	CC1Read@len
  4994  1729  0AFB               	incf	CC1Read@len,f
  4995  172A  303B               	movlw	59
  4996  172B  3192  2288  3197   	fcall	_CC1Read
  4997                           
  4998                           ;RTX.c: 422: CC1Read(0x3A,(&(numTxByte)),1);
  4999  172E  30EF               	movlw	low _numTxByte
  5000  172F  00F9               	movwf	CC1Read@dst
  5001  1730  3000               	movlw	high _numTxByte
  5002  1731  00FA               	movwf	CC1Read@dst+1
  5003  1732  01FB               	clrf	CC1Read@len
  5004  1733  0AFB               	incf	CC1Read@len,f
  5005  1734  303A               	movlw	58
  5006  1735  3192  2288  3197   	fcall	_CC1Read
  5007                           
  5008                           ;RTX.c: 424: CC1Strobe(SFTX);
  5009  1738  303B               	movlw	59
  5010  1739  3190  20E4  3197   	fcall	_CC1Strobe
  5011                           
  5012                           ;RTX.c: 425: CC1Read(0x3A,(&(numTxByte)),1);
  5013  173C  30EF               	movlw	low _numTxByte
  5014  173D  00F9               	movwf	CC1Read@dst
  5015  173E  3000               	movlw	high _numTxByte
  5016  173F  00FA               	movwf	CC1Read@dst+1
  5017  1740  01FB               	clrf	CC1Read@len
  5018  1741  0AFB               	incf	CC1Read@len,f
  5019  1742  303A               	movlw	58
  5020  1743  3192  2288  3197   	fcall	_CC1Read
  5021                           
  5022                           ;RTX.c: 427: CC1Write(0x3F,src,len);
  5023  1746  0020               	movlb	0	; select bank0
  5024  1747  0826               	movf	RTXSndPkt@src,w
  5025  1748  00A4               	movwf	??_RTXSndPkt
  5026  1749  0824               	movf	??_RTXSndPkt,w
  5027  174A  00F7               	movwf	CC1Write@src
  5028  174B  0823               	movf	RTXSndPkt@len,w
  5029  174C  00A5               	movwf	??_RTXSndPkt+1
  5030  174D  0825               	movf	??_RTXSndPkt+1,w
  5031  174E  00F8               	movwf	CC1Write@len
  5032  174F  303F               	movlw	63
  5033  1750  3192  2228  3197   	fcall	_CC1Write
  5034                           
  5035                           ;RTX.c: 429: CC1Strobe(STX);
  5036  1753  3035               	movlw	53
  5037  1754  3190  20E4         	fcall	_CC1Strobe
  5038  1756  0008               	return
  5039  1757                     __end_of_RTXSndPkt:	
  5040                           
  5041                           	psect	text18
  5042  1072                     __ptext18:	
  5043 ;; *************** function _RTXRcvPkt *****************
  5044 ;; Defined at:
  5045 ;;		line 432 in file "RTX.c"
  5046 ;; Parameters:    Size  Location     Type
  5047 ;;  dst             1    wreg     PTR unsigned char 
  5048 ;;		 -> pktRx(10), 
  5049 ;;  len             1    3[BANK0 ] unsigned char 
  5050 ;; Auto vars:     Size  Location     Type
  5051 ;;  dst             1    5[BANK0 ] PTR unsigned char 
  5052 ;;		 -> pktRx(10), 
  5053 ;; Return value:  Size  Location     Type
  5054 ;;		None               void
  5055 ;; Registers used:
  5056 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5057 ;; Tracked objects:
  5058 ;;		On entry : 0/0
  5059 ;;		On exit  : 0/0
  5060 ;;		Unchanged: 0/0
  5061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5062 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5063 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5064 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5065 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5066 ;;Total ram usage:        3 bytes
  5067 ;; Hardware stack levels used:    1
  5068 ;; Hardware stack levels required when called:    4
  5069 ;; This function calls:
  5070 ;;		_CC1Read
  5071 ;; This function is called by:
  5072 ;;		_RTXReadPkt
  5073 ;; This function uses a non-reentrant model
  5074 ;;
  5075                           
  5076                           
  5077                           ;psect for function _RTXRcvPkt
  5078  1072                     _RTXRcvPkt:	
  5079                           
  5080                           ;incstack = 0
  5081                           ; Regs used in _RTXRcvPkt: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5082                           ;RTXRcvPkt@dst stored from wreg
  5083  1072  0020               	movlb	0	; select bank0
  5084  1073  00A5               	movwf	RTXRcvPkt@dst
  5085                           
  5086                           ;RTX.c: 435: CC1Read(0x3F,dst,len);
  5087  1074  0825               	movf	RTXRcvPkt@dst,w
  5088  1075  00F9               	movwf	CC1Read@dst
  5089  1076  3001               	movlw	1
  5090  1077  00FA               	movwf	CC1Read@dst+1
  5091  1078  0823               	movf	RTXRcvPkt@len,w
  5092  1079  00A4               	movwf	??_RTXRcvPkt
  5093  107A  0824               	movf	??_RTXRcvPkt,w
  5094  107B  00FB               	movwf	CC1Read@len
  5095  107C  303F               	movlw	63
  5096  107D  3192  2288         	fcall	_CC1Read
  5097  107F  0008               	return
  5098  1080                     __end_of_RTXRcvPkt:	
  5099                           
  5100                           	psect	text19
  5101  1288                     __ptext19:	
  5102 ;; *************** function _CC1Read *****************
  5103 ;; Defined at:
  5104 ;;		line 112 in file "CC1.c"
  5105 ;; Parameters:    Size  Location     Type
  5106 ;;  addr            1    wreg     unsigned char 
  5107 ;;  dst             2    9[COMMON] PTR unsigned char 
  5108 ;;		 -> pktRx(10), numTxByte(1), numRxByte(1), sta(1), 
  5109 ;;  len             1   11[COMMON] unsigned char 
  5110 ;; Auto vars:     Size  Location     Type
  5111 ;;  addr            1    1[BANK0 ] unsigned char 
  5112 ;;  cc1Addr         1    2[BANK0 ] unsigned char 
  5113 ;; Return value:  Size  Location     Type
  5114 ;;		None               void
  5115 ;; Registers used:
  5116 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5117 ;; Tracked objects:
  5118 ;;		On entry : 0/0
  5119 ;;		On exit  : 0/0
  5120 ;;		Unchanged: 0/0
  5121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5122 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5123 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5124 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5125 ;;      Totals:         3       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5126 ;;Total ram usage:        6 bytes
  5127 ;; Hardware stack levels used:    1
  5128 ;; Hardware stack levels required when called:    3
  5129 ;; This function calls:
  5130 ;;		_SPIRead
  5131 ;;		_SPIWrite
  5132 ;; This function is called by:
  5133 ;;		_RTXSup
  5134 ;;		_RTXSndPkt
  5135 ;;		_RTXRcvPkt
  5136 ;;		_RTXReadPkt
  5137 ;; This function uses a non-reentrant model
  5138 ;;
  5139                           
  5140                           
  5141                           ;psect for function _CC1Read
  5142  1288                     _CC1Read:	
  5143                           
  5144                           ;incstack = 0
  5145                           ; Regs used in _CC1Read: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5146                           ;CC1Read@addr stored from wreg
  5147  1288  0020               	movlb	0	; select bank0
  5148  1289  00A1               	movwf	CC1Read@addr
  5149                           
  5150                           ;CC1.c: 114: unsigned char cc1Addr;
  5151                           ;CC1.c: 117: LATAbits.LATA5=0;
  5152  128A  0022               	movlb	2	; select bank2
  5153  128B  128C               	bcf	12,5	;volatile
  5154                           
  5155                           ;CC1.c: 120: cc1Addr=((addr&0b00111111)|0b11000000);
  5156  128C  0020               	movlb	0	; select bank0
  5157  128D  0821               	movf	CC1Read@addr,w
  5158  128E  393F               	andlw	63
  5159  128F  38C0               	iorlw	192
  5160  1290  00A0               	movwf	??_CC1Read
  5161  1291  0820               	movf	??_CC1Read,w
  5162  1292  00A2               	movwf	CC1Read@cc1Addr
  5163                           
  5164                           ;CC1.c: 121: SPIWrite((&(cc1Addr)),1);
  5165  1293  3022               	movlw	low CC1Read@cc1Addr
  5166  1294  00F1               	movwf	SPIWrite@srcPtr
  5167  1295  3000               	movlw	high CC1Read@cc1Addr
  5168  1296  00F2               	movwf	SPIWrite@srcPtr+1
  5169  1297  01F3               	clrf	SPIWrite@len
  5170  1298  0AF3               	incf	SPIWrite@len,f
  5171  1299  3191  21CF  3192   	fcall	_SPIWrite
  5172                           
  5173                           ;CC1.c: 124: SPIRead(dst,len);
  5174  129C  0879               	movf	CC1Read@dst,w
  5175  129D  00F1               	movwf	SPIRead@dstPtr
  5176  129E  087A               	movf	CC1Read@dst+1,w
  5177  129F  00F2               	movwf	SPIRead@dstPtr+1
  5178  12A0  087B               	movf	CC1Read@len,w
  5179  12A1  0020               	movlb	0	; select bank0
  5180  12A2  00A0               	movwf	??_CC1Read
  5181  12A3  0820               	movf	??_CC1Read,w
  5182  12A4  00F3               	movwf	SPIRead@len
  5183  12A5  3192  22F1         	fcall	_SPIRead
  5184                           
  5185                           ;CC1.c: 127: LATAbits.LATA5=1;
  5186  12A7  0022               	movlb	2	; select bank2
  5187  12A8  168C               	bsf	12,5	;volatile
  5188  12A9  0008               	return
  5189  12AA                     __end_of_CC1Read:	
  5190                           
  5191                           	psect	text20
  5192  12F1                     __ptext20:	
  5193 ;; *************** function _SPIRead *****************
  5194 ;; Defined at:
  5195 ;;		line 25 in file "SPI.c"
  5196 ;; Parameters:    Size  Location     Type
  5197 ;;  dstPtr          2    1[COMMON] PTR unsigned char 
  5198 ;;		 -> pktRx(10), numTxByte(1), numRxByte(1), sta(1), 
  5199 ;;  len             1    3[COMMON] unsigned char 
  5200 ;; Auto vars:     Size  Location     Type
  5201 ;;  i               1    8[COMMON] unsigned char 
  5202 ;; Return value:  Size  Location     Type
  5203 ;;		None               void
  5204 ;; Registers used:
  5205 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5206 ;; Tracked objects:
  5207 ;;		On entry : 0/0
  5208 ;;		On exit  : 0/0
  5209 ;;		Unchanged: 0/0
  5210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5211 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5212 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5213 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5214 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5215 ;;Total ram usage:        8 bytes
  5216 ;; Hardware stack levels used:    1
  5217 ;; Hardware stack levels required when called:    2
  5218 ;; This function calls:
  5219 ;;		Nothing
  5220 ;; This function is called by:
  5221 ;;		_CC1Read
  5222 ;; This function uses a non-reentrant model
  5223 ;;
  5224                           
  5225                           
  5226                           ;psect for function _SPIRead
  5227  12F1                     _SPIRead:	
  5228                           
  5229                           ;SPI.c: 27: unsigned char i;
  5230                           ;SPI.c: 29: for(i=0;i<len;i++)
  5231                           
  5232                           ;incstack = 0
  5233                           ; Regs used in _SPIRead: [wreg+fsr1l+fsr1h+status,2+status,0]
  5234  12F1  01F8               	clrf	SPIRead@i
  5235  12F2                     l5143:	
  5236  12F2  0873               	movf	SPIRead@len,w
  5237  12F3  0278               	subwf	SPIRead@i,w
  5238  12F4  1803               	btfsc	3,0
  5239  12F5  0008               	return
  5240                           
  5241                           ;SPI.c: 30: {
  5242                           ;SPI.c: 31: PIR1bits.SSPIF=0;
  5243  12F6  0020               	movlb	0	; select bank0
  5244  12F7  1191               	bcf	17,3	;volatile
  5245                           
  5246                           ;SPI.c: 32: SSPBUF=0xFF;
  5247  12F8  30FF               	movlw	255
  5248  12F9  0024               	movlb	4	; select bank4
  5249  12FA  0091               	movwf	17	;volatile
  5250  12FB                     l70:	
  5251                           ;SPI.c: 33: while(!(PIR1bits.SSPIF))
  5252                           
  5253  12FB  0020               	movlb	0	; select bank0
  5254  12FC  1991               	btfsc	17,3	;volatile
  5255  12FD  2B00               	goto	l5139
  5256                           
  5257                           ;SPI.c: 34: __nop();
  5258  12FE  0000               	nop
  5259  12FF  2AFB               	goto	l70
  5260  1300                     l5139:	
  5261                           
  5262                           ;SPI.c: 35: (*(dstPtr+i))=SSPBUF;
  5263  1300  0878               	movf	SPIRead@i,w
  5264  1301  00F4               	movwf	??_SPIRead
  5265  1302  01F5               	clrf	??_SPIRead+1
  5266  1303  0874               	movf	??_SPIRead,w
  5267  1304  0771               	addwf	SPIRead@dstPtr,w
  5268  1305  00F6               	movwf	??_SPIRead+2
  5269  1306  0875               	movf	??_SPIRead+1,w
  5270  1307  3D72               	addwfc	SPIRead@dstPtr+1,w
  5271  1308  00F7               	movwf	??_SPIRead+3
  5272  1309  0876               	movf	??_SPIRead+2,w
  5273  130A  0086               	movwf	6
  5274  130B  0877               	movf	??_SPIRead+3,w
  5275  130C  0087               	movwf	7
  5276  130D  0024               	movlb	4	; select bank4
  5277  130E  0811               	movf	17,w	;volatile
  5278  130F  0081               	movwf	1
  5279  1310  3001               	movlw	1
  5280  1311  00F4               	movwf	??_SPIRead
  5281  1312  0874               	movf	??_SPIRead,w
  5282  1313  07F8               	addwf	SPIRead@i,f
  5283  1314  2AF2               	goto	l5143
  5284  1315                     __end_of_SPIRead:	
  5285                           
  5286                           	psect	text21
  5287  1012                     __ptext21:	
  5288 ;; *************** function _RTXPgmOff *****************
  5289 ;; Defined at:
  5290 ;;		line 607 in file "RTX.c"
  5291 ;; Parameters:    Size  Location     Type
  5292 ;;		None
  5293 ;; Auto vars:     Size  Location     Type
  5294 ;;		None
  5295 ;; Return value:  Size  Location     Type
  5296 ;;		None               void
  5297 ;; Registers used:
  5298 ;;		status,2
  5299 ;; Tracked objects:
  5300 ;;		On entry : 0/0
  5301 ;;		On exit  : 0/0
  5302 ;;		Unchanged: 0/0
  5303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5305 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5306 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5307 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5308 ;;Total ram usage:        0 bytes
  5309 ;; Hardware stack levels used:    1
  5310 ;; Hardware stack levels required when called:    2
  5311 ;; This function calls:
  5312 ;;		Nothing
  5313 ;; This function is called by:
  5314 ;;		_PGMSelLong
  5315 ;;		_RTXReadPkt
  5316 ;;		_SYSTask
  5317 ;; This function uses a non-reentrant model
  5318 ;;
  5319                           
  5320                           
  5321                           ;psect for function _RTXPgmOff
  5322  1012                     _RTXPgmOff:	
  5323                           
  5324                           ;RTX.c: 610: rtx_flg.pgmonoff=0;
  5325                           
  5326                           ;incstack = 0
  5327                           ; Regs used in _RTXPgmOff: [status,2]
  5328  1012  0021               	movlb	1	; select bank1
  5329  1013  1166               	bcf	_rtx_flg^(0+128),2
  5330                           
  5331                           ;RTX.c: 612: tmrRcvPkt=0;
  5332  1014  01E8               	clrf	_tmrRcvPkt^(0+128)
  5333                           
  5334                           ;RTX.c: 614: tmrVisBatt=0;
  5335  1015  01E3               	clrf	_tmrVisBatt^(0+128)
  5336  1016  01E4               	clrf	(_tmrVisBatt+1)^(0+128)
  5337  1017  0008               	return
  5338  1018                     __end_of_RTXPgmOff:	
  5339                           
  5340                           	psect	text22
  5341  0823                     __ptext22:	
  5342 ;; *************** function _RTXInit *****************
  5343 ;; Defined at:
  5344 ;;		line 77 in file "RTX.c"
  5345 ;; Parameters:    Size  Location     Type
  5346 ;;  state           1    wreg     unsigned char 
  5347 ;; Auto vars:     Size  Location     Type
  5348 ;;  state           1   70[BANK0 ] unsigned char 
  5349 ;; Return value:  Size  Location     Type
  5350 ;;		None               void
  5351 ;; Registers used:
  5352 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5353 ;; Tracked objects:
  5354 ;;		On entry : 0/0
  5355 ;;		On exit  : 0/0
  5356 ;;		Unchanged: 0/0
  5357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5359 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5361 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5362 ;;Total ram usage:        1 bytes
  5363 ;; Hardware stack levels used:    1
  5364 ;; Hardware stack levels required when called:    8
  5365 ;; This function calls:
  5366 ;;		_CC1Strobe
  5367 ;;		_RTXUpdateDisplay
  5368 ;; This function is called by:
  5369 ;;		_main
  5370 ;; This function uses a non-reentrant model
  5371 ;;
  5372                           
  5373                           
  5374                           ;psect for function _RTXInit
  5375  0823                     _RTXInit:	
  5376                           
  5377                           ;incstack = 0
  5378                           ; Regs used in _RTXInit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5379                           ;RTXInit@state stored from wreg
  5380  0823  0020               	movlb	0	; select bank0
  5381  0824  00E6               	movwf	RTXInit@state
  5382                           
  5383                           ;RTX.c: 79: switch(state)
  5384  0825  2871               	goto	l6123
  5385  0826                     l6099:	
  5386                           ;RTX.c: 84: case 1:
  5387                           
  5388                           ;RTX.c: 83: break;
  5389                           
  5390                           ;RTX.c: 80: {
  5391                           ;RTX.c: 81: case 0:
  5392                           
  5393                           
  5394                           ;RTX.c: 86: tmrRcvPkt=0;
  5395  0826  0021               	movlb	1	; select bank1
  5396  0827  01E8               	clrf	_tmrRcvPkt^(0+128)
  5397                           
  5398                           ;RTX.c: 87: rtx_flg.val=0;
  5399  0828  01E6               	clrf	_rtx_flg^(0+128)
  5400                           
  5401                           ;RTX.c: 88: tmrCalibration=0;
  5402  0829  0022               	movlb	2	; select bank2
  5403  082A  01B8               	clrf	_tmrCalibration^(0+256)
  5404  082B  01B9               	clrf	(_tmrCalibration+1)^(0+256)
  5405                           
  5406                           ;RTX.c: 89: tmrVisBatt=0;
  5407  082C  0021               	movlb	1	; select bank1
  5408  082D  01E3               	clrf	_tmrVisBatt^(0+128)
  5409  082E  01E4               	clrf	(_tmrVisBatt+1)^(0+128)
  5410                           
  5411                           ;RTX.c: 90: gen_power=0;
  5412  082F  3000               	movlw	0
  5413  0830  0022               	movlb	2	; select bank2
  5414  0831  00B2               	movwf	_gen_power^(0+256)
  5415  0832  3000               	movlw	0
  5416  0833  00B3               	movwf	(_gen_power+1)^(0+256)
  5417  0834  3000               	movlw	0
  5418  0835  00B4               	movwf	(_gen_power+2)^(0+256)
  5419                           
  5420                           ;RTX.c: 91: con_power=0;
  5421  0836  3000               	movlw	0
  5422  0837  00AC               	movwf	_con_power^(0+256)
  5423  0838  3000               	movlw	0
  5424  0839  00AD               	movwf	(_con_power+1)^(0+256)
  5425  083A  3000               	movlw	0
  5426  083B  00AE               	movwf	(_con_power+2)^(0+256)
  5427                           
  5428                           ;RTX.c: 92: gen_curr_sens=0;
  5429  083C  3000               	movlw	0
  5430  083D  00AF               	movwf	_gen_curr_sens^(0+256)
  5431  083E  3000               	movlw	0
  5432  083F  00B0               	movwf	(_gen_curr_sens+1)^(0+256)
  5433  0840  3000               	movlw	0
  5434  0841  00B1               	movwf	(_gen_curr_sens+2)^(0+256)
  5435                           
  5436                           ;RTX.c: 93: con_curr_sens=0;
  5437  0842  3000               	movlw	0
  5438  0843  00A9               	movwf	_con_curr_sens^(0+256)
  5439  0844  3000               	movlw	0
  5440  0845  00AA               	movwf	(_con_curr_sens+1)^(0+256)
  5441  0846  3000               	movlw	0
  5442  0847  00AB               	movwf	(_con_curr_sens+2)^(0+256)
  5443                           
  5444                           ;RTX.c: 94: volt_sens=0;
  5445  0848  3000               	movlw	0
  5446  0849  00B5               	movwf	_volt_sens^(0+256)
  5447  084A  3000               	movlw	0
  5448  084B  00B6               	movwf	(_volt_sens+1)^(0+256)
  5449  084C  3000               	movlw	0
  5450  084D  00B7               	movwf	(_volt_sens+2)^(0+256)
  5451                           
  5452                           ;RTX.c: 95: batt_gen_curr_sens=0;
  5453  084E  3000               	movlw	0
  5454  084F  00A3               	movwf	_batt_gen_curr_sens^(0+256)
  5455  0850  3000               	movlw	0
  5456  0851  00A4               	movwf	(_batt_gen_curr_sens+1)^(0+256)
  5457  0852  3000               	movlw	0
  5458  0853  00A5               	movwf	(_batt_gen_curr_sens+2)^(0+256)
  5459                           
  5460                           ;RTX.c: 96: batt_con_curr_sens=0;
  5461  0854  3000               	movlw	0
  5462  0855  00A0               	movwf	_batt_con_curr_sens^(0+256)
  5463  0856  3000               	movlw	0
  5464  0857  00A1               	movwf	(_batt_con_curr_sens+1)^(0+256)
  5465  0858  3000               	movlw	0
  5466  0859  00A2               	movwf	(_batt_con_curr_sens+2)^(0+256)
  5467                           
  5468                           ;RTX.c: 97: batt_volt_sens=0;
  5469  085A  3000               	movlw	0
  5470  085B  00A6               	movwf	_batt_volt_sens^(0+256)
  5471  085C  3000               	movlw	0
  5472  085D  00A7               	movwf	(_batt_volt_sens+1)^(0+256)
  5473  085E  3000               	movlw	0
  5474  085F  00A8               	movwf	(_batt_volt_sens+2)^(0+256)
  5475                           
  5476                           ;RTX.c: 98: break;
  5477  0860  0008               	return
  5478  0861                     l6117:	
  5479                           ;RTX.c: 99: case 2:
  5480                           
  5481                           
  5482                           ;RTX.c: 101: CC1Strobe(SIDLE);
  5483  0861  3036               	movlw	54
  5484  0862  3190  20E4  3188   	fcall	_CC1Strobe
  5485                           
  5486                           ;RTX.c: 102: CC1Strobe(SCAL);
  5487  0865  3033               	movlw	51
  5488  0866  3190  20E4  3188   	fcall	_CC1Strobe
  5489                           
  5490                           ;RTX.c: 103: CC1Strobe(SRX);
  5491  0869  3034               	movlw	52
  5492  086A  3190  20E4  3188   	fcall	_CC1Strobe
  5493                           
  5494                           ;RTX.c: 105: RTXUpdateDisplay(UPD_DPY_POWER);
  5495  086D  3000               	movlw	0
  5496  086E  3180  2046         	fcall	_RTXUpdateDisplay
  5497                           
  5498                           ;RTX.c: 107: }
  5499                           
  5500                           ;RTX.c: 106: break;
  5501  0870  0008               	return
  5502  0871                     l6123:	
  5503  0871  0020               	movlb	0	; select bank0
  5504  0872  0866               	movf	RTXInit@state,w
  5505                           
  5506                           ; Switch size 1, requested type "space"
  5507                           ; Number of cases is 3, Range of values is 0 to 2
  5508                           ; switch strategies available:
  5509                           ; Name         Instructions Cycles
  5510                           ; simple_byte           10     6 (average)
  5511                           ; direct_byte           12     6 (fixed)
  5512                           ; jumptable            260     6 (fixed)
  5513                           ;	Chosen strategy is simple_byte
  5514  0873  3A00               	xorlw	0	; case 0
  5515  0874  1903               	skipnz
  5516  0875  287D               	goto	l483
  5517  0876  3A01               	xorlw	1	; case 1
  5518  0877  1903               	skipnz
  5519  0878  2826               	goto	l6099
  5520  0879  3A03               	xorlw	3	; case 2
  5521  087A  1903               	skipnz
  5522  087B  2861               	goto	l6117
  5523  087C  287D               	goto	l483
  5524  087D                     l483:	
  5525  087D  0008               	return
  5526  087E                     __end_of_RTXInit:	
  5527                           
  5528                           	psect	text23
  5529  0046                     __ptext23:	
  5530 ;; *************** function _RTXUpdateDisplay *****************
  5531 ;; Defined at:
  5532 ;;		line 148 in file "RTX.c"
  5533 ;; Parameters:    Size  Location     Type
  5534 ;;  val             1    wreg     enum E2131
  5535 ;; Auto vars:     Size  Location     Type
  5536 ;;  val             1   63[BANK1 ] enum E2131
  5537 ;;  strRow1        16   46[BANK1 ] unsigned char [16]
  5538 ;;  strRow2        16   30[BANK1 ] unsigned char [16]
  5539 ;;  charIdSens      4   26[BANK1 ] unsigned char [4]
  5540 ;;  iR              1   64[BANK1 ] unsigned char 
  5541 ;;  i               1   62[BANK1 ] unsigned char 
  5542 ;; Return value:  Size  Location     Type
  5543 ;;		None               void
  5544 ;; Registers used:
  5545 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5546 ;; Tracked objects:
  5547 ;;		On entry : 0/0
  5548 ;;		On exit  : 0/0
  5549 ;;		Unchanged: 0/0
  5550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5552 ;;      Locals:         0       0      42       0       0       0       0       0       0       0       0       0       
      +0       0
  5553 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5554 ;;      Totals:         0       4      42       0       0       0       0       0       0       0       0       0       
      +0       0
  5555 ;;Total ram usage:       46 bytes
  5556 ;; Hardware stack levels used:    1
  5557 ;; Hardware stack levels required when called:    7
  5558 ;; This function calls:
  5559 ;;		_DPYSendStr
  5560 ;;		_RTXVisDec
  5561 ;;		___ftadd
  5562 ;;		___ftge
  5563 ;;		___ftneg
  5564 ;;		_itoa
  5565 ;; This function is called by:
  5566 ;;		_PGMPgmOff
  5567 ;;		_PGMSelDown
  5568 ;;		_PGMSelLong
  5569 ;;		_RTXInit
  5570 ;;		_RTXTick
  5571 ;;		_RTXSelDown
  5572 ;;		_RTXReadPkt
  5573 ;; This function uses a non-reentrant model
  5574 ;;
  5575                           
  5576                           
  5577                           ;psect for function _RTXUpdateDisplay
  5578  0046                     _RTXUpdateDisplay:	
  5579                           
  5580                           ;incstack = 0
  5581                           ; Regs used in _RTXUpdateDisplay: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5582                           ;RTXUpdateDisplay@val stored from wreg
  5583  0046  0021               	movlb	1	; select bank1
  5584  0047  00DF               	movwf	RTXUpdateDisplay@val^(0+128)
  5585                           
  5586                           ;RTX.c: 150: char charIdSens[4],strRow1[16],strRow2[16];
  5587                           ;RTX.c: 151: unsigned char i,iR;
  5588                           ;RTX.c: 154: for(iR=0;iR<sizeof(strRow1)/sizeof(char);iR++)
  5589  0048  01E0               	clrf	RTXUpdateDisplay@iR^(0+128)
  5590  0049  3010               	movlw	16
  5591  004A  0260               	subwf	RTXUpdateDisplay@iR^(0+128),w
  5592  004B  1803               	btfsc	3,0
  5593  004C  2861               	goto	l5375
  5594  004D                     l5369:	
  5595                           
  5596                           ;RTX.c: 155: strRow1[iR]=' ';
  5597  004D  3020               	movlw	32
  5598  004E  0020               	movlb	0	; select bank0
  5599  004F  00E2               	movwf	??_RTXUpdateDisplay
  5600  0050  0021               	movlb	1	; select bank1
  5601  0051  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  5602  0052  3ECE               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  5603  0053  0086               	movwf	6
  5604  0054  0187               	clrf	7
  5605  0055  0020               	movlb	0	; select bank0
  5606  0056  0862               	movf	??_RTXUpdateDisplay,w
  5607  0057  0081               	movwf	1
  5608  0058  3001               	movlw	1
  5609  0059  00E2               	movwf	??_RTXUpdateDisplay
  5610  005A  0862               	movf	??_RTXUpdateDisplay,w
  5611  005B  0021               	movlb	1	; select bank1
  5612  005C  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  5613  005D  3010               	movlw	16
  5614  005E  0260               	subwf	RTXUpdateDisplay@iR^(0+128),w
  5615  005F  1C03               	skipc
  5616  0060  284D               	goto	l5369
  5617  0061                     l5375:	
  5618                           
  5619                           ;RTX.c: 156: for(iR=0;iR<sizeof(strRow2)/sizeof(char);iR++)
  5620  0061  01E0               	clrf	RTXUpdateDisplay@iR^(0+128)
  5621  0062  3010               	movlw	16
  5622  0063  0260               	subwf	RTXUpdateDisplay@iR^(0+128),w
  5623  0064  1803               	btfsc	3,0
  5624  0065  287A               	goto	l5387
  5625  0066                     l5381:	
  5626                           
  5627                           ;RTX.c: 157: strRow2[iR]=' ';
  5628  0066  3020               	movlw	32
  5629  0067  0020               	movlb	0	; select bank0
  5630  0068  00E2               	movwf	??_RTXUpdateDisplay
  5631  0069  0021               	movlb	1	; select bank1
  5632  006A  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  5633  006B  3EBE               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  5634  006C  0086               	movwf	6
  5635  006D  0187               	clrf	7
  5636  006E  0020               	movlb	0	; select bank0
  5637  006F  0862               	movf	??_RTXUpdateDisplay,w
  5638  0070  0081               	movwf	1
  5639  0071  3001               	movlw	1
  5640  0072  00E2               	movwf	??_RTXUpdateDisplay
  5641  0073  0862               	movf	??_RTXUpdateDisplay,w
  5642  0074  0021               	movlb	1	; select bank1
  5643  0075  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  5644  0076  3010               	movlw	16
  5645  0077  0260               	subwf	RTXUpdateDisplay@iR^(0+128),w
  5646  0078  1C03               	skipc
  5647  0079  2866               	goto	l5381
  5648  007A                     l5387:	
  5649                           
  5650                           ;RTX.c: 159: if(val==UPD_DPY_PGM || val==UPD_DPY_PGMDONECURRSENSGEN || val==UPD_DPY_PGMD
      +                          ONECURRSENSCON || val==UPD_DPY_PGMDONEVOLTSENS || val==UPD_DPY_PGMRST)
  5651  007A  3002               	movlw	2
  5652  007B  065F               	xorwf	RTXUpdateDisplay@val^(0+128),w
  5653  007C  1903               	btfsc	3,2
  5654  007D  288E               	goto	l5397
  5655  007E  3003               	movlw	3
  5656  007F  065F               	xorwf	RTXUpdateDisplay@val^(0+128),w
  5657  0080  1903               	btfsc	3,2
  5658  0081  288E               	goto	l5397
  5659  0082  3004               	movlw	4
  5660  0083  065F               	xorwf	RTXUpdateDisplay@val^(0+128),w
  5661  0084  1903               	btfsc	3,2
  5662  0085  288E               	goto	l5397
  5663  0086  3005               	movlw	5
  5664  0087  065F               	xorwf	RTXUpdateDisplay@val^(0+128),w
  5665  0088  1903               	btfsc	3,2
  5666  0089  288E               	goto	l5397
  5667  008A  3006               	movlw	6
  5668  008B  065F               	xorwf	RTXUpdateDisplay@val^(0+128),w
  5669  008C  1D03               	btfss	3,2
  5670  008D  2A74               	goto	l5539
  5671  008E                     l5397:	
  5672                           
  5673                           ;RTX.c: 160: {
  5674                           ;RTX.c: 161: iR=0;
  5675  008E  01E0               	clrf	RTXUpdateDisplay@iR^(0+128)
  5676                           
  5677                           ;RTX.c: 162: strRow1[iR++]='P';
  5678  008F  3050               	movlw	80
  5679  0090  0020               	movlb	0	; select bank0
  5680  0091  00E2               	movwf	??_RTXUpdateDisplay
  5681  0092  0021               	movlb	1	; select bank1
  5682  0093  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  5683  0094  3ECE               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  5684  0095  0086               	movwf	6
  5685  0096  0187               	clrf	7
  5686  0097  0020               	movlb	0	; select bank0
  5687  0098  0862               	movf	??_RTXUpdateDisplay,w
  5688  0099  0081               	movwf	1
  5689  009A  3001               	movlw	1
  5690  009B  00E2               	movwf	??_RTXUpdateDisplay
  5691  009C  0862               	movf	??_RTXUpdateDisplay,w
  5692  009D  0021               	movlb	1	; select bank1
  5693  009E  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  5694                           
  5695                           ;RTX.c: 163: strRow1[iR++]='r';
  5696  009F  3072               	movlw	114
  5697  00A0  0020               	movlb	0	; select bank0
  5698  00A1  00E2               	movwf	??_RTXUpdateDisplay
  5699  00A2  0021               	movlb	1	; select bank1
  5700  00A3  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  5701  00A4  3ECE               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  5702  00A5  0086               	movwf	6
  5703  00A6  0187               	clrf	7
  5704  00A7  0020               	movlb	0	; select bank0
  5705  00A8  0862               	movf	??_RTXUpdateDisplay,w
  5706  00A9  0081               	movwf	1
  5707  00AA  3001               	movlw	1
  5708  00AB  00E2               	movwf	??_RTXUpdateDisplay
  5709  00AC  0862               	movf	??_RTXUpdateDisplay,w
  5710  00AD  0021               	movlb	1	; select bank1
  5711  00AE  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  5712                           
  5713                           ;RTX.c: 164: strRow1[iR++]='o';
  5714  00AF  306F               	movlw	111
  5715  00B0  0020               	movlb	0	; select bank0
  5716  00B1  00E2               	movwf	??_RTXUpdateDisplay
  5717  00B2  0021               	movlb	1	; select bank1
  5718  00B3  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  5719  00B4  3ECE               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  5720  00B5  0086               	movwf	6
  5721  00B6  0187               	clrf	7
  5722  00B7  0020               	movlb	0	; select bank0
  5723  00B8  0862               	movf	??_RTXUpdateDisplay,w
  5724  00B9  0081               	movwf	1
  5725  00BA  3001               	movlw	1
  5726  00BB  00E2               	movwf	??_RTXUpdateDisplay
  5727  00BC  0862               	movf	??_RTXUpdateDisplay,w
  5728  00BD  0021               	movlb	1	; select bank1
  5729  00BE  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  5730                           
  5731                           ;RTX.c: 165: strRow1[iR++]='g';
  5732  00BF  3067               	movlw	103
  5733  00C0  0020               	movlb	0	; select bank0
  5734  00C1  00E2               	movwf	??_RTXUpdateDisplay
  5735  00C2  0021               	movlb	1	; select bank1
  5736  00C3  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  5737  00C4  3ECE               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  5738  00C5  0086               	movwf	6
  5739  00C6  0187               	clrf	7
  5740  00C7  0020               	movlb	0	; select bank0
  5741  00C8  0862               	movf	??_RTXUpdateDisplay,w
  5742  00C9  0081               	movwf	1
  5743  00CA  3001               	movlw	1
  5744  00CB  00E2               	movwf	??_RTXUpdateDisplay
  5745  00CC  0862               	movf	??_RTXUpdateDisplay,w
  5746  00CD  0021               	movlb	1	; select bank1
  5747  00CE  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  5748                           
  5749                           ;RTX.c: 166: strRow1[iR++]='r';
  5750  00CF  3072               	movlw	114
  5751  00D0  0020               	movlb	0	; select bank0
  5752  00D1  00E2               	movwf	??_RTXUpdateDisplay
  5753  00D2  0021               	movlb	1	; select bank1
  5754  00D3  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  5755  00D4  3ECE               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  5756  00D5  0086               	movwf	6
  5757  00D6  0187               	clrf	7
  5758  00D7  0020               	movlb	0	; select bank0
  5759  00D8  0862               	movf	??_RTXUpdateDisplay,w
  5760  00D9  0081               	movwf	1
  5761  00DA  3001               	movlw	1
  5762  00DB  00E2               	movwf	??_RTXUpdateDisplay
  5763  00DC  0862               	movf	??_RTXUpdateDisplay,w
  5764  00DD  0021               	movlb	1	; select bank1
  5765  00DE  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  5766                           
  5767                           ;RTX.c: 167: strRow1[iR++]='a';
  5768  00DF  3061               	movlw	97
  5769  00E0  0020               	movlb	0	; select bank0
  5770  00E1  00E2               	movwf	??_RTXUpdateDisplay
  5771  00E2  0021               	movlb	1	; select bank1
  5772  00E3  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  5773  00E4  3ECE               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  5774  00E5  0086               	movwf	6
  5775  00E6  0187               	clrf	7
  5776  00E7  0020               	movlb	0	; select bank0
  5777  00E8  0862               	movf	??_RTXUpdateDisplay,w
  5778  00E9  0081               	movwf	1
  5779  00EA  3001               	movlw	1
  5780  00EB  00E2               	movwf	??_RTXUpdateDisplay
  5781  00EC  0862               	movf	??_RTXUpdateDisplay,w
  5782  00ED  0021               	movlb	1	; select bank1
  5783  00EE  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  5784                           
  5785                           ;RTX.c: 168: strRow1[iR++]='m';
  5786  00EF  306D               	movlw	109
  5787  00F0  0020               	movlb	0	; select bank0
  5788  00F1  00E2               	movwf	??_RTXUpdateDisplay
  5789  00F2  0021               	movlb	1	; select bank1
  5790  00F3  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  5791  00F4  3ECE               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  5792  00F5  0086               	movwf	6
  5793  00F6  0187               	clrf	7
  5794  00F7  0020               	movlb	0	; select bank0
  5795  00F8  0862               	movf	??_RTXUpdateDisplay,w
  5796  00F9  0081               	movwf	1
  5797  00FA  3001               	movlw	1
  5798  00FB  00E2               	movwf	??_RTXUpdateDisplay
  5799  00FC  0862               	movf	??_RTXUpdateDisplay,w
  5800  00FD  0021               	movlb	1	; select bank1
  5801  00FE  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  5802                           
  5803                           ;RTX.c: 169: strRow1[iR++]='m';
  5804  00FF  306D               	movlw	109
  5805  0100  0020               	movlb	0	; select bank0
  5806  0101  00E2               	movwf	??_RTXUpdateDisplay
  5807  0102  0021               	movlb	1	; select bank1
  5808  0103  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  5809  0104  3ECE               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  5810  0105  0086               	movwf	6
  5811  0106  0187               	clrf	7
  5812  0107  0020               	movlb	0	; select bank0
  5813  0108  0862               	movf	??_RTXUpdateDisplay,w
  5814  0109  0081               	movwf	1
  5815  010A  3001               	movlw	1
  5816  010B  00E2               	movwf	??_RTXUpdateDisplay
  5817  010C  0862               	movf	??_RTXUpdateDisplay,w
  5818  010D  0021               	movlb	1	; select bank1
  5819  010E  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  5820                           
  5821                           ;RTX.c: 170: strRow1[iR++]='a';
  5822  010F  3061               	movlw	97
  5823  0110  0020               	movlb	0	; select bank0
  5824  0111  00E2               	movwf	??_RTXUpdateDisplay
  5825  0112  0021               	movlb	1	; select bank1
  5826  0113  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  5827  0114  3ECE               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  5828  0115  0086               	movwf	6
  5829  0116  0187               	clrf	7
  5830  0117  0020               	movlb	0	; select bank0
  5831  0118  0862               	movf	??_RTXUpdateDisplay,w
  5832  0119  0081               	movwf	1
  5833  011A  3001               	movlw	1
  5834  011B  00E2               	movwf	??_RTXUpdateDisplay
  5835  011C  0862               	movf	??_RTXUpdateDisplay,w
  5836  011D  0021               	movlb	1	; select bank1
  5837  011E  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  5838                           
  5839                           ;RTX.c: 171: strRow1[iR++]='z';
  5840  011F  307A               	movlw	122
  5841  0120  0020               	movlb	0	; select bank0
  5842  0121  00E2               	movwf	??_RTXUpdateDisplay
  5843  0122  0021               	movlb	1	; select bank1
  5844  0123  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  5845  0124  3ECE               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  5846  0125  0086               	movwf	6
  5847  0126  0187               	clrf	7
  5848  0127  0020               	movlb	0	; select bank0
  5849  0128  0862               	movf	??_RTXUpdateDisplay,w
  5850  0129  0081               	movwf	1
  5851  012A  3001               	movlw	1
  5852  012B  00E2               	movwf	??_RTXUpdateDisplay
  5853  012C  0862               	movf	??_RTXUpdateDisplay,w
  5854  012D  0021               	movlb	1	; select bank1
  5855  012E  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  5856                           
  5857                           ;RTX.c: 172: strRow1[iR++]='i';
  5858  012F  3069               	movlw	105
  5859  0130  0020               	movlb	0	; select bank0
  5860  0131  00E2               	movwf	??_RTXUpdateDisplay
  5861  0132  0021               	movlb	1	; select bank1
  5862  0133  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  5863  0134  3ECE               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  5864  0135  0086               	movwf	6
  5865  0136  0187               	clrf	7
  5866  0137  0020               	movlb	0	; select bank0
  5867  0138  0862               	movf	??_RTXUpdateDisplay,w
  5868  0139  0081               	movwf	1
  5869  013A  3001               	movlw	1
  5870  013B  00E2               	movwf	??_RTXUpdateDisplay
  5871  013C  0862               	movf	??_RTXUpdateDisplay,w
  5872  013D  0021               	movlb	1	; select bank1
  5873  013E  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  5874                           
  5875                           ;RTX.c: 173: strRow1[iR++]='o';
  5876  013F  306F               	movlw	111
  5877  0140  0020               	movlb	0	; select bank0
  5878  0141  00E2               	movwf	??_RTXUpdateDisplay
  5879  0142  0021               	movlb	1	; select bank1
  5880  0143  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  5881  0144  3ECE               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  5882  0145  0086               	movwf	6
  5883  0146  0187               	clrf	7
  5884  0147  0020               	movlb	0	; select bank0
  5885  0148  0862               	movf	??_RTXUpdateDisplay,w
  5886  0149  0081               	movwf	1
  5887  014A  3001               	movlw	1
  5888  014B  00E2               	movwf	??_RTXUpdateDisplay
  5889  014C  0862               	movf	??_RTXUpdateDisplay,w
  5890  014D  0021               	movlb	1	; select bank1
  5891  014E  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  5892                           
  5893                           ;RTX.c: 174: strRow1[iR++]='n';
  5894  014F  306E               	movlw	110
  5895  0150  0020               	movlb	0	; select bank0
  5896  0151  00E2               	movwf	??_RTXUpdateDisplay
  5897  0152  0021               	movlb	1	; select bank1
  5898  0153  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  5899  0154  3ECE               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  5900  0155  0086               	movwf	6
  5901  0156  0187               	clrf	7
  5902  0157  0020               	movlb	0	; select bank0
  5903  0158  0862               	movf	??_RTXUpdateDisplay,w
  5904  0159  0081               	movwf	1
  5905  015A  3001               	movlw	1
  5906  015B  00E2               	movwf	??_RTXUpdateDisplay
  5907  015C  0862               	movf	??_RTXUpdateDisplay,w
  5908  015D  0021               	movlb	1	; select bank1
  5909  015E  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  5910                           
  5911                           ;RTX.c: 175: strRow1[iR++]='e';
  5912  015F  3065               	movlw	101
  5913  0160  0020               	movlb	0	; select bank0
  5914  0161  00E2               	movwf	??_RTXUpdateDisplay
  5915  0162  0021               	movlb	1	; select bank1
  5916  0163  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  5917  0164  3ECE               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  5918  0165  0086               	movwf	6
  5919  0166  0187               	clrf	7
  5920  0167  0020               	movlb	0	; select bank0
  5921  0168  0862               	movf	??_RTXUpdateDisplay,w
  5922  0169  0081               	movwf	1
  5923  016A  3001               	movlw	1
  5924  016B  00E2               	movwf	??_RTXUpdateDisplay
  5925  016C  0862               	movf	??_RTXUpdateDisplay,w
  5926  016D  0021               	movlb	1	; select bank1
  5927  016E  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  5928                           
  5929                           ;RTX.c: 176: strRow1[iR++]=':';
  5930  016F  303A               	movlw	58
  5931  0170  0020               	movlb	0	; select bank0
  5932  0171  00E2               	movwf	??_RTXUpdateDisplay
  5933  0172  0021               	movlb	1	; select bank1
  5934  0173  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  5935  0174  3ECE               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  5936  0175  0086               	movwf	6
  5937  0176  0187               	clrf	7
  5938  0177  0020               	movlb	0	; select bank0
  5939  0178  0862               	movf	??_RTXUpdateDisplay,w
  5940  0179  0081               	movwf	1
  5941  017A  3001               	movlw	1
  5942  017B  00E2               	movwf	??_RTXUpdateDisplay
  5943  017C  0862               	movf	??_RTXUpdateDisplay,w
  5944  017D  0021               	movlb	1	; select bank1
  5945  017E  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  5946                           
  5947                           ;RTX.c: 177: if(val==UPD_DPY_PGMRST)
  5948  017F  3006               	movlw	6
  5949  0180  065F               	xorwf	RTXUpdateDisplay@val^(0+128),w
  5950  0181  1D03               	btfss	3,2
  5951  0182  29CB               	goto	l5483
  5952                           
  5953                           ;RTX.c: 178: {
  5954                           ;RTX.c: 179: iR=5;
  5955  0183  3005               	movlw	5
  5956  0184  0020               	movlb	0	; select bank0
  5957  0185  00E2               	movwf	??_RTXUpdateDisplay
  5958  0186  0862               	movf	??_RTXUpdateDisplay,w
  5959  0187  0021               	movlb	1	; select bank1
  5960  0188  00E0               	movwf	RTXUpdateDisplay@iR^(0+128)
  5961                           
  5962                           ;RTX.c: 180: strRow2[iR++]='R';
  5963  0189  3052               	movlw	82
  5964  018A  0020               	movlb	0	; select bank0
  5965  018B  00E2               	movwf	??_RTXUpdateDisplay
  5966  018C  0021               	movlb	1	; select bank1
  5967  018D  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  5968  018E  3EBE               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  5969  018F  0086               	movwf	6
  5970  0190  0187               	clrf	7
  5971  0191  0020               	movlb	0	; select bank0
  5972  0192  0862               	movf	??_RTXUpdateDisplay,w
  5973  0193  0081               	movwf	1
  5974  0194  3001               	movlw	1
  5975  0195  00E2               	movwf	??_RTXUpdateDisplay
  5976  0196  0862               	movf	??_RTXUpdateDisplay,w
  5977  0197  0021               	movlb	1	; select bank1
  5978  0198  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  5979                           
  5980                           ;RTX.c: 181: strRow2[iR++]='E';
  5981  0199  3045               	movlw	69
  5982  019A  0020               	movlb	0	; select bank0
  5983  019B  00E2               	movwf	??_RTXUpdateDisplay
  5984  019C  0021               	movlb	1	; select bank1
  5985  019D  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  5986  019E  3EBE               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  5987  019F  0086               	movwf	6
  5988  01A0  0187               	clrf	7
  5989  01A1  0020               	movlb	0	; select bank0
  5990  01A2  0862               	movf	??_RTXUpdateDisplay,w
  5991  01A3  0081               	movwf	1
  5992  01A4  3001               	movlw	1
  5993  01A5  00E2               	movwf	??_RTXUpdateDisplay
  5994  01A6  0862               	movf	??_RTXUpdateDisplay,w
  5995  01A7  0021               	movlb	1	; select bank1
  5996  01A8  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  5997                           
  5998                           ;RTX.c: 182: strRow2[iR++]='S';
  5999  01A9  3053               	movlw	83
  6000  01AA  0020               	movlb	0	; select bank0
  6001  01AB  00E2               	movwf	??_RTXUpdateDisplay
  6002  01AC  0021               	movlb	1	; select bank1
  6003  01AD  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6004  01AE  3EBE               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  6005  01AF  0086               	movwf	6
  6006  01B0  0187               	clrf	7
  6007  01B1  0020               	movlb	0	; select bank0
  6008  01B2  0862               	movf	??_RTXUpdateDisplay,w
  6009  01B3  0081               	movwf	1
  6010  01B4  3001               	movlw	1
  6011  01B5  00E2               	movwf	??_RTXUpdateDisplay
  6012  01B6  0862               	movf	??_RTXUpdateDisplay,w
  6013  01B7  0021               	movlb	1	; select bank1
  6014  01B8  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6015                           
  6016                           ;RTX.c: 183: strRow2[iR++]='E';
  6017  01B9  3045               	movlw	69
  6018  01BA  0020               	movlb	0	; select bank0
  6019  01BB  00E2               	movwf	??_RTXUpdateDisplay
  6020  01BC  0021               	movlb	1	; select bank1
  6021  01BD  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6022  01BE  3EBE               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  6023  01BF  0086               	movwf	6
  6024  01C0  0187               	clrf	7
  6025  01C1  0020               	movlb	0	; select bank0
  6026  01C2  0862               	movf	??_RTXUpdateDisplay,w
  6027  01C3  0081               	movwf	1
  6028  01C4  3001               	movlw	1
  6029  01C5  00E2               	movwf	??_RTXUpdateDisplay
  6030  01C6  0862               	movf	??_RTXUpdateDisplay,w
  6031  01C7  0021               	movlb	1	; select bank1
  6032  01C8  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6033                           
  6034                           ;RTX.c: 184: strRow2[iR++]='T';
  6035  01C9  3054               	movlw	84
  6036  01CA  2C82               	goto	L6
  6037  01CB                     l5483:	
  6038                           ;RTX.c: 185: }
  6039                           
  6040                           
  6041                           ;RTX.c: 186: else
  6042                           ;RTX.c: 187: {
  6043                           ;RTX.c: 188: iR=5;
  6044  01CB  3005               	movlw	5
  6045  01CC  0020               	movlb	0	; select bank0
  6046  01CD  00E2               	movwf	??_RTXUpdateDisplay
  6047  01CE  0862               	movf	??_RTXUpdateDisplay,w
  6048  01CF  0021               	movlb	1	; select bank1
  6049  01D0  00E0               	movwf	RTXUpdateDisplay@iR^(0+128)
  6050                           
  6051                           ;RTX.c: 189: strRow2[iR++]='I';
  6052  01D1  3049               	movlw	73
  6053  01D2  0020               	movlb	0	; select bank0
  6054  01D3  00E2               	movwf	??_RTXUpdateDisplay
  6055  01D4  0021               	movlb	1	; select bank1
  6056  01D5  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6057  01D6  3EBE               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  6058  01D7  0086               	movwf	6
  6059  01D8  0187               	clrf	7
  6060  01D9  0020               	movlb	0	; select bank0
  6061  01DA  0862               	movf	??_RTXUpdateDisplay,w
  6062  01DB  0081               	movwf	1
  6063  01DC  3001               	movlw	1
  6064  01DD  00E2               	movwf	??_RTXUpdateDisplay
  6065  01DE  0862               	movf	??_RTXUpdateDisplay,w
  6066  01DF  0021               	movlb	1	; select bank1
  6067  01E0  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6068                           
  6069                           ;RTX.c: 190: strRow2[iR++]='D';
  6070  01E1  3044               	movlw	68
  6071  01E2  0020               	movlb	0	; select bank0
  6072  01E3  00E2               	movwf	??_RTXUpdateDisplay
  6073  01E4  0021               	movlb	1	; select bank1
  6074  01E5  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6075  01E6  3EBE               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  6076  01E7  0086               	movwf	6
  6077  01E8  0187               	clrf	7
  6078  01E9  0020               	movlb	0	; select bank0
  6079  01EA  0862               	movf	??_RTXUpdateDisplay,w
  6080  01EB  0081               	movwf	1
  6081  01EC  3001               	movlw	1
  6082  01ED  00E2               	movwf	??_RTXUpdateDisplay
  6083  01EE  0862               	movf	??_RTXUpdateDisplay,w
  6084  01EF  0021               	movlb	1	; select bank1
  6085  01F0  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6086                           
  6087                           ;RTX.c: 191: strRow2[iR++]=':';
  6088  01F1  303A               	movlw	58
  6089  01F2  0020               	movlb	0	; select bank0
  6090  01F3  00E2               	movwf	??_RTXUpdateDisplay
  6091  01F4  0021               	movlb	1	; select bank1
  6092  01F5  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6093  01F6  3EBE               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  6094  01F7  0086               	movwf	6
  6095  01F8  0187               	clrf	7
  6096  01F9  0020               	movlb	0	; select bank0
  6097  01FA  0862               	movf	??_RTXUpdateDisplay,w
  6098  01FB  0081               	movwf	1
  6099  01FC  3001               	movlw	1
  6100  01FD  00E2               	movwf	??_RTXUpdateDisplay
  6101  01FE  0862               	movf	??_RTXUpdateDisplay,w
  6102  01FF  0021               	movlb	1	; select bank1
  6103  0200  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6104                           
  6105                           ;RTX.c: 192: if(val==UPD_DPY_PGM)
  6106  0201  3002               	movlw	2
  6107  0202  065F               	xorwf	RTXUpdateDisplay@val^(0+128),w
  6108  0203  1D03               	btfss	3,2
  6109  0204  2A27               	goto	l5509
  6110                           
  6111                           ;RTX.c: 193: {
  6112                           ;RTX.c: 194: strRow2[iR++]='?';
  6113  0205  303F               	movlw	63
  6114  0206  0020               	movlb	0	; select bank0
  6115  0207  00E2               	movwf	??_RTXUpdateDisplay
  6116  0208  0021               	movlb	1	; select bank1
  6117  0209  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6118  020A  3EBE               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  6119  020B  0086               	movwf	6
  6120  020C  0187               	clrf	7
  6121  020D  0020               	movlb	0	; select bank0
  6122  020E  0862               	movf	??_RTXUpdateDisplay,w
  6123  020F  0081               	movwf	1
  6124  0210  3001               	movlw	1
  6125  0211  00E2               	movwf	??_RTXUpdateDisplay
  6126  0212  0862               	movf	??_RTXUpdateDisplay,w
  6127  0213  0021               	movlb	1	; select bank1
  6128  0214  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6129                           
  6130                           ;RTX.c: 195: strRow2[iR++]='?';
  6131  0215  303F               	movlw	63
  6132  0216  0020               	movlb	0	; select bank0
  6133  0217  00E2               	movwf	??_RTXUpdateDisplay
  6134  0218  0021               	movlb	1	; select bank1
  6135  0219  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6136  021A  3EBE               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  6137  021B  0086               	movwf	6
  6138  021C  0187               	clrf	7
  6139  021D  0020               	movlb	0	; select bank0
  6140  021E  0862               	movf	??_RTXUpdateDisplay,w
  6141  021F  0081               	movwf	1
  6142  0220  3001               	movlw	1
  6143  0221  00E2               	movwf	??_RTXUpdateDisplay
  6144  0222  0862               	movf	??_RTXUpdateDisplay,w
  6145  0223  0021               	movlb	1	; select bank1
  6146  0224  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6147                           
  6148                           ;RTX.c: 196: strRow2[iR++]='?';
  6149  0225  303F               	movlw	63
  6150  0226  2C82               	goto	L6
  6151  0227                     l5509:	
  6152                           ;RTX.c: 197: }
  6153                           
  6154                           
  6155                           ;RTX.c: 198: else
  6156                           ;RTX.c: 199: {
  6157                           ;RTX.c: 200: if(val==UPD_DPY_PGMDONECURRSENSGEN)
  6158  0227  3003               	movlw	3
  6159  0228  065F               	xorwf	RTXUpdateDisplay@val^(0+128),w
  6160  0229  1D03               	btfss	3,2
  6161  022A  2A2E               	goto	l5513
  6162                           
  6163                           ;RTX.c: 201: itoa(charIdSens,pgm_cfg.gen_curr_sens.id,10);
  6164  022B  0022               	movlb	2	; select bank2
  6165  022C  0849               	movf	(_pgm_cfg^(0+256)+6),w
  6166  022D  2A3D               	goto	L7
  6167  022E                     l5513:	
  6168                           
  6169                           ;RTX.c: 202: else if(val==UPD_DPY_PGMDONECURRSENSCON)
  6170  022E  3004               	movlw	4
  6171  022F  0021               	movlb	1	; select bank1
  6172  0230  065F               	xorwf	RTXUpdateDisplay@val^(0+128),w
  6173  0231  1D03               	btfss	3,2
  6174  0232  2A36               	goto	l5517
  6175                           
  6176                           ;RTX.c: 203: itoa(charIdSens,pgm_cfg.con_curr_sens.id,10);
  6177  0233  0022               	movlb	2	; select bank2
  6178  0234  084B               	movf	(_pgm_cfg^(0+256)+8),w
  6179  0235  2A3D               	goto	L7
  6180  0236                     l5517:	
  6181                           
  6182                           ;RTX.c: 204: else if(val==UPD_DPY_PGMDONEVOLTSENS)
  6183  0236  3005               	movlw	5
  6184  0237  0021               	movlb	1	; select bank1
  6185  0238  065F               	xorwf	RTXUpdateDisplay@val^(0+128),w
  6186  0239  1D03               	btfss	3,2
  6187  023A  2A4C               	goto	l5521
  6188                           
  6189                           ;RTX.c: 205: itoa(charIdSens,pgm_cfg.volt_sens.id,10);
  6190  023B  0022               	movlb	2	; select bank2
  6191  023C  084D               	movf	(_pgm_cfg^(0+256)+10),w
  6192  023D                     L7:	
  6193  023D  0020               	movlb	0	; select bank0
  6194  023E  00E2               	movwf	??_RTXUpdateDisplay
  6195  023F  01E3               	clrf	??_RTXUpdateDisplay+1
  6196  0240  0862               	movf	??_RTXUpdateDisplay,w
  6197  0241  00A8               	movwf	itoa@val
  6198  0242  0863               	movf	??_RTXUpdateDisplay+1,w
  6199  0243  00A9               	movwf	itoa@val+1
  6200  0244  300A               	movlw	10
  6201  0245  00AA               	movwf	itoa@base
  6202  0246  3000               	movlw	0
  6203  0247  00AB               	movwf	itoa@base+1
  6204  0248  30BA               	movlw	(low (RTXUpdateDisplay@charIdSens| 0))& (0+255)
  6205  0249  3192  22CD  3180   	fcall	_itoa
  6206  024C                     l5521:	
  6207                           
  6208                           ;RTX.c: 206: for(i=0;i<4;i++)
  6209  024C  0021               	movlb	1	; select bank1
  6210  024D  01DE               	clrf	RTXUpdateDisplay@i^(0+128)
  6211  024E                     L8:	
  6212  024E  3004               	movlw	4
  6213  024F  025E               	subwf	RTXUpdateDisplay@i^(0+128),w
  6214  0250  1803               	btfsc	3,0
  6215  0251  2ED3               	goto	l5753
  6216                           
  6217                           ;RTX.c: 207: {
  6218                           ;RTX.c: 208: if(charIdSens[i]==0x00)
  6219  0252  085E               	movf	RTXUpdateDisplay@i^(0+128),w
  6220  0253  3EBA               	addlw	(low (RTXUpdateDisplay@charIdSens| 0))& (0+255)
  6221  0254  0086               	movwf	6
  6222  0255  0187               	clrf	7
  6223  0256  0801               	movf	1,w
  6224  0257  1903               	btfsc	3,2
  6225  0258  2ED3               	goto	l5753
  6226                           
  6227                           ;RTX.c: 210: strRow2[iR++]=charIdSens[i];
  6228                           
  6229                           ;RTX.c: 209: break;
  6230  0259  085E               	movf	RTXUpdateDisplay@i^(0+128),w
  6231  025A  3EBA               	addlw	(low (RTXUpdateDisplay@charIdSens| 0))& (0+255)
  6232  025B  0086               	movwf	6
  6233  025C  0187               	clrf	7
  6234  025D  0801               	movf	1,w
  6235  025E  0020               	movlb	0	; select bank0
  6236  025F  00E2               	movwf	??_RTXUpdateDisplay
  6237  0260  0021               	movlb	1	; select bank1
  6238  0261  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6239  0262  3EBE               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  6240  0263  0086               	movwf	6
  6241  0264  0187               	clrf	7
  6242  0265  0020               	movlb	0	; select bank0
  6243  0266  0862               	movf	??_RTXUpdateDisplay,w
  6244  0267  0081               	movwf	1
  6245  0268  3001               	movlw	1
  6246  0269  00E2               	movwf	??_RTXUpdateDisplay
  6247  026A  0862               	movf	??_RTXUpdateDisplay,w
  6248  026B  0021               	movlb	1	; select bank1
  6249  026C  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6250  026D  3001               	movlw	1
  6251  026E  0020               	movlb	0	; select bank0
  6252  026F  00E2               	movwf	??_RTXUpdateDisplay
  6253  0270  0862               	movf	??_RTXUpdateDisplay,w
  6254  0271  0021               	movlb	1	; select bank1
  6255  0272  07DE               	addwf	RTXUpdateDisplay@i^(0+128),f
  6256  0273  2A4E               	goto	L8
  6257  0274                     l5539:	
  6258                           ;RTX.c: 211: }
  6259                           ;RTX.c: 212: }
  6260                           ;RTX.c: 213: }
  6261                           ;RTX.c: 214: }
  6262                           
  6263                           
  6264                           ;RTX.c: 215: else if(val==UPD_DPY_BATT)
  6265  0274  035F               	decf	RTXUpdateDisplay@val^(0+128),w
  6266  0275  1D03               	btfss	3,2
  6267  0276  2C92               	goto	l5651
  6268                           
  6269                           ;RTX.c: 216: {
  6270                           ;RTX.c: 217: iR=0;
  6271  0277  01E0               	clrf	RTXUpdateDisplay@iR^(0+128)
  6272                           
  6273                           ;RTX.c: 218: strRow1[iR++]='B';
  6274  0278  3042               	movlw	66
  6275  0279  0020               	movlb	0	; select bank0
  6276  027A  00E2               	movwf	??_RTXUpdateDisplay
  6277  027B  0021               	movlb	1	; select bank1
  6278  027C  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6279  027D  3ECE               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  6280  027E  0086               	movwf	6
  6281  027F  0187               	clrf	7
  6282  0280  0020               	movlb	0	; select bank0
  6283  0281  0862               	movf	??_RTXUpdateDisplay,w
  6284  0282  0081               	movwf	1
  6285  0283  3001               	movlw	1
  6286  0284  00E2               	movwf	??_RTXUpdateDisplay
  6287  0285  0862               	movf	??_RTXUpdateDisplay,w
  6288  0286  0021               	movlb	1	; select bank1
  6289  0287  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6290                           
  6291                           ;RTX.c: 219: strRow1[iR++]='a';
  6292  0288  3061               	movlw	97
  6293  0289  0020               	movlb	0	; select bank0
  6294  028A  00E2               	movwf	??_RTXUpdateDisplay
  6295  028B  0021               	movlb	1	; select bank1
  6296  028C  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6297  028D  3ECE               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  6298  028E  0086               	movwf	6
  6299  028F  0187               	clrf	7
  6300  0290  0020               	movlb	0	; select bank0
  6301  0291  0862               	movf	??_RTXUpdateDisplay,w
  6302  0292  0081               	movwf	1
  6303  0293  3001               	movlw	1
  6304  0294  00E2               	movwf	??_RTXUpdateDisplay
  6305  0295  0862               	movf	??_RTXUpdateDisplay,w
  6306  0296  0021               	movlb	1	; select bank1
  6307  0297  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6308                           
  6309                           ;RTX.c: 220: strRow1[iR++]='t';
  6310  0298  3074               	movlw	116
  6311  0299  0020               	movlb	0	; select bank0
  6312  029A  00E2               	movwf	??_RTXUpdateDisplay
  6313  029B  0021               	movlb	1	; select bank1
  6314  029C  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6315  029D  3ECE               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  6316  029E  0086               	movwf	6
  6317  029F  0187               	clrf	7
  6318  02A0  0020               	movlb	0	; select bank0
  6319  02A1  0862               	movf	??_RTXUpdateDisplay,w
  6320  02A2  0081               	movwf	1
  6321  02A3  3001               	movlw	1
  6322  02A4  00E2               	movwf	??_RTXUpdateDisplay
  6323  02A5  0862               	movf	??_RTXUpdateDisplay,w
  6324  02A6  0021               	movlb	1	; select bank1
  6325  02A7  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6326                           
  6327                           ;RTX.c: 221: strRow1[iR++]='t';
  6328  02A8  3074               	movlw	116
  6329  02A9  0020               	movlb	0	; select bank0
  6330  02AA  00E2               	movwf	??_RTXUpdateDisplay
  6331  02AB  0021               	movlb	1	; select bank1
  6332  02AC  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6333  02AD  3ECE               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  6334  02AE  0086               	movwf	6
  6335  02AF  0187               	clrf	7
  6336  02B0  0020               	movlb	0	; select bank0
  6337  02B1  0862               	movf	??_RTXUpdateDisplay,w
  6338  02B2  0081               	movwf	1
  6339  02B3  3001               	movlw	1
  6340  02B4  00E2               	movwf	??_RTXUpdateDisplay
  6341  02B5  0862               	movf	??_RTXUpdateDisplay,w
  6342  02B6  0021               	movlb	1	; select bank1
  6343  02B7  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6344                           
  6345                           ;RTX.c: 222: strRow1[iR++]='.';
  6346  02B8  302E               	movlw	46
  6347  02B9  0020               	movlb	0	; select bank0
  6348  02BA  00E2               	movwf	??_RTXUpdateDisplay
  6349  02BB  0021               	movlb	1	; select bank1
  6350  02BC  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6351  02BD  3ECE               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  6352  02BE  0086               	movwf	6
  6353  02BF  0187               	clrf	7
  6354  02C0  0020               	movlb	0	; select bank0
  6355  02C1  0862               	movf	??_RTXUpdateDisplay,w
  6356  02C2  0081               	movwf	1
  6357  02C3  3001               	movlw	1
  6358  02C4  00E2               	movwf	??_RTXUpdateDisplay
  6359  02C5  0862               	movf	??_RTXUpdateDisplay,w
  6360  02C6  0021               	movlb	1	; select bank1
  6361  02C7  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6362                           
  6363                           ;RTX.c: 223: strRow1[iR++]=':';
  6364  02C8  303A               	movlw	58
  6365  02C9  0020               	movlb	0	; select bank0
  6366  02CA  00E2               	movwf	??_RTXUpdateDisplay
  6367  02CB  0021               	movlb	1	; select bank1
  6368  02CC  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6369  02CD  3ECE               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  6370  02CE  0086               	movwf	6
  6371  02CF  0187               	clrf	7
  6372  02D0  0020               	movlb	0	; select bank0
  6373  02D1  0862               	movf	??_RTXUpdateDisplay,w
  6374  02D2  0081               	movwf	1
  6375  02D3  3001               	movlw	1
  6376  02D4  00E2               	movwf	??_RTXUpdateDisplay
  6377  02D5  0862               	movf	??_RTXUpdateDisplay,w
  6378  02D6  0021               	movlb	1	; select bank1
  6379  02D7  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6380                           
  6381                           ;RTX.c: 224: strRow1[iR++]=' ';
  6382  02D8  3020               	movlw	32
  6383  02D9  0020               	movlb	0	; select bank0
  6384  02DA  00E2               	movwf	??_RTXUpdateDisplay
  6385  02DB  0021               	movlb	1	; select bank1
  6386  02DC  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6387  02DD  3ECE               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  6388  02DE  0086               	movwf	6
  6389  02DF  0187               	clrf	7
  6390  02E0  0020               	movlb	0	; select bank0
  6391  02E1  0862               	movf	??_RTXUpdateDisplay,w
  6392  02E2  0081               	movwf	1
  6393  02E3  3001               	movlw	1
  6394  02E4  00E2               	movwf	??_RTXUpdateDisplay
  6395  02E5  0862               	movf	??_RTXUpdateDisplay,w
  6396  02E6  0021               	movlb	1	; select bank1
  6397  02E7  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6398                           
  6399                           ;RTX.c: 227: strRow1[iR++]='C';
  6400  02E8  3043               	movlw	67
  6401  02E9  0020               	movlb	0	; select bank0
  6402  02EA  00E2               	movwf	??_RTXUpdateDisplay
  6403  02EB  0021               	movlb	1	; select bank1
  6404  02EC  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6405  02ED  3ECE               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  6406  02EE  0086               	movwf	6
  6407  02EF  0187               	clrf	7
  6408  02F0  0020               	movlb	0	; select bank0
  6409  02F1  0862               	movf	??_RTXUpdateDisplay,w
  6410  02F2  0081               	movwf	1
  6411  02F3  3001               	movlw	1
  6412  02F4  00E2               	movwf	??_RTXUpdateDisplay
  6413  02F5  0862               	movf	??_RTXUpdateDisplay,w
  6414  02F6  0021               	movlb	1	; select bank1
  6415  02F7  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6416                           
  6417                           ;RTX.c: 228: strRow1[iR++]='=';
  6418  02F8  303D               	movlw	61
  6419  02F9  0020               	movlb	0	; select bank0
  6420  02FA  00E2               	movwf	??_RTXUpdateDisplay
  6421  02FB  0021               	movlb	1	; select bank1
  6422  02FC  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6423  02FD  3ECE               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  6424  02FE  0086               	movwf	6
  6425  02FF  0187               	clrf	7
  6426  0300  0020               	movlb	0	; select bank0
  6427  0301  0862               	movf	??_RTXUpdateDisplay,w
  6428  0302  0081               	movwf	1
  6429  0303  3001               	movlw	1
  6430  0304  00E2               	movwf	??_RTXUpdateDisplay
  6431  0305  0862               	movf	??_RTXUpdateDisplay,w
  6432  0306  0021               	movlb	1	; select bank1
  6433  0307  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6434                           
  6435                           ;RTX.c: 229: if(pgm_cfg.menu.con_curr_sensIsProg)
  6436  0308  0022               	movlb	2	; select bank2
  6437  0309  1CC5               	btfss	(_pgm_cfg^(0+256)+2),1
  6438  030A  2B30               	goto	l5585
  6439                           
  6440                           ;RTX.c: 230: iR=RTXVisDec(batt_con_curr_sens,strRow1,3,iR++)+1;
  6441  030B  0820               	movf	_batt_con_curr_sens^(0+256),w
  6442  030C  0020               	movlb	0	; select bank0
  6443  030D  00D7               	movwf	RTXVisDec@val
  6444  030E  0022               	movlb	2	; select bank2
  6445  030F  0821               	movf	(_batt_con_curr_sens+1)^(0+256),w
  6446  0310  0020               	movlb	0	; select bank0
  6447  0311  00D8               	movwf	RTXVisDec@val+1
  6448  0312  0022               	movlb	2	; select bank2
  6449  0313  0822               	movf	(_batt_con_curr_sens+2)^(0+256),w
  6450  0314  0020               	movlb	0	; select bank0
  6451  0315  00D9               	movwf	RTXVisDec@val+2
  6452  0316  30CE               	movlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  6453  0317  00E2               	movwf	??_RTXUpdateDisplay
  6454  0318  0862               	movf	??_RTXUpdateDisplay,w
  6455  0319  00DA               	movwf	RTXVisDec@buff
  6456  031A  3003               	movlw	3
  6457  031B  00E3               	movwf	??_RTXUpdateDisplay+1
  6458  031C  0863               	movf	??_RTXUpdateDisplay+1,w
  6459  031D  00DB               	movwf	RTXVisDec@maxDigit
  6460  031E  0021               	movlb	1	; select bank1
  6461  031F  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6462  0320  0020               	movlb	0	; select bank0
  6463  0321  00E4               	movwf	??_RTXUpdateDisplay+2
  6464  0322  0864               	movf	??_RTXUpdateDisplay+2,w
  6465  0323  00DC               	movwf	RTXVisDec@offset
  6466  0324  318A  226E  3180   	fcall	_RTXVisDec
  6467  0327  3E01               	addlw	1
  6468  0328  0020               	movlb	0	; select bank0
  6469  0329  00E5               	movwf	??_RTXUpdateDisplay+3
  6470  032A  0865               	movf	??_RTXUpdateDisplay+3,w
  6471  032B  0021               	movlb	1	; select bank1
  6472  032C  00E0               	movwf	RTXUpdateDisplay@iR^(0+128)
  6473  032D  3001               	movlw	1
  6474  032E  0020               	movlb	0	; select bank0
  6475  032F  2B5C               	goto	L3
  6476  0330                     l5585:	
  6477                           
  6478                           ;RTX.c: 231: else
  6479                           ;RTX.c: 232: {
  6480                           ;RTX.c: 233: strRow1[iR++]='?';
  6481  0330  303F               	movlw	63
  6482  0331  0020               	movlb	0	; select bank0
  6483  0332  00E2               	movwf	??_RTXUpdateDisplay
  6484  0333  0021               	movlb	1	; select bank1
  6485  0334  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6486  0335  3ECE               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  6487  0336  0086               	movwf	6
  6488  0337  0187               	clrf	7
  6489  0338  0020               	movlb	0	; select bank0
  6490  0339  0862               	movf	??_RTXUpdateDisplay,w
  6491  033A  0081               	movwf	1
  6492  033B  3001               	movlw	1
  6493  033C  00E2               	movwf	??_RTXUpdateDisplay
  6494  033D  0862               	movf	??_RTXUpdateDisplay,w
  6495  033E  0021               	movlb	1	; select bank1
  6496  033F  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6497                           
  6498                           ;RTX.c: 234: strRow1[iR++]='.';
  6499  0340  302E               	movlw	46
  6500  0341  0020               	movlb	0	; select bank0
  6501  0342  00E2               	movwf	??_RTXUpdateDisplay
  6502  0343  0021               	movlb	1	; select bank1
  6503  0344  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6504  0345  3ECE               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  6505  0346  0086               	movwf	6
  6506  0347  0187               	clrf	7
  6507  0348  0020               	movlb	0	; select bank0
  6508  0349  0862               	movf	??_RTXUpdateDisplay,w
  6509  034A  0081               	movwf	1
  6510  034B  3001               	movlw	1
  6511  034C  00E2               	movwf	??_RTXUpdateDisplay
  6512  034D  0862               	movf	??_RTXUpdateDisplay,w
  6513  034E  0021               	movlb	1	; select bank1
  6514  034F  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6515                           
  6516                           ;RTX.c: 235: strRow1[iR++]='?';
  6517  0350  303F               	movlw	63
  6518  0351  0020               	movlb	0	; select bank0
  6519  0352  00E2               	movwf	??_RTXUpdateDisplay
  6520  0353  0021               	movlb	1	; select bank1
  6521  0354  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6522  0355  3ECE               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  6523  0356  0086               	movwf	6
  6524  0357  0187               	clrf	7
  6525  0358  0020               	movlb	0	; select bank0
  6526  0359  0862               	movf	??_RTXUpdateDisplay,w
  6527  035A  0081               	movwf	1
  6528  035B  3001               	movlw	1
  6529  035C                     L3:	
  6530  035C  00E2               	movwf	??_RTXUpdateDisplay
  6531  035D  0862               	movf	??_RTXUpdateDisplay,w
  6532  035E  0021               	movlb	1	; select bank1
  6533  035F  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6534                           
  6535                           ;RTX.c: 236: }
  6536                           ;RTX.c: 238: strRow1[iR++]='V';
  6537  0360  3056               	movlw	86
  6538  0361  0020               	movlb	0	; select bank0
  6539  0362  00E2               	movwf	??_RTXUpdateDisplay
  6540  0363  0021               	movlb	1	; select bank1
  6541  0364  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6542  0365  3ECE               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  6543  0366  0086               	movwf	6
  6544  0367  0187               	clrf	7
  6545  0368  0020               	movlb	0	; select bank0
  6546  0369  0862               	movf	??_RTXUpdateDisplay,w
  6547  036A  0081               	movwf	1
  6548  036B  3001               	movlw	1
  6549  036C  00E2               	movwf	??_RTXUpdateDisplay
  6550  036D  0862               	movf	??_RTXUpdateDisplay,w
  6551  036E  0021               	movlb	1	; select bank1
  6552  036F  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6553                           
  6554                           ;RTX.c: 241: iR=0;
  6555  0370  01E0               	clrf	RTXUpdateDisplay@iR^(0+128)
  6556                           
  6557                           ;RTX.c: 242: strRow2[iR++]='P';
  6558  0371  3050               	movlw	80
  6559  0372  0020               	movlb	0	; select bank0
  6560  0373  00E2               	movwf	??_RTXUpdateDisplay
  6561  0374  0021               	movlb	1	; select bank1
  6562  0375  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6563  0376  3EBE               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  6564  0377  0086               	movwf	6
  6565  0378  0187               	clrf	7
  6566  0379  0020               	movlb	0	; select bank0
  6567  037A  0862               	movf	??_RTXUpdateDisplay,w
  6568  037B  0081               	movwf	1
  6569  037C  3001               	movlw	1
  6570  037D  00E2               	movwf	??_RTXUpdateDisplay
  6571  037E  0862               	movf	??_RTXUpdateDisplay,w
  6572  037F  0021               	movlb	1	; select bank1
  6573  0380  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6574                           
  6575                           ;RTX.c: 243: strRow2[iR++]='=';
  6576  0381  303D               	movlw	61
  6577  0382  0020               	movlb	0	; select bank0
  6578  0383  00E2               	movwf	??_RTXUpdateDisplay
  6579  0384  0021               	movlb	1	; select bank1
  6580  0385  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6581  0386  3EBE               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  6582  0387  0086               	movwf	6
  6583  0388  0187               	clrf	7
  6584  0389  0020               	movlb	0	; select bank0
  6585  038A  0862               	movf	??_RTXUpdateDisplay,w
  6586  038B  0081               	movwf	1
  6587  038C  3001               	movlw	1
  6588  038D  00E2               	movwf	??_RTXUpdateDisplay
  6589  038E  0862               	movf	??_RTXUpdateDisplay,w
  6590  038F  0021               	movlb	1	; select bank1
  6591  0390  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6592                           
  6593                           ;RTX.c: 244: if(pgm_cfg.menu.gen_curr_sensIsProg)
  6594  0391  0022               	movlb	2	; select bank2
  6595  0392  1C45               	btfss	(_pgm_cfg^(0+256)+2),0
  6596  0393  2BB9               	goto	l5613
  6597                           
  6598                           ;RTX.c: 245: iR=RTXVisDec(batt_gen_curr_sens,strRow2,3,iR++)+1;
  6599  0394  0823               	movf	_batt_gen_curr_sens^(0+256),w
  6600  0395  0020               	movlb	0	; select bank0
  6601  0396  00D7               	movwf	RTXVisDec@val
  6602  0397  0022               	movlb	2	; select bank2
  6603  0398  0824               	movf	(_batt_gen_curr_sens+1)^(0+256),w
  6604  0399  0020               	movlb	0	; select bank0
  6605  039A  00D8               	movwf	RTXVisDec@val+1
  6606  039B  0022               	movlb	2	; select bank2
  6607  039C  0825               	movf	(_batt_gen_curr_sens+2)^(0+256),w
  6608  039D  0020               	movlb	0	; select bank0
  6609  039E  00D9               	movwf	RTXVisDec@val+2
  6610  039F  30BE               	movlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  6611  03A0  00E2               	movwf	??_RTXUpdateDisplay
  6612  03A1  0862               	movf	??_RTXUpdateDisplay,w
  6613  03A2  00DA               	movwf	RTXVisDec@buff
  6614  03A3  3003               	movlw	3
  6615  03A4  00E3               	movwf	??_RTXUpdateDisplay+1
  6616  03A5  0863               	movf	??_RTXUpdateDisplay+1,w
  6617  03A6  00DB               	movwf	RTXVisDec@maxDigit
  6618  03A7  0021               	movlb	1	; select bank1
  6619  03A8  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6620  03A9  0020               	movlb	0	; select bank0
  6621  03AA  00E4               	movwf	??_RTXUpdateDisplay+2
  6622  03AB  0864               	movf	??_RTXUpdateDisplay+2,w
  6623  03AC  00DC               	movwf	RTXVisDec@offset
  6624  03AD  318A  226E  3180   	fcall	_RTXVisDec
  6625  03B0  3E01               	addlw	1
  6626  03B1  0020               	movlb	0	; select bank0
  6627  03B2  00E5               	movwf	??_RTXUpdateDisplay+3
  6628  03B3  0865               	movf	??_RTXUpdateDisplay+3,w
  6629  03B4  0021               	movlb	1	; select bank1
  6630  03B5  00E0               	movwf	RTXUpdateDisplay@iR^(0+128)
  6631  03B6  3001               	movlw	1
  6632  03B7  0020               	movlb	0	; select bank0
  6633  03B8  2BE5               	goto	L4
  6634  03B9                     l5613:	
  6635                           
  6636                           ;RTX.c: 246: else
  6637                           ;RTX.c: 247: {
  6638                           ;RTX.c: 248: strRow2[iR++]='?';
  6639  03B9  303F               	movlw	63
  6640  03BA  0020               	movlb	0	; select bank0
  6641  03BB  00E2               	movwf	??_RTXUpdateDisplay
  6642  03BC  0021               	movlb	1	; select bank1
  6643  03BD  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6644  03BE  3EBE               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  6645  03BF  0086               	movwf	6
  6646  03C0  0187               	clrf	7
  6647  03C1  0020               	movlb	0	; select bank0
  6648  03C2  0862               	movf	??_RTXUpdateDisplay,w
  6649  03C3  0081               	movwf	1
  6650  03C4  3001               	movlw	1
  6651  03C5  00E2               	movwf	??_RTXUpdateDisplay
  6652  03C6  0862               	movf	??_RTXUpdateDisplay,w
  6653  03C7  0021               	movlb	1	; select bank1
  6654  03C8  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6655                           
  6656                           ;RTX.c: 249: strRow2[iR++]='.';
  6657  03C9  302E               	movlw	46
  6658  03CA  0020               	movlb	0	; select bank0
  6659  03CB  00E2               	movwf	??_RTXUpdateDisplay
  6660  03CC  0021               	movlb	1	; select bank1
  6661  03CD  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6662  03CE  3EBE               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  6663  03CF  0086               	movwf	6
  6664  03D0  0187               	clrf	7
  6665  03D1  0020               	movlb	0	; select bank0
  6666  03D2  0862               	movf	??_RTXUpdateDisplay,w
  6667  03D3  0081               	movwf	1
  6668  03D4  3001               	movlw	1
  6669  03D5  00E2               	movwf	??_RTXUpdateDisplay
  6670  03D6  0862               	movf	??_RTXUpdateDisplay,w
  6671  03D7  0021               	movlb	1	; select bank1
  6672  03D8  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6673                           
  6674                           ;RTX.c: 250: strRow2[iR++]='?';
  6675  03D9  303F               	movlw	63
  6676  03DA  0020               	movlb	0	; select bank0
  6677  03DB  00E2               	movwf	??_RTXUpdateDisplay
  6678  03DC  0021               	movlb	1	; select bank1
  6679  03DD  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6680  03DE  3EBE               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  6681  03DF  0086               	movwf	6
  6682  03E0  0187               	clrf	7
  6683  03E1  0020               	movlb	0	; select bank0
  6684  03E2  0862               	movf	??_RTXUpdateDisplay,w
  6685  03E3  0081               	movwf	1
  6686  03E4  3001               	movlw	1
  6687  03E5                     L4:	
  6688  03E5  00E2               	movwf	??_RTXUpdateDisplay
  6689  03E6  0862               	movf	??_RTXUpdateDisplay,w
  6690  03E7  0021               	movlb	1	; select bank1
  6691  03E8  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6692                           
  6693                           ;RTX.c: 251: }
  6694                           ;RTX.c: 253: strRow2[iR++]='V';
  6695  03E9  3056               	movlw	86
  6696  03EA  0020               	movlb	0	; select bank0
  6697  03EB  00E2               	movwf	??_RTXUpdateDisplay
  6698  03EC  0021               	movlb	1	; select bank1
  6699  03ED  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6700  03EE  3EBE               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  6701  03EF  0086               	movwf	6
  6702  03F0  0187               	clrf	7
  6703  03F1  0020               	movlb	0	; select bank0
  6704  03F2  0862               	movf	??_RTXUpdateDisplay,w
  6705  03F3  0081               	movwf	1
  6706  03F4  3001               	movlw	1
  6707  03F5  00E2               	movwf	??_RTXUpdateDisplay
  6708  03F6  0862               	movf	??_RTXUpdateDisplay,w
  6709  03F7  0021               	movlb	1	; select bank1
  6710  03F8  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6711                           
  6712                           ;RTX.c: 256: strRow2[iR++]=' ';
  6713  03F9  3020               	movlw	32
  6714  03FA  0020               	movlb	0	; select bank0
  6715  03FB  00E2               	movwf	??_RTXUpdateDisplay
  6716  03FC  0021               	movlb	1	; select bank1
  6717  03FD  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6718  03FE  3EBE               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  6719  03FF  0086               	movwf	6
  6720  0400  0187               	clrf	7
  6721  0401  0020               	movlb	0	; select bank0
  6722  0402  0862               	movf	??_RTXUpdateDisplay,w
  6723  0403  0081               	movwf	1
  6724  0404  3001               	movlw	1
  6725  0405  00E2               	movwf	??_RTXUpdateDisplay
  6726  0406  0862               	movf	??_RTXUpdateDisplay,w
  6727  0407  0021               	movlb	1	; select bank1
  6728  0408  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6729                           
  6730                           ;RTX.c: 257: strRow2[iR++]='V';
  6731  0409  3056               	movlw	86
  6732  040A  0020               	movlb	0	; select bank0
  6733  040B  00E2               	movwf	??_RTXUpdateDisplay
  6734  040C  0021               	movlb	1	; select bank1
  6735  040D  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6736  040E  3EBE               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  6737  040F  0086               	movwf	6
  6738  0410  0187               	clrf	7
  6739  0411  0020               	movlb	0	; select bank0
  6740  0412  0862               	movf	??_RTXUpdateDisplay,w
  6741  0413  0081               	movwf	1
  6742  0414  3001               	movlw	1
  6743  0415  00E2               	movwf	??_RTXUpdateDisplay
  6744  0416  0862               	movf	??_RTXUpdateDisplay,w
  6745  0417  0021               	movlb	1	; select bank1
  6746  0418  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6747                           
  6748                           ;RTX.c: 258: strRow2[iR++]='=';
  6749  0419  303D               	movlw	61
  6750  041A  0020               	movlb	0	; select bank0
  6751  041B  00E2               	movwf	??_RTXUpdateDisplay
  6752  041C  0021               	movlb	1	; select bank1
  6753  041D  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6754  041E  3EBE               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  6755  041F  0086               	movwf	6
  6756  0420  0187               	clrf	7
  6757  0421  0020               	movlb	0	; select bank0
  6758  0422  0862               	movf	??_RTXUpdateDisplay,w
  6759  0423  0081               	movwf	1
  6760  0424  3001               	movlw	1
  6761  0425  00E2               	movwf	??_RTXUpdateDisplay
  6762  0426  0862               	movf	??_RTXUpdateDisplay,w
  6763  0427  0021               	movlb	1	; select bank1
  6764  0428  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6765                           
  6766                           ;RTX.c: 259: if(pgm_cfg.menu.volt_sensIsProg)
  6767  0429  0022               	movlb	2	; select bank2
  6768  042A  1D45               	btfss	(_pgm_cfg^(0+256)+2),2
  6769  042B  2C51               	goto	l5639
  6770                           
  6771                           ;RTX.c: 260: iR=RTXVisDec(volt_sens,strRow2,3,iR++)+1;
  6772  042C  0835               	movf	_volt_sens^(0+256),w
  6773  042D  0020               	movlb	0	; select bank0
  6774  042E  00D7               	movwf	RTXVisDec@val
  6775  042F  0022               	movlb	2	; select bank2
  6776  0430  0836               	movf	(_volt_sens+1)^(0+256),w
  6777  0431  0020               	movlb	0	; select bank0
  6778  0432  00D8               	movwf	RTXVisDec@val+1
  6779  0433  0022               	movlb	2	; select bank2
  6780  0434  0837               	movf	(_volt_sens+2)^(0+256),w
  6781  0435  0020               	movlb	0	; select bank0
  6782  0436  00D9               	movwf	RTXVisDec@val+2
  6783  0437  30BE               	movlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  6784  0438  00E2               	movwf	??_RTXUpdateDisplay
  6785  0439  0862               	movf	??_RTXUpdateDisplay,w
  6786  043A  00DA               	movwf	RTXVisDec@buff
  6787  043B  3003               	movlw	3
  6788  043C  00E3               	movwf	??_RTXUpdateDisplay+1
  6789  043D  0863               	movf	??_RTXUpdateDisplay+1,w
  6790  043E  00DB               	movwf	RTXVisDec@maxDigit
  6791  043F  0021               	movlb	1	; select bank1
  6792  0440  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6793  0441  0020               	movlb	0	; select bank0
  6794  0442  00E4               	movwf	??_RTXUpdateDisplay+2
  6795  0443  0864               	movf	??_RTXUpdateDisplay+2,w
  6796  0444  00DC               	movwf	RTXVisDec@offset
  6797  0445  318A  226E  3180   	fcall	_RTXVisDec
  6798  0448  3E01               	addlw	1
  6799  0449  0020               	movlb	0	; select bank0
  6800  044A  00E5               	movwf	??_RTXUpdateDisplay+3
  6801  044B  0865               	movf	??_RTXUpdateDisplay+3,w
  6802  044C  0021               	movlb	1	; select bank1
  6803  044D  00E0               	movwf	RTXUpdateDisplay@iR^(0+128)
  6804  044E  3001               	movlw	1
  6805  044F  0020               	movlb	0	; select bank0
  6806  0450  2C7D               	goto	L5
  6807  0451                     l5639:	
  6808                           
  6809                           ;RTX.c: 261: else
  6810                           ;RTX.c: 262: {
  6811                           ;RTX.c: 263: strRow2[iR++]='?';
  6812  0451  303F               	movlw	63
  6813  0452  0020               	movlb	0	; select bank0
  6814  0453  00E2               	movwf	??_RTXUpdateDisplay
  6815  0454  0021               	movlb	1	; select bank1
  6816  0455  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6817  0456  3EBE               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  6818  0457  0086               	movwf	6
  6819  0458  0187               	clrf	7
  6820  0459  0020               	movlb	0	; select bank0
  6821  045A  0862               	movf	??_RTXUpdateDisplay,w
  6822  045B  0081               	movwf	1
  6823  045C  3001               	movlw	1
  6824  045D  00E2               	movwf	??_RTXUpdateDisplay
  6825  045E  0862               	movf	??_RTXUpdateDisplay,w
  6826  045F  0021               	movlb	1	; select bank1
  6827  0460  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6828                           
  6829                           ;RTX.c: 264: strRow2[iR++]='.';
  6830  0461  302E               	movlw	46
  6831  0462  0020               	movlb	0	; select bank0
  6832  0463  00E2               	movwf	??_RTXUpdateDisplay
  6833  0464  0021               	movlb	1	; select bank1
  6834  0465  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6835  0466  3EBE               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  6836  0467  0086               	movwf	6
  6837  0468  0187               	clrf	7
  6838  0469  0020               	movlb	0	; select bank0
  6839  046A  0862               	movf	??_RTXUpdateDisplay,w
  6840  046B  0081               	movwf	1
  6841  046C  3001               	movlw	1
  6842  046D  00E2               	movwf	??_RTXUpdateDisplay
  6843  046E  0862               	movf	??_RTXUpdateDisplay,w
  6844  046F  0021               	movlb	1	; select bank1
  6845  0470  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6846                           
  6847                           ;RTX.c: 265: strRow2[iR++]='?';
  6848  0471  303F               	movlw	63
  6849  0472  0020               	movlb	0	; select bank0
  6850  0473  00E2               	movwf	??_RTXUpdateDisplay
  6851  0474  0021               	movlb	1	; select bank1
  6852  0475  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6853  0476  3EBE               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  6854  0477  0086               	movwf	6
  6855  0478  0187               	clrf	7
  6856  0479  0020               	movlb	0	; select bank0
  6857  047A  0862               	movf	??_RTXUpdateDisplay,w
  6858  047B  0081               	movwf	1
  6859  047C  3001               	movlw	1
  6860  047D                     L5:	
  6861  047D  00E2               	movwf	??_RTXUpdateDisplay
  6862  047E  0862               	movf	??_RTXUpdateDisplay,w
  6863  047F  0021               	movlb	1	; select bank1
  6864  0480  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6865                           
  6866                           ;RTX.c: 266: }
  6867                           ;RTX.c: 268: strRow2[iR++]='V';
  6868  0481  3056               	movlw	86
  6869  0482                     L6:	
  6870  0482  0020               	movlb	0	; select bank0
  6871  0483  00E2               	movwf	??_RTXUpdateDisplay
  6872  0484  0021               	movlb	1	; select bank1
  6873  0485  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6874  0486  3EBE               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  6875  0487  0086               	movwf	6
  6876  0488  0187               	clrf	7
  6877  0489  0020               	movlb	0	; select bank0
  6878  048A  0862               	movf	??_RTXUpdateDisplay,w
  6879  048B  0081               	movwf	1
  6880  048C  3001               	movlw	1
  6881  048D  00E2               	movwf	??_RTXUpdateDisplay
  6882  048E  0862               	movf	??_RTXUpdateDisplay,w
  6883  048F  0021               	movlb	1	; select bank1
  6884  0490  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6885                           
  6886                           ;RTX.c: 269: }
  6887  0491  2ED3               	goto	l5753
  6888  0492                     l5651:	
  6889                           
  6890                           ;RTX.c: 270: else if(val==UPD_DPY_POWER)
  6891  0492  085F               	movf	RTXUpdateDisplay@val^(0+128),w
  6892  0493  1D03               	btfss	3,2
  6893  0494  2ED3               	goto	l5753
  6894                           
  6895                           ;RTX.c: 271: {
  6896                           ;RTX.c: 273: iR=0;
  6897  0495  01E0               	clrf	RTXUpdateDisplay@iR^(0+128)
  6898                           
  6899                           ;RTX.c: 274: strRow1[iR++]='C';
  6900  0496  3043               	movlw	67
  6901  0497  0020               	movlb	0	; select bank0
  6902  0498  00E2               	movwf	??_RTXUpdateDisplay
  6903  0499  0021               	movlb	1	; select bank1
  6904  049A  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6905  049B  3ECE               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  6906  049C  0086               	movwf	6
  6907  049D  0187               	clrf	7
  6908  049E  0020               	movlb	0	; select bank0
  6909  049F  0862               	movf	??_RTXUpdateDisplay,w
  6910  04A0  0081               	movwf	1
  6911  04A1  3001               	movlw	1
  6912  04A2  00E2               	movwf	??_RTXUpdateDisplay
  6913  04A3  0862               	movf	??_RTXUpdateDisplay,w
  6914  04A4  0021               	movlb	1	; select bank1
  6915  04A5  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6916                           
  6917                           ;RTX.c: 275: strRow1[iR++]=':';
  6918  04A6  303A               	movlw	58
  6919  04A7  0020               	movlb	0	; select bank0
  6920  04A8  00E2               	movwf	??_RTXUpdateDisplay
  6921  04A9  0021               	movlb	1	; select bank1
  6922  04AA  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6923  04AB  3ECE               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  6924  04AC  0086               	movwf	6
  6925  04AD  0187               	clrf	7
  6926  04AE  0020               	movlb	0	; select bank0
  6927  04AF  0862               	movf	??_RTXUpdateDisplay,w
  6928  04B0  0081               	movwf	1
  6929  04B1  3001               	movlw	1
  6930  04B2  00E2               	movwf	??_RTXUpdateDisplay
  6931  04B3  0862               	movf	??_RTXUpdateDisplay,w
  6932  04B4  0021               	movlb	1	; select bank1
  6933  04B5  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6934                           
  6935                           ;RTX.c: 276: strRow1[iR++]=' ';
  6936  04B6  3020               	movlw	32
  6937  04B7  0020               	movlb	0	; select bank0
  6938  04B8  00E2               	movwf	??_RTXUpdateDisplay
  6939  04B9  0021               	movlb	1	; select bank1
  6940  04BA  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6941  04BB  3ECE               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  6942  04BC  0086               	movwf	6
  6943  04BD  0187               	clrf	7
  6944  04BE  0020               	movlb	0	; select bank0
  6945  04BF  0862               	movf	??_RTXUpdateDisplay,w
  6946  04C0  0081               	movwf	1
  6947  04C1  3001               	movlw	1
  6948  04C2  00E2               	movwf	??_RTXUpdateDisplay
  6949  04C3  0862               	movf	??_RTXUpdateDisplay,w
  6950  04C4  0021               	movlb	1	; select bank1
  6951  04C5  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6952                           
  6953                           ;RTX.c: 277: if(pgm_cfg.menu.con_curr_sensIsProg)
  6954  04C6  0022               	movlb	2	; select bank2
  6955  04C7  1CC5               	btfss	(_pgm_cfg^(0+256)+2),1
  6956  04C8  2CEC               	goto	l5671
  6957                           
  6958                           ;RTX.c: 278: iR=RTXVisDec(con_power,strRow1,3,iR)+1;
  6959  04C9  082C               	movf	_con_power^(0+256),w
  6960  04CA  0020               	movlb	0	; select bank0
  6961  04CB  00D7               	movwf	RTXVisDec@val
  6962  04CC  0022               	movlb	2	; select bank2
  6963  04CD  082D               	movf	(_con_power+1)^(0+256),w
  6964  04CE  0020               	movlb	0	; select bank0
  6965  04CF  00D8               	movwf	RTXVisDec@val+1
  6966  04D0  0022               	movlb	2	; select bank2
  6967  04D1  082E               	movf	(_con_power+2)^(0+256),w
  6968  04D2  0020               	movlb	0	; select bank0
  6969  04D3  00D9               	movwf	RTXVisDec@val+2
  6970  04D4  30CE               	movlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  6971  04D5  00E2               	movwf	??_RTXUpdateDisplay
  6972  04D6  0862               	movf	??_RTXUpdateDisplay,w
  6973  04D7  00DA               	movwf	RTXVisDec@buff
  6974  04D8  3003               	movlw	3
  6975  04D9  00E3               	movwf	??_RTXUpdateDisplay+1
  6976  04DA  0863               	movf	??_RTXUpdateDisplay+1,w
  6977  04DB  00DB               	movwf	RTXVisDec@maxDigit
  6978  04DC  0021               	movlb	1	; select bank1
  6979  04DD  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6980  04DE  0020               	movlb	0	; select bank0
  6981  04DF  00E4               	movwf	??_RTXUpdateDisplay+2
  6982  04E0  0864               	movf	??_RTXUpdateDisplay+2,w
  6983  04E1  00DC               	movwf	RTXVisDec@offset
  6984  04E2  318A  226E  3180   	fcall	_RTXVisDec
  6985  04E5  3E01               	addlw	1
  6986  04E6  0020               	movlb	0	; select bank0
  6987  04E7  00E5               	movwf	??_RTXUpdateDisplay+3
  6988  04E8  0865               	movf	??_RTXUpdateDisplay+3,w
  6989  04E9  0021               	movlb	1	; select bank1
  6990  04EA  00E0               	movwf	RTXUpdateDisplay@iR^(0+128)
  6991  04EB  2D1C               	goto	l528
  6992  04EC                     l5671:	
  6993                           
  6994                           ;RTX.c: 279: else
  6995                           ;RTX.c: 280: {
  6996                           ;RTX.c: 281: strRow1[iR++]='?';
  6997  04EC  303F               	movlw	63
  6998  04ED  0020               	movlb	0	; select bank0
  6999  04EE  00E2               	movwf	??_RTXUpdateDisplay
  7000  04EF  0021               	movlb	1	; select bank1
  7001  04F0  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  7002  04F1  3ECE               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  7003  04F2  0086               	movwf	6
  7004  04F3  0187               	clrf	7
  7005  04F4  0020               	movlb	0	; select bank0
  7006  04F5  0862               	movf	??_RTXUpdateDisplay,w
  7007  04F6  0081               	movwf	1
  7008  04F7  3001               	movlw	1
  7009  04F8  00E2               	movwf	??_RTXUpdateDisplay
  7010  04F9  0862               	movf	??_RTXUpdateDisplay,w
  7011  04FA  0021               	movlb	1	; select bank1
  7012  04FB  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  7013                           
  7014                           ;RTX.c: 282: strRow1[iR++]='?';
  7015  04FC  303F               	movlw	63
  7016  04FD  0020               	movlb	0	; select bank0
  7017  04FE  00E2               	movwf	??_RTXUpdateDisplay
  7018  04FF  0021               	movlb	1	; select bank1
  7019  0500  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  7020  0501  3ECE               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  7021  0502  0086               	movwf	6
  7022  0503  0187               	clrf	7
  7023  0504  0020               	movlb	0	; select bank0
  7024  0505  0862               	movf	??_RTXUpdateDisplay,w
  7025  0506  0081               	movwf	1
  7026  0507  3001               	movlw	1
  7027  0508  00E2               	movwf	??_RTXUpdateDisplay
  7028  0509  0862               	movf	??_RTXUpdateDisplay,w
  7029  050A  0021               	movlb	1	; select bank1
  7030  050B  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  7031                           
  7032                           ;RTX.c: 283: strRow1[iR++]='?';
  7033  050C  303F               	movlw	63
  7034  050D  0020               	movlb	0	; select bank0
  7035  050E  00E2               	movwf	??_RTXUpdateDisplay
  7036  050F  0021               	movlb	1	; select bank1
  7037  0510  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  7038  0511  3ECE               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  7039  0512  0086               	movwf	6
  7040  0513  0187               	clrf	7
  7041  0514  0020               	movlb	0	; select bank0
  7042  0515  0862               	movf	??_RTXUpdateDisplay,w
  7043  0516  0081               	movwf	1
  7044  0517  3001               	movlw	1
  7045  0518  00E2               	movwf	??_RTXUpdateDisplay
  7046  0519  0862               	movf	??_RTXUpdateDisplay,w
  7047  051A  0021               	movlb	1	; select bank1
  7048  051B  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  7049  051C                     l528:	
  7050                           
  7051                           ;RTX.c: 284: }
  7052                           ;RTX.c: 286: strRow1[iR++]='W';
  7053  051C  3057               	movlw	87
  7054  051D  0020               	movlb	0	; select bank0
  7055  051E  00E2               	movwf	??_RTXUpdateDisplay
  7056  051F  0021               	movlb	1	; select bank1
  7057  0520  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  7058  0521  3ECE               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  7059  0522  0086               	movwf	6
  7060  0523  0187               	clrf	7
  7061  0524  0020               	movlb	0	; select bank0
  7062  0525  0862               	movf	??_RTXUpdateDisplay,w
  7063  0526  0081               	movwf	1
  7064  0527  3001               	movlw	1
  7065  0528  00E2               	movwf	??_RTXUpdateDisplay
  7066  0529  0862               	movf	??_RTXUpdateDisplay,w
  7067  052A  0021               	movlb	1	; select bank1
  7068  052B  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  7069                           
  7070                           ;RTX.c: 287: strRow1[iR++]=' ';
  7071  052C  3020               	movlw	32
  7072  052D  0020               	movlb	0	; select bank0
  7073  052E  00E2               	movwf	??_RTXUpdateDisplay
  7074  052F  0021               	movlb	1	; select bank1
  7075  0530  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  7076  0531  3ECE               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  7077  0532  0086               	movwf	6
  7078  0533  0187               	clrf	7
  7079  0534  0020               	movlb	0	; select bank0
  7080  0535  0862               	movf	??_RTXUpdateDisplay,w
  7081  0536  0081               	movwf	1
  7082  0537  3001               	movlw	1
  7083  0538  00E2               	movwf	??_RTXUpdateDisplay
  7084  0539  0862               	movf	??_RTXUpdateDisplay,w
  7085  053A  0021               	movlb	1	; select bank1
  7086  053B  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  7087                           
  7088                           ;RTX.c: 289: strRow1[iR++]='P';
  7089  053C  3050               	movlw	80
  7090  053D  0020               	movlb	0	; select bank0
  7091  053E  00E2               	movwf	??_RTXUpdateDisplay
  7092  053F  0021               	movlb	1	; select bank1
  7093  0540  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  7094  0541  3ECE               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  7095  0542  0086               	movwf	6
  7096  0543  0187               	clrf	7
  7097  0544  0020               	movlb	0	; select bank0
  7098  0545  0862               	movf	??_RTXUpdateDisplay,w
  7099  0546  0081               	movwf	1
  7100  0547  3001               	movlw	1
  7101  0548  00E2               	movwf	??_RTXUpdateDisplay
  7102  0549  0862               	movf	??_RTXUpdateDisplay,w
  7103  054A  0021               	movlb	1	; select bank1
  7104  054B  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  7105                           
  7106                           ;RTX.c: 290: strRow1[iR++]=':';
  7107  054C  303A               	movlw	58
  7108  054D  0020               	movlb	0	; select bank0
  7109  054E  00E2               	movwf	??_RTXUpdateDisplay
  7110  054F  0021               	movlb	1	; select bank1
  7111  0550  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  7112  0551  3ECE               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  7113  0552  0086               	movwf	6
  7114  0553  0187               	clrf	7
  7115  0554  0020               	movlb	0	; select bank0
  7116  0555  0862               	movf	??_RTXUpdateDisplay,w
  7117  0556  0081               	movwf	1
  7118  0557  3001               	movlw	1
  7119  0558  00E2               	movwf	??_RTXUpdateDisplay
  7120  0559  0862               	movf	??_RTXUpdateDisplay,w
  7121  055A  0021               	movlb	1	; select bank1
  7122  055B  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  7123                           
  7124                           ;RTX.c: 291: strRow1[iR++]=' ';
  7125  055C  3020               	movlw	32
  7126  055D  0020               	movlb	0	; select bank0
  7127  055E  00E2               	movwf	??_RTXUpdateDisplay
  7128  055F  0021               	movlb	1	; select bank1
  7129  0560  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  7130  0561  3ECE               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  7131  0562  0086               	movwf	6
  7132  0563  0187               	clrf	7
  7133  0564  0020               	movlb	0	; select bank0
  7134  0565  0862               	movf	??_RTXUpdateDisplay,w
  7135  0566  0081               	movwf	1
  7136  0567  3001               	movlw	1
  7137  0568  00E2               	movwf	??_RTXUpdateDisplay
  7138  0569  0862               	movf	??_RTXUpdateDisplay,w
  7139  056A  0021               	movlb	1	; select bank1
  7140  056B  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  7141                           
  7142                           ;RTX.c: 292: if(pgm_cfg.menu.gen_curr_sensIsProg)
  7143  056C  0022               	movlb	2	; select bank2
  7144  056D  1C45               	btfss	(_pgm_cfg^(0+256)+2),0
  7145  056E  2D92               	goto	l5697
  7146                           
  7147                           ;RTX.c: 293: iR=RTXVisDec(gen_power,strRow1,3,iR)+1;
  7148  056F  0832               	movf	_gen_power^(0+256),w
  7149  0570  0020               	movlb	0	; select bank0
  7150  0571  00D7               	movwf	RTXVisDec@val
  7151  0572  0022               	movlb	2	; select bank2
  7152  0573  0833               	movf	(_gen_power+1)^(0+256),w
  7153  0574  0020               	movlb	0	; select bank0
  7154  0575  00D8               	movwf	RTXVisDec@val+1
  7155  0576  0022               	movlb	2	; select bank2
  7156  0577  0834               	movf	(_gen_power+2)^(0+256),w
  7157  0578  0020               	movlb	0	; select bank0
  7158  0579  00D9               	movwf	RTXVisDec@val+2
  7159  057A  30CE               	movlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  7160  057B  00E2               	movwf	??_RTXUpdateDisplay
  7161  057C  0862               	movf	??_RTXUpdateDisplay,w
  7162  057D  00DA               	movwf	RTXVisDec@buff
  7163  057E  3003               	movlw	3
  7164  057F  00E3               	movwf	??_RTXUpdateDisplay+1
  7165  0580  0863               	movf	??_RTXUpdateDisplay+1,w
  7166  0581  00DB               	movwf	RTXVisDec@maxDigit
  7167  0582  0021               	movlb	1	; select bank1
  7168  0583  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  7169  0584  0020               	movlb	0	; select bank0
  7170  0585  00E4               	movwf	??_RTXUpdateDisplay+2
  7171  0586  0864               	movf	??_RTXUpdateDisplay+2,w
  7172  0587  00DC               	movwf	RTXVisDec@offset
  7173  0588  318A  226E  3180   	fcall	_RTXVisDec
  7174  058B  3E01               	addlw	1
  7175  058C  0020               	movlb	0	; select bank0
  7176  058D  00E5               	movwf	??_RTXUpdateDisplay+3
  7177  058E  0865               	movf	??_RTXUpdateDisplay+3,w
  7178  058F  0021               	movlb	1	; select bank1
  7179  0590  00E0               	movwf	RTXUpdateDisplay@iR^(0+128)
  7180  0591  2DC2               	goto	l530
  7181  0592                     l5697:	
  7182                           
  7183                           ;RTX.c: 294: else
  7184                           ;RTX.c: 295: {
  7185                           ;RTX.c: 296: strRow1[iR++]='?';
  7186  0592  303F               	movlw	63
  7187  0593  0020               	movlb	0	; select bank0
  7188  0594  00E2               	movwf	??_RTXUpdateDisplay
  7189  0595  0021               	movlb	1	; select bank1
  7190  0596  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  7191  0597  3ECE               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  7192  0598  0086               	movwf	6
  7193  0599  0187               	clrf	7
  7194  059A  0020               	movlb	0	; select bank0
  7195  059B  0862               	movf	??_RTXUpdateDisplay,w
  7196  059C  0081               	movwf	1
  7197  059D  3001               	movlw	1
  7198  059E  00E2               	movwf	??_RTXUpdateDisplay
  7199  059F  0862               	movf	??_RTXUpdateDisplay,w
  7200  05A0  0021               	movlb	1	; select bank1
  7201  05A1  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  7202                           
  7203                           ;RTX.c: 297: strRow1[iR++]='?';
  7204  05A2  303F               	movlw	63
  7205  05A3  0020               	movlb	0	; select bank0
  7206  05A4  00E2               	movwf	??_RTXUpdateDisplay
  7207  05A5  0021               	movlb	1	; select bank1
  7208  05A6  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  7209  05A7  3ECE               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  7210  05A8  0086               	movwf	6
  7211  05A9  0187               	clrf	7
  7212  05AA  0020               	movlb	0	; select bank0
  7213  05AB  0862               	movf	??_RTXUpdateDisplay,w
  7214  05AC  0081               	movwf	1
  7215  05AD  3001               	movlw	1
  7216  05AE  00E2               	movwf	??_RTXUpdateDisplay
  7217  05AF  0862               	movf	??_RTXUpdateDisplay,w
  7218  05B0  0021               	movlb	1	; select bank1
  7219  05B1  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  7220                           
  7221                           ;RTX.c: 298: strRow1[iR++]='?';
  7222  05B2  303F               	movlw	63
  7223  05B3  0020               	movlb	0	; select bank0
  7224  05B4  00E2               	movwf	??_RTXUpdateDisplay
  7225  05B5  0021               	movlb	1	; select bank1
  7226  05B6  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  7227  05B7  3ECE               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  7228  05B8  0086               	movwf	6
  7229  05B9  0187               	clrf	7
  7230  05BA  0020               	movlb	0	; select bank0
  7231  05BB  0862               	movf	??_RTXUpdateDisplay,w
  7232  05BC  0081               	movwf	1
  7233  05BD  3001               	movlw	1
  7234  05BE  00E2               	movwf	??_RTXUpdateDisplay
  7235  05BF  0862               	movf	??_RTXUpdateDisplay,w
  7236  05C0  0021               	movlb	1	; select bank1
  7237  05C1  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  7238  05C2                     l530:	
  7239                           
  7240                           ;RTX.c: 299: }
  7241                           ;RTX.c: 301: strRow1[iR++]='W';
  7242  05C2  3057               	movlw	87
  7243  05C3  0020               	movlb	0	; select bank0
  7244  05C4  00E2               	movwf	??_RTXUpdateDisplay
  7245  05C5  0021               	movlb	1	; select bank1
  7246  05C6  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  7247  05C7  3ECE               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  7248  05C8  0086               	movwf	6
  7249  05C9  0187               	clrf	7
  7250  05CA  0020               	movlb	0	; select bank0
  7251  05CB  0862               	movf	??_RTXUpdateDisplay,w
  7252  05CC  0081               	movwf	1
  7253  05CD  3001               	movlw	1
  7254  05CE  00E2               	movwf	??_RTXUpdateDisplay
  7255  05CF  0862               	movf	??_RTXUpdateDisplay,w
  7256  05D0  0021               	movlb	1	; select bank1
  7257  05D1  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  7258                           
  7259                           ;RTX.c: 305: iR=0;
  7260  05D2  01E0               	clrf	RTXUpdateDisplay@iR^(0+128)
  7261                           
  7262                           ;RTX.c: 306: strRow2[iR++]='D';
  7263  05D3  3044               	movlw	68
  7264  05D4  0020               	movlb	0	; select bank0
  7265  05D5  00E2               	movwf	??_RTXUpdateDisplay
  7266  05D6  0021               	movlb	1	; select bank1
  7267  05D7  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  7268  05D8  3EBE               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  7269  05D9  0086               	movwf	6
  7270  05DA  0187               	clrf	7
  7271  05DB  0020               	movlb	0	; select bank0
  7272  05DC  0862               	movf	??_RTXUpdateDisplay,w
  7273  05DD  0081               	movwf	1
  7274  05DE  3001               	movlw	1
  7275  05DF  00E2               	movwf	??_RTXUpdateDisplay
  7276  05E0  0862               	movf	??_RTXUpdateDisplay,w
  7277  05E1  0021               	movlb	1	; select bank1
  7278  05E2  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  7279                           
  7280                           ;RTX.c: 307: strRow2[iR++]=':';
  7281  05E3  303A               	movlw	58
  7282  05E4  0020               	movlb	0	; select bank0
  7283  05E5  00E2               	movwf	??_RTXUpdateDisplay
  7284  05E6  0021               	movlb	1	; select bank1
  7285  05E7  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  7286  05E8  3EBE               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  7287  05E9  0086               	movwf	6
  7288  05EA  0187               	clrf	7
  7289  05EB  0020               	movlb	0	; select bank0
  7290  05EC  0862               	movf	??_RTXUpdateDisplay,w
  7291  05ED  0081               	movwf	1
  7292  05EE  3001               	movlw	1
  7293  05EF  00E2               	movwf	??_RTXUpdateDisplay
  7294  05F0  0862               	movf	??_RTXUpdateDisplay,w
  7295  05F1  0021               	movlb	1	; select bank1
  7296  05F2  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  7297                           
  7298                           ;RTX.c: 308: strRow2[iR++]=' ';
  7299  05F3  3020               	movlw	32
  7300  05F4  0020               	movlb	0	; select bank0
  7301  05F5  00E2               	movwf	??_RTXUpdateDisplay
  7302  05F6  0021               	movlb	1	; select bank1
  7303  05F7  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  7304  05F8  3EBE               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  7305  05F9  0086               	movwf	6
  7306  05FA  0187               	clrf	7
  7307  05FB  0020               	movlb	0	; select bank0
  7308  05FC  0862               	movf	??_RTXUpdateDisplay,w
  7309  05FD  0081               	movwf	1
  7310  05FE  3001               	movlw	1
  7311  05FF  00E2               	movwf	??_RTXUpdateDisplay
  7312  0600  0862               	movf	??_RTXUpdateDisplay,w
  7313  0601  0021               	movlb	1	; select bank1
  7314  0602  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  7315                           
  7316                           ;RTX.c: 309: if(pgm_cfg.menu.con_curr_sensIsProg && pgm_cfg.menu.gen_curr_sensIsProg)
  7317  0603  0022               	movlb	2	; select bank2
  7318  0604  18C5               	btfsc	(_pgm_cfg^(0+256)+2),1
  7319  0605  1C45               	btfss	(_pgm_cfg^(0+256)+2),0
  7320  0606  2E55               	goto	l5731
  7321                           
  7322                           ;RTX.c: 310: iR=RTXVisDec((con_power-gen_power),strRow2,3,iR)+1;
  7323  0607  082C               	movf	_con_power^(0+256),w
  7324  0608  0020               	movlb	0	; select bank0
  7325  0609  00A0               	movwf	___ftadd@f1
  7326  060A  0022               	movlb	2	; select bank2
  7327  060B  082D               	movf	(_con_power+1)^(0+256),w
  7328  060C  0020               	movlb	0	; select bank0
  7329  060D  00A1               	movwf	___ftadd@f1+1
  7330  060E  0022               	movlb	2	; select bank2
  7331  060F  082E               	movf	(_con_power+2)^(0+256),w
  7332  0610  0020               	movlb	0	; select bank0
  7333  0611  00A2               	movwf	___ftadd@f1+2
  7334  0612  0022               	movlb	2	; select bank2
  7335  0613  0832               	movf	_gen_power^(0+256),w
  7336  0614  00F1               	movwf	___ftneg@f1
  7337  0615  0833               	movf	(_gen_power+1)^(0+256),w
  7338  0616  00F2               	movwf	___ftneg@f1+1
  7339  0617  0834               	movf	(_gen_power+2)^(0+256),w
  7340  0618  00F3               	movwf	___ftneg@f1+2
  7341  0619  3190  202A  3180   	fcall	___ftneg
  7342  061C  0871               	movf	?___ftneg,w
  7343  061D  0020               	movlb	0	; select bank0
  7344  061E  00A3               	movwf	___ftadd@f2
  7345  061F  0872               	movf	?___ftneg+1,w
  7346  0620  00A4               	movwf	___ftadd@f2+1
  7347  0621  0873               	movf	?___ftneg+2,w
  7348  0622  00A5               	movwf	___ftadd@f2+2
  7349  0623  3186  26EF  3180   	fcall	___ftadd
  7350  0626  0020               	movlb	0	; select bank0
  7351  0627  0820               	movf	?___ftadd,w
  7352  0628  0021               	movlb	1	; select bank1
  7353  0629  00B7               	movwf	_RTXUpdateDisplay$1513^(0+128)
  7354  062A  0020               	movlb	0	; select bank0
  7355  062B  0821               	movf	?___ftadd+1,w
  7356  062C  0021               	movlb	1	; select bank1
  7357  062D  00B8               	movwf	(_RTXUpdateDisplay$1513+1)^(0+128)
  7358  062E  0020               	movlb	0	; select bank0
  7359  062F  0822               	movf	?___ftadd+2,w
  7360  0630  0021               	movlb	1	; select bank1
  7361  0631  00B9               	movwf	(_RTXUpdateDisplay$1513+2)^(0+128)
  7362                           
  7363                           ;RTX.c: 310: iR=RTXVisDec((con_power-gen_power),strRow2,3,iR)+1;
  7364  0632  0837               	movf	_RTXUpdateDisplay$1513^(0+128),w
  7365  0633  0020               	movlb	0	; select bank0
  7366  0634  00D7               	movwf	RTXVisDec@val
  7367  0635  0021               	movlb	1	; select bank1
  7368  0636  0838               	movf	(_RTXUpdateDisplay$1513+1)^(0+128),w
  7369  0637  0020               	movlb	0	; select bank0
  7370  0638  00D8               	movwf	RTXVisDec@val+1
  7371  0639  0021               	movlb	1	; select bank1
  7372  063A  0839               	movf	(_RTXUpdateDisplay$1513+2)^(0+128),w
  7373  063B  0020               	movlb	0	; select bank0
  7374  063C  00D9               	movwf	RTXVisDec@val+2
  7375  063D  30BE               	movlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  7376  063E  00E2               	movwf	??_RTXUpdateDisplay
  7377  063F  0862               	movf	??_RTXUpdateDisplay,w
  7378  0640  00DA               	movwf	RTXVisDec@buff
  7379  0641  3003               	movlw	3
  7380  0642  00E3               	movwf	??_RTXUpdateDisplay+1
  7381  0643  0863               	movf	??_RTXUpdateDisplay+1,w
  7382  0644  00DB               	movwf	RTXVisDec@maxDigit
  7383  0645  0021               	movlb	1	; select bank1
  7384  0646  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  7385  0647  0020               	movlb	0	; select bank0
  7386  0648  00E4               	movwf	??_RTXUpdateDisplay+2
  7387  0649  0864               	movf	??_RTXUpdateDisplay+2,w
  7388  064A  00DC               	movwf	RTXVisDec@offset
  7389  064B  318A  226E  3180   	fcall	_RTXVisDec
  7390  064E  3E01               	addlw	1
  7391  064F  0020               	movlb	0	; select bank0
  7392  0650  00E5               	movwf	??_RTXUpdateDisplay+3
  7393  0651  0865               	movf	??_RTXUpdateDisplay+3,w
  7394  0652  0021               	movlb	1	; select bank1
  7395  0653  00E0               	movwf	RTXUpdateDisplay@iR^(0+128)
  7396  0654  2E85               	goto	l532
  7397  0655                     l5731:	
  7398                           
  7399                           ;RTX.c: 311: else
  7400                           ;RTX.c: 312: {
  7401                           ;RTX.c: 313: strRow2[iR++]='?';
  7402  0655  303F               	movlw	63
  7403  0656  0020               	movlb	0	; select bank0
  7404  0657  00E2               	movwf	??_RTXUpdateDisplay
  7405  0658  0021               	movlb	1	; select bank1
  7406  0659  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  7407  065A  3EBE               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  7408  065B  0086               	movwf	6
  7409  065C  0187               	clrf	7
  7410  065D  0020               	movlb	0	; select bank0
  7411  065E  0862               	movf	??_RTXUpdateDisplay,w
  7412  065F  0081               	movwf	1
  7413  0660  3001               	movlw	1
  7414  0661  00E2               	movwf	??_RTXUpdateDisplay
  7415  0662  0862               	movf	??_RTXUpdateDisplay,w
  7416  0663  0021               	movlb	1	; select bank1
  7417  0664  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  7418                           
  7419                           ;RTX.c: 314: strRow2[iR++]='?';
  7420  0665  303F               	movlw	63
  7421  0666  0020               	movlb	0	; select bank0
  7422  0667  00E2               	movwf	??_RTXUpdateDisplay
  7423  0668  0021               	movlb	1	; select bank1
  7424  0669  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  7425  066A  3EBE               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  7426  066B  0086               	movwf	6
  7427  066C  0187               	clrf	7
  7428  066D  0020               	movlb	0	; select bank0
  7429  066E  0862               	movf	??_RTXUpdateDisplay,w
  7430  066F  0081               	movwf	1
  7431  0670  3001               	movlw	1
  7432  0671  00E2               	movwf	??_RTXUpdateDisplay
  7433  0672  0862               	movf	??_RTXUpdateDisplay,w
  7434  0673  0021               	movlb	1	; select bank1
  7435  0674  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  7436                           
  7437                           ;RTX.c: 315: strRow2[iR++]='?';
  7438  0675  303F               	movlw	63
  7439  0676  0020               	movlb	0	; select bank0
  7440  0677  00E2               	movwf	??_RTXUpdateDisplay
  7441  0678  0021               	movlb	1	; select bank1
  7442  0679  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  7443  067A  3EBE               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  7444  067B  0086               	movwf	6
  7445  067C  0187               	clrf	7
  7446  067D  0020               	movlb	0	; select bank0
  7447  067E  0862               	movf	??_RTXUpdateDisplay,w
  7448  067F  0081               	movwf	1
  7449  0680  3001               	movlw	1
  7450  0681  00E2               	movwf	??_RTXUpdateDisplay
  7451  0682  0862               	movf	??_RTXUpdateDisplay,w
  7452  0683  0021               	movlb	1	; select bank1
  7453  0684  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  7454  0685                     l532:	
  7455                           
  7456                           ;RTX.c: 316: }
  7457                           ;RTX.c: 318: strRow2[iR++]='W';
  7458  0685  3057               	movlw	87
  7459  0686  0020               	movlb	0	; select bank0
  7460  0687  00E2               	movwf	??_RTXUpdateDisplay
  7461  0688  0021               	movlb	1	; select bank1
  7462  0689  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  7463  068A  3EBE               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  7464  068B  0086               	movwf	6
  7465  068C  0187               	clrf	7
  7466  068D  0020               	movlb	0	; select bank0
  7467  068E  0862               	movf	??_RTXUpdateDisplay,w
  7468  068F  0081               	movwf	1
  7469  0690  3001               	movlw	1
  7470  0691  00E2               	movwf	??_RTXUpdateDisplay
  7471  0692  0862               	movf	??_RTXUpdateDisplay,w
  7472  0693  0021               	movlb	1	; select bank1
  7473  0694  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  7474                           
  7475                           ;RTX.c: 319: if((pgm_cfg.menu.con_curr_sensIsProg && batt_con_curr_sens<2.5) || (pgm_cfg
      +                          .menu.gen_curr_sensIsProg && batt_gen_curr_sens<2.5) || (pgm_cfg.menu.volt_sensIsProg &&
      +                           batt_volt_sens<2.5))
  7476  0695  0022               	movlb	2	; select bank2
  7477  0696  1CC5               	btfss	(_pgm_cfg^(0+256)+2),1
  7478  0697  2EA9               	goto	l537
  7479  0698  0820               	movf	_batt_con_curr_sens^(0+256),w
  7480  0699  00F1               	movwf	___ftge@ff1
  7481  069A  0821               	movf	(_batt_con_curr_sens+1)^(0+256),w
  7482  069B  00F2               	movwf	___ftge@ff1+1
  7483  069C  0822               	movf	(_batt_con_curr_sens+2)^(0+256),w
  7484  069D  00F3               	movwf	___ftge@ff1+2
  7485  069E  3000               	movlw	0
  7486  069F  00F4               	movwf	___ftge@ff2
  7487  06A0  3020               	movlw	32
  7488  06A1  00F5               	movwf	___ftge@ff2+1
  7489  06A2  3040               	movlw	64
  7490  06A3  00F6               	movwf	___ftge@ff2+2
  7491  06A4  3195  2575  3180   	fcall	___ftge
  7492  06A7  1C03               	btfss	3,0
  7493  06A8  2ED1               	goto	l5751
  7494  06A9                     l537:	
  7495  06A9  0022               	movlb	2	; select bank2
  7496  06AA  1C45               	btfss	(_pgm_cfg^(0+256)+2),0
  7497  06AB  2EBD               	goto	l539
  7498  06AC  0823               	movf	_batt_gen_curr_sens^(0+256),w
  7499  06AD  00F1               	movwf	___ftge@ff1
  7500  06AE  0824               	movf	(_batt_gen_curr_sens+1)^(0+256),w
  7501  06AF  00F2               	movwf	___ftge@ff1+1
  7502  06B0  0825               	movf	(_batt_gen_curr_sens+2)^(0+256),w
  7503  06B1  00F3               	movwf	___ftge@ff1+2
  7504  06B2  3000               	movlw	0
  7505  06B3  00F4               	movwf	___ftge@ff2
  7506  06B4  3020               	movlw	32
  7507  06B5  00F5               	movwf	___ftge@ff2+1
  7508  06B6  3040               	movlw	64
  7509  06B7  00F6               	movwf	___ftge@ff2+2
  7510  06B8  3195  2575  3180   	fcall	___ftge
  7511  06BB  1C03               	btfss	3,0
  7512  06BC  2ED1               	goto	l5751
  7513  06BD                     l539:	
  7514  06BD  0022               	movlb	2	; select bank2
  7515  06BE  1D45               	btfss	(_pgm_cfg^(0+256)+2),2
  7516  06BF  2ED3               	goto	l5753
  7517  06C0  0826               	movf	_batt_volt_sens^(0+256),w
  7518  06C1  00F1               	movwf	___ftge@ff1
  7519  06C2  0827               	movf	(_batt_volt_sens+1)^(0+256),w
  7520  06C3  00F2               	movwf	___ftge@ff1+1
  7521  06C4  0828               	movf	(_batt_volt_sens+2)^(0+256),w
  7522  06C5  00F3               	movwf	___ftge@ff1+2
  7523  06C6  3000               	movlw	0
  7524  06C7  00F4               	movwf	___ftge@ff2
  7525  06C8  3020               	movlw	32
  7526  06C9  00F5               	movwf	___ftge@ff2+1
  7527  06CA  3040               	movlw	64
  7528  06CB  00F6               	movwf	___ftge@ff2+2
  7529  06CC  3195  2575  3180   	fcall	___ftge
  7530  06CF  1803               	btfsc	3,0
  7531  06D0  2ED3               	goto	l5753
  7532  06D1                     l5751:	
  7533                           
  7534                           ;RTX.c: 320: strRow2[sizeof(strRow2)/sizeof(char)-1]=0x00;
  7535  06D1  0021               	movlb	1	; select bank1
  7536  06D2  01CD               	clrf	(RTXUpdateDisplay@strRow2^(0+128)+15)
  7537  06D3                     l5753:	
  7538                           
  7539                           ;RTX.c: 321: }
  7540                           ;RTX.c: 322: DPYSendStr(0,0,strRow1,sizeof(strRow1)/sizeof(char));
  7541  06D3  0020               	movlb	0	; select bank0
  7542  06D4  01A0               	clrf	DPYSendStr@col
  7543  06D5  30CE               	movlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  7544  06D6  00E2               	movwf	??_RTXUpdateDisplay
  7545  06D7  0862               	movf	??_RTXUpdateDisplay,w
  7546  06D8  00A1               	movwf	DPYSendStr@data
  7547  06D9  3010               	movlw	16
  7548  06DA  00E3               	movwf	??_RTXUpdateDisplay+1
  7549  06DB  0863               	movf	??_RTXUpdateDisplay+1,w
  7550  06DC  00A2               	movwf	DPYSendStr@len
  7551  06DD  3000               	movlw	0
  7552  06DE  3196  2671  3180   	fcall	_DPYSendStr
  7553                           
  7554                           ;RTX.c: 323: DPYSendStr(1,0,strRow2,sizeof(strRow2)/sizeof(char));
  7555  06E1  0020               	movlb	0	; select bank0
  7556  06E2  01A0               	clrf	DPYSendStr@col
  7557  06E3  30BE               	movlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  7558  06E4  00E2               	movwf	??_RTXUpdateDisplay
  7559  06E5  0862               	movf	??_RTXUpdateDisplay,w
  7560  06E6  00A1               	movwf	DPYSendStr@data
  7561  06E7  3010               	movlw	16
  7562  06E8  00E3               	movwf	??_RTXUpdateDisplay+1
  7563  06E9  0863               	movf	??_RTXUpdateDisplay+1,w
  7564  06EA  00A2               	movwf	DPYSendStr@len
  7565  06EB  3001               	movlw	1
  7566  06EC  3196  2671         	fcall	_DPYSendStr
  7567  06EE  0008               	return
  7568  06EF                     __end_of_RTXUpdateDisplay:	
  7569                           
  7570                           	psect	text24
  7571  12CD                     __ptext24:	
  7572 ;; *************** function _itoa *****************
  7573 ;; Defined at:
  7574 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\itoa.c"
  7575 ;; Parameters:    Size  Location     Type
  7576 ;;  buf             1    wreg     PTR unsigned char 
  7577 ;;		 -> RTXUpdateDisplay@charIdSens(4), 
  7578 ;;  val             2    8[BANK0 ] int 
  7579 ;;  base            2   10[BANK0 ] int 
  7580 ;; Auto vars:     Size  Location     Type
  7581 ;;  buf             1   13[BANK0 ] PTR unsigned char 
  7582 ;;		 -> RTXUpdateDisplay@charIdSens(4), 
  7583 ;;  cp              1   12[BANK0 ] PTR unsigned char 
  7584 ;;		 -> RTXUpdateDisplay@charIdSens(4), 
  7585 ;; Return value:  Size  Location     Type
  7586 ;;                  1    wreg      PTR unsigned char 
  7587 ;; Registers used:
  7588 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7589 ;; Tracked objects:
  7590 ;;		On entry : 0/0
  7591 ;;		On exit  : 0/0
  7592 ;;		Unchanged: 0/0
  7593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7594 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7595 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7596 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7597 ;;      Totals:         1       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7598 ;;Total ram usage:        7 bytes
  7599 ;; Hardware stack levels used:    1
  7600 ;; Hardware stack levels required when called:    4
  7601 ;; This function calls:
  7602 ;;		_utoa
  7603 ;; This function is called by:
  7604 ;;		_RTXUpdateDisplay
  7605 ;; This function uses a non-reentrant model
  7606 ;;
  7607                           
  7608                           
  7609                           ;psect for function _itoa
  7610  12CD                     _itoa:	
  7611                           
  7612                           ;incstack = 0
  7613                           ; Regs used in _itoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7614                           ;itoa@buf stored from wreg
  7615  12CD  0020               	movlb	0	; select bank0
  7616  12CE  00AD               	movwf	itoa@buf
  7617  12CF  082D               	movf	itoa@buf,w
  7618  12D0  00FA               	movwf	??_itoa
  7619  12D1  087A               	movf	??_itoa,w
  7620  12D2  00AC               	movwf	itoa@cp
  7621  12D3  1FA9               	btfss	itoa@val+1,7
  7622  12D4  2AE5               	goto	l5311
  7623  12D5  302D               	movlw	45
  7624  12D6  00FA               	movwf	??_itoa
  7625  12D7  082D               	movf	itoa@buf,w
  7626  12D8  0086               	movwf	6
  7627  12D9  0187               	clrf	7
  7628  12DA  087A               	movf	??_itoa,w
  7629  12DB  0081               	movwf	1
  7630  12DC  3001               	movlw	1
  7631  12DD  00FA               	movwf	??_itoa
  7632  12DE  087A               	movf	??_itoa,w
  7633  12DF  07AD               	addwf	itoa@buf,f
  7634  12E0  09A8               	comf	itoa@val,f
  7635  12E1  09A9               	comf	itoa@val+1,f
  7636  12E2  0AA8               	incf	itoa@val,f
  7637  12E3  1903               	skipnz
  7638  12E4  0AA9               	incf	itoa@val+1,f
  7639  12E5                     l5311:	
  7640  12E5  0829               	movf	itoa@val+1,w
  7641  12E6  00A1               	movwf	utoa@val+1
  7642  12E7  0828               	movf	itoa@val,w
  7643  12E8  00A0               	movwf	utoa@val
  7644  12E9  082B               	movf	itoa@base+1,w
  7645  12EA  00A3               	movwf	utoa@base+1
  7646  12EB  082A               	movf	itoa@base,w
  7647  12EC  00A2               	movwf	utoa@base
  7648  12ED  082D               	movf	itoa@buf,w
  7649  12EE  3188  207E         	fcall	_utoa
  7650  12F0  0008               	return
  7651  12F1                     __end_of_itoa:	
  7652                           ;	Return value of _itoa is never used
  7653                           
  7654                           
  7655                           	psect	text25
  7656  087E                     __ptext25:	
  7657 ;; *************** function _utoa *****************
  7658 ;; Defined at:
  7659 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\itoa.c"
  7660 ;; Parameters:    Size  Location     Type
  7661 ;;  buf             1    wreg     PTR unsigned char 
  7662 ;;		 -> RTXUpdateDisplay@charIdSens(4), 
  7663 ;;  val             2    0[BANK0 ] unsigned int 
  7664 ;;  base            2    2[BANK0 ] int 
  7665 ;; Auto vars:     Size  Location     Type
  7666 ;;  buf             1    7[BANK0 ] PTR unsigned char 
  7667 ;;		 -> RTXUpdateDisplay@charIdSens(4), 
  7668 ;;  v               2    4[BANK0 ] unsigned int 
  7669 ;;  c               1    6[BANK0 ] unsigned char 
  7670 ;; Return value:  Size  Location     Type
  7671 ;;                  1    wreg      PTR unsigned char 
  7672 ;; Registers used:
  7673 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7674 ;; Tracked objects:
  7675 ;;		On entry : 0/0
  7676 ;;		On exit  : 0/0
  7677 ;;		Unchanged: 0/0
  7678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7679 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7680 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7681 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7682 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7683 ;;Total ram usage:        9 bytes
  7684 ;; Hardware stack levels used:    1
  7685 ;; Hardware stack levels required when called:    3
  7686 ;; This function calls:
  7687 ;;		___lwdiv
  7688 ;;		___lwmod
  7689 ;; This function is called by:
  7690 ;;		_itoa
  7691 ;; This function uses a non-reentrant model
  7692 ;;
  7693                           
  7694                           
  7695                           ;psect for function _utoa
  7696  087E                     _utoa:	
  7697                           
  7698                           ;incstack = 0
  7699                           ; Regs used in _utoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7700                           ;utoa@buf stored from wreg
  7701  087E  0020               	movlb	0	; select bank0
  7702  087F  00A7               	movwf	utoa@buf
  7703  0880  0821               	movf	utoa@val+1,w
  7704  0881  00A5               	movwf	utoa@v+1
  7705  0882  0820               	movf	utoa@val,w
  7706  0883  00A4               	movwf	utoa@v
  7707  0884                     l5219:	
  7708  0884  0823               	movf	utoa@base+1,w
  7709  0885  00F2               	movwf	___lwdiv@divisor+1
  7710  0886  0822               	movf	utoa@base,w
  7711  0887  00F1               	movwf	___lwdiv@divisor
  7712  0888  0825               	movf	utoa@v+1,w
  7713  0889  00F4               	movwf	___lwdiv@dividend+1
  7714  088A  0824               	movf	utoa@v,w
  7715  088B  00F3               	movwf	___lwdiv@dividend
  7716  088C  3194  24CF  3188   	fcall	___lwdiv
  7717  088F  0872               	movf	?___lwdiv+1,w
  7718  0890  0020               	movlb	0	; select bank0
  7719  0891  00A5               	movwf	utoa@v+1
  7720  0892  0871               	movf	?___lwdiv,w
  7721  0893  00A4               	movwf	utoa@v
  7722  0894  3001               	movlw	1
  7723  0895  00F9               	movwf	??_utoa
  7724  0896  0879               	movf	??_utoa,w
  7725  0897  07A7               	addwf	utoa@buf,f
  7726  0898  0824               	movf	utoa@v,w
  7727  0899  0425               	iorwf	utoa@v+1,w
  7728  089A  1D03               	btfss	3,2
  7729  089B  2884               	goto	l5219
  7730  089C  0827               	movf	utoa@buf,w
  7731  089D  0086               	movwf	6
  7732  089E  0187               	clrf	7
  7733  089F  0181               	clrf	1
  7734  08A0  3001               	movlw	1
  7735  08A1  02A7               	subwf	utoa@buf,f
  7736  08A2                     l5229:	
  7737  08A2  0823               	movf	utoa@base+1,w
  7738  08A3  00F2               	movwf	___lwmod@divisor+1
  7739  08A4  0822               	movf	utoa@base,w
  7740  08A5  00F1               	movwf	___lwmod@divisor
  7741  08A6  0821               	movf	utoa@val+1,w
  7742  08A7  00F4               	movwf	___lwmod@dividend+1
  7743  08A8  0820               	movf	utoa@val,w
  7744  08A9  00F3               	movwf	___lwmod@dividend
  7745  08AA  3194  240C  3188   	fcall	___lwmod
  7746  08AD  0871               	movf	?___lwmod,w
  7747  08AE  00F9               	movwf	??_utoa
  7748  08AF  0879               	movf	??_utoa,w
  7749  08B0  0020               	movlb	0	; select bank0
  7750  08B1  00A6               	movwf	utoa@c
  7751  08B2  0823               	movf	utoa@base+1,w
  7752  08B3  00F2               	movwf	___lwdiv@divisor+1
  7753  08B4  0822               	movf	utoa@base,w
  7754  08B5  00F1               	movwf	___lwdiv@divisor
  7755  08B6  0821               	movf	utoa@val+1,w
  7756  08B7  00F4               	movwf	___lwdiv@dividend+1
  7757  08B8  0820               	movf	utoa@val,w
  7758  08B9  00F3               	movwf	___lwdiv@dividend
  7759  08BA  3194  24CF  3188   	fcall	___lwdiv
  7760  08BD  0872               	movf	?___lwdiv+1,w
  7761  08BE  0020               	movlb	0	; select bank0
  7762  08BF  00A1               	movwf	utoa@val+1
  7763  08C0  0871               	movf	?___lwdiv,w
  7764  08C1  00A0               	movwf	utoa@val
  7765  08C2  300A               	movlw	10
  7766  08C3  0226               	subwf	utoa@c,w
  7767  08C4  1C03               	skipc
  7768  08C5  28CA               	goto	l1126
  7769  08C6  3007               	movlw	7
  7770  08C7  00F9               	movwf	??_utoa
  7771  08C8  0879               	movf	??_utoa,w
  7772  08C9  07A6               	addwf	utoa@c,f
  7773  08CA                     l1126:	
  7774  08CA  3030               	movlw	48
  7775  08CB  00F9               	movwf	??_utoa
  7776  08CC  0879               	movf	??_utoa,w
  7777  08CD  07A6               	addwf	utoa@c,f
  7778  08CE  0826               	movf	utoa@c,w
  7779  08CF  00F9               	movwf	??_utoa
  7780  08D0  0827               	movf	utoa@buf,w
  7781  08D1  0086               	movwf	6
  7782  08D2  0187               	clrf	7
  7783  08D3  0879               	movf	??_utoa,w
  7784  08D4  0081               	movwf	1
  7785  08D5  3001               	movlw	1
  7786  08D6  02A7               	subwf	utoa@buf,f
  7787  08D7  0820               	movf	utoa@val,w
  7788  08D8  0421               	iorwf	utoa@val+1,w
  7789  08D9  1D03               	btfss	3,2
  7790  08DA  28A2               	goto	l5229
  7791                           
  7792                           ;	Return value of _utoa is never used
  7793  08DB  3001               	movlw	1
  7794  08DC  00F9               	movwf	??_utoa
  7795  08DD  0879               	movf	??_utoa,w
  7796  08DE  07A7               	addwf	utoa@buf,f
  7797  08DF  0008               	return
  7798  08E0                     __end_of_utoa:	
  7799                           
  7800                           	psect	text26
  7801  140C                     __ptext26:	
  7802 ;; *************** function ___lwmod *****************
  7803 ;; Defined at:
  7804 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  7805 ;; Parameters:    Size  Location     Type
  7806 ;;  divisor         2    1[COMMON] unsigned int 
  7807 ;;  dividend        2    3[COMMON] unsigned int 
  7808 ;; Auto vars:     Size  Location     Type
  7809 ;;  counter         1    6[COMMON] unsigned char 
  7810 ;; Return value:  Size  Location     Type
  7811 ;;                  2    1[COMMON] unsigned int 
  7812 ;; Registers used:
  7813 ;;		wreg, status,2, status,0
  7814 ;; Tracked objects:
  7815 ;;		On entry : 0/0
  7816 ;;		On exit  : 0/0
  7817 ;;		Unchanged: 0/0
  7818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7819 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7820 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7821 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7822 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7823 ;;Total ram usage:        6 bytes
  7824 ;; Hardware stack levels used:    1
  7825 ;; Hardware stack levels required when called:    2
  7826 ;; This function calls:
  7827 ;;		Nothing
  7828 ;; This function is called by:
  7829 ;;		_utoa
  7830 ;; This function uses a non-reentrant model
  7831 ;;
  7832                           
  7833                           
  7834                           ;psect for function ___lwmod
  7835  140C                     ___lwmod:	
  7836                           
  7837                           ;incstack = 0
  7838                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  7839  140C  0871               	movf	___lwmod@divisor,w
  7840  140D  0472               	iorwf	___lwmod@divisor+1,w
  7841  140E  1903               	btfsc	3,2
  7842  140F  2C33               	goto	l3597
  7843  1410  01F6               	clrf	___lwmod@counter
  7844  1411  0AF6               	incf	___lwmod@counter,f
  7845  1412                     l3587:	
  7846  1412  1BF2               	btfsc	___lwmod@divisor+1,7
  7847  1413  2C1E               	goto	l3589
  7848  1414  3001               	movlw	1
  7849  1415                     u3765:	
  7850  1415  35F1               	lslf	___lwmod@divisor,f
  7851  1416  0DF2               	rlf	___lwmod@divisor+1,f
  7852  1417  0B89               	decfsz	9,f
  7853  1418  2C15               	goto	u3765
  7854  1419  3001               	movlw	1
  7855  141A  00F5               	movwf	??___lwmod
  7856  141B  0875               	movf	??___lwmod,w
  7857  141C  07F6               	addwf	___lwmod@counter,f
  7858  141D  2C12               	goto	l3587
  7859  141E                     l3589:	
  7860  141E  0872               	movf	___lwmod@divisor+1,w
  7861  141F  0274               	subwf	___lwmod@dividend+1,w
  7862  1420  1D03               	skipz
  7863  1421  2C24               	goto	u3785
  7864  1422  0871               	movf	___lwmod@divisor,w
  7865  1423  0273               	subwf	___lwmod@dividend,w
  7866  1424                     u3785:	
  7867  1424  1C03               	skipc
  7868  1425  2C2A               	goto	l3593
  7869  1426  0871               	movf	___lwmod@divisor,w
  7870  1427  02F3               	subwf	___lwmod@dividend,f
  7871  1428  0872               	movf	___lwmod@divisor+1,w
  7872  1429  3BF4               	subwfb	___lwmod@dividend+1,f
  7873  142A                     l3593:	
  7874  142A  3001               	movlw	1
  7875  142B                     u3795:	
  7876  142B  36F2               	lsrf	___lwmod@divisor+1,f
  7877  142C  0CF1               	rrf	___lwmod@divisor,f
  7878  142D  0B89               	decfsz	9,f
  7879  142E  2C2B               	goto	u3795
  7880  142F  3001               	movlw	1
  7881  1430  02F6               	subwf	___lwmod@counter,f
  7882  1431  1D03               	btfss	3,2
  7883  1432  2C1E               	goto	l3589
  7884  1433                     l3597:	
  7885  1433  0874               	movf	___lwmod@dividend+1,w
  7886  1434  00F2               	movwf	?___lwmod+1
  7887  1435  0873               	movf	___lwmod@dividend,w
  7888  1436  00F1               	movwf	?___lwmod
  7889  1437  0008               	return
  7890  1438                     __end_of___lwmod:	
  7891                           
  7892                           	psect	text27
  7893  14CF                     __ptext27:	
  7894 ;; *************** function ___lwdiv *****************
  7895 ;; Defined at:
  7896 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  7897 ;; Parameters:    Size  Location     Type
  7898 ;;  divisor         2    1[COMMON] unsigned int 
  7899 ;;  dividend        2    3[COMMON] unsigned int 
  7900 ;; Auto vars:     Size  Location     Type
  7901 ;;  quotient        2    6[COMMON] unsigned int 
  7902 ;;  counter         1    8[COMMON] unsigned char 
  7903 ;; Return value:  Size  Location     Type
  7904 ;;                  2    1[COMMON] unsigned int 
  7905 ;; Registers used:
  7906 ;;		wreg, status,2, status,0
  7907 ;; Tracked objects:
  7908 ;;		On entry : 0/0
  7909 ;;		On exit  : 0/0
  7910 ;;		Unchanged: 0/0
  7911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7912 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7913 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7914 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7915 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7916 ;;Total ram usage:        8 bytes
  7917 ;; Hardware stack levels used:    1
  7918 ;; Hardware stack levels required when called:    2
  7919 ;; This function calls:
  7920 ;;		Nothing
  7921 ;; This function is called by:
  7922 ;;		_utoa
  7923 ;; This function uses a non-reentrant model
  7924 ;;
  7925                           
  7926                           
  7927                           ;psect for function ___lwdiv
  7928  14CF                     ___lwdiv:	
  7929                           
  7930                           ;incstack = 0
  7931                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  7932  14CF  01F6               	clrf	___lwdiv@quotient
  7933  14D0  01F7               	clrf	___lwdiv@quotient+1
  7934  14D1  0871               	movf	___lwdiv@divisor,w
  7935  14D2  0472               	iorwf	___lwdiv@divisor+1,w
  7936  14D3  1903               	btfsc	3,2
  7937  14D4  2CFE               	goto	l3575
  7938  14D5  01F8               	clrf	___lwdiv@counter
  7939  14D6  0AF8               	incf	___lwdiv@counter,f
  7940  14D7                     l3563:	
  7941  14D7  1BF2               	btfsc	___lwdiv@divisor+1,7
  7942  14D8  2CE3               	goto	l3565
  7943  14D9  3001               	movlw	1
  7944  14DA                     u3695:	
  7945  14DA  35F1               	lslf	___lwdiv@divisor,f
  7946  14DB  0DF2               	rlf	___lwdiv@divisor+1,f
  7947  14DC  0B89               	decfsz	9,f
  7948  14DD  2CDA               	goto	u3695
  7949  14DE  3001               	movlw	1
  7950  14DF  00F5               	movwf	??___lwdiv
  7951  14E0  0875               	movf	??___lwdiv,w
  7952  14E1  07F8               	addwf	___lwdiv@counter,f
  7953  14E2  2CD7               	goto	l3563
  7954  14E3                     l3565:	
  7955  14E3  3001               	movlw	1
  7956  14E4                     u3715:	
  7957  14E4  35F6               	lslf	___lwdiv@quotient,f
  7958  14E5  0DF7               	rlf	___lwdiv@quotient+1,f
  7959  14E6  0B89               	decfsz	9,f
  7960  14E7  2CE4               	goto	u3715
  7961  14E8  0872               	movf	___lwdiv@divisor+1,w
  7962  14E9  0274               	subwf	___lwdiv@dividend+1,w
  7963  14EA  1D03               	skipz
  7964  14EB  2CEE               	goto	u3725
  7965  14EC  0871               	movf	___lwdiv@divisor,w
  7966  14ED  0273               	subwf	___lwdiv@dividend,w
  7967  14EE                     u3725:	
  7968  14EE  1C03               	skipc
  7969  14EF  2CF5               	goto	l3571
  7970  14F0  0871               	movf	___lwdiv@divisor,w
  7971  14F1  02F3               	subwf	___lwdiv@dividend,f
  7972  14F2  0872               	movf	___lwdiv@divisor+1,w
  7973  14F3  3BF4               	subwfb	___lwdiv@dividend+1,f
  7974  14F4  1476               	bsf	___lwdiv@quotient,0
  7975  14F5                     l3571:	
  7976  14F5  3001               	movlw	1
  7977  14F6                     u3735:	
  7978  14F6  36F2               	lsrf	___lwdiv@divisor+1,f
  7979  14F7  0CF1               	rrf	___lwdiv@divisor,f
  7980  14F8  0B89               	decfsz	9,f
  7981  14F9  2CF6               	goto	u3735
  7982  14FA  3001               	movlw	1
  7983  14FB  02F8               	subwf	___lwdiv@counter,f
  7984  14FC  1D03               	btfss	3,2
  7985  14FD  2CE3               	goto	l3565
  7986  14FE                     l3575:	
  7987  14FE  0877               	movf	___lwdiv@quotient+1,w
  7988  14FF  00F2               	movwf	?___lwdiv+1
  7989  1500  0876               	movf	___lwdiv@quotient,w
  7990  1501  00F1               	movwf	?___lwdiv
  7991  1502  0008               	return
  7992  1503                     __end_of___lwdiv:	
  7993                           
  7994                           	psect	text28
  7995  0A6E                     __ptext28:	
  7996 ;; *************** function _RTXVisDec *****************
  7997 ;; Defined at:
  7998 ;;		line 326 in file "RTX.c"
  7999 ;; Parameters:    Size  Location     Type
  8000 ;;  val             3   55[BANK0 ] float 
  8001 ;;  buff            1   58[BANK0 ] PTR unsigned char 
  8002 ;;		 -> RTXUpdateDisplay@strRow2(16), RTXUpdateDisplay@strRow1(16), 
  8003 ;;  maxDigit        1   59[BANK0 ] unsigned char 
  8004 ;;  offset          1   60[BANK0 ] unsigned char 
  8005 ;; Auto vars:     Size  Location     Type
  8006 ;;  strTmp         16    0[BANK1 ] unsigned char [16]
  8007 ;;  status          2   16[BANK1 ] int 
  8008 ;;  i               1   22[BANK1 ] unsigned char 
  8009 ;;  j               1   21[BANK1 ] unsigned char 
  8010 ;;  p               1   20[BANK1 ] PTR unsigned char 
  8011 ;;		 -> ftoa@buf(17), 
  8012 ;;  isDec           1   19[BANK1 ] unsigned char 
  8013 ;;  posDec          1   18[BANK1 ] unsigned char 
  8014 ;; Return value:  Size  Location     Type
  8015 ;;                  1    wreg      unsigned char 
  8016 ;; Registers used:
  8017 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8018 ;; Tracked objects:
  8019 ;;		On entry : 0/0
  8020 ;;		On exit  : 0/0
  8021 ;;		Unchanged: 0/0
  8022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8023 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8024 ;;      Locals:         0       0      23       0       0       0       0       0       0       0       0       0       
      +0       0
  8025 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8026 ;;      Totals:         0      11      23       0       0       0       0       0       0       0       0       0       
      +0       0
  8027 ;;Total ram usage:       34 bytes
  8028 ;; Hardware stack levels used:    1
  8029 ;; Hardware stack levels required when called:    6
  8030 ;; This function calls:
  8031 ;;		_ftoa
  8032 ;; This function is called by:
  8033 ;;		_RTXUpdateDisplay
  8034 ;; This function uses a non-reentrant model
  8035 ;;
  8036                           
  8037                           
  8038                           ;psect for function _RTXVisDec
  8039  0A6E                     _RTXVisDec:	
  8040                           
  8041                           ;RTX.c: 328: char *p;
  8042                           ;RTX.c: 329: unsigned char strTmp[16],isDec,posDec,i,j;
  8043                           ;RTX.c: 330: int status;
  8044                           ;RTX.c: 332: p=ftoa(val,(&(status)));
  8045                           
  8046                           ;incstack = 0
  8047                           ; Regs used in _RTXVisDec: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8048  0A6E  0020               	movlb	0	; select bank0
  8049  0A6F  0857               	movf	RTXVisDec@val,w
  8050  0A70  00C9               	movwf	ftoa@f
  8051  0A71  0858               	movf	RTXVisDec@val+1,w
  8052  0A72  00CA               	movwf	ftoa@f+1
  8053  0A73  0859               	movf	RTXVisDec@val+2,w
  8054  0A74  00CB               	movwf	ftoa@f+2
  8055  0A75  30B0               	movlw	(low (RTXVisDec@status| 0))& (0+255)
  8056  0A76  00DD               	movwf	??_RTXVisDec
  8057  0A77  085D               	movf	??_RTXVisDec,w
  8058  0A78  00CC               	movwf	ftoa@status
  8059  0A79  3189  21CB  318A   	fcall	_ftoa
  8060  0A7C  0020               	movlb	0	; select bank0
  8061  0A7D  00DE               	movwf	??_RTXVisDec+1
  8062  0A7E  085E               	movf	??_RTXVisDec+1,w
  8063  0A7F  0021               	movlb	1	; select bank1
  8064  0A80  00B4               	movwf	RTXVisDec@p^(0+128)
  8065                           
  8066                           ;RTX.c: 334: isDec=0;
  8067  0A81  01B3               	clrf	RTXVisDec@isDec^(0+128)
  8068                           
  8069                           ;RTX.c: 335: for(i=0;i<sizeof(strTmp)/sizeof(char);i++)
  8070  0A82  01B6               	clrf	RTXVisDec@i^(0+128)
  8071  0A83  3010               	movlw	16
  8072  0A84  0236               	subwf	RTXVisDec@i^(0+128),w
  8073  0A85  1803               	btfsc	3,0
  8074  0A86  2AE5               	goto	l5347
  8075  0A87                     l5325:	
  8076                           
  8077                           ;RTX.c: 336: {
  8078                           ;RTX.c: 338: if((*(p+i))=='.')
  8079  0A87  0836               	movf	RTXVisDec@i^(0+128),w
  8080  0A88  0734               	addwf	RTXVisDec@p^(0+128),w
  8081  0A89  0020               	movlb	0	; select bank0
  8082  0A8A  00DD               	movwf	??_RTXVisDec
  8083  0A8B  085D               	movf	??_RTXVisDec,w
  8084  0A8C  0086               	movwf	6
  8085  0A8D  3001               	movlw	1	; select bank2/3
  8086  0A8E  0087               	movwf	7
  8087  0A8F  302E               	movlw	46
  8088  0A90  0601               	xorwf	1,w
  8089  0A91  1D03               	btfss	3,2
  8090  0A92  2A9C               	goto	l5331
  8091                           
  8092                           ;RTX.c: 339: {
  8093                           ;RTX.c: 340: isDec=1;
  8094  0A93  0021               	movlb	1	; select bank1
  8095  0A94  01B3               	clrf	RTXVisDec@isDec^(0+128)
  8096  0A95  0AB3               	incf	RTXVisDec@isDec^(0+128),f
  8097                           
  8098                           ;RTX.c: 341: posDec=i;
  8099  0A96  0836               	movf	RTXVisDec@i^(0+128),w
  8100  0A97  0020               	movlb	0	; select bank0
  8101  0A98  00DD               	movwf	??_RTXVisDec
  8102  0A99  085D               	movf	??_RTXVisDec,w
  8103  0A9A  0021               	movlb	1	; select bank1
  8104  0A9B  00B2               	movwf	RTXVisDec@posDec^(0+128)
  8105  0A9C                     l5331:	
  8106                           
  8107                           ;RTX.c: 342: }
  8108                           ;RTX.c: 344: if(isDec)
  8109  0A9C  0021               	movlb	1	; select bank1
  8110  0A9D  0833               	movf	RTXVisDec@isDec^(0+128),w
  8111  0A9E  1903               	btfsc	3,2
  8112  0A9F  2ABD               	goto	l5337
  8113                           
  8114                           ;RTX.c: 345: {
  8115                           ;RTX.c: 346: if((i-posDec)>2)
  8116  0AA0  0832               	movf	RTXVisDec@posDec^(0+128),w
  8117  0AA1  0020               	movlb	0	; select bank0
  8118  0AA2  00DD               	movwf	??_RTXVisDec
  8119  0AA3  01DE               	clrf	??_RTXVisDec+1
  8120  0AA4  09DD               	comf	??_RTXVisDec,f
  8121  0AA5  09DE               	comf	??_RTXVisDec+1,f
  8122  0AA6  0ADD               	incf	??_RTXVisDec,f
  8123  0AA7  1903               	skipnz
  8124  0AA8  0ADE               	incf	??_RTXVisDec+1,f
  8125  0AA9  0021               	movlb	1	; select bank1
  8126  0AAA  0836               	movf	RTXVisDec@i^(0+128),w
  8127  0AAB  0020               	movlb	0	; select bank0
  8128  0AAC  075D               	addwf	??_RTXVisDec,w
  8129  0AAD  00DF               	movwf	??_RTXVisDec+2
  8130  0AAE  085E               	movf	??_RTXVisDec+1,w
  8131  0AAF  1803               	skipnc
  8132  0AB0  0A5E               	incf	??_RTXVisDec+1,w
  8133  0AB1  00E0               	movwf	??_RTXVisDec+3
  8134  0AB2  0860               	movf	??_RTXVisDec+3,w
  8135  0AB3  3A80               	xorlw	128
  8136  0AB4  00E1               	movwf	??_RTXVisDec+4
  8137  0AB5  3080               	movlw	128
  8138  0AB6  0261               	subwf	??_RTXVisDec+4,w
  8139  0AB7  1D03               	skipz
  8140  0AB8  2ABB               	goto	u5935
  8141  0AB9  3003               	movlw	3
  8142  0ABA  025F               	subwf	??_RTXVisDec+2,w
  8143  0ABB                     u5935:	
  8144  0ABB  1803               	btfsc	3,0
  8145  0ABC  2AE5               	goto	l5347
  8146  0ABD                     l5337:	
  8147                           ;RTX.c: 347: break;
  8148                           
  8149                           
  8150                           ;RTX.c: 348: }
  8151                           ;RTX.c: 350: if((*(p+i))==0x00)
  8152  0ABD  0021               	movlb	1	; select bank1
  8153  0ABE  0836               	movf	RTXVisDec@i^(0+128),w
  8154  0ABF  0734               	addwf	RTXVisDec@p^(0+128),w
  8155  0AC0  0020               	movlb	0	; select bank0
  8156  0AC1  00DD               	movwf	??_RTXVisDec
  8157  0AC2  085D               	movf	??_RTXVisDec,w
  8158  0AC3  0086               	movwf	6
  8159  0AC4  3001               	movlw	1	; select bank2/3
  8160  0AC5  0087               	movwf	7
  8161  0AC6  0801               	movf	1,w
  8162  0AC7  1903               	btfsc	3,2
  8163  0AC8  2AE5               	goto	l5347
  8164                           
  8165                           ;RTX.c: 353: strTmp[i]=(*(p+i));
  8166                           
  8167                           ;RTX.c: 351: break;
  8168  0AC9  0021               	movlb	1	; select bank1
  8169  0ACA  0836               	movf	RTXVisDec@i^(0+128),w
  8170  0ACB  0734               	addwf	RTXVisDec@p^(0+128),w
  8171  0ACC  0020               	movlb	0	; select bank0
  8172  0ACD  00DD               	movwf	??_RTXVisDec
  8173  0ACE  085D               	movf	??_RTXVisDec,w
  8174  0ACF  0086               	movwf	6
  8175  0AD0  3001               	movlw	1	; select bank2/3
  8176  0AD1  0087               	movwf	7
  8177  0AD2  0801               	movf	1,w
  8178  0AD3  00DE               	movwf	??_RTXVisDec+1
  8179  0AD4  0021               	movlb	1	; select bank1
  8180  0AD5  0836               	movf	RTXVisDec@i^(0+128),w
  8181  0AD6  3EA0               	addlw	(low (RTXVisDec@strTmp| 0))& (0+255)
  8182  0AD7  0086               	movwf	6
  8183  0AD8  0187               	clrf	7
  8184  0AD9  0020               	movlb	0	; select bank0
  8185  0ADA  085E               	movf	??_RTXVisDec+1,w
  8186  0ADB  0081               	movwf	1
  8187  0ADC  3001               	movlw	1
  8188  0ADD  00DD               	movwf	??_RTXVisDec
  8189  0ADE  085D               	movf	??_RTXVisDec,w
  8190  0ADF  0021               	movlb	1	; select bank1
  8191  0AE0  07B6               	addwf	RTXVisDec@i^(0+128),f
  8192  0AE1  3010               	movlw	16
  8193  0AE2  0236               	subwf	RTXVisDec@i^(0+128),w
  8194  0AE3  1C03               	skipc
  8195  0AE4  2A87               	goto	l5325
  8196  0AE5                     l5347:	
  8197                           
  8198                           ;RTX.c: 354: }
  8199                           ;RTX.c: 357: if(i>=maxDigit)
  8200  0AE5  0020               	movlb	0	; select bank0
  8201  0AE6  085B               	movf	RTXVisDec@maxDigit,w
  8202  0AE7  0021               	movlb	1	; select bank1
  8203  0AE8  0236               	subwf	RTXVisDec@i^(0+128),w
  8204  0AE9  1C03               	skipc
  8205  0AEA  2AF2               	goto	l5351
  8206                           
  8207                           ;RTX.c: 358: i=maxDigit-1;
  8208  0AEB  0020               	movlb	0	; select bank0
  8209  0AEC  085B               	movf	RTXVisDec@maxDigit,w
  8210  0AED  3EFF               	addlw	255
  8211  0AEE  00DD               	movwf	??_RTXVisDec
  8212  0AEF  085D               	movf	??_RTXVisDec,w
  8213  0AF0  0021               	movlb	1	; select bank1
  8214  0AF1  00B6               	movwf	RTXVisDec@i^(0+128)
  8215  0AF2                     l5351:	
  8216                           
  8217                           ;RTX.c: 361: for(j=0;j<i;j++)
  8218  0AF2  01B5               	clrf	RTXVisDec@j^(0+128)
  8219  0AF3                     l5357:	
  8220  0AF3  0836               	movf	RTXVisDec@i^(0+128),w
  8221  0AF4  0235               	subwf	RTXVisDec@j^(0+128),w
  8222  0AF5  1803               	btfsc	3,0
  8223  0AF6  2B11               	goto	l5359
  8224                           
  8225                           ;RTX.c: 362: (*(buff+j+offset))=strTmp[j];
  8226  0AF7  0835               	movf	RTXVisDec@j^(0+128),w
  8227  0AF8  3EA0               	addlw	(low (RTXVisDec@strTmp| 0))& (0+255)
  8228  0AF9  0086               	movwf	6
  8229  0AFA  0187               	clrf	7
  8230  0AFB  0801               	movf	1,w
  8231  0AFC  0020               	movlb	0	; select bank0
  8232  0AFD  00DD               	movwf	??_RTXVisDec
  8233  0AFE  085C               	movf	RTXVisDec@offset,w
  8234  0AFF  075A               	addwf	RTXVisDec@buff,w
  8235  0B00  00DE               	movwf	??_RTXVisDec+1
  8236  0B01  0021               	movlb	1	; select bank1
  8237  0B02  0835               	movf	RTXVisDec@j^(0+128),w
  8238  0B03  0020               	movlb	0	; select bank0
  8239  0B04  075E               	addwf	??_RTXVisDec+1,w
  8240  0B05  00DF               	movwf	??_RTXVisDec+2
  8241  0B06  085F               	movf	??_RTXVisDec+2,w
  8242  0B07  0086               	movwf	6
  8243  0B08  0187               	clrf	7
  8244  0B09  085D               	movf	??_RTXVisDec,w
  8245  0B0A  0081               	movwf	1
  8246  0B0B  3001               	movlw	1
  8247  0B0C  00DD               	movwf	??_RTXVisDec
  8248  0B0D  085D               	movf	??_RTXVisDec,w
  8249  0B0E  0021               	movlb	1	; select bank1
  8250  0B0F  07B5               	addwf	RTXVisDec@j^(0+128),f
  8251  0B10  2AF3               	goto	l5357
  8252  0B11                     l5359:	
  8253                           
  8254                           ;RTX.c: 364: return (j+offset);
  8255  0B11  0835               	movf	RTXVisDec@j^(0+128),w
  8256  0B12  0020               	movlb	0	; select bank0
  8257  0B13  075C               	addwf	RTXVisDec@offset,w
  8258  0B14  0008               	return
  8259  0B15                     __end_of_RTXVisDec:	
  8260                           
  8261                           	psect	text29
  8262  09CB                     __ptext29:	
  8263 ;; *************** function _ftoa *****************
  8264 ;; Defined at:
  8265 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftoa.c"
  8266 ;; Parameters:    Size  Location     Type
  8267 ;;  f               3   41[BANK0 ] float 
  8268 ;;  status          1   44[BANK0 ] PTR int 
  8269 ;;		 -> RTXVisDec@status(2), 
  8270 ;; Auto vars:     Size  Location     Type
  8271 ;;  l               4   50[BANK0 ] unsigned long 
  8272 ;;  rem             4   46[BANK0 ] unsigned long 
  8273 ;;  cp              1   54[BANK0 ] PTR unsigned char 
  8274 ;;		 -> ftoa@buf(17), 
  8275 ;; Return value:  Size  Location     Type
  8276 ;;                  1    wreg      PTR unsigned char 
  8277 ;; Registers used:
  8278 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8279 ;; Tracked objects:
  8280 ;;		On entry : 0/0
  8281 ;;		On exit  : 0/0
  8282 ;;		Unchanged: 0/0
  8283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8284 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8285 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8286 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8287 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8288 ;;Total ram usage:       14 bytes
  8289 ;; Hardware stack levels used:    1
  8290 ;; Hardware stack levels required when called:    5
  8291 ;; This function calls:
  8292 ;;		___ftge
  8293 ;;		___ftmul
  8294 ;;		___ftneg
  8295 ;;		___ftsub
  8296 ;;		___fttol
  8297 ;;		___lltoft
  8298 ;;		_sprintf
  8299 ;; This function is called by:
  8300 ;;		_RTXVisDec
  8301 ;; This function uses a non-reentrant model
  8302 ;;
  8303                           
  8304                           
  8305                           ;psect for function _ftoa
  8306  09CB                     _ftoa:	
  8307                           
  8308                           ;incstack = 0
  8309                           ; Regs used in _ftoa: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8310  09CB  30D8               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  8311  09CC  0020               	movlb	0	; select bank0
  8312  09CD  00CD               	movwf	??_ftoa
  8313  09CE  084D               	movf	??_ftoa,w
  8314  09CF  00D6               	movwf	ftoa@cp
  8315  09D0  0849               	movf	ftoa@f,w
  8316  09D1  00F1               	movwf	___ftge@ff1
  8317  09D2  084A               	movf	ftoa@f+1,w
  8318  09D3  00F2               	movwf	___ftge@ff1+1
  8319  09D4  084B               	movf	ftoa@f+2,w
  8320  09D5  00F3               	movwf	___ftge@ff1+2
  8321  09D6  3000               	movlw	0
  8322  09D7  00F4               	movwf	___ftge@ff2
  8323  09D8  3000               	movlw	0
  8324  09D9  00F5               	movwf	___ftge@ff2+1
  8325  09DA  3000               	movlw	0
  8326  09DB  00F6               	movwf	___ftge@ff2+2
  8327  09DC  3195  2575  3189   	fcall	___ftge
  8328  09DF  1803               	btfsc	3,0
  8329  09E0  29FE               	goto	l5205
  8330  09E1  302D               	movlw	45
  8331  09E2  0020               	movlb	0	; select bank0
  8332  09E3  00CD               	movwf	??_ftoa
  8333  09E4  0856               	movf	ftoa@cp,w
  8334  09E5  0086               	movwf	6
  8335  09E6  3001               	movlw	1	; select bank2/3
  8336  09E7  0087               	movwf	7
  8337  09E8  084D               	movf	??_ftoa,w
  8338  09E9  0081               	movwf	1
  8339  09EA  3001               	movlw	1
  8340  09EB  00CD               	movwf	??_ftoa
  8341  09EC  084D               	movf	??_ftoa,w
  8342  09ED  07D6               	addwf	ftoa@cp,f
  8343  09EE  0849               	movf	ftoa@f,w
  8344  09EF  00F1               	movwf	___ftneg@f1
  8345  09F0  084A               	movf	ftoa@f+1,w
  8346  09F1  00F2               	movwf	___ftneg@f1+1
  8347  09F2  084B               	movf	ftoa@f+2,w
  8348  09F3  00F3               	movwf	___ftneg@f1+2
  8349  09F4  3190  202A  3189   	fcall	___ftneg
  8350  09F7  0871               	movf	?___ftneg,w
  8351  09F8  0020               	movlb	0	; select bank0
  8352  09F9  00C9               	movwf	ftoa@f
  8353  09FA  0872               	movf	?___ftneg+1,w
  8354  09FB  00CA               	movwf	ftoa@f+1
  8355  09FC  0873               	movf	?___ftneg+2,w
  8356  09FD  00CB               	movwf	ftoa@f+2
  8357  09FE                     l5205:	
  8358  09FE  0020               	movlb	0	; select bank0
  8359  09FF  0849               	movf	ftoa@f,w
  8360  0A00  00B0               	movwf	___fttol@f1
  8361  0A01  084A               	movf	ftoa@f+1,w
  8362  0A02  00B1               	movwf	___fttol@f1+1
  8363  0A03  084B               	movf	ftoa@f+2,w
  8364  0A04  00B2               	movwf	___fttol@f1+2
  8365  0A05  3189  2144  3189   	fcall	___fttol
  8366  0A08  0020               	movlb	0	; select bank0
  8367  0A09  0833               	movf	?___fttol+3,w
  8368  0A0A  00D5               	movwf	ftoa@l+3
  8369  0A0B  0832               	movf	?___fttol+2,w
  8370  0A0C  00D4               	movwf	ftoa@l+2
  8371  0A0D  0831               	movf	?___fttol+1,w
  8372  0A0E  00D3               	movwf	ftoa@l+1
  8373  0A0F  0830               	movf	?___fttol,w
  8374  0A10  00D2               	movwf	ftoa@l
  8375  0A11  0855               	movf	ftoa@l+3,w
  8376  0A12  00A3               	movwf	___lltoft@c+3
  8377  0A13  0854               	movf	ftoa@l+2,w
  8378  0A14  00A2               	movwf	___lltoft@c+2
  8379  0A15  0853               	movf	ftoa@l+1,w
  8380  0A16  00A1               	movwf	___lltoft@c+1
  8381  0A17  0852               	movf	ftoa@l,w
  8382  0A18  00A0               	movwf	___lltoft@c
  8383  0A19  3193  238A  3189   	fcall	___lltoft
  8384  0A1C  0020               	movlb	0	; select bank0
  8385  0A1D  0820               	movf	?___lltoft,w
  8386  0A1E  00AA               	movwf	___ftsub@f2
  8387  0A1F  0821               	movf	?___lltoft+1,w
  8388  0A20  00AB               	movwf	___ftsub@f2+1
  8389  0A21  0822               	movf	?___lltoft+2,w
  8390  0A22  00AC               	movwf	___ftsub@f2+2
  8391  0A23  0849               	movf	ftoa@f,w
  8392  0A24  00AD               	movwf	___ftsub@f1
  8393  0A25  084A               	movf	ftoa@f+1,w
  8394  0A26  00AE               	movwf	___ftsub@f1+1
  8395  0A27  084B               	movf	ftoa@f+2,w
  8396  0A28  00AF               	movwf	___ftsub@f1+2
  8397  0A29  3191  21EC  3189   	fcall	___ftsub
  8398  0A2C  0020               	movlb	0	; select bank0
  8399  0A2D  082A               	movf	?___ftsub,w
  8400  0A2E  00C9               	movwf	ftoa@f
  8401  0A2F  082B               	movf	?___ftsub+1,w
  8402  0A30  00CA               	movwf	ftoa@f+1
  8403  0A31  082C               	movf	?___ftsub+2,w
  8404  0A32  00CB               	movwf	ftoa@f+2
  8405  0A33  0849               	movf	ftoa@f,w
  8406  0A34  00A3               	movwf	___ftmul@f2
  8407  0A35  084A               	movf	ftoa@f+1,w
  8408  0A36  00A4               	movwf	___ftmul@f2+1
  8409  0A37  084B               	movf	ftoa@f+2,w
  8410  0A38  00A5               	movwf	___ftmul@f2+2
  8411  0A39  3024               	movlw	36
  8412  0A3A  00A0               	movwf	___ftmul@f1
  8413  0A3B  3074               	movlw	116
  8414  0A3C  00A1               	movwf	___ftmul@f1+1
  8415  0A3D  3049               	movlw	73
  8416  0A3E  00A2               	movwf	___ftmul@f1+2
  8417  0A3F  318B  2315  3189   	fcall	___ftmul
  8418  0A42  0020               	movlb	0	; select bank0
  8419  0A43  0820               	movf	?___ftmul,w
  8420  0A44  00B0               	movwf	___fttol@f1
  8421  0A45  0821               	movf	?___ftmul+1,w
  8422  0A46  00B1               	movwf	___fttol@f1+1
  8423  0A47  0822               	movf	?___ftmul+2,w
  8424  0A48  00B2               	movwf	___fttol@f1+2
  8425  0A49  3189  2144  3189   	fcall	___fttol
  8426  0A4C  0020               	movlb	0	; select bank0
  8427  0A4D  0833               	movf	?___fttol+3,w
  8428  0A4E  00D1               	movwf	ftoa@rem+3
  8429  0A4F  0832               	movf	?___fttol+2,w
  8430  0A50  00D0               	movwf	ftoa@rem+2
  8431  0A51  0831               	movf	?___fttol+1,w
  8432  0A52  00CF               	movwf	ftoa@rem+1
  8433  0A53  0830               	movf	?___fttol,w
  8434  0A54  00CE               	movwf	ftoa@rem
  8435  0A55  3033               	movlw	low (STR_1| (0+32768))
  8436  0A56  00AD               	movwf	sprintf@f
  8437  0A57  3098               	movlw	high (STR_1| (0+32768))
  8438  0A58  00AE               	movwf	sprintf@f+1
  8439  0A59  0855               	movf	ftoa@l+3,w
  8440  0A5A  00B2               	movwf	?_sprintf+5
  8441  0A5B  0854               	movf	ftoa@l+2,w
  8442  0A5C  00B1               	movwf	?_sprintf+4
  8443  0A5D  0853               	movf	ftoa@l+1,w
  8444  0A5E  00B0               	movwf	?_sprintf+3
  8445  0A5F  0852               	movf	ftoa@l,w
  8446  0A60  00AF               	movwf	?_sprintf+2
  8447  0A61  0851               	movf	ftoa@rem+3,w
  8448  0A62  00B6               	movwf	?_sprintf+9
  8449  0A63  0850               	movf	ftoa@rem+2,w
  8450  0A64  00B5               	movwf	?_sprintf+8
  8451  0A65  084F               	movf	ftoa@rem+1,w
  8452  0A66  00B4               	movwf	?_sprintf+7
  8453  0A67  084E               	movf	ftoa@rem,w
  8454  0A68  00B3               	movwf	?_sprintf+6
  8455  0A69  0856               	movf	ftoa@cp,w
  8456  0A6A  318E  261D         	fcall	_sprintf
  8457  0A6C  30D8               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  8458  0A6D  0008               	return
  8459  0A6E                     __end_of_ftoa:	
  8460                           
  8461                           	psect	text30
  8462  0E1D                     __ptext30:	
  8463 ;; *************** function _sprintf *****************
  8464 ;; Defined at:
  8465 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  8466 ;; Parameters:    Size  Location     Type
  8467 ;;  sp              1    wreg     PTR unsigned char 
  8468 ;;		 -> ftoa@buf(17), 
  8469 ;;  f               2   13[BANK0 ] PTR const unsigned char 
  8470 ;;		 -> STR_1(11), 
  8471 ;; Auto vars:     Size  Location     Type
  8472 ;;  sp              1   35[BANK0 ] PTR unsigned char 
  8473 ;;		 -> ftoa@buf(17), 
  8474 ;;  val             4   31[BANK0 ] unsigned long 
  8475 ;;  tmpval          4    0        struct .
  8476 ;;  prec            2   38[BANK0 ] int 
  8477 ;;  width           2   36[BANK0 ] int 
  8478 ;;  cp              2    0        PTR const unsigned char 
  8479 ;;  len             2    0        unsigned int 
  8480 ;;  c               1   40[BANK0 ] char 
  8481 ;;  ap              1   30[BANK0 ] PTR void [1]
  8482 ;;		 -> ?_sprintf(2), 
  8483 ;;  flag            1   29[BANK0 ] unsigned char 
  8484 ;; Return value:  Size  Location     Type
  8485 ;;                  2   13[BANK0 ] int 
  8486 ;; Registers used:
  8487 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8488 ;; Tracked objects:
  8489 ;;		On entry : 0/0
  8490 ;;		On exit  : 0/0
  8491 ;;		Unchanged: 0/0
  8492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8493 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8494 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8495 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8496 ;;      Totals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8497 ;;Total ram usage:       28 bytes
  8498 ;; Hardware stack levels used:    1
  8499 ;; Hardware stack levels required when called:    3
  8500 ;; This function calls:
  8501 ;;		___lldiv
  8502 ;;		___llmod
  8503 ;;		___wmul
  8504 ;;		_isdigit
  8505 ;; This function is called by:
  8506 ;;		_ftoa
  8507 ;; This function uses a non-reentrant model
  8508 ;;
  8509                           
  8510                           
  8511                           ;psect for function _sprintf
  8512  0E1D                     _sprintf:	
  8513                           
  8514                           ;incstack = 0
  8515                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8516                           ;sprintf@sp stored from wreg
  8517  0E1D  0020               	movlb	0	; select bank0
  8518  0E1E  00C3               	movwf	sprintf@sp
  8519                           
  8520                           ;doprnt.c: 494: va_list ap;
  8521                           ;doprnt.c: 499: signed char c;
  8522                           ;doprnt.c: 501: int width;
  8523                           ;doprnt.c: 504: int prec;
  8524                           ;doprnt.c: 508: unsigned char flag;
  8525                           ;doprnt.c: 523: union {
  8526                           ;doprnt.c: 524: unsigned long vd;
  8527                           ;doprnt.c: 525: double integ;
  8528                           ;doprnt.c: 526: } tmpval;
  8529                           ;doprnt.c: 528: unsigned long val;
  8530                           ;doprnt.c: 529: unsigned len;
  8531                           ;doprnt.c: 530: const char * cp;
  8532                           ;doprnt.c: 533: *ap = __va_start();
  8533  0E1F  302F               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  8534  0E20  00B7               	movwf	??_sprintf
  8535  0E21  0837               	movf	??_sprintf,w
  8536  0E22  00BE               	movwf	sprintf@ap
  8537  0E23                     l3409:	
  8538                           ;doprnt.c: 536: while(c = *f++) {
  8539                           
  8540  0E23  082E               	movf	sprintf@f+1,w
  8541  0E24  00B8               	movwf	??_sprintf+1
  8542  0E25  082D               	movf	sprintf@f,w
  8543  0E26  00B7               	movwf	??_sprintf
  8544  0E27  0AAD               	incf	sprintf@f,f
  8545  0E28  1903               	skipnz
  8546  0E29  0AAE               	incf	sprintf@f+1,f
  8547  0E2A  0837               	movf	??_sprintf,w
  8548  0E2B  0084               	movwf	4
  8549  0E2C  0838               	movf	??_sprintf+1,w
  8550  0E2D  0085               	movwf	5
  8551  0E2E  0800               	movf	0,w	;code access
  8552  0E2F  00B9               	movwf	??_sprintf+2
  8553  0E30  0839               	movf	??_sprintf+2,w
  8554  0E31  00C8               	movwf	sprintf@c
  8555  0E32  0848               	movf	sprintf@c,w
  8556  0E33  1903               	btfsc	3,2
  8557  0E34  2FFA               	goto	l3411
  8558                           
  8559                           ;doprnt.c: 538: if(c != '%')
  8560  0E35  3025               	movlw	37
  8561  0E36  0648               	xorwf	sprintf@c,w
  8562  0E37  1903               	btfsc	3,2
  8563  0E38  2E46               	goto	l3319
  8564                           
  8565                           ;doprnt.c: 540: {
  8566                           ;doprnt.c: 541: ((*sp++ = (c)));
  8567  0E39  0848               	movf	sprintf@c,w
  8568  0E3A  00B7               	movwf	??_sprintf
  8569  0E3B  0843               	movf	sprintf@sp,w
  8570  0E3C  0086               	movwf	6
  8571  0E3D  3001               	movlw	1	; select bank2/3
  8572  0E3E  0087               	movwf	7
  8573  0E3F  0837               	movf	??_sprintf,w
  8574  0E40  0081               	movwf	1
  8575  0E41  3001               	movlw	1
  8576  0E42  00B7               	movwf	??_sprintf
  8577  0E43  0837               	movf	??_sprintf,w
  8578  0E44  07C3               	addwf	sprintf@sp,f
  8579                           
  8580                           ;doprnt.c: 542: continue;
  8581  0E45  2E23               	goto	l3409
  8582  0E46                     l3319:	
  8583                           
  8584                           ;doprnt.c: 543: }
  8585                           ;doprnt.c: 546: width = 0;
  8586  0E46  01C4               	clrf	sprintf@width
  8587  0E47  01C5               	clrf	sprintf@width+1
  8588                           
  8589                           ;doprnt.c: 548: flag = 0;
  8590  0E48  01BD               	clrf	sprintf@flag
  8591                           
  8592                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  8593  0E49  082D               	movf	sprintf@f,w
  8594  0E4A  0084               	movwf	4
  8595  0E4B  082E               	movf	sprintf@f+1,w
  8596  0E4C  0085               	movwf	5
  8597  0E4D  0800               	movf	0,w	;code access
  8598  0E4E  3190  2064  318E   	fcall	_isdigit
  8599  0E51  1C03               	btfss	3,0
  8600  0E52  2E84               	goto	l3333
  8601                           
  8602                           ;doprnt.c: 598: width = 0;
  8603  0E53  0020               	movlb	0	; select bank0
  8604  0E54  01C4               	clrf	sprintf@width
  8605  0E55  01C5               	clrf	sprintf@width+1
  8606  0E56                     l3325:	
  8607                           ;doprnt.c: 599: do {
  8608                           
  8609                           
  8610                           ;doprnt.c: 600: width *= 10;
  8611  0E56  300A               	movlw	10
  8612  0E57  00F1               	movwf	___wmul@multiplier
  8613  0E58  3000               	movlw	0
  8614  0E59  00F2               	movwf	___wmul@multiplier+1
  8615  0E5A  0020               	movlb	0	; select bank0
  8616  0E5B  0845               	movf	sprintf@width+1,w
  8617  0E5C  00F4               	movwf	___wmul@multiplicand+1
  8618  0E5D  0844               	movf	sprintf@width,w
  8619  0E5E  00F3               	movwf	___wmul@multiplicand
  8620  0E5F  3187  27E5  318E   	fcall	___wmul
  8621  0E62  0872               	movf	?___wmul+1,w
  8622  0E63  0020               	movlb	0	; select bank0
  8623  0E64  00C5               	movwf	sprintf@width+1
  8624  0E65  0871               	movf	?___wmul,w
  8625  0E66  00C4               	movwf	sprintf@width
  8626                           
  8627                           ;doprnt.c: 601: width += *f++ - '0';
  8628  0E67  082D               	movf	sprintf@f,w
  8629  0E68  0084               	movwf	4
  8630  0E69  082E               	movf	sprintf@f+1,w
  8631  0E6A  0085               	movwf	5
  8632  0E6B  0800               	movf	0,w	;code access
  8633  0E6C  3ED0               	addlw	208
  8634  0E6D  00B7               	movwf	??_sprintf
  8635  0E6E  30FF               	movlw	255
  8636  0E6F  1803               	skipnc
  8637  0E70  3000               	movlw	0
  8638  0E71  00B8               	movwf	??_sprintf+1
  8639  0E72  0837               	movf	??_sprintf,w
  8640  0E73  07C4               	addwf	sprintf@width,f
  8641  0E74  0838               	movf	??_sprintf+1,w
  8642  0E75  3DC5               	addwfc	sprintf@width+1,f
  8643  0E76  3001               	movlw	1
  8644  0E77  07AD               	addwf	sprintf@f,f
  8645  0E78  3000               	movlw	0
  8646  0E79  3DAE               	addwfc	sprintf@f+1,f
  8647                           
  8648                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  8649  0E7A  082D               	movf	sprintf@f,w
  8650  0E7B  0084               	movwf	4
  8651  0E7C  082E               	movf	sprintf@f+1,w
  8652  0E7D  0085               	movwf	5
  8653  0E7E  0800               	movf	0,w	;code access
  8654  0E7F  3190  2064  318E   	fcall	_isdigit
  8655  0E82  1803               	btfsc	3,0
  8656  0E83  2E56               	goto	l3325
  8657  0E84                     l3333:	
  8658                           
  8659                           ;doprnt.c: 608: }
  8660                           ;doprnt.c: 611: if(*f == '.') {
  8661  0E84  0020               	movlb	0	; select bank0
  8662  0E85  082D               	movf	sprintf@f,w
  8663  0E86  0084               	movwf	4
  8664  0E87  082E               	movf	sprintf@f+1,w
  8665  0E88  0085               	movwf	5
  8666  0E89  0012               	moviw fsr0++
  8667  0E8A  3A2E               	xorlw	46
  8668  0E8B  1D03               	btfss	3,2
  8669  0E8C  2EC2               	goto	l3345
  8670                           
  8671                           ;doprnt.c: 613: f++;
  8672  0E8D  3001               	movlw	1
  8673  0E8E  07AD               	addwf	sprintf@f,f
  8674  0E8F  3000               	movlw	0
  8675  0E90  3DAE               	addwfc	sprintf@f+1,f
  8676                           
  8677                           ;doprnt.c: 620: {
  8678                           ;doprnt.c: 621: prec = 0;
  8679  0E91  01C6               	clrf	sprintf@prec
  8680  0E92  01C7               	clrf	sprintf@prec+1
  8681  0E93                     l3343:	
  8682                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  8683                           
  8684  0E93  082D               	movf	sprintf@f,w
  8685  0E94  0084               	movwf	4
  8686  0E95  082E               	movf	sprintf@f+1,w
  8687  0E96  0085               	movwf	5
  8688  0E97  0800               	movf	0,w	;code access
  8689  0E98  3190  2064  318E   	fcall	_isdigit
  8690  0E9B  1C03               	btfss	3,0
  8691  0E9C  2ECD               	goto	l3351
  8692                           
  8693                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  8694  0E9D  0020               	movlb	0	; select bank0
  8695  0E9E  082D               	movf	sprintf@f,w
  8696  0E9F  0084               	movwf	4
  8697  0EA0  082E               	movf	sprintf@f+1,w
  8698  0EA1  0085               	movwf	5
  8699  0EA2  0800               	movf	0,w	;code access
  8700  0EA3  00B7               	movwf	??_sprintf
  8701  0EA4  01B8               	clrf	??_sprintf+1
  8702  0EA5  0847               	movf	sprintf@prec+1,w
  8703  0EA6  00F2               	movwf	___wmul@multiplier+1
  8704  0EA7  0846               	movf	sprintf@prec,w
  8705  0EA8  00F1               	movwf	___wmul@multiplier
  8706  0EA9  300A               	movlw	10
  8707  0EAA  00F3               	movwf	___wmul@multiplicand
  8708  0EAB  3000               	movlw	0
  8709  0EAC  00F4               	movwf	___wmul@multiplicand+1
  8710  0EAD  3187  27E5  318E   	fcall	___wmul
  8711  0EB0  0020               	movlb	0	; select bank0
  8712  0EB1  0837               	movf	??_sprintf,w
  8713  0EB2  0771               	addwf	?___wmul,w
  8714  0EB3  00B9               	movwf	??_sprintf+2
  8715  0EB4  0838               	movf	??_sprintf+1,w
  8716  0EB5  3D72               	addwfc	?___wmul+1,w
  8717  0EB6  00BA               	movwf	??_sprintf+3
  8718  0EB7  0839               	movf	??_sprintf+2,w
  8719  0EB8  3ED0               	addlw	208
  8720  0EB9  00C6               	movwf	sprintf@prec
  8721  0EBA  30FF               	movlw	255
  8722  0EBB  3D3A               	addwfc	??_sprintf+3,w
  8723  0EBC  00C7               	movwf	sprintf@prec+1
  8724  0EBD  3001               	movlw	1
  8725  0EBE  07AD               	addwf	sprintf@f,f
  8726  0EBF  3000               	movlw	0
  8727  0EC0  3DAE               	addwfc	sprintf@f+1,f
  8728  0EC1  2E93               	goto	l3343
  8729  0EC2                     l3345:	
  8730                           ;doprnt.c: 624: }
  8731                           ;doprnt.c: 625: } else {
  8732                           
  8733                           
  8734                           ;doprnt.c: 626: prec = 0;
  8735  0EC2  0020               	movlb	0	; select bank0
  8736  0EC3  01C6               	clrf	sprintf@prec
  8737  0EC4  01C7               	clrf	sprintf@prec+1
  8738                           
  8739                           ;doprnt.c: 635: switch(c = *f++) {
  8740                           
  8741                           ;doprnt.c: 630: }
  8742                           ;doprnt.c: 633: loop:
  8743  0EC5  2ECD               	goto	l3351
  8744  0EC6                     l820:	
  8745                           ;doprnt.c: 641: case 'l':
  8746                           
  8747                           ;doprnt.c: 638: goto alldone;
  8748                           
  8749                           ;doprnt.c: 637: case 0:
  8750                           
  8751                           
  8752                           ;doprnt.c: 643: flag |= 0x10;
  8753  0EC6  163D               	bsf	sprintf@flag,4
  8754                           
  8755                           ;doprnt.c: 644: goto loop;
  8756  0EC7  2ECD               	goto	l3351
  8757  0EC8                     l3347:	
  8758                           ;doprnt.c: 817: case 'u':
  8759                           
  8760                           ;doprnt.c: 813: continue;
  8761                           
  8762                           ;doprnt.c: 802: default:
  8763                           
  8764                           
  8765                           ;doprnt.c: 818: flag |= 0xC0;
  8766  0EC8  30C0               	movlw	192
  8767  0EC9  00B7               	movwf	??_sprintf
  8768  0ECA  0837               	movf	??_sprintf,w
  8769  0ECB  04BD               	iorwf	sprintf@flag,f
  8770                           
  8771                           ;doprnt.c: 822: }
  8772                           
  8773                           ;doprnt.c: 819: break;
  8774  0ECC  2EE5               	goto	l823
  8775  0ECD                     l3351:	
  8776  0ECD  0020               	movlb	0	; select bank0
  8777  0ECE  082E               	movf	sprintf@f+1,w
  8778  0ECF  00B8               	movwf	??_sprintf+1
  8779  0ED0  082D               	movf	sprintf@f,w
  8780  0ED1  00B7               	movwf	??_sprintf
  8781  0ED2  0AAD               	incf	sprintf@f,f
  8782  0ED3  1903               	skipnz
  8783  0ED4  0AAE               	incf	sprintf@f+1,f
  8784  0ED5  0837               	movf	??_sprintf,w
  8785  0ED6  0084               	movwf	4
  8786  0ED7  0838               	movf	??_sprintf+1,w
  8787  0ED8  0085               	movwf	5
  8788  0ED9  0800               	movf	0,w	;code access
  8789  0EDA  00C8               	movwf	sprintf@c
  8790                           
  8791                           ; Switch size 1, requested type "space"
  8792                           ; Number of cases is 3, Range of values is 0 to 117
  8793                           ; switch strategies available:
  8794                           ; Name         Instructions Cycles
  8795                           ; simple_byte           10     6 (average)
  8796                           ; direct_byte          242     6 (fixed)
  8797                           ; jumptable            260     6 (fixed)
  8798                           ;	Chosen strategy is simple_byte
  8799  0EDB  3A00               	xorlw	0	; case 0
  8800  0EDC  1903               	skipnz
  8801  0EDD  2FFA               	goto	l3411
  8802  0EDE  3A6C               	xorlw	108	; case 108
  8803  0EDF  1903               	skipnz
  8804  0EE0  2EC6               	goto	l820
  8805  0EE1  3A19               	xorlw	25	; case 117
  8806  0EE2  1903               	skipnz
  8807  0EE3  2EC8               	goto	l3347
  8808  0EE4  2E23               	goto	l3409
  8809  0EE5                     l823:	
  8810                           
  8811                           ;doprnt.c: 1273: {
  8812                           ;doprnt.c: 1281: if(flag & 0x10)
  8813  0EE5  1E3D               	btfss	sprintf@flag,4
  8814  0EE6  2EF4               	goto	l3357
  8815                           
  8816                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  8817  0EE7  083E               	movf	sprintf@ap,w
  8818  0EE8  0086               	movwf	6
  8819  0EE9  0187               	clrf	7
  8820  0EEA  3F40               	moviw [0]fsr1
  8821  0EEB  00BF               	movwf	sprintf@val
  8822  0EEC  3F41               	moviw [1]fsr1
  8823  0EED  00C0               	movwf	sprintf@val+1
  8824  0EEE  3F42               	moviw [2]fsr1
  8825  0EEF  00C1               	movwf	sprintf@val+2
  8826  0EF0  3F43               	moviw [3]fsr1
  8827  0EF1  00C2               	movwf	sprintf@val+3
  8828  0EF2  3004               	movlw	4
  8829  0EF3  2F02               	goto	L9
  8830  0EF4                     l3357:	
  8831                           
  8832                           ;doprnt.c: 1283: else
  8833                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  8834  0EF4  083E               	movf	sprintf@ap,w
  8835  0EF5  0086               	movwf	6
  8836  0EF6  0187               	clrf	7
  8837  0EF7  3F40               	moviw [0]fsr1
  8838  0EF8  00B7               	movwf	??_sprintf
  8839  0EF9  3F41               	moviw [1]fsr1
  8840  0EFA  00B8               	movwf	??_sprintf+1
  8841  0EFB  0837               	movf	??_sprintf,w
  8842  0EFC  00BF               	movwf	sprintf@val
  8843  0EFD  0838               	movf	??_sprintf+1,w
  8844  0EFE  00C0               	movwf	sprintf@val+1
  8845  0EFF  01C1               	clrf	sprintf@val+2
  8846  0F00  01C2               	clrf	sprintf@val+3
  8847  0F01  3002               	movlw	2
  8848  0F02                     L9:	
  8849  0F02  00B7               	movwf	??_sprintf
  8850  0F03  0837               	movf	??_sprintf,w
  8851  0F04  07BE               	addwf	sprintf@ap,f
  8852                           
  8853                           ;doprnt.c: 1287: }
  8854                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  8855  0F05  0846               	movf	sprintf@prec,w
  8856  0F06  0447               	iorwf	sprintf@prec+1,w
  8857  0F07  1D03               	btfss	3,2
  8858  0F08  2F13               	goto	l3367
  8859  0F09  0842               	movf	sprintf@val+3,w
  8860  0F0A  0441               	iorwf	sprintf@val+2,w
  8861  0F0B  0440               	iorwf	sprintf@val+1,w
  8862  0F0C  043F               	iorwf	sprintf@val,w
  8863  0F0D  1D03               	skipz
  8864  0F0E  2F13               	goto	l3367
  8865                           
  8866                           ;doprnt.c: 1291: prec++;
  8867  0F0F  3001               	movlw	1
  8868  0F10  07C6               	addwf	sprintf@prec,f
  8869  0F11  3000               	movlw	0
  8870  0F12  3DC7               	addwfc	sprintf@prec+1,f
  8871  0F13                     l3367:	
  8872                           
  8873                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  8874  0F13  01C8               	clrf	sprintf@c
  8875  0F14  0AC8               	incf	sprintf@c,f
  8876  0F15  300A               	movlw	10
  8877  0F16  0648               	xorwf	sprintf@c,w
  8878  0F17  1903               	btfsc	3,2
  8879  0F18  2F46               	goto	l3379
  8880  0F19                     l3373:	
  8881                           
  8882                           ;doprnt.c: 1306: if(val < dpowers[c])
  8883  0F19  0848               	movf	sprintf@c,w
  8884  0F1A  00B7               	movwf	??_sprintf
  8885  0F1B  01B8               	clrf	??_sprintf+1
  8886  0F1C  35B7               	lslf	??_sprintf,f
  8887  0F1D  0DB8               	rlf	??_sprintf+1,f
  8888  0F1E  35B7               	lslf	??_sprintf,f
  8889  0F1F  0DB8               	rlf	??_sprintf+1,f
  8890  0F20  3000               	movlw	low (_dpowers| (0+32768))
  8891  0F21  0737               	addwf	??_sprintf,w
  8892  0F22  0084               	movwf	4
  8893  0F23  3098               	movlw	high (_dpowers| (0+32768))
  8894  0F24  3D38               	addwfc	??_sprintf+1,w
  8895  0F25  0085               	movwf	5
  8896  0F26  3F00               	moviw [0]fsr0
  8897  0F27  00B9               	movwf	??_sprintf+2
  8898  0F28  3F01               	moviw [1]fsr0
  8899  0F29  00BA               	movwf	??_sprintf+3
  8900  0F2A  3F02               	moviw [2]fsr0
  8901  0F2B  00BB               	movwf	??_sprintf+4
  8902  0F2C  3F03               	moviw [3]fsr0
  8903  0F2D  00BC               	movwf	??_sprintf+5
  8904  0F2E  083C               	movf	??_sprintf+5,w
  8905  0F2F  0242               	subwf	sprintf@val+3,w
  8906  0F30  1D03               	skipz
  8907  0F31  2F3C               	goto	u3305
  8908  0F32  083B               	movf	??_sprintf+4,w
  8909  0F33  0241               	subwf	sprintf@val+2,w
  8910  0F34  1D03               	skipz
  8911  0F35  2F3C               	goto	u3305
  8912  0F36  083A               	movf	??_sprintf+3,w
  8913  0F37  0240               	subwf	sprintf@val+1,w
  8914  0F38  1D03               	skipz
  8915  0F39  2F3C               	goto	u3305
  8916  0F3A  0839               	movf	??_sprintf+2,w
  8917  0F3B  023F               	subwf	sprintf@val,w
  8918  0F3C                     u3305:	
  8919  0F3C  1C03               	btfss	3,0
  8920  0F3D  2F46               	goto	l3379
  8921                           
  8922                           ;doprnt.c: 1307: break;
  8923  0F3E  3001               	movlw	1
  8924  0F3F  00B7               	movwf	??_sprintf
  8925  0F40  0837               	movf	??_sprintf,w
  8926  0F41  07C8               	addwf	sprintf@c,f
  8927  0F42  300A               	movlw	10
  8928  0F43  0648               	xorwf	sprintf@c,w
  8929  0F44  1D03               	btfss	3,2
  8930  0F45  2F19               	goto	l3373
  8931  0F46                     l3379:	
  8932                           
  8933                           ;doprnt.c: 1339: if(c < prec)
  8934  0F46  0848               	movf	sprintf@c,w
  8935  0F47  00B7               	movwf	??_sprintf
  8936  0F48  01B8               	clrf	??_sprintf+1
  8937  0F49  1BB7               	btfsc	??_sprintf,7
  8938  0F4A  03B8               	decf	??_sprintf+1,f
  8939  0F4B  0838               	movf	??_sprintf+1,w
  8940  0F4C  3A80               	xorlw	128
  8941  0F4D  00B9               	movwf	??_sprintf+2
  8942  0F4E  0847               	movf	sprintf@prec+1,w
  8943  0F4F  3A80               	xorlw	128
  8944  0F50  0239               	subwf	??_sprintf+2,w
  8945  0F51  1D03               	skipz
  8946  0F52  2F55               	goto	u3325
  8947  0F53  0846               	movf	sprintf@prec,w
  8948  0F54  0237               	subwf	??_sprintf,w
  8949  0F55                     u3325:	
  8950  0F55  1803               	skipnc
  8951  0F56  2F5D               	goto	l3383
  8952                           
  8953                           ;doprnt.c: 1340: c = prec;
  8954  0F57  0020               	movlb	0	; select bank0
  8955  0F58  0846               	movf	sprintf@prec,w
  8956  0F59  00B7               	movwf	??_sprintf
  8957  0F5A  0837               	movf	??_sprintf,w
  8958  0F5B  00C8               	movwf	sprintf@c
  8959  0F5C  2F75               	goto	l3387
  8960  0F5D                     l3383:	
  8961                           
  8962                           ;doprnt.c: 1341: else if(prec < c)
  8963  0F5D  0020               	movlb	0	; select bank0
  8964  0F5E  0848               	movf	sprintf@c,w
  8965  0F5F  00B7               	movwf	??_sprintf
  8966  0F60  01B8               	clrf	??_sprintf+1
  8967  0F61  1BB7               	btfsc	??_sprintf,7
  8968  0F62  03B8               	decf	??_sprintf+1,f
  8969  0F63  0847               	movf	sprintf@prec+1,w
  8970  0F64  3A80               	xorlw	128
  8971  0F65  00B9               	movwf	??_sprintf+2
  8972  0F66  0838               	movf	??_sprintf+1,w
  8973  0F67  3A80               	xorlw	128
  8974  0F68  0239               	subwf	??_sprintf+2,w
  8975  0F69  1D03               	skipz
  8976  0F6A  2F6D               	goto	u3335
  8977  0F6B  0837               	movf	??_sprintf,w
  8978  0F6C  0246               	subwf	sprintf@prec,w
  8979  0F6D                     u3335:	
  8980  0F6D  1803               	skipnc
  8981  0F6E  2F75               	goto	l3387
  8982                           
  8983                           ;doprnt.c: 1342: prec = c;
  8984  0F6F  0020               	movlb	0	; select bank0
  8985  0F70  0848               	movf	sprintf@c,w
  8986  0F71  00C6               	movwf	sprintf@prec
  8987  0F72  01C7               	clrf	sprintf@prec+1
  8988  0F73  1BC6               	btfsc	sprintf@prec,7
  8989  0F74  03C7               	decf	sprintf@prec+1,f
  8990  0F75                     l3387:	
  8991                           
  8992                           ;doprnt.c: 1381: if(width > c)
  8993  0F75  0020               	movlb	0	; select bank0
  8994  0F76  0848               	movf	sprintf@c,w
  8995  0F77  00B7               	movwf	??_sprintf
  8996  0F78  01B8               	clrf	??_sprintf+1
  8997  0F79  1BB7               	btfsc	??_sprintf,7
  8998  0F7A  03B8               	decf	??_sprintf+1,f
  8999  0F7B  0838               	movf	??_sprintf+1,w
  9000  0F7C  3A80               	xorlw	128
  9001  0F7D  00B9               	movwf	??_sprintf+2
  9002  0F7E  0845               	movf	sprintf@width+1,w
  9003  0F7F  3A80               	xorlw	128
  9004  0F80  0239               	subwf	??_sprintf+2,w
  9005  0F81  1D03               	skipz
  9006  0F82  2F85               	goto	u3345
  9007  0F83  0844               	movf	sprintf@width,w
  9008  0F84  0237               	subwf	??_sprintf,w
  9009  0F85                     u3345:	
  9010  0F85  1803               	skipnc
  9011  0F86  2F92               	goto	l3391
  9012                           
  9013                           ;doprnt.c: 1382: width -= c;
  9014  0F87  0020               	movlb	0	; select bank0
  9015  0F88  0848               	movf	sprintf@c,w
  9016  0F89  00B7               	movwf	??_sprintf
  9017  0F8A  01B8               	clrf	??_sprintf+1
  9018  0F8B  1BB7               	btfsc	??_sprintf,7
  9019  0F8C  03B8               	decf	??_sprintf+1,f
  9020  0F8D  0837               	movf	??_sprintf,w
  9021  0F8E  02C4               	subwf	sprintf@width,f
  9022  0F8F  0838               	movf	??_sprintf+1,w
  9023  0F90  3BC5               	subwfb	sprintf@width+1,f
  9024  0F91  2F95               	goto	l3393
  9025  0F92                     l3391:	
  9026                           
  9027                           ;doprnt.c: 1383: else
  9028                           ;doprnt.c: 1384: width = 0;
  9029  0F92  0020               	movlb	0	; select bank0
  9030  0F93  01C4               	clrf	sprintf@width
  9031  0F94  01C5               	clrf	sprintf@width+1
  9032  0F95                     l3393:	
  9033                           
  9034                           ;doprnt.c: 1422: {
  9035                           ;doprnt.c: 1424: if(width
  9036                           ;doprnt.c: 1428: )
  9037  0F95  0844               	movf	sprintf@width,w
  9038  0F96  0445               	iorwf	sprintf@width+1,w
  9039  0F97  1903               	btfsc	3,2
  9040  0F98  2FEF               	goto	l3407
  9041                           
  9042                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  9043                           
  9044                           ;doprnt.c: 1429: do
  9045  0F99  3020               	movlw	32
  9046  0F9A  00B7               	movwf	??_sprintf
  9047  0F9B  0843               	movf	sprintf@sp,w
  9048  0F9C  0086               	movwf	6
  9049  0F9D  3001               	movlw	1	; select bank2/3
  9050  0F9E  0087               	movwf	7
  9051  0F9F  0837               	movf	??_sprintf,w
  9052  0FA0  0081               	movwf	1
  9053  0FA1  3001               	movlw	1
  9054  0FA2  00B7               	movwf	??_sprintf
  9055  0FA3  0837               	movf	??_sprintf,w
  9056  0FA4  07C3               	addwf	sprintf@sp,f
  9057                           
  9058                           ;doprnt.c: 1431: while(--width);
  9059  0FA5  30FF               	movlw	255
  9060  0FA6  07C4               	addwf	sprintf@width,f
  9061  0FA7  30FF               	movlw	255
  9062  0FA8  3DC5               	addwfc	sprintf@width+1,f
  9063  0FA9  2F95               	goto	l3393
  9064  0FAA                     l3401:	
  9065                           ;doprnt.c: 1469: }
  9066                           ;doprnt.c: 1474: while(prec--) {
  9067                           
  9068                           
  9069                           ;doprnt.c: 1478: {
  9070                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  9071  0FAA  3000               	movlw	0
  9072  0FAB  00A8               	movwf	___llmod@divisor+3
  9073  0FAC  3000               	movlw	0
  9074  0FAD  00A7               	movwf	___llmod@divisor+2
  9075  0FAE  3000               	movlw	0
  9076  0FAF  00A6               	movwf	___llmod@divisor+1
  9077  0FB0  300A               	movlw	10
  9078  0FB1  00A5               	movwf	___llmod@divisor
  9079  0FB2  0847               	movf	sprintf@prec+1,w
  9080  0FB3  0085               	movwf	5
  9081  0FB4  0846               	movf	sprintf@prec,w
  9082  0FB5  0084               	movwf	4
  9083  0FB6  3584               	lslf	4,f
  9084  0FB7  0D85               	rlf	5,f
  9085  0FB8  3584               	lslf	4,f
  9086  0FB9  0D85               	rlf	5,f
  9087  0FBA  3000               	movlw	low (_dpowers| (0+32768))
  9088  0FBB  0784               	addwf	4,f
  9089  0FBC  3098               	movlw	high (_dpowers| (0+32768))
  9090  0FBD  3D85               	addwfc	5,f
  9091  0FBE  3F00               	moviw [0]fsr0
  9092  0FBF  00F1               	movwf	___lldiv@divisor
  9093  0FC0  3F01               	moviw [1]fsr0
  9094  0FC1  00F2               	movwf	___lldiv@divisor+1
  9095  0FC2  3F02               	moviw [2]fsr0
  9096  0FC3  00F3               	movwf	___lldiv@divisor+2
  9097  0FC4  3F03               	moviw [3]fsr0
  9098  0FC5  00F4               	movwf	___lldiv@divisor+3
  9099  0FC6  0842               	movf	sprintf@val+3,w
  9100  0FC7  00F8               	movwf	___lldiv@dividend+3
  9101  0FC8  0841               	movf	sprintf@val+2,w
  9102  0FC9  00F7               	movwf	___lldiv@dividend+2
  9103  0FCA  0840               	movf	sprintf@val+1,w
  9104  0FCB  00F6               	movwf	___lldiv@dividend+1
  9105  0FCC  083F               	movf	sprintf@val,w
  9106  0FCD  00F5               	movwf	___lldiv@dividend
  9107  0FCE  3197  2757  318E   	fcall	___lldiv
  9108  0FD1  0874               	movf	?___lldiv+3,w
  9109  0FD2  0020               	movlb	0	; select bank0
  9110  0FD3  00AC               	movwf	___llmod@dividend+3
  9111  0FD4  0873               	movf	?___lldiv+2,w
  9112  0FD5  00AB               	movwf	___llmod@dividend+2
  9113  0FD6  0872               	movf	?___lldiv+1,w
  9114  0FD7  00AA               	movwf	___llmod@dividend+1
  9115  0FD8  0871               	movf	?___lldiv,w
  9116  0FD9  00A9               	movwf	___llmod@dividend
  9117  0FDA  3196  262E  318E   	fcall	___llmod
  9118  0FDD  0020               	movlb	0	; select bank0
  9119  0FDE  0825               	movf	?___llmod,w
  9120  0FDF  3E30               	addlw	48
  9121  0FE0  00B7               	movwf	??_sprintf
  9122  0FE1  0837               	movf	??_sprintf,w
  9123  0FE2  00C8               	movwf	sprintf@c
  9124                           
  9125                           ;doprnt.c: 1523: }
  9126                           ;doprnt.c: 1524: ((*sp++ = (c)));
  9127  0FE3  0848               	movf	sprintf@c,w
  9128  0FE4  00B7               	movwf	??_sprintf
  9129  0FE5  0843               	movf	sprintf@sp,w
  9130  0FE6  0086               	movwf	6
  9131  0FE7  3001               	movlw	1	; select bank2/3
  9132  0FE8  0087               	movwf	7
  9133  0FE9  0837               	movf	??_sprintf,w
  9134  0FEA  0081               	movwf	1
  9135  0FEB  3001               	movlw	1
  9136  0FEC  00B7               	movwf	??_sprintf
  9137  0FED  0837               	movf	??_sprintf,w
  9138  0FEE  07C3               	addwf	sprintf@sp,f
  9139  0FEF                     l3407:	
  9140  0FEF  30FF               	movlw	255
  9141  0FF0  07C6               	addwf	sprintf@prec,f
  9142  0FF1  30FF               	movlw	255
  9143  0FF2  3DC7               	addwfc	sprintf@prec+1,f
  9144  0FF3  0A46               	incf	sprintf@prec,w
  9145  0FF4  1D03               	skipz
  9146  0FF5  2FAA               	goto	l3401
  9147  0FF6  0A47               	incf	sprintf@prec+1,w
  9148  0FF7  1903               	btfsc	3,2
  9149  0FF8  2E23               	goto	l3409
  9150  0FF9  2FAA               	goto	l3401
  9151  0FFA                     l3411:	
  9152                           ;doprnt.c: 1525: }
  9153                           ;doprnt.c: 1533: }
  9154                           ;doprnt.c: 1535: alldone:
  9155                           
  9156                           
  9157                           ;doprnt.c: 1538: *sp = 0;
  9158  0FFA  0843               	movf	sprintf@sp,w
  9159  0FFB  0086               	movwf	6
  9160  0FFC  3001               	movlw	1	; select bank2/3
  9161  0FFD  0087               	movwf	7
  9162  0FFE  0181               	clrf	1
  9163  0FFF  0008               	return
  9164  1000                     __end_of_sprintf:	
  9165                           ;doprnt.c: 1540: return 0;
  9166                           ;	Return value of _sprintf is never used
  9167                           
  9168                           
  9169                           	psect	text31
  9170  1064                     __ptext31:	
  9171 ;; *************** function _isdigit *****************
  9172 ;; Defined at:
  9173 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  9174 ;; Parameters:    Size  Location     Type
  9175 ;;  c               1    wreg     unsigned char 
  9176 ;; Auto vars:     Size  Location     Type
  9177 ;;  c               1    2[COMMON] unsigned char 
  9178 ;; Return value:  Size  Location     Type
  9179 ;;		None               void
  9180 ;; Registers used:
  9181 ;;		wreg, status,2, status,0
  9182 ;; Tracked objects:
  9183 ;;		On entry : 0/0
  9184 ;;		On exit  : 0/0
  9185 ;;		Unchanged: 0/0
  9186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9187 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9188 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9189 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9190 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9191 ;;Total ram usage:        2 bytes
  9192 ;; Hardware stack levels used:    1
  9193 ;; Hardware stack levels required when called:    2
  9194 ;; This function calls:
  9195 ;;		Nothing
  9196 ;; This function is called by:
  9197 ;;		_sprintf
  9198 ;; This function uses a non-reentrant model
  9199 ;;
  9200                           
  9201                           
  9202                           ;psect for function _isdigit
  9203  1064                     _isdigit:	
  9204                           
  9205                           ;incstack = 0
  9206                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  9207                           ;isdigit@c stored from wreg
  9208  1064  00F2               	movwf	isdigit@c
  9209  1065  01F1               	clrf	_isdigit$1264
  9210  1066  303A               	movlw	58
  9211  1067  0272               	subwf	isdigit@c,w
  9212  1068  1803               	skipnc
  9213  1069  2870               	goto	l3159
  9214  106A  3030               	movlw	48
  9215  106B  0272               	subwf	isdigit@c,w
  9216  106C  1C03               	skipc
  9217  106D  2870               	goto	l3159
  9218  106E  01F1               	clrf	_isdigit$1264
  9219  106F  0AF1               	incf	_isdigit$1264,f
  9220  1070                     l3159:	
  9221  1070  0C71               	rrf	_isdigit$1264,w
  9222  1071  0008               	return
  9223  1072                     __end_of_isdigit:	
  9224                           
  9225                           	psect	text32
  9226  07E5                     __ptext32:	
  9227 ;; *************** function ___wmul *****************
  9228 ;; Defined at:
  9229 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  9230 ;; Parameters:    Size  Location     Type
  9231 ;;  multiplier      2    1[COMMON] unsigned int 
  9232 ;;  multiplicand    2    3[COMMON] unsigned int 
  9233 ;; Auto vars:     Size  Location     Type
  9234 ;;  product         2    5[COMMON] unsigned int 
  9235 ;; Return value:  Size  Location     Type
  9236 ;;                  2    1[COMMON] unsigned int 
  9237 ;; Registers used:
  9238 ;;		wreg, status,2, status,0
  9239 ;; Tracked objects:
  9240 ;;		On entry : 0/0
  9241 ;;		On exit  : 0/0
  9242 ;;		Unchanged: 0/0
  9243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9244 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9245 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9246 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9247 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9248 ;;Total ram usage:        6 bytes
  9249 ;; Hardware stack levels used:    1
  9250 ;; Hardware stack levels required when called:    2
  9251 ;; This function calls:
  9252 ;;		Nothing
  9253 ;; This function is called by:
  9254 ;;		_sprintf
  9255 ;; This function uses a non-reentrant model
  9256 ;;
  9257                           
  9258                           
  9259                           ;psect for function ___wmul
  9260  07E5                     ___wmul:	
  9261                           
  9262                           ;incstack = 0
  9263                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  9264  07E5  01F5               	clrf	___wmul@product
  9265  07E6  01F6               	clrf	___wmul@product+1
  9266  07E7                     l3165:	
  9267  07E7  1C71               	btfss	___wmul@multiplier,0
  9268  07E8  2FED               	goto	l846
  9269  07E9  0873               	movf	___wmul@multiplicand,w
  9270  07EA  07F5               	addwf	___wmul@product,f
  9271  07EB  0874               	movf	___wmul@multiplicand+1,w
  9272  07EC  3DF6               	addwfc	___wmul@product+1,f
  9273  07ED                     l846:	
  9274  07ED  3001               	movlw	1
  9275  07EE                     u2795:	
  9276  07EE  35F3               	lslf	___wmul@multiplicand,f
  9277  07EF  0DF4               	rlf	___wmul@multiplicand+1,f
  9278  07F0  0B89               	decfsz	9,f
  9279  07F1  2FEE               	goto	u2795
  9280  07F2  3001               	movlw	1
  9281  07F3                     u2805:	
  9282  07F3  36F2               	lsrf	___wmul@multiplier+1,f
  9283  07F4  0CF1               	rrf	___wmul@multiplier,f
  9284  07F5  0B89               	decfsz	9,f
  9285  07F6  2FF3               	goto	u2805
  9286  07F7  0871               	movf	___wmul@multiplier,w
  9287  07F8  0472               	iorwf	___wmul@multiplier+1,w
  9288  07F9  1D03               	btfss	3,2
  9289  07FA  2FE7               	goto	l3165
  9290  07FB  0876               	movf	___wmul@product+1,w
  9291  07FC  00F2               	movwf	?___wmul+1
  9292  07FD  0875               	movf	___wmul@product,w
  9293  07FE  00F1               	movwf	?___wmul
  9294  07FF  0008               	return
  9295  0800                     __end_of___wmul:	
  9296                           
  9297                           	psect	text33
  9298  162E                     __ptext33:	
  9299 ;; *************** function ___llmod *****************
  9300 ;; Defined at:
  9301 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
  9302 ;; Parameters:    Size  Location     Type
  9303 ;;  divisor         4    5[BANK0 ] unsigned long 
  9304 ;;  dividend        4    9[BANK0 ] unsigned long 
  9305 ;; Auto vars:     Size  Location     Type
  9306 ;;  counter         1   11[COMMON] unsigned char 
  9307 ;; Return value:  Size  Location     Type
  9308 ;;                  4    5[BANK0 ] unsigned long 
  9309 ;; Registers used:
  9310 ;;		wreg, status,2, status,0
  9311 ;; Tracked objects:
  9312 ;;		On entry : 0/0
  9313 ;;		On exit  : 0/0
  9314 ;;		Unchanged: 0/0
  9315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9316 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9317 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9318 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9319 ;;      Totals:         2       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9320 ;;Total ram usage:       10 bytes
  9321 ;; Hardware stack levels used:    1
  9322 ;; Hardware stack levels required when called:    2
  9323 ;; This function calls:
  9324 ;;		Nothing
  9325 ;; This function is called by:
  9326 ;;		_sprintf
  9327 ;; This function uses a non-reentrant model
  9328 ;;
  9329                           
  9330                           
  9331                           ;psect for function ___llmod
  9332  162E                     ___llmod:	
  9333                           
  9334                           ;incstack = 0
  9335                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  9336  162E  0020               	movlb	0	; select bank0
  9337  162F  0828               	movf	___llmod@divisor+3,w
  9338  1630  0427               	iorwf	___llmod@divisor+2,w
  9339  1631  0426               	iorwf	___llmod@divisor+1,w
  9340  1632  0425               	iorwf	___llmod@divisor,w
  9341  1633  1903               	skipnz
  9342  1634  2E68               	goto	l3287
  9343  1635  01FB               	clrf	___llmod@counter
  9344  1636  0AFB               	incf	___llmod@counter,f
  9345  1637                     l3277:	
  9346  1637  1BA8               	btfsc	___llmod@divisor+3,7
  9347  1638  2E45               	goto	l3279
  9348  1639  3001               	movlw	1
  9349  163A                     u3135:	
  9350  163A  35A5               	lslf	___llmod@divisor,f
  9351  163B  0DA6               	rlf	___llmod@divisor+1,f
  9352  163C  0DA7               	rlf	___llmod@divisor+2,f
  9353  163D  0DA8               	rlf	___llmod@divisor+3,f
  9354  163E  0B89               	decfsz	9,f
  9355  163F  2E3A               	goto	u3135
  9356  1640  3001               	movlw	1
  9357  1641  00FA               	movwf	??___llmod
  9358  1642  087A               	movf	??___llmod,w
  9359  1643  07FB               	addwf	___llmod@counter,f
  9360  1644  2E37               	goto	l3277
  9361  1645                     l3279:	
  9362  1645  0828               	movf	___llmod@divisor+3,w
  9363  1646  022C               	subwf	___llmod@dividend+3,w
  9364  1647  1D03               	skipz
  9365  1648  2E53               	goto	u3155
  9366  1649  0827               	movf	___llmod@divisor+2,w
  9367  164A  022B               	subwf	___llmod@dividend+2,w
  9368  164B  1D03               	skipz
  9369  164C  2E53               	goto	u3155
  9370  164D  0826               	movf	___llmod@divisor+1,w
  9371  164E  022A               	subwf	___llmod@dividend+1,w
  9372  164F  1D03               	skipz
  9373  1650  2E53               	goto	u3155
  9374  1651  0825               	movf	___llmod@divisor,w
  9375  1652  0229               	subwf	___llmod@dividend,w
  9376  1653                     u3155:	
  9377  1653  1C03               	skipc
  9378  1654  2E5D               	goto	l3283
  9379  1655  0825               	movf	___llmod@divisor,w
  9380  1656  02A9               	subwf	___llmod@dividend,f
  9381  1657  0826               	movf	___llmod@divisor+1,w
  9382  1658  3BAA               	subwfb	___llmod@dividend+1,f
  9383  1659  0827               	movf	___llmod@divisor+2,w
  9384  165A  3BAB               	subwfb	___llmod@dividend+2,f
  9385  165B  0828               	movf	___llmod@divisor+3,w
  9386  165C  3BAC               	subwfb	___llmod@dividend+3,f
  9387  165D                     l3283:	
  9388  165D  3001               	movlw	1
  9389  165E                     u3165:	
  9390  165E  36A8               	lsrf	___llmod@divisor+3,f
  9391  165F  0CA7               	rrf	___llmod@divisor+2,f
  9392  1660  0CA6               	rrf	___llmod@divisor+1,f
  9393  1661  0CA5               	rrf	___llmod@divisor,f
  9394  1662  0B89               	decfsz	9,f
  9395  1663  2E5E               	goto	u3165
  9396  1664  3001               	movlw	1
  9397  1665  02FB               	subwf	___llmod@counter,f
  9398  1666  1D03               	btfss	3,2
  9399  1667  2E45               	goto	l3279
  9400  1668                     l3287:	
  9401  1668  082C               	movf	___llmod@dividend+3,w
  9402  1669  00A8               	movwf	?___llmod+3
  9403  166A  082B               	movf	___llmod@dividend+2,w
  9404  166B  00A7               	movwf	?___llmod+2
  9405  166C  082A               	movf	___llmod@dividend+1,w
  9406  166D  00A6               	movwf	?___llmod+1
  9407  166E  0829               	movf	___llmod@dividend,w
  9408  166F  00A5               	movwf	?___llmod
  9409  1670  0008               	return
  9410  1671                     __end_of___llmod:	
  9411                           
  9412                           	psect	text34
  9413  1757                     __ptext34:	
  9414 ;; *************** function ___lldiv *****************
  9415 ;; Defined at:
  9416 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
  9417 ;; Parameters:    Size  Location     Type
  9418 ;;  divisor         4    1[COMMON] unsigned long 
  9419 ;;  dividend        4    5[COMMON] unsigned long 
  9420 ;; Auto vars:     Size  Location     Type
  9421 ;;  quotient        4    0[BANK0 ] unsigned long 
  9422 ;;  counter         1    4[BANK0 ] unsigned char 
  9423 ;; Return value:  Size  Location     Type
  9424 ;;                  4    1[COMMON] unsigned long 
  9425 ;; Registers used:
  9426 ;;		wreg, status,2, status,0
  9427 ;; Tracked objects:
  9428 ;;		On entry : 0/0
  9429 ;;		On exit  : 0/0
  9430 ;;		Unchanged: 0/0
  9431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9432 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9433 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9434 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9435 ;;      Totals:         9       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9436 ;;Total ram usage:       14 bytes
  9437 ;; Hardware stack levels used:    1
  9438 ;; Hardware stack levels required when called:    2
  9439 ;; This function calls:
  9440 ;;		Nothing
  9441 ;; This function is called by:
  9442 ;;		_sprintf
  9443 ;; This function uses a non-reentrant model
  9444 ;;
  9445                           
  9446                           
  9447                           ;psect for function ___lldiv
  9448  1757                     ___lldiv:	
  9449                           
  9450                           ;incstack = 0
  9451                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  9452  1757  3000               	movlw	0
  9453  1758  0020               	movlb	0	; select bank0
  9454  1759  00A3               	movwf	___lldiv@quotient+3
  9455  175A  3000               	movlw	0
  9456  175B  00A2               	movwf	___lldiv@quotient+2
  9457  175C  3000               	movlw	0
  9458  175D  00A1               	movwf	___lldiv@quotient+1
  9459  175E  3000               	movlw	0
  9460  175F  00A0               	movwf	___lldiv@quotient
  9461  1760  0874               	movf	___lldiv@divisor+3,w
  9462  1761  0473               	iorwf	___lldiv@divisor+2,w
  9463  1762  0472               	iorwf	___lldiv@divisor+1,w
  9464  1763  0471               	iorwf	___lldiv@divisor,w
  9465  1764  1903               	skipnz
  9466  1765  2FA1               	goto	l3267
  9467  1766  01A4               	clrf	___lldiv@counter
  9468  1767  0AA4               	incf	___lldiv@counter,f
  9469  1768                     l3253:	
  9470  1768  1BF4               	btfsc	___lldiv@divisor+3,7
  9471  1769  2F76               	goto	l3255
  9472  176A  3001               	movlw	1
  9473  176B                     u3065:	
  9474  176B  35F1               	lslf	___lldiv@divisor,f
  9475  176C  0DF2               	rlf	___lldiv@divisor+1,f
  9476  176D  0DF3               	rlf	___lldiv@divisor+2,f
  9477  176E  0DF4               	rlf	___lldiv@divisor+3,f
  9478  176F  0B89               	decfsz	9,f
  9479  1770  2F6B               	goto	u3065
  9480  1771  3001               	movlw	1
  9481  1772  00F9               	movwf	??___lldiv
  9482  1773  0879               	movf	??___lldiv,w
  9483  1774  07A4               	addwf	___lldiv@counter,f
  9484  1775  2F68               	goto	l3253
  9485  1776                     l3255:	
  9486  1776  3001               	movlw	1
  9487  1777                     u3085:	
  9488  1777  35A0               	lslf	___lldiv@quotient,f
  9489  1778  0DA1               	rlf	___lldiv@quotient+1,f
  9490  1779  0DA2               	rlf	___lldiv@quotient+2,f
  9491  177A  0DA3               	rlf	___lldiv@quotient+3,f
  9492  177B  0B89               	decfsz	9,f
  9493  177C  2F77               	goto	u3085
  9494  177D  0874               	movf	___lldiv@divisor+3,w
  9495  177E  0278               	subwf	___lldiv@dividend+3,w
  9496  177F  1D03               	skipz
  9497  1780  2F8B               	goto	u3095
  9498  1781  0873               	movf	___lldiv@divisor+2,w
  9499  1782  0277               	subwf	___lldiv@dividend+2,w
  9500  1783  1D03               	skipz
  9501  1784  2F8B               	goto	u3095
  9502  1785  0872               	movf	___lldiv@divisor+1,w
  9503  1786  0276               	subwf	___lldiv@dividend+1,w
  9504  1787  1D03               	skipz
  9505  1788  2F8B               	goto	u3095
  9506  1789  0871               	movf	___lldiv@divisor,w
  9507  178A  0275               	subwf	___lldiv@dividend,w
  9508  178B                     u3095:	
  9509  178B  1C03               	skipc
  9510  178C  2F96               	goto	l3263
  9511  178D  0871               	movf	___lldiv@divisor,w
  9512  178E  02F5               	subwf	___lldiv@dividend,f
  9513  178F  0872               	movf	___lldiv@divisor+1,w
  9514  1790  3BF6               	subwfb	___lldiv@dividend+1,f
  9515  1791  0873               	movf	___lldiv@divisor+2,w
  9516  1792  3BF7               	subwfb	___lldiv@dividend+2,f
  9517  1793  0874               	movf	___lldiv@divisor+3,w
  9518  1794  3BF8               	subwfb	___lldiv@dividend+3,f
  9519  1795  1420               	bsf	___lldiv@quotient,0
  9520  1796                     l3263:	
  9521  1796  3001               	movlw	1
  9522  1797                     u3105:	
  9523  1797  36F4               	lsrf	___lldiv@divisor+3,f
  9524  1798  0CF3               	rrf	___lldiv@divisor+2,f
  9525  1799  0CF2               	rrf	___lldiv@divisor+1,f
  9526  179A  0CF1               	rrf	___lldiv@divisor,f
  9527  179B  0B89               	decfsz	9,f
  9528  179C  2F97               	goto	u3105
  9529  179D  3001               	movlw	1
  9530  179E  02A4               	subwf	___lldiv@counter,f
  9531  179F  1D03               	btfss	3,2
  9532  17A0  2F76               	goto	l3255
  9533  17A1                     l3267:	
  9534  17A1  0823               	movf	___lldiv@quotient+3,w
  9535  17A2  00F4               	movwf	?___lldiv+3
  9536  17A3  0822               	movf	___lldiv@quotient+2,w
  9537  17A4  00F3               	movwf	?___lldiv+2
  9538  17A5  0821               	movf	___lldiv@quotient+1,w
  9539  17A6  00F2               	movwf	?___lldiv+1
  9540  17A7  0820               	movf	___lldiv@quotient,w
  9541  17A8  00F1               	movwf	?___lldiv
  9542  17A9  0008               	return
  9543  17AA                     __end_of___lldiv:	
  9544                           
  9545                           	psect	text35
  9546  138A                     __ptext35:	
  9547 ;; *************** function ___lltoft *****************
  9548 ;; Defined at:
  9549 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lltoft.c"
  9550 ;; Parameters:    Size  Location     Type
  9551 ;;  c               4    0[BANK0 ] unsigned long 
  9552 ;; Auto vars:     Size  Location     Type
  9553 ;;  exp             1   10[COMMON] unsigned char 
  9554 ;; Return value:  Size  Location     Type
  9555 ;;                  3    0[BANK0 ] float 
  9556 ;; Registers used:
  9557 ;;		wreg, status,2, status,0, pclath, cstack
  9558 ;; Tracked objects:
  9559 ;;		On entry : 0/0
  9560 ;;		On exit  : 0/0
  9561 ;;		Unchanged: 0/0
  9562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9563 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9564 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9565 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9566 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9567 ;;Total ram usage:        6 bytes
  9568 ;; Hardware stack levels used:    1
  9569 ;; Hardware stack levels required when called:    3
  9570 ;; This function calls:
  9571 ;;		___ftpack
  9572 ;; This function is called by:
  9573 ;;		_ftoa
  9574 ;; This function uses a non-reentrant model
  9575 ;;
  9576                           
  9577                           
  9578                           ;psect for function ___lltoft
  9579  138A                     ___lltoft:	
  9580                           
  9581                           ;incstack = 0
  9582                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  9583  138A  308E               	movlw	142
  9584  138B  00F9               	movwf	??___lltoft
  9585  138C  0879               	movf	??___lltoft,w
  9586  138D  00FA               	movwf	___lltoft@exp
  9587  138E                     l5129:	
  9588  138E  30FF               	movlw	255
  9589  138F  0020               	movlb	0	; select bank0
  9590  1390  0523               	andwf	___lltoft@c+3,w
  9591  1391  1903               	btfsc	3,2
  9592  1392  2BA0               	goto	l5131
  9593  1393  3001               	movlw	1
  9594  1394                     u5735:	
  9595  1394  0020               	movlb	0	; select bank0
  9596  1395  36A3               	lsrf	___lltoft@c+3,f
  9597  1396  0CA2               	rrf	___lltoft@c+2,f
  9598  1397  0CA1               	rrf	___lltoft@c+1,f
  9599  1398  0CA0               	rrf	___lltoft@c,f
  9600  1399  0B89               	decfsz	9,f
  9601  139A  2B94               	goto	u5735
  9602  139B  3001               	movlw	1
  9603  139C  00F9               	movwf	??___lltoft
  9604  139D  0879               	movf	??___lltoft,w
  9605  139E  07FA               	addwf	___lltoft@exp,f
  9606  139F  2B8E               	goto	l5129
  9607  13A0                     l5131:	
  9608  13A0  0820               	movf	___lltoft@c,w
  9609  13A1  00F1               	movwf	___ftpack@arg
  9610  13A2  0821               	movf	___lltoft@c+1,w
  9611  13A3  00F2               	movwf	___ftpack@arg+1
  9612  13A4  0822               	movf	___lltoft@c+2,w
  9613  13A5  00F3               	movwf	___ftpack@arg+2
  9614  13A6  087A               	movf	___lltoft@exp,w
  9615  13A7  00F9               	movwf	??___lltoft
  9616  13A8  0879               	movf	??___lltoft,w
  9617  13A9  00F4               	movwf	___ftpack@exp
  9618  13AA  01F5               	clrf	___ftpack@sign
  9619  13AB  3188  20E0         	fcall	___ftpack
  9620  13AD  0871               	movf	?___ftpack,w
  9621  13AE  0020               	movlb	0	; select bank0
  9622  13AF  00A0               	movwf	?___lltoft
  9623  13B0  0872               	movf	?___ftpack+1,w
  9624  13B1  00A1               	movwf	?___lltoft+1
  9625  13B2  0873               	movf	?___ftpack+2,w
  9626  13B3  00A2               	movwf	?___lltoft+2
  9627  13B4  0008               	return
  9628  13B5                     __end_of___lltoft:	
  9629                           
  9630                           	psect	text36
  9631  0944                     __ptext36:	
  9632 ;; *************** function ___fttol *****************
  9633 ;; Defined at:
  9634 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
  9635 ;; Parameters:    Size  Location     Type
  9636 ;;  f1              3   16[BANK0 ] float 
  9637 ;; Auto vars:     Size  Location     Type
  9638 ;;  lval            4   25[BANK0 ] unsigned long 
  9639 ;;  exp1            1   29[BANK0 ] unsigned char 
  9640 ;;  sign1           1   24[BANK0 ] unsigned char 
  9641 ;; Return value:  Size  Location     Type
  9642 ;;                  4   16[BANK0 ] long 
  9643 ;; Registers used:
  9644 ;;		wreg, status,2, status,0
  9645 ;; Tracked objects:
  9646 ;;		On entry : 0/0
  9647 ;;		On exit  : 0/0
  9648 ;;		Unchanged: 0/0
  9649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9650 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9651 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9652 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9653 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9654 ;;Total ram usage:       14 bytes
  9655 ;; Hardware stack levels used:    1
  9656 ;; Hardware stack levels required when called:    2
  9657 ;; This function calls:
  9658 ;;		Nothing
  9659 ;; This function is called by:
  9660 ;;		_ftoa
  9661 ;; This function uses a non-reentrant model
  9662 ;;
  9663                           
  9664                           
  9665                           ;psect for function ___fttol
  9666  0944                     ___fttol:	
  9667                           
  9668                           ;incstack = 0
  9669                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  9670  0944  0020               	movlb	0	; select bank0
  9671  0945  0830               	movf	___fttol@f1,w
  9672  0946  00B4               	movwf	??___fttol
  9673  0947  0831               	movf	___fttol@f1+1,w
  9674  0948  00B5               	movwf	??___fttol+1
  9675  0949  0832               	movf	___fttol@f1+2,w
  9676  094A  00B6               	movwf	??___fttol+2
  9677  094B  1003               	clrc
  9678  094C  0D35               	rlf	??___fttol+1,w
  9679  094D  0D36               	rlf	??___fttol+2,w
  9680  094E  00B7               	movwf	??___fttol+3
  9681  094F  0837               	movf	??___fttol+3,w
  9682  0950  00BD               	movwf	___fttol@exp1
  9683  0951  083D               	movf	___fttol@exp1,w
  9684  0952  1D03               	btfss	3,2
  9685  0953  295D               	goto	l3507
  9686  0954  3000               	movlw	0
  9687  0955  00B3               	movwf	?___fttol+3
  9688  0956  3000               	movlw	0
  9689  0957  00B2               	movwf	?___fttol+2
  9690  0958  3000               	movlw	0
  9691  0959  00B1               	movwf	?___fttol+1
  9692  095A  3000               	movlw	0
  9693  095B  00B0               	movwf	?___fttol
  9694  095C  0008               	return
  9695  095D                     l3507:	
  9696  095D  0830               	movf	___fttol@f1,w
  9697  095E  00B4               	movwf	??___fttol
  9698  095F  0831               	movf	___fttol@f1+1,w
  9699  0960  00B5               	movwf	??___fttol+1
  9700  0961  0832               	movf	___fttol@f1+2,w
  9701  0962  00B6               	movwf	??___fttol+2
  9702  0963  3017               	movlw	23
  9703  0964                     u3575:	
  9704  0964  36B6               	lsrf	??___fttol+2,f
  9705  0965  0CB5               	rrf	??___fttol+1,f
  9706  0966  0CB4               	rrf	??___fttol,f
  9707  0967  0B89               	decfsz	9,f
  9708  0968  2964               	goto	u3575
  9709  0969  0834               	movf	??___fttol,w
  9710  096A  00B7               	movwf	??___fttol+3
  9711  096B  0837               	movf	??___fttol+3,w
  9712  096C  00B8               	movwf	___fttol@sign1
  9713  096D  17B1               	bsf	___fttol@f1+1,7
  9714  096E  30FF               	movlw	255
  9715  096F  05B0               	andwf	___fttol@f1,f
  9716  0970  30FF               	movlw	255
  9717  0971  05B1               	andwf	___fttol@f1+1,f
  9718  0972  3000               	movlw	0
  9719  0973  05B2               	andwf	___fttol@f1+2,f
  9720  0974  0830               	movf	___fttol@f1,w
  9721  0975  00B9               	movwf	___fttol@lval
  9722  0976  0831               	movf	___fttol@f1+1,w
  9723  0977  00BA               	movwf	___fttol@lval+1
  9724  0978  0832               	movf	___fttol@f1+2,w
  9725  0979  00BB               	movwf	___fttol@lval+2
  9726  097A  01BC               	clrf	___fttol@lval+3
  9727  097B  308E               	movlw	142
  9728  097C  02BD               	subwf	___fttol@exp1,f
  9729  097D  1FBD               	btfss	___fttol@exp1,7
  9730  097E  299B               	goto	l3527
  9731  097F  083D               	movf	___fttol@exp1,w
  9732  0980  3A80               	xorlw	128
  9733  0981  3E8F               	addlw	143
  9734  0982  1803               	skipnc
  9735  0983  298D               	goto	l3525
  9736  0984  3000               	movlw	0
  9737  0985  00B3               	movwf	?___fttol+3
  9738  0986  3000               	movlw	0
  9739  0987  00B2               	movwf	?___fttol+2
  9740  0988  3000               	movlw	0
  9741  0989  00B1               	movwf	?___fttol+1
  9742  098A  3000               	movlw	0
  9743  098B  00B0               	movwf	?___fttol
  9744  098C  0008               	return
  9745  098D                     l3525:	
  9746  098D  3001               	movlw	1
  9747  098E                     u3605:	
  9748  098E  36BC               	lsrf	___fttol@lval+3,f
  9749  098F  0CBB               	rrf	___fttol@lval+2,f
  9750  0990  0CBA               	rrf	___fttol@lval+1,f
  9751  0991  0CB9               	rrf	___fttol@lval,f
  9752  0992  0B89               	decfsz	9,f
  9753  0993  298E               	goto	u3605
  9754  0994  3001               	movlw	1
  9755  0995  00B4               	movwf	??___fttol
  9756  0996  0834               	movf	??___fttol,w
  9757  0997  07BD               	addwf	___fttol@exp1,f
  9758  0998  1903               	btfsc	3,2
  9759  0999  29B4               	goto	l3535
  9760  099A  298D               	goto	l3525
  9761  099B                     l3527:	
  9762  099B  3018               	movlw	24
  9763  099C  023D               	subwf	___fttol@exp1,w
  9764  099D  1C03               	skipc
  9765  099E  29B1               	goto	l1106
  9766  099F  3000               	movlw	0
  9767  09A0  00B3               	movwf	?___fttol+3
  9768  09A1  3000               	movlw	0
  9769  09A2  00B2               	movwf	?___fttol+2
  9770  09A3  3000               	movlw	0
  9771  09A4  00B1               	movwf	?___fttol+1
  9772  09A5  3000               	movlw	0
  9773  09A6  00B0               	movwf	?___fttol
  9774  09A7  0008               	return
  9775  09A8                     l3533:	
  9776  09A8  3001               	movlw	1
  9777  09A9                     u3635:	
  9778  09A9  35B9               	lslf	___fttol@lval,f
  9779  09AA  0DBA               	rlf	___fttol@lval+1,f
  9780  09AB  0DBB               	rlf	___fttol@lval+2,f
  9781  09AC  0DBC               	rlf	___fttol@lval+3,f
  9782  09AD  0B89               	decfsz	9,f
  9783  09AE  29A9               	goto	u3635
  9784  09AF  3001               	movlw	1
  9785  09B0  02BD               	subwf	___fttol@exp1,f
  9786  09B1                     l1106:	
  9787  09B1  083D               	movf	___fttol@exp1,w
  9788  09B2  1D03               	btfss	3,2
  9789  09B3  29A8               	goto	l3533
  9790  09B4                     l3535:	
  9791  09B4  0838               	movf	___fttol@sign1,w
  9792  09B5  1903               	btfsc	3,2
  9793  09B6  29C2               	goto	l3539
  9794  09B7  09B9               	comf	___fttol@lval,f
  9795  09B8  09BA               	comf	___fttol@lval+1,f
  9796  09B9  09BB               	comf	___fttol@lval+2,f
  9797  09BA  09BC               	comf	___fttol@lval+3,f
  9798  09BB  0AB9               	incf	___fttol@lval,f
  9799  09BC  1903               	skipnz
  9800  09BD  0ABA               	incf	___fttol@lval+1,f
  9801  09BE  1903               	skipnz
  9802  09BF  0ABB               	incf	___fttol@lval+2,f
  9803  09C0  1903               	skipnz
  9804  09C1  0ABC               	incf	___fttol@lval+3,f
  9805  09C2                     l3539:	
  9806  09C2  083C               	movf	___fttol@lval+3,w
  9807  09C3  00B3               	movwf	?___fttol+3
  9808  09C4  083B               	movf	___fttol@lval+2,w
  9809  09C5  00B2               	movwf	?___fttol+2
  9810  09C6  083A               	movf	___fttol@lval+1,w
  9811  09C7  00B1               	movwf	?___fttol+1
  9812  09C8  0839               	movf	___fttol@lval,w
  9813  09C9  00B0               	movwf	?___fttol
  9814  09CA  0008               	return
  9815  09CB                     __end_of___fttol:	
  9816                           
  9817                           	psect	text37
  9818  11EC                     __ptext37:	
  9819 ;; *************** function ___ftsub *****************
  9820 ;; Defined at:
  9821 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftsub.c"
  9822 ;; Parameters:    Size  Location     Type
  9823 ;;  f2              3   10[BANK0 ] float 
  9824 ;;  f1              3   13[BANK0 ] float 
  9825 ;; Auto vars:     Size  Location     Type
  9826 ;;		None
  9827 ;; Return value:  Size  Location     Type
  9828 ;;                  3   10[BANK0 ] float 
  9829 ;; Registers used:
  9830 ;;		wreg, status,2, status,0, pclath, cstack
  9831 ;; Tracked objects:
  9832 ;;		On entry : 0/0
  9833 ;;		On exit  : 0/0
  9834 ;;		Unchanged: 0/0
  9835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9836 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9837 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9839 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9840 ;;Total ram usage:        6 bytes
  9841 ;; Hardware stack levels used:    1
  9842 ;; Hardware stack levels required when called:    4
  9843 ;; This function calls:
  9844 ;;		___ftadd
  9845 ;; This function is called by:
  9846 ;;		_ftoa
  9847 ;; This function uses a non-reentrant model
  9848 ;;
  9849                           
  9850                           
  9851                           ;psect for function ___ftsub
  9852  11EC                     ___ftsub:	
  9853                           
  9854                           ;incstack = 0
  9855                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  9856  11EC  0020               	movlb	0	; select bank0
  9857  11ED  082C               	movf	___ftsub@f2+2,w
  9858  11EE  042B               	iorwf	___ftsub@f2+1,w
  9859  11EF  042A               	iorwf	___ftsub@f2,w
  9860  11F0  1903               	skipnz
  9861  11F1  29F4               	goto	l5121
  9862  11F2  3080               	movlw	128
  9863  11F3  06AC               	xorwf	___ftsub@f2+2,f
  9864  11F4                     l5121:	
  9865  11F4  082D               	movf	___ftsub@f1,w
  9866  11F5  00A0               	movwf	___ftadd@f1
  9867  11F6  082E               	movf	___ftsub@f1+1,w
  9868  11F7  00A1               	movwf	___ftadd@f1+1
  9869  11F8  082F               	movf	___ftsub@f1+2,w
  9870  11F9  00A2               	movwf	___ftadd@f1+2
  9871  11FA  082A               	movf	___ftsub@f2,w
  9872  11FB  00A3               	movwf	___ftadd@f2
  9873  11FC  082B               	movf	___ftsub@f2+1,w
  9874  11FD  00A4               	movwf	___ftadd@f2+1
  9875  11FE  082C               	movf	___ftsub@f2+2,w
  9876  11FF  00A5               	movwf	___ftadd@f2+2
  9877  1200  3186  26EF         	fcall	___ftadd
  9878  1202  0020               	movlb	0	; select bank0
  9879  1203  0820               	movf	?___ftadd,w
  9880  1204  00AA               	movwf	?___ftsub
  9881  1205  0821               	movf	?___ftadd+1,w
  9882  1206  00AB               	movwf	?___ftsub+1
  9883  1207  0822               	movf	?___ftadd+2,w
  9884  1208  00AC               	movwf	?___ftsub+2
  9885  1209  0008               	return
  9886  120A                     __end_of___ftsub:	
  9887                           
  9888                           	psect	text38
  9889  06EF                     __ptext38:	
  9890 ;; *************** function ___ftadd *****************
  9891 ;; Defined at:
  9892 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftadd.c"
  9893 ;; Parameters:    Size  Location     Type
  9894 ;;  f1              3    0[BANK0 ] float 
  9895 ;;  f2              3    3[BANK0 ] float 
  9896 ;; Auto vars:     Size  Location     Type
  9897 ;;  exp1            1   11[COMMON] unsigned char 
  9898 ;;  exp2            1   10[COMMON] unsigned char 
  9899 ;;  sign            1    9[COMMON] unsigned char 
  9900 ;; Return value:  Size  Location     Type
  9901 ;;                  3    0[BANK0 ] float 
  9902 ;; Registers used:
  9903 ;;		wreg, status,2, status,0, pclath, cstack
  9904 ;; Tracked objects:
  9905 ;;		On entry : 0/0
  9906 ;;		On exit  : 0/0
  9907 ;;		Unchanged: 0/0
  9908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9909 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9910 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9911 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9912 ;;      Totals:         3      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9913 ;;Total ram usage:       13 bytes
  9914 ;; Hardware stack levels used:    1
  9915 ;; Hardware stack levels required when called:    3
  9916 ;; This function calls:
  9917 ;;		___ftpack
  9918 ;; This function is called by:
  9919 ;;		_RTXUpdateDisplay
  9920 ;;		___ftsub
  9921 ;; This function uses a non-reentrant model
  9922 ;;
  9923                           
  9924                           
  9925                           ;psect for function ___ftadd
  9926  06EF                     ___ftadd:	
  9927                           
  9928                           ;incstack = 0
  9929                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  9930  06EF  0020               	movlb	0	; select bank0
  9931  06F0  0820               	movf	___ftadd@f1,w
  9932  06F1  00A6               	movwf	??___ftadd
  9933  06F2  0821               	movf	___ftadd@f1+1,w
  9934  06F3  00A7               	movwf	??___ftadd+1
  9935  06F4  0822               	movf	___ftadd@f1+2,w
  9936  06F5  00A8               	movwf	??___ftadd+2
  9937  06F6  1003               	clrc
  9938  06F7  0D27               	rlf	??___ftadd+1,w
  9939  06F8  0D28               	rlf	??___ftadd+2,w
  9940  06F9  00A9               	movwf	??___ftadd+3
  9941  06FA  0829               	movf	??___ftadd+3,w
  9942  06FB  00FB               	movwf	___ftadd@exp1
  9943  06FC  0823               	movf	___ftadd@f2,w
  9944  06FD  00A6               	movwf	??___ftadd
  9945  06FE  0824               	movf	___ftadd@f2+1,w
  9946  06FF  00A7               	movwf	??___ftadd+1
  9947  0700  0825               	movf	___ftadd@f2+2,w
  9948  0701  00A8               	movwf	??___ftadd+2
  9949  0702  1003               	clrc
  9950  0703  0D27               	rlf	??___ftadd+1,w
  9951  0704  0D28               	rlf	??___ftadd+2,w
  9952  0705  00A9               	movwf	??___ftadd+3
  9953  0706  0829               	movf	??___ftadd+3,w
  9954  0707  00FA               	movwf	___ftadd@exp2
  9955  0708  087B               	movf	___ftadd@exp1,w
  9956  0709  1903               	btfsc	3,2
  9957  070A  2F17               	goto	l4983
  9958  070B  087A               	movf	___ftadd@exp2,w
  9959  070C  027B               	subwf	___ftadd@exp1,w
  9960  070D  1803               	skipnc
  9961  070E  2F1E               	goto	l4987
  9962  070F  037B               	decf	___ftadd@exp1,w
  9963  0710  3AFF               	xorlw	255
  9964  0711  077A               	addwf	___ftadd@exp2,w
  9965  0712  00A6               	movwf	??___ftadd
  9966  0713  3019               	movlw	25
  9967  0714  0226               	subwf	??___ftadd,w
  9968  0715  1C03               	skipc
  9969  0716  2F1E               	goto	l4987
  9970  0717                     l4983:	
  9971  0717  0823               	movf	___ftadd@f2,w
  9972  0718  00A0               	movwf	?___ftadd
  9973  0719  0824               	movf	___ftadd@f2+1,w
  9974  071A  00A1               	movwf	?___ftadd+1
  9975  071B  0825               	movf	___ftadd@f2+2,w
  9976  071C  00A2               	movwf	?___ftadd+2
  9977  071D  0008               	return
  9978  071E                     l4987:	
  9979  071E  087A               	movf	___ftadd@exp2,w
  9980  071F  1903               	btfsc	3,2
  9981  0720  0008               	return
  9982  0721  087B               	movf	___ftadd@exp1,w
  9983  0722  027A               	subwf	___ftadd@exp2,w
  9984  0723  1803               	skipnc
  9985  0724  2F2D               	goto	l4993
  9986  0725  037A               	decf	___ftadd@exp2,w
  9987  0726  3AFF               	xorlw	255
  9988  0727  077B               	addwf	___ftadd@exp1,w
  9989  0728  00A6               	movwf	??___ftadd
  9990  0729  3019               	movlw	25
  9991  072A  0226               	subwf	??___ftadd,w
  9992  072B  1803               	btfsc	3,0
  9993  072C  0008               	return
  9994  072D                     l4993:	
  9995  072D  3006               	movlw	6
  9996  072E  00A6               	movwf	??___ftadd
  9997  072F  0826               	movf	??___ftadd,w
  9998  0730  00F9               	movwf	___ftadd@sign
  9999  0731  1BA2               	btfsc	___ftadd@f1+2,7
 10000  0732  17F9               	bsf	___ftadd@sign,7
 10001  0733  1BA5               	btfsc	___ftadd@f2+2,7
 10002  0734  1779               	bsf	___ftadd@sign,6
 10003  0735  17A1               	bsf	___ftadd@f1+1,7
 10004  0736  30FF               	movlw	255
 10005  0737  05A0               	andwf	___ftadd@f1,f
 10006  0738  30FF               	movlw	255
 10007  0739  05A1               	andwf	___ftadd@f1+1,f
 10008  073A  3000               	movlw	0
 10009  073B  05A2               	andwf	___ftadd@f1+2,f
 10010  073C  17A4               	bsf	___ftadd@f2+1,7
 10011  073D  30FF               	movlw	255
 10012  073E  05A3               	andwf	___ftadd@f2,f
 10013  073F  30FF               	movlw	255
 10014  0740  05A4               	andwf	___ftadd@f2+1,f
 10015  0741  3000               	movlw	0
 10016  0742  05A5               	andwf	___ftadd@f2+2,f
 10017  0743  087A               	movf	___ftadd@exp2,w
 10018  0744  027B               	subwf	___ftadd@exp1,w
 10019  0745  1803               	skipnc
 10020  0746  2F69               	goto	l5015
 10021  0747                     l5005:	
 10022  0747  3001               	movlw	1
 10023  0748                     u5435:	
 10024  0748  35A3               	lslf	___ftadd@f2,f
 10025  0749  0DA4               	rlf	___ftadd@f2+1,f
 10026  074A  0DA5               	rlf	___ftadd@f2+2,f
 10027  074B  0B89               	decfsz	9,f
 10028  074C  2F48               	goto	u5435
 10029  074D  3001               	movlw	1
 10030  074E  02FA               	subwf	___ftadd@exp2,f
 10031  074F  087A               	movf	___ftadd@exp2,w
 10032  0750  067B               	xorwf	___ftadd@exp1,w
 10033  0751  1903               	skipnz
 10034  0752  2F64               	goto	l5013
 10035  0753  3001               	movlw	1
 10036  0754  02F9               	subwf	___ftadd@sign,f
 10037  0755  0879               	movf	___ftadd@sign,w
 10038  0756  3907               	andlw	7
 10039  0757  1903               	btfsc	3,2
 10040  0758  2F64               	goto	l5013
 10041  0759  2F47               	goto	l5005
 10042  075A                     l5011:	
 10043  075A  3001               	movlw	1
 10044  075B                     u5465:	
 10045  075B  36A2               	lsrf	___ftadd@f1+2,f
 10046  075C  0CA1               	rrf	___ftadd@f1+1,f
 10047  075D  0CA0               	rrf	___ftadd@f1,f
 10048  075E  0B89               	decfsz	9,f
 10049  075F  2F5B               	goto	u5465
 10050  0760  3001               	movlw	1
 10051  0761  00A6               	movwf	??___ftadd
 10052  0762  0826               	movf	??___ftadd,w
 10053  0763  07FB               	addwf	___ftadd@exp1,f
 10054  0764                     l5013:	
 10055  0764  087B               	movf	___ftadd@exp1,w
 10056  0765  067A               	xorwf	___ftadd@exp2,w
 10057  0766  1903               	btfsc	3,2
 10058  0767  2F8E               	goto	l1038
 10059  0768  2F5A               	goto	l5011
 10060  0769                     l5015:	
 10061  0769  087B               	movf	___ftadd@exp1,w
 10062  076A  027A               	subwf	___ftadd@exp2,w
 10063  076B  1803               	skipnc
 10064  076C  2F8E               	goto	l1038
 10065  076D                     l5017:	
 10066  076D  3001               	movlw	1
 10067  076E                     u5495:	
 10068  076E  35A0               	lslf	___ftadd@f1,f
 10069  076F  0DA1               	rlf	___ftadd@f1+1,f
 10070  0770  0DA2               	rlf	___ftadd@f1+2,f
 10071  0771  0B89               	decfsz	9,f
 10072  0772  2F6E               	goto	u5495
 10073  0773  3001               	movlw	1
 10074  0774  02FB               	subwf	___ftadd@exp1,f
 10075  0775  087A               	movf	___ftadd@exp2,w
 10076  0776  067B               	xorwf	___ftadd@exp1,w
 10077  0777  1903               	skipnz
 10078  0778  2F8A               	goto	l5025
 10079  0779  3001               	movlw	1
 10080  077A  02F9               	subwf	___ftadd@sign,f
 10081  077B  0879               	movf	___ftadd@sign,w
 10082  077C  3907               	andlw	7
 10083  077D  1903               	btfsc	3,2
 10084  077E  2F8A               	goto	l5025
 10085  077F  2F6D               	goto	l5017
 10086  0780                     l5023:	
 10087  0780  3001               	movlw	1
 10088  0781                     u5525:	
 10089  0781  36A5               	lsrf	___ftadd@f2+2,f
 10090  0782  0CA4               	rrf	___ftadd@f2+1,f
 10091  0783  0CA3               	rrf	___ftadd@f2,f
 10092  0784  0B89               	decfsz	9,f
 10093  0785  2F81               	goto	u5525
 10094  0786  3001               	movlw	1
 10095  0787  00A6               	movwf	??___ftadd
 10096  0788  0826               	movf	??___ftadd,w
 10097  0789  07FA               	addwf	___ftadd@exp2,f
 10098  078A                     l5025:	
 10099  078A  087B               	movf	___ftadd@exp1,w
 10100  078B  067A               	xorwf	___ftadd@exp2,w
 10101  078C  1D03               	skipz
 10102  078D  2F80               	goto	l5023
 10103  078E                     l1038:	
 10104  078E  1FF9               	btfss	___ftadd@sign,7
 10105  078F  2FA0               	goto	l5029
 10106  0790  30FF               	movlw	255
 10107  0791  06A0               	xorwf	___ftadd@f1,f
 10108  0792  30FF               	movlw	255
 10109  0793  06A1               	xorwf	___ftadd@f1+1,f
 10110  0794  30FF               	movlw	255
 10111  0795  06A2               	xorwf	___ftadd@f1+2,f
 10112  0796  3001               	movlw	1
 10113  0797  07A0               	addwf	___ftadd@f1,f
 10114  0798  3000               	movlw	0
 10115  0799  1803               	skipnc
 10116  079A  3001               	movlw	1
 10117  079B  07A1               	addwf	___ftadd@f1+1,f
 10118  079C  3000               	movlw	0
 10119  079D  1803               	skipnc
 10120  079E  3001               	movlw	1
 10121  079F  07A2               	addwf	___ftadd@f1+2,f
 10122  07A0                     l5029:	
 10123  07A0  1F79               	btfss	___ftadd@sign,6
 10124  07A1  2FB2               	goto	l5033
 10125  07A2  30FF               	movlw	255
 10126  07A3  06A3               	xorwf	___ftadd@f2,f
 10127  07A4  30FF               	movlw	255
 10128  07A5  06A4               	xorwf	___ftadd@f2+1,f
 10129  07A6  30FF               	movlw	255
 10130  07A7  06A5               	xorwf	___ftadd@f2+2,f
 10131  07A8  3001               	movlw	1
 10132  07A9  07A3               	addwf	___ftadd@f2,f
 10133  07AA  3000               	movlw	0
 10134  07AB  1803               	skipnc
 10135  07AC  3001               	movlw	1
 10136  07AD  07A4               	addwf	___ftadd@f2+1,f
 10137  07AE  3000               	movlw	0
 10138  07AF  1803               	skipnc
 10139  07B0  3001               	movlw	1
 10140  07B1  07A5               	addwf	___ftadd@f2+2,f
 10141  07B2                     l5033:	
 10142  07B2  01F9               	clrf	___ftadd@sign
 10143  07B3  0820               	movf	___ftadd@f1,w
 10144  07B4  07A3               	addwf	___ftadd@f2,f
 10145  07B5  0821               	movf	___ftadd@f1+1,w
 10146  07B6  3DA4               	addwfc	___ftadd@f2+1,f
 10147  07B7  0822               	movf	___ftadd@f1+2,w
 10148  07B8  3DA5               	addwfc	___ftadd@f2+2,f
 10149  07B9  1FA5               	btfss	___ftadd@f2+2,7
 10150  07BA  2FCD               	goto	l5043
 10151  07BB  30FF               	movlw	255
 10152  07BC  06A3               	xorwf	___ftadd@f2,f
 10153  07BD  30FF               	movlw	255
 10154  07BE  06A4               	xorwf	___ftadd@f2+1,f
 10155  07BF  30FF               	movlw	255
 10156  07C0  06A5               	xorwf	___ftadd@f2+2,f
 10157  07C1  3001               	movlw	1
 10158  07C2  07A3               	addwf	___ftadd@f2,f
 10159  07C3  3000               	movlw	0
 10160  07C4  1803               	skipnc
 10161  07C5  3001               	movlw	1
 10162  07C6  07A4               	addwf	___ftadd@f2+1,f
 10163  07C7  3000               	movlw	0
 10164  07C8  1803               	skipnc
 10165  07C9  3001               	movlw	1
 10166  07CA  07A5               	addwf	___ftadd@f2+2,f
 10167  07CB  01F9               	clrf	___ftadd@sign
 10168  07CC  0AF9               	incf	___ftadd@sign,f
 10169  07CD                     l5043:	
 10170  07CD  0823               	movf	___ftadd@f2,w
 10171  07CE  00F1               	movwf	___ftpack@arg
 10172  07CF  0824               	movf	___ftadd@f2+1,w
 10173  07D0  00F2               	movwf	___ftpack@arg+1
 10174  07D1  0825               	movf	___ftadd@f2+2,w
 10175  07D2  00F3               	movwf	___ftpack@arg+2
 10176  07D3  087B               	movf	___ftadd@exp1,w
 10177  07D4  00A6               	movwf	??___ftadd
 10178  07D5  0826               	movf	??___ftadd,w
 10179  07D6  00F4               	movwf	___ftpack@exp
 10180  07D7  0879               	movf	___ftadd@sign,w
 10181  07D8  00A7               	movwf	??___ftadd+1
 10182  07D9  0827               	movf	??___ftadd+1,w
 10183  07DA  00F5               	movwf	___ftpack@sign
 10184  07DB  3188  20E0         	fcall	___ftpack
 10185  07DD  0871               	movf	?___ftpack,w
 10186  07DE  0020               	movlb	0	; select bank0
 10187  07DF  00A0               	movwf	?___ftadd
 10188  07E0  0872               	movf	?___ftpack+1,w
 10189  07E1  00A1               	movwf	?___ftadd+1
 10190  07E2  0873               	movf	?___ftpack+2,w
 10191  07E3  00A2               	movwf	?___ftadd+2
 10192  07E4  0008               	return
 10193  07E5                     __end_of___ftadd:	
 10194                           
 10195                           	psect	text39
 10196  102A                     __ptext39:	
 10197 ;; *************** function ___ftneg *****************
 10198 ;; Defined at:
 10199 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftneg.c"
 10200 ;; Parameters:    Size  Location     Type
 10201 ;;  f1              3    1[COMMON] float 
 10202 ;; Auto vars:     Size  Location     Type
 10203 ;;		None
 10204 ;; Return value:  Size  Location     Type
 10205 ;;                  3    1[COMMON] float 
 10206 ;; Registers used:
 10207 ;;		wreg
 10208 ;; Tracked objects:
 10209 ;;		On entry : 0/0
 10210 ;;		On exit  : 0/0
 10211 ;;		Unchanged: 0/0
 10212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10213 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10214 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10216 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10217 ;;Total ram usage:        3 bytes
 10218 ;; Hardware stack levels used:    1
 10219 ;; Hardware stack levels required when called:    2
 10220 ;; This function calls:
 10221 ;;		Nothing
 10222 ;; This function is called by:
 10223 ;;		_RTXUpdateDisplay
 10224 ;;		_ftoa
 10225 ;; This function uses a non-reentrant model
 10226 ;;
 10227                           
 10228                           
 10229                           ;psect for function ___ftneg
 10230  102A                     ___ftneg:	
 10231                           
 10232                           ;incstack = 0
 10233                           ; Regs used in ___ftneg: [wreg]
 10234  102A  0873               	movf	___ftneg@f1+2,w
 10235  102B  0472               	iorwf	___ftneg@f1+1,w
 10236  102C  0471               	iorwf	___ftneg@f1,w
 10237  102D  1903               	skipnz
 10238  102E  0008               	return
 10239  102F  3080               	movlw	128
 10240  1030  06F3               	xorwf	___ftneg@f1+2,f
 10241  1031  0008               	return
 10242  1032                     __end_of___ftneg:	
 10243                           
 10244                           	psect	text40
 10245  0B15                     __ptext40:	
 10246 ;; *************** function ___ftmul *****************
 10247 ;; Defined at:
 10248 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
 10249 ;; Parameters:    Size  Location     Type
 10250 ;;  f1              3    0[BANK0 ] float 
 10251 ;;  f2              3    3[BANK0 ] float 
 10252 ;; Auto vars:     Size  Location     Type
 10253 ;;  f3_as_produc    3   11[BANK0 ] unsigned um
 10254 ;;  sign            1   15[BANK0 ] unsigned char 
 10255 ;;  cntr            1   14[BANK0 ] unsigned char 
 10256 ;;  exp             1   10[BANK0 ] unsigned char 
 10257 ;; Return value:  Size  Location     Type
 10258 ;;                  3    0[BANK0 ] float 
 10259 ;; Registers used:
 10260 ;;		wreg, status,2, status,0, pclath, cstack
 10261 ;; Tracked objects:
 10262 ;;		On entry : 0/0
 10263 ;;		On exit  : 0/0
 10264 ;;		Unchanged: 0/0
 10265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10266 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10267 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10268 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10269 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10270 ;;Total ram usage:       16 bytes
 10271 ;; Hardware stack levels used:    1
 10272 ;; Hardware stack levels required when called:    3
 10273 ;; This function calls:
 10274 ;;		___ftpack
 10275 ;; This function is called by:
 10276 ;;		_RTXReadPkt
 10277 ;;		_ftoa
 10278 ;; This function uses a non-reentrant model
 10279 ;;
 10280                           
 10281                           
 10282                           ;psect for function ___ftmul
 10283  0B15                     ___ftmul:	
 10284                           
 10285                           ;incstack = 0
 10286                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 10287  0B15  0020               	movlb	0	; select bank0
 10288  0B16  0820               	movf	___ftmul@f1,w
 10289  0B17  00A6               	movwf	??___ftmul
 10290  0B18  0821               	movf	___ftmul@f1+1,w
 10291  0B19  00A7               	movwf	??___ftmul+1
 10292  0B1A  0822               	movf	___ftmul@f1+2,w
 10293  0B1B  00A8               	movwf	??___ftmul+2
 10294  0B1C  1003               	clrc
 10295  0B1D  0D27               	rlf	??___ftmul+1,w
 10296  0B1E  0D28               	rlf	??___ftmul+2,w
 10297  0B1F  00A9               	movwf	??___ftmul+3
 10298  0B20  0829               	movf	??___ftmul+3,w
 10299  0B21  00AA               	movwf	___ftmul@exp
 10300  0B22  082A               	movf	___ftmul@exp,w
 10301  0B23  1D03               	btfss	3,2
 10302  0B24  2B2C               	goto	l5073
 10303  0B25  3000               	movlw	0
 10304  0B26  00A0               	movwf	?___ftmul
 10305  0B27  3000               	movlw	0
 10306  0B28  00A1               	movwf	?___ftmul+1
 10307  0B29  3000               	movlw	0
 10308  0B2A  00A2               	movwf	?___ftmul+2
 10309  0B2B  0008               	return
 10310  0B2C                     l5073:	
 10311  0B2C  0823               	movf	___ftmul@f2,w
 10312  0B2D  00A6               	movwf	??___ftmul
 10313  0B2E  0824               	movf	___ftmul@f2+1,w
 10314  0B2F  00A7               	movwf	??___ftmul+1
 10315  0B30  0825               	movf	___ftmul@f2+2,w
 10316  0B31  00A8               	movwf	??___ftmul+2
 10317  0B32  1003               	clrc
 10318  0B33  0D27               	rlf	??___ftmul+1,w
 10319  0B34  0D28               	rlf	??___ftmul+2,w
 10320  0B35  00A9               	movwf	??___ftmul+3
 10321  0B36  0829               	movf	??___ftmul+3,w
 10322  0B37  00AF               	movwf	___ftmul@sign
 10323  0B38  082F               	movf	___ftmul@sign,w
 10324  0B39  1D03               	btfss	3,2
 10325  0B3A  2B42               	goto	l5079
 10326  0B3B  3000               	movlw	0
 10327  0B3C  00A0               	movwf	?___ftmul
 10328  0B3D  3000               	movlw	0
 10329  0B3E  00A1               	movwf	?___ftmul+1
 10330  0B3F  3000               	movlw	0
 10331  0B40  00A2               	movwf	?___ftmul+2
 10332  0B41  0008               	return
 10333  0B42                     l5079:	
 10334  0B42  082F               	movf	___ftmul@sign,w
 10335  0B43  3E7B               	addlw	123
 10336  0B44  00A6               	movwf	??___ftmul
 10337  0B45  0826               	movf	??___ftmul,w
 10338  0B46  07AA               	addwf	___ftmul@exp,f
 10339  0B47  0820               	movf	___ftmul@f1,w
 10340  0B48  00A6               	movwf	??___ftmul
 10341  0B49  0821               	movf	___ftmul@f1+1,w
 10342  0B4A  00A7               	movwf	??___ftmul+1
 10343  0B4B  0822               	movf	___ftmul@f1+2,w
 10344  0B4C  00A8               	movwf	??___ftmul+2
 10345  0B4D  3010               	movlw	16
 10346  0B4E                     u5625:	
 10347  0B4E  36A8               	lsrf	??___ftmul+2,f
 10348  0B4F  0CA7               	rrf	??___ftmul+1,f
 10349  0B50  0CA6               	rrf	??___ftmul,f
 10350  0B51  0B89               	decfsz	9,f
 10351  0B52  2B4E               	goto	u5625
 10352  0B53  0826               	movf	??___ftmul,w
 10353  0B54  00A9               	movwf	??___ftmul+3
 10354  0B55  0829               	movf	??___ftmul+3,w
 10355  0B56  00AF               	movwf	___ftmul@sign
 10356  0B57  0823               	movf	___ftmul@f2,w
 10357  0B58  00A6               	movwf	??___ftmul
 10358  0B59  0824               	movf	___ftmul@f2+1,w
 10359  0B5A  00A7               	movwf	??___ftmul+1
 10360  0B5B  0825               	movf	___ftmul@f2+2,w
 10361  0B5C  00A8               	movwf	??___ftmul+2
 10362  0B5D  3010               	movlw	16
 10363  0B5E                     u5635:	
 10364  0B5E  36A8               	lsrf	??___ftmul+2,f
 10365  0B5F  0CA7               	rrf	??___ftmul+1,f
 10366  0B60  0CA6               	rrf	??___ftmul,f
 10367  0B61  0B89               	decfsz	9,f
 10368  0B62  2B5E               	goto	u5635
 10369  0B63  0826               	movf	??___ftmul,w
 10370  0B64  00A9               	movwf	??___ftmul+3
 10371  0B65  0829               	movf	??___ftmul+3,w
 10372  0B66  06AF               	xorwf	___ftmul@sign,f
 10373  0B67  3080               	movlw	128
 10374  0B68  00A6               	movwf	??___ftmul
 10375  0B69  0826               	movf	??___ftmul,w
 10376  0B6A  05AF               	andwf	___ftmul@sign,f
 10377  0B6B  17A1               	bsf	___ftmul@f1+1,7
 10378  0B6C  17A4               	bsf	___ftmul@f2+1,7
 10379  0B6D  30FF               	movlw	255
 10380  0B6E  05A3               	andwf	___ftmul@f2,f
 10381  0B6F  30FF               	movlw	255
 10382  0B70  05A4               	andwf	___ftmul@f2+1,f
 10383  0B71  3000               	movlw	0
 10384  0B72  05A5               	andwf	___ftmul@f2+2,f
 10385  0B73  3000               	movlw	0
 10386  0B74  00AB               	movwf	___ftmul@f3_as_product
 10387  0B75  3000               	movlw	0
 10388  0B76  00AC               	movwf	___ftmul@f3_as_product+1
 10389  0B77  3000               	movlw	0
 10390  0B78  00AD               	movwf	___ftmul@f3_as_product+2
 10391  0B79  3007               	movlw	7
 10392  0B7A  00A6               	movwf	??___ftmul
 10393  0B7B  0826               	movf	??___ftmul,w
 10394  0B7C  00AE               	movwf	___ftmul@cntr
 10395  0B7D                     l5091:	
 10396  0B7D  1C20               	btfss	___ftmul@f1,0
 10397  0B7E  2B85               	goto	l5095
 10398  0B7F  0823               	movf	___ftmul@f2,w
 10399  0B80  07AB               	addwf	___ftmul@f3_as_product,f
 10400  0B81  0824               	movf	___ftmul@f2+1,w
 10401  0B82  3DAC               	addwfc	___ftmul@f3_as_product+1,f
 10402  0B83  0825               	movf	___ftmul@f2+2,w
 10403  0B84  3DAD               	addwfc	___ftmul@f3_as_product+2,f
 10404  0B85                     l5095:	
 10405  0B85  3001               	movlw	1
 10406  0B86                     u5655:	
 10407  0B86  36A2               	lsrf	___ftmul@f1+2,f
 10408  0B87  0CA1               	rrf	___ftmul@f1+1,f
 10409  0B88  0CA0               	rrf	___ftmul@f1,f
 10410  0B89  0B89               	decfsz	9,f
 10411  0B8A  2B86               	goto	u5655
 10412  0B8B  3001               	movlw	1
 10413  0B8C                     u5665:	
 10414  0B8C  35A3               	lslf	___ftmul@f2,f
 10415  0B8D  0DA4               	rlf	___ftmul@f2+1,f
 10416  0B8E  0DA5               	rlf	___ftmul@f2+2,f
 10417  0B8F  0B89               	decfsz	9,f
 10418  0B90  2B8C               	goto	u5665
 10419  0B91  3001               	movlw	1
 10420  0B92  02AE               	subwf	___ftmul@cntr,f
 10421  0B93  1D03               	btfss	3,2
 10422  0B94  2B7D               	goto	l5091
 10423  0B95  3009               	movlw	9
 10424  0B96  00A6               	movwf	??___ftmul
 10425  0B97  0826               	movf	??___ftmul,w
 10426  0B98  00AE               	movwf	___ftmul@cntr
 10427  0B99                     l5103:	
 10428  0B99  1C20               	btfss	___ftmul@f1,0
 10429  0B9A  2BA1               	goto	l5107
 10430  0B9B  0823               	movf	___ftmul@f2,w
 10431  0B9C  07AB               	addwf	___ftmul@f3_as_product,f
 10432  0B9D  0824               	movf	___ftmul@f2+1,w
 10433  0B9E  3DAC               	addwfc	___ftmul@f3_as_product+1,f
 10434  0B9F  0825               	movf	___ftmul@f2+2,w
 10435  0BA0  3DAD               	addwfc	___ftmul@f3_as_product+2,f
 10436  0BA1                     l5107:	
 10437  0BA1  3001               	movlw	1
 10438  0BA2                     u5695:	
 10439  0BA2  36A2               	lsrf	___ftmul@f1+2,f
 10440  0BA3  0CA1               	rrf	___ftmul@f1+1,f
 10441  0BA4  0CA0               	rrf	___ftmul@f1,f
 10442  0BA5  0B89               	decfsz	9,f
 10443  0BA6  2BA2               	goto	u5695
 10444  0BA7  3001               	movlw	1
 10445  0BA8                     u5705:	
 10446  0BA8  36AD               	lsrf	___ftmul@f3_as_product+2,f
 10447  0BA9  0CAC               	rrf	___ftmul@f3_as_product+1,f
 10448  0BAA  0CAB               	rrf	___ftmul@f3_as_product,f
 10449  0BAB  0B89               	decfsz	9,f
 10450  0BAC  2BA8               	goto	u5705
 10451  0BAD  3001               	movlw	1
 10452  0BAE  02AE               	subwf	___ftmul@cntr,f
 10453  0BAF  1D03               	btfss	3,2
 10454  0BB0  2B99               	goto	l5103
 10455  0BB1  082B               	movf	___ftmul@f3_as_product,w
 10456  0BB2  00F1               	movwf	___ftpack@arg
 10457  0BB3  082C               	movf	___ftmul@f3_as_product+1,w
 10458  0BB4  00F2               	movwf	___ftpack@arg+1
 10459  0BB5  082D               	movf	___ftmul@f3_as_product+2,w
 10460  0BB6  00F3               	movwf	___ftpack@arg+2
 10461  0BB7  082A               	movf	___ftmul@exp,w
 10462  0BB8  00A6               	movwf	??___ftmul
 10463  0BB9  0826               	movf	??___ftmul,w
 10464  0BBA  00F4               	movwf	___ftpack@exp
 10465  0BBB  082F               	movf	___ftmul@sign,w
 10466  0BBC  00A7               	movwf	??___ftmul+1
 10467  0BBD  0827               	movf	??___ftmul+1,w
 10468  0BBE  00F5               	movwf	___ftpack@sign
 10469  0BBF  3188  20E0         	fcall	___ftpack
 10470  0BC1  0871               	movf	?___ftpack,w
 10471  0BC2  0020               	movlb	0	; select bank0
 10472  0BC3  00A0               	movwf	?___ftmul
 10473  0BC4  0872               	movf	?___ftpack+1,w
 10474  0BC5  00A1               	movwf	?___ftmul+1
 10475  0BC6  0873               	movf	?___ftpack+2,w
 10476  0BC7  00A2               	movwf	?___ftmul+2
 10477  0BC8  0008               	return
 10478  0BC9                     __end_of___ftmul:	
 10479                           
 10480                           	psect	text41
 10481  08E0                     __ptext41:	
 10482 ;; *************** function ___ftpack *****************
 10483 ;; Defined at:
 10484 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
 10485 ;; Parameters:    Size  Location     Type
 10486 ;;  arg             3    1[COMMON] unsigned um
 10487 ;;  exp             1    4[COMMON] unsigned char 
 10488 ;;  sign            1    5[COMMON] unsigned char 
 10489 ;; Auto vars:     Size  Location     Type
 10490 ;;		None
 10491 ;; Return value:  Size  Location     Type
 10492 ;;                  3    1[COMMON] float 
 10493 ;; Registers used:
 10494 ;;		wreg, status,2, status,0
 10495 ;; Tracked objects:
 10496 ;;		On entry : 0/0
 10497 ;;		On exit  : 0/0
 10498 ;;		Unchanged: 0/0
 10499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10500 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10501 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10502 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10503 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10504 ;;Total ram usage:        8 bytes
 10505 ;; Hardware stack levels used:    1
 10506 ;; Hardware stack levels required when called:    2
 10507 ;; This function calls:
 10508 ;;		Nothing
 10509 ;; This function is called by:
 10510 ;;		___ftadd
 10511 ;;		___ftmul
 10512 ;;		___lltoft
 10513 ;; This function uses a non-reentrant model
 10514 ;;
 10515                           
 10516                           
 10517                           ;psect for function ___ftpack
 10518  08E0                     ___ftpack:	
 10519                           
 10520                           ;incstack = 0
 10521                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 10522  08E0  0874               	movf	___ftpack@exp,w
 10523  08E1  1903               	btfsc	3,2
 10524  08E2  28E8               	goto	l4925
 10525  08E3  0873               	movf	___ftpack@arg+2,w
 10526  08E4  0472               	iorwf	___ftpack@arg+1,w
 10527  08E5  0471               	iorwf	___ftpack@arg,w
 10528  08E6  1D03               	skipz
 10529  08E7  28F9               	goto	l4931
 10530  08E8                     l4925:	
 10531  08E8  3000               	movlw	0
 10532  08E9  00F1               	movwf	?___ftpack
 10533  08EA  3000               	movlw	0
 10534  08EB  00F2               	movwf	?___ftpack+1
 10535  08EC  3000               	movlw	0
 10536  08ED  00F3               	movwf	?___ftpack+2
 10537  08EE  0008               	return
 10538  08EF                     l4929:	
 10539  08EF  3001               	movlw	1
 10540  08F0  00F6               	movwf	??___ftpack
 10541  08F1  0876               	movf	??___ftpack,w
 10542  08F2  07F4               	addwf	___ftpack@exp,f
 10543  08F3  3001               	movlw	1
 10544  08F4                     u5195:	
 10545  08F4  36F3               	lsrf	___ftpack@arg+2,f
 10546  08F5  0CF2               	rrf	___ftpack@arg+1,f
 10547  08F6  0CF1               	rrf	___ftpack@arg,f
 10548  08F7  0B89               	decfsz	9,f
 10549  08F8  28F4               	goto	u5195
 10550  08F9                     l4931:	
 10551  08F9  30FE               	movlw	254
 10552  08FA  0573               	andwf	___ftpack@arg+2,w
 10553  08FB  1903               	btfsc	3,2
 10554  08FC  2912               	goto	l1007
 10555  08FD  28EF               	goto	l4929
 10556  08FE                     l4933:	
 10557  08FE  3001               	movlw	1
 10558  08FF  00F6               	movwf	??___ftpack
 10559  0900  0876               	movf	??___ftpack,w
 10560  0901  07F4               	addwf	___ftpack@exp,f
 10561  0902  3001               	movlw	1
 10562  0903  07F1               	addwf	___ftpack@arg,f
 10563  0904  3000               	movlw	0
 10564  0905  1803               	skipnc
 10565  0906  3001               	movlw	1
 10566  0907  07F2               	addwf	___ftpack@arg+1,f
 10567  0908  3000               	movlw	0
 10568  0909  1803               	skipnc
 10569  090A  3001               	movlw	1
 10570  090B  07F3               	addwf	___ftpack@arg+2,f
 10571  090C  3001               	movlw	1
 10572  090D                     u5215:	
 10573  090D  36F3               	lsrf	___ftpack@arg+2,f
 10574  090E  0CF2               	rrf	___ftpack@arg+1,f
 10575  090F  0CF1               	rrf	___ftpack@arg,f
 10576  0910  0B89               	decfsz	9,f
 10577  0911  290D               	goto	u5215
 10578  0912                     l1007:	
 10579  0912  30FF               	movlw	255
 10580  0913  0573               	andwf	___ftpack@arg+2,w
 10581  0914  1903               	btfsc	3,2
 10582  0915  2923               	goto	l4941
 10583  0916  28FE               	goto	l4933
 10584  0917                     l4943:	
 10585  0917  3002               	movlw	2
 10586  0918  0274               	subwf	___ftpack@exp,w
 10587  0919  1C03               	btfss	3,0
 10588  091A  2925               	goto	l1014
 10589  091B  3001               	movlw	1
 10590  091C  02F4               	subwf	___ftpack@exp,f
 10591  091D  3001               	movlw	1
 10592  091E                     u5235:	
 10593  091E  35F1               	lslf	___ftpack@arg,f
 10594  091F  0DF2               	rlf	___ftpack@arg+1,f
 10595  0920  0DF3               	rlf	___ftpack@arg+2,f
 10596  0921  0B89               	decfsz	9,f
 10597  0922  291E               	goto	u5235
 10598  0923                     l4941:	
 10599  0923  1FF2               	btfss	___ftpack@arg+1,7
 10600  0924  2917               	goto	l4943
 10601  0925                     l1014:	
 10602  0925  1874               	btfsc	___ftpack@exp,0
 10603  0926  292D               	goto	l1015
 10604  0927  30FF               	movlw	255
 10605  0928  05F1               	andwf	___ftpack@arg,f
 10606  0929  307F               	movlw	127
 10607  092A  05F2               	andwf	___ftpack@arg+1,f
 10608  092B  30FF               	movlw	255
 10609  092C  05F3               	andwf	___ftpack@arg+2,f
 10610  092D                     l1015:	
 10611  092D  1003               	clrc
 10612  092E  0CF4               	rrf	___ftpack@exp,f
 10613  092F  0874               	movf	___ftpack@exp,w
 10614  0930  00F6               	movwf	??___ftpack
 10615  0931  01F7               	clrf	??___ftpack+1
 10616  0932  01F8               	clrf	??___ftpack+2
 10617  0933  3010               	movlw	16
 10618  0934                     u5275:	
 10619  0934  35F6               	lslf	??___ftpack,f
 10620  0935  0DF7               	rlf	??___ftpack+1,f
 10621  0936  0DF8               	rlf	??___ftpack+2,f
 10622  0937  0B89               	decfsz	9,f
 10623  0938  2934               	goto	u5275
 10624  0939  0876               	movf	??___ftpack,w
 10625  093A  04F1               	iorwf	___ftpack@arg,f
 10626  093B  0877               	movf	??___ftpack+1,w
 10627  093C  04F2               	iorwf	___ftpack@arg+1,f
 10628  093D  0878               	movf	??___ftpack+2,w
 10629  093E  04F3               	iorwf	___ftpack@arg+2,f
 10630  093F  0875               	movf	___ftpack@sign,w
 10631  0940  1903               	btfsc	3,2
 10632  0941  0008               	return
 10633  0942  17F3               	bsf	___ftpack@arg+2,7
 10634  0943  0008               	return
 10635  0944                     __end_of___ftpack:	
 10636                           
 10637                           	psect	text42
 10638  1575                     __ptext42:	
 10639 ;; *************** function ___ftge *****************
 10640 ;; Defined at:
 10641 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
 10642 ;; Parameters:    Size  Location     Type
 10643 ;;  ff1             3    1[COMMON] float 
 10644 ;;  ff2             3    4[COMMON] float 
 10645 ;; Auto vars:     Size  Location     Type
 10646 ;;		None
 10647 ;; Return value:  Size  Location     Type
 10648 ;;		None               void
 10649 ;; Registers used:
 10650 ;;		wreg, status,2, status,0
 10651 ;; Tracked objects:
 10652 ;;		On entry : 0/0
 10653 ;;		On exit  : 0/0
 10654 ;;		Unchanged: 0/0
 10655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10656 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10658 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10659 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10660 ;;Total ram usage:        9 bytes
 10661 ;; Hardware stack levels used:    1
 10662 ;; Hardware stack levels required when called:    2
 10663 ;; This function calls:
 10664 ;;		Nothing
 10665 ;; This function is called by:
 10666 ;;		_RTXUpdateDisplay
 10667 ;;		_ftoa
 10668 ;; This function uses a non-reentrant model
 10669 ;;
 10670                           
 10671                           
 10672                           ;psect for function ___ftge
 10673  1575                     ___ftge:	
 10674                           
 10675                           ;incstack = 0
 10676                           ; Regs used in ___ftge: [wreg+status,2+status,0]
 10677  1575  1FF3               	btfss	___ftge@ff1+2,7
 10678  1576  2D8B               	goto	l3419
 10679  1577  0971               	comf	___ftge@ff1,w
 10680  1578  00F7               	movwf	??___ftge
 10681  1579  0972               	comf	___ftge@ff1+1,w
 10682  157A  00F8               	movwf	??___ftge+1
 10683  157B  0973               	comf	___ftge@ff1+2,w
 10684  157C  00F9               	movwf	??___ftge+2
 10685  157D  0AF7               	incf	??___ftge,f
 10686  157E  1903               	skipnz
 10687  157F  0AF8               	incf	??___ftge+1,f
 10688  1580  1903               	skipnz
 10689  1581  0AF9               	incf	??___ftge+2,f
 10690  1582  3000               	movlw	0
 10691  1583  0777               	addwf	??___ftge,w
 10692  1584  00F1               	movwf	___ftge@ff1
 10693  1585  3000               	movlw	0
 10694  1586  3D78               	addwfc	??___ftge+1,w
 10695  1587  00F2               	movwf	___ftge@ff1+1
 10696  1588  3080               	movlw	128
 10697  1589  3D79               	addwfc	??___ftge+2,w
 10698  158A  00F3               	movwf	___ftge@ff1+2
 10699  158B                     l3419:	
 10700  158B  1FF6               	btfss	___ftge@ff2+2,7
 10701  158C  2DA1               	goto	l3423
 10702  158D  0974               	comf	___ftge@ff2,w
 10703  158E  00F7               	movwf	??___ftge
 10704  158F  0975               	comf	___ftge@ff2+1,w
 10705  1590  00F8               	movwf	??___ftge+1
 10706  1591  0976               	comf	___ftge@ff2+2,w
 10707  1592  00F9               	movwf	??___ftge+2
 10708  1593  0AF7               	incf	??___ftge,f
 10709  1594  1903               	skipnz
 10710  1595  0AF8               	incf	??___ftge+1,f
 10711  1596  1903               	skipnz
 10712  1597  0AF9               	incf	??___ftge+2,f
 10713  1598  3000               	movlw	0
 10714  1599  0777               	addwf	??___ftge,w
 10715  159A  00F4               	movwf	___ftge@ff2
 10716  159B  3000               	movlw	0
 10717  159C  3D78               	addwfc	??___ftge+1,w
 10718  159D  00F5               	movwf	___ftge@ff2+1
 10719  159E  3080               	movlw	128
 10720  159F  3D79               	addwfc	??___ftge+2,w
 10721  15A0  00F6               	movwf	___ftge@ff2+2
 10722  15A1                     l3423:	
 10723  15A1  3080               	movlw	128
 10724  15A2  06F3               	xorwf	___ftge@ff1+2,f
 10725  15A3  3080               	movlw	128
 10726  15A4  06F6               	xorwf	___ftge@ff2+2,f
 10727  15A5  0876               	movf	___ftge@ff2+2,w
 10728  15A6  0273               	subwf	___ftge@ff1+2,w
 10729  15A7  1D03               	skipz
 10730  15A8  0008               	return
 10731  15A9  0875               	movf	___ftge@ff2+1,w
 10732  15AA  0272               	subwf	___ftge@ff1+1,w
 10733  15AB  1D03               	skipz
 10734  15AC  0008               	return
 10735  15AD  0874               	movf	___ftge@ff2,w
 10736  15AE  0271               	subwf	___ftge@ff1,w
 10737  15AF  0008               	return
 10738  15B0                     __end_of___ftge:	
 10739                           
 10740                           	psect	text43
 10741  1671                     __ptext43:	
 10742 ;; *************** function _DPYSendStr *****************
 10743 ;; Defined at:
 10744 ;;		line 135 in file "DPY.c"
 10745 ;; Parameters:    Size  Location     Type
 10746 ;;  row             1    wreg     unsigned char 
 10747 ;;  col             1    0[BANK0 ] unsigned char 
 10748 ;;  data            1    1[BANK0 ] PTR unsigned char 
 10749 ;;		 -> RTXUpdateDisplay@strRow2(16), RTXUpdateDisplay@strRow1(16), 
 10750 ;;  len             1    2[BANK0 ] unsigned char 
 10751 ;; Auto vars:     Size  Location     Type
 10752 ;;  row             1    5[BANK0 ] unsigned char 
 10753 ;;  i               1    4[BANK0 ] unsigned char 
 10754 ;; Return value:  Size  Location     Type
 10755 ;;		None               void
 10756 ;; Registers used:
 10757 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10758 ;; Tracked objects:
 10759 ;;		On entry : 0/0
 10760 ;;		On exit  : 0/0
 10761 ;;		Unchanged: 0/0
 10762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10763 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10764 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10765 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10766 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10767 ;;Total ram usage:        6 bytes
 10768 ;; Hardware stack levels used:    1
 10769 ;; Hardware stack levels required when called:    5
 10770 ;; This function calls:
 10771 ;;		_DPYIsBusy
 10772 ;;		_DPYSendChar
 10773 ;;		_DPYSetCur
 10774 ;; This function is called by:
 10775 ;;		_RTXUpdateDisplay
 10776 ;; This function uses a non-reentrant model
 10777 ;;
 10778                           
 10779                           
 10780                           ;psect for function _DPYSendStr
 10781  1671                     _DPYSendStr:	
 10782                           
 10783                           ;incstack = 0
 10784                           ; Regs used in _DPYSendStr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10785                           ;DPYSendStr@row stored from wreg
 10786  1671  0020               	movlb	0	; select bank0
 10787  1672  00A5               	movwf	DPYSendStr@row
 10788                           
 10789                           ;DPY.c: 137: unsigned char i;
 10790                           ;DPY.c: 140: DPYSetCur(row,col);
 10791  1673  0820               	movf	DPYSendStr@col,w
 10792  1674  00A3               	movwf	??_DPYSendStr
 10793  1675  0823               	movf	??_DPYSendStr,w
 10794  1676  00F8               	movwf	DPYSetCur@col
 10795  1677  0825               	movf	DPYSendStr@row,w
 10796  1678  3190  20F8  3196   	fcall	_DPYSetCur
 10797                           
 10798                           ;DPY.c: 142: for(i=0;i<len;i++)
 10799  167B  0020               	movlb	0	; select bank0
 10800  167C  01A4               	clrf	DPYSendStr@i
 10801  167D                     l5299:	
 10802  167D  0822               	movf	DPYSendStr@len,w
 10803  167E  0224               	subwf	DPYSendStr@i,w
 10804  167F  1803               	btfsc	3,0
 10805  1680  0008               	return
 10806                           
 10807                           ;DPY.c: 143: {
 10808                           ;DPY.c: 145: DPYSendChar((*(data+i)));
 10809  1681  0824               	movf	DPYSendStr@i,w
 10810  1682  0721               	addwf	DPYSendStr@data,w
 10811  1683  00A3               	movwf	??_DPYSendStr
 10812  1684  0823               	movf	??_DPYSendStr,w
 10813  1685  0086               	movwf	6
 10814  1686  0187               	clrf	7
 10815  1687  0801               	movf	1,w
 10816  1688  3190  203A  3196   	fcall	_DPYSendChar
 10817  168B                     l5281:	
 10818                           ;DPY.c: 146: while(DPYIsBusy())
 10819                           
 10820  168B  3195  25EE  3196   	fcall	_DPYIsBusy
 10821  168E  3A00               	xorlw	0
 10822  168F  1903               	btfsc	3,2
 10823  1690  2E93               	goto	l5283
 10824                           
 10825                           ;DPY.c: 147: __nop();
 10826  1691  0000               	nop
 10827  1692  2E8B               	goto	l5281
 10828  1693                     l5283:	
 10829                           
 10830                           ;DPY.c: 150: col++;
 10831  1693  3001               	movlw	1
 10832  1694  0020               	movlb	0	; select bank0
 10833  1695  00A3               	movwf	??_DPYSendStr
 10834  1696  0823               	movf	??_DPYSendStr,w
 10835  1697  07A0               	addwf	DPYSendStr@col,f
 10836                           
 10837                           ;DPY.c: 151: if(col==16)
 10838  1698  3010               	movlw	16
 10839  1699  0620               	xorwf	DPYSendStr@col,w
 10840  169A  1D03               	btfss	3,2
 10841  169B  2EA2               	goto	l5291
 10842                           
 10843                           ;DPY.c: 152: {
 10844                           ;DPY.c: 153: col=0;
 10845  169C  01A0               	clrf	DPYSendStr@col
 10846                           
 10847                           ;DPY.c: 154: row++;
 10848  169D  3001               	movlw	1
 10849  169E  00A3               	movwf	??_DPYSendStr
 10850  169F  0823               	movf	??_DPYSendStr,w
 10851  16A0  07A5               	addwf	DPYSendStr@row,f
 10852  16A1  2EA9               	goto	L11
 10853  16A2                     l5291:	
 10854                           ;DPY.c: 156: }
 10855                           
 10856                           ;DPY.c: 155: DPYSetCur(row,col);
 10857                           
 10858                           
 10859                           ;DPY.c: 157: else if(col==32)
 10860  16A2  3020               	movlw	32
 10861  16A3  0020               	movlb	0	; select bank0
 10862  16A4  0620               	xorwf	DPYSendStr@col,w
 10863  16A5  1D03               	btfss	3,2
 10864  16A6  2EB1               	goto	l5297
 10865                           
 10866                           ;DPY.c: 158: {
 10867                           ;DPY.c: 159: col=0;
 10868  16A7  01A0               	clrf	DPYSendStr@col
 10869                           
 10870                           ;DPY.c: 160: row=0;
 10871  16A8  01A5               	clrf	DPYSendStr@row
 10872  16A9                     L11:	
 10873                           
 10874                           ;DPY.c: 161: DPYSetCur(row,col);
 10875  16A9  0820               	movf	DPYSendStr@col,w
 10876  16AA  00A3               	movwf	??_DPYSendStr
 10877  16AB  0823               	movf	??_DPYSendStr,w
 10878  16AC  00F8               	movwf	DPYSetCur@col
 10879  16AD  0825               	movf	DPYSendStr@row,w
 10880  16AE  3190  20F8  3196   	fcall	_DPYSetCur
 10881  16B1                     l5297:	
 10882  16B1  3001               	movlw	1
 10883  16B2  0020               	movlb	0	; select bank0
 10884  16B3  00A3               	movwf	??_DPYSendStr
 10885  16B4  0823               	movf	??_DPYSendStr,w
 10886  16B5  07A4               	addwf	DPYSendStr@i,f
 10887  16B6  2E7D               	goto	l5299
 10888  16B7                     __end_of_DPYSendStr:	
 10889                           
 10890                           	psect	text44
 10891  10F8                     __ptext44:	
 10892 ;; *************** function _DPYSetCur *****************
 10893 ;; Defined at:
 10894 ;;		line 115 in file "DPY.c"
 10895 ;; Parameters:    Size  Location     Type
 10896 ;;  row             1    wreg     unsigned char 
 10897 ;;  col             1    8[COMMON] unsigned char 
 10898 ;; Auto vars:     Size  Location     Type
 10899 ;;  row             1   10[COMMON] unsigned char 
 10900 ;;  addr            1   11[COMMON] unsigned char 
 10901 ;; Return value:  Size  Location     Type
 10902 ;;		None               void
 10903 ;; Registers used:
 10904 ;;		wreg, status,2, status,0, pclath, cstack
 10905 ;; Tracked objects:
 10906 ;;		On entry : 0/0
 10907 ;;		On exit  : 0/0
 10908 ;;		Unchanged: 0/0
 10909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10910 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10911 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10912 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10913 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10914 ;;Total ram usage:        4 bytes
 10915 ;; Hardware stack levels used:    1
 10916 ;; Hardware stack levels required when called:    4
 10917 ;; This function calls:
 10918 ;;		_DPYWriteByte
 10919 ;; This function is called by:
 10920 ;;		_DPYSendStr
 10921 ;; This function uses a non-reentrant model
 10922 ;;
 10923                           
 10924                           
 10925                           ;psect for function _DPYSetCur
 10926  10F8                     _DPYSetCur:	
 10927                           
 10928                           ;incstack = 0
 10929                           ; Regs used in _DPYSetCur: [wreg+status,2+status,0+pclath+cstack]
 10930                           ;DPYSetCur@row stored from wreg
 10931  10F8  00FA               	movwf	DPYSetCur@row
 10932                           
 10933                           ;DPY.c: 117: unsigned char addr;
 10934                           ;DPY.c: 120: addr=col;
 10935  10F9  0878               	movf	DPYSetCur@col,w
 10936  10FA  00F9               	movwf	??_DPYSetCur
 10937  10FB  0879               	movf	??_DPYSetCur,w
 10938  10FC  00FB               	movwf	DPYSetCur@addr
 10939                           
 10940                           ;DPY.c: 122: if(row==1)
 10941  10FD  037A               	decf	DPYSetCur@row,w
 10942  10FE  1D03               	btfss	3,2
 10943  10FF  2904               	goto	l5159
 10944                           
 10945                           ;DPY.c: 123: addr+=0x40;
 10946  1100  3040               	movlw	64
 10947  1101  00F9               	movwf	??_DPYSetCur
 10948  1102  0879               	movf	??_DPYSetCur,w
 10949  1103  07FB               	addwf	DPYSetCur@addr,f
 10950  1104                     l5159:	
 10951                           
 10952                           ;DPY.c: 126: DPYWriteByte(RS_ISTRUCTION,(addr|0b10000000));
 10953  1104  087B               	movf	DPYSetCur@addr,w
 10954  1105  3880               	iorlw	128
 10955  1106  00F9               	movwf	??_DPYSetCur
 10956  1107  0879               	movf	??_DPYSetCur,w
 10957  1108  00F5               	movwf	DPYWriteByte@val
 10958  1109  3000               	movlw	0
 10959  110A  3197  27AA         	fcall	_DPYWriteByte
 10960  110C  0008               	return
 10961  110D                     __end_of_DPYSetCur:	
 10962                           
 10963                           	psect	text45
 10964  103A                     __ptext45:	
 10965 ;; *************** function _DPYSendChar *****************
 10966 ;; Defined at:
 10967 ;;		line 129 in file "DPY.c"
 10968 ;; Parameters:    Size  Location     Type
 10969 ;;  c               1    wreg     unsigned char 
 10970 ;; Auto vars:     Size  Location     Type
 10971 ;;  c               1    9[COMMON] unsigned char 
 10972 ;; Return value:  Size  Location     Type
 10973 ;;		None               void
 10974 ;; Registers used:
 10975 ;;		wreg, status,2, status,0, pclath, cstack
 10976 ;; Tracked objects:
 10977 ;;		On entry : 0/0
 10978 ;;		On exit  : 0/0
 10979 ;;		Unchanged: 0/0
 10980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10982 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10983 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10984 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10985 ;;Total ram usage:        2 bytes
 10986 ;; Hardware stack levels used:    1
 10987 ;; Hardware stack levels required when called:    4
 10988 ;; This function calls:
 10989 ;;		_DPYWriteByte
 10990 ;; This function is called by:
 10991 ;;		_DPYSendStr
 10992 ;; This function uses a non-reentrant model
 10993 ;;
 10994                           
 10995                           
 10996                           ;psect for function _DPYSendChar
 10997  103A                     _DPYSendChar:	
 10998                           
 10999                           ;incstack = 0
 11000                           ; Regs used in _DPYSendChar: [wreg+status,2+status,0+pclath+cstack]
 11001                           ;DPYSendChar@c stored from wreg
 11002  103A  00F9               	movwf	DPYSendChar@c
 11003                           
 11004                           ;DPY.c: 132: DPYWriteByte(RS_DATA,c);
 11005  103B  0879               	movf	DPYSendChar@c,w
 11006  103C  00F8               	movwf	??_DPYSendChar
 11007  103D  0878               	movf	??_DPYSendChar,w
 11008  103E  00F5               	movwf	DPYWriteByte@val
 11009  103F  3001               	movlw	1
 11010  1040  3197  27AA         	fcall	_DPYWriteByte
 11011  1042  0008               	return
 11012  1043                     __end_of_DPYSendChar:	
 11013                           
 11014                           	psect	text46
 11015  15EE                     __ptext46:	
 11016 ;; *************** function _DPYIsBusy *****************
 11017 ;; Defined at:
 11018 ;;		line 311 in file "DPY.c"
 11019 ;; Parameters:    Size  Location     Type
 11020 ;;		None
 11021 ;; Auto vars:     Size  Location     Type
 11022 ;;  bf              1    6[COMMON] enum E1839
 11023 ;; Return value:  Size  Location     Type
 11024 ;;                  1    wreg      enum E1839
 11025 ;; Registers used:
 11026 ;;		wreg, status,2, status,0, pclath, cstack
 11027 ;; Tracked objects:
 11028 ;;		On entry : 0/0
 11029 ;;		On exit  : 0/0
 11030 ;;		Unchanged: 0/0
 11031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11033 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11034 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11035 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11036 ;;Total ram usage:        2 bytes
 11037 ;; Hardware stack levels used:    1
 11038 ;; Hardware stack levels required when called:    3
 11039 ;; This function calls:
 11040 ;;		_DLYDelay_us
 11041 ;; This function is called by:
 11042 ;;		_DPYSendStr
 11043 ;; This function uses a non-reentrant model
 11044 ;;
 11045                           
 11046                           
 11047                           ;psect for function _DPYIsBusy
 11048  15EE                     _DPYIsBusy:	
 11049                           
 11050                           ;DPY.c: 313: te_DPY_BF bf;
 11051                           ;DPY.c: 316: TRISA|=0b00001111;
 11052                           
 11053                           ;incstack = 0
 11054                           ; Regs used in _DPYIsBusy: [wreg+status,2+status,0+pclath+cstack]
 11055  15EE  300F               	movlw	15
 11056  15EF  00F5               	movwf	??_DPYIsBusy
 11057  15F0  0875               	movf	??_DPYIsBusy,w
 11058  15F1  0021               	movlb	1	; select bank1
 11059  15F2  048C               	iorwf	12,f	;volatile
 11060                           
 11061                           ;DPY.c: 319: LATAbits.LATA4=0;
 11062  15F3  0022               	movlb	2	; select bank2
 11063  15F4  120C               	bcf	12,4	;volatile
 11064                           
 11065                           ;DPY.c: 322: LATAbits.LATA6=0;
 11066  15F5  130C               	bcf	12,6	;volatile
 11067                           
 11068                           ;DPY.c: 325: LATAbits.LATA7=1;
 11069  15F6  178C               	bsf	12,7	;volatile
 11070                           
 11071                           ;DPY.c: 328: DLYDelay_us(100);
 11072  15F7  3064               	movlw	100
 11073  15F8  00F1               	movwf	DLYDelay_us@val
 11074  15F9  3000               	movlw	0
 11075  15FA  00F2               	movwf	DLYDelay_us@val+1
 11076  15FB  3190  20AE  3195   	fcall	_DLYDelay_us
 11077                           
 11078                           ;DPY.c: 331: LATAbits.LATA4=1;
 11079  15FE  0022               	movlb	2	; select bank2
 11080  15FF  160C               	bsf	12,4	;volatile
 11081                           
 11082                           ;DPY.c: 333: bf=BF_NOTBUSY;
 11083  1600  01F6               	clrf	DPYIsBusy@bf
 11084                           
 11085                           ;DPY.c: 334: if(PORTAbits.RA0)
 11086  1601  0020               	movlb	0	; select bank0
 11087  1602  1C0C               	btfss	12,0	;volatile
 11088  1603  2E06               	goto	l5181
 11089                           
 11090                           ;DPY.c: 335: bf=BF_BUSY;
 11091  1604  01F6               	clrf	DPYIsBusy@bf
 11092  1605  0AF6               	incf	DPYIsBusy@bf,f
 11093  1606                     l5181:	
 11094                           
 11095                           ;DPY.c: 337: DLYDelay_us(100);
 11096  1606  3064               	movlw	100
 11097  1607  00F1               	movwf	DLYDelay_us@val
 11098  1608  3000               	movlw	0
 11099  1609  00F2               	movwf	DLYDelay_us@val+1
 11100  160A  3190  20AE  3195   	fcall	_DLYDelay_us
 11101                           
 11102                           ;DPY.c: 339: LATAbits.LATA4=0;
 11103  160D  0022               	movlb	2	; select bank2
 11104  160E  120C               	bcf	12,4	;volatile
 11105                           
 11106                           ;DPY.c: 341: DLYDelay_us(100);
 11107  160F  3064               	movlw	100
 11108  1610  00F1               	movwf	DLYDelay_us@val
 11109  1611  3000               	movlw	0
 11110  1612  00F2               	movwf	DLYDelay_us@val+1
 11111  1613  3190  20AE  3195   	fcall	_DLYDelay_us
 11112                           
 11113                           ;DPY.c: 343: LATAbits.LATA4=1;
 11114  1616  0022               	movlb	2	; select bank2
 11115  1617  160C               	bsf	12,4	;volatile
 11116                           
 11117                           ;DPY.c: 345: DLYDelay_us(100);
 11118  1618  3064               	movlw	100
 11119  1619  00F1               	movwf	DLYDelay_us@val
 11120  161A  3000               	movlw	0
 11121  161B  00F2               	movwf	DLYDelay_us@val+1
 11122  161C  3190  20AE  3195   	fcall	_DLYDelay_us
 11123                           
 11124                           ;DPY.c: 347: LATAbits.LATA4=0;
 11125  161F  0022               	movlb	2	; select bank2
 11126  1620  120C               	bcf	12,4	;volatile
 11127                           
 11128                           ;DPY.c: 349: DLYDelay_us(100);
 11129  1621  3064               	movlw	100
 11130  1622  00F1               	movwf	DLYDelay_us@val
 11131  1623  3000               	movlw	0
 11132  1624  00F2               	movwf	DLYDelay_us@val+1
 11133  1625  3190  20AE         	fcall	_DLYDelay_us
 11134                           
 11135                           ;DPY.c: 352: TRISA&=0b11110000;
 11136  1627  30F0               	movlw	240
 11137  1628  00F5               	movwf	??_DPYIsBusy
 11138  1629  0875               	movf	??_DPYIsBusy,w
 11139  162A  0021               	movlb	1	; select bank1
 11140  162B  058C               	andwf	12,f	;volatile
 11141                           
 11142                           ;DPY.c: 354: return bf;
 11143  162C  0876               	movf	DPYIsBusy@bf,w
 11144  162D  0008               	return
 11145  162E                     __end_of_DPYIsBusy:	
 11146                           
 11147                           	psect	text47
 11148  1199                     __ptext47:	
 11149 ;; *************** function _PGMInit *****************
 11150 ;; Defined at:
 11151 ;;		line 21 in file "PGM.c"
 11152 ;; Parameters:    Size  Location     Type
 11153 ;;  state           1    wreg     unsigned char 
 11154 ;; Auto vars:     Size  Location     Type
 11155 ;;  state           1   11[COMMON] unsigned char 
 11156 ;; Return value:  Size  Location     Type
 11157 ;;		None               void
 11158 ;; Registers used:
 11159 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11160 ;; Tracked objects:
 11161 ;;		On entry : 0/0
 11162 ;;		On exit  : 0/0
 11163 ;;		Unchanged: 0/0
 11164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11166 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11168 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11169 ;;Total ram usage:        1 bytes
 11170 ;; Hardware stack levels used:    1
 11171 ;; Hardware stack levels required when called:    6
 11172 ;; This function calls:
 11173 ;;		_PGMCheckNvm
 11174 ;;		_PGMReadNvm
 11175 ;; This function is called by:
 11176 ;;		_main
 11177 ;; This function uses a non-reentrant model
 11178 ;;
 11179                           
 11180                           
 11181                           ;psect for function _PGMInit
 11182  1199                     _PGMInit:	
 11183                           
 11184                           ;incstack = 0
 11185                           ; Regs used in _PGMInit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11186                           ;PGMInit@state stored from wreg
 11187  1199  00FB               	movwf	PGMInit@state
 11188                           
 11189                           ;PGM.c: 23: switch(state)
 11190  119A  29AA               	goto	l4793
 11191  119B                     l4783:	
 11192                           ;PGM.c: 24: {
 11193                           ;PGM.c: 25: case 0:
 11194                           
 11195                           
 11196                           ;PGM.c: 27: T1CON=0b00000001;
 11197  119B  3001               	movlw	1
 11198  119C  0020               	movlb	0	; select bank0
 11199  119D  0098               	movwf	24	;volatile
 11200                           
 11201                           ;PGM.c: 28: break;
 11202  119E  0008               	return
 11203  119F                     l4785:	
 11204                           ;PGM.c: 29: case 1:
 11205                           
 11206                           
 11207                           ;PGM.c: 31: tmrPgm=0;
 11208  119F  0022               	movlb	2	; select bank2
 11209  11A0  01BC               	clrf	_tmrPgm^(0+256)
 11210  11A1  01BD               	clrf	(_tmrPgm+1)^(0+256)
 11211                           
 11212                           ;PGM.c: 32: pgm_flg.val=0;
 11213  11A2  0021               	movlb	1	; select bank1
 11214  11A3  01E5               	clrf	_pgm_flg^(0+128)
 11215                           
 11216                           ;PGM.c: 33: PGMReadNvm();
 11217  11A4  3190  208F  3191   	fcall	_PGMReadNvm
 11218                           
 11219                           ;PGM.c: 34: PGMCheckNvm();
 11220  11A7  3190  2058         	fcall	_PGMCheckNvm
 11221                           
 11222                           ;PGM.c: 39: }
 11223                           
 11224                           ;PGM.c: 35: break;
 11225  11A9  0008               	return
 11226  11AA                     l4793:	
 11227  11AA  087B               	movf	PGMInit@state,w
 11228                           
 11229                           ; Switch size 1, requested type "space"
 11230                           ; Number of cases is 2, Range of values is 0 to 1
 11231                           ; switch strategies available:
 11232                           ; Name         Instructions Cycles
 11233                           ; simple_byte            7     4 (average)
 11234                           ; direct_byte           10     6 (fixed)
 11235                           ; jumptable            260     6 (fixed)
 11236                           ;	Chosen strategy is simple_byte
 11237  11AB  3A00               	xorlw	0	; case 0
 11238  11AC  1903               	skipnz
 11239  11AD  299B               	goto	l4783
 11240  11AE  3A01               	xorlw	1	; case 1
 11241  11AF  1903               	skipnz
 11242  11B0  299F               	goto	l4785
 11243  11B1  29B2               	goto	l367
 11244  11B2                     l367:	
 11245  11B2  0008               	return
 11246  11B3                     __end_of_PGMInit:	
 11247                           
 11248                           	psect	text48
 11249  108F                     __ptext48:	
 11250 ;; *************** function _PGMReadNvm *****************
 11251 ;; Defined at:
 11252 ;;		line 53 in file "PGM.c"
 11253 ;; Parameters:    Size  Location     Type
 11254 ;;		None
 11255 ;; Auto vars:     Size  Location     Type
 11256 ;;		None
 11257 ;; Return value:  Size  Location     Type
 11258 ;;		None               void
 11259 ;; Registers used:
 11260 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11261 ;; Tracked objects:
 11262 ;;		On entry : 0/0
 11263 ;;		On exit  : 0/0
 11264 ;;		Unchanged: 0/0
 11265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11267 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11268 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11269 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11270 ;;Total ram usage:        2 bytes
 11271 ;; Hardware stack levels used:    1
 11272 ;; Hardware stack levels required when called:    3
 11273 ;; This function calls:
 11274 ;;		_NVMRead
 11275 ;; This function is called by:
 11276 ;;		_PGMInit
 11277 ;; This function uses a non-reentrant model
 11278 ;;
 11279                           
 11280                           
 11281                           ;psect for function _PGMReadNvm
 11282  108F                     _PGMReadNvm:	
 11283                           
 11284                           ;PGM.c: 55: NVMRead((unsigned short)(&(nvm_pgm_cfg)),(char *)(&(pgm_cfg)),sizeof(ts_PGM_
      +                          CFG));
 11285                           
 11286                           ;incstack = 0
 11287                           ; Regs used in _PGMReadNvm: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11288  108F  3028               	movlw	low (_nvm_pgm_cfg| (0+32768))
 11289  1090  00F1               	movwf	NVMRead@addr
 11290  1091  3098               	movlw	high (_nvm_pgm_cfg| (0+32768))
 11291  1092  00F2               	movwf	NVMRead@addr+1
 11292  1093  3043               	movlw	(low (_pgm_cfg| (0+256)))& (0+255)
 11293  1094  00F8               	movwf	??_PGMReadNvm
 11294  1095  0878               	movf	??_PGMReadNvm,w
 11295  1096  00F3               	movwf	NVMRead@dest
 11296  1097  300B               	movlw	11
 11297  1098  00F9               	movwf	??_PGMReadNvm+1
 11298  1099  0879               	movf	??_PGMReadNvm+1,w
 11299  109A  00F4               	movwf	NVMRead@len
 11300  109B  3193  2315         	fcall	_NVMRead
 11301  109D  0008               	return
 11302  109E                     __end_of_PGMReadNvm:	
 11303                           
 11304                           	psect	text49
 11305  1315                     __ptext49:	
 11306 ;; *************** function _NVMRead *****************
 11307 ;; Defined at:
 11308 ;;		line 23 in file "NVM.c"
 11309 ;; Parameters:    Size  Location     Type
 11310 ;;  addr            2    1[COMMON] unsigned short 
 11311 ;;  dest            1    3[COMMON] PTR unsigned char 
 11312 ;;		 -> pgm_cfg(11), 
 11313 ;;  len             1    4[COMMON] unsigned char 
 11314 ;; Auto vars:     Size  Location     Type
 11315 ;;  i               1    7[COMMON] unsigned char 
 11316 ;; Return value:  Size  Location     Type
 11317 ;;		None               void
 11318 ;; Registers used:
 11319 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11320 ;; Tracked objects:
 11321 ;;		On entry : 0/0
 11322 ;;		On exit  : 0/0
 11323 ;;		Unchanged: 0/0
 11324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11325 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11326 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11327 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11328 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11329 ;;Total ram usage:        7 bytes
 11330 ;; Hardware stack levels used:    1
 11331 ;; Hardware stack levels required when called:    2
 11332 ;; This function calls:
 11333 ;;		Nothing
 11334 ;; This function is called by:
 11335 ;;		_PGMReadNvm
 11336 ;; This function uses a non-reentrant model
 11337 ;;
 11338                           
 11339                           
 11340                           ;psect for function _NVMRead
 11341  1315                     _NVMRead:	
 11342                           
 11343                           ;NVM.c: 25: unsigned char i;
 11344                           ;NVM.c: 27: PMCON1bits.CFGS=0;
 11345                           
 11346                           ;incstack = 0
 11347                           ; Regs used in _NVMRead: [wreg+fsr1l+fsr1h+status,2+status,0]
 11348  1315  0023               	movlb	3	; select bank3
 11349  1316  1315               	bcf	21,6	;volatile
 11350                           
 11351                           ;NVM.c: 28: for(i=0;i<len;i++)
 11352  1317  01F7               	clrf	NVMRead@i
 11353  1318                     l4315:	
 11354  1318  0874               	movf	NVMRead@len,w
 11355  1319  0277               	subwf	NVMRead@i,w
 11356  131A  1803               	btfsc	3,0
 11357  131B  0008               	return
 11358  131C  0064               	clrwdt	;# 
 11359                           
 11360                           ;NVM.c: 31: PMADR=(addr+i);
 11361  131D  0877               	movf	NVMRead@i,w
 11362  131E  0771               	addwf	NVMRead@addr,w
 11363  131F  00F5               	movwf	??_NVMRead
 11364  1320  0872               	movf	NVMRead@addr+1,w
 11365  1321  1803               	skipnc
 11366  1322  0A72               	incf	NVMRead@addr+1,w
 11367  1323  00F6               	movwf	??_NVMRead+1
 11368  1324  0875               	movf	??_NVMRead,w
 11369  1325  0023               	movlb	3	; select bank3
 11370  1326  0091               	movwf	17	;volatile
 11371  1327  0876               	movf	??_NVMRead+1,w
 11372  1328  0092               	movwf	18	;volatile
 11373                           
 11374                           ;NVM.c: 32: PMCON1bits.RD=1;
 11375  1329  1415               	bsf	21,0	;volatile
 11376  132A                     l159:	
 11377                           ;NVM.c: 33: while(PMCON1bits.RD);
 11378                           
 11379  132A  1815               	btfsc	21,0	;volatile
 11380  132B  2B2A               	goto	l159
 11381                           
 11382                           ;NVM.c: 34: (*(dest+i))=PMDAT;
 11383  132C  0813               	movf	19,w	;volatile
 11384  132D  00F5               	movwf	??_NVMRead
 11385  132E  0877               	movf	NVMRead@i,w
 11386  132F  0773               	addwf	NVMRead@dest,w
 11387  1330  00F6               	movwf	??_NVMRead+1
 11388  1331  0876               	movf	??_NVMRead+1,w
 11389  1332  0086               	movwf	6
 11390  1333  3001               	movlw	1	; select bank2/3
 11391  1334  0087               	movwf	7
 11392  1335  0875               	movf	??_NVMRead,w
 11393  1336  0081               	movwf	1
 11394  1337  3001               	movlw	1
 11395  1338  00F5               	movwf	??_NVMRead
 11396  1339  0875               	movf	??_NVMRead,w
 11397  133A  07F7               	addwf	NVMRead@i,f
 11398  133B  2B18               	goto	l4315
 11399  133C                     __end_of_NVMRead:	
 11400                           
 11401                           	psect	text50
 11402  1058                     __ptext50:	
 11403 ;; *************** function _PGMCheckNvm *****************
 11404 ;; Defined at:
 11405 ;;		line 63 in file "PGM.c"
 11406 ;; Parameters:    Size  Location     Type
 11407 ;;		None
 11408 ;; Auto vars:     Size  Location     Type
 11409 ;;		None
 11410 ;; Return value:  Size  Location     Type
 11411 ;;		None               void
 11412 ;; Registers used:
 11413 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11414 ;; Tracked objects:
 11415 ;;		On entry : 0/0
 11416 ;;		On exit  : 0/0
 11417 ;;		Unchanged: 0/0
 11418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11420 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11421 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11422 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11423 ;;Total ram usage:        0 bytes
 11424 ;; Hardware stack levels used:    1
 11425 ;; Hardware stack levels required when called:    5
 11426 ;; This function calls:
 11427 ;;		_PGMNvmReset
 11428 ;; This function is called by:
 11429 ;;		_PGMInit
 11430 ;; This function uses a non-reentrant model
 11431 ;;
 11432                           
 11433                           
 11434                           ;psect for function _PGMCheckNvm
 11435  1058                     _PGMCheckNvm:	
 11436                           
 11437                           ;PGM.c: 65: if(pgm_cfg.valChk1!=0x5C || pgm_cfg.valChk2!=0xC5)
 11438                           
 11439                           ;incstack = 0
 11440                           ; Regs used in _PGMCheckNvm: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11441  1058  305C               	movlw	92
 11442  1059  0022               	movlb	2	; select bank2
 11443  105A  0643               	xorwf	_pgm_cfg^(0+256),w
 11444  105B  1D03               	btfss	3,2
 11445  105C  2861               	goto	l4475
 11446  105D  30C5               	movlw	197
 11447  105E  0644               	xorwf	(_pgm_cfg^(0+256)+1),w
 11448  105F  1903               	btfsc	3,2
 11449  1060  0008               	return
 11450  1061                     l4475:	
 11451                           
 11452                           ;PGM.c: 66: PGMNvmReset();
 11453  1061  3191  2150         	fcall	_PGMNvmReset
 11454  1063  0008               	return
 11455  1064                     __end_of_PGMCheckNvm:	
 11456                           
 11457                           	psect	text51
 11458  1150                     __ptext51:	
 11459 ;; *************** function _PGMNvmReset *****************
 11460 ;; Defined at:
 11461 ;;		line 69 in file "PGM.c"
 11462 ;; Parameters:    Size  Location     Type
 11463 ;;		None
 11464 ;; Auto vars:     Size  Location     Type
 11465 ;;		None
 11466 ;; Return value:  Size  Location     Type
 11467 ;;		None               void
 11468 ;; Registers used:
 11469 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11470 ;; Tracked objects:
 11471 ;;		On entry : 0/0
 11472 ;;		On exit  : 0/0
 11473 ;;		Unchanged: 0/0
 11474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11476 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11477 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11478 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11479 ;;Total ram usage:        1 bytes
 11480 ;; Hardware stack levels used:    1
 11481 ;; Hardware stack levels required when called:    4
 11482 ;; This function calls:
 11483 ;;		_PGMWriteNvm
 11484 ;; This function is called by:
 11485 ;;		_PGMCheckNvm
 11486 ;; This function uses a non-reentrant model
 11487 ;;
 11488                           
 11489                           
 11490                           ;psect for function _PGMNvmReset
 11491  1150                     _PGMNvmReset:	
 11492                           
 11493                           ;PGM.c: 72: pgm_cfg.valChk1=0x5C;
 11494                           
 11495                           ;incstack = 0
 11496                           ; Regs used in _PGMNvmReset: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11497  1150  305C               	movlw	92
 11498  1151  00FA               	movwf	??_PGMNvmReset
 11499  1152  087A               	movf	??_PGMNvmReset,w
 11500  1153  0022               	movlb	2	; select bank2
 11501  1154  00C3               	movwf	_pgm_cfg^(0+256)
 11502                           
 11503                           ;PGM.c: 73: pgm_cfg.valChk2=0xC5;
 11504  1155  30C5               	movlw	197
 11505  1156  00FA               	movwf	??_PGMNvmReset
 11506  1157  087A               	movf	??_PGMNvmReset,w
 11507  1158  00C4               	movwf	(_pgm_cfg^(0+256)+1)
 11508                           
 11509                           ;PGM.c: 74: pgm_cfg.menu.val=0x01;
 11510  1159  01C5               	clrf	(_pgm_cfg^(0+256)+2)
 11511  115A  0AC5               	incf	(_pgm_cfg^(0+256)+2),f
 11512                           
 11513                           ;PGM.c: 75: pgm_cfg.base.id=0x00;
 11514  115B  01C7               	clrf	(_pgm_cfg^(0+256)+4)
 11515                           
 11516                           ;PGM.c: 76: pgm_cfg.base.type=0x00;
 11517  115C  01C6               	clrf	(_pgm_cfg^(0+256)+3)
 11518                           
 11519                           ;PGM.c: 77: pgm_cfg.gen_curr_sens.id=0x00;
 11520  115D  01C9               	clrf	(_pgm_cfg^(0+256)+6)
 11521                           
 11522                           ;PGM.c: 78: pgm_cfg.gen_curr_sens.type=0x00;
 11523  115E  01C8               	clrf	(_pgm_cfg^(0+256)+5)
 11524                           
 11525                           ;PGM.c: 79: pgm_cfg.con_curr_sens.id=0x00;
 11526  115F  01CB               	clrf	(_pgm_cfg^(0+256)+8)
 11527                           
 11528                           ;PGM.c: 80: pgm_cfg.con_curr_sens.type=0x00;
 11529  1160  01CA               	clrf	(_pgm_cfg^(0+256)+7)
 11530                           
 11531                           ;PGM.c: 81: pgm_cfg.volt_sens.id=0x00;
 11532  1161  01CD               	clrf	(_pgm_cfg^(0+256)+10)
 11533                           
 11534                           ;PGM.c: 82: pgm_cfg.volt_sens.type=0x00;
 11535  1162  01CC               	clrf	(_pgm_cfg^(0+256)+9)
 11536                           
 11537                           ;PGM.c: 84: PGMWriteNvm();
 11538  1163  3190  2080         	fcall	_PGMWriteNvm
 11539  1165  0001               	reset	;# 
 11540  1166  0008               	return
 11541  1167                     __end_of_PGMNvmReset:	
 11542                           
 11543                           	psect	text52
 11544  1080                     __ptext52:	
 11545 ;; *************** function _PGMWriteNvm *****************
 11546 ;; Defined at:
 11547 ;;		line 58 in file "PGM.c"
 11548 ;; Parameters:    Size  Location     Type
 11549 ;;		None
 11550 ;; Auto vars:     Size  Location     Type
 11551 ;;		None
 11552 ;; Return value:  Size  Location     Type
 11553 ;;		None               void
 11554 ;; Registers used:
 11555 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11556 ;; Tracked objects:
 11557 ;;		On entry : 0/0
 11558 ;;		On exit  : 0/0
 11559 ;;		Unchanged: 0/0
 11560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11562 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11563 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11564 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11565 ;;Total ram usage:        2 bytes
 11566 ;; Hardware stack levels used:    1
 11567 ;; Hardware stack levels required when called:    3
 11568 ;; This function calls:
 11569 ;;		_NVMWrite
 11570 ;; This function is called by:
 11571 ;;		_PGMNvmReset
 11572 ;;		_PGMSelLong
 11573 ;;		_RTXReadPkt
 11574 ;; This function uses a non-reentrant model
 11575 ;;
 11576                           
 11577                           
 11578                           ;psect for function _PGMWriteNvm
 11579  1080                     _PGMWriteNvm:	
 11580                           
 11581                           ;PGM.c: 60: NVMWrite((unsigned short)(&(nvm_pgm_cfg)),(char *)(&(pgm_cfg)),sizeof(ts_PGM
      +                          _CFG));
 11582                           
 11583                           ;incstack = 0
 11584                           ; Regs used in _PGMWriteNvm: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11585  1080  3028               	movlw	low (_nvm_pgm_cfg| (0+32768))
 11586  1081  00F1               	movwf	NVMWrite@addr
 11587  1082  3098               	movlw	high (_nvm_pgm_cfg| (0+32768))
 11588  1083  00F2               	movwf	NVMWrite@addr+1
 11589  1084  3043               	movlw	(low (_pgm_cfg| (0+256)))& (0+255)
 11590  1085  00F8               	movwf	??_PGMWriteNvm
 11591  1086  0878               	movf	??_PGMWriteNvm,w
 11592  1087  00F3               	movwf	NVMWrite@source
 11593  1088  300B               	movlw	11
 11594  1089  00F9               	movwf	??_PGMWriteNvm+1
 11595  108A  0879               	movf	??_PGMWriteNvm+1,w
 11596  108B  00F4               	movwf	NVMWrite@len
 11597  108C  318B  23C9         	fcall	_NVMWrite
 11598  108E  0008               	return
 11599  108F                     __end_of_PGMWriteNvm:	
 11600                           
 11601                           	psect	text53
 11602  0BC9                     __ptext53:	
 11603 ;; *************** function _NVMWrite *****************
 11604 ;; Defined at:
 11605 ;;		line 38 in file "NVM.c"
 11606 ;; Parameters:    Size  Location     Type
 11607 ;;  addr            2    1[COMMON] unsigned short 
 11608 ;;  source          1    3[COMMON] PTR unsigned char 
 11609 ;;		 -> pgm_cfg(11), 
 11610 ;;  len             1    4[COMMON] unsigned char 
 11611 ;; Auto vars:     Size  Location     Type
 11612 ;;  bufTmpRow      64    0[BANK0 ] unsigned short [32]
 11613 ;;  rowAddr         2   64[BANK0 ] unsigned short 
 11614 ;;  j               1   68[BANK0 ] unsigned char 
 11615 ;;  latchAddr       1   67[BANK0 ] unsigned char 
 11616 ;;  i               1   66[BANK0 ] unsigned char 
 11617 ;; Return value:  Size  Location     Type
 11618 ;;		None               void
 11619 ;; Registers used:
 11620 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11621 ;; Tracked objects:
 11622 ;;		On entry : 0/0
 11623 ;;		On exit  : 0/0
 11624 ;;		Unchanged: 0/0
 11625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11626 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11627 ;;      Locals:         0      69       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11628 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11629 ;;      Totals:         7      69       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11630 ;;Total ram usage:       76 bytes
 11631 ;; Hardware stack levels used:    1
 11632 ;; Hardware stack levels required when called:    2
 11633 ;; This function calls:
 11634 ;;		Nothing
 11635 ;; This function is called by:
 11636 ;;		_PGMWriteNvm
 11637 ;; This function uses a non-reentrant model
 11638 ;;
 11639                           
 11640                           
 11641                           ;psect for function _NVMWrite
 11642  0BC9                     _NVMWrite:	
 11643                           
 11644                           ;NVM.c: 40: unsigned char i,j,latchAddr;
 11645                           ;NVM.c: 41: unsigned short rowAddr,bufTmpRow[0x20];
 11646                           ;NVM.c: 43: INTCONbits.GIE=0;
 11647                           
 11648                           ;incstack = 0
 11649                           ; Regs used in _NVMWrite: [wreg+fsr1l+fsr1h+status,2+status,0]
 11650  0BC9  138B               	bcf	11,7	;volatile
 11651                           
 11652                           ;NVM.c: 44: PMCON1bits.WREN=1;
 11653  0BCA  0023               	movlb	3	; select bank3
 11654  0BCB  1515               	bsf	21,2	;volatile
 11655                           
 11656                           ;NVM.c: 45: PMCON1bits.CFGS=0;
 11657  0BCC  1315               	bcf	21,6	;volatile
 11658                           
 11659                           ;NVM.c: 48: i=0;
 11660  0BCD  0020               	movlb	0	; select bank0
 11661  0BCE  01E2               	clrf	NVMWrite@i
 11662                           
 11663                           ;NVM.c: 50: rowAddr=(addr&(~(0x001F)));
 11664  0BCF  30E0               	movlw	224
 11665  0BD0  0571               	andwf	NVMWrite@addr,w
 11666  0BD1  00E0               	movwf	NVMWrite@rowAddr
 11667  0BD2  30FF               	movlw	255
 11668  0BD3  0572               	andwf	NVMWrite@addr+1,w
 11669  0BD4  00E1               	movwf	NVMWrite@rowAddr+1
 11670                           
 11671                           ;NVM.c: 51: latchAddr=(addr&0x001F);
 11672  0BD5  0871               	movf	NVMWrite@addr,w
 11673  0BD6  391F               	andlw	31
 11674  0BD7  00F5               	movwf	??_NVMWrite
 11675  0BD8  0875               	movf	??_NVMWrite,w
 11676  0BD9  00E3               	movwf	NVMWrite@latchAddr
 11677  0BDA                     l166:	
 11678                           ;NVM.c: 52: while(i<len)
 11679                           
 11680  0BDA  0874               	movf	NVMWrite@len,w
 11681  0BDB  0262               	subwf	NVMWrite@i,w
 11682  0BDC  1803               	btfsc	3,0
 11683  0BDD  2C82               	goto	l186
 11684  0BDE  0064               	clrwdt	;# 
 11685                           
 11686                           ;NVM.c: 57: for(j=0;j<sizeof(bufTmpRow)/sizeof(unsigned short);j++)
 11687  0BDF  0020               	movlb	0	; select bank0
 11688  0BE0  01E4               	clrf	NVMWrite@j
 11689  0BE1  3020               	movlw	32
 11690  0BE2  0264               	subwf	NVMWrite@j,w
 11691  0BE3  1803               	btfsc	3,0
 11692  0BE4  2C09               	goto	l169
 11693  0BE5                     l168:	
 11694  0BE5  0064               	clrwdt	;# 
 11695                           
 11696                           ;NVM.c: 60: PMADR=(rowAddr+j);
 11697  0BE6  0020               	movlb	0	; select bank0
 11698  0BE7  0864               	movf	NVMWrite@j,w
 11699  0BE8  0760               	addwf	NVMWrite@rowAddr,w
 11700  0BE9  00F5               	movwf	??_NVMWrite
 11701  0BEA  0861               	movf	NVMWrite@rowAddr+1,w
 11702  0BEB  1803               	skipnc
 11703  0BEC  0A61               	incf	NVMWrite@rowAddr+1,w
 11704  0BED  00F6               	movwf	??_NVMWrite+1
 11705  0BEE  0875               	movf	??_NVMWrite,w
 11706  0BEF  0023               	movlb	3	; select bank3
 11707  0BF0  0091               	movwf	17	;volatile
 11708  0BF1  0876               	movf	??_NVMWrite+1,w
 11709  0BF2  0092               	movwf	18	;volatile
 11710                           
 11711                           ;NVM.c: 61: PMCON1bits.RD=1;
 11712  0BF3  1415               	bsf	21,0	;volatile
 11713  0BF4                     l170:	
 11714                           ;NVM.c: 62: while(PMCON1bits.RD);
 11715                           
 11716  0BF4  1815               	btfsc	21,0	;volatile
 11717  0BF5  2BF4               	goto	l170
 11718                           
 11719                           ;NVM.c: 63: bufTmpRow[j]=PMDAT;
 11720  0BF6  0020               	movlb	0	; select bank0
 11721  0BF7  3564               	lslf	NVMWrite@j,w
 11722  0BF8  3E20               	addlw	(low (NVMWrite@bufTmpRow| 0))& (0+255)
 11723  0BF9  0086               	movwf	6
 11724  0BFA  0187               	clrf	7
 11725  0BFB  0023               	movlb	3	; select bank3
 11726  0BFC  0813               	movf	19,w	;volatile
 11727  0BFD  3FC0               	movwi [0]fsr1
 11728  0BFE  0814               	movf	20,w	;volatile
 11729  0BFF  3FC1               	movwi [1]fsr1
 11730  0C00  3001               	movlw	1
 11731  0C01  00F5               	movwf	??_NVMWrite
 11732  0C02  0875               	movf	??_NVMWrite,w
 11733  0C03  0020               	movlb	0	; select bank0
 11734  0C04  07E4               	addwf	NVMWrite@j,f
 11735  0C05  3020               	movlw	32
 11736  0C06  0264               	subwf	NVMWrite@j,w
 11737  0C07  1C03               	skipc
 11738  0C08  2BE5               	goto	l168
 11739  0C09                     l169:	
 11740                           
 11741                           ;NVM.c: 64: }
 11742                           ;NVM.c: 67: PMCON1bits.FREE=1;
 11743  0C09  0023               	movlb	3	; select bank3
 11744  0C0A  1615               	bsf	21,4	;volatile
 11745                           
 11746                           ;NVM.c: 68: PMADR=rowAddr;
 11747  0C0B  0020               	movlb	0	; select bank0
 11748  0C0C  0861               	movf	NVMWrite@rowAddr+1,w
 11749  0C0D  0023               	movlb	3	; select bank3
 11750  0C0E  0092               	movwf	18	;volatile
 11751  0C0F  0020               	movlb	0	; select bank0
 11752  0C10  0860               	movf	NVMWrite@rowAddr,w
 11753  0C11  0023               	movlb	3	; select bank3
 11754  0C12  0091               	movwf	17	;volatile
 11755                           
 11756                           ;NVM.c: 69: PMCON2=0x55;
 11757  0C13  3055               	movlw	85
 11758  0C14  0096               	movwf	22	;volsfr
 11759                           
 11760                           ;NVM.c: 70: PMCON2=0xAA;
 11761  0C15  30AA               	movlw	170
 11762  0C16  0096               	movwf	22	;volsfr
 11763                           
 11764                           ;NVM.c: 71: PMCON1bits.WR=1;
 11765  0C17  1495               	bsf	21,1	;volatile
 11766  0C18                     l173:	
 11767                           ;NVM.c: 72: while(PMCON1bits.WR);
 11768                           
 11769  0C18  1895               	btfsc	21,1	;volatile
 11770  0C19  2C18               	goto	l173
 11771                           
 11772                           ;NVM.c: 73: __nop();
 11773  0C1A  0000               	nop
 11774                           
 11775                           ;NVM.c: 74: __nop();
 11776  0C1B  0000               	nop
 11777                           
 11778                           ;NVM.c: 77: for(;latchAddr<sizeof(bufTmpRow)/sizeof(unsigned short);latchAddr++)
 11779  0C1C  3020               	movlw	32
 11780  0C1D  0020               	movlb	0	; select bank0
 11781  0C1E  0263               	subwf	NVMWrite@latchAddr,w
 11782  0C1F  1803               	btfsc	3,0
 11783  0C20  2C45               	goto	l3783
 11784  0C21                     l176:	
 11785  0C21  0064               	clrwdt	;# 
 11786                           
 11787                           ;NVM.c: 81: if(i>=len)
 11788  0C22  0874               	movf	NVMWrite@len,w
 11789  0C23  0020               	movlb	0	; select bank0
 11790  0C24  0262               	subwf	NVMWrite@i,w
 11791  0C25  1803               	btfsc	3,0
 11792  0C26  2C45               	goto	l3783
 11793                           
 11794                           ;NVM.c: 84: bufTmpRow[latchAddr]=(*(source+i));
 11795                           
 11796                           ;NVM.c: 82: break;
 11797  0C27  0862               	movf	NVMWrite@i,w
 11798  0C28  0773               	addwf	NVMWrite@source,w
 11799  0C29  00F5               	movwf	??_NVMWrite
 11800  0C2A  0875               	movf	??_NVMWrite,w
 11801  0C2B  0086               	movwf	6
 11802  0C2C  3001               	movlw	1	; select bank2/3
 11803  0C2D  0087               	movwf	7
 11804  0C2E  0801               	movf	1,w
 11805  0C2F  00F6               	movwf	??_NVMWrite+1
 11806  0C30  01F7               	clrf	??_NVMWrite+2
 11807  0C31  3563               	lslf	NVMWrite@latchAddr,w
 11808  0C32  3E20               	addlw	(low (NVMWrite@bufTmpRow| 0))& (0+255)
 11809  0C33  0086               	movwf	6
 11810  0C34  0187               	clrf	7
 11811  0C35  0876               	movf	??_NVMWrite+1,w
 11812  0C36  3FC0               	movwi [0]fsr1
 11813  0C37  0877               	movf	??_NVMWrite+2,w
 11814  0C38  3FC1               	movwi [1]fsr1
 11815                           
 11816                           ;NVM.c: 85: i++;
 11817  0C39  3001               	movlw	1
 11818  0C3A  00F5               	movwf	??_NVMWrite
 11819  0C3B  0875               	movf	??_NVMWrite,w
 11820  0C3C  07E2               	addwf	NVMWrite@i,f
 11821  0C3D  3001               	movlw	1
 11822  0C3E  00F5               	movwf	??_NVMWrite
 11823  0C3F  0875               	movf	??_NVMWrite,w
 11824  0C40  07E3               	addwf	NVMWrite@latchAddr,f
 11825  0C41  3020               	movlw	32
 11826  0C42  0263               	subwf	NVMWrite@latchAddr,w
 11827  0C43  1C03               	skipc
 11828  0C44  2C21               	goto	l176
 11829  0C45                     l3783:	
 11830                           
 11831                           ;NVM.c: 86: }
 11832                           ;NVM.c: 88: latchAddr=0;
 11833  0C45  01E3               	clrf	NVMWrite@latchAddr
 11834                           
 11835                           ;NVM.c: 91: for(j=0;j<sizeof(bufTmpRow)/sizeof(unsigned short);j++)
 11836  0C46  01E4               	clrf	NVMWrite@j
 11837  0C47  3020               	movlw	32
 11838  0C48  0264               	subwf	NVMWrite@j,w
 11839  0C49  1803               	btfsc	3,0
 11840  0C4A  2C7D               	goto	l3805
 11841  0C4B                     l3789:	
 11842                           
 11843                           ;NVM.c: 92: {
 11844                           ;NVM.c: 94: PMADR=(rowAddr+j);
 11845  0C4B  0864               	movf	NVMWrite@j,w
 11846  0C4C  0760               	addwf	NVMWrite@rowAddr,w
 11847  0C4D  00F5               	movwf	??_NVMWrite
 11848  0C4E  0861               	movf	NVMWrite@rowAddr+1,w
 11849  0C4F  1803               	skipnc
 11850  0C50  0A61               	incf	NVMWrite@rowAddr+1,w
 11851  0C51  00F6               	movwf	??_NVMWrite+1
 11852  0C52  0875               	movf	??_NVMWrite,w
 11853  0C53  0023               	movlb	3	; select bank3
 11854  0C54  0091               	movwf	17	;volatile
 11855  0C55  0876               	movf	??_NVMWrite+1,w
 11856  0C56  0092               	movwf	18	;volatile
 11857                           
 11858                           ;NVM.c: 95: PMDAT=bufTmpRow[j];
 11859  0C57  0020               	movlb	0	; select bank0
 11860  0C58  3564               	lslf	NVMWrite@j,w
 11861  0C59  3E20               	addlw	(low (NVMWrite@bufTmpRow| 0))& (0+255)
 11862  0C5A  0086               	movwf	6
 11863  0C5B  0187               	clrf	7
 11864  0C5C  3F40               	moviw [0]fsr1
 11865  0C5D  0023               	movlb	3	; select bank3
 11866  0C5E  0093               	movwf	19	;volatile
 11867  0C5F  3F41               	moviw [1]fsr1
 11868  0C60  0094               	movwf	20	;volatile
 11869                           
 11870                           ;NVM.c: 97: if(j==(sizeof(bufTmpRow)/sizeof(unsigned short)-1))
 11871  0C61  301F               	movlw	31
 11872  0C62  0020               	movlb	0	; select bank0
 11873  0C63  0664               	xorwf	NVMWrite@j,w
 11874  0C64  1D03               	btfss	3,2
 11875  0C65  2C69               	goto	l181
 11876                           
 11877                           ;NVM.c: 98: PMCON1bits.LWLO=0;
 11878  0C66  0023               	movlb	3	; select bank3
 11879  0C67  1295               	bcf	21,5	;volatile
 11880  0C68  2C6B               	goto	l3797
 11881  0C69                     l181:	
 11882                           
 11883                           ;NVM.c: 99: else
 11884                           ;NVM.c: 100: PMCON1bits.LWLO=1;
 11885  0C69  0023               	movlb	3	; select bank3
 11886  0C6A  1695               	bsf	21,5	;volatile
 11887  0C6B                     l3797:	
 11888                           
 11889                           ;NVM.c: 101: PMCON2=0x55;
 11890  0C6B  3055               	movlw	85
 11891  0C6C  0096               	movwf	22	;volsfr
 11892                           
 11893                           ;NVM.c: 102: PMCON2=0xAA;
 11894  0C6D  30AA               	movlw	170
 11895  0C6E  0096               	movwf	22	;volsfr
 11896                           
 11897                           ;NVM.c: 103: PMCON1bits.WR=1;
 11898  0C6F  1495               	bsf	21,1	;volatile
 11899  0C70                     l183:	
 11900                           ;NVM.c: 104: while(PMCON1bits.WR);
 11901                           
 11902  0C70  1895               	btfsc	21,1	;volatile
 11903  0C71  2C70               	goto	l183
 11904                           
 11905                           ;NVM.c: 105: __nop();
 11906  0C72  0000               	nop
 11907                           
 11908                           ;NVM.c: 106: __nop();
 11909  0C73  0000               	nop
 11910  0C74  3001               	movlw	1
 11911  0C75  00F5               	movwf	??_NVMWrite
 11912  0C76  0875               	movf	??_NVMWrite,w
 11913  0C77  0020               	movlb	0	; select bank0
 11914  0C78  07E4               	addwf	NVMWrite@j,f
 11915  0C79  3020               	movlw	32
 11916  0C7A  0264               	subwf	NVMWrite@j,w
 11917  0C7B  1C03               	skipc
 11918  0C7C  2C4B               	goto	l3789
 11919  0C7D                     l3805:	
 11920                           
 11921                           ;NVM.c: 107: }
 11922                           ;NVM.c: 109: rowAddr+=0x0020;
 11923  0C7D  3020               	movlw	32
 11924  0C7E  07E0               	addwf	NVMWrite@rowAddr,f
 11925  0C7F  3000               	movlw	0
 11926  0C80  3DE1               	addwfc	NVMWrite@rowAddr+1,f
 11927  0C81  2BDA               	goto	l166
 11928  0C82                     l186:	
 11929                           
 11930                           ;NVM.c: 110: }
 11931                           ;NVM.c: 112: INTCONbits.GIE=1;
 11932  0C82  178B               	bsf	11,7	;volatile
 11933                           
 11934                           ;NVM.c: 113: PMCON1bits.WREN=0;
 11935  0C83  0023               	movlb	3	; select bank3
 11936  0C84  1115               	bcf	21,2	;volatile
 11937  0C85  0008               	return
 11938  0C86                     __end_of_NVMWrite:	
 11939                           
 11940                           	psect	text54
 11941  1139                     __ptext54:	
 11942 ;; *************** function _OUTInit *****************
 11943 ;; Defined at:
 11944 ;;		line 6 in file "OUT.c"
 11945 ;; Parameters:    Size  Location     Type
 11946 ;;  sta             1    wreg     unsigned char 
 11947 ;; Auto vars:     Size  Location     Type
 11948 ;;  sta             1    2[COMMON] unsigned char 
 11949 ;; Return value:  Size  Location     Type
 11950 ;;		None               void
 11951 ;; Registers used:
 11952 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11953 ;; Tracked objects:
 11954 ;;		On entry : 0/0
 11955 ;;		On exit  : 0/0
 11956 ;;		Unchanged: 0/0
 11957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11958 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11959 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11960 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11961 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11962 ;;Total ram usage:        2 bytes
 11963 ;; Hardware stack levels used:    1
 11964 ;; Hardware stack levels required when called:    2
 11965 ;; This function calls:
 11966 ;;		Nothing
 11967 ;; This function is called by:
 11968 ;;		_main
 11969 ;; This function uses a non-reentrant model
 11970 ;;
 11971                           
 11972                           
 11973                           ;psect for function _OUTInit
 11974  1139                     _OUTInit:	
 11975                           
 11976                           ;incstack = 0
 11977                           ; Regs used in _OUTInit: [wreg-fsr0h+status,2+status,0]
 11978                           ;OUTInit@sta stored from wreg
 11979  1139  00F2               	movwf	OUTInit@sta
 11980                           
 11981                           ;OUT.c: 8: switch(sta)
 11982  113A  294A               	goto	l4703
 11983  113B                     l4695:	
 11984                           ;OUT.c: 9: {
 11985                           ;OUT.c: 10: case 0:
 11986                           
 11987                           
 11988                           ;OUT.c: 12: TRISA&=0b00000000; TRISB&=0b00000111; TRISC&=0b00010000; ANSELA&=0b00000000;
      +                           ANSELB&=0b00000000; ANSELC&=0b00000000;
 11989  113B  0021               	movlb	1	; select bank1
 11990  113C  018C               	clrf	12	;volatile
 11991  113D  3007               	movlw	7
 11992  113E  00F1               	movwf	??_OUTInit
 11993  113F  0871               	movf	??_OUTInit,w
 11994  1140  058D               	andwf	13,f	;volatile
 11995  1141  3010               	movlw	16
 11996  1142  00F1               	movwf	??_OUTInit
 11997  1143  0871               	movf	??_OUTInit,w
 11998  1144  058E               	andwf	14,f	;volatile
 11999  1145  0023               	movlb	3	; select bank3
 12000  1146  018C               	clrf	12	;volatile
 12001  1147  018D               	clrf	13	;volatile
 12002  1148  018E               	clrf	14	;volatile
 12003                           
 12004                           ;OUT.c: 20: }
 12005                           
 12006                           ;OUT.c: 13: break;
 12007  1149  0008               	return
 12008  114A                     l4703:	
 12009  114A  0872               	movf	OUTInit@sta,w
 12010                           
 12011                           ; Switch size 1, requested type "space"
 12012                           ; Number of cases is 1, Range of values is 0 to 0
 12013                           ; switch strategies available:
 12014                           ; Name         Instructions Cycles
 12015                           ; simple_byte            4     3 (average)
 12016                           ; direct_byte            8     6 (fixed)
 12017                           ; jumptable            260     6 (fixed)
 12018                           ;	Chosen strategy is simple_byte
 12019  114B  3A00               	xorlw	0	; case 0
 12020  114C  1903               	skipnz
 12021  114D  293B               	goto	l4695
 12022  114E  294F               	goto	l34
 12023  114F                     l34:	
 12024  114F  0008               	return
 12025  1150                     __end_of_OUTInit:	
 12026                           
 12027                           	psect	text55
 12028  104D                     __ptext55:	
 12029 ;; *************** function _NVMInit *****************
 12030 ;; Defined at:
 12031 ;;		line 6 in file "NVM.c"
 12032 ;; Parameters:    Size  Location     Type
 12033 ;;  sta             1    wreg     unsigned char 
 12034 ;; Auto vars:     Size  Location     Type
 12035 ;;  sta             1    1[COMMON] unsigned char 
 12036 ;; Return value:  Size  Location     Type
 12037 ;;		None               void
 12038 ;; Registers used:
 12039 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12040 ;; Tracked objects:
 12041 ;;		On entry : 0/0
 12042 ;;		On exit  : 0/0
 12043 ;;		Unchanged: 0/0
 12044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12046 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12047 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12048 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12049 ;;Total ram usage:        1 bytes
 12050 ;; Hardware stack levels used:    1
 12051 ;; Hardware stack levels required when called:    2
 12052 ;; This function calls:
 12053 ;;		Nothing
 12054 ;; This function is called by:
 12055 ;;		_main
 12056 ;; This function uses a non-reentrant model
 12057 ;;
 12058                           
 12059                           
 12060                           ;psect for function _NVMInit
 12061  104D                     _NVMInit:	
 12062                           
 12063                           ;incstack = 0
 12064                           ; Regs used in _NVMInit: [wreg-fsr0h+status,2+status,0]
 12065                           ;NVMInit@sta stored from wreg
 12066  104D  00F1               	movwf	NVMInit@sta
 12067                           
 12068                           ;NVM.c: 8: switch(sta)
 12069  104E  2852               	goto	l4741
 12070  104F                     l4737:	
 12071                           ;NVM.c: 9: {
 12072                           ;NVM.c: 10: case 0:
 12073                           
 12074                           
 12075                           ;NVM.c: 12: PMCON1=0b00000000;
 12076  104F  0023               	movlb	3	; select bank3
 12077  1050  0195               	clrf	21	;volatile
 12078                           
 12079                           ;NVM.c: 20: }
 12080                           
 12081                           ;NVM.c: 13: break;
 12082  1051  0008               	return
 12083  1052                     l4741:	
 12084  1052  0871               	movf	NVMInit@sta,w
 12085                           
 12086                           ; Switch size 1, requested type "space"
 12087                           ; Number of cases is 1, Range of values is 0 to 0
 12088                           ; switch strategies available:
 12089                           ; Name         Instructions Cycles
 12090                           ; simple_byte            4     3 (average)
 12091                           ; direct_byte            8     6 (fixed)
 12092                           ; jumptable            260     6 (fixed)
 12093                           ;	Chosen strategy is simple_byte
 12094  1053  3A00               	xorlw	0	; case 0
 12095  1054  1903               	skipnz
 12096  1055  284F               	goto	l4737
 12097  1056  2857               	goto	l154
 12098  1057                     l154:	
 12099  1057  0008               	return
 12100  1058                     __end_of_NVMInit:	
 12101                           
 12102                           	psect	text56
 12103  1122                     __ptext56:	
 12104 ;; *************** function _INInit *****************
 12105 ;; Defined at:
 12106 ;;		line 6 in file "IN.c"
 12107 ;; Parameters:    Size  Location     Type
 12108 ;;  sta             1    wreg     unsigned char 
 12109 ;; Auto vars:     Size  Location     Type
 12110 ;;  sta             1    2[COMMON] unsigned char 
 12111 ;; Return value:  Size  Location     Type
 12112 ;;		None               void
 12113 ;; Registers used:
 12114 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12115 ;; Tracked objects:
 12116 ;;		On entry : 0/0
 12117 ;;		On exit  : 0/0
 12118 ;;		Unchanged: 0/0
 12119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12121 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12122 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12123 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12124 ;;Total ram usage:        2 bytes
 12125 ;; Hardware stack levels used:    1
 12126 ;; Hardware stack levels required when called:    2
 12127 ;; This function calls:
 12128 ;;		Nothing
 12129 ;; This function is called by:
 12130 ;;		_main
 12131 ;; This function uses a non-reentrant model
 12132 ;;
 12133                           
 12134                           
 12135                           ;psect for function _INInit
 12136  1122                     _INInit:	
 12137                           
 12138                           ;incstack = 0
 12139                           ; Regs used in _INInit: [wreg-fsr0h+status,2+status,0]
 12140                           ;INInit@sta stored from wreg
 12141  1122  00F2               	movwf	INInit@sta
 12142                           
 12143                           ;IN.c: 8: switch(sta)
 12144  1123  2933               	goto	l4691
 12145  1124                     l4683:	
 12146                           ;IN.c: 9: {
 12147                           ;IN.c: 10: case 0:
 12148                           
 12149                           
 12150                           ;IN.c: 12: TRISB|=0b00000111; TRISC|=0b00010000; ANSELB&=0b11111000; WPUB=0b00000111;
 12151  1124  3007               	movlw	7
 12152  1125  00F1               	movwf	??_INInit
 12153  1126  0871               	movf	??_INInit,w
 12154  1127  0021               	movlb	1	; select bank1
 12155  1128  048D               	iorwf	13,f	;volatile
 12156  1129  160E               	bsf	14,4	;volatile
 12157  112A  30F8               	movlw	248
 12158  112B  00F1               	movwf	??_INInit
 12159  112C  0871               	movf	??_INInit,w
 12160  112D  0023               	movlb	3	; select bank3
 12161  112E  058D               	andwf	13,f	;volatile
 12162  112F  3007               	movlw	7
 12163  1130  0024               	movlb	4	; select bank4
 12164  1131  008D               	movwf	13	;volatile
 12165                           
 12166                           ;IN.c: 20: }
 12167                           
 12168                           ;IN.c: 13: break;
 12169  1132  0008               	return
 12170  1133                     l4691:	
 12171  1133  0872               	movf	INInit@sta,w
 12172                           
 12173                           ; Switch size 1, requested type "space"
 12174                           ; Number of cases is 1, Range of values is 0 to 0
 12175                           ; switch strategies available:
 12176                           ; Name         Instructions Cycles
 12177                           ; simple_byte            4     3 (average)
 12178                           ; direct_byte            8     6 (fixed)
 12179                           ; jumptable            260     6 (fixed)
 12180                           ;	Chosen strategy is simple_byte
 12181  1134  3A00               	xorlw	0	; case 0
 12182  1135  1903               	skipnz
 12183  1136  2924               	goto	l4683
 12184  1137  2938               	goto	l14
 12185  1138                     l14:	
 12186  1138  0008               	return
 12187  1139                     __end_of_INInit:	
 12188                           
 12189                           	psect	text57
 12190  10D1                     __ptext57:	
 12191 ;; *************** function _DPYInit *****************
 12192 ;; Defined at:
 12193 ;;		line 46 in file "DPY.c"
 12194 ;; Parameters:    Size  Location     Type
 12195 ;;  sta             1    wreg     unsigned char 
 12196 ;; Auto vars:     Size  Location     Type
 12197 ;;  sta             1    4[BANK0 ] unsigned char 
 12198 ;; Return value:  Size  Location     Type
 12199 ;;		None               void
 12200 ;; Registers used:
 12201 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12202 ;; Tracked objects:
 12203 ;;		On entry : 0/0
 12204 ;;		On exit  : 0/0
 12205 ;;		Unchanged: 0/0
 12206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12207 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12208 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12210 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12211 ;;Total ram usage:        1 bytes
 12212 ;; Hardware stack levels used:    1
 12213 ;; Hardware stack levels required when called:    6
 12214 ;; This function calls:
 12215 ;;		_DPYInitDisplay
 12216 ;; This function is called by:
 12217 ;;		_main
 12218 ;; This function uses a non-reentrant model
 12219 ;;
 12220                           
 12221                           
 12222                           ;psect for function _DPYInit
 12223  10D1                     _DPYInit:	
 12224                           
 12225                           ;incstack = 0
 12226                           ; Regs used in _DPYInit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12227                           ;DPYInit@sta stored from wreg
 12228  10D1  0020               	movlb	0	; select bank0
 12229  10D2  00A4               	movwf	DPYInit@sta
 12230                           
 12231                           ;DPY.c: 48: switch(sta)
 12232  10D3  28D7               	goto	l6095
 12233  10D4                     l6091:	
 12234                           ;DPY.c: 56: case 2:
 12235                           
 12236                           ;DPY.c: 55: break;
 12237                           
 12238                           ;DPY.c: 53: case 1:
 12239                           
 12240                           ;DPY.c: 52: break;
 12241                           
 12242                           ;DPY.c: 49: {
 12243                           ;DPY.c: 50: case 0:
 12244                           
 12245                           
 12246                           ;DPY.c: 58: DPYInitDisplay();
 12247  10D4  3195  25B0         	fcall	_DPYInitDisplay
 12248                           
 12249                           ;DPY.c: 60: }
 12250                           
 12251                           ;DPY.c: 59: break;
 12252  10D6  0008               	return
 12253  10D7                     l6095:	
 12254  10D7  0020               	movlb	0	; select bank0
 12255  10D8  0824               	movf	DPYInit@sta,w
 12256                           
 12257                           ; Switch size 1, requested type "space"
 12258                           ; Number of cases is 3, Range of values is 0 to 2
 12259                           ; switch strategies available:
 12260                           ; Name         Instructions Cycles
 12261                           ; simple_byte           10     6 (average)
 12262                           ; direct_byte           12     6 (fixed)
 12263                           ; jumptable            260     6 (fixed)
 12264                           ;	Chosen strategy is simple_byte
 12265  10D9  3A00               	xorlw	0	; case 0
 12266  10DA  1903               	skipnz
 12267  10DB  28E3               	goto	l261
 12268  10DC  3A01               	xorlw	1	; case 1
 12269  10DD  1903               	skipnz
 12270  10DE  28E3               	goto	l261
 12271  10DF  3A03               	xorlw	3	; case 2
 12272  10E0  1903               	skipnz
 12273  10E1  28D4               	goto	l6091
 12274  10E2  28E3               	goto	l261
 12275  10E3                     l261:	
 12276  10E3  0008               	return
 12277  10E4                     __end_of_DPYInit:	
 12278                           
 12279                           	psect	text58
 12280  15B0                     __ptext58:	
 12281 ;; *************** function _DPYInitDisplay *****************
 12282 ;; Defined at:
 12283 ;;		line 63 in file "DPY.c"
 12284 ;; Parameters:    Size  Location     Type
 12285 ;;		None
 12286 ;; Auto vars:     Size  Location     Type
 12287 ;;  tmp             1    3[BANK0 ] unsigned char 
 12288 ;; Return value:  Size  Location     Type
 12289 ;;		None               void
 12290 ;; Registers used:
 12291 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12292 ;; Tracked objects:
 12293 ;;		On entry : 0/0
 12294 ;;		On exit  : 0/0
 12295 ;;		Unchanged: 0/0
 12296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12298 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12299 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12300 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12301 ;;Total ram usage:        2 bytes
 12302 ;; Hardware stack levels used:    1
 12303 ;; Hardware stack levels required when called:    5
 12304 ;; This function calls:
 12305 ;;		_DLYDelay_ms
 12306 ;;		_DPYDrawChar
 12307 ;;		_DPYWriteByte
 12308 ;;		_DPYWriteNibble
 12309 ;; This function is called by:
 12310 ;;		_DPYInit
 12311 ;; This function uses a non-reentrant model
 12312 ;;
 12313                           
 12314                           
 12315                           ;psect for function _DPYInitDisplay
 12316  15B0                     _DPYInitDisplay:	
 12317                           
 12318                           ;DPY.c: 65: unsigned char tmp;
 12319                           ;DPY.c: 67: DLYDelay_ms(15);
 12320                           
 12321                           ;incstack = 0
 12322                           ; Regs used in _DPYInitDisplay: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12323  15B0  300F               	movlw	15
 12324  15B1  00F1               	movwf	DLYDelay_ms@val
 12325  15B2  3000               	movlw	0
 12326  15B3  00F2               	movwf	DLYDelay_ms@val+1
 12327  15B4  3191  2167  3195   	fcall	_DLYDelay_ms
 12328                           
 12329                           ;DPY.c: 68: LATAbits.LATA6=0;
 12330  15B7  0022               	movlb	2	; select bank2
 12331  15B8  130C               	bcf	12,6	;volatile
 12332                           
 12333                           ;DPY.c: 69: LATAbits.LATA7=0;
 12334  15B9  138C               	bcf	12,7	;volatile
 12335                           
 12336                           ;DPY.c: 72: DPYWriteNibble(RS_ISTRUCTION,0b00000010);
 12337  15BA  3002               	movlw	2
 12338  15BB  00FB               	movwf	??_DPYInitDisplay
 12339  15BC  087B               	movf	??_DPYInitDisplay,w
 12340  15BD  00F5               	movwf	DPYWriteNibble@val
 12341  15BE  3000               	movlw	0
 12342  15BF  3194  246A  3195   	fcall	_DPYWriteNibble
 12343                           
 12344                           ;DPY.c: 75: tmp=0b00100000;
 12345  15C2  3020               	movlw	32
 12346  15C3  00FB               	movwf	??_DPYInitDisplay
 12347  15C4  087B               	movf	??_DPYInitDisplay,w
 12348  15C5  0020               	movlb	0	; select bank0
 12349  15C6  00A3               	movwf	DPYInitDisplay@tmp
 12350                           
 12351                           ;DPY.c: 80: tmp|=0b00001000;
 12352  15C7  15A3               	bsf	DPYInitDisplay@tmp,3
 12353                           
 12354                           ;DPY.c: 88: DPYWriteByte(RS_ISTRUCTION,tmp);
 12355  15C8  0823               	movf	DPYInitDisplay@tmp,w
 12356  15C9  00FB               	movwf	??_DPYInitDisplay
 12357  15CA  087B               	movf	??_DPYInitDisplay,w
 12358  15CB  00F5               	movwf	DPYWriteByte@val
 12359  15CC  3000               	movlw	0
 12360  15CD  3197  27AA  3195   	fcall	_DPYWriteByte
 12361                           
 12362                           ;DPY.c: 91: DPYWriteByte(RS_ISTRUCTION,0b00001110);
 12363  15D0  300E               	movlw	14
 12364  15D1  00FB               	movwf	??_DPYInitDisplay
 12365  15D2  087B               	movf	??_DPYInitDisplay,w
 12366  15D3  00F5               	movwf	DPYWriteByte@val
 12367  15D4  3000               	movlw	0
 12368  15D5  3197  27AA  3195   	fcall	_DPYWriteByte
 12369                           
 12370                           ;DPY.c: 94: DPYWriteByte(RS_ISTRUCTION,0b00000110);
 12371  15D8  3006               	movlw	6
 12372  15D9  00FB               	movwf	??_DPYInitDisplay
 12373  15DA  087B               	movf	??_DPYInitDisplay,w
 12374  15DB  00F5               	movwf	DPYWriteByte@val
 12375  15DC  3000               	movlw	0
 12376  15DD  3197  27AA  3195   	fcall	_DPYWriteByte
 12377                           
 12378                           ;DPY.c: 97: DPYWriteByte(RS_ISTRUCTION,0b00000001);
 12379  15E0  01F5               	clrf	DPYWriteByte@val
 12380  15E1  0AF5               	incf	DPYWriteByte@val,f
 12381  15E2  3000               	movlw	0
 12382  15E3  3197  27AA  3195   	fcall	_DPYWriteByte
 12383                           
 12384                           ;DPY.c: 100: DPYDrawChar(0x00,picBatt);
 12385  15E6  30CF               	movlw	(low (_picBatt| (0+256)))& (0+255)
 12386  15E7  00FB               	movwf	??_DPYInitDisplay
 12387  15E8  087B               	movf	??_DPYInitDisplay,w
 12388  15E9  00F8               	movwf	DPYDrawChar@p
 12389  15EA  3000               	movlw	0
 12390  15EB  3193  23E0         	fcall	_DPYDrawChar
 12391  15ED  0008               	return
 12392  15EE                     __end_of_DPYInitDisplay:	
 12393                           
 12394                           	psect	text59
 12395  146A                     __ptext59:	
 12396 ;; *************** function _DPYWriteNibble *****************
 12397 ;; Defined at:
 12398 ;;		line 166 in file "DPY.c"
 12399 ;; Parameters:    Size  Location     Type
 12400 ;;  rs              1    wreg     enum E1835
 12401 ;;  val             1    5[COMMON] unsigned char 
 12402 ;; Auto vars:     Size  Location     Type
 12403 ;;  rs              1    6[COMMON] enum E1835
 12404 ;; Return value:  Size  Location     Type
 12405 ;;		None               void
 12406 ;; Registers used:
 12407 ;;		wreg, status,2, status,0, pclath, cstack
 12408 ;; Tracked objects:
 12409 ;;		On entry : 0/0
 12410 ;;		On exit  : 0/0
 12411 ;;		Unchanged: 0/0
 12412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12413 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12414 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12416 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12417 ;;Total ram usage:        2 bytes
 12418 ;; Hardware stack levels used:    1
 12419 ;; Hardware stack levels required when called:    3
 12420 ;; This function calls:
 12421 ;;		_DLYDelay_us
 12422 ;;		_OUTSetHTCDataNibble
 12423 ;; This function is called by:
 12424 ;;		_DPYInitDisplay
 12425 ;; This function uses a non-reentrant model
 12426 ;;
 12427                           
 12428                           
 12429                           ;psect for function _DPYWriteNibble
 12430  146A                     _DPYWriteNibble:	
 12431                           
 12432                           ;incstack = 0
 12433                           ; Regs used in _DPYWriteNibble: [wreg+status,2+status,0+pclath+cstack]
 12434                           ;DPYWriteNibble@rs stored from wreg
 12435  146A  00F6               	movwf	DPYWriteNibble@rs
 12436                           
 12437                           ;DPY.c: 171: LATAbits.LATA4=0;
 12438  146B  0022               	movlb	2	; select bank2
 12439  146C  120C               	bcf	12,4	;volatile
 12440                           
 12441                           ;DPY.c: 174: if(rs==RS_ISTRUCTION)
 12442  146D  0876               	movf	DPYWriteNibble@rs,w
 12443  146E  1D03               	btfss	3,2
 12444  146F  2C72               	goto	l5775
 12445                           
 12446                           ;DPY.c: 175: LATAbits.LATA6=0;
 12447  1470  130C               	bcf	12,6	;volatile
 12448  1471  2C76               	goto	l292
 12449  1472                     l5775:	
 12450                           
 12451                           ;DPY.c: 176: else if(rs==RS_DATA)
 12452  1472  0376               	decf	DPYWriteNibble@rs,w
 12453  1473  1D03               	btfss	3,2
 12454  1474  2C76               	goto	l292
 12455                           
 12456                           ;DPY.c: 177: LATAbits.LATA6=1;
 12457  1475  170C               	bsf	12,6	;volatile
 12458  1476                     l292:	
 12459                           
 12460                           ;DPY.c: 180: LATAbits.LATA7=0;
 12461  1476  138C               	bcf	12,7	;volatile
 12462                           
 12463                           ;DPY.c: 183: DLYDelay_us(100);
 12464  1477  3064               	movlw	100
 12465  1478  00F1               	movwf	DLYDelay_us@val
 12466  1479  3000               	movlw	0
 12467  147A  00F2               	movwf	DLYDelay_us@val+1
 12468  147B  3190  20AE  3194   	fcall	_DLYDelay_us
 12469                           
 12470                           ;DPY.c: 186: LATAbits.LATA4=1;
 12471  147E  0022               	movlb	2	; select bank2
 12472  147F  160C               	bsf	12,4	;volatile
 12473                           
 12474                           ;DPY.c: 188: DLYDelay_us(100);
 12475  1480  3064               	movlw	100
 12476  1481  00F1               	movwf	DLYDelay_us@val
 12477  1482  3000               	movlw	0
 12478  1483  00F2               	movwf	DLYDelay_us@val+1
 12479  1484  3190  20AE  3194   	fcall	_DLYDelay_us
 12480                           
 12481                           ;DPY.c: 190: OUTSetHTCDataNibble(val&0x0F);
 12482  1487  0875               	movf	DPYWriteNibble@val,w
 12483  1488  390F               	andlw	15
 12484  1489  3191  21B3  3194   	fcall	_OUTSetHTCDataNibble
 12485                           
 12486                           ;DPY.c: 192: DLYDelay_us(100);
 12487  148C  3064               	movlw	100
 12488  148D  00F1               	movwf	DLYDelay_us@val
 12489  148E  3000               	movlw	0
 12490  148F  00F2               	movwf	DLYDelay_us@val+1
 12491  1490  3190  20AE  3194   	fcall	_DLYDelay_us
 12492                           
 12493                           ;DPY.c: 194: LATAbits.LATA4=0;
 12494  1493  0022               	movlb	2	; select bank2
 12495  1494  120C               	bcf	12,4	;volatile
 12496                           
 12497                           ;DPY.c: 196: DLYDelay_us(100);
 12498  1495  3064               	movlw	100
 12499  1496  00F1               	movwf	DLYDelay_us@val
 12500  1497  3000               	movlw	0
 12501  1498  00F2               	movwf	DLYDelay_us@val+1
 12502  1499  3190  20AE         	fcall	_DLYDelay_us
 12503  149B  0008               	return
 12504  149C                     __end_of_DPYWriteNibble:	
 12505                           
 12506                           	psect	text60
 12507  13E0                     __ptext60:	
 12508 ;; *************** function _DPYDrawChar *****************
 12509 ;; Defined at:
 12510 ;;		line 103 in file "DPY.c"
 12511 ;; Parameters:    Size  Location     Type
 12512 ;;  addr            1    wreg     unsigned char 
 12513 ;;  p               1    8[COMMON] PTR unsigned char 
 12514 ;;		 -> picBatt(9), 
 12515 ;; Auto vars:     Size  Location     Type
 12516 ;;  addr            1    0[BANK0 ] unsigned char 
 12517 ;;  i               1    2[BANK0 ] unsigned char 
 12518 ;;  tmpAddr         1    1[BANK0 ] unsigned char 
 12519 ;; Return value:  Size  Location     Type
 12520 ;;		None               void
 12521 ;; Registers used:
 12522 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12523 ;; Tracked objects:
 12524 ;;		On entry : 0/0
 12525 ;;		On exit  : 0/0
 12526 ;;		Unchanged: 0/0
 12527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12528 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12529 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12530 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12531 ;;      Totals:         3       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12532 ;;Total ram usage:        6 bytes
 12533 ;; Hardware stack levels used:    1
 12534 ;; Hardware stack levels required when called:    4
 12535 ;; This function calls:
 12536 ;;		_DPYWriteByte
 12537 ;; This function is called by:
 12538 ;;		_DPYInitDisplay
 12539 ;; This function uses a non-reentrant model
 12540 ;;
 12541                           
 12542                           
 12543                           ;psect for function _DPYDrawChar
 12544  13E0                     _DPYDrawChar:	
 12545                           
 12546                           ;incstack = 0
 12547                           ; Regs used in _DPYDrawChar: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12548                           ;DPYDrawChar@addr stored from wreg
 12549  13E0  0020               	movlb	0	; select bank0
 12550  13E1  00A0               	movwf	DPYDrawChar@addr
 12551                           
 12552                           ;DPY.c: 105: unsigned char i,tmpAddr;
 12553                           ;DPY.c: 107: for(i=0;i<9;i++)
 12554  13E2  01A2               	clrf	DPYDrawChar@i
 12555  13E3                     L12:	
 12556  13E3  3009               	movlw	9
 12557  13E4  0222               	subwf	DPYDrawChar@i,w
 12558  13E5  1803               	btfsc	3,0
 12559  13E6  0008               	return
 12560                           
 12561                           ;DPY.c: 108: {
 12562                           ;DPY.c: 109: tmpAddr=(((i+addr)&0b00111111)|0b01000000);
 12563  13E7  0822               	movf	DPYDrawChar@i,w
 12564  13E8  0720               	addwf	DPYDrawChar@addr,w
 12565  13E9  393F               	andlw	63
 12566  13EA  3840               	iorlw	64
 12567  13EB  00F9               	movwf	??_DPYDrawChar
 12568  13EC  0879               	movf	??_DPYDrawChar,w
 12569  13ED  00A1               	movwf	DPYDrawChar@tmpAddr
 12570                           
 12571                           ;DPY.c: 110: DPYWriteByte(RS_ISTRUCTION,tmpAddr);
 12572  13EE  0821               	movf	DPYDrawChar@tmpAddr,w
 12573  13EF  00F9               	movwf	??_DPYDrawChar
 12574  13F0  0879               	movf	??_DPYDrawChar,w
 12575  13F1  00F5               	movwf	DPYWriteByte@val
 12576  13F2  3000               	movlw	0
 12577  13F3  3197  27AA  3193   	fcall	_DPYWriteByte
 12578                           
 12579                           ;DPY.c: 111: DPYWriteByte(RS_DATA,(*(p+i)));
 12580  13F6  0020               	movlb	0	; select bank0
 12581  13F7  0822               	movf	DPYDrawChar@i,w
 12582  13F8  0778               	addwf	DPYDrawChar@p,w
 12583  13F9  00F9               	movwf	??_DPYDrawChar
 12584  13FA  0879               	movf	??_DPYDrawChar,w
 12585  13FB  0086               	movwf	6
 12586  13FC  3001               	movlw	1	; select bank2/3
 12587  13FD  0087               	movwf	7
 12588  13FE  0801               	movf	1,w
 12589  13FF  00FA               	movwf	??_DPYDrawChar+1
 12590  1400  087A               	movf	??_DPYDrawChar+1,w
 12591  1401  00F5               	movwf	DPYWriteByte@val
 12592  1402  3001               	movlw	1
 12593  1403  3197  27AA  3193   	fcall	_DPYWriteByte
 12594  1406  3001               	movlw	1
 12595  1407  00F9               	movwf	??_DPYDrawChar
 12596  1408  0879               	movf	??_DPYDrawChar,w
 12597  1409  0020               	movlb	0	; select bank0
 12598  140A  07A2               	addwf	DPYDrawChar@i,f
 12599  140B  2BE3               	goto	L12
 12600  140C                     __end_of_DPYDrawChar:	
 12601                           
 12602                           	psect	text61
 12603  17AA                     __ptext61:	
 12604 ;; *************** function _DPYWriteByte *****************
 12605 ;; Defined at:
 12606 ;;		line 199 in file "DPY.c"
 12607 ;; Parameters:    Size  Location     Type
 12608 ;;  rs              1    wreg     enum E1835
 12609 ;;  val             1    5[COMMON] unsigned char 
 12610 ;; Auto vars:     Size  Location     Type
 12611 ;;  rs              1    7[COMMON] enum E1835
 12612 ;; Return value:  Size  Location     Type
 12613 ;;		None               void
 12614 ;; Registers used:
 12615 ;;		wreg, status,2, status,0, pclath, cstack
 12616 ;; Tracked objects:
 12617 ;;		On entry : 0/0
 12618 ;;		On exit  : 0/0
 12619 ;;		Unchanged: 0/0
 12620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12621 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12622 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12623 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12624 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12625 ;;Total ram usage:        3 bytes
 12626 ;; Hardware stack levels used:    1
 12627 ;; Hardware stack levels required when called:    3
 12628 ;; This function calls:
 12629 ;;		_DLYDelay_us
 12630 ;;		_OUTSetHTCDataNibble
 12631 ;; This function is called by:
 12632 ;;		_DPYInitDisplay
 12633 ;;		_DPYDrawChar
 12634 ;;		_DPYSetCur
 12635 ;;		_DPYSendChar
 12636 ;; This function uses a non-reentrant model
 12637 ;;
 12638                           
 12639                           
 12640                           ;psect for function _DPYWriteByte
 12641  17AA                     _DPYWriteByte:	
 12642                           
 12643                           ;incstack = 0
 12644                           ; Regs used in _DPYWriteByte: [wreg+status,2+status,0+pclath+cstack]
 12645                           ;DPYWriteByte@rs stored from wreg
 12646  17AA  00F7               	movwf	DPYWriteByte@rs
 12647                           
 12648                           ;DPY.c: 202: LATAbits.LATA4=0;
 12649  17AB  0022               	movlb	2	; select bank2
 12650  17AC  120C               	bcf	12,4	;volatile
 12651                           
 12652                           ;DPY.c: 205: if(rs==RS_ISTRUCTION)
 12653  17AD  0877               	movf	DPYWriteByte@rs,w
 12654  17AE  1D03               	btfss	3,2
 12655  17AF  2FB2               	goto	l5053
 12656                           
 12657                           ;DPY.c: 206: LATAbits.LATA6=0;
 12658  17B0  130C               	bcf	12,6	;volatile
 12659  17B1  2FB6               	goto	l298
 12660  17B2                     l5053:	
 12661                           
 12662                           ;DPY.c: 207: else if(rs==RS_DATA)
 12663  17B2  0377               	decf	DPYWriteByte@rs,w
 12664  17B3  1D03               	btfss	3,2
 12665  17B4  2FB6               	goto	l298
 12666                           
 12667                           ;DPY.c: 208: LATAbits.LATA6=1;
 12668  17B5  170C               	bsf	12,6	;volatile
 12669  17B6                     l298:	
 12670                           
 12671                           ;DPY.c: 211: LATAbits.LATA7=0;
 12672  17B6  138C               	bcf	12,7	;volatile
 12673                           
 12674                           ;DPY.c: 214: DLYDelay_us(100);
 12675  17B7  3064               	movlw	100
 12676  17B8  00F1               	movwf	DLYDelay_us@val
 12677  17B9  3000               	movlw	0
 12678  17BA  00F2               	movwf	DLYDelay_us@val+1
 12679  17BB  3190  20AE  3197   	fcall	_DLYDelay_us
 12680                           
 12681                           ;DPY.c: 217: LATAbits.LATA4=1;
 12682  17BE  0022               	movlb	2	; select bank2
 12683  17BF  160C               	bsf	12,4	;volatile
 12684                           
 12685                           ;DPY.c: 219: DLYDelay_us(100);
 12686  17C0  3064               	movlw	100
 12687  17C1  00F1               	movwf	DLYDelay_us@val
 12688  17C2  3000               	movlw	0
 12689  17C3  00F2               	movwf	DLYDelay_us@val+1
 12690  17C4  3190  20AE  3197   	fcall	_DLYDelay_us
 12691                           
 12692                           ;DPY.c: 221: OUTSetHTCDataNibble((val>>4)&0b00001111);
 12693  17C7  0875               	movf	DPYWriteByte@val,w
 12694  17C8  00F6               	movwf	??_DPYWriteByte
 12695  17C9  3004               	movlw	4
 12696  17CA                     u5595:	
 12697  17CA  36F6               	lsrf	??_DPYWriteByte,f
 12698  17CB  0B89               	decfsz	9,f
 12699  17CC  2FCA               	goto	u5595
 12700  17CD  0876               	movf	??_DPYWriteByte,w
 12701  17CE  390F               	andlw	15
 12702  17CF  3191  21B3  3197   	fcall	_OUTSetHTCDataNibble
 12703                           
 12704                           ;DPY.c: 223: DLYDelay_us(100);
 12705  17D2  3064               	movlw	100
 12706  17D3  00F1               	movwf	DLYDelay_us@val
 12707  17D4  3000               	movlw	0
 12708  17D5  00F2               	movwf	DLYDelay_us@val+1
 12709  17D6  3190  20AE  3197   	fcall	_DLYDelay_us
 12710                           
 12711                           ;DPY.c: 225: LATAbits.LATA4=0;
 12712  17D9  0022               	movlb	2	; select bank2
 12713  17DA  120C               	bcf	12,4	;volatile
 12714                           
 12715                           ;DPY.c: 227: DLYDelay_us(100);
 12716  17DB  3064               	movlw	100
 12717  17DC  00F1               	movwf	DLYDelay_us@val
 12718  17DD  3000               	movlw	0
 12719  17DE  00F2               	movwf	DLYDelay_us@val+1
 12720  17DF  3190  20AE  3197   	fcall	_DLYDelay_us
 12721                           
 12722                           ;DPY.c: 229: LATAbits.LATA4=1;
 12723  17E2  0022               	movlb	2	; select bank2
 12724  17E3  160C               	bsf	12,4	;volatile
 12725                           
 12726                           ;DPY.c: 231: DLYDelay_us(100);
 12727  17E4  3064               	movlw	100
 12728  17E5  00F1               	movwf	DLYDelay_us@val
 12729  17E6  3000               	movlw	0
 12730  17E7  00F2               	movwf	DLYDelay_us@val+1
 12731  17E8  3190  20AE  3197   	fcall	_DLYDelay_us
 12732                           
 12733                           ;DPY.c: 233: OUTSetHTCDataNibble(val&0b00001111);
 12734  17EB  0875               	movf	DPYWriteByte@val,w
 12735  17EC  390F               	andlw	15
 12736  17ED  3191  21B3  3197   	fcall	_OUTSetHTCDataNibble
 12737                           
 12738                           ;DPY.c: 235: DLYDelay_us(100);
 12739  17F0  3064               	movlw	100
 12740  17F1  00F1               	movwf	DLYDelay_us@val
 12741  17F2  3000               	movlw	0
 12742  17F3  00F2               	movwf	DLYDelay_us@val+1
 12743  17F4  3190  20AE  3197   	fcall	_DLYDelay_us
 12744                           
 12745                           ;DPY.c: 237: LATAbits.LATA4=0;
 12746  17F7  0022               	movlb	2	; select bank2
 12747  17F8  120C               	bcf	12,4	;volatile
 12748                           
 12749                           ;DPY.c: 239: DLYDelay_us(100);
 12750  17F9  3064               	movlw	100
 12751  17FA  00F1               	movwf	DLYDelay_us@val
 12752  17FB  3000               	movlw	0
 12753  17FC  00F2               	movwf	DLYDelay_us@val+1
 12754  17FD  3190  20AE         	fcall	_DLYDelay_us
 12755  17FF  0008               	return
 12756  1800                     __end_of_DPYWriteByte:	
 12757                           
 12758                           	psect	text62
 12759  11B3                     __ptext62:	
 12760 ;; *************** function _OUTSetHTCDataNibble *****************
 12761 ;; Defined at:
 12762 ;;		line 23 in file "OUT.c"
 12763 ;; Parameters:    Size  Location     Type
 12764 ;;  val             1    wreg     unsigned char 
 12765 ;; Auto vars:     Size  Location     Type
 12766 ;;  val             1    2[COMMON] unsigned char 
 12767 ;;  dataToSet       1    3[COMMON] unsigned char 
 12768 ;; Return value:  Size  Location     Type
 12769 ;;		None               void
 12770 ;; Registers used:
 12771 ;;		wreg, status,2, status,0
 12772 ;; Tracked objects:
 12773 ;;		On entry : 0/0
 12774 ;;		On exit  : 0/0
 12775 ;;		Unchanged: 0/0
 12776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12777 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12778 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12779 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12780 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12781 ;;Total ram usage:        3 bytes
 12782 ;; Hardware stack levels used:    1
 12783 ;; Hardware stack levels required when called:    2
 12784 ;; This function calls:
 12785 ;;		Nothing
 12786 ;; This function is called by:
 12787 ;;		_DPYWriteNibble
 12788 ;;		_DPYWriteByte
 12789 ;; This function uses a non-reentrant model
 12790 ;;
 12791                           
 12792                           
 12793                           ;psect for function _OUTSetHTCDataNibble
 12794  11B3                     _OUTSetHTCDataNibble:	
 12795                           
 12796                           ;incstack = 0
 12797                           ; Regs used in _OUTSetHTCDataNibble: [wreg+status,2+status,0]
 12798                           ;OUTSetHTCDataNibble@val stored from wreg
 12799  11B3  00F2               	movwf	OUTSetHTCDataNibble@val
 12800                           
 12801                           ;OUT.c: 25: unsigned char dataToSet=0;
 12802  11B4  01F3               	clrf	OUTSetHTCDataNibble@dataToSet
 12803                           
 12804                           ;OUT.c: 27: if(val&0b00000001)
 12805  11B5  1872               	btfsc	OUTSetHTCDataNibble@val,0
 12806                           
 12807                           ;OUT.c: 28: dataToSet|=0b00001000;
 12808  11B6  15F3               	bsf	OUTSetHTCDataNibble@dataToSet,3
 12809                           
 12810                           ;OUT.c: 29: if(val&0b00000010)
 12811  11B7  18F2               	btfsc	OUTSetHTCDataNibble@val,1
 12812                           
 12813                           ;OUT.c: 30: dataToSet|=0b00000100;
 12814  11B8  1573               	bsf	OUTSetHTCDataNibble@dataToSet,2
 12815                           
 12816                           ;OUT.c: 31: if(val&0b00000100)
 12817  11B9  1972               	btfsc	OUTSetHTCDataNibble@val,2
 12818                           
 12819                           ;OUT.c: 32: dataToSet|=0b00000010;
 12820  11BA  14F3               	bsf	OUTSetHTCDataNibble@dataToSet,1
 12821                           
 12822                           ;OUT.c: 33: if(val&0b00001000)
 12823  11BB  19F2               	btfsc	OUTSetHTCDataNibble@val,3
 12824                           
 12825                           ;OUT.c: 34: dataToSet|=0b00000001;
 12826  11BC  1473               	bsf	OUTSetHTCDataNibble@dataToSet,0
 12827                           
 12828                           ;OUT.c: 36: dataToSet&=0b00001111;
 12829  11BD  300F               	movlw	15
 12830  11BE  00F1               	movwf	??_OUTSetHTCDataNibble
 12831  11BF  0871               	movf	??_OUTSetHTCDataNibble,w
 12832  11C0  05F3               	andwf	OUTSetHTCDataNibble@dataToSet,f
 12833                           
 12834                           ;OUT.c: 37: LATA|=dataToSet;
 12835  11C1  0873               	movf	OUTSetHTCDataNibble@dataToSet,w
 12836  11C2  00F1               	movwf	??_OUTSetHTCDataNibble
 12837  11C3  0871               	movf	??_OUTSetHTCDataNibble,w
 12838  11C4  0022               	movlb	2	; select bank2
 12839  11C5  048C               	iorwf	12,f	;volatile
 12840                           
 12841                           ;OUT.c: 38: dataToSet|=0b11110000;
 12842  11C6  30F0               	movlw	240
 12843  11C7  00F1               	movwf	??_OUTSetHTCDataNibble
 12844  11C8  0871               	movf	??_OUTSetHTCDataNibble,w
 12845  11C9  04F3               	iorwf	OUTSetHTCDataNibble@dataToSet,f
 12846                           
 12847                           ;OUT.c: 39: LATA&=dataToSet;
 12848  11CA  0873               	movf	OUTSetHTCDataNibble@dataToSet,w
 12849  11CB  00F1               	movwf	??_OUTSetHTCDataNibble
 12850  11CC  0871               	movf	??_OUTSetHTCDataNibble,w
 12851  11CD  058C               	andwf	12,f	;volatile
 12852  11CE  0008               	return
 12853  11CF                     __end_of_OUTSetHTCDataNibble:	
 12854                           
 12855                           	psect	text63
 12856  10AE                     __ptext63:	
 12857 ;; *************** function _DLYDelay_us *****************
 12858 ;; Defined at:
 12859 ;;		line 6 in file "DLY.c"
 12860 ;; Parameters:    Size  Location     Type
 12861 ;;  val             2    1[COMMON] unsigned short 
 12862 ;; Auto vars:     Size  Location     Type
 12863 ;;  i               2    3[COMMON] unsigned short 
 12864 ;; Return value:  Size  Location     Type
 12865 ;;		None               void
 12866 ;; Registers used:
 12867 ;;		wreg, status,2
 12868 ;; Tracked objects:
 12869 ;;		On entry : 0/0
 12870 ;;		On exit  : 0/0
 12871 ;;		Unchanged: 0/0
 12872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12873 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12874 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12876 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12877 ;;Total ram usage:        4 bytes
 12878 ;; Hardware stack levels used:    1
 12879 ;; Hardware stack levels required when called:    2
 12880 ;; This function calls:
 12881 ;;		Nothing
 12882 ;; This function is called by:
 12883 ;;		_DPYWriteNibble
 12884 ;;		_DPYWriteByte
 12885 ;;		_DPYIsBusy
 12886 ;; This function uses a non-reentrant model
 12887 ;;
 12888                           
 12889                           
 12890                           ;psect for function _DLYDelay_us
 12891  10AE                     _DLYDelay_us:	
 12892                           
 12893                           ;DLY.c: 8: unsigned short i;
 12894                           ;DLY.c: 10: for(i=0;i<val;i++)
 12895                           
 12896                           ;incstack = 0
 12897                           ; Regs used in _DLYDelay_us: [wreg+status,2]
 12898  10AE  01F3               	clrf	DLYDelay_us@i
 12899  10AF  01F4               	clrf	DLYDelay_us@i+1
 12900  10B0                     l88:	
 12901  10B0  0872               	movf	DLYDelay_us@val+1,w
 12902  10B1  0274               	subwf	DLYDelay_us@i+1,w
 12903  10B2  1D03               	skipz
 12904  10B3  28B6               	goto	u5335
 12905  10B4  0871               	movf	DLYDelay_us@val,w
 12906  10B5  0273               	subwf	DLYDelay_us@i,w
 12907  10B6                     u5335:	
 12908  10B6  1803               	btfsc	3,0
 12909  10B7  0008               	return
 12910  10B8  0064               	clrwdt	;# 
 12911                           
 12912                           ;DLY.c: 13: _delay((unsigned long)((1)*(8000000/4000000.0)));
 12913  10B9  3200               	nop2	;2 cycle nop
 12914  10BA  3001               	movlw	1
 12915  10BB  07F3               	addwf	DLYDelay_us@i,f
 12916  10BC  3000               	movlw	0
 12917  10BD  3DF4               	addwfc	DLYDelay_us@i+1,f
 12918  10BE  28B0               	goto	l88
 12919  10BF                     __end_of_DLYDelay_us:	
 12920                           
 12921                           	psect	text64
 12922  1167                     __ptext64:	
 12923 ;; *************** function _DLYDelay_ms *****************
 12924 ;; Defined at:
 12925 ;;		line 17 in file "DLY.c"
 12926 ;; Parameters:    Size  Location     Type
 12927 ;;  val             2    1[COMMON] unsigned short 
 12928 ;; Auto vars:     Size  Location     Type
 12929 ;;  i               2    5[COMMON] unsigned short 
 12930 ;; Return value:  Size  Location     Type
 12931 ;;		None               void
 12932 ;; Registers used:
 12933 ;;		wreg, status,2
 12934 ;; Tracked objects:
 12935 ;;		On entry : 0/0
 12936 ;;		On exit  : 0/0
 12937 ;;		Unchanged: 0/0
 12938 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12939 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12940 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12941 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12942 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12943 ;;Total ram usage:        6 bytes
 12944 ;; Hardware stack levels used:    1
 12945 ;; Hardware stack levels required when called:    2
 12946 ;; This function calls:
 12947 ;;		Nothing
 12948 ;; This function is called by:
 12949 ;;		_DPYInitDisplay
 12950 ;;		_PGMSelLong
 12951 ;;		_RTXReadPkt
 12952 ;; This function uses a non-reentrant model
 12953 ;;
 12954                           
 12955                           
 12956                           ;psect for function _DLYDelay_ms
 12957  1167                     _DLYDelay_ms:	
 12958                           
 12959                           ;DLY.c: 19: unsigned short i;
 12960                           ;DLY.c: 21: for(i=0;i<val;i++)
 12961                           
 12962                           ;incstack = 0
 12963                           ; Regs used in _DLYDelay_ms: [wreg+status,2]
 12964  1167  01F5               	clrf	DLYDelay_ms@i
 12965  1168  01F6               	clrf	DLYDelay_ms@i+1
 12966  1169                     l94:	
 12967  1169  0872               	movf	DLYDelay_ms@val+1,w
 12968  116A  0276               	subwf	DLYDelay_ms@i+1,w
 12969  116B  1D03               	skipz
 12970  116C  296F               	goto	u6325
 12971  116D  0871               	movf	DLYDelay_ms@val,w
 12972  116E  0275               	subwf	DLYDelay_ms@i,w
 12973  116F                     u6325:	
 12974  116F  1803               	btfsc	3,0
 12975  1170  0008               	return
 12976  1171  0064               	clrwdt	;# 
 12977                           
 12978                           ;DLY.c: 24: _delay((unsigned long)((1)*(8000000/4000.0)));
 12979  1172  3003               	movlw	3
 12980  1173  00F4               	movwf	??_DLYDelay_ms+1
 12981  1174  3097               	movlw	151
 12982  1175  00F3               	movwf	??_DLYDelay_ms
 12983  1176                     u6877:	
 12984  1176  0BF3               	decfsz	??_DLYDelay_ms,f
 12985  1177  2976               	goto	u6877
 12986  1178  0BF4               	decfsz	??_DLYDelay_ms+1,f
 12987  1179  2976               	goto	u6877
 12988  117A  3200               	nop2
 12989  117B  3001               	movlw	1
 12990  117C  07F5               	addwf	DLYDelay_ms@i,f
 12991  117D  3000               	movlw	0
 12992  117E  3DF6               	addwfc	DLYDelay_ms@i+1,f
 12993  117F  2969               	goto	l94
 12994  1180                     __end_of_DLYDelay_ms:	
 12995                           
 12996                           	psect	text65
 12997  1267                     __ptext65:	
 12998 ;; *************** function _DINTask *****************
 12999 ;; Defined at:
 13000 ;;		line 79 in file "DIN.c"
 13001 ;; Parameters:    Size  Location     Type
 13002 ;;		None
 13003 ;; Auto vars:     Size  Location     Type
 13004 ;;		None
 13005 ;; Return value:  Size  Location     Type
 13006 ;;		None               void
 13007 ;; Registers used:
 13008 ;;		wreg, status,2, status,0
 13009 ;; Tracked objects:
 13010 ;;		On entry : 0/0
 13011 ;;		On exit  : 0/0
 13012 ;;		Unchanged: 0/0
 13013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13016 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13017 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13018 ;;Total ram usage:        1 bytes
 13019 ;; Hardware stack levels used:    1
 13020 ;; Hardware stack levels required when called:    2
 13021 ;; This function calls:
 13022 ;;		Nothing
 13023 ;; This function is called by:
 13024 ;;		_main
 13025 ;; This function uses a non-reentrant model
 13026 ;;
 13027                           
 13028                           
 13029                           ;psect for function _DINTask
 13030  1267                     _DINTask:	
 13031                           
 13032                           ;DIN.c: 81: u_in_sta_tmpTask.val=0;
 13033                           
 13034                           ;incstack = 0
 13035                           ; Regs used in _DINTask: [wreg+status,2+status,0]
 13036  1267  0021               	movlb	1	; select bank1
 13037  1268  01ED               	clrf	_u_in_sta_tmpTask^(0+128)
 13038                           
 13039                           ;DIN.c: 82: if(!PORTBbits.RB2)
 13040  1269  0020               	movlb	0	; select bank0
 13041  126A  190D               	btfsc	13,2	;volatile
 13042  126B  2A6E               	goto	l4757
 13043                           
 13044                           ;DIN.c: 83: u_in_sta_tmpTask.sel=1;
 13045  126C  0021               	movlb	1	; select bank1
 13046  126D  146D               	bsf	_u_in_sta_tmpTask^(0+128),0
 13047  126E                     l4757:	
 13048                           
 13049                           ;DIN.c: 86: if(u_in_sta_currTask.sel!=u_in_sta_tmpTask.sel)
 13050  126E  0021               	movlb	1	; select bank1
 13051  126F  086D               	movf	_u_in_sta_tmpTask^(0+128),w
 13052  1270  3901               	andlw	1
 13053  1271  00F1               	movwf	??_DINTask
 13054  1272  086C               	movf	_u_in_sta_currTask^(0+128),w
 13055  1273  3901               	andlw	1
 13056  1274  0671               	xorwf	??_DINTask,w
 13057  1275  1903               	skipnz
 13058  1276  2A7E               	goto	l4765
 13059                           
 13060                           ;DIN.c: 87: {
 13061                           ;DIN.c: 88: u_in_sta_currTask.sel=u_in_sta_tmpTask.sel;
 13062  1277  106C               	bcf	_u_in_sta_currTask^(0+128),0
 13063  1278  1C6D               	btfss	_u_in_sta_tmpTask^(0+128),0
 13064  1279  2A7B               	goto	l4761
 13065  127A  146C               	bsf	_u_in_sta_currTask^(0+128),0
 13066  127B                     l4761:	
 13067                           
 13068                           ;DIN.c: 89: tmrDbncSel=0;
 13069  127B  0021               	movlb	1	; select bank1
 13070  127C  01E7               	clrf	_tmrDbncSel^(0+128)
 13071                           
 13072                           ;DIN.c: 90: u_flg_din.tmrDbncSel=1;
 13073  127D  1469               	bsf	_u_flg_din^(0+128),0
 13074  127E                     l4765:	
 13075                           
 13076                           ;DIN.c: 91: }
 13077                           ;DIN.c: 94: if(u_in_sta_currTask.sel)
 13078  127E  1C6C               	btfss	_u_in_sta_currTask^(0+128),0
 13079  127F  2A82               	goto	l4769
 13080                           
 13081                           ;DIN.c: 95: u_flg_din.tmrLongSel=1;
 13082  1280  14E9               	bsf	_u_flg_din^(0+128),1
 13083  1281  0008               	return
 13084  1282                     l4769:	
 13085                           
 13086                           ;DIN.c: 96: else
 13087                           ;DIN.c: 97: {
 13088                           ;DIN.c: 98: tmrLongSel=0;
 13089  1282  0022               	movlb	2	; select bank2
 13090  1283  01BA               	clrf	_tmrLongSel^(0+256)
 13091  1284  01BB               	clrf	(_tmrLongSel+1)^(0+256)
 13092                           
 13093                           ;DIN.c: 99: u_flg_din.tmrLongSel=0;
 13094  1285  0021               	movlb	1	; select bank1
 13095  1286  10E9               	bcf	_u_flg_din^(0+128),1
 13096  1287  0008               	return
 13097  1288                     __end_of_DINTask:	
 13098                           
 13099                           	psect	text66
 13100  10BF                     __ptext66:	
 13101 ;; *************** function _DINInit *****************
 13102 ;; Defined at:
 13103 ;;		line 24 in file "DIN.c"
 13104 ;; Parameters:    Size  Location     Type
 13105 ;;  sta             1    wreg     unsigned char 
 13106 ;; Auto vars:     Size  Location     Type
 13107 ;;  sta             1    1[COMMON] unsigned char 
 13108 ;; Return value:  Size  Location     Type
 13109 ;;		None               void
 13110 ;; Registers used:
 13111 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 13112 ;; Tracked objects:
 13113 ;;		On entry : 0/0
 13114 ;;		On exit  : 0/0
 13115 ;;		Unchanged: 0/0
 13116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13117 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13118 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13119 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13120 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13121 ;;Total ram usage:        1 bytes
 13122 ;; Hardware stack levels used:    1
 13123 ;; Hardware stack levels required when called:    2
 13124 ;; This function calls:
 13125 ;;		Nothing
 13126 ;; This function is called by:
 13127 ;;		_main
 13128 ;; This function uses a non-reentrant model
 13129 ;;
 13130                           
 13131                           
 13132                           ;psect for function _DINInit
 13133  10BF                     _DINInit:	
 13134                           
 13135                           ;incstack = 0
 13136                           ; Regs used in _DINInit: [wreg-fsr0h+status,2+status,0]
 13137                           ;DINInit@sta stored from wreg
 13138  10BF  00F1               	movwf	DINInit@sta
 13139                           
 13140                           ;DIN.c: 26: switch(sta)
 13141  10C0  28CB               	goto	l4749
 13142  10C1                     l4745:	
 13143                           ;DIN.c: 27: {
 13144                           ;DIN.c: 31: case 1:
 13145                           
 13146                           
 13147                           ;DIN.c: 33: u_flg_din.val=0;
 13148  10C1  0021               	movlb	1	; select bank1
 13149  10C2  01E9               	clrf	_u_flg_din^(0+128)
 13150                           
 13151                           ;DIN.c: 34: u_in_sta_currTask.val=0;
 13152  10C3  01EC               	clrf	_u_in_sta_currTask^(0+128)
 13153                           
 13154                           ;DIN.c: 35: u_in_sta_tmpTask.val=0;
 13155  10C4  01ED               	clrf	_u_in_sta_tmpTask^(0+128)
 13156                           
 13157                           ;DIN.c: 36: u_in_ev_up.val=0;
 13158  10C5  0022               	movlb	2	; select bank2
 13159  10C6  01C2               	clrf	_u_in_ev_up^(0+256)
 13160                           
 13161                           ;DIN.c: 37: u_in_ev_down.val=0;
 13162  10C7  0021               	movlb	1	; select bank1
 13163  10C8  01EA               	clrf	_u_in_ev_down^(0+128)
 13164                           
 13165                           ;DIN.c: 38: u_in_ev_long.val=0;
 13166  10C9  01EB               	clrf	_u_in_ev_long^(0+128)
 13167                           
 13168                           ;DIN.c: 43: }
 13169                           
 13170                           ;DIN.c: 39: break;
 13171  10CA  0008               	return
 13172  10CB                     l4749:	
 13173  10CB  0871               	movf	DINInit@sta,w
 13174                           
 13175                           ; Switch size 1, requested type "space"
 13176                           ; Number of cases is 1, Range of values is 1 to 1
 13177                           ; switch strategies available:
 13178                           ; Name         Instructions Cycles
 13179                           ; simple_byte            4     3 (average)
 13180                           ; direct_byte           11     9 (fixed)
 13181                           ; jumptable            263     9 (fixed)
 13182                           ;	Chosen strategy is simple_byte
 13183  10CC  3A01               	xorlw	1	; case 1
 13184  10CD  1903               	skipnz
 13185  10CE  28C1               	goto	l4745
 13186  10CF  28D0               	goto	l211
 13187  10D0                     l211:	
 13188  10D0  0008               	return
 13189  10D1                     __end_of_DINInit:	
 13190                           
 13191                           	psect	text67
 13192  1438                     __ptext67:	
 13193 ;; *************** function _CC1Init *****************
 13194 ;; Defined at:
 13195 ;;		line 76 in file "CC1.c"
 13196 ;; Parameters:    Size  Location     Type
 13197 ;;  state           1    wreg     unsigned char 
 13198 ;; Auto vars:     Size  Location     Type
 13199 ;;  state           1    2[BANK0 ] unsigned char 
 13200 ;; Return value:  Size  Location     Type
 13201 ;;		None               void
 13202 ;; Registers used:
 13203 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13204 ;; Tracked objects:
 13205 ;;		On entry : 0/0
 13206 ;;		On exit  : 0/0
 13207 ;;		Unchanged: 0/0
 13208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13209 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13210 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13211 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13212 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13213 ;;Total ram usage:        3 bytes
 13214 ;; Hardware stack levels used:    1
 13215 ;; Hardware stack levels required when called:    4
 13216 ;; This function calls:
 13217 ;;		_CC1Strobe
 13218 ;;		_CC1Write
 13219 ;; This function is called by:
 13220 ;;		_main
 13221 ;; This function uses a non-reentrant model
 13222 ;;
 13223                           
 13224                           
 13225                           ;psect for function _CC1Init
 13226  1438                     _CC1Init:	
 13227                           
 13228                           ;incstack = 0
 13229                           ; Regs used in _CC1Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13230                           ;CC1Init@state stored from wreg
 13231  1438  0020               	movlb	0	; select bank0
 13232  1439  00A2               	movwf	CC1Init@state
 13233                           
 13234                           ;CC1.c: 79: switch(state)
 13235  143A  2C5D               	goto	l6199
 13236  143B                     l6193:	
 13237                           ;CC1.c: 80: {
 13238                           ;CC1.c: 81: case 0:
 13239                           
 13240                           
 13241                           ;CC1.c: 83: IOCBP=0b00000000; IOCBN=0b00000000;
 13242  143B  0027               	movlb	7	; select bank7
 13243  143C  0194               	clrf	20	;volatile
 13244  143D  0195               	clrf	21	;volatile
 13245                           
 13246                           ;CC1.c: 87: break;
 13247                           
 13248                           ;CC1.c: 85: case 1:
 13249                           
 13250                           ;CC1.c: 84: break;
 13251  143E  0008               	return
 13252  143F                     l6195:	
 13253                           ;CC1.c: 88: case 2:
 13254                           
 13255                           
 13256                           ;CC1.c: 90: CC1Strobe(SRES);
 13257  143F  3030               	movlw	48
 13258  1440  3190  20E4  3194   	fcall	_CC1Strobe
 13259                           
 13260                           ;CC1.c: 91: CC1Write(0x00,cc1InitVal,0x2E);
 13261  1443  30A0               	movlw	(low (_cc1InitVal| (0+256)))& (0+255)
 13262  1444  0020               	movlb	0	; select bank0
 13263  1445  00A0               	movwf	??_CC1Init
 13264  1446  0820               	movf	??_CC1Init,w
 13265  1447  00F7               	movwf	CC1Write@src
 13266  1448  302E               	movlw	46
 13267  1449  00A1               	movwf	??_CC1Init+1
 13268  144A  0821               	movf	??_CC1Init+1,w
 13269  144B  00F8               	movwf	CC1Write@len
 13270  144C  3000               	movlw	0
 13271  144D  3192  2228  3194   	fcall	_CC1Write
 13272                           
 13273                           ;CC1.c: 92: CC1Write(0x3E,cc1PaTable,8);
 13274  1450  3062               	movlw	(low (_cc1PaTable| (0+256)))& (0+255)
 13275  1451  0020               	movlb	0	; select bank0
 13276  1452  00A0               	movwf	??_CC1Init
 13277  1453  0820               	movf	??_CC1Init,w
 13278  1454  00F7               	movwf	CC1Write@src
 13279  1455  3008               	movlw	8
 13280  1456  00A1               	movwf	??_CC1Init+1
 13281  1457  0821               	movf	??_CC1Init+1,w
 13282  1458  00F8               	movwf	CC1Write@len
 13283  1459  303E               	movlw	62
 13284  145A  3192  2228         	fcall	_CC1Write
 13285                           
 13286                           ;CC1.c: 94: }
 13287                           
 13288                           ;CC1.c: 93: break;
 13289  145C  0008               	return
 13290  145D                     l6199:	
 13291  145D  0020               	movlb	0	; select bank0
 13292  145E  0822               	movf	CC1Init@state,w
 13293                           
 13294                           ; Switch size 1, requested type "space"
 13295                           ; Number of cases is 3, Range of values is 0 to 2
 13296                           ; switch strategies available:
 13297                           ; Name         Instructions Cycles
 13298                           ; simple_byte           10     6 (average)
 13299                           ; direct_byte           12     6 (fixed)
 13300                           ; jumptable            260     6 (fixed)
 13301                           ;	Chosen strategy is simple_byte
 13302  145F  3A00               	xorlw	0	; case 0
 13303  1460  1903               	skipnz
 13304  1461  2C3B               	goto	l6193
 13305  1462  3A01               	xorlw	1	; case 1
 13306  1463  1903               	skipnz
 13307  1464  2C69               	goto	l125
 13308  1465  3A03               	xorlw	3	; case 2
 13309  1466  1903               	skipnz
 13310  1467  2C3F               	goto	l6195
 13311  1468  2C69               	goto	l125
 13312  1469                     l125:	
 13313  1469  0008               	return
 13314  146A                     __end_of_CC1Init:	
 13315                           
 13316                           	psect	text68
 13317  1228                     __ptext68:	
 13318 ;; *************** function _CC1Write *****************
 13319 ;; Defined at:
 13320 ;;		line 130 in file "CC1.c"
 13321 ;; Parameters:    Size  Location     Type
 13322 ;;  addr            1    wreg     unsigned char 
 13323 ;;  src             1    7[COMMON] PTR unsigned char 
 13324 ;;		 -> pktTx(10), cc1PaTable(8), cc1InitVal(47), 
 13325 ;;  len             1    8[COMMON] unsigned char 
 13326 ;; Auto vars:     Size  Location     Type
 13327 ;;  addr            1   10[COMMON] unsigned char 
 13328 ;;  cc1Addr         1   11[COMMON] unsigned char 
 13329 ;; Return value:  Size  Location     Type
 13330 ;;		None               void
 13331 ;; Registers used:
 13332 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13333 ;; Tracked objects:
 13334 ;;		On entry : 0/0
 13335 ;;		On exit  : 0/0
 13336 ;;		Unchanged: 0/0
 13337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13338 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13339 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13340 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13341 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13342 ;;Total ram usage:        5 bytes
 13343 ;; Hardware stack levels used:    1
 13344 ;; Hardware stack levels required when called:    3
 13345 ;; This function calls:
 13346 ;;		_SPIWrite
 13347 ;; This function is called by:
 13348 ;;		_CC1Init
 13349 ;;		_RTXSndPkt
 13350 ;; This function uses a non-reentrant model
 13351 ;;
 13352                           
 13353                           
 13354                           ;psect for function _CC1Write
 13355  1228                     _CC1Write:	
 13356                           
 13357                           ;incstack = 0
 13358                           ; Regs used in _CC1Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13359                           ;CC1Write@addr stored from wreg
 13360  1228  00FA               	movwf	CC1Write@addr
 13361                           
 13362                           ;CC1.c: 132: unsigned char cc1Addr;
 13363                           ;CC1.c: 135: LATAbits.LATA5=0;
 13364  1229  0022               	movlb	2	; select bank2
 13365  122A  128C               	bcf	12,5	;volatile
 13366                           
 13367                           ;CC1.c: 138: cc1Addr=((addr&0b00111111)|0b01000000);
 13368  122B  087A               	movf	CC1Write@addr,w
 13369  122C  393F               	andlw	63
 13370  122D  3840               	iorlw	64
 13371  122E  00F9               	movwf	??_CC1Write
 13372  122F  0879               	movf	??_CC1Write,w
 13373  1230  00FB               	movwf	CC1Write@cc1Addr
 13374                           
 13375                           ;CC1.c: 139: SPIWrite((&(cc1Addr)),1);
 13376  1231  307B               	movlw	low CC1Write@cc1Addr
 13377  1232  00F1               	movwf	SPIWrite@srcPtr
 13378  1233  3000               	movlw	high CC1Write@cc1Addr
 13379  1234  00F2               	movwf	SPIWrite@srcPtr+1
 13380  1235  01F3               	clrf	SPIWrite@len
 13381  1236  0AF3               	incf	SPIWrite@len,f
 13382  1237  3191  21CF  3192   	fcall	_SPIWrite
 13383                           
 13384                           ;CC1.c: 142: SPIWrite(src,len);
 13385  123A  0877               	movf	CC1Write@src,w
 13386  123B  00F1               	movwf	SPIWrite@srcPtr
 13387  123C  3001               	movlw	1
 13388  123D  00F2               	movwf	SPIWrite@srcPtr+1
 13389  123E  0878               	movf	CC1Write@len,w
 13390  123F  00F9               	movwf	??_CC1Write
 13391  1240  0879               	movf	??_CC1Write,w
 13392  1241  00F3               	movwf	SPIWrite@len
 13393  1242  3191  21CF         	fcall	_SPIWrite
 13394                           
 13395                           ;CC1.c: 145: LATAbits.LATA5=1;
 13396  1244  0022               	movlb	2	; select bank2
 13397  1245  168C               	bsf	12,5	;volatile
 13398  1246  0008               	return
 13399  1247                     __end_of_CC1Write:	
 13400                           
 13401                           	psect	text69
 13402  10E4                     __ptext69:	
 13403 ;; *************** function _CC1Strobe *****************
 13404 ;; Defined at:
 13405 ;;		line 97 in file "CC1.c"
 13406 ;; Parameters:    Size  Location     Type
 13407 ;;  e_stb           1    wreg     enum E1834
 13408 ;; Auto vars:     Size  Location     Type
 13409 ;;  e_stb           1    8[COMMON] enum E1834
 13410 ;;  cc1Stb          1    9[COMMON] unsigned char 
 13411 ;;  i               1    0        unsigned char 
 13412 ;; Return value:  Size  Location     Type
 13413 ;;		None               void
 13414 ;; Registers used:
 13415 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13416 ;; Tracked objects:
 13417 ;;		On entry : 0/0
 13418 ;;		On exit  : 0/0
 13419 ;;		Unchanged: 0/0
 13420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13422 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13423 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13424 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13425 ;;Total ram usage:        3 bytes
 13426 ;; Hardware stack levels used:    1
 13427 ;; Hardware stack levels required when called:    3
 13428 ;; This function calls:
 13429 ;;		_SPIWrite
 13430 ;; This function is called by:
 13431 ;;		_CC1Init
 13432 ;;		_RTXInit
 13433 ;;		_RTXTick
 13434 ;;		_RTXSup
 13435 ;;		_RTXSndPkt
 13436 ;; This function uses a non-reentrant model
 13437 ;;
 13438                           
 13439                           
 13440                           ;psect for function _CC1Strobe
 13441  10E4                     _CC1Strobe:	
 13442                           
 13443                           ;incstack = 0
 13444                           ; Regs used in _CC1Strobe: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13445                           ;CC1Strobe@e_stb stored from wreg
 13446  10E4  00F8               	movwf	CC1Strobe@e_stb
 13447                           
 13448                           ;CC1.c: 99: unsigned char cc1Stb,i;
 13449                           ;CC1.c: 102: LATAbits.LATA5=0;
 13450  10E5  0022               	movlb	2	; select bank2
 13451  10E6  128C               	bcf	12,5	;volatile
 13452                           
 13453                           ;CC1.c: 105: cc1Stb=((e_stb&0b00111111)|0b10000000);
 13454  10E7  0878               	movf	CC1Strobe@e_stb,w
 13455  10E8  393F               	andlw	63
 13456  10E9  3880               	iorlw	128
 13457  10EA  00F7               	movwf	??_CC1Strobe
 13458  10EB  0877               	movf	??_CC1Strobe,w
 13459  10EC  00F9               	movwf	CC1Strobe@cc1Stb
 13460                           
 13461                           ;CC1.c: 106: SPIWrite((&(cc1Stb)),1);
 13462  10ED  3079               	movlw	low CC1Strobe@cc1Stb
 13463  10EE  00F1               	movwf	SPIWrite@srcPtr
 13464  10EF  3000               	movlw	high CC1Strobe@cc1Stb
 13465  10F0  00F2               	movwf	SPIWrite@srcPtr+1
 13466  10F1  01F3               	clrf	SPIWrite@len
 13467  10F2  0AF3               	incf	SPIWrite@len,f
 13468  10F3  3191  21CF         	fcall	_SPIWrite
 13469                           
 13470                           ;CC1.c: 109: LATAbits.LATA5=1;
 13471  10F5  0022               	movlb	2	; select bank2
 13472  10F6  168C               	bsf	12,5	;volatile
 13473  10F7  0008               	return
 13474  10F8                     __end_of_CC1Strobe:	
 13475                           
 13476                           	psect	text70
 13477  11CF                     __ptext70:	
 13478 ;; *************** function _SPIWrite *****************
 13479 ;; Defined at:
 13480 ;;		line 39 in file "SPI.c"
 13481 ;; Parameters:    Size  Location     Type
 13482 ;;  srcPtr          2    1[COMMON] PTR unsigned char 
 13483 ;;		 -> pktTx(10), CC1Write@cc1Addr(1), CC1Read@cc1Addr(1), CC1Strobe@cc1Stb(1), 
 13484 ;;		 -> cc1PaTable(8), cc1InitVal(47), 
 13485 ;;  len             1    3[COMMON] unsigned char 
 13486 ;; Auto vars:     Size  Location     Type
 13487 ;;  i               1    6[COMMON] unsigned char 
 13488 ;; Return value:  Size  Location     Type
 13489 ;;		None               void
 13490 ;; Registers used:
 13491 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13492 ;; Tracked objects:
 13493 ;;		On entry : 0/0
 13494 ;;		On exit  : 0/0
 13495 ;;		Unchanged: 0/0
 13496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13497 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13498 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13499 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13500 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13501 ;;Total ram usage:        6 bytes
 13502 ;; Hardware stack levels used:    1
 13503 ;; Hardware stack levels required when called:    2
 13504 ;; This function calls:
 13505 ;;		Nothing
 13506 ;; This function is called by:
 13507 ;;		_CC1Strobe
 13508 ;;		_CC1Read
 13509 ;;		_CC1Write
 13510 ;; This function uses a non-reentrant model
 13511 ;;
 13512                           
 13513                           
 13514                           ;psect for function _SPIWrite
 13515  11CF                     _SPIWrite:	
 13516                           
 13517                           ;SPI.c: 41: unsigned char i;
 13518                           ;SPI.c: 43: for(i=0;i<len;i++)
 13519                           
 13520                           ;incstack = 0
 13521                           ; Regs used in _SPIWrite: [wreg+fsr1l+fsr1h+status,2+status,0]
 13522  11CF  01F6               	clrf	SPIWrite@i
 13523  11D0                     l5151:	
 13524  11D0  0873               	movf	SPIWrite@len,w
 13525  11D1  0276               	subwf	SPIWrite@i,w
 13526  11D2  1803               	btfsc	3,0
 13527  11D3  0008               	return
 13528                           
 13529                           ;SPI.c: 44: {
 13530                           ;SPI.c: 45: PIR1bits.SSPIF=0;
 13531  11D4  0020               	movlb	0	; select bank0
 13532  11D5  1191               	bcf	17,3	;volatile
 13533                           
 13534                           ;SPI.c: 46: SSPBUF=(*(srcPtr+i));
 13535  11D6  0876               	movf	SPIWrite@i,w
 13536  11D7  00F4               	movwf	??_SPIWrite
 13537  11D8  01F5               	clrf	??_SPIWrite+1
 13538  11D9  0874               	movf	??_SPIWrite,w
 13539  11DA  0771               	addwf	SPIWrite@srcPtr,w
 13540  11DB  0086               	movwf	6
 13541  11DC  0875               	movf	??_SPIWrite+1,w
 13542  11DD  3D72               	addwfc	SPIWrite@srcPtr+1,w
 13543  11DE  0087               	movwf	7
 13544  11DF  0801               	movf	1,w
 13545  11E0  0024               	movlb	4	; select bank4
 13546  11E1  0091               	movwf	17	;volatile
 13547  11E2                     l79:	
 13548                           ;SPI.c: 47: while(!(PIR1bits.SSPIF))
 13549                           
 13550  11E2  0020               	movlb	0	; select bank0
 13551  11E3  1991               	btfsc	17,3	;volatile
 13552  11E4  29E7               	goto	l5149
 13553                           
 13554                           ;SPI.c: 48: __nop();
 13555  11E5  0000               	nop
 13556  11E6  29E2               	goto	l79
 13557  11E7                     l5149:	
 13558  11E7  3001               	movlw	1
 13559  11E8  00F4               	movwf	??_SPIWrite
 13560  11E9  0874               	movf	??_SPIWrite,w
 13561  11EA  07F6               	addwf	SPIWrite@i,f
 13562  11EB  29D0               	goto	l5151
 13563  11EC                     __end_of_SPIWrite:	
 13564                           
 13565                           	psect	intentry
 13566  0004                     __pintentry:	
 13567 ;; *************** function _INTIsr *****************
 13568 ;; Defined at:
 13569 ;;		line 37 in file "Base.c"
 13570 ;; Parameters:    Size  Location     Type
 13571 ;;		None
 13572 ;; Auto vars:     Size  Location     Type
 13573 ;;		None
 13574 ;; Return value:  Size  Location     Type
 13575 ;;		None               void
 13576 ;; Registers used:
 13577 ;;		wreg, status,2, status,0, pclath, cstack
 13578 ;; Tracked objects:
 13579 ;;		On entry : 0/0
 13580 ;;		On exit  : 0/0
 13581 ;;		Unchanged: 0/0
 13582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13584 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13585 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13586 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13587 ;;Total ram usage:        1 bytes
 13588 ;; Hardware stack levels used:    1
 13589 ;; Hardware stack levels required when called:    1
 13590 ;; This function calls:
 13591 ;;		_SYSInt
 13592 ;; This function is called by:
 13593 ;;		Interrupt level 1
 13594 ;; This function uses a non-reentrant model
 13595 ;;
 13596                           
 13597  0004                     _INTIsr:	
 13598                           
 13599                           ;incstack = 0
 13600                           ; Regs used in _INTIsr: [wreg+status,2+status,0+pclath+cstack]
 13601  0004  3180               	pagesel	$
 13602  0005  0020               	movlb	0	; select bank0
 13603  0006  087F               	movf	127,w
 13604  0007  00F0               	movwf	??_INTIsr
 13605                           
 13606                           ;Base.c: 40: if(INTCONbits.T0IF==1)
 13607  0008  1D0B               	btfss	11,2	;volatile
 13608  0009  280D               	goto	i1l786
 13609                           
 13610                           ;Base.c: 41: {
 13611                           ;Base.c: 43: INTCONbits.T0IF=0;
 13612  000A  110B               	bcf	11,2	;volatile
 13613                           
 13614                           ;Base.c: 46: SYSInt();
 13615  000B  3190  200C         	fcall	_SYSInt
 13616  000D                     i1l786:	
 13617  000D  0870               	movf	??_INTIsr,w
 13618  000E  0020               	movlb	0	; select bank0
 13619  000F  00FF               	movwf	127
 13620  0010  0009               	retfie
 13621  0011                     __end_of_INTIsr:	
 13622                           
 13623                           	psect	text72
 13624  100C                     __ptext72:	
 13625 ;; *************** function _SYSInt *****************
 13626 ;; Defined at:
 13627 ;;		line 32 in file "SYS.c"
 13628 ;; Parameters:    Size  Location     Type
 13629 ;;		None
 13630 ;; Auto vars:     Size  Location     Type
 13631 ;;		None
 13632 ;; Return value:  Size  Location     Type
 13633 ;;		None               void
 13634 ;; Registers used:
 13635 ;;		wreg
 13636 ;; Tracked objects:
 13637 ;;		On entry : 0/0
 13638 ;;		On exit  : 0/0
 13639 ;;		Unchanged: 0/0
 13640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13642 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13644 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13645 ;;Total ram usage:        0 bytes
 13646 ;; Hardware stack levels used:    1
 13647 ;; This function calls:
 13648 ;;		Nothing
 13649 ;; This function is called by:
 13650 ;;		_INTIsr
 13651 ;; This function uses a non-reentrant model
 13652 ;;
 13653                           
 13654                           
 13655                           ;psect for function _SYSInt
 13656  100C                     _SYSInt:	
 13657                           
 13658                           ;SYS.c: 35: u_SYS_STA.TICK=1;
 13659                           
 13660                           ;incstack = 0
 13661                           ; Regs used in _SYSInt: [wreg]
 13662  100C  0022               	movlb	2	; select bank2
 13663  100D  1441               	bsf	_u_SYS_STA^(0+256),0
 13664                           
 13665                           ;SYS.c: 38: TMR0=255-156;
 13666  100E  3063               	movlw	99
 13667  100F  0020               	movlb	0	; select bank0
 13668  1010  0095               	movwf	21	;volatile
 13669  1011  0008               	return
 13670  1012                     __end_of_SYSInt:	
 13671  007E                     btemp	set	126	;btemp
 13672  007E                     wtemp	set	126
 13673  007E                     wtemp0	set	126
 13674  0080                     wtemp1	set	128
 13675  0082                     wtemp2	set	130
 13676  0084                     wtemp3	set	132
 13677  0086                     wtemp4	set	134
 13678  0088                     wtemp5	set	136
 13679  007F                     wtemp6	set	127
 13680  007E                     ttemp	set	126
 13681  007E                     ttemp0	set	126
 13682  0081                     ttemp1	set	129
 13683  0084                     ttemp2	set	132
 13684  0087                     ttemp3	set	135
 13685  007F                     ttemp4	set	127
 13686  007E                     ltemp	set	126
 13687  007E                     ltemp0	set	126
 13688  0082                     ltemp1	set	130
 13689  0086                     ltemp2	set	134
 13690  0080                     ltemp3	set	128


Data Sizes:
    Strings     11
    Constant    51
    Data        64
    BSS         97
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     80      80
    BANK1            80     67      80
    BANK2            80      0      74
    BANK3            80      0      73
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    ftoa@status	PTR int  size(1) Largest target is 2
		 -> RTXVisDec@status(BANK1[2]), 

    utoa@buf	PTR unsigned char  size(1) Largest target is 4
		 -> RTXUpdateDisplay@charIdSens(BANK1[4]), 

    sp__utoa	PTR unsigned char  size(1) Largest target is 4
		 -> RTXUpdateDisplay@charIdSens(BANK1[4]), 

    itoa@buf	PTR unsigned char  size(1) Largest target is 4
		 -> RTXUpdateDisplay@charIdSens(BANK1[4]), 

    itoa@cp	PTR unsigned char  size(1) Largest target is 4
		 -> RTXUpdateDisplay@charIdSens(BANK1[4]), 

    ftoa@cp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK3[17]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_1(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK3[17]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    RTXRcvPkt@dst	PTR unsigned char  size(1) Largest target is 10
		 -> pktRx(BANK2[10]), 

    RTXSndPkt@src	PTR unsigned char  size(1) Largest target is 10
		 -> pktTx(BANK2[10]), 

    RTXVisDec@buff	PTR unsigned char  size(1) Largest target is 16
		 -> RTXUpdateDisplay@strRow2(BANK1[16]), RTXUpdateDisplay@strRow1(BANK1[16]), 

    sp__ftoa	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK3[17]), 

    RTXVisDec@p	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK3[17]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 4
		 -> RTXUpdateDisplay@charIdSens(BANK1[4]), 

    DPYSendStr@data	PTR unsigned char  size(1) Largest target is 16
		 -> RTXUpdateDisplay@strRow2(BANK1[16]), RTXUpdateDisplay@strRow1(BANK1[16]), 

    DPYDrawChar@p	PTR unsigned char  size(1) Largest target is 9
		 -> picBatt(BANK3[9]), 

    NVMWrite@source	PTR unsigned char  size(1) Largest target is 11
		 -> pgm_cfg(BANK2[11]), 

    NVMRead@dest	PTR unsigned char  size(1) Largest target is 11
		 -> pgm_cfg(BANK2[11]), 

    CC1Write@src	PTR unsigned char  size(1) Largest target is 47
		 -> pktTx(BANK2[10]), cc1PaTable(BANK2[8]), cc1InitVal(BANK3[47]), 

    CC1Read@dst	PTR unsigned char  size(2) Largest target is 10
		 -> pktRx(BANK2[10]), numTxByte(BANK1[1]), numRxByte(BANK1[1]), sta(COMMON[1]), 

    SPIWrite@srcPtr	PTR unsigned char  size(2) Largest target is 47
		 -> pktTx(BANK2[10]), CC1Write@cc1Addr(COMMON[1]), CC1Read@cc1Addr(BANK0[1]), CC1Strobe@cc1Stb(COMMON[1]), 
		 -> cc1PaTable(BANK2[8]), cc1InitVal(BANK3[47]), 

    SPIRead@dstPtr	PTR unsigned char  size(2) Largest target is 10
		 -> pktRx(BANK2[10]), numTxByte(BANK1[1]), numRxByte(BANK1[1]), sta(COMMON[1]), 


Critical Paths under _main in COMMON

    _main->_PGMInit
    _RTXReadPkt->_CC1Read
    _RTXSup->_CC1Read
    _RTXSndPkt->_CC1Read
    _RTXSndPkt->_CC1Write
    _RTXRcvPkt->_CC1Read
    _CC1Read->_SPIRead
    _RTXUpdateDisplay->___ftadd
    _itoa->_utoa
    _utoa->___lwdiv
    _sprintf->___llmod
    ___llmod->___lldiv
    ___lltoft->___ftpack
    ___ftsub->___ftadd
    ___ftadd->___ftpack
    ___ftmul->___ftpack
    _DPYSendStr->_DPYSetCur
    _DPYSetCur->_DPYWriteByte
    _DPYSendChar->_DPYWriteByte
    _DPYIsBusy->_DLYDelay_us
    _PGMReadNvm->_NVMRead
    _PGMCheckNvm->_PGMNvmReset
    _PGMNvmReset->_PGMWriteNvm
    _PGMWriteNvm->_NVMWrite
    _DPYInit->_DPYInitDisplay
    _DPYInitDisplay->_DPYDrawChar
    _DPYWriteNibble->_DLYDelay_us
    _DPYDrawChar->_DPYWriteByte
    _DPYWriteByte->_DLYDelay_us
    _CC1Init->_CC1Write
    _CC1Write->_SPIWrite
    _CC1Strobe->_SPIWrite

Critical Paths under _INTIsr in COMMON

    None.

Critical Paths under _main in BANK0

    _SYSTask->_PGMSelLong
    _RTXTick->_RTXUpdateDisplay
    _RTXSelDown->_RTXUpdateDisplay
    _RTXPgmOn->_RTXSendPgm
    _RTXSendPgm->_RTXSndPkt
    _PGMSelLong->_RTXUpdateDisplay
    _PGMSelDown->_RTXUpdateDisplay
    _PGMPgmOff->_RTXUpdateDisplay
    _RTXTask->_RTXReadPkt
    _RTXReadPkt->_RTXUpdateDisplay
    _RTXSup->_CC1Read
    _RTXSendRData->_RTXSndPkt
    _RTXSndPkt->_CC1Read
    _RTXRcvPkt->_CC1Read
    _RTXInit->_RTXUpdateDisplay
    _RTXUpdateDisplay->_RTXVisDec
    _itoa->_utoa
    _RTXVisDec->_ftoa
    _ftoa->_sprintf
    _sprintf->___llmod
    ___llmod->___lldiv
    ___fttol->___ftmul
    ___ftsub->___ftadd
    _PGMWriteNvm->_NVMWrite
    _DPYInit->_DPYInitDisplay
    _DPYInitDisplay->_DPYDrawChar

Critical Paths under _INTIsr in BANK0

    None.

Critical Paths under _main in BANK1

    _RTXTick->_RTXUpdateDisplay
    _RTXSelDown->_RTXUpdateDisplay
    _PGMSelLong->_RTXUpdateDisplay
    _PGMSelDown->_RTXUpdateDisplay
    _PGMPgmOff->_RTXUpdateDisplay
    _RTXReadPkt->_RTXUpdateDisplay
    _RTXInit->_RTXUpdateDisplay
    _RTXUpdateDisplay->_RTXVisDec

Critical Paths under _INTIsr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTIsr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTIsr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTIsr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTIsr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTIsr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTIsr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTIsr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTIsr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTIsr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTIsr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTIsr in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  415259
                                             65 BANK1      2     2      0
                            _CC1Init
                            _DINInit
                            _DINTask
                            _DPYInit
                             _INInit
                            _NVMInit
                            _OUTInit
                            _PGMInit
                            _RTXInit
                            _RTXTask
                            _SPIInit
                            _SYSInit
                            _SYSTask
 ---------------------------------------------------------------------------------
 (1) _SYSTask                                              0     0      0  312454
                            _DINTick
                          _PGMPgmOff
                         _PGMSelDown
                         _PGMSelLong
                            _PGMTick
                          _RTXPgmOff
                           _RTXPgmOn
                         _RTXSelDown
                            _RTXTick
 ---------------------------------------------------------------------------------
 (2) _RTXTick                                              0     0      0   45359
                          _CC1Strobe
                         _RTXSendPgm
                             _RTXSup
                   _RTXUpdateDisplay
 ---------------------------------------------------------------------------------
 (2) _RTXSelDown                                           0     0      0   37373
                   _RTXUpdateDisplay
 ---------------------------------------------------------------------------------
 (2) _RTXPgmOn                                             0     0      0    4405
                         _RTXSendPgm
 ---------------------------------------------------------------------------------
 (3) _RTXSendPgm                                           1     1      0    4405
                                              7 BANK0      1     1      0
                          _RTXSndPkt
 ---------------------------------------------------------------------------------
 (2) _PGMTick                                              0     0      0   37373
                          _PGMPgmOff
 ---------------------------------------------------------------------------------
 (2) _PGMSelLong                                           1     1      0   75825
                                             70 BANK0      1     1      0
                        _DLYDelay_ms
                          _PGMPgmOff
                        _PGMWriteNvm
                          _RTXPgmOff
                   _RTXUpdateDisplay
 ---------------------------------------------------------------------------------
 (2) _PGMSelDown                                           0     0      0   74746
                          _PGMPgmOff
                   _RTXUpdateDisplay
 ---------------------------------------------------------------------------------
 (3) _PGMPgmOff                                            0     0      0   37373
                   _RTXUpdateDisplay
 ---------------------------------------------------------------------------------
 (2) _DINTick                                              1     1      0       0
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSInit                                              2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _SPIInit                                              2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _RTXTask                                              0     0      0   54184
                         _RTXReadPkt
 ---------------------------------------------------------------------------------
 (2) _RTXReadPkt                                          10    10      0   54184
                                             70 BANK0     10    10      0
                            _CC1Read
                        _DLYDelay_ms
                        _PGMWriteNvm
                          _RTXPgmOff
                          _RTXRcvPkt
                       _RTXSendRData
                             _RTXSup
                   _RTXUpdateDisplay
                            ___ftmul
 ---------------------------------------------------------------------------------
 (3) _RTXSup                                               0     0      0    2903
                            _CC1Read
                          _CC1Strobe
 ---------------------------------------------------------------------------------
 (3) _RTXSendRData                                         2     2      0    4436
                                              7 BANK0      2     2      0
                          _RTXSndPkt
 ---------------------------------------------------------------------------------
 (4) _RTXSndPkt                                            4     3      1    4405
                                              3 BANK0      4     3      1
                            _CC1Read
                          _CC1Strobe
                           _CC1Write
 ---------------------------------------------------------------------------------
 (3) _RTXRcvPkt                                            3     2      1    2406
                                              3 BANK0      3     2      1
                            _CC1Read
 ---------------------------------------------------------------------------------
 (4) _CC1Read                                              6     3      3    2225
                                              9 COMMON     3     0      3
                                              0 BANK0      3     3      0
                            _SPIRead
                           _SPIWrite
 ---------------------------------------------------------------------------------
 (5) _SPIRead                                              8     5      3     253
                                              1 COMMON     8     5      3
 ---------------------------------------------------------------------------------
 (2) _RTXPgmOff                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RTXInit                                              1     1      0   38082
                                             70 BANK0      1     1      0
                          _CC1Strobe
                   _RTXUpdateDisplay
 ---------------------------------------------------------------------------------
 (3) _RTXUpdateDisplay                                    46    46      0   37373
                                             66 BANK0      4     4      0
                                             23 BANK1     42    42      0
                         _DPYSendStr
                          _RTXVisDec
                            ___ftadd
                             ___ftge
                            ___ftneg
                               _itoa
 ---------------------------------------------------------------------------------
 (4) _itoa                                                 7     3      4    2162
                                             10 COMMON     1     1      0
                                              8 BANK0      6     2      4
                               _utoa
 ---------------------------------------------------------------------------------
 (5) _utoa                                                 9     5      4    1341
                                              9 COMMON     1     1      0
                                              0 BANK0      8     4      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (6) ___lwmod                                              6     2      4     287
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              8     4      4     418
                                              1 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (4) _RTXVisDec                                           34    28      6   16557
                                             55 BANK0     11     5      6
                                              0 BANK1     23    23      0
                               _ftoa
 ---------------------------------------------------------------------------------
 (5) _ftoa                                                14    10      4   13805
                                             41 BANK0     14    10      4
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                           ___lltoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (6) _sprintf                                             36    26     10    1998
                                             13 BANK0     28    18     10
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (7) _isdigit                                              2     2      0      68
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4     348
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (7) ___llmod                                             10     2      8     287
                                             10 COMMON     2     2      0
                                              5 BANK0      8     0      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (7) ___lldiv                                             14     6      8     290
                                              1 COMMON     9     1      8
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (6) ___lltoft                                             6     2      4    2583
                                              9 COMMON     2     2      0
                                              0 BANK0      4     0      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     380
                                             16 BANK0     14    10      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftsub                                              6     0      6    4187
                                             10 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             13     7      6    3937
                                              9 COMMON     3     3      0
                                              0 BANK0     10     4      6
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     173
                                              1 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (6) ___ftmul                                             16    10      6    3354
                                              0 BANK0     16    10      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2404
                                              1 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6     648
                                              1 COMMON     9     3      6
 ---------------------------------------------------------------------------------
 (4) _DPYSendStr                                           6     3      3    7047
                                              0 BANK0      6     3      3
                          _DPYIsBusy
                        _DPYSendChar
                          _DPYSetCur
 ---------------------------------------------------------------------------------
 (5) _DPYSetCur                                            4     3      1    2577
                                              8 COMMON     4     3      1
                       _DPYWriteByte
 ---------------------------------------------------------------------------------
 (5) _DPYSendChar                                          2     2      0    2278
                                              8 COMMON     2     2      0
                       _DPYWriteByte
 ---------------------------------------------------------------------------------
 (5) _DPYIsBusy                                            2     2      0    1337
                                              5 COMMON     2     2      0
                        _DLYDelay_us
 ---------------------------------------------------------------------------------
 (1) _PGMInit                                              1     1      0    1128
                                             11 COMMON     1     1      0
                        _PGMCheckNvm
                         _PGMReadNvm
 ---------------------------------------------------------------------------------
 (2) _PGMReadNvm                                           2     2      0     326
                                              8 COMMON     2     2      0
                            _NVMRead
 ---------------------------------------------------------------------------------
 (3) _NVMRead                                              7     3      4     326
                                              1 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) _PGMCheckNvm                                          0     0      0     780
                        _PGMNvmReset
 ---------------------------------------------------------------------------------
 (3) _PGMNvmReset                                          1     1      0     780
                                             10 COMMON     1     1      0
                        _PGMWriteNvm
 ---------------------------------------------------------------------------------
 (3) _PGMWriteNvm                                          2     2      0     780
                                              8 COMMON     2     2      0
                           _NVMWrite
 ---------------------------------------------------------------------------------
 (4) _NVMWrite                                            76    72      4     780
                                              1 COMMON     7     3      4
                                              0 BANK0     69    69      0
 ---------------------------------------------------------------------------------
 (1) _OUTInit                                              2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _NVMInit                                              1     1      0      22
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _INInit                                               2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DPYInit                                              1     1      0    6841
                                              4 BANK0      1     1      0
                     _DPYInitDisplay
 ---------------------------------------------------------------------------------
 (2) _DPYInitDisplay                                       2     2      0    6810
                                             11 COMMON     1     1      0
                                              3 BANK0      1     1      0
                        _DLYDelay_ms
                        _DPYDrawChar
                       _DPYWriteByte
                     _DPYWriteNibble
 ---------------------------------------------------------------------------------
 (3) _DPYWriteNibble                                       2     1      1    1677
                                              5 COMMON     2     1      1
                        _DLYDelay_us
                _OUTSetHTCDataNibble
 ---------------------------------------------------------------------------------
 (3) _DPYDrawChar                                          6     5      1    2550
                                              8 COMMON     3     2      1
                                              0 BANK0      3     3      0
                       _DPYWriteByte
 ---------------------------------------------------------------------------------
 (6) _DPYWriteByte                                         3     2      1    2247
                                              5 COMMON     3     2      1
                        _DLYDelay_us
                _OUTSetHTCDataNibble
 ---------------------------------------------------------------------------------
 (7) _OUTSetHTCDataNibble                                  3     3      0     207
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (7) _DLYDelay_us                                          4     2      2    1300
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (3) _DLYDelay_ms                                          6     4      2     299
                                              1 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (1) _DINTask                                              1     1      0       0
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DINInit                                              1     1      0      22
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _CC1Init                                              3     3      0    1922
                                              0 BANK0      3     3      0
                          _CC1Strobe
                           _CC1Write
 ---------------------------------------------------------------------------------
 (5) _CC1Write                                             5     3      2    1202
                                              7 COMMON     5     3      2
                           _SPIWrite
 ---------------------------------------------------------------------------------
 (4) _CC1Strobe                                            4     4      0     678
                                              7 COMMON     3     3      0
                           _SPIWrite
 ---------------------------------------------------------------------------------
 (5) _SPIWrite                                             6     3      3     610
                                              1 COMMON     6     3      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _INTIsr                                              1     1      0       0
                                              0 COMMON     1     1      0
                             _SYSInt
 ---------------------------------------------------------------------------------
 (11) _SYSInt                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CC1Init
     _CC1Strobe
       _SPIWrite
     _CC1Write
       _SPIWrite
   _DINInit
   _DINTask
   _DPYInit
     _DPYInitDisplay
       _DLYDelay_ms
       _DPYDrawChar
         _DPYWriteByte
           _DLYDelay_us
           _OUTSetHTCDataNibble
       _DPYWriteByte
         _DLYDelay_us
         _OUTSetHTCDataNibble
       _DPYWriteNibble
         _DLYDelay_us
         _OUTSetHTCDataNibble
   _INInit
   _NVMInit
   _OUTInit
   _PGMInit
     _PGMCheckNvm
       _PGMNvmReset
         _PGMWriteNvm
           _NVMWrite
     _PGMReadNvm
       _NVMRead
   _RTXInit
     _CC1Strobe
       _SPIWrite
     _RTXUpdateDisplay
       _DPYSendStr
         _DPYIsBusy
           _DLYDelay_us
         _DPYSendChar
           _DPYWriteByte
             _DLYDelay_us
             _OUTSetHTCDataNibble
         _DPYSetCur
           _DPYWriteByte
             _DLYDelay_us
             _OUTSetHTCDataNibble
       _RTXVisDec
         _ftoa
           ___ftge
           ___ftmul
             ___ftpack
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___ftpack
           ___lltoft
             ___ftpack
           _sprintf
             ___lldiv
             ___llmod
               ___lldiv (ARG)
             ___wmul
             _isdigit
       ___ftadd
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftge
       ___ftneg
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
   _RTXTask
     _RTXReadPkt
       _CC1Read
         _SPIRead
         _SPIWrite
       _DLYDelay_ms
       _PGMWriteNvm
         _NVMWrite
       _RTXPgmOff
       _RTXRcvPkt
         _CC1Read
           _SPIRead
           _SPIWrite
       _RTXSendRData
         _RTXSndPkt
           _CC1Read
             _SPIRead
             _SPIWrite
           _CC1Strobe
             _SPIWrite
           _CC1Write
             _SPIWrite
       _RTXSup
         _CC1Read
           _SPIRead
           _SPIWrite
         _CC1Strobe
           _SPIWrite
       _RTXUpdateDisplay
         _DPYSendStr
           _DPYIsBusy
             _DLYDelay_us
           _DPYSendChar
             _DPYWriteByte
               _DLYDelay_us
               _OUTSetHTCDataNibble
           _DPYSetCur
             _DPYWriteByte
               _DLYDelay_us
               _OUTSetHTCDataNibble
         _RTXVisDec
           _ftoa
             ___ftge
             ___ftmul
               ___ftpack
             ___ftneg
             ___ftsub
               ___ftadd
                 ___ftneg (ARG)
                 ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol
               ___ftmul (ARG)
                 ___ftpack
             ___lltoft
               ___ftpack
             _sprintf
               ___lldiv
               ___llmod
                 ___lldiv (ARG)
               ___wmul
               _isdigit
         ___ftadd
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftneg
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
       ___ftmul
         ___ftpack
   _SPIInit
   _SYSInit
   _SYSTask
     _DINTick
     _PGMPgmOff
       _RTXUpdateDisplay
         _DPYSendStr
           _DPYIsBusy
             _DLYDelay_us
           _DPYSendChar
             _DPYWriteByte
               _DLYDelay_us
               _OUTSetHTCDataNibble
           _DPYSetCur
             _DPYWriteByte
               _DLYDelay_us
               _OUTSetHTCDataNibble
         _RTXVisDec
           _ftoa
             ___ftge
             ___ftmul
               ___ftpack
             ___ftneg
             ___ftsub
               ___ftadd
                 ___ftneg (ARG)
                 ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol
               ___ftmul (ARG)
                 ___ftpack
             ___lltoft
               ___ftpack
             _sprintf
               ___lldiv
               ___llmod
                 ___lldiv (ARG)
               ___wmul
               _isdigit
         ___ftadd
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftneg
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
     _PGMSelDown
       _PGMPgmOff
         _RTXUpdateDisplay
           _DPYSendStr
             _DPYIsBusy
               _DLYDelay_us
             _DPYSendChar
               _DPYWriteByte
                 _DLYDelay_us
                 _OUTSetHTCDataNibble
             _DPYSetCur
               _DPYWriteByte
                 _DLYDelay_us
                 _OUTSetHTCDataNibble
           _RTXVisDec
             _ftoa
               ___ftge
               ___ftmul
                 ___ftpack
               ___ftneg
               ___ftsub
                 ___ftadd
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___fttol
                 ___ftmul (ARG)
                   ___ftpack
               ___lltoft
                 ___ftpack
               _sprintf
                 ___lldiv
                 ___llmod
                   ___lldiv (ARG)
                 ___wmul
                 _isdigit
           ___ftadd
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftge
           ___ftneg
           _itoa
             _utoa
               ___lwdiv
               ___lwmod
       _RTXUpdateDisplay
         _DPYSendStr
           _DPYIsBusy
             _DLYDelay_us
           _DPYSendChar
             _DPYWriteByte
               _DLYDelay_us
               _OUTSetHTCDataNibble
           _DPYSetCur
             _DPYWriteByte
               _DLYDelay_us
               _OUTSetHTCDataNibble
         _RTXVisDec
           _ftoa
             ___ftge
             ___ftmul
               ___ftpack
             ___ftneg
             ___ftsub
               ___ftadd
                 ___ftneg (ARG)
                 ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol
               ___ftmul (ARG)
                 ___ftpack
             ___lltoft
               ___ftpack
             _sprintf
               ___lldiv
               ___llmod
                 ___lldiv (ARG)
               ___wmul
               _isdigit
         ___ftadd
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftneg
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
     _PGMSelLong
       _DLYDelay_ms
       _PGMPgmOff
         _RTXUpdateDisplay
           _DPYSendStr
             _DPYIsBusy
               _DLYDelay_us
             _DPYSendChar
               _DPYWriteByte
                 _DLYDelay_us
                 _OUTSetHTCDataNibble
             _DPYSetCur
               _DPYWriteByte
                 _DLYDelay_us
                 _OUTSetHTCDataNibble
           _RTXVisDec
             _ftoa
               ___ftge
               ___ftmul
                 ___ftpack
               ___ftneg
               ___ftsub
                 ___ftadd
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___fttol
                 ___ftmul (ARG)
                   ___ftpack
               ___lltoft
                 ___ftpack
               _sprintf
                 ___lldiv
                 ___llmod
                   ___lldiv (ARG)
                 ___wmul
                 _isdigit
           ___ftadd
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftge
           ___ftneg
           _itoa
             _utoa
               ___lwdiv
               ___lwmod
       _PGMWriteNvm
         _NVMWrite
       _RTXPgmOff
       _RTXUpdateDisplay
         _DPYSendStr
           _DPYIsBusy
             _DLYDelay_us
           _DPYSendChar
             _DPYWriteByte
               _DLYDelay_us
               _OUTSetHTCDataNibble
           _DPYSetCur
             _DPYWriteByte
               _DLYDelay_us
               _OUTSetHTCDataNibble
         _RTXVisDec
           _ftoa
             ___ftge
             ___ftmul
               ___ftpack
             ___ftneg
             ___ftsub
               ___ftadd
                 ___ftneg (ARG)
                 ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol
               ___ftmul (ARG)
                 ___ftpack
             ___lltoft
               ___ftpack
             _sprintf
               ___lldiv
               ___llmod
                 ___lldiv (ARG)
               ___wmul
               _isdigit
         ___ftadd
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftneg
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
     _PGMTick
       _PGMPgmOff
         _RTXUpdateDisplay
           _DPYSendStr
             _DPYIsBusy
               _DLYDelay_us
             _DPYSendChar
               _DPYWriteByte
                 _DLYDelay_us
                 _OUTSetHTCDataNibble
             _DPYSetCur
               _DPYWriteByte
                 _DLYDelay_us
                 _OUTSetHTCDataNibble
           _RTXVisDec
             _ftoa
               ___ftge
               ___ftmul
                 ___ftpack
               ___ftneg
               ___ftsub
                 ___ftadd
                   ___ftneg (ARG)
                   ___ftpack (ARG)
                 ___lltoft (ARG)
                   ___ftpack
               ___fttol
                 ___ftmul (ARG)
                   ___ftpack
               ___lltoft
                 ___ftpack
               _sprintf
                 ___lldiv
                 ___llmod
                   ___lldiv (ARG)
                 ___wmul
                 _isdigit
           ___ftadd
             ___ftneg (ARG)
             ___ftpack (ARG)
           ___ftge
           ___ftneg
           _itoa
             _utoa
               ___lwdiv
               ___lwmod
     _RTXPgmOff
     _RTXPgmOn
       _RTXSendPgm
         _RTXSndPkt
           _CC1Read
             _SPIRead
             _SPIWrite
           _CC1Strobe
             _SPIWrite
           _CC1Write
             _SPIWrite
     _RTXSelDown
       _RTXUpdateDisplay
         _DPYSendStr
           _DPYIsBusy
             _DLYDelay_us
           _DPYSendChar
             _DPYWriteByte
               _DLYDelay_us
               _OUTSetHTCDataNibble
           _DPYSetCur
             _DPYWriteByte
               _DLYDelay_us
               _OUTSetHTCDataNibble
         _RTXVisDec
           _ftoa
             ___ftge
             ___ftmul
               ___ftpack
             ___ftneg
             ___ftsub
               ___ftadd
                 ___ftneg (ARG)
                 ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol
               ___ftmul (ARG)
                 ___ftpack
             ___lltoft
               ___ftpack
             _sprintf
               ___lldiv
               ___llmod
                 ___lldiv (ARG)
               ___wmul
               _isdigit
         ___ftadd
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftneg
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
     _RTXTick
       _CC1Strobe
         _SPIWrite
       _RTXSendPgm
         _RTXSndPkt
           _CC1Read
             _SPIRead
             _SPIWrite
           _CC1Strobe
             _SPIWrite
           _CC1Write
             _SPIWrite
       _RTXSup
         _CC1Read
           _SPIRead
           _SPIWrite
         _CC1Strobe
           _SPIWrite
       _RTXUpdateDisplay
         _DPYSendStr
           _DPYIsBusy
             _DLYDelay_us
           _DPYSendChar
             _DPYWriteByte
               _DLYDelay_us
               _OUTSetHTCDataNibble
           _DPYSetCur
             _DPYWriteByte
               _DLYDelay_us
               _OUTSetHTCDataNibble
         _RTXVisDec
           _ftoa
             ___ftge
             ___ftmul
               ___ftpack
             ___ftneg
             ___ftsub
               ___ftadd
                 ___ftneg (ARG)
                 ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol
               ___ftmul (ARG)
                 ___ftpack
             ___lltoft
               ___ftpack
             _sprintf
               ___lldiv
               ___llmod
                 ___lldiv (ARG)
               ___wmul
               _isdigit
         ___ftadd
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftneg
         _itoa
           _utoa
             ___lwdiv
             ___lwmod

 _INTIsr (ROOT)
   _SYSInt

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     43      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4A       9       92.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      49      11       91.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     140      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     140      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed Feb 17 20:27:32 2016

          __size_of_CC1Strobe 0014                    __CFG_CP$ON 0000                            l14 1138  
                          l34 114F                            l61 120C                            l70 12FB  
                          l65 1227                            l94 1169                            l79 11E2  
                          l88 10B0           ___wmul@multiplicand 0073                  ?_DLYDelay_ms 0071  
                ?_DLYDelay_us 0071                  ___ftadd@exp1 007B                  ___ftadd@exp2 007A  
                ___ftadd@sign 0079                           l211 10D0                           l125 1469  
                         l214 134F                           l216 134D                           l154 1057  
                         l170 0BF4                           l261 10E3                           l181 0C69  
                         l173 0C18                           l166 0BDA                           l183 0C70  
                         l159 132A                           l176 0C21                           l168 0BE5  
                         l169 0C09                           l186 0C82                           l530 05C2  
                         l603 0DA6                           l292 1476                           l532 0685  
                         l367 11B2                           l528 051C                           l704 0822  
                         l537 06A9                           l561 13DF                           l298 17B6  
                         l570 1707                           l394 1117                           l539 06BD  
                         l483 087D                           l820 0EC6                           l823 0EE5  
                         l846 07ED                           l790 16F9                           l791 16FA  
                         l789 16BD               __end_of_CC1Init 146A               __end_of_CC1Read 12AA  
                         _sta 007C                  __CFG_BORV$LO 0000                           wreg 0009  
                  _RTXReadPkt 0C86               __end_of_DINInit 10D1            DPYDrawChar@tmpAddr 0021  
             __end_of_DINTask 1288               __end_of_DINTick 1363                    _RTXSelDown 1180  
                __CFG_LVP$OFF 0000                    _RTXSendPgm 1247                   ?_DPYSendStr 0020  
                        l1014 0925                          l1015 092D                          l1007 0912  
                        l1106 09B1                          l1038 078E                          l1126 08CA  
                        l3401 0FAA                          l5011 075A                          l3411 0FFA  
                        l5013 0764                          l5005 0747                          l3253 1768  
                        l3165 07E7                          l3325 0E56                          l3333 0E84  
                        l3423 15A1                          l5103 0B99                          l5023 0780  
                        l5015 0769                          l3263 1796                          l3255 1776  
                        l3159 1070                          l3407 0FEF                          l3351 0ECD  
                        l3343 0E93                          l3319 0E46               __end_of_DPYInit 10E4  
                        l5033 07B2                          l5025 078A                          l5017 076D  
                        l5121 11F4                          l3345 0EC2                          l3409 0E23  
                        l6001 0D0A                          l4315 1318                          l3419 158B  
                        l5107 0BA1                          l5043 07CD                          l3507 095D  
                        l5131 13A0                          l3267 17A1                          l3283 165D  
                        l3347 0EC8                          l5053 17B2                          l5029 07A0  
                        l3533 09A8                          l3525 098D                          l3277 1637  
                        l3373 0F19                          l3357 0EF4                          l5205 09FE  
                        l6021 0D63                          l5151 11D0                          l3535 09B4  
                        l3527 099B                          l3279 1645                          l3287 1668  
                        l3391 0F92                          l3383 0F5D                          l3367 0F13  
                        l5311 12E5                          l5143 12F2                          l6007 0D17  
                        l5073 0B2C                          l5129 138E                          l3393 0F95  
                        l6041 0DBB                          l6009 0D1B                          l5091 0B7D  
                        l3539 09C2                          l3387 0F75                          l3379 0F46  
                        l5331 0A9C                          l3571 14F5                          l3563 14D7  
                        l5219 0884                          l6123 0871                          l5139 1300  
                        l5149 11E7                          l3805 0C7D                          l5181 1606  
                        l5325 0A87                          l3565 14E3                          l5229 08A2  
                        l6117 0861                          l6045 0DDE                          l6029 0D85  
                        l6061 0C90                          l4703 114A                          l5159 1104  
                        l5095 0B85                          l5079 0B42                          l5351 0AF2  
                        l3575 14FE                          l6055 0E0B                          l6071 1190  
                        l6151 14BA                          l5281 168B                          l5337 0ABD  
                        l3593 142A                          l5521 024C                          l5513 022E  
                        l6049 0E00                          l6057 0E0F                          l6145 14B3  
                        l6091 10D4                          l4475 1061                          l5291 16A2  
                        l5283 1693                          l5347 0AE5                          l3587 1412  
                        l4723 121C                          l6163 14C8                          l6139 14A9  
                        l4741 1052                          l5357 0AF3                          l3589 141E  
                        l3597 1433                          l5613 03B9                          l5517 0236  
                        l5509 0227                          l5381 0066                          l6157 14C1  
                        l6095 10D7                          l3783 0C45                          l5359 0B11  
                        l5375 0061                          l6193 143B                          l4745 10C1  
                        l4761 127B                          l4737 104F                          l5297 16B1  
                        l5369 004D                          l6195 143F                          l4683 1124  
                        l4691 1133                          l5299 167D                          l4931 08F9  
                        l5731 0655                          l5651 0492                          l5483 01CB  
                        l5539 0274                          l5387 007A                          l6099 0826  
                        l5811 13C0                          l4843 0817                          l4749 10CB  
                        l4765 127E                          l4757 126E                          l3797 0C6B  
                        l3789 0C4B                          l4941 0923                          l4933 08FE  
                        l4925 08E8                          l5397 008E                          l5813 13C4  
                        l4829 0802                          l6199 145D                          l4695 113B  
                        l4783 119B                          l4943 0917                          l5751 06D1  
                        l5671 04EC                          l5639 0451                          l5815 13CC  
                        l4847 081A                          l4769 1282                          l4785 119F  
                        l4793 11AA                          l4929 08EF                          l5585 0330  
                        l5753 06D3                          l5763 1720                          l5819 13D4  
                        l5941 1564                          l5775 1472                          l4983 0717  
                        l5935 1558                          l4993 072D                          l5697 0592  
                        l4987 071E                          l5971 0CCE                          l5965 0CBD  
                        l5991 0CF2                          l5977 0CDF                          l5995 0CFB  
                        l5987 0CEC                          STR_1 1833                  __CFG_WDTE$ON 0000  
           NVMWrite@bufTmpRow 0020                          _LATA 010C                          u3105 1797  
                        u3135 163A                          u3065 176B                          u3305 0F3C  
                        u3155 1653                          u3085 1777                          u3165 165E  
                        u3325 0F55                          u3095 178B                          u3335 0F6D  
                        _PIE1 0091                          _PIE2 0092                          u3345 0F85  
                        u3605 098E                          u2805 07F3                          u5215 090D  
                        u5235 091E                          u3635 09A9                          u3715 14E4  
                        u3725 14EE                          u5335 10B6                          u3575 0964  
                        u3735 14F6                          u5275 0934                          u5195 08F4  
                        u5435 0748                          u2795 07EE                          u6325 116F  
                        u5525 0781                          u3765 1415                          u3695 14DA  
                        u5705 0BA8                          u5625 0B4E                          u5465 075B  
                        u3785 1424                          _PIR1 0011                          _PIR2 0012  
                        u5635 0B5E                          u3795 142B                          u5655 0B86  
                        u5495 076E                          u5735 1394                          u5665 0B8C  
                        u5595 17CA                          u5695 0BA2                          u5935 0ABB  
                        u6877 1176                          _TMR0 0015                          _WPUB 020D  
             __end_of_PGMInit 11B3               __end_of_PGMTick 10AE                  __CFG_WRT$OFF 0000  
               __CFG_FCMEN$ON 0000                          _main 16B7              __end_of_CC1Write 1247  
                        _ftoa 09CB                  ___ftpack@arg 0071               __end_of_NVMInit 1058  
             __end_of_NVMRead 133C                          _itoa 12CD                  ___ftpack@exp 0074  
             __end_of_SPIInit 1228               __end_of_SPIRead 1315                          fsr0h 0005  
                        fsr1h 0007                          fsr0l 0004                          indf0 0000  
                        indf1 0001                          fsr1l 0006                          btemp 007E  
                        _utoa 087E               __end_of_OUTInit 1150                  ?_DPYDrawChar 0078  
               __CFG_BOREN$ON 0000                          ltemp 007E                          start 0011  
             __end_of_RTXInit 087E                          ttemp 007E             NVMWrite@latchAddr 0063  
             __end_of_RTXTask 101E               __end_of_RTXTick 1575                          wtemp 007E  
               __CFG_IESO$OFF 0000               __end_of_SYSInit 0823               __end_of_SYSTask 14CF  
          __size_of_DPYIsBusy 0040                  ___ftmul@cntr 002E                  ___ftmul@sign 002F  
          __size_of_DPYSetCur 0015                   ?_PGMReadNvm 0070                 __CFG_LPBOR$ON 0000  
                 ?_PGMSelDown 0070                  ___fttol@exp1 003D                   ?_PGMSelLong 0070  
            ??_DPYWriteNibble 0076                  ?_DPYSendChar 0070                  ___fttol@lval 0039  
                SPIInit@state 0072                         ?_main 0070                         ?_ftoa 0049  
                       ?_itoa 0028               __end_of___ftadd 07E5               __end_of___ftneg 1032  
             __end_of___lldiv 17AA                         ?_utoa 0020               __end_of___ftmul 0BC9  
                       _T1CON 0018               __end_of___llmod 1671               __end_of___ftsub 120A  
             __end_of___fttol 09CB            __size_of_PGMPgmOff 000A                         _IOCBN 0395  
                       _IOCBP 0394               __end_of___lwdiv 1503               __end_of___lwmod 1438  
                       i1l786 000D                         _PMADR 0191                         _PMDAT 0193  
                       _TMR1H 0017                         _TMR1L 0016                         _TRISA 008C  
                       _TRISB 008D                         _TRISC 008E                 __CFG_PWRTE$ON 0000  
                ___lltoft@exp 007A                   _sys_pgm_sta 0140         __size_of_RTXSendRData 0023  
             __end_of_dpowers 1828             __end_of_CC1Strobe 10F8               __end_of_isdigit 1072  
                       _pktRx 014E                         _pktTx 0158                 ___ftpack@sign 0075  
                       main@i 00E2                         ftoa@f 0049              __end_of_NVMWrite 0C86  
                       ftoa@l 0052              __end_of_SPIWrite 11EC                         ltemp0 007E  
                       ltemp1 0082                         ltemp2 0086                         ltemp3 0080  
                       ttemp0 007E                         ttemp1 0081                         ttemp2 0084  
                       ttemp3 0087                         ttemp4 007F                         utoa@c 0026  
            __end_of_RTXPgmOn 100C                         utoa@v 0024                         status 0003  
                       wtemp0 007E                         wtemp1 0080                         wtemp2 0082  
                       wtemp3 0084                         wtemp4 0086                         wtemp5 0088  
                       wtemp6 007F               __end_of_sprintf 1000                  ?_PGMCheckNvm 0070  
              __CFG_MCLRE$OFF 0000               __initialization 0013    RTXUpdateDisplay@charIdSens 00BA  
                DLYDelay_ms@i 0075                  DLYDelay_us@i 0073            __size_of_RTXPgmOff 0006  
                __end_of_main 1705                  __end_of_ftoa 0A6E            __size_of_RTXRcvPkt 000E  
                __end_of_itoa 12F1            __size_of_RTXSndPkt 0052                  __end_of_utoa 08E0  
          __size_of_RTXVisDec 00A7                     ??_CC1Init 0020                     ??_CC1Read 0020  
         __size_of_DPYSendStr 0046                CC1Strobe@e_stb 0078             RTXUpdateDisplay@i 00DE  
                 DPYIsBusy@bf 0076                        ??_main 00E1                    _cc1PaTable 0162  
                      ??_ftoa 004D                 ___fttol@sign1 0038                        ??_itoa 007A  
                _RTXSendRData 12AA                        ??_utoa 0079                  CC1Init@state 0022  
                   ??_DINInit 0071                  NVMWrite@addr 0071                     ??_DINTask 0071  
                   ??_DINTick 0071                    _cc1InitVal 01A0                  ?_PGMNvmReset 0070  
                   ??_DPYInit 007C                     ??_PGMInit 007B                     ??_PGMTick 007C  
                 ?_RTXReadPkt 0070             __end_of_DPYIsBusy 162E                   ?_RTXSelDown 0070  
               SPIRead@dstPtr 0071                   ?_RTXSendPgm 0070                     ??_NVMInit 0071  
                   ??_NVMRead 0075             __end_of_DPYSetCur 110D              ___llmod@dividend 0029  
                   ??_SPIInit 0071                     ??_SPIRead 0074                     ??_OUTInit 0071  
                      _ANSELA 018C                        _ANSELB 018D                        _ANSELC 018E  
            __end_of___ftpack 0944           __size_of_PGMReadNvm 000F              __end_of___lltoft 13B5  
                   ??_RTXInit 007C                  ?_PGMWriteNvm 0070           __size_of_PGMSelDown 0015  
                   ??_RTXTask 007C                     ??_RTXTick 007C           __size_of_PGMSelLong 0027  
                      _INTCON 000B        OUTSetHTCDataNibble@val 0072           _OUTSetHTCDataNibble 11B3  
                   ??_SYSInit 0071                        _PMCON1 0195                        _PMCON2 0196  
                   ??_SYSTask 007C                        _INTIsr 0004                        _OSCCON 0099  
          _batt_gen_curr_sens 0123                        _INInit 1122                        _WDTCON 0097  
                      _SSPBUF 0211                        _RTXSup 13B5             __end_of_PGMPgmOff 104D  
                      _SYSInt 100C      __end_of_RTXUpdateDisplay 06EF                   DPYSendStr@i 0024  
                      ___ftge 1575             RTXVisDec@maxDigit 005B                 ?_DPYWriteByte 0075  
                      ___wmul 07E5                     ??___ftadd 0026                __CFG_STVREN$ON 0000  
                   ??___ftneg 0074                     ??___lldiv 0079                     ??___ftmul 0026  
                   ??___llmod 007A                     ??___ftsub 007C                     ??___fttol 0034  
                   ??___lwdiv 0075                     ??___lwmod 0075          ?_OUTSetHTCDataNibble 0070  
     __size_of_DPYInitDisplay 003E                        _tmrPgm 013C           RTXReadPkt@volt4Calc 0067  
                      ftoa@cp 0056         ___ftmul@f3_as_product 002B          __size_of_DLYDelay_ms 0019  
                      itoa@cp 002C          __size_of_DLYDelay_us 0011                     ?_CC1Write 0077  
                   ??_isdigit 0071                _batt_volt_sens 0126             __end_of_RTXPgmOff 1018  
           __end_of_RTXRcvPkt 1080                     ??_sprintf 0037             __end_of_RTXSndPkt 1757  
           __end_of_RTXVisDec 0B15       __end_of__initialization 0043            _batt_con_curr_sens 0120  
                  ___ftadd@f1 0020                    ___ftadd@f2 0023                    ___ftge@ff1 0071  
                  ___ftge@ff2 0074                    ___ftneg@f1 0071                    ___ftmul@f1 0020  
                  ___ftmul@f2 0023          __size_of_DPYDrawChar 002C                    ___ftsub@f1 002D  
                  ___ftsub@f2 002A                    ___fttol@f1 0030                __pcstackCOMMON 0070  
              ??_DPYWriteByte 0076                  __pidataBANK2 1032                  __pidataBANK3 1503  
         __size_of_RTXReadPkt 0197                    ___lltoft@c 0020           __size_of_RTXSelDown 0019  
             NVMWrite@rowAddr 0060           __size_of_RTXSendPgm 0020         ??_OUTSetHTCDataNibble 0071  
                   ?_NVMWrite 0071               CC1Strobe@cc1Stb 0079          __size_of_DPYSendChar 0009  
                   ?_SPIWrite 0071                    CC1Read@len 007B                    CC1Read@dst 0079  
                   ?_RTXPgmOn 0070                    ??_CC1Write 0079            RTXSendRData@sensId 0028  
                CC1Write@addr 007A             RTXReadPkt@valBatt 006D                  DPYDrawChar@i 0022  
                DPYDrawChar@p 0078            RTXUpdateDisplay@iR 00E0                  ??_DPYSendStr 0023  
                sprintf@width 0044                    __pbssBANK1 00E3                    __pbssBANK2 0120  
                  __pbssBANK3 01D8                       ?_INTIsr 0070                       ?_INInit 0070  
             __CFG_VCAPEN$OFF 0000                       ?_RTXSup 0070                       ?_SYSInt 0070  
                   INInit@sta 0072          __size_of_PGMCheckNvm 000C                    __pmaintext 16B7  
                     ?___ftge 0071                  ??_PGMReadNvm 0078               CC1Write@cc1Addr 007B  
                     ?___wmul 0071                  ??_PGMSelDown 007C                  ??_PGMSelLong 0066  
                  __pintentry 0004                       _CC1Init 1438                       _CC1Read 1288  
          __end_of_DPYSendStr 16B7             _u_in_sta_currTask 00EC                     ?___ftpack 0071  
                  ??_NVMWrite 0075                     ?___lltoft 0020                    ??_SPIWrite 0074  
                     _DINInit 10BF                       _DINTick 133C                       _DINTask 1267  
                  ??_RTXPgmOn 007C                       _DPYInit 10D1                       _PGMInit 1199  
                     _PGMTick 109E          __size_of_PGMNvmReset 0017                       _SSPCON1 0215  
                     _SSPCON2 0216                       _NVMInit 104D                       _NVMRead 1315  
                     _SPIInit 120A                       _SPIRead 12F1                       _SSPSTAT 0214  
                     _OUTInit 1139                  DPYSendChar@c 0079               DPYDrawChar@addr 0020  
                     _RTXInit 0823                  DPYSetCur@col 0078                       _RTXTick 153B  
                     _RTXTask 1018                  DPYSetCur@row 007A            __end_of_PGMReadNvm 109E  
                     _SYSInit 0800                       _SYSTask 149C            __end_of_PGMSelDown 1122  
          __end_of_PGMSelLong 138A                     _CC1Strobe 10E4               __size_of_INTIsr 000D  
             __size_of_INInit 0017          __size_of_PGMWriteNvm 000F               __size_of_RTXSup 002B  
             __size_of_SYSInt 0006                     NVMWrite@i 0062                     NVMWrite@j 0064  
                   SPIWrite@i 0076               __size_of___ftge 003B                       ___ftadd 06EF  
                RTXInit@state 0066                       ___ftneg 102A                       ___lldiv 1757  
             __size_of___wmul 001B                       ___ftmul 0B15                       ___llmod 162E  
                     ___ftsub 11EC                       ___fttol 0944                       ___lwdiv 14CF  
                     ___lwmod 140C                _DPYInitDisplay 15B0                    ??___ftpack 0076  
                  ??___lltoft 0079                       __ptext1 149C                       __ptext2 153B  
                     __ptext3 1180                       __ptext4 1007                       __ptext5 1247  
                     __ptext6 109E                       __ptext7 1363                       __ptext8 110D  
                     __ptext9 1043                       _picBatt 01CF                       _dpowers 1800  
                     _isdigit 1064                       _pgm_cfg 0143                       _pgm_flg 00E5  
                ??_RTXReadPkt 0066                  ??_RTXSelDown 007C                  ??_RTXSendPgm 0027  
        __end_of_DPYWriteByte 1800                       _sprintf 0E1D                       clrloop0 1025  
                     _rtx_flg 00E6  OUTSetHTCDataNibble@dataToSet 0073                  RTXRcvPkt@len 0023  
                RTXRcvPkt@dst 0025          end_of_initialization 0043                       ftoa@buf 01D8  
                  _u_in_ev_up 0142                       ftoa@rem 004E                     _DPYIsBusy 15EE  
                  ?_CC1Strobe 0070                       itoa@buf 002D                       init_ram 101E  
                     itoa@val 0028                     _DPYSetCur 10F8                       initloop 101F  
                RTXSndPkt@len 0023                  RTXSndPkt@src 0026               ___lldiv@divisor 0071  
           ?_RTXUpdateDisplay 0070               ___lldiv@counter 0024            ??_RTXUpdateDisplay 0062  
                   _PGMPgmOff 1043        __end_of_DPYInitDisplay 15EE                    _tmrDbncSel 00E7  
                RTXVisDec@val 0057                  __pstringtext 1800            __end_of_RTXReadPkt 0E1D  
                     utoa@buf 0027                       utoa@val 0020            __end_of_RTXSelDown 1199  
                  DINInit@sta 0071            __end_of_RTXSendPgm 1267                     _PORTAbits 000C  
                   _PORTBbits 000D             DPYWriteNibble@val 0075                    _tmrLongSel 013A  
                  _tmrVisBatt 00E3              __CFG_FOSC$INTOSC 0000       __size_of_DPYWriteNibble 0032  
           __size_of_CC1Write 001F                   NVMRead@addr 0071                   NVMRead@dest 0073  
                  ?_DPYIsBusy 0070                     _RTXPgmOff 1012                     _RTXRcvPkt 1072  
                  ?_DPYSetCur 0078                     _RTXSndPkt 1705                     _RTXVisDec 0A6E  
              __end_of_INTIsr 0011                __end_of_INInit 1139                __end_of_RTXSup 13E0  
              __end_of_SYSInt 1012                _tmrCalibration 0138                   ___ftmul@exp 002A  
                  ?_PGMPgmOff 0070               ?_DPYInitDisplay 0070                DLYDelay_ms@val 0071  
              DLYDelay_us@val 0071                __end_of___ftge 15B0                __end_of___wmul 0800  
               ??_DLYDelay_ms 0073                 ??_DLYDelay_us 0073                DPYSendStr@data 0021  
                SYSInit@state 0072             __size_of_NVMWrite 00BD             __size_of_SPIWrite 001D  
         start_initialization 0013             __size_of_RTXPgmOn 0005                    ftoa@status 004C  
                 CC1Read@addr 0021                   NVMWrite@len 0074                      ??_INTIsr 0070  
                    ??_INInit 0071                   ??_CC1Strobe 0077                    ?_RTXPgmOff 0070  
                  DPYInit@sta 0024                    ?_RTXRcvPkt 0023                    ?_RTXSndPkt 0023  
                  ?_RTXVisDec 0057                 ??_DPYDrawChar 0079               ___llmod@divisor 0025  
             ___llmod@counter 007B                      ??_RTXSup 007C                      ??_SYSInt 0070  
              CC1Read@cc1Addr 0022   __end_of_OUTSetHTCDataNibble 11CF           RTXUpdateDisplay@val 00DF  
                    ??___ftge 0077                     _e_POS_PKT 013E                      ??___wmul 0075  
               ??_DPYSendChar 0078                      ?_CC1Init 0070                      ?_CC1Read 0079  
                 __pdataBANK2 0162                   __pdataBANK3 01A0         _RTXUpdateDisplay$1513 00B7  
                 SPIWrite@len 0073                      ?_DINInit 0070                      ?_DINTask 0070  
                    ?_DINTick 0070         __size_of_DPYWriteByte 0056             __size_of___ftpack 0064  
           __size_of___lltoft 002B                   __pbssCOMMON 007C                      ?_DPYInit 0070  
                   ___latbits 0003                 __pcstackBANK0 0020                 __pcstackBANK1 00A0  
         __end_of_DLYDelay_ms 1180           __end_of_DLYDelay_us 10BF                     _s_CC1_FLG 013F  
                    ?_PGMInit 0070                      ?_PGMTick 0070                  _isdigit$1264 0071  
                    ?_NVMInit 0070                      ?_NVMRead 0071                      ?_SPIInit 0070  
                    ?_SPIRead 0071                NVMWrite@source 0073                      ?_OUTInit 0070  
     RTXUpdateDisplay@strRow1 00CE       RTXUpdateDisplay@strRow2 00BE                  PGMInit@state 007B  
                    ?_RTXInit 0070                      ?_RTXTask 0070                      ?_RTXTick 0070  
                 ??_DPYIsBusy 0075                   CC1Write@len 0078                      ?_SYSInit 0070  
                 CC1Write@src 0077                      ?_SYSTask 0070                   sprintf@flag 003D  
                 ??_DPYSetCur 0079                 ??_PGMCheckNvm 007B                   sprintf@prec 0046  
            ___lwdiv@dividend 0073                   ??_PGMPgmOff 007C           __end_of_DPYDrawChar 140C  
                    ?___ftadd 0020                  _DPYWriteByte 17AA                      ?___ftneg 0071  
                    ?___lldiv 0071                      ?___ftmul 0020                      ?___llmod 0025  
                    ?___ftsub 002A                      ?___fttol 0030                      ?___lwdiv 0071  
                    ?___lwmod 0071                     _gen_power 0132                     _u_SYS_STA 0141  
                   _con_power 012C              _u_in_sta_tmpTask 00ED                 ?_RTXSendRData 0070  
                    NVMRead@i 0077                 ??_PGMNvmReset 007A                      SPIRead@i 0078  
                    _CC1Write 1228           __end_of_DPYSendChar 1043                      ?_isdigit 0070  
              _DPYWriteNibble 146A              ___lwdiv@quotient 0076                      ?_sprintf 002D  
               ??_PGMWriteNvm 0078                   ??_RTXPgmOff 0071                     _u_flg_din 00E9  
                 ??_RTXRcvPkt 0024                   ??_RTXSndPkt 0024                ___wmul@product 0075  
                    _LATAbits 010C                   ??_RTXVisDec 005D                     clear_ram0 1024  
                   _numRxByte 00EE                      _PIR1bits 0011                     _numTxByte 00EF  
         __end_of_PGMCheckNvm 1064              DPYWriteNibble@rs 0076                     _tmrRcvPkt 00E8  
              ??_RTXSendRData 0027              __size_of_CC1Init 0032              __size_of_CC1Read 0022  
                 _DLYDelay_ms 1167                   _DLYDelay_us 10AE                      _NVMWrite 0BC9  
                    _SPIWrite 11CF             ___wmul@multiplier 0071                    NVMInit@sta 0071  
                  NVMRead@len 0074        __end_of_DPYWriteNibble 149C     __size_of_RTXUpdateDisplay 06A9  
               DPYSetCur@addr 007B                      _RTXPgmOn 1007              __size_of_DINInit 0012  
            __size_of_DINTask 0021              __size_of_DINTick 0027              __size_of_DPYInit 0013  
                   _volt_sens 0135                    SPIRead@len 0073              __size_of_PGMInit 001A  
            __size_of_PGMTick 0010           __end_of_PGMNvmReset 1167                 DPYSendStr@col 0020  
               DPYSendStr@len 0022              __size_of_NVMInit 000B                 DPYSendStr@row 0025  
            __size_of_NVMRead 0027              __size_of_SPIInit 001E              __size_of_SPIRead 0024  
                _u_in_ev_down 00EA                  _u_in_ev_long 00EB              __size_of_OUTInit 0017  
            __size_of_RTXInit 005B         RTXReadPkt@valVoltCurr 006A              __size_of_RTXTask 0006  
            __size_of_RTXTick 003A              __size_of_SYSInit 0023              __size_of_SYSTask 0033  
            ??_DPYInitDisplay 007B                   _DPYDrawChar 13E0                    OUTInit@sta 0072  
         __end_of_PGMWriteNvm 108F               RTXVisDec@offset 005C               RTXVisDec@posDec 00B2  
             RTXVisDec@strTmp 00A0               RTXVisDec@status 00B0                   _DPYSendChar 103A  
            __size_of___ftadd 00F6              __size_of___ftneg 0008              __size_of___lldiv 0053  
            __size_of___ftmul 00B4              __size_of___llmod 0043              __size_of___ftsub 001E  
            __size_of___fttol 0087              __size_of___lwdiv 0034              __size_of___lwmod 002C  
                    ___ftpack 08E0                      ___lltoft 138A               ?_DPYWriteNibble 0075  
               _gen_curr_sens 012F                    sprintf@val 003F              __size_of_isdigit 000E  
             ___lwdiv@divisor 0071               ___lwdiv@counter 0078                      __ptext10 133C  
                    __ptext11 0800                      __ptext20 12F1                      __ptext12 120A  
                    __ptext21 1012                      __ptext13 1018                      __ptext30 0E1D  
                    __ptext22 0823                      __ptext14 0C86                      __ptext31 1064  
                    __ptext23 0046                      __ptext15 13B5                      __ptext40 0B15  
                    __ptext32 07E5                      __ptext24 12CD                      __ptext16 12AA  
                    __ptext41 08E0                      __ptext33 162E                      __ptext25 087E  
                    __ptext17 1705                      __ptext50 1058                      __ptext42 1575  
                    __ptext34 1757                      __ptext26 140C                      __ptext18 1072  
                    __ptext51 1150                      __ptext43 1671                      __ptext35 138A  
                    __ptext27 14CF                      __ptext19 1288                      __ptext60 13E0  
                    __ptext52 1080                      __ptext44 10F8                      __ptext36 0944  
                    __ptext28 0A6E                      __ptext61 17AA                      __ptext53 0BC9  
                    __ptext45 103A                      __ptext37 11EC                      __ptext29 09CB  
                    __ptext70 11CF                      __ptext62 11B3                      __ptext54 1139  
                    __ptext46 15EE                      __ptext38 06EF                      __ptext63 10AE  
                    __ptext55 104D                      __ptext47 1199                      __ptext39 102A  
                    __ptext72 100C                      __ptext64 1167                      __ptext56 1122  
                    __ptext48 108F                      __ptext65 1267                      __ptext57 10D1  
                    __ptext49 1315                      __ptext66 10BF                      __ptext58 15B0  
                    __ptext67 1438                      __ptext59 146A                      __ptext68 1228  
                    __ptext69 10E4              __size_of_sprintf 01E3           __end_of_nvm_pgm_cfg 1833  
               __size_of_main 004E                 __size_of_ftoa 00A3                 __size_of_itoa 0024  
                 _PGMCheckNvm 1058                 __size_of_utoa 0062                    RTXVisDec@i 00B6  
                  RTXVisDec@j 00B5                    RTXVisDec@p 00B4               DPYWriteByte@val 0075  
               _con_curr_sens 0129                   _PGMNvmReset 1150                    _INTCONbits 000B  
              RTXVisDec@isDec 00B3                      itoa@base 002A                      isdigit@c 0072  
           DPYInitDisplay@tmp 0023                    _DPYSendStr 1671                SPIWrite@srcPtr 0071  
                    intlevel1 0000                     sprintf@ap 003E                     sprintf@sp 0043  
                 _PGMWriteNvm 1080                    _PMCON1bits 0195          __end_of_RTXSendRData 12CD  
            ___lwmod@dividend 0073              ___lldiv@dividend 0075             __CFG_CLKOUTEN$OFF 0000  
              DPYWriteByte@rs 0077                    _PGMReadNvm 108F                    _PGMSelDown 110D  
                  _PGMSelLong 1363  __size_of_OUTSetHTCDataNibble 001C                 RTXVisDec@buff 005A  
                    utoa@base 0022                    _OPTION_REG 0095                      sprintf@c 0048  
                    sprintf@f 002D              _RTXUpdateDisplay 0046              ___lldiv@quotient 0020  
             ___lwmod@divisor 0071               ___lwmod@counter 0076                   _nvm_pgm_cfg 1828  
                  _SSPCONbits 0215  
