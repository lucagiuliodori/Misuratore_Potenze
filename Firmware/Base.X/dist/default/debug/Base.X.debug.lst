

Microchip Technology PIC LITE Macro Assembler V1.34 build -361300703 
                                                                                               Fri Apr 15 18:01:30 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK2,global,class=CODE,delta=2
     5                           	psect	idataBANK3,global,class=CODE,delta=2
     6                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     7                           	psect	_nvm_pgm_cfg_text,global,class=CODE,delta=2
     8                           	psect	cinit,global,class=CODE,merge=1,delta=2
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    15                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,delta=2
    53                           	psect	text32,local,class=CODE,merge=1,delta=2
    54                           	psect	text33,local,class=CODE,merge=1,delta=2
    55                           	psect	text34,local,class=CODE,merge=1,delta=2
    56                           	psect	text35,local,class=CODE,merge=1,delta=2
    57                           	psect	text36,local,class=CODE,merge=1,delta=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2
    60                           	psect	text39,local,class=CODE,merge=1,delta=2
    61                           	psect	text40,local,class=CODE,merge=1,delta=2
    62                           	psect	text41,local,class=CODE,merge=1,delta=2
    63                           	psect	text42,local,class=CODE,merge=1,delta=2
    64                           	psect	text43,local,class=CODE,merge=1,delta=2
    65                           	psect	text44,local,class=CODE,merge=1,delta=2
    66                           	psect	text45,local,class=CODE,merge=1,delta=2
    67                           	psect	text46,local,class=CODE,merge=1,delta=2
    68                           	psect	text47,local,class=CODE,merge=1,delta=2
    69                           	psect	text48,local,class=CODE,merge=1,delta=2
    70                           	psect	text49,local,class=CODE,merge=1,delta=2
    71                           	psect	text50,local,class=CODE,merge=1,delta=2
    72                           	psect	text51,local,class=CODE,merge=1,delta=2
    73                           	psect	text52,local,class=CODE,merge=1,delta=2
    74                           	psect	text53,local,class=CODE,merge=1,delta=2
    75                           	psect	text54,local,class=CODE,merge=1,delta=2
    76                           	psect	text55,local,class=CODE,merge=1,delta=2
    77                           	psect	text56,local,class=CODE,merge=1,delta=2
    78                           	psect	text57,local,class=CODE,merge=1,delta=2
    79                           	psect	text58,local,class=CODE,merge=1,delta=2
    80                           	psect	text59,local,class=CODE,merge=1,delta=2
    81                           	psect	text60,local,class=CODE,merge=1,delta=2
    82                           	psect	text61,local,class=CODE,merge=1,delta=2
    83                           	psect	text62,local,class=CODE,merge=1,delta=2
    84                           	psect	text63,local,class=CODE,merge=1,delta=2
    85                           	psect	text64,local,class=CODE,merge=1,delta=2
    86                           	psect	text65,local,class=CODE,merge=1,delta=2
    87                           	psect	intentry,global,class=CODE,delta=2
    88                           	psect	text67,local,class=CODE,merge=1,delta=2
    89                           	psect	text18_split_1,local,class=CODE,merge=1,delta=2
    90                           	dabs	1,0x7E,2
    91  0000                     	;# 
    92  0001                     	;# 
    93  0002                     	;# 
    94  0003                     	;# 
    95  0004                     	;# 
    96  0005                     	;# 
    97  0006                     	;# 
    98  0007                     	;# 
    99  0008                     	;# 
   100  0009                     	;# 
   101  000A                     	;# 
   102  000B                     	;# 
   103  000C                     	;# 
   104  000D                     	;# 
   105  000E                     	;# 
   106  0010                     	;# 
   107  0011                     	;# 
   108  0012                     	;# 
   109  0015                     	;# 
   110  0016                     	;# 
   111  0016                     	;# 
   112  0017                     	;# 
   113  0018                     	;# 
   114  0019                     	;# 
   115  001A                     	;# 
   116  001B                     	;# 
   117  001C                     	;# 
   118  008C                     	;# 
   119  008D                     	;# 
   120  008E                     	;# 
   121  0090                     	;# 
   122  0091                     	;# 
   123  0092                     	;# 
   124  0095                     	;# 
   125  0096                     	;# 
   126  0097                     	;# 
   127  0099                     	;# 
   128  009A                     	;# 
   129  009B                     	;# 
   130  009B                     	;# 
   131  009C                     	;# 
   132  009D                     	;# 
   133  009E                     	;# 
   134  010C                     	;# 
   135  010D                     	;# 
   136  010E                     	;# 
   137  0116                     	;# 
   138  0117                     	;# 
   139  011D                     	;# 
   140  018C                     	;# 
   141  018D                     	;# 
   142  018E                     	;# 
   143  0191                     	;# 
   144  0191                     	;# 
   145  0192                     	;# 
   146  0193                     	;# 
   147  0193                     	;# 
   148  0194                     	;# 
   149  0195                     	;# 
   150  0196                     	;# 
   151  0197                     	;# 
   152  0199                     	;# 
   153  019A                     	;# 
   154  019B                     	;# 
   155  019B                     	;# 
   156  019B                     	;# 
   157  019B                     	;# 
   158  019C                     	;# 
   159  019C                     	;# 
   160  019D                     	;# 
   161  019E                     	;# 
   162  019F                     	;# 
   163  020D                     	;# 
   164  0210                     	;# 
   165  0211                     	;# 
   166  0211                     	;# 
   167  0212                     	;# 
   168  0212                     	;# 
   169  0213                     	;# 
   170  0213                     	;# 
   171  0214                     	;# 
   172  0214                     	;# 
   173  0215                     	;# 
   174  0215                     	;# 
   175  0215                     	;# 
   176  0216                     	;# 
   177  0216                     	;# 
   178  0217                     	;# 
   179  0217                     	;# 
   180  0291                     	;# 
   181  0291                     	;# 
   182  0292                     	;# 
   183  0293                     	;# 
   184  0298                     	;# 
   185  0298                     	;# 
   186  0299                     	;# 
   187  029A                     	;# 
   188  0394                     	;# 
   189  0395                     	;# 
   190  0396                     	;# 
   191  0FE4                     	;# 
   192  0FE5                     	;# 
   193  0FE6                     	;# 
   194  0FE7                     	;# 
   195  0FE8                     	;# 
   196  0FE9                     	;# 
   197  0FEA                     	;# 
   198  0FEB                     	;# 
   199  0FED                     	;# 
   200  0FEE                     	;# 
   201  0FEF                     	;# 
   202  0000                     	;# 
   203  0001                     	;# 
   204  0002                     	;# 
   205  0003                     	;# 
   206  0004                     	;# 
   207  0005                     	;# 
   208  0006                     	;# 
   209  0007                     	;# 
   210  0008                     	;# 
   211  0009                     	;# 
   212  000A                     	;# 
   213  000B                     	;# 
   214  000C                     	;# 
   215  000D                     	;# 
   216  000E                     	;# 
   217  0010                     	;# 
   218  0011                     	;# 
   219  0012                     	;# 
   220  0015                     	;# 
   221  0016                     	;# 
   222  0016                     	;# 
   223  0017                     	;# 
   224  0018                     	;# 
   225  0019                     	;# 
   226  001A                     	;# 
   227  001B                     	;# 
   228  001C                     	;# 
   229  008C                     	;# 
   230  008D                     	;# 
   231  008E                     	;# 
   232  0090                     	;# 
   233  0091                     	;# 
   234  0092                     	;# 
   235  0095                     	;# 
   236  0096                     	;# 
   237  0097                     	;# 
   238  0099                     	;# 
   239  009A                     	;# 
   240  009B                     	;# 
   241  009B                     	;# 
   242  009C                     	;# 
   243  009D                     	;# 
   244  009E                     	;# 
   245  010C                     	;# 
   246  010D                     	;# 
   247  010E                     	;# 
   248  0116                     	;# 
   249  0117                     	;# 
   250  011D                     	;# 
   251  018C                     	;# 
   252  018D                     	;# 
   253  018E                     	;# 
   254  0191                     	;# 
   255  0191                     	;# 
   256  0192                     	;# 
   257  0193                     	;# 
   258  0193                     	;# 
   259  0194                     	;# 
   260  0195                     	;# 
   261  0196                     	;# 
   262  0197                     	;# 
   263  0199                     	;# 
   264  019A                     	;# 
   265  019B                     	;# 
   266  019B                     	;# 
   267  019B                     	;# 
   268  019B                     	;# 
   269  019C                     	;# 
   270  019C                     	;# 
   271  019D                     	;# 
   272  019E                     	;# 
   273  019F                     	;# 
   274  020D                     	;# 
   275  0210                     	;# 
   276  0211                     	;# 
   277  0211                     	;# 
   278  0212                     	;# 
   279  0212                     	;# 
   280  0213                     	;# 
   281  0213                     	;# 
   282  0214                     	;# 
   283  0214                     	;# 
   284  0215                     	;# 
   285  0215                     	;# 
   286  0215                     	;# 
   287  0216                     	;# 
   288  0216                     	;# 
   289  0217                     	;# 
   290  0217                     	;# 
   291  0291                     	;# 
   292  0291                     	;# 
   293  0292                     	;# 
   294  0293                     	;# 
   295  0298                     	;# 
   296  0298                     	;# 
   297  0299                     	;# 
   298  029A                     	;# 
   299  0394                     	;# 
   300  0395                     	;# 
   301  0396                     	;# 
   302  0FE4                     	;# 
   303  0FE5                     	;# 
   304  0FE6                     	;# 
   305  0FE7                     	;# 
   306  0FE8                     	;# 
   307  0FE9                     	;# 
   308  0FEA                     	;# 
   309  0FEB                     	;# 
   310  0FED                     	;# 
   311  0FEE                     	;# 
   312  0FEF                     	;# 
   313  0000                     	;# 
   314  0001                     	;# 
   315  0002                     	;# 
   316  0003                     	;# 
   317  0004                     	;# 
   318  0005                     	;# 
   319  0006                     	;# 
   320  0007                     	;# 
   321  0008                     	;# 
   322  0009                     	;# 
   323  000A                     	;# 
   324  000B                     	;# 
   325  000C                     	;# 
   326  000D                     	;# 
   327  000E                     	;# 
   328  0010                     	;# 
   329  0011                     	;# 
   330  0012                     	;# 
   331  0015                     	;# 
   332  0016                     	;# 
   333  0016                     	;# 
   334  0017                     	;# 
   335  0018                     	;# 
   336  0019                     	;# 
   337  001A                     	;# 
   338  001B                     	;# 
   339  001C                     	;# 
   340  008C                     	;# 
   341  008D                     	;# 
   342  008E                     	;# 
   343  0090                     	;# 
   344  0091                     	;# 
   345  0092                     	;# 
   346  0095                     	;# 
   347  0096                     	;# 
   348  0097                     	;# 
   349  0099                     	;# 
   350  009A                     	;# 
   351  009B                     	;# 
   352  009B                     	;# 
   353  009C                     	;# 
   354  009D                     	;# 
   355  009E                     	;# 
   356  010C                     	;# 
   357  010D                     	;# 
   358  010E                     	;# 
   359  0116                     	;# 
   360  0117                     	;# 
   361  011D                     	;# 
   362  018C                     	;# 
   363  018D                     	;# 
   364  018E                     	;# 
   365  0191                     	;# 
   366  0191                     	;# 
   367  0192                     	;# 
   368  0193                     	;# 
   369  0193                     	;# 
   370  0194                     	;# 
   371  0195                     	;# 
   372  0196                     	;# 
   373  0197                     	;# 
   374  0199                     	;# 
   375  019A                     	;# 
   376  019B                     	;# 
   377  019B                     	;# 
   378  019B                     	;# 
   379  019B                     	;# 
   380  019C                     	;# 
   381  019C                     	;# 
   382  019D                     	;# 
   383  019E                     	;# 
   384  019F                     	;# 
   385  020D                     	;# 
   386  0210                     	;# 
   387  0211                     	;# 
   388  0211                     	;# 
   389  0212                     	;# 
   390  0212                     	;# 
   391  0213                     	;# 
   392  0213                     	;# 
   393  0214                     	;# 
   394  0214                     	;# 
   395  0215                     	;# 
   396  0215                     	;# 
   397  0215                     	;# 
   398  0216                     	;# 
   399  0216                     	;# 
   400  0217                     	;# 
   401  0217                     	;# 
   402  0291                     	;# 
   403  0291                     	;# 
   404  0292                     	;# 
   405  0293                     	;# 
   406  0298                     	;# 
   407  0298                     	;# 
   408  0299                     	;# 
   409  029A                     	;# 
   410  0394                     	;# 
   411  0395                     	;# 
   412  0396                     	;# 
   413  0FE4                     	;# 
   414  0FE5                     	;# 
   415  0FE6                     	;# 
   416  0FE7                     	;# 
   417  0FE8                     	;# 
   418  0FE9                     	;# 
   419  0FEA                     	;# 
   420  0FEB                     	;# 
   421  0FED                     	;# 
   422  0FEE                     	;# 
   423  0FEF                     	;# 
   424  0000                     	;# 
   425  0001                     	;# 
   426  0002                     	;# 
   427  0003                     	;# 
   428  0004                     	;# 
   429  0005                     	;# 
   430  0006                     	;# 
   431  0007                     	;# 
   432  0008                     	;# 
   433  0009                     	;# 
   434  000A                     	;# 
   435  000B                     	;# 
   436  000C                     	;# 
   437  000D                     	;# 
   438  000E                     	;# 
   439  0010                     	;# 
   440  0011                     	;# 
   441  0012                     	;# 
   442  0015                     	;# 
   443  0016                     	;# 
   444  0016                     	;# 
   445  0017                     	;# 
   446  0018                     	;# 
   447  0019                     	;# 
   448  001A                     	;# 
   449  001B                     	;# 
   450  001C                     	;# 
   451  008C                     	;# 
   452  008D                     	;# 
   453  008E                     	;# 
   454  0090                     	;# 
   455  0091                     	;# 
   456  0092                     	;# 
   457  0095                     	;# 
   458  0096                     	;# 
   459  0097                     	;# 
   460  0099                     	;# 
   461  009A                     	;# 
   462  009B                     	;# 
   463  009B                     	;# 
   464  009C                     	;# 
   465  009D                     	;# 
   466  009E                     	;# 
   467  010C                     	;# 
   468  010D                     	;# 
   469  010E                     	;# 
   470  0116                     	;# 
   471  0117                     	;# 
   472  011D                     	;# 
   473  018C                     	;# 
   474  018D                     	;# 
   475  018E                     	;# 
   476  0191                     	;# 
   477  0191                     	;# 
   478  0192                     	;# 
   479  0193                     	;# 
   480  0193                     	;# 
   481  0194                     	;# 
   482  0195                     	;# 
   483  0196                     	;# 
   484  0197                     	;# 
   485  0199                     	;# 
   486  019A                     	;# 
   487  019B                     	;# 
   488  019B                     	;# 
   489  019B                     	;# 
   490  019B                     	;# 
   491  019C                     	;# 
   492  019C                     	;# 
   493  019D                     	;# 
   494  019E                     	;# 
   495  019F                     	;# 
   496  020D                     	;# 
   497  0210                     	;# 
   498  0211                     	;# 
   499  0211                     	;# 
   500  0212                     	;# 
   501  0212                     	;# 
   502  0213                     	;# 
   503  0213                     	;# 
   504  0214                     	;# 
   505  0214                     	;# 
   506  0215                     	;# 
   507  0215                     	;# 
   508  0215                     	;# 
   509  0216                     	;# 
   510  0216                     	;# 
   511  0217                     	;# 
   512  0217                     	;# 
   513  0291                     	;# 
   514  0291                     	;# 
   515  0292                     	;# 
   516  0293                     	;# 
   517  0298                     	;# 
   518  0298                     	;# 
   519  0299                     	;# 
   520  029A                     	;# 
   521  0394                     	;# 
   522  0395                     	;# 
   523  0396                     	;# 
   524  0FE4                     	;# 
   525  0FE5                     	;# 
   526  0FE6                     	;# 
   527  0FE7                     	;# 
   528  0FE8                     	;# 
   529  0FE9                     	;# 
   530  0FEA                     	;# 
   531  0FEB                     	;# 
   532  0FED                     	;# 
   533  0FEE                     	;# 
   534  0FEF                     	;# 
   535  0000                     	;# 
   536  0001                     	;# 
   537  0002                     	;# 
   538  0003                     	;# 
   539  0004                     	;# 
   540  0005                     	;# 
   541  0006                     	;# 
   542  0007                     	;# 
   543  0008                     	;# 
   544  0009                     	;# 
   545  000A                     	;# 
   546  000B                     	;# 
   547  000C                     	;# 
   548  000D                     	;# 
   549  000E                     	;# 
   550  0010                     	;# 
   551  0011                     	;# 
   552  0012                     	;# 
   553  0015                     	;# 
   554  0016                     	;# 
   555  0016                     	;# 
   556  0017                     	;# 
   557  0018                     	;# 
   558  0019                     	;# 
   559  001A                     	;# 
   560  001B                     	;# 
   561  001C                     	;# 
   562  008C                     	;# 
   563  008D                     	;# 
   564  008E                     	;# 
   565  0090                     	;# 
   566  0091                     	;# 
   567  0092                     	;# 
   568  0095                     	;# 
   569  0096                     	;# 
   570  0097                     	;# 
   571  0099                     	;# 
   572  009A                     	;# 
   573  009B                     	;# 
   574  009B                     	;# 
   575  009C                     	;# 
   576  009D                     	;# 
   577  009E                     	;# 
   578  010C                     	;# 
   579  010D                     	;# 
   580  010E                     	;# 
   581  0116                     	;# 
   582  0117                     	;# 
   583  011D                     	;# 
   584  018C                     	;# 
   585  018D                     	;# 
   586  018E                     	;# 
   587  0191                     	;# 
   588  0191                     	;# 
   589  0192                     	;# 
   590  0193                     	;# 
   591  0193                     	;# 
   592  0194                     	;# 
   593  0195                     	;# 
   594  0196                     	;# 
   595  0197                     	;# 
   596  0199                     	;# 
   597  019A                     	;# 
   598  019B                     	;# 
   599  019B                     	;# 
   600  019B                     	;# 
   601  019B                     	;# 
   602  019C                     	;# 
   603  019C                     	;# 
   604  019D                     	;# 
   605  019E                     	;# 
   606  019F                     	;# 
   607  020D                     	;# 
   608  0210                     	;# 
   609  0211                     	;# 
   610  0211                     	;# 
   611  0212                     	;# 
   612  0212                     	;# 
   613  0213                     	;# 
   614  0213                     	;# 
   615  0214                     	;# 
   616  0214                     	;# 
   617  0215                     	;# 
   618  0215                     	;# 
   619  0215                     	;# 
   620  0216                     	;# 
   621  0216                     	;# 
   622  0217                     	;# 
   623  0217                     	;# 
   624  0291                     	;# 
   625  0291                     	;# 
   626  0292                     	;# 
   627  0293                     	;# 
   628  0298                     	;# 
   629  0298                     	;# 
   630  0299                     	;# 
   631  029A                     	;# 
   632  0394                     	;# 
   633  0395                     	;# 
   634  0396                     	;# 
   635  0FE4                     	;# 
   636  0FE5                     	;# 
   637  0FE6                     	;# 
   638  0FE7                     	;# 
   639  0FE8                     	;# 
   640  0FE9                     	;# 
   641  0FEA                     	;# 
   642  0FEB                     	;# 
   643  0FED                     	;# 
   644  0FEE                     	;# 
   645  0FEF                     	;# 
   646  0000                     	;# 
   647  0001                     	;# 
   648  0002                     	;# 
   649  0003                     	;# 
   650  0004                     	;# 
   651  0005                     	;# 
   652  0006                     	;# 
   653  0007                     	;# 
   654  0008                     	;# 
   655  0009                     	;# 
   656  000A                     	;# 
   657  000B                     	;# 
   658  000C                     	;# 
   659  000D                     	;# 
   660  000E                     	;# 
   661  0010                     	;# 
   662  0011                     	;# 
   663  0012                     	;# 
   664  0015                     	;# 
   665  0016                     	;# 
   666  0016                     	;# 
   667  0017                     	;# 
   668  0018                     	;# 
   669  0019                     	;# 
   670  001A                     	;# 
   671  001B                     	;# 
   672  001C                     	;# 
   673  008C                     	;# 
   674  008D                     	;# 
   675  008E                     	;# 
   676  0090                     	;# 
   677  0091                     	;# 
   678  0092                     	;# 
   679  0095                     	;# 
   680  0096                     	;# 
   681  0097                     	;# 
   682  0099                     	;# 
   683  009A                     	;# 
   684  009B                     	;# 
   685  009B                     	;# 
   686  009C                     	;# 
   687  009D                     	;# 
   688  009E                     	;# 
   689  010C                     	;# 
   690  010D                     	;# 
   691  010E                     	;# 
   692  0116                     	;# 
   693  0117                     	;# 
   694  011D                     	;# 
   695  018C                     	;# 
   696  018D                     	;# 
   697  018E                     	;# 
   698  0191                     	;# 
   699  0191                     	;# 
   700  0192                     	;# 
   701  0193                     	;# 
   702  0193                     	;# 
   703  0194                     	;# 
   704  0195                     	;# 
   705  0196                     	;# 
   706  0197                     	;# 
   707  0199                     	;# 
   708  019A                     	;# 
   709  019B                     	;# 
   710  019B                     	;# 
   711  019B                     	;# 
   712  019B                     	;# 
   713  019C                     	;# 
   714  019C                     	;# 
   715  019D                     	;# 
   716  019E                     	;# 
   717  019F                     	;# 
   718  020D                     	;# 
   719  0210                     	;# 
   720  0211                     	;# 
   721  0211                     	;# 
   722  0212                     	;# 
   723  0212                     	;# 
   724  0213                     	;# 
   725  0213                     	;# 
   726  0214                     	;# 
   727  0214                     	;# 
   728  0215                     	;# 
   729  0215                     	;# 
   730  0215                     	;# 
   731  0216                     	;# 
   732  0216                     	;# 
   733  0217                     	;# 
   734  0217                     	;# 
   735  0291                     	;# 
   736  0291                     	;# 
   737  0292                     	;# 
   738  0293                     	;# 
   739  0298                     	;# 
   740  0298                     	;# 
   741  0299                     	;# 
   742  029A                     	;# 
   743  0394                     	;# 
   744  0395                     	;# 
   745  0396                     	;# 
   746  0FE4                     	;# 
   747  0FE5                     	;# 
   748  0FE6                     	;# 
   749  0FE7                     	;# 
   750  0FE8                     	;# 
   751  0FE9                     	;# 
   752  0FEA                     	;# 
   753  0FEB                     	;# 
   754  0FED                     	;# 
   755  0FEE                     	;# 
   756  0FEF                     	;# 
   757  0000                     	;# 
   758  0001                     	;# 
   759  0002                     	;# 
   760  0003                     	;# 
   761  0004                     	;# 
   762  0005                     	;# 
   763  0006                     	;# 
   764  0007                     	;# 
   765  0008                     	;# 
   766  0009                     	;# 
   767  000A                     	;# 
   768  000B                     	;# 
   769  000C                     	;# 
   770  000D                     	;# 
   771  000E                     	;# 
   772  0010                     	;# 
   773  0011                     	;# 
   774  0012                     	;# 
   775  0015                     	;# 
   776  0016                     	;# 
   777  0016                     	;# 
   778  0017                     	;# 
   779  0018                     	;# 
   780  0019                     	;# 
   781  001A                     	;# 
   782  001B                     	;# 
   783  001C                     	;# 
   784  008C                     	;# 
   785  008D                     	;# 
   786  008E                     	;# 
   787  0090                     	;# 
   788  0091                     	;# 
   789  0092                     	;# 
   790  0095                     	;# 
   791  0096                     	;# 
   792  0097                     	;# 
   793  0099                     	;# 
   794  009A                     	;# 
   795  009B                     	;# 
   796  009B                     	;# 
   797  009C                     	;# 
   798  009D                     	;# 
   799  009E                     	;# 
   800  010C                     	;# 
   801  010D                     	;# 
   802  010E                     	;# 
   803  0116                     	;# 
   804  0117                     	;# 
   805  011D                     	;# 
   806  018C                     	;# 
   807  018D                     	;# 
   808  018E                     	;# 
   809  0191                     	;# 
   810  0191                     	;# 
   811  0192                     	;# 
   812  0193                     	;# 
   813  0193                     	;# 
   814  0194                     	;# 
   815  0195                     	;# 
   816  0196                     	;# 
   817  0197                     	;# 
   818  0199                     	;# 
   819  019A                     	;# 
   820  019B                     	;# 
   821  019B                     	;# 
   822  019B                     	;# 
   823  019B                     	;# 
   824  019C                     	;# 
   825  019C                     	;# 
   826  019D                     	;# 
   827  019E                     	;# 
   828  019F                     	;# 
   829  020D                     	;# 
   830  0210                     	;# 
   831  0211                     	;# 
   832  0211                     	;# 
   833  0212                     	;# 
   834  0212                     	;# 
   835  0213                     	;# 
   836  0213                     	;# 
   837  0214                     	;# 
   838  0214                     	;# 
   839  0215                     	;# 
   840  0215                     	;# 
   841  0215                     	;# 
   842  0216                     	;# 
   843  0216                     	;# 
   844  0217                     	;# 
   845  0217                     	;# 
   846  0291                     	;# 
   847  0291                     	;# 
   848  0292                     	;# 
   849  0293                     	;# 
   850  0298                     	;# 
   851  0298                     	;# 
   852  0299                     	;# 
   853  029A                     	;# 
   854  0394                     	;# 
   855  0395                     	;# 
   856  0396                     	;# 
   857  0FE4                     	;# 
   858  0FE5                     	;# 
   859  0FE6                     	;# 
   860  0FE7                     	;# 
   861  0FE8                     	;# 
   862  0FE9                     	;# 
   863  0FEA                     	;# 
   864  0FEB                     	;# 
   865  0FED                     	;# 
   866  0FEE                     	;# 
   867  0FEF                     	;# 
   868  0000                     	;# 
   869  0001                     	;# 
   870  0002                     	;# 
   871  0003                     	;# 
   872  0004                     	;# 
   873  0005                     	;# 
   874  0006                     	;# 
   875  0007                     	;# 
   876  0008                     	;# 
   877  0009                     	;# 
   878  000A                     	;# 
   879  000B                     	;# 
   880  000C                     	;# 
   881  000D                     	;# 
   882  000E                     	;# 
   883  0010                     	;# 
   884  0011                     	;# 
   885  0012                     	;# 
   886  0015                     	;# 
   887  0016                     	;# 
   888  0016                     	;# 
   889  0017                     	;# 
   890  0018                     	;# 
   891  0019                     	;# 
   892  001A                     	;# 
   893  001B                     	;# 
   894  001C                     	;# 
   895  008C                     	;# 
   896  008D                     	;# 
   897  008E                     	;# 
   898  0090                     	;# 
   899  0091                     	;# 
   900  0092                     	;# 
   901  0095                     	;# 
   902  0096                     	;# 
   903  0097                     	;# 
   904  0099                     	;# 
   905  009A                     	;# 
   906  009B                     	;# 
   907  009B                     	;# 
   908  009C                     	;# 
   909  009D                     	;# 
   910  009E                     	;# 
   911  010C                     	;# 
   912  010D                     	;# 
   913  010E                     	;# 
   914  0116                     	;# 
   915  0117                     	;# 
   916  011D                     	;# 
   917  018C                     	;# 
   918  018D                     	;# 
   919  018E                     	;# 
   920  0191                     	;# 
   921  0191                     	;# 
   922  0192                     	;# 
   923  0193                     	;# 
   924  0193                     	;# 
   925  0194                     	;# 
   926  0195                     	;# 
   927  0196                     	;# 
   928  0197                     	;# 
   929  0199                     	;# 
   930  019A                     	;# 
   931  019B                     	;# 
   932  019B                     	;# 
   933  019B                     	;# 
   934  019B                     	;# 
   935  019C                     	;# 
   936  019C                     	;# 
   937  019D                     	;# 
   938  019E                     	;# 
   939  019F                     	;# 
   940  020D                     	;# 
   941  0210                     	;# 
   942  0211                     	;# 
   943  0211                     	;# 
   944  0212                     	;# 
   945  0212                     	;# 
   946  0213                     	;# 
   947  0213                     	;# 
   948  0214                     	;# 
   949  0214                     	;# 
   950  0215                     	;# 
   951  0215                     	;# 
   952  0215                     	;# 
   953  0216                     	;# 
   954  0216                     	;# 
   955  0217                     	;# 
   956  0217                     	;# 
   957  0291                     	;# 
   958  0291                     	;# 
   959  0292                     	;# 
   960  0293                     	;# 
   961  0298                     	;# 
   962  0298                     	;# 
   963  0299                     	;# 
   964  029A                     	;# 
   965  0394                     	;# 
   966  0395                     	;# 
   967  0396                     	;# 
   968  0FE4                     	;# 
   969  0FE5                     	;# 
   970  0FE6                     	;# 
   971  0FE7                     	;# 
   972  0FE8                     	;# 
   973  0FE9                     	;# 
   974  0FEA                     	;# 
   975  0FEB                     	;# 
   976  0FED                     	;# 
   977  0FEE                     	;# 
   978  0FEF                     	;# 
   979  0000                     	;# 
   980  0001                     	;# 
   981  0002                     	;# 
   982  0003                     	;# 
   983  0004                     	;# 
   984  0005                     	;# 
   985  0006                     	;# 
   986  0007                     	;# 
   987  0008                     	;# 
   988  0009                     	;# 
   989  000A                     	;# 
   990  000B                     	;# 
   991  000C                     	;# 
   992  000D                     	;# 
   993  000E                     	;# 
   994  0010                     	;# 
   995  0011                     	;# 
   996  0012                     	;# 
   997  0015                     	;# 
   998  0016                     	;# 
   999  0016                     	;# 
  1000  0017                     	;# 
  1001  0018                     	;# 
  1002  0019                     	;# 
  1003  001A                     	;# 
  1004  001B                     	;# 
  1005  001C                     	;# 
  1006  008C                     	;# 
  1007  008D                     	;# 
  1008  008E                     	;# 
  1009  0090                     	;# 
  1010  0091                     	;# 
  1011  0092                     	;# 
  1012  0095                     	;# 
  1013  0096                     	;# 
  1014  0097                     	;# 
  1015  0099                     	;# 
  1016  009A                     	;# 
  1017  009B                     	;# 
  1018  009B                     	;# 
  1019  009C                     	;# 
  1020  009D                     	;# 
  1021  009E                     	;# 
  1022  010C                     	;# 
  1023  010D                     	;# 
  1024  010E                     	;# 
  1025  0116                     	;# 
  1026  0117                     	;# 
  1027  011D                     	;# 
  1028  018C                     	;# 
  1029  018D                     	;# 
  1030  018E                     	;# 
  1031  0191                     	;# 
  1032  0191                     	;# 
  1033  0192                     	;# 
  1034  0193                     	;# 
  1035  0193                     	;# 
  1036  0194                     	;# 
  1037  0195                     	;# 
  1038  0196                     	;# 
  1039  0197                     	;# 
  1040  0199                     	;# 
  1041  019A                     	;# 
  1042  019B                     	;# 
  1043  019B                     	;# 
  1044  019B                     	;# 
  1045  019B                     	;# 
  1046  019C                     	;# 
  1047  019C                     	;# 
  1048  019D                     	;# 
  1049  019E                     	;# 
  1050  019F                     	;# 
  1051  020D                     	;# 
  1052  0210                     	;# 
  1053  0211                     	;# 
  1054  0211                     	;# 
  1055  0212                     	;# 
  1056  0212                     	;# 
  1057  0213                     	;# 
  1058  0213                     	;# 
  1059  0214                     	;# 
  1060  0214                     	;# 
  1061  0215                     	;# 
  1062  0215                     	;# 
  1063  0215                     	;# 
  1064  0216                     	;# 
  1065  0216                     	;# 
  1066  0217                     	;# 
  1067  0217                     	;# 
  1068  0291                     	;# 
  1069  0291                     	;# 
  1070  0292                     	;# 
  1071  0293                     	;# 
  1072  0298                     	;# 
  1073  0298                     	;# 
  1074  0299                     	;# 
  1075  029A                     	;# 
  1076  0394                     	;# 
  1077  0395                     	;# 
  1078  0396                     	;# 
  1079  0FE4                     	;# 
  1080  0FE5                     	;# 
  1081  0FE6                     	;# 
  1082  0FE7                     	;# 
  1083  0FE8                     	;# 
  1084  0FE9                     	;# 
  1085  0FEA                     	;# 
  1086  0FEB                     	;# 
  1087  0FED                     	;# 
  1088  0FEE                     	;# 
  1089  0FEF                     	;# 
  1090  0000                     	;# 
  1091  0001                     	;# 
  1092  0002                     	;# 
  1093  0003                     	;# 
  1094  0004                     	;# 
  1095  0005                     	;# 
  1096  0006                     	;# 
  1097  0007                     	;# 
  1098  0008                     	;# 
  1099  0009                     	;# 
  1100  000A                     	;# 
  1101  000B                     	;# 
  1102  000C                     	;# 
  1103  000D                     	;# 
  1104  000E                     	;# 
  1105  0010                     	;# 
  1106  0011                     	;# 
  1107  0012                     	;# 
  1108  0015                     	;# 
  1109  0016                     	;# 
  1110  0016                     	;# 
  1111  0017                     	;# 
  1112  0018                     	;# 
  1113  0019                     	;# 
  1114  001A                     	;# 
  1115  001B                     	;# 
  1116  001C                     	;# 
  1117  008C                     	;# 
  1118  008D                     	;# 
  1119  008E                     	;# 
  1120  0090                     	;# 
  1121  0091                     	;# 
  1122  0092                     	;# 
  1123  0095                     	;# 
  1124  0096                     	;# 
  1125  0097                     	;# 
  1126  0099                     	;# 
  1127  009A                     	;# 
  1128  009B                     	;# 
  1129  009B                     	;# 
  1130  009C                     	;# 
  1131  009D                     	;# 
  1132  009E                     	;# 
  1133  010C                     	;# 
  1134  010D                     	;# 
  1135  010E                     	;# 
  1136  0116                     	;# 
  1137  0117                     	;# 
  1138  011D                     	;# 
  1139  018C                     	;# 
  1140  018D                     	;# 
  1141  018E                     	;# 
  1142  0191                     	;# 
  1143  0191                     	;# 
  1144  0192                     	;# 
  1145  0193                     	;# 
  1146  0193                     	;# 
  1147  0194                     	;# 
  1148  0195                     	;# 
  1149  0196                     	;# 
  1150  0197                     	;# 
  1151  0199                     	;# 
  1152  019A                     	;# 
  1153  019B                     	;# 
  1154  019B                     	;# 
  1155  019B                     	;# 
  1156  019B                     	;# 
  1157  019C                     	;# 
  1158  019C                     	;# 
  1159  019D                     	;# 
  1160  019E                     	;# 
  1161  019F                     	;# 
  1162  020D                     	;# 
  1163  0210                     	;# 
  1164  0211                     	;# 
  1165  0211                     	;# 
  1166  0212                     	;# 
  1167  0212                     	;# 
  1168  0213                     	;# 
  1169  0213                     	;# 
  1170  0214                     	;# 
  1171  0214                     	;# 
  1172  0215                     	;# 
  1173  0215                     	;# 
  1174  0215                     	;# 
  1175  0216                     	;# 
  1176  0216                     	;# 
  1177  0217                     	;# 
  1178  0217                     	;# 
  1179  0291                     	;# 
  1180  0291                     	;# 
  1181  0292                     	;# 
  1182  0293                     	;# 
  1183  0298                     	;# 
  1184  0298                     	;# 
  1185  0299                     	;# 
  1186  029A                     	;# 
  1187  0394                     	;# 
  1188  0395                     	;# 
  1189  0396                     	;# 
  1190  0FE4                     	;# 
  1191  0FE5                     	;# 
  1192  0FE6                     	;# 
  1193  0FE7                     	;# 
  1194  0FE8                     	;# 
  1195  0FE9                     	;# 
  1196  0FEA                     	;# 
  1197  0FEB                     	;# 
  1198  0FED                     	;# 
  1199  0FEE                     	;# 
  1200  0FEF                     	;# 
  1201  0000                     	;# 
  1202  0001                     	;# 
  1203  0002                     	;# 
  1204  0003                     	;# 
  1205  0004                     	;# 
  1206  0005                     	;# 
  1207  0006                     	;# 
  1208  0007                     	;# 
  1209  0008                     	;# 
  1210  0009                     	;# 
  1211  000A                     	;# 
  1212  000B                     	;# 
  1213  000C                     	;# 
  1214  000D                     	;# 
  1215  000E                     	;# 
  1216  0010                     	;# 
  1217  0011                     	;# 
  1218  0012                     	;# 
  1219  0015                     	;# 
  1220  0016                     	;# 
  1221  0016                     	;# 
  1222  0017                     	;# 
  1223  0018                     	;# 
  1224  0019                     	;# 
  1225  001A                     	;# 
  1226  001B                     	;# 
  1227  001C                     	;# 
  1228  008C                     	;# 
  1229  008D                     	;# 
  1230  008E                     	;# 
  1231  0090                     	;# 
  1232  0091                     	;# 
  1233  0092                     	;# 
  1234  0095                     	;# 
  1235  0096                     	;# 
  1236  0097                     	;# 
  1237  0099                     	;# 
  1238  009A                     	;# 
  1239  009B                     	;# 
  1240  009B                     	;# 
  1241  009C                     	;# 
  1242  009D                     	;# 
  1243  009E                     	;# 
  1244  010C                     	;# 
  1245  010D                     	;# 
  1246  010E                     	;# 
  1247  0116                     	;# 
  1248  0117                     	;# 
  1249  011D                     	;# 
  1250  018C                     	;# 
  1251  018D                     	;# 
  1252  018E                     	;# 
  1253  0191                     	;# 
  1254  0191                     	;# 
  1255  0192                     	;# 
  1256  0193                     	;# 
  1257  0193                     	;# 
  1258  0194                     	;# 
  1259  0195                     	;# 
  1260  0196                     	;# 
  1261  0197                     	;# 
  1262  0199                     	;# 
  1263  019A                     	;# 
  1264  019B                     	;# 
  1265  019B                     	;# 
  1266  019B                     	;# 
  1267  019B                     	;# 
  1268  019C                     	;# 
  1269  019C                     	;# 
  1270  019D                     	;# 
  1271  019E                     	;# 
  1272  019F                     	;# 
  1273  020D                     	;# 
  1274  0210                     	;# 
  1275  0211                     	;# 
  1276  0211                     	;# 
  1277  0212                     	;# 
  1278  0212                     	;# 
  1279  0213                     	;# 
  1280  0213                     	;# 
  1281  0214                     	;# 
  1282  0214                     	;# 
  1283  0215                     	;# 
  1284  0215                     	;# 
  1285  0215                     	;# 
  1286  0216                     	;# 
  1287  0216                     	;# 
  1288  0217                     	;# 
  1289  0217                     	;# 
  1290  0291                     	;# 
  1291  0291                     	;# 
  1292  0292                     	;# 
  1293  0293                     	;# 
  1294  0298                     	;# 
  1295  0298                     	;# 
  1296  0299                     	;# 
  1297  029A                     	;# 
  1298  0394                     	;# 
  1299  0395                     	;# 
  1300  0396                     	;# 
  1301  0FE4                     	;# 
  1302  0FE5                     	;# 
  1303  0FE6                     	;# 
  1304  0FE7                     	;# 
  1305  0FE8                     	;# 
  1306  0FE9                     	;# 
  1307  0FEA                     	;# 
  1308  0FEB                     	;# 
  1309  0FED                     	;# 
  1310  0FEE                     	;# 
  1311  0FEF                     	;# 
  1312  0000                     	;# 
  1313  0001                     	;# 
  1314  0002                     	;# 
  1315  0003                     	;# 
  1316  0004                     	;# 
  1317  0005                     	;# 
  1318  0006                     	;# 
  1319  0007                     	;# 
  1320  0008                     	;# 
  1321  0009                     	;# 
  1322  000A                     	;# 
  1323  000B                     	;# 
  1324  000C                     	;# 
  1325  000D                     	;# 
  1326  000E                     	;# 
  1327  0010                     	;# 
  1328  0011                     	;# 
  1329  0012                     	;# 
  1330  0015                     	;# 
  1331  0016                     	;# 
  1332  0016                     	;# 
  1333  0017                     	;# 
  1334  0018                     	;# 
  1335  0019                     	;# 
  1336  001A                     	;# 
  1337  001B                     	;# 
  1338  001C                     	;# 
  1339  008C                     	;# 
  1340  008D                     	;# 
  1341  008E                     	;# 
  1342  0090                     	;# 
  1343  0091                     	;# 
  1344  0092                     	;# 
  1345  0095                     	;# 
  1346  0096                     	;# 
  1347  0097                     	;# 
  1348  0099                     	;# 
  1349  009A                     	;# 
  1350  009B                     	;# 
  1351  009B                     	;# 
  1352  009C                     	;# 
  1353  009D                     	;# 
  1354  009E                     	;# 
  1355  010C                     	;# 
  1356  010D                     	;# 
  1357  010E                     	;# 
  1358  0116                     	;# 
  1359  0117                     	;# 
  1360  011D                     	;# 
  1361  018C                     	;# 
  1362  018D                     	;# 
  1363  018E                     	;# 
  1364  0191                     	;# 
  1365  0191                     	;# 
  1366  0192                     	;# 
  1367  0193                     	;# 
  1368  0193                     	;# 
  1369  0194                     	;# 
  1370  0195                     	;# 
  1371  0196                     	;# 
  1372  0197                     	;# 
  1373  0199                     	;# 
  1374  019A                     	;# 
  1375  019B                     	;# 
  1376  019B                     	;# 
  1377  019B                     	;# 
  1378  019B                     	;# 
  1379  019C                     	;# 
  1380  019C                     	;# 
  1381  019D                     	;# 
  1382  019E                     	;# 
  1383  019F                     	;# 
  1384  020D                     	;# 
  1385  0210                     	;# 
  1386  0211                     	;# 
  1387  0211                     	;# 
  1388  0212                     	;# 
  1389  0212                     	;# 
  1390  0213                     	;# 
  1391  0213                     	;# 
  1392  0214                     	;# 
  1393  0214                     	;# 
  1394  0215                     	;# 
  1395  0215                     	;# 
  1396  0215                     	;# 
  1397  0216                     	;# 
  1398  0216                     	;# 
  1399  0217                     	;# 
  1400  0217                     	;# 
  1401  0291                     	;# 
  1402  0291                     	;# 
  1403  0292                     	;# 
  1404  0293                     	;# 
  1405  0298                     	;# 
  1406  0298                     	;# 
  1407  0299                     	;# 
  1408  029A                     	;# 
  1409  0394                     	;# 
  1410  0395                     	;# 
  1411  0396                     	;# 
  1412  0FE4                     	;# 
  1413  0FE5                     	;# 
  1414  0FE6                     	;# 
  1415  0FE7                     	;# 
  1416  0FE8                     	;# 
  1417  0FE9                     	;# 
  1418  0FEA                     	;# 
  1419  0FEB                     	;# 
  1420  0FED                     	;# 
  1421  0FEE                     	;# 
  1422  0FEF                     	;# 
  1423                           
  1424                           	psect	idataBANK2
  1425  1D55                     __pidataBANK2:	
  1426                           
  1427                           ;initializer for _picBatt
  1428  1D55  340E               	retlw	14
  1429  1D56  341F               	retlw	31
  1430  1D57  3411               	retlw	17
  1431  1D58  3411               	retlw	17
  1432  1D59  3411               	retlw	17
  1433  1D5A  3411               	retlw	17
  1434  1D5B  3411               	retlw	17
  1435  1D5C  341F               	retlw	31
  1436  1D5D  3400               	retlw	0
  1437                           
  1438                           ;initializer for _cc1PaTable
  1439  1D5E  3403               	retlw	3
  1440  1D5F  340F               	retlw	15
  1441  1D60  341E               	retlw	30
  1442  1D61  3427               	retlw	39
  1443  1D62  3450               	retlw	80
  1444  1D63  3481               	retlw	129
  1445  1D64  34CB               	retlw	203
  1446  1D65  34C2               	retlw	194
  1447                           
  1448                           	psect	idataBANK3
  1449  1110                     __pidataBANK3:	
  1450                           
  1451                           ;initializer for _cc1InitVal
  1452  1110  3447               	retlw	71
  1453  1111  3446               	retlw	70
  1454  1112  344E               	retlw	78
  1455  1113  340B               	retlw	11
  1456  1114  34D3               	retlw	211
  1457  1115  3491               	retlw	145
  1458  1116  340B               	retlw	11
  1459  1117  3408               	retlw	8
  1460  1118  3404               	retlw	4
  1461  1119  3400               	retlw	0
  1462  111A  3400               	retlw	0
  1463  111B  3406               	retlw	6
  1464  111C  3400               	retlw	0
  1465  111D  3421               	retlw	33
  1466  111E  3463               	retlw	99
  1467  111F  3491               	retlw	145
  1468  1120  34CA               	retlw	202
  1469  1121  3483               	retlw	131
  1470  1122  3402               	retlw	2
  1471  1123  3402               	retlw	2
  1472  1124  343B               	retlw	59
  1473  1125  3434               	retlw	52
  1474  1126  3407               	retlw	7
  1475  1127  343F               	retlw	63
  1476  1128  3408               	retlw	8
  1477  1129  3416               	retlw	22
  1478  112A  346C               	retlw	108
  1479  112B  3403               	retlw	3
  1480  112C  3440               	retlw	64
  1481  112D  3491               	retlw	145
  1482  112E  3487               	retlw	135
  1483  112F  346B               	retlw	107
  1484  1130  34FB               	retlw	251
  1485  1131  3456               	retlw	86
  1486  1132  3416               	retlw	22
  1487  1133  34E9               	retlw	233
  1488  1134  342A               	retlw	42
  1489  1135  3400               	retlw	0
  1490  1136  341F               	retlw	31
  1491  1137  3441               	retlw	65
  1492  1138  3400               	retlw	0
  1493  1139  3459               	retlw	89
  1494  113A  347F               	retlw	127
  1495  113B  343F               	retlw	63
  1496  113C  3481               	retlw	129
  1497  113D  3435               	retlw	53
  1498  113E  3409               	retlw	9
  1499                           
  1500                           	psect	stringtext
  1501  3900                     __pstringtext:	
  1502  3900                     _dpowers:	
  1503  3900  3401               	retlw	1
  1504  3901  3400               	retlw	0
  1505  3902  3400               	retlw	0
  1506  3903  3400               	retlw	0
  1507  3904  340A               	retlw	10
  1508  3905  3400               	retlw	0
  1509  3906  3400               	retlw	0
  1510  3907  3400               	retlw	0
  1511  3908  3464               	retlw	100
  1512  3909  3400               	retlw	0
  1513  390A  3400               	retlw	0
  1514  390B  3400               	retlw	0
  1515  390C  34E8               	retlw	232
  1516  390D  3403               	retlw	3
  1517  390E  3400               	retlw	0
  1518  390F  3400               	retlw	0
  1519  3910  3410               	retlw	16
  1520  3911  3427               	retlw	39
  1521  3912  3400               	retlw	0
  1522  3913  3400               	retlw	0
  1523  3914  34A0               	retlw	160
  1524  3915  3486               	retlw	134
  1525  3916  3401               	retlw	1
  1526  3917  3400               	retlw	0
  1527  3918  3440               	retlw	64
  1528  3919  3442               	retlw	66
  1529  391A  340F               	retlw	15
  1530  391B  3400               	retlw	0
  1531  391C  3480               	retlw	128
  1532  391D  3496               	retlw	150
  1533  391E  3498               	retlw	152
  1534  391F  3400               	retlw	0
  1535  3920  3400               	retlw	0
  1536  3921  34E1               	retlw	225
  1537  3922  34F5               	retlw	245
  1538  3923  3405               	retlw	5
  1539  3924  3400               	retlw	0
  1540  3925  34CA               	retlw	202
  1541  3926  349A               	retlw	154
  1542  3927  343B               	retlw	59
  1543  3928                     __end_of_dpowers:	
  1544  3820                     _nvm_pgm_cfg_absaddr	set	14368
  1545  3820                     _nvm_pgm_cfg_absaddr	set	14368
  1546  3928                     STR_1:	
  1547  3928  3425               	retlw	37	;'%'
  1548  3929  346C               	retlw	108	;'l'
  1549  392A  3475               	retlw	117	;'u'
  1550  392B  342E               	retlw	46	;'.'
  1551  392C  3425               	retlw	37	;'%'
  1552  392D  3436               	retlw	54	;'6'
  1553  392E  342E               	retlw	46	;'.'
  1554  392F  3436               	retlw	54	;'6'
  1555  3930  346C               	retlw	108	;'l'
  1556  3931  3475               	retlw	117	;'u'
  1557  3932  3400               	retlw	0
  1558                           
  1559                           ; #config settings
  1560  0000                     
  1561                           	psect	_nvm_pgm_cfg_text
  1562  3820                     __p_nvm_pgm_cfg_text:	
  1563  3820                     _nvm_pgm_cfg:	
  1564  3820  345C               	retlw	92
  1565  3821  34C5               	retlw	197
  1566  3822  3400               	retlw	0
  1567  3823  3400               	retlw	0
  1568  3824  3400               	retlw	0
  1569  3825  3400               	retlw	0
  1570  3826  3400               	retlw	0
  1571  3827  3400               	retlw	0
  1572  3828  3400               	retlw	0
  1573  3829  3400               	retlw	0
  1574  382A  3400               	retlw	0
  1575  382B  3400               	retlw	0
  1576  382C  3400               	retlw	0
  1577  382D  3400               	retlw	0
  1578  382E  3400               	retlw	0
  1579  382F  3400               	retlw	0
  1580  3830  3400               	retlw	0
  1581  3831  3400               	retlw	0
  1582  3832  3400               	retlw	0
  1583  3833  3400               	retlw	0
  1584  3834  3400               	retlw	0
  1585  3835  3400               	retlw	0
  1586  3836  3400               	retlw	0
  1587  3837  3400               	retlw	0
  1588  3838  3400               	retlw	0
  1589  3839  3400               	retlw	0
  1590  383A  3400               	retlw	0
  1591  383B  3400               	retlw	0
  1592  383C  3400               	retlw	0
  1593  383D  3400               	retlw	0
  1594  383E  3400               	retlw	0
  1595  383F  3400               	retlw	0
  1596  3840                     __end_of_nvm_pgm_cfg:	
  1597  000B                     _INTCON	set	11
  1598  000B                     _INTCONbits	set	11
  1599  0011                     _PIR1	set	17
  1600  0011                     _PIR1bits	set	17
  1601  0012                     _PIR2	set	18
  1602  000C                     _PORTAbits	set	12
  1603  000D                     _PORTBbits	set	13
  1604  0018                     _T1CON	set	24
  1605  0015                     _TMR0	set	21
  1606  0017                     _TMR1H	set	23
  1607  0016                     _TMR1L	set	22
  1608  0095                     _OPTION_REG	set	149
  1609  0099                     _OSCCON	set	153
  1610  0091                     _PIE1	set	145
  1611  0092                     _PIE2	set	146
  1612  008C                     _TRISA	set	140
  1613  008D                     _TRISB	set	141
  1614  008E                     _TRISC	set	142
  1615  0097                     _WDTCON	set	151
  1616  010C                     _LATA	set	268
  1617  010C                     _LATAbits	set	268
  1618  0191                     _PMADR	set	401
  1619  0193                     _PMDAT	set	403
  1620  018C                     _ANSELA	set	396
  1621  018D                     _ANSELB	set	397
  1622  018E                     _ANSELC	set	398
  1623  0195                     _PMCON1	set	405
  1624  0195                     _PMCON1bits	set	405
  1625  0196                     _PMCON2	set	406
  1626  0211                     _SSPBUF	set	529
  1627  0215                     _SSPCON1	set	533
  1628  0216                     _SSPCON2	set	534
  1629  0215                     _SSPCONbits	set	533
  1630  0214                     _SSPSTAT	set	532
  1631  020D                     _WPUB	set	525
  1632  0395                     _IOCBN	set	917
  1633  0394                     _IOCBP	set	916
  1634                           
  1635                           	psect	cinit
  1636  0013                     start_initialization:	
  1637  0013                     __initialization:	
  1638                           
  1639                           ; Clear objects allocated to COMMON
  1640  0013  01FC               	clrf	__pbssCOMMON& (0+127)
  1641                           
  1642                           ; Clear objects allocated to BANK0
  1643  0014  3069               	movlw	low __pbssBANK0
  1644  0015  0084               	movwf	4
  1645  0016  3000               	movlw	high __pbssBANK0
  1646  0017  0085               	movwf	5
  1647  0018  3007               	movlw	7
  1648  0019  319C  24EB  3180   	fcall	clear_ram0
  1649                           
  1650                           ; Clear objects allocated to BANK1
  1651  001C  0021               	movlb	1	; select bank1
  1652  001D  01EC               	clrf	__pbssBANK1& (0+127)
  1653  001E  01ED               	clrf	(__pbssBANK1+1)& (0+127)
  1654  001F  01EE               	clrf	(__pbssBANK1+2)& (0+127)
  1655  0020  01EF               	clrf	(__pbssBANK1+3)& (0+127)
  1656                           
  1657                           ; Clear objects allocated to BANK2
  1658  0021  3020               	movlw	low __pbssBANK2
  1659  0022  0084               	movwf	4
  1660  0023  3001               	movlw	high __pbssBANK2
  1661  0024  0085               	movwf	5
  1662  0025  303C               	movlw	60
  1663  0026  319C  24EB  3180   	fcall	clear_ram0
  1664                           
  1665                           ; Clear objects allocated to BANK3
  1666  0029  30CF               	movlw	low __pbssBANK3
  1667  002A  0084               	movwf	4
  1668  002B  3001               	movlw	high __pbssBANK3
  1669  002C  0085               	movwf	5
  1670  002D  3011               	movlw	17
  1671  002E  319C  24EB  3180   	fcall	clear_ram0
  1672                           
  1673                           ; Initialize objects allocated to BANK2
  1674  0031  3055               	movlw	low __pidataBANK2
  1675  0032  0084               	movwf	4
  1676  0033  309D               	movlw	(high __pidataBANK2)| (0+128)
  1677  0034  0085               	movwf	5
  1678  0035  305C               	movlw	low __pdataBANK2
  1679  0036  0086               	movwf	6
  1680  0037  3001               	movlw	high __pdataBANK2
  1681  0038  0087               	movwf	7
  1682  0039  3011               	movlw	17
  1683  003A  319C  24E5  3180   	fcall	init_ram
  1684                           
  1685                           ; Initialize objects allocated to BANK3
  1686  003D  3010               	movlw	low __pidataBANK3
  1687  003E  0084               	movwf	4
  1688  003F  3091               	movlw	(high __pidataBANK3)| (0+128)
  1689  0040  0085               	movwf	5
  1690  0041  30A0               	movlw	low __pdataBANK3
  1691  0042  0086               	movwf	6
  1692  0043  3001               	movlw	high __pdataBANK3
  1693  0044  0087               	movwf	7
  1694  0045  302F               	movlw	47
  1695  0046  319C  24E5         	fcall	init_ram
  1696  0048                     end_of_initialization:	
  1697                           ;End of C runtime variable initialization code
  1698                           
  1699  0048                     __end_of__initialization:	
  1700  0048  0020               	movlb	0
  1701  0049  3193  2B12         	ljmp	_main	;jump to C main() function
  1702                           
  1703                           	psect	bssCOMMON
  1704  007C                     __pbssCOMMON:	
  1705  007C                     _sta:	
  1706  007C                     	ds	1
  1707                           
  1708                           	psect	bssBANK0
  1709  0069                     __pbssBANK0:	
  1710  0069                     _tmrDbncSel:	
  1711  0069                     	ds	1
  1712  006A                     _u_flg_din:	
  1713  006A                     	ds	1
  1714  006B                     _u_in_ev_down:	
  1715  006B                     	ds	1
  1716  006C                     _u_in_ev_long:	
  1717  006C                     	ds	1
  1718  006D                     _u_in_sta_currTask:	
  1719  006D                     	ds	1
  1720  006E                     _u_in_sta_tmpTask:	
  1721  006E                     	ds	1
  1722  006F                     _numTxByte:	
  1723  006F                     	ds	1
  1724                           
  1725                           	psect	bssBANK1
  1726  00EC                     __pbssBANK1:	
  1727  00EC                     _rtx_flg:	
  1728  00EC                     	ds	1
  1729  00ED                     _u_in_ev_up:	
  1730  00ED                     	ds	1
  1731  00EE                     _visTypeDpy:	
  1732  00EE                     	ds	1
  1733  00EF                     _numRxByte:	
  1734  00EF                     	ds	1
  1735                           
  1736                           	psect	bssBANK2
  1737  0120                     __pbssBANK2:	
  1738  0120                     _batt_con_curr_sens:	
  1739  0120                     	ds	3
  1740  0123                     _batt_gen_curr_sens:	
  1741  0123                     	ds	3
  1742  0126                     _batt_volt_sens:	
  1743  0126                     	ds	3
  1744  0129                     _con_curr_sens:	
  1745  0129                     	ds	3
  1746  012C                     _con_power:	
  1747  012C                     	ds	3
  1748  012F                     _gen_curr_sens:	
  1749  012F                     	ds	3
  1750  0132                     _gen_power:	
  1751  0132                     	ds	3
  1752  0135                     _volt_sens:	
  1753  0135                     	ds	3
  1754  0138                     _tmrCalibration:	
  1755  0138                     	ds	2
  1756  013A                     _tmrLongSel:	
  1757  013A                     	ds	2
  1758  013C                     _tmrVis:	
  1759  013C                     	ds	2
  1760  013E                     _u_SYS_STA:	
  1761  013E                     	ds	1
  1762  013F                     _pktRx:	
  1763  013F                     	ds	11
  1764  014A                     _pktTx:	
  1765  014A                     	ds	11
  1766  0155                     _pgm_cfg:	
  1767  0155                     	ds	7
  1768                           
  1769                           	psect	dataBANK2
  1770  015C                     __pdataBANK2:	
  1771  015C                     _picBatt:	
  1772  015C                     	ds	9
  1773  0165                     _cc1PaTable:	
  1774  0165                     	ds	8
  1775                           
  1776                           	psect	bssBANK3
  1777  01CF                     __pbssBANK3:	
  1778  01CF                     ftoa@buf:	
  1779  01CF                     	ds	17
  1780                           
  1781                           	psect	dataBANK3
  1782  01A0                     __pdataBANK3:	
  1783  01A0                     _cc1InitVal:	
  1784  01A0                     	ds	47
  1785                           
  1786                           	psect	clrtext
  1787  1CEB                     clear_ram0:	
  1788                           ;	Called with FSR0 containing the base address, and
  1789                           ;	WREG with the size to clear
  1790                           
  1791  1CEB  0064               	clrwdt	;clear the watchdog before getting into this loop
  1792  1CEC                     clrloop0:	
  1793  1CEC  0180               	clrf	0	;clear RAM location pointed to by FSR
  1794  1CED  3101               	addfsr 0,1
  1795  1CEE  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1796  1CEF  2CEC               	goto	clrloop0	;have we reached the end yet?
  1797  1CF0  3400               	retlw	0	;all done for this memory range, return
  1798                           
  1799                           	psect	inittext
  1800  1CE5                     init_ram:	
  1801  1CE5  00FE               	movwf	126
  1802  1CE6                     initloop:	
  1803  1CE6  0012               	moviw fsr0++
  1804  1CE7  001E               	movwi fsr1++
  1805  1CE8  0BFE               	decfsz	126,f
  1806  1CE9  2CE6               	goto	initloop
  1807  1CEA  3400               	retlw	0
  1808                           
  1809                           	psect	cstackBANK1
  1810  00A0                     __pcstackBANK1:	
  1811  00A0                     RTXVisDec@strTmp:	
  1812                           
  1813                           ; 16 bytes @ 0x0
  1814  00A0                     	ds	16
  1815  00B0                     RTXVisDec@status:	
  1816                           
  1817                           ; 2 bytes @ 0x10
  1818  00B0                     	ds	2
  1819  00B2                     RTXVisDec@posDec:	
  1820                           
  1821                           ; 1 bytes @ 0x12
  1822  00B2                     	ds	1
  1823  00B3                     RTXVisDec@isDec:	
  1824                           
  1825                           ; 1 bytes @ 0x13
  1826  00B3                     	ds	1
  1827  00B4                     RTXVisDec@p:	
  1828                           
  1829                           ; 1 bytes @ 0x14
  1830  00B4                     	ds	1
  1831  00B5                     RTXVisDec@j:	
  1832                           
  1833                           ; 1 bytes @ 0x15
  1834  00B5                     	ds	1
  1835  00B6                     RTXVisDec@i:	
  1836                           
  1837                           ; 1 bytes @ 0x16
  1838  00B6                     	ds	1
  1839  00B7                     RTXUpdateDisplay@charIdSens:	
  1840                           
  1841                           ; 4 bytes @ 0x17
  1842  00B7                     	ds	4
  1843  00BB                     RTXUpdateDisplay@diffPower:	
  1844                           
  1845                           ; 3 bytes @ 0x1B
  1846  00BB                     	ds	3
  1847  00BE                     RTXUpdateDisplay@i:	
  1848                           
  1849                           ; 1 bytes @ 0x1E
  1850  00BE                     	ds	1
  1851  00BF                     RTXUpdateDisplay@strRow2:	
  1852                           
  1853                           ; 16 bytes @ 0x1F
  1854  00BF                     	ds	16
  1855  00CF                     RTXUpdateDisplay@strRow1:	
  1856                           
  1857                           ; 16 bytes @ 0x2F
  1858  00CF                     	ds	16
  1859  00DF                     RTXUpdateDisplay@val:	
  1860                           
  1861                           ; 1 bytes @ 0x3F
  1862  00DF                     	ds	1
  1863  00E0                     RTXUpdateDisplay@iR:	
  1864                           
  1865                           ; 1 bytes @ 0x40
  1866  00E0                     	ds	1
  1867  00E1                     RTXReadPkt@volt4Calc:	
  1868                           
  1869                           ; 3 bytes @ 0x41
  1870  00E1                     	ds	3
  1871  00E4                     RTXReadPkt@dev_id:	
  1872                           
  1873                           ; 1 bytes @ 0x44
  1874  00E4                     	ds	1
  1875  00E5                     RTXReadPkt@dev_type:	
  1876                           
  1877                           ; 1 bytes @ 0x45
  1878  00E5                     	ds	1
  1879  00E6                     RTXReadPkt@valVoltCurr:	
  1880                           
  1881                           ; 3 bytes @ 0x46
  1882  00E6                     	ds	3
  1883  00E9                     RTXReadPkt@valBatt:	
  1884                           
  1885                           ; 3 bytes @ 0x49
  1886  00E9                     	ds	3
  1887                           
  1888                           	psect	cstackCOMMON
  1889  0070                     __pcstackCOMMON:	
  1890  0070                     ?_CC1Strobe:	
  1891  0070                     ?_DPYInitDisplay:	
  1892                           ; 0 bytes @ 0x0
  1893                           
  1894  0070                     ?_PGMReadNvm:	
  1895                           ; 0 bytes @ 0x0
  1896                           
  1897  0070                     ?_PGMCheckNvm:	
  1898                           ; 0 bytes @ 0x0
  1899                           
  1900  0070                     ?_PGMNvmReset:	
  1901                           ; 0 bytes @ 0x0
  1902                           
  1903  0070                     ?_RTXUpdateDisplay:	
  1904                           ; 0 bytes @ 0x0
  1905                           
  1906  0070                     ?_RTXSup:	
  1907                           ; 0 bytes @ 0x0
  1908                           
  1909  0070                     ?_RTXReadPkt:	
  1910                           ; 0 bytes @ 0x0
  1911                           
  1912  0070                     ?_isdigit:	
  1913                           ; 0 bytes @ 0x0
  1914                           
  1915  0070                     ?_INInit:	
  1916                           ; 1 bit 
  1917                           
  1918  0070                     ?_OUTInit:	
  1919                           ; 0 bytes @ 0x0
  1920                           
  1921  0070                     ?_OUTSetHTCDataNibble:	
  1922                           ; 0 bytes @ 0x0
  1923                           
  1924  0070                     ?_SPIInit:	
  1925                           ; 0 bytes @ 0x0
  1926                           
  1927  0070                     ?_CC1Init:	
  1928                           ; 0 bytes @ 0x0
  1929                           
  1930  0070                     ?_NVMInit:	
  1931                           ; 0 bytes @ 0x0
  1932                           
  1933  0070                     ?_DINInit:	
  1934                           ; 0 bytes @ 0x0
  1935                           
  1936  0070                     ?_DINTick:	
  1937                           ; 0 bytes @ 0x0
  1938                           
  1939  0070                     ?_DINTask:	
  1940                           ; 0 bytes @ 0x0
  1941                           
  1942  0070                     ?_DPYInit:	
  1943                           ; 0 bytes @ 0x0
  1944                           
  1945  0070                     ?_DPYSendChar:	
  1946                           ; 0 bytes @ 0x0
  1947                           
  1948  0070                     ?_PGMInit:	
  1949                           ; 0 bytes @ 0x0
  1950                           
  1951  0070                     ?_PGMWriteNvm:	
  1952                           ; 0 bytes @ 0x0
  1953                           
  1954  0070                     ?_PGMSelLong:	
  1955                           ; 0 bytes @ 0x0
  1956                           
  1957  0070                     ?_RTXInit:	
  1958                           ; 0 bytes @ 0x0
  1959                           
  1960  0070                     ?_RTXTick:	
  1961                           ; 0 bytes @ 0x0
  1962                           
  1963  0070                     ?_RTXTask:	
  1964                           ; 0 bytes @ 0x0
  1965                           
  1966  0070                     ?_RTXSelDown:	
  1967                           ; 0 bytes @ 0x0
  1968                           
  1969  0070                     ?_SYSInit:	
  1970                           ; 0 bytes @ 0x0
  1971                           
  1972  0070                     ?_SYSInt:	
  1973                           ; 0 bytes @ 0x0
  1974                           
  1975  0070                     ??_SYSInt:	
  1976                           ; 0 bytes @ 0x0
  1977                           
  1978  0070                     ?_SYSTask:	
  1979                           ; 0 bytes @ 0x0
  1980                           
  1981  0070                     ?_INTIsr:	
  1982                           ; 0 bytes @ 0x0
  1983                           
  1984  0070                     ??_INTIsr:	
  1985                           ; 0 bytes @ 0x0
  1986                           
  1987  0070                     ?_main:	
  1988                           ; 0 bytes @ 0x0
  1989                           
  1990  0070                     ?_DPYIsBusy:	
  1991                           ; 0 bytes @ 0x0
  1992                           
  1993                           
  1994                           ; 1 bytes @ 0x0
  1995  0070                     	ds	1
  1996  0071                     ??_isdigit:	
  1997  0071                     ??_INInit:	
  1998                           ; 0 bytes @ 0x1
  1999                           
  2000  0071                     ??_OUTInit:	
  2001                           ; 0 bytes @ 0x1
  2002                           
  2003  0071                     ??_OUTSetHTCDataNibble:	
  2004                           ; 0 bytes @ 0x1
  2005                           
  2006  0071                     ??_SPIInit:	
  2007                           ; 0 bytes @ 0x1
  2008                           
  2009  0071                     ?_SPIRead:	
  2010                           ; 0 bytes @ 0x1
  2011                           
  2012  0071                     ?_SPIWrite:	
  2013                           ; 0 bytes @ 0x1
  2014                           
  2015  0071                     ?_DLYDelay_us:	
  2016                           ; 0 bytes @ 0x1
  2017                           
  2018  0071                     ?_DLYDelay_ms:	
  2019                           ; 0 bytes @ 0x1
  2020                           
  2021  0071                     ??_NVMInit:	
  2022                           ; 0 bytes @ 0x1
  2023                           
  2024  0071                     ?_NVMRead:	
  2025                           ; 0 bytes @ 0x1
  2026                           
  2027  0071                     ?_NVMWrite:	
  2028                           ; 0 bytes @ 0x1
  2029                           
  2030  0071                     ??_DINInit:	
  2031                           ; 0 bytes @ 0x1
  2032                           
  2033  0071                     ??_DINTick:	
  2034                           ; 0 bytes @ 0x1
  2035                           
  2036  0071                     ??_DINTask:	
  2037                           ; 0 bytes @ 0x1
  2038                           
  2039  0071                     ??_SYSInit:	
  2040                           ; 0 bytes @ 0x1
  2041                           
  2042  0071                     ?___ftge:	
  2043                           ; 0 bytes @ 0x1
  2044                           
  2045  0071                     ?___wmul:	
  2046                           ; 1 bit 
  2047                           
  2048  0071                     ?___lwdiv:	
  2049                           ; 2 bytes @ 0x1
  2050                           
  2051  0071                     ?___lwmod:	
  2052                           ; 2 bytes @ 0x1
  2053                           
  2054  0071                     ?___ftpack:	
  2055                           ; 2 bytes @ 0x1
  2056                           
  2057  0071                     ?___ftneg:	
  2058                           ; 3 bytes @ 0x1
  2059                           
  2060  0071                     ?___lldiv:	
  2061                           ; 3 bytes @ 0x1
  2062                           
  2063  0071                     NVMInit@sta:	
  2064                           ; 4 bytes @ 0x1
  2065                           
  2066  0071                     DINInit@sta:	
  2067                           ; 1 bytes @ 0x1
  2068                           
  2069  0071                     _isdigit$1177:	
  2070                           ; 1 bytes @ 0x1
  2071                           
  2072  0071                     SPIRead@dstPtr:	
  2073                           ; 1 bytes @ 0x1
  2074                           
  2075  0071                     SPIWrite@srcPtr:	
  2076                           ; 2 bytes @ 0x1
  2077                           
  2078  0071                     DLYDelay_us@val:	
  2079                           ; 2 bytes @ 0x1
  2080                           
  2081  0071                     DLYDelay_ms@val:	
  2082                           ; 2 bytes @ 0x1
  2083                           
  2084  0071                     NVMRead@addr:	
  2085                           ; 2 bytes @ 0x1
  2086                           
  2087  0071                     NVMWrite@addr:	
  2088                           ; 2 bytes @ 0x1
  2089                           
  2090  0071                     ___wmul@multiplier:	
  2091                           ; 2 bytes @ 0x1
  2092                           
  2093  0071                     ___lwdiv@divisor:	
  2094                           ; 2 bytes @ 0x1
  2095                           
  2096  0071                     ___lwmod@divisor:	
  2097                           ; 2 bytes @ 0x1
  2098                           
  2099  0071                     ___ftpack@arg:	
  2100                           ; 2 bytes @ 0x1
  2101                           
  2102  0071                     ___ftge@ff1:	
  2103                           ; 3 bytes @ 0x1
  2104                           
  2105  0071                     ___ftneg@f1:	
  2106                           ; 3 bytes @ 0x1
  2107                           
  2108  0071                     ___lldiv@divisor:	
  2109                           ; 3 bytes @ 0x1
  2110                           
  2111                           
  2112                           ; 4 bytes @ 0x1
  2113  0071                     	ds	1
  2114  0072                     INInit@sta:	
  2115  0072                     OUTInit@sta:	
  2116                           ; 1 bytes @ 0x2
  2117                           
  2118  0072                     OUTSetHTCDataNibble@val:	
  2119                           ; 1 bytes @ 0x2
  2120                           
  2121  0072                     SPIInit@state:	
  2122                           ; 1 bytes @ 0x2
  2123                           
  2124  0072                     SYSInit@state:	
  2125                           ; 1 bytes @ 0x2
  2126                           
  2127  0072                     isdigit@c:	
  2128                           ; 1 bytes @ 0x2
  2129                           
  2130                           
  2131                           ; 1 bytes @ 0x2
  2132  0072                     	ds	1
  2133  0073                     ??_DLYDelay_us:	
  2134  0073                     ??_DLYDelay_ms:	
  2135                           ; 0 bytes @ 0x3
  2136                           
  2137  0073                     OUTSetHTCDataNibble@dataToSet:	
  2138                           ; 0 bytes @ 0x3
  2139                           
  2140  0073                     SPIRead@len:	
  2141                           ; 1 bytes @ 0x3
  2142                           
  2143  0073                     SPIWrite@len:	
  2144                           ; 1 bytes @ 0x3
  2145                           
  2146  0073                     NVMRead@dest:	
  2147                           ; 1 bytes @ 0x3
  2148                           
  2149  0073                     NVMWrite@source:	
  2150                           ; 1 bytes @ 0x3
  2151                           
  2152  0073                     DLYDelay_us@i:	
  2153                           ; 1 bytes @ 0x3
  2154                           
  2155  0073                     ___wmul@multiplicand:	
  2156                           ; 2 bytes @ 0x3
  2157                           
  2158  0073                     ___lwdiv@dividend:	
  2159                           ; 2 bytes @ 0x3
  2160                           
  2161  0073                     ___lwmod@dividend:	
  2162                           ; 2 bytes @ 0x3
  2163                           
  2164                           
  2165                           ; 2 bytes @ 0x3
  2166  0073                     	ds	1
  2167  0074                     ??_SPIRead:	
  2168  0074                     ??_SPIWrite:	
  2169                           ; 0 bytes @ 0x4
  2170                           
  2171  0074                     ??___ftneg:	
  2172                           ; 0 bytes @ 0x4
  2173                           
  2174  0074                     NVMRead@len:	
  2175                           ; 0 bytes @ 0x4
  2176                           
  2177  0074                     NVMWrite@len:	
  2178                           ; 1 bytes @ 0x4
  2179                           
  2180  0074                     ___ftpack@exp:	
  2181                           ; 1 bytes @ 0x4
  2182                           
  2183  0074                     ___ftge@ff2:	
  2184                           ; 1 bytes @ 0x4
  2185                           
  2186                           
  2187                           ; 3 bytes @ 0x4
  2188  0074                     	ds	1
  2189  0075                     ?_DPYWriteNibble:	
  2190  0075                     ?_DPYWriteByte:	
  2191                           ; 0 bytes @ 0x5
  2192                           
  2193  0075                     ??_DPYIsBusy:	
  2194                           ; 0 bytes @ 0x5
  2195                           
  2196  0075                     ??_NVMRead:	
  2197                           ; 0 bytes @ 0x5
  2198                           
  2199  0075                     ??_NVMWrite:	
  2200                           ; 0 bytes @ 0x5
  2201                           
  2202  0075                     ??___wmul:	
  2203                           ; 0 bytes @ 0x5
  2204                           
  2205  0075                     ??___lwdiv:	
  2206                           ; 0 bytes @ 0x5
  2207                           
  2208  0075                     ??___lwmod:	
  2209                           ; 0 bytes @ 0x5
  2210                           
  2211  0075                     DPYWriteNibble@val:	
  2212                           ; 0 bytes @ 0x5
  2213                           
  2214  0075                     DPYWriteByte@val:	
  2215                           ; 1 bytes @ 0x5
  2216                           
  2217  0075                     ___ftpack@sign:	
  2218                           ; 1 bytes @ 0x5
  2219                           
  2220  0075                     DLYDelay_ms@i:	
  2221                           ; 1 bytes @ 0x5
  2222                           
  2223  0075                     ___wmul@product:	
  2224                           ; 2 bytes @ 0x5
  2225                           
  2226  0075                     ___lldiv@dividend:	
  2227                           ; 2 bytes @ 0x5
  2228                           
  2229                           
  2230                           ; 4 bytes @ 0x5
  2231  0075                     	ds	1
  2232  0076                     ??_DPYWriteNibble:	
  2233  0076                     ??_DPYWriteByte:	
  2234                           ; 0 bytes @ 0x6
  2235                           
  2236  0076                     ??___ftpack:	
  2237                           ; 0 bytes @ 0x6
  2238                           
  2239  0076                     SPIWrite@i:	
  2240                           ; 0 bytes @ 0x6
  2241                           
  2242  0076                     DPYWriteNibble@rs:	
  2243                           ; 1 bytes @ 0x6
  2244                           
  2245  0076                     DPYIsBusy@bf:	
  2246                           ; 1 bytes @ 0x6
  2247                           
  2248  0076                     ___lwmod@counter:	
  2249                           ; 1 bytes @ 0x6
  2250                           
  2251  0076                     ___lwdiv@quotient:	
  2252                           ; 1 bytes @ 0x6
  2253                           
  2254                           
  2255                           ; 2 bytes @ 0x6
  2256  0076                     	ds	1
  2257  0077                     ??_CC1Strobe:	
  2258  0077                     ?_CC1Write:	
  2259                           ; 0 bytes @ 0x7
  2260                           
  2261  0077                     ??___ftge:	
  2262                           ; 0 bytes @ 0x7
  2263                           
  2264  0077                     CC1Write@src:	
  2265                           ; 0 bytes @ 0x7
  2266                           
  2267  0077                     NVMRead@i:	
  2268                           ; 1 bytes @ 0x7
  2269                           
  2270  0077                     DPYWriteByte@rs:	
  2271                           ; 1 bytes @ 0x7
  2272                           
  2273                           
  2274                           ; 1 bytes @ 0x7
  2275  0077                     	ds	1
  2276  0078                     ?_DPYDrawChar:	
  2277  0078                     ??_PGMReadNvm:	
  2278                           ; 0 bytes @ 0x8
  2279                           
  2280  0078                     ?_DPYSetCur:	
  2281                           ; 0 bytes @ 0x8
  2282                           
  2283  0078                     ??_DPYSendChar:	
  2284                           ; 0 bytes @ 0x8
  2285                           
  2286  0078                     ??_PGMWriteNvm:	
  2287                           ; 0 bytes @ 0x8
  2288                           
  2289  0078                     SPIRead@i:	
  2290                           ; 0 bytes @ 0x8
  2291                           
  2292  0078                     CC1Strobe@e_stb:	
  2293                           ; 1 bytes @ 0x8
  2294                           
  2295  0078                     CC1Write@len:	
  2296                           ; 1 bytes @ 0x8
  2297                           
  2298  0078                     DPYDrawChar@p:	
  2299                           ; 1 bytes @ 0x8
  2300                           
  2301  0078                     DPYSetCur@col:	
  2302                           ; 1 bytes @ 0x8
  2303                           
  2304  0078                     ___lwdiv@counter:	
  2305                           ; 1 bytes @ 0x8
  2306                           
  2307                           
  2308                           ; 1 bytes @ 0x8
  2309  0078                     	ds	1
  2310  0079                     ??_CC1Write:	
  2311  0079                     ??_DPYDrawChar:	
  2312                           ; 0 bytes @ 0x9
  2313                           
  2314  0079                     ??_utoa:	
  2315                           ; 0 bytes @ 0x9
  2316                           
  2317  0079                     ?_CC1Read:	
  2318                           ; 0 bytes @ 0x9
  2319                           
  2320  0079                     ??_DPYSetCur:	
  2321                           ; 0 bytes @ 0x9
  2322                           
  2323  0079                     ??___lldiv:	
  2324                           ; 0 bytes @ 0x9
  2325                           
  2326  0079                     ??___lltoft:	
  2327                           ; 0 bytes @ 0x9
  2328                           
  2329  0079                     CC1Strobe@cc1Stb:	
  2330                           ; 0 bytes @ 0x9
  2331                           
  2332  0079                     DPYSendChar@c:	
  2333                           ; 1 bytes @ 0x9
  2334                           
  2335  0079                     ___ftadd@sign:	
  2336                           ; 1 bytes @ 0x9
  2337                           
  2338  0079                     CC1Read@dst:	
  2339                           ; 1 bytes @ 0x9
  2340                           
  2341                           
  2342                           ; 2 bytes @ 0x9
  2343  0079                     	ds	1
  2344  007A                     ??_PGMNvmReset:	
  2345  007A                     ??_itoa:	
  2346                           ; 0 bytes @ 0xA
  2347                           
  2348  007A                     ??___llmod:	
  2349                           ; 0 bytes @ 0xA
  2350                           
  2351  007A                     CC1Write@addr:	
  2352                           ; 0 bytes @ 0xA
  2353                           
  2354  007A                     DPYSetCur@row:	
  2355                           ; 1 bytes @ 0xA
  2356                           
  2357  007A                     ___ftadd@exp2:	
  2358                           ; 1 bytes @ 0xA
  2359                           
  2360  007A                     ___lltoft@exp:	
  2361                           ; 1 bytes @ 0xA
  2362                           
  2363                           
  2364                           ; 1 bytes @ 0xA
  2365  007A                     	ds	1
  2366  007B                     ??_DPYInitDisplay:	
  2367  007B                     ??_PGMCheckNvm:	
  2368                           ; 0 bytes @ 0xB
  2369                           
  2370  007B                     ??_PGMInit:	
  2371                           ; 0 bytes @ 0xB
  2372                           
  2373  007B                     CC1Read@len:	
  2374                           ; 0 bytes @ 0xB
  2375                           
  2376  007B                     CC1Write@cc1Addr:	
  2377                           ; 1 bytes @ 0xB
  2378                           
  2379  007B                     DPYSetCur@addr:	
  2380                           ; 1 bytes @ 0xB
  2381                           
  2382  007B                     PGMInit@state:	
  2383                           ; 1 bytes @ 0xB
  2384                           
  2385  007B                     ___ftadd@exp1:	
  2386                           ; 1 bytes @ 0xB
  2387                           
  2388  007B                     ___llmod@counter:	
  2389                           ; 1 bytes @ 0xB
  2390                           
  2391                           
  2392                           ; 1 bytes @ 0xB
  2393  007B                     	ds	1
  2394  007C                     ??_RTXSup:	
  2395  007C                     ??_DPYInit:	
  2396                           ; 0 bytes @ 0xC
  2397                           
  2398  007C                     ??_RTXInit:	
  2399                           ; 0 bytes @ 0xC
  2400                           
  2401  007C                     ??_RTXTick:	
  2402                           ; 0 bytes @ 0xC
  2403                           
  2404  007C                     ??_RTXTask:	
  2405                           ; 0 bytes @ 0xC
  2406                           
  2407  007C                     ??_SYSTask:	
  2408                           ; 0 bytes @ 0xC
  2409                           
  2410  007C                     ??___ftsub:	
  2411                           ; 0 bytes @ 0xC
  2412                           
  2413                           
  2414                           	psect	cstackBANK0
  2415  0020                     __pcstackBANK0:	
  2416                           ; 0 bytes @ 0xC
  2417                           
  2418  0020                     ??_CC1Init:	
  2419  0020                     ??_CC1Read:	
  2420                           ; 0 bytes @ 0x0
  2421                           
  2422  0020                     ?_DPYSendStr:	
  2423                           ; 0 bytes @ 0x0
  2424                           
  2425  0020                     ?_utoa:	
  2426                           ; 0 bytes @ 0x0
  2427                           
  2428  0020                     ?___ftadd:	
  2429                           ; 1 bytes @ 0x0
  2430                           
  2431  0020                     ?___ftmul:	
  2432                           ; 3 bytes @ 0x0
  2433                           
  2434  0020                     ?___lltoft:	
  2435                           ; 3 bytes @ 0x0
  2436                           
  2437  0020                     DPYDrawChar@addr:	
  2438                           ; 3 bytes @ 0x0
  2439                           
  2440  0020                     DPYSendStr@col:	
  2441                           ; 1 bytes @ 0x0
  2442                           
  2443  0020                     utoa@val:	
  2444                           ; 1 bytes @ 0x0
  2445                           
  2446  0020                     ___ftadd@f1:	
  2447                           ; 2 bytes @ 0x0
  2448                           
  2449  0020                     ___ftmul@f1:	
  2450                           ; 3 bytes @ 0x0
  2451                           
  2452  0020                     ___lldiv@quotient:	
  2453                           ; 3 bytes @ 0x0
  2454                           
  2455  0020                     ___lltoft@c:	
  2456                           ; 4 bytes @ 0x0
  2457                           
  2458  0020                     NVMWrite@bufTmpRow:	
  2459                           ; 4 bytes @ 0x0
  2460                           
  2461                           
  2462                           ; 64 bytes @ 0x0
  2463  0020                     	ds	1
  2464  0021                     CC1Read@addr:	
  2465  0021                     DPYDrawChar@tmpAddr:	
  2466                           ; 1 bytes @ 0x1
  2467                           
  2468  0021                     DPYSendStr@data:	
  2469                           ; 1 bytes @ 0x1
  2470                           
  2471                           
  2472                           ; 1 bytes @ 0x1
  2473  0021                     	ds	1
  2474  0022                     CC1Init@state:	
  2475  0022                     CC1Read@cc1Addr:	
  2476                           ; 1 bytes @ 0x2
  2477                           
  2478  0022                     DPYDrawChar@i:	
  2479                           ; 1 bytes @ 0x2
  2480                           
  2481  0022                     DPYSendStr@len:	
  2482                           ; 1 bytes @ 0x2
  2483                           
  2484  0022                     utoa@base:	
  2485                           ; 1 bytes @ 0x2
  2486                           
  2487                           
  2488                           ; 2 bytes @ 0x2
  2489  0022                     	ds	1
  2490  0023                     ??_DPYSendStr:	
  2491  0023                     ?_RTXSndPkt:	
  2492                           ; 0 bytes @ 0x3
  2493                           
  2494  0023                     ?_RTXRcvPkt:	
  2495                           ; 0 bytes @ 0x3
  2496                           
  2497  0023                     DPYInitDisplay@tmp:	
  2498                           ; 0 bytes @ 0x3
  2499                           
  2500  0023                     RTXSndPkt@len:	
  2501                           ; 1 bytes @ 0x3
  2502                           
  2503  0023                     RTXRcvPkt@len:	
  2504                           ; 1 bytes @ 0x3
  2505                           
  2506  0023                     ___ftadd@f2:	
  2507                           ; 1 bytes @ 0x3
  2508                           
  2509  0023                     ___ftmul@f2:	
  2510                           ; 3 bytes @ 0x3
  2511                           
  2512                           
  2513                           ; 3 bytes @ 0x3
  2514  0023                     	ds	1
  2515  0024                     ??_RTXSndPkt:	
  2516  0024                     ??_RTXRcvPkt:	
  2517                           ; 0 bytes @ 0x4
  2518                           
  2519  0024                     DPYInit@sta:	
  2520                           ; 0 bytes @ 0x4
  2521                           
  2522  0024                     DPYSendStr@i:	
  2523                           ; 1 bytes @ 0x4
  2524                           
  2525  0024                     ___lldiv@counter:	
  2526                           ; 1 bytes @ 0x4
  2527                           
  2528  0024                     utoa@v:	
  2529                           ; 1 bytes @ 0x4
  2530                           
  2531                           
  2532                           ; 2 bytes @ 0x4
  2533  0024                     	ds	1
  2534  0025                     ?___llmod:	
  2535  0025                     DPYSendStr@row:	
  2536                           ; 4 bytes @ 0x5
  2537                           
  2538  0025                     RTXRcvPkt@dst:	
  2539                           ; 1 bytes @ 0x5
  2540                           
  2541  0025                     ___llmod@divisor:	
  2542                           ; 1 bytes @ 0x5
  2543                           
  2544                           
  2545                           ; 4 bytes @ 0x5
  2546  0025                     	ds	1
  2547  0026                     ??___ftadd:	
  2548  0026                     ??___ftmul:	
  2549                           ; 0 bytes @ 0x6
  2550                           
  2551  0026                     RTXSndPkt@src:	
  2552                           ; 0 bytes @ 0x6
  2553                           
  2554  0026                     utoa@c:	
  2555                           ; 1 bytes @ 0x6
  2556                           
  2557                           
  2558                           ; 1 bytes @ 0x6
  2559  0026                     	ds	1
  2560  0027                     ?_RTXSendRPgm:	
  2561  0027                     ?_RTXSendRData:	
  2562                           ; 0 bytes @ 0x7
  2563                           
  2564  0027                     RTXSendRData@type:	
  2565                           ; 0 bytes @ 0x7
  2566                           
  2567  0027                     RTXSendRPgm@type:	
  2568                           ; 1 bytes @ 0x7
  2569                           
  2570  0027                     utoa@buf:	
  2571                           ; 1 bytes @ 0x7
  2572                           
  2573                           
  2574                           ; 1 bytes @ 0x7
  2575  0027                     	ds	1
  2576  0028                     ??_RTXSendRPgm:	
  2577  0028                     ??_RTXSendRData:	
  2578                           ; 0 bytes @ 0x8
  2579                           
  2580  0028                     ?_itoa:	
  2581                           ; 0 bytes @ 0x8
  2582                           
  2583  0028                     itoa@val:	
  2584                           ; 1 bytes @ 0x8
  2585                           
  2586                           
  2587                           ; 2 bytes @ 0x8
  2588  0028                     	ds	1
  2589  0029                     RTXSendRData@id:	
  2590  0029                     RTXSendRPgm@id:	
  2591                           ; 1 bytes @ 0x9
  2592                           
  2593  0029                     ___llmod@dividend:	
  2594                           ; 1 bytes @ 0x9
  2595                           
  2596                           
  2597                           ; 4 bytes @ 0x9
  2598  0029                     	ds	1
  2599  002A                     ?___ftsub:	
  2600  002A                     ___ftmul@exp:	
  2601                           ; 3 bytes @ 0xA
  2602                           
  2603  002A                     itoa@base:	
  2604                           ; 1 bytes @ 0xA
  2605                           
  2606  002A                     ___ftsub@f2:	
  2607                           ; 2 bytes @ 0xA
  2608                           
  2609                           
  2610                           ; 3 bytes @ 0xA
  2611  002A                     	ds	1
  2612  002B                     ___ftmul@f3_as_product:	
  2613                           
  2614                           ; 3 bytes @ 0xB
  2615  002B                     	ds	1
  2616  002C                     itoa@cp:	
  2617                           
  2618                           ; 1 bytes @ 0xC
  2619  002C                     	ds	1
  2620  002D                     ?_sprintf:	
  2621  002D                     itoa@buf:	
  2622                           ; 2 bytes @ 0xD
  2623                           
  2624  002D                     sprintf@f:	
  2625                           ; 1 bytes @ 0xD
  2626                           
  2627  002D                     ___ftsub@f1:	
  2628                           ; 2 bytes @ 0xD
  2629                           
  2630                           
  2631                           ; 3 bytes @ 0xD
  2632  002D                     	ds	1
  2633  002E                     ___ftmul@cntr:	
  2634                           
  2635                           ; 1 bytes @ 0xE
  2636  002E                     	ds	1
  2637  002F                     ___ftmul@sign:	
  2638                           
  2639                           ; 1 bytes @ 0xF
  2640  002F                     	ds	1
  2641  0030                     ?___fttol:	
  2642  0030                     ___fttol@f1:	
  2643                           ; 4 bytes @ 0x10
  2644                           
  2645                           
  2646                           ; 3 bytes @ 0x10
  2647  0030                     	ds	4
  2648  0034                     ??___fttol:	
  2649                           
  2650                           ; 0 bytes @ 0x14
  2651  0034                     	ds	3
  2652  0037                     ??_sprintf:	
  2653                           
  2654                           ; 0 bytes @ 0x17
  2655  0037                     	ds	1
  2656  0038                     ___fttol@sign1:	
  2657                           
  2658                           ; 1 bytes @ 0x18
  2659  0038                     	ds	1
  2660  0039                     ___fttol@lval:	
  2661                           
  2662                           ; 4 bytes @ 0x19
  2663  0039                     	ds	4
  2664  003D                     sprintf@flag:	
  2665  003D                     ___fttol@exp1:	
  2666                           ; 1 bytes @ 0x1D
  2667                           
  2668                           
  2669                           ; 1 bytes @ 0x1D
  2670  003D                     	ds	1
  2671  003E                     sprintf@ap:	
  2672                           
  2673                           ; 1 bytes @ 0x1E
  2674  003E                     	ds	1
  2675  003F                     sprintf@val:	
  2676                           
  2677                           ; 4 bytes @ 0x1F
  2678  003F                     	ds	4
  2679  0043                     sprintf@sp:	
  2680                           
  2681                           ; 1 bytes @ 0x23
  2682  0043                     	ds	1
  2683  0044                     sprintf@width:	
  2684                           
  2685                           ; 2 bytes @ 0x24
  2686  0044                     	ds	2
  2687  0046                     sprintf@prec:	
  2688                           
  2689                           ; 2 bytes @ 0x26
  2690  0046                     	ds	2
  2691  0048                     sprintf@c:	
  2692                           
  2693                           ; 1 bytes @ 0x28
  2694  0048                     	ds	1
  2695  0049                     ?_ftoa:	
  2696  0049                     ftoa@f:	
  2697                           ; 1 bytes @ 0x29
  2698                           
  2699                           
  2700                           ; 3 bytes @ 0x29
  2701  0049                     	ds	3
  2702  004C                     ftoa@status:	
  2703                           
  2704                           ; 1 bytes @ 0x2C
  2705  004C                     	ds	1
  2706  004D                     ??_ftoa:	
  2707                           
  2708                           ; 0 bytes @ 0x2D
  2709  004D                     	ds	1
  2710  004E                     ftoa@rem:	
  2711                           
  2712                           ; 4 bytes @ 0x2E
  2713  004E                     	ds	4
  2714  0052                     ftoa@l:	
  2715                           
  2716                           ; 4 bytes @ 0x32
  2717  0052                     	ds	4
  2718  0056                     ftoa@cp:	
  2719                           
  2720                           ; 1 bytes @ 0x36
  2721  0056                     	ds	1
  2722  0057                     ?_RTXVisDec:	
  2723  0057                     RTXVisDec@val:	
  2724                           ; 1 bytes @ 0x37
  2725                           
  2726                           
  2727                           ; 3 bytes @ 0x37
  2728  0057                     	ds	3
  2729  005A                     RTXVisDec@buff:	
  2730                           
  2731                           ; 1 bytes @ 0x3A
  2732  005A                     	ds	1
  2733  005B                     RTXVisDec@maxDigit:	
  2734                           
  2735                           ; 1 bytes @ 0x3B
  2736  005B                     	ds	1
  2737  005C                     RTXVisDec@offset:	
  2738                           
  2739                           ; 1 bytes @ 0x3C
  2740  005C                     	ds	1
  2741  005D                     ??_RTXVisDec:	
  2742                           
  2743                           ; 0 bytes @ 0x3D
  2744  005D                     	ds	3
  2745  0060                     NVMWrite@rowAddr:	
  2746                           
  2747                           ; 2 bytes @ 0x40
  2748  0060                     	ds	2
  2749  0062                     ??_RTXUpdateDisplay:	
  2750  0062                     NVMWrite@i:	
  2751                           ; 0 bytes @ 0x42
  2752                           
  2753                           
  2754                           ; 1 bytes @ 0x42
  2755  0062                     	ds	1
  2756  0063                     NVMWrite@latchAddr:	
  2757                           
  2758                           ; 1 bytes @ 0x43
  2759  0063                     	ds	1
  2760  0064                     NVMWrite@j:	
  2761                           
  2762                           ; 1 bytes @ 0x44
  2763  0064                     	ds	2
  2764  0066                     ??_RTXReadPkt:	
  2765  0066                     ??_PGMSelLong:	
  2766                           ; 0 bytes @ 0x46
  2767                           
  2768  0066                     ??_RTXSelDown:	
  2769                           ; 0 bytes @ 0x46
  2770                           
  2771  0066                     RTXInit@state:	
  2772                           ; 0 bytes @ 0x46
  2773                           
  2774                           
  2775                           ; 1 bytes @ 0x46
  2776  0066                     	ds	1
  2777  0067                     ??_main:	
  2778                           
  2779                           ; 0 bytes @ 0x47
  2780  0067                     	ds	1
  2781  0068                     main@i:	
  2782                           
  2783                           ; 1 bytes @ 0x48
  2784  0068                     	ds	1
  2785                           
  2786                           	psect	maintext
  2787  1312                     __pmaintext:	
  2788 ;;
  2789 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2790 ;;
  2791 ;; *************** function _main *****************
  2792 ;; Defined at:
  2793 ;;		line 50 in file "Base.c"
  2794 ;; Parameters:    Size  Location     Type
  2795 ;;		None
  2796 ;; Auto vars:     Size  Location     Type
  2797 ;;  i               1   72[BANK0 ] unsigned char 
  2798 ;; Return value:  Size  Location     Type
  2799 ;;		None               void
  2800 ;; Registers used:
  2801 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2802 ;; Tracked objects:
  2803 ;;		On entry : B1F/0
  2804 ;;		On exit  : 0/0
  2805 ;;		Unchanged: 0/0
  2806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2808 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2809 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2810 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2811 ;;Total ram usage:        2 bytes
  2812 ;; Hardware stack levels required when called:   10
  2813 ;; This function calls:
  2814 ;;		_CC1Init
  2815 ;;		_DINInit
  2816 ;;		_DINTask
  2817 ;;		_DPYInit
  2818 ;;		_INInit
  2819 ;;		_NVMInit
  2820 ;;		_OUTInit
  2821 ;;		_PGMInit
  2822 ;;		_RTXInit
  2823 ;;		_RTXTask
  2824 ;;		_SPIInit
  2825 ;;		_SYSInit
  2826 ;;		_SYSTask
  2827 ;; This function is called by:
  2828 ;;		Startup code after reset
  2829 ;; This function uses a non-reentrant model
  2830 ;;
  2831                           
  2832                           
  2833                           ;psect for function _main
  2834  1312                     _main:	
  2835                           
  2836                           ;Base.c: 52: unsigned char i;
  2837                           ;Base.c: 55: for(i=0;i<3;i++)
  2838                           
  2839                           ;incstack = 0
  2840                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2841  1312  0020               	movlb	0	; select bank0
  2842  1313  01E8               	clrf	main@i
  2843  1314  3003               	movlw	3
  2844  1315  0268               	subwf	main@i,w
  2845  1316  1803               	btfsc	3,0
  2846  1317  2B54               	goto	l723
  2847  1318                     l722:	
  2848  1318  0064               	clrwdt	;# 
  2849                           
  2850                           ;Base.c: 59: SYSInit(i);
  2851  1319  0020               	movlb	0	; select bank0
  2852  131A  0868               	movf	main@i,w
  2853  131B  319F  2747  3193   	fcall	_SYSInit
  2854                           
  2855                           ;Base.c: 60: INInit(i);
  2856  131E  0020               	movlb	0	; select bank0
  2857  131F  0868               	movf	main@i,w
  2858  1320  319D  25DB  3193   	fcall	_INInit
  2859                           
  2860                           ;Base.c: 61: OUTInit(i);
  2861  1323  0020               	movlb	0	; select bank0
  2862  1324  0868               	movf	main@i,w
  2863  1325  319D  25F2  3193   	fcall	_OUTInit
  2864                           
  2865                           ;Base.c: 62: DINInit(i);
  2866  1328  0020               	movlb	0	; select bank0
  2867  1329  0868               	movf	main@i,w
  2868  132A  319D  2566  3193   	fcall	_DINInit
  2869                           
  2870                           ;Base.c: 63: SPIInit(i);
  2871  132D  0020               	movlb	0	; select bank0
  2872  132E  0868               	movf	main@i,w
  2873  132F  319E  26E9  3193   	fcall	_SPIInit
  2874                           
  2875                           ;Base.c: 64: CC1Init(i);
  2876  1332  0020               	movlb	0	; select bank0
  2877  1333  0868               	movf	main@i,w
  2878  1334  3191  21D5  3193   	fcall	_CC1Init
  2879                           
  2880                           ;Base.c: 65: NVMInit(i);
  2881  1337  0020               	movlb	0	; select bank0
  2882  1338  0868               	movf	main@i,w
  2883  1339  319D  2502  3193   	fcall	_NVMInit
  2884                           
  2885                           ;Base.c: 66: DPYInit(i);
  2886  133C  0020               	movlb	0	; select bank0
  2887  133D  0868               	movf	main@i,w
  2888  133E  319D  258A  3193   	fcall	_DPYInit
  2889                           
  2890                           ;Base.c: 67: RTXInit(i);
  2891  1341  0020               	movlb	0	; select bank0
  2892  1342  0868               	movf	main@i,w
  2893  1343  3194  245B  3193   	fcall	_RTXInit
  2894                           
  2895                           ;Base.c: 68: PGMInit(i);
  2896  1346  0020               	movlb	0	; select bank0
  2897  1347  0868               	movf	main@i,w
  2898  1348  319D  25B1  3193   	fcall	_PGMInit
  2899  134B  3001               	movlw	1
  2900  134C  0020               	movlb	0	; select bank0
  2901  134D  00E7               	movwf	??_main
  2902  134E  0867               	movf	??_main,w
  2903  134F  07E8               	addwf	main@i,f
  2904  1350  3003               	movlw	3
  2905  1351  0268               	subwf	main@i,w
  2906  1352  1C03               	skipc
  2907  1353  2B18               	goto	l722
  2908  1354                     l723:	
  2909                           
  2910                           ;Base.c: 69: }
  2911                           ;Base.c: 72: INTCONbits.GIE=1;
  2912  1354  178B               	bsf	11,7	;volatile
  2913  1355                     l724:	
  2914                           ;Base.c: 75: while(1)
  2915                           
  2916  1355  0064               	clrwdt	;# 
  2917                           
  2918                           ;Base.c: 79: SYSTask();
  2919  1356  319E  263D  3193   	fcall	_SYSTask
  2920                           
  2921                           ;Base.c: 80: DINTask();
  2922  1359  319E  2691  3193   	fcall	_DINTask
  2923                           
  2924                           ;Base.c: 81: RTXTask();
  2925  135C  319C  24DF  3193   	fcall	_RTXTask
  2926  135F  2B55               	goto	l724
  2927  1360                     __end_of_main:	
  2928                           
  2929                           	psect	text1
  2930  1E3D                     __ptext1:	
  2931 ;; *************** function _SYSTask *****************
  2932 ;; Defined at:
  2933 ;;		line 41 in file "SYS.c"
  2934 ;; Parameters:    Size  Location     Type
  2935 ;;		None
  2936 ;; Auto vars:     Size  Location     Type
  2937 ;;		None
  2938 ;; Return value:  Size  Location     Type
  2939 ;;		None               void
  2940 ;; Registers used:
  2941 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2942 ;; Tracked objects:
  2943 ;;		On entry : 0/0
  2944 ;;		On exit  : 0/0
  2945 ;;		Unchanged: 0/0
  2946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2947 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2948 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2949 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2950 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2951 ;;Total ram usage:        0 bytes
  2952 ;; Hardware stack levels used:    1
  2953 ;; Hardware stack levels required when called:    9
  2954 ;; This function calls:
  2955 ;;		_DINTick
  2956 ;;		_PGMSelLong
  2957 ;;		_RTXSelDown
  2958 ;;		_RTXTick
  2959 ;; This function is called by:
  2960 ;;		_main
  2961 ;; This function uses a non-reentrant model
  2962 ;;
  2963                           
  2964                           
  2965                           ;psect for function _SYSTask
  2966  1E3D                     _SYSTask:	
  2967                           
  2968                           ;SYS.c: 44: if(u_SYS_STA.TICK)
  2969                           
  2970                           ;incstack = 0
  2971                           ; Regs used in _SYSTask: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2972  1E3D  0022               	movlb	2	; select bank2
  2973  1E3E  1C3E               	btfss	_u_SYS_STA^(0+256),0
  2974  1E3F  2E47               	goto	l6722
  2975                           
  2976                           ;SYS.c: 45: {
  2977                           ;SYS.c: 47: u_SYS_STA.TICK=0;
  2978  1E40  103E               	bcf	_u_SYS_STA^(0+256),0
  2979                           
  2980                           ;SYS.c: 50: RTXTick();
  2981  1E41  3191  213F  319E   	fcall	_RTXTick
  2982                           
  2983                           ;SYS.c: 51: DINTick();
  2984  1E44  319F  27D9  319E   	fcall	_DINTick
  2985  1E47                     l6722:	
  2986                           
  2987                           ;SYS.c: 52: }
  2988                           ;SYS.c: 54: if(u_in_ev_down.sel)
  2989  1E47  0020               	movlb	0	; select bank0
  2990  1E48  1C6B               	btfss	_u_in_ev_down,0
  2991  1E49  2E4E               	goto	l6728
  2992                           
  2993                           ;SYS.c: 55: {
  2994                           ;SYS.c: 57: u_in_ev_down.sel=0;
  2995  1E4A  106B               	bcf	_u_in_ev_down,0
  2996                           
  2997                           ;SYS.c: 58: RTXSelDown();
  2998  1E4B  319F  2707  319E   	fcall	_RTXSelDown
  2999  1E4E                     l6728:	
  3000                           
  3001                           ;SYS.c: 59: }
  3002                           ;SYS.c: 60: if(u_in_ev_up.sel)
  3003  1E4E  0021               	movlb	1	; select bank1
  3004  1E4F  186D               	btfsc	_u_in_ev_up^(0+128),0
  3005                           
  3006                           ;SYS.c: 61: {
  3007                           ;SYS.c: 63: u_in_ev_up.sel=0;
  3008  1E50  106D               	bcf	_u_in_ev_up^(0+128),0
  3009                           
  3010                           ;SYS.c: 64: }
  3011                           ;SYS.c: 65: if(u_in_ev_long.sel)
  3012  1E51  0020               	movlb	0	; select bank0
  3013  1E52  1C6C               	btfss	_u_in_ev_long,0
  3014  1E53  0008               	return
  3015                           
  3016                           ;SYS.c: 66: {
  3017                           ;SYS.c: 68: u_in_ev_long.sel=0;
  3018  1E54  106C               	bcf	_u_in_ev_long,0
  3019                           
  3020                           ;SYS.c: 69: PGMSelLong();
  3021  1E55  319E  26AE         	fcall	_PGMSelLong
  3022  1E57  0008               	return
  3023  1E58                     __end_of_SYSTask:	
  3024                           
  3025                           	psect	text2
  3026  113F                     __ptext2:	
  3027 ;; *************** function _RTXTick *****************
  3028 ;; Defined at:
  3029 ;;		line 112 in file "RTX.c"
  3030 ;; Parameters:    Size  Location     Type
  3031 ;;		None
  3032 ;; Auto vars:     Size  Location     Type
  3033 ;;		None
  3034 ;; Return value:  Size  Location     Type
  3035 ;;		None               void
  3036 ;; Registers used:
  3037 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3038 ;; Tracked objects:
  3039 ;;		On entry : 0/0
  3040 ;;		On exit  : 0/0
  3041 ;;		Unchanged: 0/0
  3042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3044 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3046 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3047 ;;Total ram usage:        0 bytes
  3048 ;; Hardware stack levels used:    1
  3049 ;; Hardware stack levels required when called:    8
  3050 ;; This function calls:
  3051 ;;		_CC1Strobe
  3052 ;;		_RTXSup
  3053 ;;		_RTXUpdateDisplay
  3054 ;; This function is called by:
  3055 ;;		_SYSTask
  3056 ;; This function uses a non-reentrant model
  3057 ;;
  3058                           
  3059                           
  3060                           ;psect for function _RTXTick
  3061  113F                     _RTXTick:	
  3062                           
  3063                           ;RTX.c: 115: RTXSup();
  3064                           
  3065                           ;incstack = 0
  3066                           ; Regs used in _RTXTick: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3067  113F  3190  208D  3191   	fcall	_RTXSup
  3068                           
  3069                           ;RTX.c: 118: tmrCalibration++;
  3070  1142  3001               	movlw	1
  3071  1143  0022               	movlb	2	; select bank2
  3072  1144  07B8               	addwf	_tmrCalibration^(0+256),f
  3073  1145  3000               	movlw	0
  3074  1146  3DB9               	addwfc	(_tmrCalibration+1)^(0+256),f
  3075                           
  3076                           ;RTX.c: 119: if(tmrCalibration>1000)
  3077  1147  3003               	movlw	3
  3078  1148  0239               	subwf	(_tmrCalibration+1)^(0+256),w
  3079  1149  30E9               	movlw	233
  3080  114A  1903               	skipnz
  3081  114B  0238               	subwf	_tmrCalibration^(0+256),w
  3082  114C  1C03               	skipc
  3083  114D  295C               	goto	l6506
  3084                           
  3085                           ;RTX.c: 120: {
  3086                           ;RTX.c: 121: tmrCalibration=0;
  3087  114E  01B8               	clrf	_tmrCalibration^(0+256)
  3088  114F  01B9               	clrf	(_tmrCalibration+1)^(0+256)
  3089                           
  3090                           ;RTX.c: 122: CC1Strobe(SIDLE);
  3091  1150  3036               	movlw	54
  3092  1151  319D  259D  3191   	fcall	_CC1Strobe
  3093                           
  3094                           ;RTX.c: 123: CC1Strobe(SCAL);
  3095  1154  3033               	movlw	51
  3096  1155  319D  259D  3191   	fcall	_CC1Strobe
  3097                           
  3098                           ;RTX.c: 124: CC1Strobe(SFRX);
  3099  1158  303A               	movlw	58
  3100  1159  319D  259D  3191   	fcall	_CC1Strobe
  3101  115C                     l6506:	
  3102                           
  3103                           ;RTX.c: 125: }
  3104                           ;RTX.c: 128: if(tmrVis)
  3105  115C  0022               	movlb	2	; select bank2
  3106  115D  083C               	movf	_tmrVis^(0+256),w
  3107  115E  043D               	iorwf	(_tmrVis+1)^(0+256),w
  3108  115F  1903               	btfsc	3,2
  3109  1160  0008               	return
  3110                           
  3111                           ;RTX.c: 129: {
  3112                           ;RTX.c: 130: tmrVis--;
  3113  1161  3001               	movlw	1
  3114  1162  02BC               	subwf	_tmrVis^(0+256),f
  3115  1163  3000               	movlw	0
  3116  1164  3BBD               	subwfb	(_tmrVis+1)^(0+256),f
  3117                           
  3118                           ;RTX.c: 131: if(!(tmrVis))
  3119  1165  083C               	movf	_tmrVis^(0+256),w
  3120  1166  043D               	iorwf	(_tmrVis+1)^(0+256),w
  3121  1167  1D03               	btfss	3,2
  3122  1168  0008               	return
  3123                           
  3124                           ;RTX.c: 132: {
  3125                           ;RTX.c: 133: visTypeDpy=UPD_DPY_POWER;
  3126  1169  0021               	movlb	1	; select bank1
  3127  116A  01EE               	clrf	_visTypeDpy^(0+128)
  3128                           
  3129                           ;RTX.c: 134: RTXUpdateDisplay(UPD_DPY_POWER);
  3130  116B  3000               	movlw	0
  3131  116C  3180  204B         	fcall	_RTXUpdateDisplay
  3132  116E  0008               	return
  3133  116F                     __end_of_RTXTick:	
  3134                           
  3135                           	psect	text3
  3136  1F07                     __ptext3:	
  3137 ;; *************** function _RTXSelDown *****************
  3138 ;; Defined at:
  3139 ;;		line 468 in file "RTX.c"
  3140 ;; Parameters:    Size  Location     Type
  3141 ;;		None
  3142 ;; Auto vars:     Size  Location     Type
  3143 ;;		None
  3144 ;; Return value:  Size  Location     Type
  3145 ;;		None               void
  3146 ;; Registers used:
  3147 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3148 ;; Tracked objects:
  3149 ;;		On entry : 0/0
  3150 ;;		On exit  : 0/0
  3151 ;;		Unchanged: 0/0
  3152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3154 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3155 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3156 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3157 ;;Total ram usage:        1 bytes
  3158 ;; Hardware stack levels used:    1
  3159 ;; Hardware stack levels required when called:    8
  3160 ;; This function calls:
  3161 ;;		_RTXUpdateDisplay
  3162 ;; This function is called by:
  3163 ;;		_SYSTask
  3164 ;; This function uses a non-reentrant model
  3165 ;;
  3166                           
  3167                           
  3168                           ;psect for function _RTXSelDown
  3169  1F07                     _RTXSelDown:	
  3170                           
  3171                           ;RTX.c: 471: if(visTypeDpy==UPD_DPY_VOLTSENS)
  3172                           
  3173                           ;incstack = 0
  3174                           ; Regs used in _RTXSelDown: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3175  1F07  3003               	movlw	3
  3176  1F08  0021               	movlb	1	; select bank1
  3177  1F09  066E               	xorwf	_visTypeDpy^(0+128),w
  3178  1F0A  1D03               	btfss	3,2
  3179  1F0B  2F0E               	goto	l6650
  3180                           
  3181                           ;RTX.c: 472: visTypeDpy=UPD_DPY_POWER;
  3182  1F0C  01EE               	clrf	_visTypeDpy^(0+128)
  3183  1F0D  2F14               	goto	l531
  3184  1F0E                     l6650:	
  3185                           
  3186                           ;RTX.c: 473: else
  3187                           ;RTX.c: 474: visTypeDpy++;
  3188  1F0E  3001               	movlw	1
  3189  1F0F  0020               	movlb	0	; select bank0
  3190  1F10  00E6               	movwf	??_RTXSelDown
  3191  1F11  0866               	movf	??_RTXSelDown,w
  3192  1F12  0021               	movlb	1	; select bank1
  3193  1F13  07EE               	addwf	_visTypeDpy^(0+128),f
  3194  1F14                     l531:	
  3195                           
  3196                           ;RTX.c: 476: if(visTypeDpy!=UPD_DPY_POWER)
  3197  1F14  086E               	movf	_visTypeDpy^(0+128),w
  3198  1F15  1903               	btfsc	3,2
  3199  1F16  2F1D               	goto	l6654
  3200                           
  3201                           ;RTX.c: 477: tmrVis=500;
  3202  1F17  30F4               	movlw	244
  3203  1F18  0022               	movlb	2	; select bank2
  3204  1F19  00BC               	movwf	_tmrVis^(0+256)
  3205  1F1A  3001               	movlw	1
  3206  1F1B  00BD               	movwf	(_tmrVis^(0+256)+1)
  3207  1F1C  2F20               	goto	l6656
  3208  1F1D                     l6654:	
  3209                           
  3210                           ;RTX.c: 478: else
  3211                           ;RTX.c: 479: tmrVis=0;
  3212  1F1D  0022               	movlb	2	; select bank2
  3213  1F1E  01BC               	clrf	_tmrVis^(0+256)
  3214  1F1F  01BD               	clrf	(_tmrVis+1)^(0+256)
  3215  1F20                     l6656:	
  3216                           
  3217                           ;RTX.c: 481: RTXUpdateDisplay(visTypeDpy);
  3218  1F20  0021               	movlb	1	; select bank1
  3219  1F21  086E               	movf	_visTypeDpy^(0+128),w
  3220  1F22  3180  204B         	fcall	_RTXUpdateDisplay
  3221  1F24  0008               	return
  3222  1F25                     __end_of_RTXSelDown:	
  3223                           
  3224                           	psect	text4
  3225  1EAE                     __ptext4:	
  3226 ;; *************** function _PGMSelLong *****************
  3227 ;; Defined at:
  3228 ;;		line 68 in file "PGM.c"
  3229 ;; Parameters:    Size  Location     Type
  3230 ;;		None
  3231 ;; Auto vars:     Size  Location     Type
  3232 ;;		None
  3233 ;; Return value:  Size  Location     Type
  3234 ;;		None               void
  3235 ;; Registers used:
  3236 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3237 ;; Tracked objects:
  3238 ;;		On entry : 0/0
  3239 ;;		On exit  : 0/0
  3240 ;;		Unchanged: 0/0
  3241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3242 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3243 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3244 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3245 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3246 ;;Total ram usage:        1 bytes
  3247 ;; Hardware stack levels used:    1
  3248 ;; Hardware stack levels required when called:    8
  3249 ;; This function calls:
  3250 ;;		_DLYDelay_ms
  3251 ;;		_PGMWriteNvm
  3252 ;;		_RTXUpdateDisplay
  3253 ;; This function is called by:
  3254 ;;		_SYSTask
  3255 ;; This function uses a non-reentrant model
  3256 ;;
  3257                           
  3258                           
  3259                           ;psect for function _PGMSelLong
  3260  1EAE                     _PGMSelLong:	
  3261                           
  3262                           ;PGM.c: 71: pgm_cfg.base_id=TMR1L^TMR1H;
  3263                           
  3264                           ;incstack = 0
  3265                           ; Regs used in _PGMSelLong: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3266  1EAE  0020               	movlb	0	; select bank0
  3267  1EAF  0816               	movf	22,w	;volatile
  3268  1EB0  0617               	xorwf	23,w	;volatile
  3269  1EB1  00E6               	movwf	??_PGMSelLong
  3270  1EB2  0866               	movf	??_PGMSelLong,w
  3271  1EB3  0022               	movlb	2	; select bank2
  3272  1EB4  00D8               	movwf	(_pgm_cfg^(0+256)+3)
  3273                           
  3274                           ;PGM.c: 73: pgm_cfg.gen_curr_sens_id=0x00;
  3275  1EB5  01D9               	clrf	(_pgm_cfg^(0+256)+4)
  3276                           
  3277                           ;PGM.c: 74: pgm_cfg.con_curr_sens_id=0x00;
  3278  1EB6  01DA               	clrf	(_pgm_cfg^(0+256)+5)
  3279                           
  3280                           ;PGM.c: 75: pgm_cfg.volt_sens_id=0x00;
  3281  1EB7  01DB               	clrf	(_pgm_cfg^(0+256)+6)
  3282                           
  3283                           ;PGM.c: 77: pgm_cfg.menu.val=0x00;
  3284  1EB8  01D7               	clrf	(_pgm_cfg^(0+256)+2)
  3285                           
  3286                           ;PGM.c: 79: PGMWriteNvm();
  3287  1EB9  319D  2535  319E   	fcall	_PGMWriteNvm
  3288                           
  3289                           ;PGM.c: 81: RTXUpdateDisplay(UPD_DPY_PGMRST);
  3290  1EBC  3007               	movlw	7
  3291  1EBD  3180  204B  319E   	fcall	_RTXUpdateDisplay
  3292                           
  3293                           ;PGM.c: 83: DLYDelay_ms(2000);
  3294  1EC0  30D0               	movlw	208
  3295  1EC1  00F1               	movwf	DLYDelay_ms@val
  3296  1EC2  3007               	movlw	7
  3297  1EC3  00F2               	movwf	DLYDelay_ms@val+1
  3298  1EC4  319E  2609  319E   	fcall	_DLYDelay_ms
  3299                           
  3300                           ;PGM.c: 85: RTXUpdateDisplay(UPD_DPY_POWER);
  3301  1EC7  3000               	movlw	0
  3302  1EC8  3180  204B         	fcall	_RTXUpdateDisplay
  3303  1ECA  0008               	return
  3304  1ECB                     __end_of_PGMSelLong:	
  3305                           
  3306                           	psect	text5
  3307  1FD9                     __ptext5:	
  3308 ;; *************** function _DINTick *****************
  3309 ;; Defined at:
  3310 ;;		line 46 in file "DIN.c"
  3311 ;; Parameters:    Size  Location     Type
  3312 ;;		None
  3313 ;; Auto vars:     Size  Location     Type
  3314 ;;		None
  3315 ;; Return value:  Size  Location     Type
  3316 ;;		None               void
  3317 ;; Registers used:
  3318 ;;		wreg, status,2, status,0
  3319 ;; Tracked objects:
  3320 ;;		On entry : 0/0
  3321 ;;		On exit  : 0/0
  3322 ;;		Unchanged: 0/0
  3323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3325 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3326 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3327 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3328 ;;Total ram usage:        1 bytes
  3329 ;; Hardware stack levels used:    1
  3330 ;; Hardware stack levels required when called:    2
  3331 ;; This function calls:
  3332 ;;		Nothing
  3333 ;; This function is called by:
  3334 ;;		_SYSTask
  3335 ;; This function uses a non-reentrant model
  3336 ;;
  3337                           
  3338                           
  3339                           ;psect for function _DINTick
  3340  1FD9                     _DINTick:	
  3341                           
  3342                           ;DIN.c: 50: if(u_flg_din.tmrDbncSel)
  3343                           
  3344                           ;incstack = 0
  3345                           ; Regs used in _DINTick: [wreg+status,2+status,0]
  3346  1FD9  0020               	movlb	0	; select bank0
  3347  1FDA  1C6A               	btfss	_u_flg_din,0
  3348  1FDB  2FEC               	goto	l214
  3349                           
  3350                           ;DIN.c: 51: {
  3351                           ;DIN.c: 52: tmrDbncSel++;
  3352  1FDC  3001               	movlw	1
  3353  1FDD  00F1               	movwf	??_DINTick
  3354  1FDE  0871               	movf	??_DINTick,w
  3355  1FDF  07E9               	addwf	_tmrDbncSel,f
  3356                           
  3357                           ;DIN.c: 53: if(tmrDbncSel>5)
  3358  1FE0  3006               	movlw	6
  3359  1FE1  0269               	subwf	_tmrDbncSel,w
  3360  1FE2  1C03               	skipc
  3361  1FE3  2FEC               	goto	l214
  3362                           
  3363                           ;DIN.c: 54: {
  3364                           ;DIN.c: 55: u_flg_din.tmrDbncSel=0;
  3365  1FE4  106A               	bcf	_u_flg_din,0
  3366                           
  3367                           ;DIN.c: 56: tmrDbncSel=0;
  3368  1FE5  01E9               	clrf	_tmrDbncSel
  3369                           
  3370                           ;DIN.c: 58: if(u_in_sta_currTask.sel)
  3371  1FE6  1C6D               	btfss	_u_in_sta_currTask,0
  3372  1FE7  2FEA               	goto	l216
  3373                           
  3374                           ;DIN.c: 59: u_in_ev_down.sel=1;
  3375  1FE8  146B               	bsf	_u_in_ev_down,0
  3376  1FE9  2FEC               	goto	l214
  3377  1FEA                     l216:	
  3378                           
  3379                           ;DIN.c: 60: else
  3380                           ;DIN.c: 61: u_in_ev_up.sel=1;
  3381  1FEA  0021               	movlb	1	; select bank1
  3382  1FEB  146D               	bsf	_u_in_ev_up^(0+128),0
  3383  1FEC                     l214:	
  3384                           
  3385                           ;DIN.c: 62: }
  3386                           ;DIN.c: 63: }
  3387                           ;DIN.c: 66: if(u_flg_din.tmrLongSel)
  3388  1FEC  0020               	movlb	0	; select bank0
  3389  1FED  1CEA               	btfss	_u_flg_din,1
  3390  1FEE  0008               	return
  3391                           
  3392                           ;DIN.c: 67: {
  3393                           ;DIN.c: 68: tmrLongSel++;
  3394  1FEF  3001               	movlw	1
  3395  1FF0  0022               	movlb	2	; select bank2
  3396  1FF1  07BA               	addwf	_tmrLongSel^(0+256),f
  3397  1FF2  3000               	movlw	0
  3398  1FF3  3DBB               	addwfc	(_tmrLongSel+1)^(0+256),f
  3399                           
  3400                           ;DIN.c: 69: if(tmrLongSel>200)
  3401  1FF4  3000               	movlw	0
  3402  1FF5  023B               	subwf	(_tmrLongSel+1)^(0+256),w
  3403  1FF6  30C9               	movlw	201
  3404  1FF7  1903               	skipnz
  3405  1FF8  023A               	subwf	_tmrLongSel^(0+256),w
  3406  1FF9  1C03               	skipc
  3407  1FFA  0008               	return
  3408                           
  3409                           ;DIN.c: 70: {
  3410                           ;DIN.c: 72: tmrLongSel=0;
  3411  1FFB  01BA               	clrf	_tmrLongSel^(0+256)
  3412  1FFC  01BB               	clrf	(_tmrLongSel+1)^(0+256)
  3413                           
  3414                           ;DIN.c: 74: u_in_ev_long.sel=1;
  3415  1FFD  0020               	movlb	0	; select bank0
  3416  1FFE  146C               	bsf	_u_in_ev_long,0
  3417  1FFF  0008               	return
  3418  2000                     __end_of_DINTick:	
  3419                           
  3420                           	psect	text6
  3421  1F47                     __ptext6:	
  3422 ;; *************** function _SYSInit *****************
  3423 ;; Defined at:
  3424 ;;		line 14 in file "SYS.c"
  3425 ;; Parameters:    Size  Location     Type
  3426 ;;  state           1    wreg     unsigned char 
  3427 ;; Auto vars:     Size  Location     Type
  3428 ;;  state           1    2[COMMON] unsigned char 
  3429 ;; Return value:  Size  Location     Type
  3430 ;;		None               void
  3431 ;; Registers used:
  3432 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3433 ;; Tracked objects:
  3434 ;;		On entry : 0/0
  3435 ;;		On exit  : 0/0
  3436 ;;		Unchanged: 0/0
  3437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3439 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3440 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3441 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3442 ;;Total ram usage:        2 bytes
  3443 ;; Hardware stack levels used:    1
  3444 ;; Hardware stack levels required when called:    2
  3445 ;; This function calls:
  3446 ;;		Nothing
  3447 ;; This function is called by:
  3448 ;;		_main
  3449 ;; This function uses a non-reentrant model
  3450 ;;
  3451                           
  3452                           
  3453                           ;psect for function _SYSInit
  3454  1F47                     _SYSInit:	
  3455                           
  3456                           ;incstack = 0
  3457                           ; Regs used in _SYSInit: [wreg-fsr0h+status,2+status,0]
  3458                           ;SYSInit@state stored from wreg
  3459  1F47  00F2               	movwf	SYSInit@state
  3460                           
  3461                           ;SYS.c: 16: switch(state)
  3462  1F48  2F61               	goto	l5210
  3463  1F49                     l5192:	
  3464                           ;SYS.c: 17: {
  3465                           ;SYS.c: 18: case 0:
  3466                           
  3467                           
  3468                           ;SYS.c: 20: OPTION_REG=0b00000110; OSCCON=0b01110001; WDTCON=0b00001001; TMR0=255-156; I
      +                          NTCON|=0b00100000; INTCON&=0b11111011; PIR1=0b00000000; PIR2=0b00000000; PIE1=0b00000000
      +                          ; PIE2=0b00000000;
  3469  1F49  3006               	movlw	6
  3470  1F4A  0021               	movlb	1	; select bank1
  3471  1F4B  0095               	movwf	21	;volatile
  3472  1F4C  3071               	movlw	113
  3473  1F4D  0099               	movwf	25	;volatile
  3474  1F4E  3009               	movlw	9
  3475  1F4F  0097               	movwf	23	;volatile
  3476  1F50  3063               	movlw	99
  3477  1F51  0020               	movlb	0	; select bank0
  3478  1F52  0095               	movwf	21	;volatile
  3479  1F53  168B               	bsf	11,5	;volatile
  3480  1F54  30FB               	movlw	251
  3481  1F55  00F1               	movwf	??_SYSInit
  3482  1F56  0871               	movf	??_SYSInit,w
  3483  1F57  058B               	andwf	11,f	;volatile
  3484  1F58  0191               	clrf	17	;volatile
  3485  1F59  0192               	clrf	18	;volatile
  3486  1F5A  0021               	movlb	1	; select bank1
  3487  1F5B  0191               	clrf	17	;volatile
  3488  1F5C  0192               	clrf	18	;volatile
  3489                           
  3490                           ;SYS.c: 21: break;
  3491  1F5D  0008               	return
  3492  1F5E                     l5206:	
  3493                           ;SYS.c: 22: case 1:
  3494                           
  3495                           
  3496                           ;SYS.c: 24: u_SYS_STA.VAL=0;
  3497  1F5E  0022               	movlb	2	; select bank2
  3498  1F5F  01BE               	clrf	_u_SYS_STA^(0+256)
  3499                           
  3500                           ;SYS.c: 29: }
  3501                           
  3502                           ;SYS.c: 25: break;
  3503  1F60  0008               	return
  3504  1F61                     l5210:	
  3505  1F61  0872               	movf	SYSInit@state,w
  3506                           
  3507                           ; Switch size 1, requested type "space"
  3508                           ; Number of cases is 2, Range of values is 0 to 1
  3509                           ; switch strategies available:
  3510                           ; Name         Instructions Cycles
  3511                           ; simple_byte            7     4 (average)
  3512                           ; direct_byte           10     6 (fixed)
  3513                           ; jumptable            260     6 (fixed)
  3514                           ;	Chosen strategy is simple_byte
  3515  1F62  3A00               	xorlw	0	; case 0
  3516  1F63  1903               	skipnz
  3517  1F64  2F49               	goto	l5192
  3518  1F65  3A01               	xorlw	1	; case 1
  3519  1F66  1903               	skipnz
  3520  1F67  2F5E               	goto	l5206
  3521  1F68  2F69               	goto	l645
  3522  1F69                     l645:	
  3523  1F69  0008               	return
  3524  1F6A                     __end_of_SYSInit:	
  3525                           
  3526                           	psect	text7
  3527  1EE9                     __ptext7:	
  3528 ;; *************** function _SPIInit *****************
  3529 ;; Defined at:
  3530 ;;		line 8 in file "SPI.c"
  3531 ;; Parameters:    Size  Location     Type
  3532 ;;  state           1    wreg     unsigned char 
  3533 ;; Auto vars:     Size  Location     Type
  3534 ;;  state           1    2[COMMON] unsigned char 
  3535 ;; Return value:  Size  Location     Type
  3536 ;;		None               void
  3537 ;; Registers used:
  3538 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3539 ;; Tracked objects:
  3540 ;;		On entry : 0/0
  3541 ;;		On exit  : 0/0
  3542 ;;		Unchanged: 0/0
  3543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3545 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3546 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3547 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3548 ;;Total ram usage:        2 bytes
  3549 ;; Hardware stack levels used:    1
  3550 ;; Hardware stack levels required when called:    2
  3551 ;; This function calls:
  3552 ;;		Nothing
  3553 ;; This function is called by:
  3554 ;;		_main
  3555 ;; This function uses a non-reentrant model
  3556 ;;
  3557                           
  3558                           
  3559                           ;psect for function _SPIInit
  3560  1EE9                     _SPIInit:	
  3561                           
  3562                           ;incstack = 0
  3563                           ; Regs used in _SPIInit: [wreg-fsr0h+status,2+status,0]
  3564                           ;SPIInit@state stored from wreg
  3565  1EE9  00F2               	movwf	SPIInit@state
  3566                           
  3567                           ;SPI.c: 10: switch(state)
  3568  1EEA  2EFB               	goto	l5084
  3569  1EEB                     l61:	
  3570                           ;SPI.c: 11: {
  3571                           ;SPI.c: 12: case 0:
  3572                           
  3573                           
  3574                           ;SPI.c: 14: TRISC|=0b00010000; TRISC&=0b11010111; SSPCONbits.SSPEN=0; SSPBUF=0x00; SSPCO
      +                          N1=0b00000001; SSPCON2=0b00000000; SSPSTAT=0b01000000; SSPCONbits.SSPEN=1;
  3575  1EEB  0021               	movlb	1	; select bank1
  3576  1EEC  160E               	bsf	14,4	;volatile
  3577  1EED  30D7               	movlw	215
  3578  1EEE  00F1               	movwf	??_SPIInit
  3579  1EEF  0871               	movf	??_SPIInit,w
  3580  1EF0  058E               	andwf	14,f	;volatile
  3581  1EF1  0024               	movlb	4	; select bank4
  3582  1EF2  1295               	bcf	21,5	;volatile
  3583  1EF3  0191               	clrf	17	;volatile
  3584  1EF4  3001               	movlw	1
  3585  1EF5  0095               	movwf	21	;volatile
  3586  1EF6  0196               	clrf	22	;volatile
  3587  1EF7  3040               	movlw	64
  3588  1EF8  0094               	movwf	20	;volatile
  3589  1EF9  1695               	bsf	21,5	;volatile
  3590                           
  3591                           ;SPI.c: 22: }
  3592                           
  3593                           ;SPI.c: 21: break;
  3594                           
  3595                           ;SPI.c: 19: case 2:
  3596                           
  3597                           ;SPI.c: 18: break;
  3598                           
  3599                           ;SPI.c: 16: case 1:
  3600                           
  3601                           ;SPI.c: 15: break;
  3602  1EFA  0008               	return
  3603  1EFB                     l5084:	
  3604  1EFB  0872               	movf	SPIInit@state,w
  3605                           
  3606                           ; Switch size 1, requested type "space"
  3607                           ; Number of cases is 3, Range of values is 0 to 2
  3608                           ; switch strategies available:
  3609                           ; Name         Instructions Cycles
  3610                           ; simple_byte           10     6 (average)
  3611                           ; direct_byte           12     6 (fixed)
  3612                           ; jumptable            260     6 (fixed)
  3613                           ;	Chosen strategy is simple_byte
  3614  1EFC  3A00               	xorlw	0	; case 0
  3615  1EFD  1903               	skipnz
  3616  1EFE  2EEB               	goto	l61
  3617  1EFF  3A01               	xorlw	1	; case 1
  3618  1F00  1903               	skipnz
  3619  1F01  2F06               	goto	l65
  3620  1F02  3A03               	xorlw	3	; case 2
  3621  1F03  1903               	skipnz
  3622  1F04  2F06               	goto	l65
  3623  1F05  2F06               	goto	l65
  3624  1F06                     l65:	
  3625  1F06  0008               	return
  3626  1F07                     __end_of_SPIInit:	
  3627                           
  3628                           	psect	text8
  3629  1CDF                     __ptext8:	
  3630 ;; *************** function _RTXTask *****************
  3631 ;; Defined at:
  3632 ;;		line 139 in file "RTX.c"
  3633 ;; Parameters:    Size  Location     Type
  3634 ;;		None
  3635 ;; Auto vars:     Size  Location     Type
  3636 ;;		None
  3637 ;; Return value:  Size  Location     Type
  3638 ;;		None               void
  3639 ;; Registers used:
  3640 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3641 ;; Tracked objects:
  3642 ;;		On entry : 0/0
  3643 ;;		On exit  : 0/0
  3644 ;;		Unchanged: 0/0
  3645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3647 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3649 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3650 ;;Total ram usage:        0 bytes
  3651 ;; Hardware stack levels used:    1
  3652 ;; Hardware stack levels required when called:    9
  3653 ;; This function calls:
  3654 ;;		_RTXReadPkt
  3655 ;; This function is called by:
  3656 ;;		_main
  3657 ;; This function uses a non-reentrant model
  3658 ;;
  3659                           
  3660                           
  3661                           ;psect for function _RTXTask
  3662  1CDF                     _RTXTask:	
  3663                           
  3664                           ;RTX.c: 142: if(!(PORTBbits.RB0))
  3665                           
  3666                           ;incstack = 0
  3667                           ; Regs used in _RTXTask: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3668  1CDF  0020               	movlb	0	; select bank0
  3669  1CE0  180D               	btfsc	13,0	;volatile
  3670  1CE1  0008               	return
  3671                           
  3672                           ;RTX.c: 143: RTXReadPkt();
  3673  1CE2  3189  21F2         	fcall	_RTXReadPkt
  3674  1CE4  0008               	return
  3675  1CE5                     __end_of_RTXTask:	
  3676                           
  3677                           	psect	text9
  3678  09F2                     __ptext9:	
  3679 ;; *************** function _RTXReadPkt *****************
  3680 ;; Defined at:
  3681 ;;		line 512 in file "RTX.c"
  3682 ;; Parameters:    Size  Location     Type
  3683 ;;		None
  3684 ;; Auto vars:     Size  Location     Type
  3685 ;;  valBatt         3   73[BANK1 ] struct _RTX_DATA
  3686 ;;  valVoltCurr     3   70[BANK1 ] struct _RTX_DATA
  3687 ;;  volt4Calc       3   65[BANK1 ] float 
  3688 ;;  dev_type        1   69[BANK1 ] enum E2174
  3689 ;;  dev_id          1   68[BANK1 ] unsigned char 
  3690 ;; Return value:  Size  Location     Type
  3691 ;;		None               void
  3692 ;; Registers used:
  3693 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3694 ;; Tracked objects:
  3695 ;;		On entry : 0/0
  3696 ;;		On exit  : 0/0
  3697 ;;		Unchanged: 0/0
  3698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3699 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3700 ;;      Locals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0
  3701 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3702 ;;      Totals:         0       1      11       0       0       0       0       0       0       0       0       0       
      +0       0
  3703 ;;Total ram usage:       12 bytes
  3704 ;; Hardware stack levels used:    1
  3705 ;; Hardware stack levels required when called:    8
  3706 ;; This function calls:
  3707 ;;		_CC1Read
  3708 ;;		_DLYDelay_ms
  3709 ;;		_PGMWriteNvm
  3710 ;;		_RTXRcvPkt
  3711 ;;		_RTXSendRData
  3712 ;;		_RTXSendRPgm
  3713 ;;		_RTXSup
  3714 ;;		_RTXUpdateDisplay
  3715 ;;		___ftmul
  3716 ;; This function is called by:
  3717 ;;		_RTXTask
  3718 ;; This function uses a non-reentrant model
  3719 ;;
  3720                           
  3721                           
  3722                           ;psect for function _RTXReadPkt
  3723  09F2                     _RTXReadPkt:	
  3724                           
  3725                           ;RTX.c: 514: unsigned char dev_id;
  3726                           ;RTX.c: 515: te_DEV_TYPE dev_type;
  3727                           ;RTX.c: 516: tu_RTX_DATA valVoltCurr,valBatt;
  3728                           ;RTX.c: 517: float volt4Calc;
  3729                           ;RTX.c: 520: CC1Read(0x3B,(&(numRxByte)),1);
  3730                           
  3731                           ;incstack = 0
  3732                           ; Regs used in _RTXReadPkt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3733  09F2  30EF               	movlw	low _numRxByte
  3734  09F3  00F9               	movwf	CC1Read@dst
  3735  09F4  3000               	movlw	high _numRxByte
  3736  09F5  00FA               	movwf	CC1Read@dst+1
  3737  09F6  01FB               	clrf	CC1Read@len
  3738  09F7  0AFB               	incf	CC1Read@len,f
  3739  09F8  303B               	movlw	59
  3740  09F9  319F  2725  3189   	fcall	_CC1Read
  3741  09FC                     l6644:	
  3742                           ;RTX.c: 521: while(numRxByte>=0x0B)
  3743                           
  3744  09FC  300B               	movlw	11
  3745  09FD  0021               	movlb	1	; select bank1
  3746  09FE  026F               	subwf	_numRxByte^(0+128),w
  3747  09FF  1C03               	btfss	3,0
  3748  0A00  0008               	return
  3749  0A01  0064               	clrwdt	;# 
  3750                           
  3751                           ;RTX.c: 525: RTXRcvPkt(pktRx,0x0B);
  3752  0A02  300B               	movlw	11
  3753  0A03  0020               	movlb	0	; select bank0
  3754  0A04  00E6               	movwf	??_RTXReadPkt
  3755  0A05  0866               	movf	??_RTXReadPkt,w
  3756  0A06  00A3               	movwf	RTXRcvPkt@len
  3757  0A07  303F               	movlw	(low (_pktRx| (0+256)))& (0+255)
  3758  0A08  319D  2527  3189   	fcall	_RTXRcvPkt
  3759                           
  3760                           ;RTX.c: 527: if(pktRx[OP]==PGM)
  3761  0A0B  0022               	movlb	2	; select bank2
  3762  0A0C  0343               	decf	(_pktRx^(0+256)+4),w
  3763  0A0D  1D03               	btfss	3,2
  3764  0A0E  2A7A               	goto	l6578
  3765                           
  3766                           ;RTX.c: 528: {
  3767                           ;RTX.c: 530: if(pktRx[TYPE_DEST]==BASE && pktRx[ID_DEST]==0x00)
  3768  0A0F  0840               	movf	(_pktRx^(0+256)+1),w
  3769  0A10  1D03               	btfss	3,2
  3770  0A11  2BA0               	goto	l6640
  3771  0A12  083F               	movf	_pktRx^(0+256),w
  3772  0A13  1D03               	btfss	3,2
  3773  0A14  2BA0               	goto	l6640
  3774                           
  3775                           ;RTX.c: 531: {
  3776                           ;RTX.c: 533: if(pktRx[TYPE_SOURCE]==SENS_VOLT && (!(pgm_cfg.menu.volt_sensIsProg)))
  3777  0A15  3003               	movlw	3
  3778  0A16  0642               	xorwf	(_pktRx^(0+256)+3),w
  3779  0A17  1903               	btfsc	3,2
  3780  0A18  1957               	btfsc	(_pgm_cfg^(0+256)+2),2
  3781  0A19  2A22               	goto	l6536
  3782                           
  3783                           ;RTX.c: 534: {
  3784                           ;RTX.c: 536: pgm_cfg.volt_sens_id=pktRx[ID_SOURCE];
  3785  0A1A  0841               	movf	(_pktRx^(0+256)+2),w
  3786  0A1B  0020               	movlb	0	; select bank0
  3787  0A1C  00E6               	movwf	??_RTXReadPkt
  3788  0A1D  0866               	movf	??_RTXReadPkt,w
  3789  0A1E  0022               	movlb	2	; select bank2
  3790  0A1F  00DB               	movwf	(_pgm_cfg^(0+256)+6)
  3791                           
  3792                           ;RTX.c: 537: pgm_cfg.menu.volt_sensIsProg=1;
  3793  0A20  1557               	bsf	(_pgm_cfg^(0+256)+2),2
  3794  0A21  2A3C               	goto	L1
  3795  0A22                     l6536:	
  3796                           ;RTX.c: 543: }
  3797                           
  3798                           ;RTX.c: 542: rtx_flg.pgmDone=1;
  3799                           
  3800                           ;RTX.c: 540: dev_type=pktRx[TYPE_SOURCE];
  3801                           
  3802                           ;RTX.c: 539: dev_id=pktRx[ID_SOURCE];
  3803                           
  3804                           
  3805                           ;RTX.c: 544: else if(pktRx[TYPE_SOURCE]==SENS_CURRGEN && (!(pgm_cfg.menu.gen_curr_sensIs
      +                          Prog)))
  3806  0A22  0022               	movlb	2	; select bank2
  3807  0A23  0342               	decf	(_pktRx^(0+256)+3),w
  3808  0A24  1903               	btfsc	3,2
  3809  0A25  1857               	btfsc	(_pgm_cfg^(0+256)+2),0
  3810  0A26  2A2F               	goto	l6546
  3811                           
  3812                           ;RTX.c: 545: {
  3813                           ;RTX.c: 547: pgm_cfg.gen_curr_sens_id=pktRx[ID_SOURCE];
  3814  0A27  0841               	movf	(_pktRx^(0+256)+2),w
  3815  0A28  0020               	movlb	0	; select bank0
  3816  0A29  00E6               	movwf	??_RTXReadPkt
  3817  0A2A  0866               	movf	??_RTXReadPkt,w
  3818  0A2B  0022               	movlb	2	; select bank2
  3819  0A2C  00D9               	movwf	(_pgm_cfg^(0+256)+4)
  3820                           
  3821                           ;RTX.c: 548: pgm_cfg.menu.gen_curr_sensIsProg=1;
  3822  0A2D  1457               	bsf	(_pgm_cfg^(0+256)+2),0
  3823  0A2E  2A3C               	goto	L1
  3824  0A2F                     l6546:	
  3825                           ;RTX.c: 554: }
  3826                           
  3827                           ;RTX.c: 553: rtx_flg.pgmDone=1;
  3828                           
  3829                           ;RTX.c: 551: dev_type=pktRx[TYPE_SOURCE];
  3830                           
  3831                           ;RTX.c: 550: dev_id=pktRx[ID_SOURCE];
  3832                           
  3833                           
  3834                           ;RTX.c: 555: else if(pktRx[TYPE_SOURCE]==SENS_CURRCON && (!(pgm_cfg.menu.con_curr_sensIs
      +                          Prog)))
  3835  0A2F  3002               	movlw	2
  3836  0A30  0022               	movlb	2	; select bank2
  3837  0A31  0642               	xorwf	(_pktRx^(0+256)+3),w
  3838  0A32  1903               	btfsc	3,2
  3839  0A33  18D7               	btfsc	(_pgm_cfg^(0+256)+2),1
  3840  0A34  2A4A               	goto	l6556
  3841                           
  3842                           ;RTX.c: 556: {
  3843                           ;RTX.c: 558: pgm_cfg.con_curr_sens_id=pktRx[ID_SOURCE];
  3844  0A35  0841               	movf	(_pktRx^(0+256)+2),w
  3845  0A36  0020               	movlb	0	; select bank0
  3846  0A37  00E6               	movwf	??_RTXReadPkt
  3847  0A38  0866               	movf	??_RTXReadPkt,w
  3848  0A39  0022               	movlb	2	; select bank2
  3849  0A3A  00DA               	movwf	(_pgm_cfg^(0+256)+5)
  3850                           
  3851                           ;RTX.c: 559: pgm_cfg.menu.con_curr_sensIsProg=1;
  3852  0A3B  14D7               	bsf	(_pgm_cfg^(0+256)+2),1
  3853  0A3C                     L1:	
  3854                           
  3855                           ;RTX.c: 561: dev_id=pktRx[ID_SOURCE];
  3856  0A3C  0841               	movf	(_pktRx^(0+256)+2),w
  3857  0A3D  0020               	movlb	0	; select bank0
  3858  0A3E  00E6               	movwf	??_RTXReadPkt
  3859  0A3F  0866               	movf	??_RTXReadPkt,w
  3860  0A40  0021               	movlb	1	; select bank1
  3861  0A41  00E4               	movwf	RTXReadPkt@dev_id^(0+128)
  3862                           
  3863                           ;RTX.c: 562: dev_type=pktRx[TYPE_SOURCE];
  3864  0A42  0022               	movlb	2	; select bank2
  3865  0A43  0842               	movf	(_pktRx^(0+256)+3),w
  3866  0A44  0020               	movlb	0	; select bank0
  3867  0A45  00E6               	movwf	??_RTXReadPkt
  3868  0A46  0866               	movf	??_RTXReadPkt,w
  3869  0A47  0021               	movlb	1	; select bank1
  3870  0A48  00E5               	movwf	RTXReadPkt@dev_type^(0+128)
  3871                           
  3872                           ;RTX.c: 564: rtx_flg.pgmDone=1;
  3873  0A49  146C               	bsf	_rtx_flg^(0+128),0
  3874  0A4A                     l6556:	
  3875                           
  3876                           ;RTX.c: 565: }
  3877                           ;RTX.c: 567: if(rtx_flg.pgmDone)
  3878  0A4A  0021               	movlb	1	; select bank1
  3879  0A4B  1C6C               	btfss	_rtx_flg^(0+128),0
  3880  0A4C  2BA0               	goto	l6640
  3881                           
  3882                           ;RTX.c: 568: {
  3883                           ;RTX.c: 570: rtx_flg.pgmDone=0;
  3884  0A4D  106C               	bcf	_rtx_flg^(0+128),0
  3885                           
  3886                           ;RTX.c: 572: PGMWriteNvm();
  3887  0A4E  319D  2535  3189   	fcall	_PGMWriteNvm
  3888                           
  3889                           ;RTX.c: 574: RTXSendRPgm(dev_id,dev_type);
  3890  0A51  0021               	movlb	1	; select bank1
  3891  0A52  0865               	movf	RTXReadPkt@dev_type^(0+128),w
  3892  0A53  0020               	movlb	0	; select bank0
  3893  0A54  00E6               	movwf	??_RTXReadPkt
  3894  0A55  0866               	movf	??_RTXReadPkt,w
  3895  0A56  00A7               	movwf	RTXSendRPgm@type
  3896  0A57  0021               	movlb	1	; select bank1
  3897  0A58  0864               	movf	RTXReadPkt@dev_id^(0+128),w
  3898  0A59  3190  2039  3189   	fcall	_RTXSendRPgm
  3899                           
  3900                           ;RTX.c: 576: if(pktRx[TYPE_SOURCE]==SENS_VOLT)
  3901  0A5C  3003               	movlw	3
  3902  0A5D  0022               	movlb	2	; select bank2
  3903  0A5E  0642               	xorwf	(_pktRx^(0+256)+3),w
  3904  0A5F  1D03               	btfss	3,2
  3905  0A60  2A63               	goto	l6566
  3906                           
  3907                           ;RTX.c: 577: RTXUpdateDisplay(UPD_DPY_PGMDONEVOLTSENS);
  3908  0A61  3006               	movlw	6
  3909  0A62  2A6F               	goto	L2
  3910  0A63                     l6566:	
  3911                           
  3912                           ;RTX.c: 578: else if(pktRx[TYPE_SOURCE]==SENS_CURRGEN)
  3913  0A63  0022               	movlb	2	; select bank2
  3914  0A64  0342               	decf	(_pktRx^(0+256)+3),w
  3915  0A65  1D03               	btfss	3,2
  3916  0A66  2A69               	goto	l6570
  3917                           
  3918                           ;RTX.c: 579: RTXUpdateDisplay(UPD_DPY_PGMDONECURRSENSGEN);
  3919  0A67  3004               	movlw	4
  3920  0A68  2A6F               	goto	L2
  3921  0A69                     l6570:	
  3922                           
  3923                           ;RTX.c: 580: else if(pktRx[TYPE_SOURCE]==SENS_CURRCON)
  3924  0A69  3002               	movlw	2
  3925  0A6A  0022               	movlb	2	; select bank2
  3926  0A6B  0642               	xorwf	(_pktRx^(0+256)+3),w
  3927  0A6C  1D03               	btfss	3,2
  3928  0A6D  2A72               	goto	l6574
  3929                           
  3930                           ;RTX.c: 581: RTXUpdateDisplay(UPD_DPY_PGMDONECURRSENSCON);
  3931  0A6E  3005               	movlw	5
  3932  0A6F                     L2:	
  3933  0A6F  3180  204B  3189   	fcall	_RTXUpdateDisplay
  3934  0A72                     l6574:	
  3935                           
  3936                           ;RTX.c: 583: DLYDelay_ms(2000);
  3937  0A72  30D0               	movlw	208
  3938  0A73  00F1               	movwf	DLYDelay_ms@val
  3939  0A74  3007               	movlw	7
  3940  0A75  00F2               	movwf	DLYDelay_ms@val+1
  3941  0A76  319E  2609  3189   	fcall	_DLYDelay_ms
  3942  0A79  2B9C               	goto	l6638
  3943  0A7A                     l6578:	
  3944                           ;RTX.c: 586: }
  3945                           ;RTX.c: 587: }
  3946                           ;RTX.c: 588: }
  3947                           
  3948                           ;RTX.c: 585: RTXUpdateDisplay(UPD_DPY_POWER);
  3949                           
  3950                           
  3951                           ;RTX.c: 590: else if(pktRx[OP]==DAT)
  3952  0A7A  0022               	movlb	2	; select bank2
  3953  0A7B  0843               	movf	(_pktRx^(0+256)+4),w
  3954  0A7C  1D03               	btfss	3,2
  3955  0A7D  2BA0               	goto	l6640
  3956                           
  3957                           ;RTX.c: 591: {
  3958                           ;RTX.c: 592: if(pktRx[TYPE_DEST]==BASE && pktRx[ID_DEST]==pgm_cfg.base_id)
  3959  0A7E  0840               	movf	(_pktRx^(0+256)+1),w
  3960  0A7F  1D03               	btfss	3,2
  3961  0A80  2BA0               	goto	l6640
  3962  0A81  0858               	movf	(_pgm_cfg^(0+256)+3),w
  3963  0A82  063F               	xorwf	_pktRx^(0+256),w
  3964  0A83  1D03               	skipz
  3965  0A84  2BA0               	goto	l6640
  3966                           
  3967                           ;RTX.c: 593: {
  3968                           ;RTX.c: 595: valVoltCurr.val_byte[0]=pktRx[VAL];
  3969  0A85  0844               	movf	(_pktRx^(0+256)+5),w
  3970  0A86  0020               	movlb	0	; select bank0
  3971  0A87  00E6               	movwf	??_RTXReadPkt
  3972  0A88  0866               	movf	??_RTXReadPkt,w
  3973  0A89  0021               	movlb	1	; select bank1
  3974  0A8A  00E6               	movwf	RTXReadPkt@valVoltCurr^(0+128)
  3975                           
  3976                           ;RTX.c: 596: valVoltCurr.val_byte[1]=pktRx[VAL+1];
  3977  0A8B  0022               	movlb	2	; select bank2
  3978  0A8C  0845               	movf	(_pktRx^(0+256)+6),w
  3979  0A8D  0020               	movlb	0	; select bank0
  3980  0A8E  00E6               	movwf	??_RTXReadPkt
  3981  0A8F  0866               	movf	??_RTXReadPkt,w
  3982  0A90  0021               	movlb	1	; select bank1
  3983  0A91  00E7               	movwf	(RTXReadPkt@valVoltCurr^(0+128)+1)
  3984                           
  3985                           ;RTX.c: 597: valVoltCurr.val_byte[2]=pktRx[VAL+2];
  3986  0A92  0022               	movlb	2	; select bank2
  3987  0A93  0846               	movf	(_pktRx^(0+256)+7),w
  3988  0A94  0020               	movlb	0	; select bank0
  3989  0A95  00E6               	movwf	??_RTXReadPkt
  3990  0A96  0866               	movf	??_RTXReadPkt,w
  3991  0A97  0021               	movlb	1	; select bank1
  3992  0A98  00E8               	movwf	(RTXReadPkt@valVoltCurr^(0+128)+2)
  3993                           
  3994                           ;RTX.c: 599: valBatt.val_byte[0]=pktRx[BAT];
  3995  0A99  0022               	movlb	2	; select bank2
  3996  0A9A  0847               	movf	(_pktRx^(0+256)+8),w
  3997  0A9B  0020               	movlb	0	; select bank0
  3998  0A9C  00E6               	movwf	??_RTXReadPkt
  3999  0A9D  0866               	movf	??_RTXReadPkt,w
  4000  0A9E  0021               	movlb	1	; select bank1
  4001  0A9F  00E9               	movwf	RTXReadPkt@valBatt^(0+128)
  4002                           
  4003                           ;RTX.c: 600: valBatt.val_byte[1]=pktRx[BAT+1];
  4004  0AA0  0022               	movlb	2	; select bank2
  4005  0AA1  0848               	movf	(_pktRx^(0+256)+9),w
  4006  0AA2  0020               	movlb	0	; select bank0
  4007  0AA3  00E6               	movwf	??_RTXReadPkt
  4008  0AA4  0866               	movf	??_RTXReadPkt,w
  4009  0AA5  0021               	movlb	1	; select bank1
  4010  0AA6  00EA               	movwf	(RTXReadPkt@valBatt^(0+128)+1)
  4011                           
  4012                           ;RTX.c: 601: valBatt.val_byte[2]=pktRx[BAT+2];
  4013  0AA7  0022               	movlb	2	; select bank2
  4014  0AA8  0849               	movf	(_pktRx^(0+256)+10),w
  4015  0AA9  0020               	movlb	0	; select bank0
  4016  0AAA  00E6               	movwf	??_RTXReadPkt
  4017  0AAB  0866               	movf	??_RTXReadPkt,w
  4018  0AAC  0021               	movlb	1	; select bank1
  4019  0AAD  00EB               	movwf	(RTXReadPkt@valBatt^(0+128)+2)
  4020                           
  4021                           ;RTX.c: 603: if(pktRx[TYPE_SOURCE]==SENS_CURRGEN && pgm_cfg.menu.gen_curr_sensIsProg && 
      +                          (pktRx[ID_SOURCE]==pgm_cfg.gen_curr_sens_id))
  4022  0AAE  0022               	movlb	2	; select bank2
  4023  0AAF  0342               	decf	(_pktRx^(0+256)+3),w
  4024  0AB0  1903               	btfsc	3,2
  4025  0AB1  1C57               	btfss	(_pgm_cfg^(0+256)+2),0
  4026  0AB2  2AD0               	goto	l6596
  4027  0AB3  0859               	movf	(_pgm_cfg^(0+256)+4),w
  4028  0AB4  0641               	xorwf	(_pktRx^(0+256)+2),w
  4029  0AB5  1D03               	skipz
  4030  0AB6  2AD0               	goto	l6596
  4031                           
  4032                           ;RTX.c: 604: {
  4033                           ;RTX.c: 605: gen_curr_sens=valVoltCurr.val;
  4034  0AB7  0021               	movlb	1	; select bank1
  4035  0AB8  0866               	movf	RTXReadPkt@valVoltCurr^(0+128),w
  4036  0AB9  0022               	movlb	2	; select bank2
  4037  0ABA  00AF               	movwf	_gen_curr_sens^(0+256)
  4038  0ABB  0021               	movlb	1	; select bank1
  4039  0ABC  0867               	movf	(RTXReadPkt@valVoltCurr+1)^(0+128),w
  4040  0ABD  0022               	movlb	2	; select bank2
  4041  0ABE  00B0               	movwf	(_gen_curr_sens+1)^(0+256)
  4042  0ABF  0021               	movlb	1	; select bank1
  4043  0AC0  0868               	movf	(RTXReadPkt@valVoltCurr+2)^(0+128),w
  4044  0AC1  0022               	movlb	2	; select bank2
  4045  0AC2  00B1               	movwf	(_gen_curr_sens+2)^(0+256)
  4046                           
  4047                           ;RTX.c: 606: batt_gen_curr_sens=valBatt.val;
  4048  0AC3  0021               	movlb	1	; select bank1
  4049  0AC4  0869               	movf	RTXReadPkt@valBatt^(0+128),w
  4050  0AC5  0022               	movlb	2	; select bank2
  4051  0AC6  00A3               	movwf	_batt_gen_curr_sens^(0+256)
  4052  0AC7  0021               	movlb	1	; select bank1
  4053  0AC8  086A               	movf	(RTXReadPkt@valBatt+1)^(0+128),w
  4054  0AC9  0022               	movlb	2	; select bank2
  4055  0ACA  00A4               	movwf	(_batt_gen_curr_sens+1)^(0+256)
  4056  0ACB  0021               	movlb	1	; select bank1
  4057  0ACC  086B               	movf	(RTXReadPkt@valBatt+2)^(0+128),w
  4058  0ACD  0022               	movlb	2	; select bank2
  4059  0ACE  00A5               	movwf	(_batt_gen_curr_sens+2)^(0+256)
  4060  0ACF  2B15               	goto	L3
  4061  0AD0                     l6596:	
  4062                           ;RTX.c: 612: }
  4063                           
  4064                           ;RTX.c: 611: rtx_flg.dataReceived=1;
  4065                           
  4066                           ;RTX.c: 609: dev_type=pktRx[TYPE_SOURCE];
  4067                           
  4068                           ;RTX.c: 608: dev_id=pktRx[ID_SOURCE];
  4069                           
  4070                           
  4071                           ;RTX.c: 613: else if((pktRx[TYPE_SOURCE]==SENS_CURRCON) && pgm_cfg.menu.gen_curr_sensIsP
      +                          rog && (pktRx[ID_SOURCE]==pgm_cfg.con_curr_sens_id))
  4072  0AD0  3002               	movlw	2
  4073  0AD1  0022               	movlb	2	; select bank2
  4074  0AD2  0642               	xorwf	(_pktRx^(0+256)+3),w
  4075  0AD3  1903               	btfsc	3,2
  4076  0AD4  1C57               	btfss	(_pgm_cfg^(0+256)+2),0
  4077  0AD5  2AF3               	goto	l6606
  4078  0AD6  085A               	movf	(_pgm_cfg^(0+256)+5),w
  4079  0AD7  0641               	xorwf	(_pktRx^(0+256)+2),w
  4080  0AD8  1D03               	skipz
  4081  0AD9  2AF3               	goto	l6606
  4082                           
  4083                           ;RTX.c: 614: {
  4084                           ;RTX.c: 615: con_curr_sens=valVoltCurr.val;
  4085  0ADA  0021               	movlb	1	; select bank1
  4086  0ADB  0866               	movf	RTXReadPkt@valVoltCurr^(0+128),w
  4087  0ADC  0022               	movlb	2	; select bank2
  4088  0ADD  00A9               	movwf	_con_curr_sens^(0+256)
  4089  0ADE  0021               	movlb	1	; select bank1
  4090  0ADF  0867               	movf	(RTXReadPkt@valVoltCurr+1)^(0+128),w
  4091  0AE0  0022               	movlb	2	; select bank2
  4092  0AE1  00AA               	movwf	(_con_curr_sens+1)^(0+256)
  4093  0AE2  0021               	movlb	1	; select bank1
  4094  0AE3  0868               	movf	(RTXReadPkt@valVoltCurr+2)^(0+128),w
  4095  0AE4  0022               	movlb	2	; select bank2
  4096  0AE5  00AB               	movwf	(_con_curr_sens+2)^(0+256)
  4097                           
  4098                           ;RTX.c: 616: batt_con_curr_sens=valBatt.val;
  4099  0AE6  0021               	movlb	1	; select bank1
  4100  0AE7  0869               	movf	RTXReadPkt@valBatt^(0+128),w
  4101  0AE8  0022               	movlb	2	; select bank2
  4102  0AE9  00A0               	movwf	_batt_con_curr_sens^(0+256)
  4103  0AEA  0021               	movlb	1	; select bank1
  4104  0AEB  086A               	movf	(RTXReadPkt@valBatt+1)^(0+128),w
  4105  0AEC  0022               	movlb	2	; select bank2
  4106  0AED  00A1               	movwf	(_batt_con_curr_sens+1)^(0+256)
  4107  0AEE  0021               	movlb	1	; select bank1
  4108  0AEF  086B               	movf	(RTXReadPkt@valBatt+2)^(0+128),w
  4109  0AF0  0022               	movlb	2	; select bank2
  4110  0AF1  00A2               	movwf	(_batt_con_curr_sens+2)^(0+256)
  4111  0AF2  2B15               	goto	L3
  4112  0AF3                     l6606:	
  4113                           ;RTX.c: 622: }
  4114                           
  4115                           ;RTX.c: 621: rtx_flg.dataReceived=1;
  4116                           
  4117                           ;RTX.c: 619: dev_type=pktRx[TYPE_SOURCE];
  4118                           
  4119                           ;RTX.c: 618: dev_id=pktRx[ID_SOURCE];
  4120                           
  4121                           
  4122                           ;RTX.c: 623: else if((pktRx[TYPE_SOURCE]==SENS_VOLT) && pgm_cfg.menu.volt_sensIsProg && 
      +                          (pktRx[ID_SOURCE]==pgm_cfg.volt_sens_id))
  4123  0AF3  3003               	movlw	3
  4124  0AF4  0022               	movlb	2	; select bank2
  4125  0AF5  0642               	xorwf	(_pktRx^(0+256)+3),w
  4126  0AF6  1903               	btfsc	3,2
  4127  0AF7  1D57               	btfss	(_pgm_cfg^(0+256)+2),2
  4128  0AF8  2B23               	goto	l6616
  4129  0AF9  085B               	movf	(_pgm_cfg^(0+256)+6),w
  4130  0AFA  0641               	xorwf	(_pktRx^(0+256)+2),w
  4131  0AFB  1D03               	skipz
  4132  0AFC  2B23               	goto	l6616
  4133                           
  4134                           ;RTX.c: 624: {
  4135                           ;RTX.c: 625: volt_sens=valVoltCurr.val;
  4136  0AFD  0021               	movlb	1	; select bank1
  4137  0AFE  0866               	movf	RTXReadPkt@valVoltCurr^(0+128),w
  4138  0AFF  0022               	movlb	2	; select bank2
  4139  0B00  00B5               	movwf	_volt_sens^(0+256)
  4140  0B01  0021               	movlb	1	; select bank1
  4141  0B02  0867               	movf	(RTXReadPkt@valVoltCurr+1)^(0+128),w
  4142  0B03  0022               	movlb	2	; select bank2
  4143  0B04  00B6               	movwf	(_volt_sens+1)^(0+256)
  4144  0B05  0021               	movlb	1	; select bank1
  4145  0B06  0868               	movf	(RTXReadPkt@valVoltCurr+2)^(0+128),w
  4146  0B07  0022               	movlb	2	; select bank2
  4147  0B08  00B7               	movwf	(_volt_sens+2)^(0+256)
  4148                           
  4149                           ;RTX.c: 626: batt_volt_sens=valBatt.val;
  4150  0B09  0021               	movlb	1	; select bank1
  4151  0B0A  0869               	movf	RTXReadPkt@valBatt^(0+128),w
  4152  0B0B  0022               	movlb	2	; select bank2
  4153  0B0C  00A6               	movwf	_batt_volt_sens^(0+256)
  4154  0B0D  0021               	movlb	1	; select bank1
  4155  0B0E  086A               	movf	(RTXReadPkt@valBatt+1)^(0+128),w
  4156  0B0F  0022               	movlb	2	; select bank2
  4157  0B10  00A7               	movwf	(_batt_volt_sens+1)^(0+256)
  4158  0B11  0021               	movlb	1	; select bank1
  4159  0B12  086B               	movf	(RTXReadPkt@valBatt+2)^(0+128),w
  4160  0B13  0022               	movlb	2	; select bank2
  4161  0B14  00A8               	movwf	(_batt_volt_sens+2)^(0+256)
  4162  0B15                     L3:	
  4163                           
  4164                           ;RTX.c: 628: dev_id=pktRx[ID_SOURCE];
  4165  0B15  0841               	movf	(_pktRx^(0+256)+2),w
  4166  0B16  0020               	movlb	0	; select bank0
  4167  0B17  00E6               	movwf	??_RTXReadPkt
  4168  0B18  0866               	movf	??_RTXReadPkt,w
  4169  0B19  0021               	movlb	1	; select bank1
  4170  0B1A  00E4               	movwf	RTXReadPkt@dev_id^(0+128)
  4171                           
  4172                           ;RTX.c: 629: dev_type=pktRx[TYPE_SOURCE];
  4173  0B1B  0022               	movlb	2	; select bank2
  4174  0B1C  0842               	movf	(_pktRx^(0+256)+3),w
  4175  0B1D  0020               	movlb	0	; select bank0
  4176  0B1E  00E6               	movwf	??_RTXReadPkt
  4177  0B1F  0866               	movf	??_RTXReadPkt,w
  4178  0B20  0021               	movlb	1	; select bank1
  4179  0B21  00E5               	movwf	RTXReadPkt@dev_type^(0+128)
  4180                           
  4181                           ;RTX.c: 631: rtx_flg.dataReceived=1;
  4182  0B22  14EC               	bsf	_rtx_flg^(0+128),1
  4183  0B23                     l6616:	
  4184                           
  4185                           ;RTX.c: 632: }
  4186                           ;RTX.c: 635: if(rtx_flg.dataReceived)
  4187  0B23  0021               	movlb	1	; select bank1
  4188  0B24  1CEC               	btfss	_rtx_flg^(0+128),1
  4189  0B25  2BA0               	goto	l6640
  4190                           
  4191                           ;RTX.c: 636: {
  4192                           ;RTX.c: 638: rtx_flg.dataReceived=0;
  4193  0B26  10EC               	bcf	_rtx_flg^(0+128),1
  4194                           
  4195                           ;RTX.c: 640: volt4Calc=230;
  4196  0B27  3000               	movlw	0
  4197  0B28  00E1               	movwf	RTXReadPkt@volt4Calc^(0+128)
  4198  0B29  3066               	movlw	102
  4199  0B2A  00E2               	movwf	(RTXReadPkt@volt4Calc+1)^(0+128)
  4200  0B2B  3043               	movlw	67
  4201  0B2C  00E3               	movwf	(RTXReadPkt@volt4Calc+2)^(0+128)
  4202                           
  4203                           ;RTX.c: 641: if(pgm_cfg.menu.volt_sensIsProg)
  4204  0B2D  0022               	movlb	2	; select bank2
  4205  0B2E  1D57               	btfss	(_pgm_cfg^(0+256)+2),2
  4206  0B2F  2B3B               	goto	l6626
  4207                           
  4208                           ;RTX.c: 642: volt4Calc=volt_sens;
  4209  0B30  0835               	movf	_volt_sens^(0+256),w
  4210  0B31  0021               	movlb	1	; select bank1
  4211  0B32  00E1               	movwf	RTXReadPkt@volt4Calc^(0+128)
  4212  0B33  0022               	movlb	2	; select bank2
  4213  0B34  0836               	movf	(_volt_sens+1)^(0+256),w
  4214  0B35  0021               	movlb	1	; select bank1
  4215  0B36  00E2               	movwf	(RTXReadPkt@volt4Calc+1)^(0+128)
  4216  0B37  0022               	movlb	2	; select bank2
  4217  0B38  0837               	movf	(_volt_sens+2)^(0+256),w
  4218  0B39  0021               	movlb	1	; select bank1
  4219  0B3A  00E3               	movwf	(RTXReadPkt@volt4Calc+2)^(0+128)
  4220  0B3B                     l6626:	
  4221                           
  4222                           ;RTX.c: 644: if(pgm_cfg.menu.gen_curr_sensIsProg)
  4223  0B3B  0022               	movlb	2	; select bank2
  4224  0B3C  1C57               	btfss	(_pgm_cfg^(0+256)+2),0
  4225  0B3D  2B64               	goto	l6630
  4226                           
  4227                           ;RTX.c: 645: gen_power=volt4Calc*gen_curr_sens;
  4228  0B3E  082F               	movf	_gen_curr_sens^(0+256),w
  4229  0B3F  0020               	movlb	0	; select bank0
  4230  0B40  00A0               	movwf	___ftmul@f1
  4231  0B41  0022               	movlb	2	; select bank2
  4232  0B42  0830               	movf	(_gen_curr_sens+1)^(0+256),w
  4233  0B43  0020               	movlb	0	; select bank0
  4234  0B44  00A1               	movwf	___ftmul@f1+1
  4235  0B45  0022               	movlb	2	; select bank2
  4236  0B46  0831               	movf	(_gen_curr_sens+2)^(0+256),w
  4237  0B47  0020               	movlb	0	; select bank0
  4238  0B48  00A2               	movwf	___ftmul@f1+2
  4239  0B49  0021               	movlb	1	; select bank1
  4240  0B4A  0861               	movf	RTXReadPkt@volt4Calc^(0+128),w
  4241  0B4B  0020               	movlb	0	; select bank0
  4242  0B4C  00A3               	movwf	___ftmul@f2
  4243  0B4D  0021               	movlb	1	; select bank1
  4244  0B4E  0862               	movf	(RTXReadPkt@volt4Calc+1)^(0+128),w
  4245  0B4F  0020               	movlb	0	; select bank0
  4246  0B50  00A4               	movwf	___ftmul@f2+1
  4247  0B51  0021               	movlb	1	; select bank1
  4248  0B52  0863               	movf	(RTXReadPkt@volt4Calc+2)^(0+128),w
  4249  0B53  0020               	movlb	0	; select bank0
  4250  0B54  00A5               	movwf	___ftmul@f2+2
  4251  0B55  3197  274C  3189   	fcall	___ftmul
  4252  0B58  0020               	movlb	0	; select bank0
  4253  0B59  0820               	movf	?___ftmul,w
  4254  0B5A  0022               	movlb	2	; select bank2
  4255  0B5B  00B2               	movwf	_gen_power^(0+256)
  4256  0B5C  0020               	movlb	0	; select bank0
  4257  0B5D  0821               	movf	?___ftmul+1,w
  4258  0B5E  0022               	movlb	2	; select bank2
  4259  0B5F  00B3               	movwf	(_gen_power+1)^(0+256)
  4260  0B60  0020               	movlb	0	; select bank0
  4261  0B61  0822               	movf	?___ftmul+2,w
  4262  0B62  0022               	movlb	2	; select bank2
  4263  0B63  00B4               	movwf	(_gen_power+2)^(0+256)
  4264  0B64                     l6630:	
  4265                           
  4266                           ;RTX.c: 646: if(pgm_cfg.menu.con_curr_sensIsProg)
  4267  0B64  1CD7               	btfss	(_pgm_cfg^(0+256)+2),1
  4268  0B65  2B8C               	goto	l6634
  4269                           
  4270                           ;RTX.c: 647: con_power=volt4Calc*con_curr_sens;
  4271  0B66  0829               	movf	_con_curr_sens^(0+256),w
  4272  0B67  0020               	movlb	0	; select bank0
  4273  0B68  00A0               	movwf	___ftmul@f1
  4274  0B69  0022               	movlb	2	; select bank2
  4275  0B6A  082A               	movf	(_con_curr_sens+1)^(0+256),w
  4276  0B6B  0020               	movlb	0	; select bank0
  4277  0B6C  00A1               	movwf	___ftmul@f1+1
  4278  0B6D  0022               	movlb	2	; select bank2
  4279  0B6E  082B               	movf	(_con_curr_sens+2)^(0+256),w
  4280  0B6F  0020               	movlb	0	; select bank0
  4281  0B70  00A2               	movwf	___ftmul@f1+2
  4282  0B71  0021               	movlb	1	; select bank1
  4283  0B72  0861               	movf	RTXReadPkt@volt4Calc^(0+128),w
  4284  0B73  0020               	movlb	0	; select bank0
  4285  0B74  00A3               	movwf	___ftmul@f2
  4286  0B75  0021               	movlb	1	; select bank1
  4287  0B76  0862               	movf	(RTXReadPkt@volt4Calc+1)^(0+128),w
  4288  0B77  0020               	movlb	0	; select bank0
  4289  0B78  00A4               	movwf	___ftmul@f2+1
  4290  0B79  0021               	movlb	1	; select bank1
  4291  0B7A  0863               	movf	(RTXReadPkt@volt4Calc+2)^(0+128),w
  4292  0B7B  0020               	movlb	0	; select bank0
  4293  0B7C  00A5               	movwf	___ftmul@f2+2
  4294  0B7D  3197  274C  3189   	fcall	___ftmul
  4295  0B80  0020               	movlb	0	; select bank0
  4296  0B81  0820               	movf	?___ftmul,w
  4297  0B82  0022               	movlb	2	; select bank2
  4298  0B83  00AC               	movwf	_con_power^(0+256)
  4299  0B84  0020               	movlb	0	; select bank0
  4300  0B85  0821               	movf	?___ftmul+1,w
  4301  0B86  0022               	movlb	2	; select bank2
  4302  0B87  00AD               	movwf	(_con_power+1)^(0+256)
  4303  0B88  0020               	movlb	0	; select bank0
  4304  0B89  0822               	movf	?___ftmul+2,w
  4305  0B8A  0022               	movlb	2	; select bank2
  4306  0B8B  00AE               	movwf	(_con_power+2)^(0+256)
  4307  0B8C                     l6634:	
  4308                           
  4309                           ;RTX.c: 649: RTXSendRData(dev_id,dev_type);
  4310  0B8C  0021               	movlb	1	; select bank1
  4311  0B8D  0865               	movf	RTXReadPkt@dev_type^(0+128),w
  4312  0B8E  0020               	movlb	0	; select bank0
  4313  0B8F  00E6               	movwf	??_RTXReadPkt
  4314  0B90  0866               	movf	??_RTXReadPkt,w
  4315  0B91  00A7               	movwf	RTXSendRData@type
  4316  0B92  0021               	movlb	1	; select bank1
  4317  0B93  0864               	movf	RTXReadPkt@dev_id^(0+128),w
  4318  0B94  3190  2010  3189   	fcall	_RTXSendRData
  4319                           
  4320                           ;RTX.c: 651: if(!(tmrVis))
  4321  0B97  0022               	movlb	2	; select bank2
  4322  0B98  083C               	movf	_tmrVis^(0+256),w
  4323  0B99  043D               	iorwf	(_tmrVis+1)^(0+256),w
  4324  0B9A  1D03               	btfss	3,2
  4325  0B9B  2BA0               	goto	l6640
  4326  0B9C                     l6638:	
  4327                           
  4328                           ;RTX.c: 652: RTXUpdateDisplay(UPD_DPY_POWER);
  4329  0B9C  3000               	movlw	0
  4330  0B9D  3180  204B  3189   	fcall	_RTXUpdateDisplay
  4331  0BA0                     l6640:	
  4332                           
  4333                           ;RTX.c: 653: }
  4334                           ;RTX.c: 654: }
  4335                           ;RTX.c: 655: }
  4336                           ;RTX.c: 657: CC1Read(0x3B,(&(numRxByte)),1);
  4337  0BA0  30EF               	movlw	low _numRxByte
  4338  0BA1  00F9               	movwf	CC1Read@dst
  4339  0BA2  3000               	movlw	high _numRxByte
  4340  0BA3  00FA               	movwf	CC1Read@dst+1
  4341  0BA4  01FB               	clrf	CC1Read@len
  4342  0BA5  0AFB               	incf	CC1Read@len,f
  4343  0BA6  303B               	movlw	59
  4344  0BA7  319F  2725  3189   	fcall	_CC1Read
  4345                           
  4346                           ;RTX.c: 659: RTXSup();
  4347  0BAA  3190  208D  3189   	fcall	_RTXSup
  4348  0BAD  29FC               	goto	l6644
  4349  0BAE                     __end_of_RTXReadPkt:	
  4350                           
  4351                           	psect	text10
  4352  108D                     __ptext10:	
  4353 ;; *************** function _RTXSup *****************
  4354 ;; Defined at:
  4355 ;;		line 446 in file "RTX.c"
  4356 ;; Parameters:    Size  Location     Type
  4357 ;;		None
  4358 ;; Auto vars:     Size  Location     Type
  4359 ;;		None
  4360 ;; Return value:  Size  Location     Type
  4361 ;;		None               void
  4362 ;; Registers used:
  4363 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4364 ;; Tracked objects:
  4365 ;;		On entry : 0/0
  4366 ;;		On exit  : 0/0
  4367 ;;		Unchanged: 0/0
  4368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4372 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4373 ;;Total ram usage:        0 bytes
  4374 ;; Hardware stack levels used:    1
  4375 ;; Hardware stack levels required when called:    4
  4376 ;; This function calls:
  4377 ;;		_CC1Read
  4378 ;;		_CC1Strobe
  4379 ;; This function is called by:
  4380 ;;		_RTXTick
  4381 ;;		_RTXReadPkt
  4382 ;; This function uses a non-reentrant model
  4383 ;;
  4384                           
  4385                           
  4386                           ;psect for function _RTXSup
  4387  108D                     _RTXSup:	
  4388                           
  4389                           ;RTX.c: 449: CC1Read(0x35,(&(sta)),1);
  4390                           
  4391                           ;incstack = 0
  4392                           ; Regs used in _RTXSup: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4393  108D  307C               	movlw	low _sta
  4394  108E  00F9               	movwf	CC1Read@dst
  4395  108F  3000               	movlw	high _sta
  4396  1090  00FA               	movwf	CC1Read@dst+1
  4397  1091  01FB               	clrf	CC1Read@len
  4398  1092  0AFB               	incf	CC1Read@len,f
  4399  1093  3035               	movlw	53
  4400  1094  319F  2725  3190   	fcall	_CC1Read
  4401                           
  4402                           ;RTX.c: 452: switch(sta)
  4403  1097  28AC               	goto	l6434
  4404  1098                     l6426:	
  4405                           ;RTX.c: 453: {
  4406                           ;RTX.c: 454: case IDLE:
  4407                           
  4408                           
  4409                           ;RTX.c: 455: CC1Strobe(SRX);
  4410  1098  3034               	movlw	52
  4411  1099  319D  259D         	fcall	_CC1Strobe
  4412                           
  4413                           ;RTX.c: 456: break;
  4414  109B  0008               	return
  4415  109C                     l6428:	
  4416                           ;RTX.c: 457: case RXFIFO_OVERFLOW:
  4417                           
  4418                           
  4419                           ;RTX.c: 458: CC1Strobe(SFRX);
  4420  109C  303A               	movlw	58
  4421  109D  319D  259D  3190   	fcall	_CC1Strobe
  4422                           
  4423                           ;RTX.c: 459: CC1Strobe(SRX);
  4424  10A0  3034               	movlw	52
  4425  10A1  319D  259D         	fcall	_CC1Strobe
  4426                           
  4427                           ;RTX.c: 460: break;
  4428  10A3  0008               	return
  4429  10A4                     l6430:	
  4430                           ;RTX.c: 461: case TXFIFO_UNDERFLOW:
  4431                           
  4432                           
  4433                           ;RTX.c: 462: CC1Strobe(SFTX);
  4434  10A4  303B               	movlw	59
  4435  10A5  319D  259D  3190   	fcall	_CC1Strobe
  4436                           
  4437                           ;RTX.c: 463: CC1Strobe(SRX);
  4438  10A8  3034               	movlw	52
  4439  10A9  319D  259D         	fcall	_CC1Strobe
  4440                           
  4441                           ;RTX.c: 465: }
  4442                           
  4443                           ;RTX.c: 464: break;
  4444  10AB  0008               	return
  4445  10AC                     l6434:	
  4446  10AC  087C               	movf	_sta,w
  4447                           
  4448                           ; Switch size 1, requested type "space"
  4449                           ; Number of cases is 3, Range of values is 1 to 22
  4450                           ; switch strategies available:
  4451                           ; Name         Instructions Cycles
  4452                           ; simple_byte           10     6 (average)
  4453                           ; direct_byte           53     9 (fixed)
  4454                           ; jumptable            263     9 (fixed)
  4455                           ;	Chosen strategy is simple_byte
  4456  10AD  3A01               	xorlw	1	; case 1
  4457  10AE  1903               	skipnz
  4458  10AF  2898               	goto	l6426
  4459  10B0  3A10               	xorlw	16	; case 17
  4460  10B1  1903               	skipnz
  4461  10B2  289C               	goto	l6428
  4462  10B3  3A07               	xorlw	7	; case 22
  4463  10B4  1903               	skipnz
  4464  10B5  28A4               	goto	l6430
  4465  10B6  28B7               	goto	l527
  4466  10B7                     l527:	
  4467  10B7  0008               	return
  4468  10B8                     __end_of_RTXSup:	
  4469                           
  4470                           	psect	text11
  4471  1039                     __ptext11:	
  4472 ;; *************** function _RTXSendRPgm *****************
  4473 ;; Defined at:
  4474 ;;		line 682 in file "RTX.c"
  4475 ;; Parameters:    Size  Location     Type
  4476 ;;  id              1    wreg     unsigned char 
  4477 ;;  type            1    7[BANK0 ] enum E2174
  4478 ;; Auto vars:     Size  Location     Type
  4479 ;;  id              1    9[BANK0 ] unsigned char 
  4480 ;; Return value:  Size  Location     Type
  4481 ;;		None               void
  4482 ;; Registers used:
  4483 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4484 ;; Tracked objects:
  4485 ;;		On entry : 0/0
  4486 ;;		On exit  : 0/0
  4487 ;;		Unchanged: 0/0
  4488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4489 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4490 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4491 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4492 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4493 ;;Total ram usage:        3 bytes
  4494 ;; Hardware stack levels used:    1
  4495 ;; Hardware stack levels required when called:    5
  4496 ;; This function calls:
  4497 ;;		_RTXSndPkt
  4498 ;; This function is called by:
  4499 ;;		_RTXReadPkt
  4500 ;; This function uses a non-reentrant model
  4501 ;;
  4502                           
  4503                           
  4504                           ;psect for function _RTXSendRPgm
  4505  1039                     _RTXSendRPgm:	
  4506                           
  4507                           ;incstack = 0
  4508                           ; Regs used in _RTXSendRPgm: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4509                           ;RTXSendRPgm@id stored from wreg
  4510  1039  0020               	movlb	0	; select bank0
  4511  103A  00A9               	movwf	RTXSendRPgm@id
  4512                           
  4513                           ;RTX.c: 685: pktTx[ID_DEST]=id;
  4514  103B  0829               	movf	RTXSendRPgm@id,w
  4515  103C  00A8               	movwf	??_RTXSendRPgm
  4516  103D  0828               	movf	??_RTXSendRPgm,w
  4517  103E  0022               	movlb	2	; select bank2
  4518  103F  00CA               	movwf	_pktTx^(0+256)
  4519                           
  4520                           ;RTX.c: 686: pktTx[TYPE_DEST]=type;
  4521  1040  0020               	movlb	0	; select bank0
  4522  1041  0827               	movf	RTXSendRPgm@type,w
  4523  1042  00A8               	movwf	??_RTXSendRPgm
  4524  1043  0828               	movf	??_RTXSendRPgm,w
  4525  1044  0022               	movlb	2	; select bank2
  4526  1045  00CB               	movwf	(_pktTx^(0+256)+1)
  4527                           
  4528                           ;RTX.c: 687: pktTx[ID_SOURCE]=pgm_cfg.base_id;
  4529  1046  0858               	movf	(_pgm_cfg^(0+256)+3),w
  4530  1047  0020               	movlb	0	; select bank0
  4531  1048  00A8               	movwf	??_RTXSendRPgm
  4532  1049  0828               	movf	??_RTXSendRPgm,w
  4533  104A  0022               	movlb	2	; select bank2
  4534  104B  00CC               	movwf	(_pktTx^(0+256)+2)
  4535                           
  4536                           ;RTX.c: 688: pktTx[TYPE_SOURCE]=BASE;
  4537  104C  01CD               	clrf	(_pktTx^(0+256)+3)
  4538                           
  4539                           ;RTX.c: 689: pktTx[OP]=rPGM;
  4540  104D  3081               	movlw	129
  4541  104E  0020               	movlb	0	; select bank0
  4542  104F  00A8               	movwf	??_RTXSendRPgm
  4543  1050  0828               	movf	??_RTXSendRPgm,w
  4544  1051  0022               	movlb	2	; select bank2
  4545  1052  00CE               	movwf	(_pktTx^(0+256)+4)
  4546                           
  4547                           ;RTX.c: 690: pktTx[VAL]=0x00;
  4548  1053  01CF               	clrf	(_pktTx^(0+256)+5)
  4549                           
  4550                           ;RTX.c: 691: pktTx[VAL+1]=0x00;
  4551  1054  01D0               	clrf	(_pktTx^(0+256)+6)
  4552                           
  4553                           ;RTX.c: 692: pktTx[VAL+2]=0x00;
  4554  1055  01D1               	clrf	(_pktTx^(0+256)+7)
  4555                           
  4556                           ;RTX.c: 693: pktTx[BAT]=0x00;
  4557  1056  01D2               	clrf	(_pktTx^(0+256)+8)
  4558                           
  4559                           ;RTX.c: 694: pktTx[BAT+1]=0x00;
  4560  1057  01D3               	clrf	(_pktTx^(0+256)+9)
  4561                           
  4562                           ;RTX.c: 695: pktTx[BAT+2]=0x00;
  4563  1058  01D4               	clrf	(_pktTx^(0+256)+10)
  4564                           
  4565                           ;RTX.c: 698: RTXSndPkt(pktTx,0x0B);
  4566  1059  300B               	movlw	11
  4567  105A  0020               	movlb	0	; select bank0
  4568  105B  00A8               	movwf	??_RTXSendRPgm
  4569  105C  0828               	movf	??_RTXSendRPgm,w
  4570  105D  00A3               	movwf	RTXSndPkt@len
  4571  105E  304A               	movlw	(low (_pktTx| (0+256)))& (0+255)
  4572  105F  3193  2360         	fcall	_RTXSndPkt
  4573  1061  0008               	return
  4574  1062                     __end_of_RTXSendRPgm:	
  4575                           
  4576                           	psect	text12
  4577  1010                     __ptext12:	
  4578 ;; *************** function _RTXSendRData *****************
  4579 ;; Defined at:
  4580 ;;		line 663 in file "RTX.c"
  4581 ;; Parameters:    Size  Location     Type
  4582 ;;  id              1    wreg     unsigned char 
  4583 ;;  type            1    7[BANK0 ] enum E2174
  4584 ;; Auto vars:     Size  Location     Type
  4585 ;;  id              1    9[BANK0 ] unsigned char 
  4586 ;; Return value:  Size  Location     Type
  4587 ;;		None               void
  4588 ;; Registers used:
  4589 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4590 ;; Tracked objects:
  4591 ;;		On entry : 0/0
  4592 ;;		On exit  : 0/0
  4593 ;;		Unchanged: 0/0
  4594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4595 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4596 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4597 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4598 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4599 ;;Total ram usage:        3 bytes
  4600 ;; Hardware stack levels used:    1
  4601 ;; Hardware stack levels required when called:    5
  4602 ;; This function calls:
  4603 ;;		_RTXSndPkt
  4604 ;; This function is called by:
  4605 ;;		_RTXReadPkt
  4606 ;; This function uses a non-reentrant model
  4607 ;;
  4608                           
  4609                           
  4610                           ;psect for function _RTXSendRData
  4611  1010                     _RTXSendRData:	
  4612                           
  4613                           ;incstack = 0
  4614                           ; Regs used in _RTXSendRData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4615                           ;RTXSendRData@id stored from wreg
  4616  1010  0020               	movlb	0	; select bank0
  4617  1011  00A9               	movwf	RTXSendRData@id
  4618                           
  4619                           ;RTX.c: 666: pktTx[ID_DEST]=id;
  4620  1012  0829               	movf	RTXSendRData@id,w
  4621  1013  00A8               	movwf	??_RTXSendRData
  4622  1014  0828               	movf	??_RTXSendRData,w
  4623  1015  0022               	movlb	2	; select bank2
  4624  1016  00CA               	movwf	_pktTx^(0+256)
  4625                           
  4626                           ;RTX.c: 667: pktTx[TYPE_DEST]=type;
  4627  1017  0020               	movlb	0	; select bank0
  4628  1018  0827               	movf	RTXSendRData@type,w
  4629  1019  00A8               	movwf	??_RTXSendRData
  4630  101A  0828               	movf	??_RTXSendRData,w
  4631  101B  0022               	movlb	2	; select bank2
  4632  101C  00CB               	movwf	(_pktTx^(0+256)+1)
  4633                           
  4634                           ;RTX.c: 668: pktTx[ID_SOURCE]=pgm_cfg.base_id;
  4635  101D  0858               	movf	(_pgm_cfg^(0+256)+3),w
  4636  101E  0020               	movlb	0	; select bank0
  4637  101F  00A8               	movwf	??_RTXSendRData
  4638  1020  0828               	movf	??_RTXSendRData,w
  4639  1021  0022               	movlb	2	; select bank2
  4640  1022  00CC               	movwf	(_pktTx^(0+256)+2)
  4641                           
  4642                           ;RTX.c: 669: pktTx[TYPE_SOURCE]=BASE;
  4643  1023  01CD               	clrf	(_pktTx^(0+256)+3)
  4644                           
  4645                           ;RTX.c: 670: pktTx[OP]=rDAT;
  4646  1024  3080               	movlw	128
  4647  1025  0020               	movlb	0	; select bank0
  4648  1026  00A8               	movwf	??_RTXSendRData
  4649  1027  0828               	movf	??_RTXSendRData,w
  4650  1028  0022               	movlb	2	; select bank2
  4651  1029  00CE               	movwf	(_pktTx^(0+256)+4)
  4652                           
  4653                           ;RTX.c: 671: pktTx[VAL]=0x00;
  4654  102A  01CF               	clrf	(_pktTx^(0+256)+5)
  4655                           
  4656                           ;RTX.c: 672: pktTx[VAL+1]=0x00;
  4657  102B  01D0               	clrf	(_pktTx^(0+256)+6)
  4658                           
  4659                           ;RTX.c: 673: pktTx[VAL+2]=0x00;
  4660  102C  01D1               	clrf	(_pktTx^(0+256)+7)
  4661                           
  4662                           ;RTX.c: 674: pktTx[BAT]=0x00;
  4663  102D  01D2               	clrf	(_pktTx^(0+256)+8)
  4664                           
  4665                           ;RTX.c: 675: pktTx[BAT+1]=0x00;
  4666  102E  01D3               	clrf	(_pktTx^(0+256)+9)
  4667                           
  4668                           ;RTX.c: 676: pktTx[BAT+2]=0x00;
  4669  102F  01D4               	clrf	(_pktTx^(0+256)+10)
  4670                           
  4671                           ;RTX.c: 679: RTXSndPkt(pktTx,0x0B);
  4672  1030  300B               	movlw	11
  4673  1031  0020               	movlb	0	; select bank0
  4674  1032  00A8               	movwf	??_RTXSendRData
  4675  1033  0828               	movf	??_RTXSendRData,w
  4676  1034  00A3               	movwf	RTXSndPkt@len
  4677  1035  304A               	movlw	(low (_pktTx| (0+256)))& (0+255)
  4678  1036  3193  2360         	fcall	_RTXSndPkt
  4679  1038  0008               	return
  4680  1039                     __end_of_RTXSendRData:	
  4681                           
  4682                           	psect	text13
  4683  1360                     __ptext13:	
  4684 ;; *************** function _RTXSndPkt *****************
  4685 ;; Defined at:
  4686 ;;		line 484 in file "RTX.c"
  4687 ;; Parameters:    Size  Location     Type
  4688 ;;  src             1    wreg     PTR unsigned char 
  4689 ;;		 -> pktTx(11), 
  4690 ;;  len             1    3[BANK0 ] unsigned char 
  4691 ;; Auto vars:     Size  Location     Type
  4692 ;;  src             1    6[BANK0 ] PTR unsigned char 
  4693 ;;		 -> pktTx(11), 
  4694 ;; Return value:  Size  Location     Type
  4695 ;;		None               void
  4696 ;; Registers used:
  4697 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4698 ;; Tracked objects:
  4699 ;;		On entry : 0/0
  4700 ;;		On exit  : 0/0
  4701 ;;		Unchanged: 0/0
  4702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4703 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4704 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4705 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4706 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4707 ;;Total ram usage:        4 bytes
  4708 ;; Hardware stack levels used:    1
  4709 ;; Hardware stack levels required when called:    4
  4710 ;; This function calls:
  4711 ;;		_CC1Read
  4712 ;;		_CC1Strobe
  4713 ;;		_CC1Write
  4714 ;; This function is called by:
  4715 ;;		_RTXSendRData
  4716 ;;		_RTXSendRPgm
  4717 ;; This function uses a non-reentrant model
  4718 ;;
  4719                           
  4720                           
  4721                           ;psect for function _RTXSndPkt
  4722  1360                     _RTXSndPkt:	
  4723                           
  4724                           ;incstack = 0
  4725                           ; Regs used in _RTXSndPkt: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4726                           ;RTXSndPkt@src stored from wreg
  4727  1360  0020               	movlb	0	; select bank0
  4728  1361  00A6               	movwf	RTXSndPkt@src
  4729  1362                     l537:	
  4730                           ;RTX.c: 487: do
  4731                           
  4732  1362  0064               	clrwdt	;# 
  4733                           
  4734                           ;RTX.c: 490: CC1Read(0x35,(&(sta)),1);
  4735  1363  307C               	movlw	low _sta
  4736  1364  00F9               	movwf	CC1Read@dst
  4737  1365  3000               	movlw	high _sta
  4738  1366  00FA               	movwf	CC1Read@dst+1
  4739  1367  01FB               	clrf	CC1Read@len
  4740  1368  0AFB               	incf	CC1Read@len,f
  4741  1369  3035               	movlw	53
  4742  136A  319F  2725  3193   	fcall	_CC1Read
  4743                           
  4744                           ;RTX.c: 491: }
  4745                           ;RTX.c: 492: while(!(((sta&0b00011111)==0x0D) || ((sta&0b00011111)==0x01)));
  4746  136D  301F               	movlw	31
  4747  136E  057C               	andwf	_sta,w
  4748  136F  0020               	movlb	0	; select bank0
  4749  1370  00A4               	movwf	??_RTXSndPkt
  4750  1371  300D               	movlw	13
  4751  1372  0624               	xorwf	??_RTXSndPkt,w
  4752  1373  1903               	btfsc	3,2
  4753  1374  2B7B               	goto	l5714
  4754  1375  301F               	movlw	31
  4755  1376  057C               	andwf	_sta,w
  4756  1377  00A4               	movwf	??_RTXSndPkt
  4757  1378  0324               	decf	??_RTXSndPkt,w
  4758  1379  1D03               	btfss	3,2
  4759  137A  2B62               	goto	l537
  4760  137B                     l5714:	
  4761                           
  4762                           ;RTX.c: 494: CC1Strobe(SIDLE);
  4763  137B  3036               	movlw	54
  4764  137C  319D  259D  3193   	fcall	_CC1Strobe
  4765                           
  4766                           ;RTX.c: 495: CC1Read(0x3B,(&(numRxByte)),1);
  4767  137F  30EF               	movlw	low _numRxByte
  4768  1380  00F9               	movwf	CC1Read@dst
  4769  1381  3000               	movlw	high _numRxByte
  4770  1382  00FA               	movwf	CC1Read@dst+1
  4771  1383  01FB               	clrf	CC1Read@len
  4772  1384  0AFB               	incf	CC1Read@len,f
  4773  1385  303B               	movlw	59
  4774  1386  319F  2725  3193   	fcall	_CC1Read
  4775                           
  4776                           ;RTX.c: 496: CC1Read(0x3A,(&(numTxByte)),1);
  4777  1389  306F               	movlw	low _numTxByte
  4778  138A  00F9               	movwf	CC1Read@dst
  4779  138B  3000               	movlw	high _numTxByte
  4780  138C  00FA               	movwf	CC1Read@dst+1
  4781  138D  01FB               	clrf	CC1Read@len
  4782  138E  0AFB               	incf	CC1Read@len,f
  4783  138F  303A               	movlw	58
  4784  1390  319F  2725  3193   	fcall	_CC1Read
  4785                           
  4786                           ;RTX.c: 498: CC1Strobe(SFTX);
  4787  1393  303B               	movlw	59
  4788  1394  319D  259D  3193   	fcall	_CC1Strobe
  4789                           
  4790                           ;RTX.c: 499: CC1Read(0x3A,(&(numTxByte)),1);
  4791  1397  306F               	movlw	low _numTxByte
  4792  1398  00F9               	movwf	CC1Read@dst
  4793  1399  3000               	movlw	high _numTxByte
  4794  139A  00FA               	movwf	CC1Read@dst+1
  4795  139B  01FB               	clrf	CC1Read@len
  4796  139C  0AFB               	incf	CC1Read@len,f
  4797  139D  303A               	movlw	58
  4798  139E  319F  2725  3193   	fcall	_CC1Read
  4799                           
  4800                           ;RTX.c: 501: CC1Write(0x3F,src,len);
  4801  13A1  0020               	movlb	0	; select bank0
  4802  13A2  0826               	movf	RTXSndPkt@src,w
  4803  13A3  00A4               	movwf	??_RTXSndPkt
  4804  13A4  0824               	movf	??_RTXSndPkt,w
  4805  13A5  00F7               	movwf	CC1Write@src
  4806  13A6  0823               	movf	RTXSndPkt@len,w
  4807  13A7  00A5               	movwf	??_RTXSndPkt+1
  4808  13A8  0825               	movf	??_RTXSndPkt+1,w
  4809  13A9  00F8               	movwf	CC1Write@len
  4810  13AA  303F               	movlw	63
  4811  13AB  3187  27DF  3193   	fcall	_CC1Write
  4812                           
  4813                           ;RTX.c: 503: CC1Strobe(STX);
  4814  13AE  3035               	movlw	53
  4815  13AF  319D  259D         	fcall	_CC1Strobe
  4816  13B1  0008               	return
  4817  13B2                     __end_of_RTXSndPkt:	
  4818                           
  4819                           	psect	text14
  4820  1D27                     __ptext14:	
  4821 ;; *************** function _RTXRcvPkt *****************
  4822 ;; Defined at:
  4823 ;;		line 506 in file "RTX.c"
  4824 ;; Parameters:    Size  Location     Type
  4825 ;;  dst             1    wreg     PTR unsigned char 
  4826 ;;		 -> pktRx(11), 
  4827 ;;  len             1    3[BANK0 ] unsigned char 
  4828 ;; Auto vars:     Size  Location     Type
  4829 ;;  dst             1    5[BANK0 ] PTR unsigned char 
  4830 ;;		 -> pktRx(11), 
  4831 ;; Return value:  Size  Location     Type
  4832 ;;		None               void
  4833 ;; Registers used:
  4834 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4835 ;; Tracked objects:
  4836 ;;		On entry : 0/0
  4837 ;;		On exit  : 0/0
  4838 ;;		Unchanged: 0/0
  4839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4840 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4841 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4842 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4843 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4844 ;;Total ram usage:        3 bytes
  4845 ;; Hardware stack levels used:    1
  4846 ;; Hardware stack levels required when called:    4
  4847 ;; This function calls:
  4848 ;;		_CC1Read
  4849 ;; This function is called by:
  4850 ;;		_RTXReadPkt
  4851 ;; This function uses a non-reentrant model
  4852 ;;
  4853                           
  4854                           
  4855                           ;psect for function _RTXRcvPkt
  4856  1D27                     _RTXRcvPkt:	
  4857                           
  4858                           ;incstack = 0
  4859                           ; Regs used in _RTXRcvPkt: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4860                           ;RTXRcvPkt@dst stored from wreg
  4861  1D27  0020               	movlb	0	; select bank0
  4862  1D28  00A5               	movwf	RTXRcvPkt@dst
  4863                           
  4864                           ;RTX.c: 509: CC1Read(0x3F,dst,len);
  4865  1D29  0825               	movf	RTXRcvPkt@dst,w
  4866  1D2A  00F9               	movwf	CC1Read@dst
  4867  1D2B  3001               	movlw	1
  4868  1D2C  00FA               	movwf	CC1Read@dst+1
  4869  1D2D  0823               	movf	RTXRcvPkt@len,w
  4870  1D2E  00A4               	movwf	??_RTXRcvPkt
  4871  1D2F  0824               	movf	??_RTXRcvPkt,w
  4872  1D30  00FB               	movwf	CC1Read@len
  4873  1D31  303F               	movlw	63
  4874  1D32  319F  2725         	fcall	_CC1Read
  4875  1D34  0008               	return
  4876  1D35                     __end_of_RTXRcvPkt:	
  4877                           
  4878                           	psect	text15
  4879  1F25                     __ptext15:	
  4880 ;; *************** function _CC1Read *****************
  4881 ;; Defined at:
  4882 ;;		line 120 in file "CC1.c"
  4883 ;; Parameters:    Size  Location     Type
  4884 ;;  addr            1    wreg     unsigned char 
  4885 ;;  dst             2    9[COMMON] PTR unsigned char 
  4886 ;;		 -> pktRx(11), numTxByte(1), numRxByte(1), sta(1), 
  4887 ;;  len             1   11[COMMON] unsigned char 
  4888 ;; Auto vars:     Size  Location     Type
  4889 ;;  addr            1    1[BANK0 ] unsigned char 
  4890 ;;  cc1Addr         1    2[BANK0 ] unsigned char 
  4891 ;; Return value:  Size  Location     Type
  4892 ;;		None               void
  4893 ;; Registers used:
  4894 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4895 ;; Tracked objects:
  4896 ;;		On entry : 0/0
  4897 ;;		On exit  : 0/0
  4898 ;;		Unchanged: 0/0
  4899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4900 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4901 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4902 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4903 ;;      Totals:         3       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4904 ;;Total ram usage:        6 bytes
  4905 ;; Hardware stack levels used:    1
  4906 ;; Hardware stack levels required when called:    3
  4907 ;; This function calls:
  4908 ;;		_SPIRead
  4909 ;;		_SPIWrite
  4910 ;; This function is called by:
  4911 ;;		_RTXSup
  4912 ;;		_RTXSndPkt
  4913 ;;		_RTXRcvPkt
  4914 ;;		_RTXReadPkt
  4915 ;; This function uses a non-reentrant model
  4916 ;;
  4917                           
  4918                           
  4919                           ;psect for function _CC1Read
  4920  1F25                     _CC1Read:	
  4921                           
  4922                           ;incstack = 0
  4923                           ; Regs used in _CC1Read: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4924                           ;CC1Read@addr stored from wreg
  4925  1F25  0020               	movlb	0	; select bank0
  4926  1F26  00A1               	movwf	CC1Read@addr
  4927                           
  4928                           ;CC1.c: 122: unsigned char cc1Addr;
  4929                           ;CC1.c: 125: LATAbits.LATA5=0;
  4930  1F27  0022               	movlb	2	; select bank2
  4931  1F28  128C               	bcf	12,5	;volatile
  4932                           
  4933                           ;CC1.c: 128: cc1Addr=((addr&0b00111111)|0b11000000);
  4934  1F29  0020               	movlb	0	; select bank0
  4935  1F2A  0821               	movf	CC1Read@addr,w
  4936  1F2B  393F               	andlw	63
  4937  1F2C  38C0               	iorlw	192
  4938  1F2D  00A0               	movwf	??_CC1Read
  4939  1F2E  0820               	movf	??_CC1Read,w
  4940  1F2F  00A2               	movwf	CC1Read@cc1Addr
  4941                           
  4942                           ;CC1.c: 129: SPIWrite((&(cc1Addr)),1);
  4943  1F30  3022               	movlw	low CC1Read@cc1Addr
  4944  1F31  00F1               	movwf	SPIWrite@srcPtr
  4945  1F32  3000               	movlw	high CC1Read@cc1Addr
  4946  1F33  00F2               	movwf	SPIWrite@srcPtr+1
  4947  1F34  01F3               	clrf	SPIWrite@len
  4948  1F35  0AF3               	incf	SPIWrite@len,f
  4949  1F36  319E  2674  319F   	fcall	_SPIWrite
  4950                           
  4951                           ;CC1.c: 132: SPIRead(dst,len);
  4952  1F39  0879               	movf	CC1Read@dst,w
  4953  1F3A  00F1               	movwf	SPIRead@dstPtr
  4954  1F3B  087A               	movf	CC1Read@dst+1,w
  4955  1F3C  00F2               	movwf	SPIRead@dstPtr+1
  4956  1F3D  087B               	movf	CC1Read@len,w
  4957  1F3E  0020               	movlb	0	; select bank0
  4958  1F3F  00A0               	movwf	??_CC1Read
  4959  1F40  0820               	movf	??_CC1Read,w
  4960  1F41  00F3               	movwf	SPIRead@len
  4961  1F42  319F  278E         	fcall	_SPIRead
  4962                           
  4963                           ;CC1.c: 135: LATAbits.LATA5=1;
  4964  1F44  0022               	movlb	2	; select bank2
  4965  1F45  168C               	bsf	12,5	;volatile
  4966  1F46  0008               	return
  4967  1F47                     __end_of_CC1Read:	
  4968                           
  4969                           	psect	text16
  4970  1F8E                     __ptext16:	
  4971 ;; *************** function _SPIRead *****************
  4972 ;; Defined at:
  4973 ;;		line 25 in file "SPI.c"
  4974 ;; Parameters:    Size  Location     Type
  4975 ;;  dstPtr          2    1[COMMON] PTR unsigned char 
  4976 ;;		 -> pktRx(11), numTxByte(1), numRxByte(1), sta(1), 
  4977 ;;  len             1    3[COMMON] unsigned char 
  4978 ;; Auto vars:     Size  Location     Type
  4979 ;;  i               1    8[COMMON] unsigned char 
  4980 ;; Return value:  Size  Location     Type
  4981 ;;		None               void
  4982 ;; Registers used:
  4983 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  4984 ;; Tracked objects:
  4985 ;;		On entry : 0/0
  4986 ;;		On exit  : 0/0
  4987 ;;		Unchanged: 0/0
  4988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4989 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4990 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4991 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4992 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4993 ;;Total ram usage:        8 bytes
  4994 ;; Hardware stack levels used:    1
  4995 ;; Hardware stack levels required when called:    2
  4996 ;; This function calls:
  4997 ;;		Nothing
  4998 ;; This function is called by:
  4999 ;;		_CC1Read
  5000 ;; This function uses a non-reentrant model
  5001 ;;
  5002                           
  5003                           
  5004                           ;psect for function _SPIRead
  5005  1F8E                     _SPIRead:	
  5006                           
  5007                           ;SPI.c: 27: unsigned char i;
  5008                           ;SPI.c: 29: for(i=0;i<len;i++)
  5009                           
  5010                           ;incstack = 0
  5011                           ; Regs used in _SPIRead: [wreg+fsr1l+fsr1h+status,2+status,0]
  5012  1F8E  01F8               	clrf	SPIRead@i
  5013  1F8F                     l5400:	
  5014  1F8F  0873               	movf	SPIRead@len,w
  5015  1F90  0278               	subwf	SPIRead@i,w
  5016  1F91  1803               	btfsc	3,0
  5017  1F92  0008               	return
  5018                           
  5019                           ;SPI.c: 30: {
  5020                           ;SPI.c: 31: PIR1bits.SSPIF=0;
  5021  1F93  0020               	movlb	0	; select bank0
  5022  1F94  1191               	bcf	17,3	;volatile
  5023                           
  5024                           ;SPI.c: 32: SSPBUF=0xFF;
  5025  1F95  30FF               	movlw	255
  5026  1F96  0024               	movlb	4	; select bank4
  5027  1F97  0091               	movwf	17	;volatile
  5028  1F98                     l70:	
  5029                           ;SPI.c: 33: while(!(PIR1bits.SSPIF))
  5030                           
  5031  1F98  0020               	movlb	0	; select bank0
  5032  1F99  1991               	btfsc	17,3	;volatile
  5033  1F9A  2F9D               	goto	l5396
  5034                           
  5035                           ;SPI.c: 34: __nop();
  5036  1F9B  0000               	nop
  5037  1F9C  2F98               	goto	l70
  5038  1F9D                     l5396:	
  5039                           
  5040                           ;SPI.c: 35: (*(dstPtr+i))=SSPBUF;
  5041  1F9D  0878               	movf	SPIRead@i,w
  5042  1F9E  00F4               	movwf	??_SPIRead
  5043  1F9F  01F5               	clrf	??_SPIRead+1
  5044  1FA0  0874               	movf	??_SPIRead,w
  5045  1FA1  0771               	addwf	SPIRead@dstPtr,w
  5046  1FA2  00F6               	movwf	??_SPIRead+2
  5047  1FA3  0875               	movf	??_SPIRead+1,w
  5048  1FA4  3D72               	addwfc	SPIRead@dstPtr+1,w
  5049  1FA5  00F7               	movwf	??_SPIRead+3
  5050  1FA6  0876               	movf	??_SPIRead+2,w
  5051  1FA7  0086               	movwf	6
  5052  1FA8  0877               	movf	??_SPIRead+3,w
  5053  1FA9  0087               	movwf	7
  5054  1FAA  0024               	movlb	4	; select bank4
  5055  1FAB  0811               	movf	17,w	;volatile
  5056  1FAC  0081               	movwf	1
  5057  1FAD  3001               	movlw	1
  5058  1FAE  00F4               	movwf	??_SPIRead
  5059  1FAF  0874               	movf	??_SPIRead,w
  5060  1FB0  07F8               	addwf	SPIRead@i,f
  5061  1FB1  2F8F               	goto	l5400
  5062  1FB2                     __end_of_SPIRead:	
  5063                           
  5064                           	psect	text17
  5065  145B                     __ptext17:	
  5066 ;; *************** function _RTXInit *****************
  5067 ;; Defined at:
  5068 ;;		line 79 in file "RTX.c"
  5069 ;; Parameters:    Size  Location     Type
  5070 ;;  state           1    wreg     unsigned char 
  5071 ;; Auto vars:     Size  Location     Type
  5072 ;;  state           1   70[BANK0 ] unsigned char 
  5073 ;; Return value:  Size  Location     Type
  5074 ;;		None               void
  5075 ;; Registers used:
  5076 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5077 ;; Tracked objects:
  5078 ;;		On entry : 0/0
  5079 ;;		On exit  : 0/0
  5080 ;;		Unchanged: 0/0
  5081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5083 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5085 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5086 ;;Total ram usage:        1 bytes
  5087 ;; Hardware stack levels used:    1
  5088 ;; Hardware stack levels required when called:    8
  5089 ;; This function calls:
  5090 ;;		_CC1Strobe
  5091 ;;		_RTXUpdateDisplay
  5092 ;; This function is called by:
  5093 ;;		_main
  5094 ;; This function uses a non-reentrant model
  5095 ;;
  5096                           
  5097                           
  5098                           ;psect for function _RTXInit
  5099  145B                     _RTXInit:	
  5100                           
  5101                           ;incstack = 0
  5102                           ; Regs used in _RTXInit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5103                           ;RTXInit@state stored from wreg
  5104  145B  0020               	movlb	0	; select bank0
  5105  145C  00E6               	movwf	RTXInit@state
  5106                           
  5107                           ;RTX.c: 81: switch(state)
  5108  145D  2CA8               	goto	l6708
  5109  145E                     l6684:	
  5110                           ;RTX.c: 86: case 1:
  5111                           
  5112                           ;RTX.c: 85: break;
  5113                           
  5114                           ;RTX.c: 82: {
  5115                           ;RTX.c: 83: case 0:
  5116                           
  5117                           
  5118                           ;RTX.c: 88: rtx_flg.val=0;
  5119  145E  0021               	movlb	1	; select bank1
  5120  145F  01EC               	clrf	_rtx_flg^(0+128)
  5121                           
  5122                           ;RTX.c: 89: tmrCalibration=0;
  5123  1460  0022               	movlb	2	; select bank2
  5124  1461  01B8               	clrf	_tmrCalibration^(0+256)
  5125  1462  01B9               	clrf	(_tmrCalibration+1)^(0+256)
  5126                           
  5127                           ;RTX.c: 90: tmrVis=0;
  5128  1463  01BC               	clrf	_tmrVis^(0+256)
  5129  1464  01BD               	clrf	(_tmrVis+1)^(0+256)
  5130                           
  5131                           ;RTX.c: 91: gen_power=0;
  5132  1465  3000               	movlw	0
  5133  1466  00B2               	movwf	_gen_power^(0+256)
  5134  1467  3000               	movlw	0
  5135  1468  00B3               	movwf	(_gen_power+1)^(0+256)
  5136  1469  3000               	movlw	0
  5137  146A  00B4               	movwf	(_gen_power+2)^(0+256)
  5138                           
  5139                           ;RTX.c: 92: con_power=0;
  5140  146B  3000               	movlw	0
  5141  146C  00AC               	movwf	_con_power^(0+256)
  5142  146D  3000               	movlw	0
  5143  146E  00AD               	movwf	(_con_power+1)^(0+256)
  5144  146F  3000               	movlw	0
  5145  1470  00AE               	movwf	(_con_power+2)^(0+256)
  5146                           
  5147                           ;RTX.c: 93: gen_curr_sens=0;
  5148  1471  3000               	movlw	0
  5149  1472  00AF               	movwf	_gen_curr_sens^(0+256)
  5150  1473  3000               	movlw	0
  5151  1474  00B0               	movwf	(_gen_curr_sens+1)^(0+256)
  5152  1475  3000               	movlw	0
  5153  1476  00B1               	movwf	(_gen_curr_sens+2)^(0+256)
  5154                           
  5155                           ;RTX.c: 94: con_curr_sens=0;
  5156  1477  3000               	movlw	0
  5157  1478  00A9               	movwf	_con_curr_sens^(0+256)
  5158  1479  3000               	movlw	0
  5159  147A  00AA               	movwf	(_con_curr_sens+1)^(0+256)
  5160  147B  3000               	movlw	0
  5161  147C  00AB               	movwf	(_con_curr_sens+2)^(0+256)
  5162                           
  5163                           ;RTX.c: 95: volt_sens=0;
  5164  147D  3000               	movlw	0
  5165  147E  00B5               	movwf	_volt_sens^(0+256)
  5166  147F  3000               	movlw	0
  5167  1480  00B6               	movwf	(_volt_sens+1)^(0+256)
  5168  1481  3000               	movlw	0
  5169  1482  00B7               	movwf	(_volt_sens+2)^(0+256)
  5170                           
  5171                           ;RTX.c: 96: batt_gen_curr_sens=0;
  5172  1483  3000               	movlw	0
  5173  1484  00A3               	movwf	_batt_gen_curr_sens^(0+256)
  5174  1485  3000               	movlw	0
  5175  1486  00A4               	movwf	(_batt_gen_curr_sens+1)^(0+256)
  5176  1487  3000               	movlw	0
  5177  1488  00A5               	movwf	(_batt_gen_curr_sens+2)^(0+256)
  5178                           
  5179                           ;RTX.c: 97: batt_con_curr_sens=0;
  5180  1489  3000               	movlw	0
  5181  148A  00A0               	movwf	_batt_con_curr_sens^(0+256)
  5182  148B  3000               	movlw	0
  5183  148C  00A1               	movwf	(_batt_con_curr_sens+1)^(0+256)
  5184  148D  3000               	movlw	0
  5185  148E  00A2               	movwf	(_batt_con_curr_sens+2)^(0+256)
  5186                           
  5187                           ;RTX.c: 98: batt_volt_sens=0;
  5188  148F  3000               	movlw	0
  5189  1490  00A6               	movwf	_batt_volt_sens^(0+256)
  5190  1491  3000               	movlw	0
  5191  1492  00A7               	movwf	(_batt_volt_sens+1)^(0+256)
  5192  1493  3000               	movlw	0
  5193  1494  00A8               	movwf	(_batt_volt_sens+2)^(0+256)
  5194                           
  5195                           ;RTX.c: 99: visTypeDpy=UPD_DPY_POWER;
  5196  1495  0021               	movlb	1	; select bank1
  5197  1496  01EE               	clrf	_visTypeDpy^(0+128)
  5198                           
  5199                           ;RTX.c: 100: break;
  5200  1497  0008               	return
  5201  1498                     l6702:	
  5202                           ;RTX.c: 101: case 2:
  5203                           
  5204                           
  5205                           ;RTX.c: 103: CC1Strobe(SIDLE);
  5206  1498  3036               	movlw	54
  5207  1499  319D  259D  3194   	fcall	_CC1Strobe
  5208                           
  5209                           ;RTX.c: 104: CC1Strobe(SCAL);
  5210  149C  3033               	movlw	51
  5211  149D  319D  259D  3194   	fcall	_CC1Strobe
  5212                           
  5213                           ;RTX.c: 105: CC1Strobe(SRX);
  5214  14A0  3034               	movlw	52
  5215  14A1  319D  259D  3194   	fcall	_CC1Strobe
  5216                           
  5217                           ;RTX.c: 107: RTXUpdateDisplay(UPD_DPY_POWER);
  5218  14A4  3000               	movlw	0
  5219  14A5  3180  204B         	fcall	_RTXUpdateDisplay
  5220                           
  5221                           ;RTX.c: 109: }
  5222                           
  5223                           ;RTX.c: 108: break;
  5224  14A7  0008               	return
  5225  14A8                     l6708:	
  5226  14A8  0020               	movlb	0	; select bank0
  5227  14A9  0866               	movf	RTXInit@state,w
  5228                           
  5229                           ; Switch size 1, requested type "space"
  5230                           ; Number of cases is 3, Range of values is 0 to 2
  5231                           ; switch strategies available:
  5232                           ; Name         Instructions Cycles
  5233                           ; simple_byte           10     6 (average)
  5234                           ; direct_byte           12     6 (fixed)
  5235                           ; jumptable            260     6 (fixed)
  5236                           ;	Chosen strategy is simple_byte
  5237  14AA  3A00               	xorlw	0	; case 0
  5238  14AB  1903               	skipnz
  5239  14AC  2CB4               	goto	l453
  5240  14AD  3A01               	xorlw	1	; case 1
  5241  14AE  1903               	skipnz
  5242  14AF  2C5E               	goto	l6684
  5243  14B0  3A03               	xorlw	3	; case 2
  5244  14B1  1903               	skipnz
  5245  14B2  2C98               	goto	l6702
  5246  14B3  2CB4               	goto	l453
  5247  14B4                     l453:	
  5248  14B4  0008               	return
  5249  14B5                     __end_of_RTXInit:	
  5250                           
  5251                           	psect	text18
  5252  004B                     __ptext18:	
  5253 ;; *************** function _RTXUpdateDisplay *****************
  5254 ;; Defined at:
  5255 ;;		line 146 in file "RTX.c"
  5256 ;; Parameters:    Size  Location     Type
  5257 ;;  val             1    wreg     enum E2120
  5258 ;; Auto vars:     Size  Location     Type
  5259 ;;  val             1   63[BANK1 ] enum E2120
  5260 ;;  strRow1        16   47[BANK1 ] unsigned char [16]
  5261 ;;  strRow2        16   31[BANK1 ] unsigned char [16]
  5262 ;;  charIdSens      4   23[BANK1 ] unsigned char [4]
  5263 ;;  diffPower       3   27[BANK1 ] float 
  5264 ;;  iR              1   64[BANK1 ] unsigned char 
  5265 ;;  i               1   30[BANK1 ] unsigned char 
  5266 ;; Return value:  Size  Location     Type
  5267 ;;		None               void
  5268 ;; Registers used:
  5269 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5270 ;; Tracked objects:
  5271 ;;		On entry : 0/0
  5272 ;;		On exit  : 0/0
  5273 ;;		Unchanged: 0/0
  5274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5276 ;;      Locals:         0       0      42       0       0       0       0       0       0       0       0       0       
      +0       0
  5277 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5278 ;;      Totals:         0       4      42       0       0       0       0       0       0       0       0       0       
      +0       0
  5279 ;;Total ram usage:       46 bytes
  5280 ;; Hardware stack levels used:    1
  5281 ;; Hardware stack levels required when called:    7
  5282 ;; This function calls:
  5283 ;;		_DPYSendStr
  5284 ;;		_RTXVisDec
  5285 ;;		___ftadd
  5286 ;;		___ftge
  5287 ;;		___ftneg
  5288 ;;		_itoa
  5289 ;; This function is called by:
  5290 ;;		_PGMSelLong
  5291 ;;		_RTXInit
  5292 ;;		_RTXTick
  5293 ;;		_RTXSelDown
  5294 ;;		_RTXReadPkt
  5295 ;; This function uses a non-reentrant model
  5296 ;;
  5297                           
  5298                           
  5299                           ;psect for function _RTXUpdateDisplay
  5300  004B                     _RTXUpdateDisplay:	
  5301                           
  5302                           ;incstack = 0
  5303                           ; Regs used in _RTXUpdateDisplay: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5304                           ;RTXUpdateDisplay@val stored from wreg
  5305  004B  0021               	movlb	1	; select bank1
  5306  004C  00DF               	movwf	RTXUpdateDisplay@val^(0+128)
  5307                           
  5308                           ;RTX.c: 148: float diffPower;
  5309                           ;RTX.c: 149: char charIdSens[4],strRow1[16],strRow2[16];
  5310                           ;RTX.c: 150: unsigned char i,iR;
  5311                           ;RTX.c: 153: for(iR=0;iR<sizeof(strRow1)/sizeof(char);iR++)
  5312  004D  01E0               	clrf	RTXUpdateDisplay@iR^(0+128)
  5313  004E  3010               	movlw	16
  5314  004F  0260               	subwf	RTXUpdateDisplay@iR^(0+128),w
  5315  0050  1803               	btfsc	3,0
  5316  0051  2866               	goto	l5764
  5317  0052                     l5758:	
  5318                           
  5319                           ;RTX.c: 154: strRow1[iR]=' ';
  5320  0052  3020               	movlw	32
  5321  0053  0020               	movlb	0	; select bank0
  5322  0054  00E2               	movwf	??_RTXUpdateDisplay
  5323  0055  0021               	movlb	1	; select bank1
  5324  0056  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  5325  0057  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  5326  0058  0086               	movwf	6
  5327  0059  0187               	clrf	7
  5328  005A  0020               	movlb	0	; select bank0
  5329  005B  0862               	movf	??_RTXUpdateDisplay,w
  5330  005C  0081               	movwf	1
  5331  005D  3001               	movlw	1
  5332  005E  00E2               	movwf	??_RTXUpdateDisplay
  5333  005F  0862               	movf	??_RTXUpdateDisplay,w
  5334  0060  0021               	movlb	1	; select bank1
  5335  0061  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  5336  0062  3010               	movlw	16
  5337  0063  0260               	subwf	RTXUpdateDisplay@iR^(0+128),w
  5338  0064  1C03               	skipc
  5339  0065  2852               	goto	l5758
  5340  0066                     l5764:	
  5341                           
  5342                           ;RTX.c: 155: for(iR=0;iR<sizeof(strRow2)/sizeof(char);iR++)
  5343  0066  01E0               	clrf	RTXUpdateDisplay@iR^(0+128)
  5344  0067  3010               	movlw	16
  5345  0068  0260               	subwf	RTXUpdateDisplay@iR^(0+128),w
  5346  0069  1803               	btfsc	3,0
  5347  006A  287F               	goto	l5776
  5348  006B                     l5770:	
  5349                           
  5350                           ;RTX.c: 156: strRow2[iR]=' ';
  5351  006B  3020               	movlw	32
  5352  006C  0020               	movlb	0	; select bank0
  5353  006D  00E2               	movwf	??_RTXUpdateDisplay
  5354  006E  0021               	movlb	1	; select bank1
  5355  006F  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  5356  0070  3EBF               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  5357  0071  0086               	movwf	6
  5358  0072  0187               	clrf	7
  5359  0073  0020               	movlb	0	; select bank0
  5360  0074  0862               	movf	??_RTXUpdateDisplay,w
  5361  0075  0081               	movwf	1
  5362  0076  3001               	movlw	1
  5363  0077  00E2               	movwf	??_RTXUpdateDisplay
  5364  0078  0862               	movf	??_RTXUpdateDisplay,w
  5365  0079  0021               	movlb	1	; select bank1
  5366  007A  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  5367  007B  3010               	movlw	16
  5368  007C  0260               	subwf	RTXUpdateDisplay@iR^(0+128),w
  5369  007D  1C03               	skipc
  5370  007E  286B               	goto	l5770
  5371  007F                     l5776:	
  5372                           
  5373                           ;RTX.c: 158: if(val==UPD_DPY_PGMDONECURRSENSGEN || val==UPD_DPY_PGMDONECURRSENSCON || va
      +                          l==UPD_DPY_PGMDONEVOLTSENS || val==UPD_DPY_PGMRST)
  5374  007F  3004               	movlw	4
  5375  0080  065F               	xorwf	RTXUpdateDisplay@val^(0+128),w
  5376  0081  1903               	btfsc	3,2
  5377  0082  288F               	goto	l5784
  5378  0083  3005               	movlw	5
  5379  0084  065F               	xorwf	RTXUpdateDisplay@val^(0+128),w
  5380  0085  1903               	btfsc	3,2
  5381  0086  288F               	goto	l5784
  5382  0087  3006               	movlw	6
  5383  0088  065F               	xorwf	RTXUpdateDisplay@val^(0+128),w
  5384  0089  1903               	btfsc	3,2
  5385  008A  288F               	goto	l5784
  5386  008B  3007               	movlw	7
  5387  008C  065F               	xorwf	RTXUpdateDisplay@val^(0+128),w
  5388  008D  1D03               	btfss	3,2
  5389  008E  2A4F               	goto	l5914
  5390  008F                     l5784:	
  5391                           
  5392                           ;RTX.c: 159: {
  5393                           ;RTX.c: 160: iR=0;
  5394  008F  01E0               	clrf	RTXUpdateDisplay@iR^(0+128)
  5395                           
  5396                           ;RTX.c: 161: strRow1[iR++]='P';
  5397  0090  3050               	movlw	80
  5398  0091  0020               	movlb	0	; select bank0
  5399  0092  00E2               	movwf	??_RTXUpdateDisplay
  5400  0093  0021               	movlb	1	; select bank1
  5401  0094  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  5402  0095  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  5403  0096  0086               	movwf	6
  5404  0097  0187               	clrf	7
  5405  0098  0020               	movlb	0	; select bank0
  5406  0099  0862               	movf	??_RTXUpdateDisplay,w
  5407  009A  0081               	movwf	1
  5408  009B  3001               	movlw	1
  5409  009C  00E2               	movwf	??_RTXUpdateDisplay
  5410  009D  0862               	movf	??_RTXUpdateDisplay,w
  5411  009E  0021               	movlb	1	; select bank1
  5412  009F  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  5413                           
  5414                           ;RTX.c: 162: strRow1[iR++]='r';
  5415  00A0  3072               	movlw	114
  5416  00A1  0020               	movlb	0	; select bank0
  5417  00A2  00E2               	movwf	??_RTXUpdateDisplay
  5418  00A3  0021               	movlb	1	; select bank1
  5419  00A4  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  5420  00A5  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  5421  00A6  0086               	movwf	6
  5422  00A7  0187               	clrf	7
  5423  00A8  0020               	movlb	0	; select bank0
  5424  00A9  0862               	movf	??_RTXUpdateDisplay,w
  5425  00AA  0081               	movwf	1
  5426  00AB  3001               	movlw	1
  5427  00AC  00E2               	movwf	??_RTXUpdateDisplay
  5428  00AD  0862               	movf	??_RTXUpdateDisplay,w
  5429  00AE  0021               	movlb	1	; select bank1
  5430  00AF  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  5431                           
  5432                           ;RTX.c: 163: strRow1[iR++]='o';
  5433  00B0  306F               	movlw	111
  5434  00B1  0020               	movlb	0	; select bank0
  5435  00B2  00E2               	movwf	??_RTXUpdateDisplay
  5436  00B3  0021               	movlb	1	; select bank1
  5437  00B4  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  5438  00B5  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  5439  00B6  0086               	movwf	6
  5440  00B7  0187               	clrf	7
  5441  00B8  0020               	movlb	0	; select bank0
  5442  00B9  0862               	movf	??_RTXUpdateDisplay,w
  5443  00BA  0081               	movwf	1
  5444  00BB  3001               	movlw	1
  5445  00BC  00E2               	movwf	??_RTXUpdateDisplay
  5446  00BD  0862               	movf	??_RTXUpdateDisplay,w
  5447  00BE  0021               	movlb	1	; select bank1
  5448  00BF  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  5449                           
  5450                           ;RTX.c: 164: strRow1[iR++]='g';
  5451  00C0  3067               	movlw	103
  5452  00C1  0020               	movlb	0	; select bank0
  5453  00C2  00E2               	movwf	??_RTXUpdateDisplay
  5454  00C3  0021               	movlb	1	; select bank1
  5455  00C4  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  5456  00C5  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  5457  00C6  0086               	movwf	6
  5458  00C7  0187               	clrf	7
  5459  00C8  0020               	movlb	0	; select bank0
  5460  00C9  0862               	movf	??_RTXUpdateDisplay,w
  5461  00CA  0081               	movwf	1
  5462  00CB  3001               	movlw	1
  5463  00CC  00E2               	movwf	??_RTXUpdateDisplay
  5464  00CD  0862               	movf	??_RTXUpdateDisplay,w
  5465  00CE  0021               	movlb	1	; select bank1
  5466  00CF  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  5467                           
  5468                           ;RTX.c: 165: strRow1[iR++]='r';
  5469  00D0  3072               	movlw	114
  5470  00D1  0020               	movlb	0	; select bank0
  5471  00D2  00E2               	movwf	??_RTXUpdateDisplay
  5472  00D3  0021               	movlb	1	; select bank1
  5473  00D4  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  5474  00D5  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  5475  00D6  0086               	movwf	6
  5476  00D7  0187               	clrf	7
  5477  00D8  0020               	movlb	0	; select bank0
  5478  00D9  0862               	movf	??_RTXUpdateDisplay,w
  5479  00DA  0081               	movwf	1
  5480  00DB  3001               	movlw	1
  5481  00DC  00E2               	movwf	??_RTXUpdateDisplay
  5482  00DD  0862               	movf	??_RTXUpdateDisplay,w
  5483  00DE  0021               	movlb	1	; select bank1
  5484  00DF  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  5485                           
  5486                           ;RTX.c: 166: strRow1[iR++]='a';
  5487  00E0  3061               	movlw	97
  5488  00E1  0020               	movlb	0	; select bank0
  5489  00E2  00E2               	movwf	??_RTXUpdateDisplay
  5490  00E3  0021               	movlb	1	; select bank1
  5491  00E4  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  5492  00E5  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  5493  00E6  0086               	movwf	6
  5494  00E7  0187               	clrf	7
  5495  00E8  0020               	movlb	0	; select bank0
  5496  00E9  0862               	movf	??_RTXUpdateDisplay,w
  5497  00EA  0081               	movwf	1
  5498  00EB  3001               	movlw	1
  5499  00EC  00E2               	movwf	??_RTXUpdateDisplay
  5500  00ED  0862               	movf	??_RTXUpdateDisplay,w
  5501  00EE  0021               	movlb	1	; select bank1
  5502  00EF  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  5503                           
  5504                           ;RTX.c: 167: strRow1[iR++]='m';
  5505  00F0  306D               	movlw	109
  5506  00F1  0020               	movlb	0	; select bank0
  5507  00F2  00E2               	movwf	??_RTXUpdateDisplay
  5508  00F3  0021               	movlb	1	; select bank1
  5509  00F4  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  5510  00F5  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  5511  00F6  0086               	movwf	6
  5512  00F7  0187               	clrf	7
  5513  00F8  0020               	movlb	0	; select bank0
  5514  00F9  0862               	movf	??_RTXUpdateDisplay,w
  5515  00FA  0081               	movwf	1
  5516  00FB  3001               	movlw	1
  5517  00FC  00E2               	movwf	??_RTXUpdateDisplay
  5518  00FD  0862               	movf	??_RTXUpdateDisplay,w
  5519  00FE  0021               	movlb	1	; select bank1
  5520  00FF  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  5521                           
  5522                           ;RTX.c: 168: strRow1[iR++]='m';
  5523  0100  306D               	movlw	109
  5524  0101  0020               	movlb	0	; select bank0
  5525  0102  00E2               	movwf	??_RTXUpdateDisplay
  5526  0103  0021               	movlb	1	; select bank1
  5527  0104  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  5528  0105  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  5529  0106  0086               	movwf	6
  5530  0107  0187               	clrf	7
  5531  0108  0020               	movlb	0	; select bank0
  5532  0109  0862               	movf	??_RTXUpdateDisplay,w
  5533  010A  0081               	movwf	1
  5534  010B  3001               	movlw	1
  5535  010C  00E2               	movwf	??_RTXUpdateDisplay
  5536  010D  0862               	movf	??_RTXUpdateDisplay,w
  5537  010E  0021               	movlb	1	; select bank1
  5538  010F  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  5539                           
  5540                           ;RTX.c: 169: strRow1[iR++]='a';
  5541  0110  3061               	movlw	97
  5542  0111  0020               	movlb	0	; select bank0
  5543  0112  00E2               	movwf	??_RTXUpdateDisplay
  5544  0113  0021               	movlb	1	; select bank1
  5545  0114  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  5546  0115  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  5547  0116  0086               	movwf	6
  5548  0117  0187               	clrf	7
  5549  0118  0020               	movlb	0	; select bank0
  5550  0119  0862               	movf	??_RTXUpdateDisplay,w
  5551  011A  0081               	movwf	1
  5552  011B  3001               	movlw	1
  5553  011C  00E2               	movwf	??_RTXUpdateDisplay
  5554  011D  0862               	movf	??_RTXUpdateDisplay,w
  5555  011E  0021               	movlb	1	; select bank1
  5556  011F  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  5557                           
  5558                           ;RTX.c: 170: strRow1[iR++]='z';
  5559  0120  307A               	movlw	122
  5560  0121  0020               	movlb	0	; select bank0
  5561  0122  00E2               	movwf	??_RTXUpdateDisplay
  5562  0123  0021               	movlb	1	; select bank1
  5563  0124  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  5564  0125  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  5565  0126  0086               	movwf	6
  5566  0127  0187               	clrf	7
  5567  0128  0020               	movlb	0	; select bank0
  5568  0129  0862               	movf	??_RTXUpdateDisplay,w
  5569  012A  0081               	movwf	1
  5570  012B  3001               	movlw	1
  5571  012C  00E2               	movwf	??_RTXUpdateDisplay
  5572  012D  0862               	movf	??_RTXUpdateDisplay,w
  5573  012E  0021               	movlb	1	; select bank1
  5574  012F  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  5575                           
  5576                           ;RTX.c: 171: strRow1[iR++]='i';
  5577  0130  3069               	movlw	105
  5578  0131  0020               	movlb	0	; select bank0
  5579  0132  00E2               	movwf	??_RTXUpdateDisplay
  5580  0133  0021               	movlb	1	; select bank1
  5581  0134  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  5582  0135  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  5583  0136  0086               	movwf	6
  5584  0137  0187               	clrf	7
  5585  0138  0020               	movlb	0	; select bank0
  5586  0139  0862               	movf	??_RTXUpdateDisplay,w
  5587  013A  0081               	movwf	1
  5588  013B  3001               	movlw	1
  5589  013C  00E2               	movwf	??_RTXUpdateDisplay
  5590  013D  0862               	movf	??_RTXUpdateDisplay,w
  5591  013E  0021               	movlb	1	; select bank1
  5592  013F  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  5593                           
  5594                           ;RTX.c: 172: strRow1[iR++]='o';
  5595  0140  306F               	movlw	111
  5596  0141  0020               	movlb	0	; select bank0
  5597  0142  00E2               	movwf	??_RTXUpdateDisplay
  5598  0143  0021               	movlb	1	; select bank1
  5599  0144  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  5600  0145  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  5601  0146  0086               	movwf	6
  5602  0147  0187               	clrf	7
  5603  0148  0020               	movlb	0	; select bank0
  5604  0149  0862               	movf	??_RTXUpdateDisplay,w
  5605  014A  0081               	movwf	1
  5606  014B  3001               	movlw	1
  5607  014C  00E2               	movwf	??_RTXUpdateDisplay
  5608  014D  0862               	movf	??_RTXUpdateDisplay,w
  5609  014E  0021               	movlb	1	; select bank1
  5610  014F  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  5611                           
  5612                           ;RTX.c: 173: strRow1[iR++]='n';
  5613  0150  306E               	movlw	110
  5614  0151  0020               	movlb	0	; select bank0
  5615  0152  00E2               	movwf	??_RTXUpdateDisplay
  5616  0153  0021               	movlb	1	; select bank1
  5617  0154  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  5618  0155  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  5619  0156  0086               	movwf	6
  5620  0157  0187               	clrf	7
  5621  0158  0020               	movlb	0	; select bank0
  5622  0159  0862               	movf	??_RTXUpdateDisplay,w
  5623  015A  0081               	movwf	1
  5624  015B  3001               	movlw	1
  5625  015C  00E2               	movwf	??_RTXUpdateDisplay
  5626  015D  0862               	movf	??_RTXUpdateDisplay,w
  5627  015E  0021               	movlb	1	; select bank1
  5628  015F  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  5629                           
  5630                           ;RTX.c: 174: strRow1[iR++]='e';
  5631  0160  3065               	movlw	101
  5632  0161  0020               	movlb	0	; select bank0
  5633  0162  00E2               	movwf	??_RTXUpdateDisplay
  5634  0163  0021               	movlb	1	; select bank1
  5635  0164  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  5636  0165  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  5637  0166  0086               	movwf	6
  5638  0167  0187               	clrf	7
  5639  0168  0020               	movlb	0	; select bank0
  5640  0169  0862               	movf	??_RTXUpdateDisplay,w
  5641  016A  0081               	movwf	1
  5642  016B  3001               	movlw	1
  5643  016C  00E2               	movwf	??_RTXUpdateDisplay
  5644  016D  0862               	movf	??_RTXUpdateDisplay,w
  5645  016E  0021               	movlb	1	; select bank1
  5646  016F  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  5647                           
  5648                           ;RTX.c: 175: strRow1[iR++]=':';
  5649  0170  303A               	movlw	58
  5650  0171  0020               	movlb	0	; select bank0
  5651  0172  00E2               	movwf	??_RTXUpdateDisplay
  5652  0173  0021               	movlb	1	; select bank1
  5653  0174  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  5654  0175  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  5655  0176  0086               	movwf	6
  5656  0177  0187               	clrf	7
  5657  0178  0020               	movlb	0	; select bank0
  5658  0179  0862               	movf	??_RTXUpdateDisplay,w
  5659  017A  0081               	movwf	1
  5660  017B  3001               	movlw	1
  5661  017C  00E2               	movwf	??_RTXUpdateDisplay
  5662  017D  0862               	movf	??_RTXUpdateDisplay,w
  5663  017E  0021               	movlb	1	; select bank1
  5664  017F  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  5665                           
  5666                           ;RTX.c: 176: if(val==UPD_DPY_PGMRST)
  5667  0180  3007               	movlw	7
  5668  0181  065F               	xorwf	RTXUpdateDisplay@val^(0+128),w
  5669  0182  1D03               	btfss	3,2
  5670  0183  29CC               	goto	l5870
  5671                           
  5672                           ;RTX.c: 177: {
  5673                           ;RTX.c: 178: iR=5;
  5674  0184  3005               	movlw	5
  5675  0185  0020               	movlb	0	; select bank0
  5676  0186  00E2               	movwf	??_RTXUpdateDisplay
  5677  0187  0862               	movf	??_RTXUpdateDisplay,w
  5678  0188  0021               	movlb	1	; select bank1
  5679  0189  00E0               	movwf	RTXUpdateDisplay@iR^(0+128)
  5680                           
  5681                           ;RTX.c: 179: strRow2[iR++]='R';
  5682  018A  3052               	movlw	82
  5683  018B  0020               	movlb	0	; select bank0
  5684  018C  00E2               	movwf	??_RTXUpdateDisplay
  5685  018D  0021               	movlb	1	; select bank1
  5686  018E  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  5687  018F  3EBF               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  5688  0190  0086               	movwf	6
  5689  0191  0187               	clrf	7
  5690  0192  0020               	movlb	0	; select bank0
  5691  0193  0862               	movf	??_RTXUpdateDisplay,w
  5692  0194  0081               	movwf	1
  5693  0195  3001               	movlw	1
  5694  0196  00E2               	movwf	??_RTXUpdateDisplay
  5695  0197  0862               	movf	??_RTXUpdateDisplay,w
  5696  0198  0021               	movlb	1	; select bank1
  5697  0199  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  5698                           
  5699                           ;RTX.c: 180: strRow2[iR++]='E';
  5700  019A  3045               	movlw	69
  5701  019B  0020               	movlb	0	; select bank0
  5702  019C  00E2               	movwf	??_RTXUpdateDisplay
  5703  019D  0021               	movlb	1	; select bank1
  5704  019E  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  5705  019F  3EBF               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  5706  01A0  0086               	movwf	6
  5707  01A1  0187               	clrf	7
  5708  01A2  0020               	movlb	0	; select bank0
  5709  01A3  0862               	movf	??_RTXUpdateDisplay,w
  5710  01A4  0081               	movwf	1
  5711  01A5  3001               	movlw	1
  5712  01A6  00E2               	movwf	??_RTXUpdateDisplay
  5713  01A7  0862               	movf	??_RTXUpdateDisplay,w
  5714  01A8  0021               	movlb	1	; select bank1
  5715  01A9  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  5716                           
  5717                           ;RTX.c: 181: strRow2[iR++]='S';
  5718  01AA  3053               	movlw	83
  5719  01AB  0020               	movlb	0	; select bank0
  5720  01AC  00E2               	movwf	??_RTXUpdateDisplay
  5721  01AD  0021               	movlb	1	; select bank1
  5722  01AE  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  5723  01AF  3EBF               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  5724  01B0  0086               	movwf	6
  5725  01B1  0187               	clrf	7
  5726  01B2  0020               	movlb	0	; select bank0
  5727  01B3  0862               	movf	??_RTXUpdateDisplay,w
  5728  01B4  0081               	movwf	1
  5729  01B5  3001               	movlw	1
  5730  01B6  00E2               	movwf	??_RTXUpdateDisplay
  5731  01B7  0862               	movf	??_RTXUpdateDisplay,w
  5732  01B8  0021               	movlb	1	; select bank1
  5733  01B9  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  5734                           
  5735                           ;RTX.c: 182: strRow2[iR++]='E';
  5736  01BA  3045               	movlw	69
  5737  01BB  0020               	movlb	0	; select bank0
  5738  01BC  00E2               	movwf	??_RTXUpdateDisplay
  5739  01BD  0021               	movlb	1	; select bank1
  5740  01BE  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  5741  01BF  3EBF               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  5742  01C0  0086               	movwf	6
  5743  01C1  0187               	clrf	7
  5744  01C2  0020               	movlb	0	; select bank0
  5745  01C3  0862               	movf	??_RTXUpdateDisplay,w
  5746  01C4  0081               	movwf	1
  5747  01C5  3001               	movlw	1
  5748  01C6  00E2               	movwf	??_RTXUpdateDisplay
  5749  01C7  0862               	movf	??_RTXUpdateDisplay,w
  5750  01C8  0021               	movlb	1	; select bank1
  5751  01C9  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  5752                           
  5753                           ;RTX.c: 183: strRow2[iR++]='T';
  5754  01CA  3054               	movlw	84
  5755  01CB  2FCC               	goto	L11
  5756  01CC                     l5870:	
  5757                           ;RTX.c: 184: }
  5758                           
  5759                           
  5760                           ;RTX.c: 185: else
  5761                           ;RTX.c: 186: {
  5762                           ;RTX.c: 187: iR=5;
  5763  01CC  3005               	movlw	5
  5764  01CD  0020               	movlb	0	; select bank0
  5765  01CE  00E2               	movwf	??_RTXUpdateDisplay
  5766  01CF  0862               	movf	??_RTXUpdateDisplay,w
  5767  01D0  0021               	movlb	1	; select bank1
  5768  01D1  00E0               	movwf	RTXUpdateDisplay@iR^(0+128)
  5769                           
  5770                           ;RTX.c: 188: strRow2[iR++]='I';
  5771  01D2  3049               	movlw	73
  5772  01D3  0020               	movlb	0	; select bank0
  5773  01D4  00E2               	movwf	??_RTXUpdateDisplay
  5774  01D5  0021               	movlb	1	; select bank1
  5775  01D6  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  5776  01D7  3EBF               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  5777  01D8  0086               	movwf	6
  5778  01D9  0187               	clrf	7
  5779  01DA  0020               	movlb	0	; select bank0
  5780  01DB  0862               	movf	??_RTXUpdateDisplay,w
  5781  01DC  0081               	movwf	1
  5782  01DD  3001               	movlw	1
  5783  01DE  00E2               	movwf	??_RTXUpdateDisplay
  5784  01DF  0862               	movf	??_RTXUpdateDisplay,w
  5785  01E0  0021               	movlb	1	; select bank1
  5786  01E1  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  5787                           
  5788                           ;RTX.c: 189: strRow2[iR++]='D';
  5789  01E2  3044               	movlw	68
  5790  01E3  0020               	movlb	0	; select bank0
  5791  01E4  00E2               	movwf	??_RTXUpdateDisplay
  5792  01E5  0021               	movlb	1	; select bank1
  5793  01E6  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  5794  01E7  3EBF               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  5795  01E8  0086               	movwf	6
  5796  01E9  0187               	clrf	7
  5797  01EA  0020               	movlb	0	; select bank0
  5798  01EB  0862               	movf	??_RTXUpdateDisplay,w
  5799  01EC  0081               	movwf	1
  5800  01ED  3001               	movlw	1
  5801  01EE  00E2               	movwf	??_RTXUpdateDisplay
  5802  01EF  0862               	movf	??_RTXUpdateDisplay,w
  5803  01F0  0021               	movlb	1	; select bank1
  5804  01F1  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  5805                           
  5806                           ;RTX.c: 190: strRow2[iR++]=':';
  5807  01F2  303A               	movlw	58
  5808  01F3  0020               	movlb	0	; select bank0
  5809  01F4  00E2               	movwf	??_RTXUpdateDisplay
  5810  01F5  0021               	movlb	1	; select bank1
  5811  01F6  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  5812  01F7  3EBF               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  5813  01F8  0086               	movwf	6
  5814  01F9  0187               	clrf	7
  5815  01FA  0020               	movlb	0	; select bank0
  5816  01FB  0862               	movf	??_RTXUpdateDisplay,w
  5817  01FC  0081               	movwf	1
  5818  01FD  3001               	movlw	1
  5819  01FE  00E2               	movwf	??_RTXUpdateDisplay
  5820  01FF  0862               	movf	??_RTXUpdateDisplay,w
  5821  0200  0021               	movlb	1	; select bank1
  5822  0201  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  5823                           
  5824                           ;RTX.c: 191: if(val==UPD_DPY_PGMDONECURRSENSGEN)
  5825  0202  3004               	movlw	4
  5826  0203  065F               	xorwf	RTXUpdateDisplay@val^(0+128),w
  5827  0204  1D03               	btfss	3,2
  5828  0205  2A09               	goto	l5888
  5829                           
  5830                           ;RTX.c: 192: itoa(charIdSens,pgm_cfg.gen_curr_sens_id,10);
  5831  0206  0022               	movlb	2	; select bank2
  5832  0207  0859               	movf	(_pgm_cfg^(0+256)+4),w
  5833  0208  2A18               	goto	L7
  5834  0209                     l5888:	
  5835                           
  5836                           ;RTX.c: 193: else if(val==UPD_DPY_PGMDONECURRSENSCON)
  5837  0209  3005               	movlw	5
  5838  020A  0021               	movlb	1	; select bank1
  5839  020B  065F               	xorwf	RTXUpdateDisplay@val^(0+128),w
  5840  020C  1D03               	btfss	3,2
  5841  020D  2A11               	goto	l5892
  5842                           
  5843                           ;RTX.c: 194: itoa(charIdSens,pgm_cfg.con_curr_sens_id,10);
  5844  020E  0022               	movlb	2	; select bank2
  5845  020F  085A               	movf	(_pgm_cfg^(0+256)+5),w
  5846  0210  2A18               	goto	L7
  5847  0211                     l5892:	
  5848                           
  5849                           ;RTX.c: 195: else if(val==UPD_DPY_PGMDONEVOLTSENS)
  5850  0211  3006               	movlw	6
  5851  0212  0021               	movlb	1	; select bank1
  5852  0213  065F               	xorwf	RTXUpdateDisplay@val^(0+128),w
  5853  0214  1D03               	btfss	3,2
  5854  0215  2A27               	goto	l5896
  5855                           
  5856                           ;RTX.c: 196: itoa(charIdSens,pgm_cfg.volt_sens_id,10);
  5857  0216  0022               	movlb	2	; select bank2
  5858  0217  085B               	movf	(_pgm_cfg^(0+256)+6),w
  5859  0218                     L7:	
  5860  0218  0020               	movlb	0	; select bank0
  5861  0219  00E2               	movwf	??_RTXUpdateDisplay
  5862  021A  01E3               	clrf	??_RTXUpdateDisplay+1
  5863  021B  0862               	movf	??_RTXUpdateDisplay,w
  5864  021C  00A8               	movwf	itoa@val
  5865  021D  0863               	movf	??_RTXUpdateDisplay+1,w
  5866  021E  00A9               	movwf	itoa@val+1
  5867  021F  300A               	movlw	10
  5868  0220  00AA               	movwf	itoa@base
  5869  0221  3000               	movlw	0
  5870  0222  00AB               	movwf	itoa@base+1
  5871  0223  30B7               	movlw	(low (RTXUpdateDisplay@charIdSens| 0))& (0+255)
  5872  0224  319F  276A  3180   	fcall	_itoa
  5873  0227                     l5896:	
  5874                           
  5875                           ;RTX.c: 197: for(i=0;i<4;i++)
  5876  0227  0021               	movlb	1	; select bank1
  5877  0228  01BE               	clrf	RTXUpdateDisplay@i^(0+128)
  5878  0229                     L8:	
  5879  0229  3004               	movlw	4
  5880  022A  023E               	subwf	RTXUpdateDisplay@i^(0+128),w
  5881  022B  1803               	btfsc	3,0
  5882  022C  2FDB               	goto	L19
  5883                           
  5884                           ;RTX.c: 198: {
  5885                           ;RTX.c: 199: if(charIdSens[i]==0x00)
  5886  022D  083E               	movf	RTXUpdateDisplay@i^(0+128),w
  5887  022E  3EB7               	addlw	(low (RTXUpdateDisplay@charIdSens| 0))& (0+255)
  5888  022F  0086               	movwf	6
  5889  0230  0187               	clrf	7
  5890  0231  0801               	movf	1,w
  5891  0232  1903               	btfsc	3,2
  5892  0233  2FDB               	goto	L19
  5893                           
  5894                           ;RTX.c: 201: strRow2[iR++]=charIdSens[i];
  5895                           
  5896                           ;RTX.c: 200: break;
  5897  0234  083E               	movf	RTXUpdateDisplay@i^(0+128),w
  5898  0235  3EB7               	addlw	(low (RTXUpdateDisplay@charIdSens| 0))& (0+255)
  5899  0236  0086               	movwf	6
  5900  0237  0187               	clrf	7
  5901  0238  0801               	movf	1,w
  5902  0239  0020               	movlb	0	; select bank0
  5903  023A  00E2               	movwf	??_RTXUpdateDisplay
  5904  023B  0021               	movlb	1	; select bank1
  5905  023C  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  5906  023D  3EBF               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  5907  023E  0086               	movwf	6
  5908  023F  0187               	clrf	7
  5909  0240  0020               	movlb	0	; select bank0
  5910  0241  0862               	movf	??_RTXUpdateDisplay,w
  5911  0242  0081               	movwf	1
  5912  0243  3001               	movlw	1
  5913  0244  00E2               	movwf	??_RTXUpdateDisplay
  5914  0245  0862               	movf	??_RTXUpdateDisplay,w
  5915  0246  0021               	movlb	1	; select bank1
  5916  0247  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  5917  0248  3001               	movlw	1
  5918  0249  0020               	movlb	0	; select bank0
  5919  024A  00E2               	movwf	??_RTXUpdateDisplay
  5920  024B  0862               	movf	??_RTXUpdateDisplay,w
  5921  024C  0021               	movlb	1	; select bank1
  5922  024D  07BE               	addwf	RTXUpdateDisplay@i^(0+128),f
  5923  024E  2A29               	goto	L8
  5924  024F                     l5914:	
  5925                           ;RTX.c: 202: }
  5926                           ;RTX.c: 203: }
  5927                           ;RTX.c: 204: }
  5928                           
  5929                           
  5930                           ;RTX.c: 205: else if(val==UPD_DPY_CURRSENSGEN)
  5931  024F  035F               	decf	RTXUpdateDisplay@val^(0+128),w
  5932  0250  1D03               	btfss	3,2
  5933  0251  2BB5               	goto	l6046
  5934                           
  5935                           ;RTX.c: 206: {
  5936                           ;RTX.c: 207: iR=0;
  5937  0252  01E0               	clrf	RTXUpdateDisplay@iR^(0+128)
  5938                           
  5939                           ;RTX.c: 208: strRow1[iR++]='P';
  5940  0253  3050               	movlw	80
  5941  0254  0020               	movlb	0	; select bank0
  5942  0255  00E2               	movwf	??_RTXUpdateDisplay
  5943  0256  0021               	movlb	1	; select bank1
  5944  0257  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  5945  0258  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  5946  0259  0086               	movwf	6
  5947  025A  0187               	clrf	7
  5948  025B  0020               	movlb	0	; select bank0
  5949  025C  0862               	movf	??_RTXUpdateDisplay,w
  5950  025D  0081               	movwf	1
  5951  025E  3001               	movlw	1
  5952  025F  00E2               	movwf	??_RTXUpdateDisplay
  5953  0260  0862               	movf	??_RTXUpdateDisplay,w
  5954  0261  0021               	movlb	1	; select bank1
  5955  0262  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  5956                           
  5957                           ;RTX.c: 209: strRow1[iR++]='o';
  5958  0263  306F               	movlw	111
  5959  0264  0020               	movlb	0	; select bank0
  5960  0265  00E2               	movwf	??_RTXUpdateDisplay
  5961  0266  0021               	movlb	1	; select bank1
  5962  0267  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  5963  0268  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  5964  0269  0086               	movwf	6
  5965  026A  0187               	clrf	7
  5966  026B  0020               	movlb	0	; select bank0
  5967  026C  0862               	movf	??_RTXUpdateDisplay,w
  5968  026D  0081               	movwf	1
  5969  026E  3001               	movlw	1
  5970  026F  00E2               	movwf	??_RTXUpdateDisplay
  5971  0270  0862               	movf	??_RTXUpdateDisplay,w
  5972  0271  0021               	movlb	1	; select bank1
  5973  0272  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  5974                           
  5975                           ;RTX.c: 210: strRow1[iR++]='t';
  5976  0273  3074               	movlw	116
  5977  0274  0020               	movlb	0	; select bank0
  5978  0275  00E2               	movwf	??_RTXUpdateDisplay
  5979  0276  0021               	movlb	1	; select bank1
  5980  0277  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  5981  0278  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  5982  0279  0086               	movwf	6
  5983  027A  0187               	clrf	7
  5984  027B  0020               	movlb	0	; select bank0
  5985  027C  0862               	movf	??_RTXUpdateDisplay,w
  5986  027D  0081               	movwf	1
  5987  027E  3001               	movlw	1
  5988  027F  00E2               	movwf	??_RTXUpdateDisplay
  5989  0280  0862               	movf	??_RTXUpdateDisplay,w
  5990  0281  0021               	movlb	1	; select bank1
  5991  0282  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  5992                           
  5993                           ;RTX.c: 211: strRow1[iR++]='.';
  5994  0283  302E               	movlw	46
  5995  0284  0020               	movlb	0	; select bank0
  5996  0285  00E2               	movwf	??_RTXUpdateDisplay
  5997  0286  0021               	movlb	1	; select bank1
  5998  0287  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  5999  0288  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  6000  0289  0086               	movwf	6
  6001  028A  0187               	clrf	7
  6002  028B  0020               	movlb	0	; select bank0
  6003  028C  0862               	movf	??_RTXUpdateDisplay,w
  6004  028D  0081               	movwf	1
  6005  028E  3001               	movlw	1
  6006  028F  00E2               	movwf	??_RTXUpdateDisplay
  6007  0290  0862               	movf	??_RTXUpdateDisplay,w
  6008  0291  0021               	movlb	1	; select bank1
  6009  0292  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6010                           
  6011                           ;RTX.c: 212: strRow1[iR++]=' ';
  6012  0293  3020               	movlw	32
  6013  0294  0020               	movlb	0	; select bank0
  6014  0295  00E2               	movwf	??_RTXUpdateDisplay
  6015  0296  0021               	movlb	1	; select bank1
  6016  0297  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6017  0298  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  6018  0299  0086               	movwf	6
  6019  029A  0187               	clrf	7
  6020  029B  0020               	movlb	0	; select bank0
  6021  029C  0862               	movf	??_RTXUpdateDisplay,w
  6022  029D  0081               	movwf	1
  6023  029E  3001               	movlw	1
  6024  029F  00E2               	movwf	??_RTXUpdateDisplay
  6025  02A0  0862               	movf	??_RTXUpdateDisplay,w
  6026  02A1  0021               	movlb	1	; select bank1
  6027  02A2  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6028                           
  6029                           ;RTX.c: 213: strRow1[iR++]='g';
  6030  02A3  3067               	movlw	103
  6031  02A4  0020               	movlb	0	; select bank0
  6032  02A5  00E2               	movwf	??_RTXUpdateDisplay
  6033  02A6  0021               	movlb	1	; select bank1
  6034  02A7  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6035  02A8  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  6036  02A9  0086               	movwf	6
  6037  02AA  0187               	clrf	7
  6038  02AB  0020               	movlb	0	; select bank0
  6039  02AC  0862               	movf	??_RTXUpdateDisplay,w
  6040  02AD  0081               	movwf	1
  6041  02AE  3001               	movlw	1
  6042  02AF  00E2               	movwf	??_RTXUpdateDisplay
  6043  02B0  0862               	movf	??_RTXUpdateDisplay,w
  6044  02B1  0021               	movlb	1	; select bank1
  6045  02B2  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6046                           
  6047                           ;RTX.c: 214: strRow1[iR++]='e';
  6048  02B3  3065               	movlw	101
  6049  02B4  0020               	movlb	0	; select bank0
  6050  02B5  00E2               	movwf	??_RTXUpdateDisplay
  6051  02B6  0021               	movlb	1	; select bank1
  6052  02B7  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6053  02B8  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  6054  02B9  0086               	movwf	6
  6055  02BA  0187               	clrf	7
  6056  02BB  0020               	movlb	0	; select bank0
  6057  02BC  0862               	movf	??_RTXUpdateDisplay,w
  6058  02BD  0081               	movwf	1
  6059  02BE  3001               	movlw	1
  6060  02BF  00E2               	movwf	??_RTXUpdateDisplay
  6061  02C0  0862               	movf	??_RTXUpdateDisplay,w
  6062  02C1  0021               	movlb	1	; select bank1
  6063  02C2  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6064                           
  6065                           ;RTX.c: 215: strRow1[iR++]='n';
  6066  02C3  306E               	movlw	110
  6067  02C4  0020               	movlb	0	; select bank0
  6068  02C5  00E2               	movwf	??_RTXUpdateDisplay
  6069  02C6  0021               	movlb	1	; select bank1
  6070  02C7  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6071  02C8  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  6072  02C9  0086               	movwf	6
  6073  02CA  0187               	clrf	7
  6074  02CB  0020               	movlb	0	; select bank0
  6075  02CC  0862               	movf	??_RTXUpdateDisplay,w
  6076  02CD  0081               	movwf	1
  6077  02CE  3001               	movlw	1
  6078  02CF  00E2               	movwf	??_RTXUpdateDisplay
  6079  02D0  0862               	movf	??_RTXUpdateDisplay,w
  6080  02D1  0021               	movlb	1	; select bank1
  6081  02D2  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6082                           
  6083                           ;RTX.c: 216: strRow1[iR++]='e';
  6084  02D3  3065               	movlw	101
  6085  02D4  0020               	movlb	0	; select bank0
  6086  02D5  00E2               	movwf	??_RTXUpdateDisplay
  6087  02D6  0021               	movlb	1	; select bank1
  6088  02D7  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6089  02D8  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  6090  02D9  0086               	movwf	6
  6091  02DA  0187               	clrf	7
  6092  02DB  0020               	movlb	0	; select bank0
  6093  02DC  0862               	movf	??_RTXUpdateDisplay,w
  6094  02DD  0081               	movwf	1
  6095  02DE  3001               	movlw	1
  6096  02DF  00E2               	movwf	??_RTXUpdateDisplay
  6097  02E0  0862               	movf	??_RTXUpdateDisplay,w
  6098  02E1  0021               	movlb	1	; select bank1
  6099  02E2  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6100                           
  6101                           ;RTX.c: 217: strRow1[iR++]='r';
  6102  02E3  3072               	movlw	114
  6103  02E4  0020               	movlb	0	; select bank0
  6104  02E5  00E2               	movwf	??_RTXUpdateDisplay
  6105  02E6  0021               	movlb	1	; select bank1
  6106  02E7  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6107  02E8  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  6108  02E9  0086               	movwf	6
  6109  02EA  0187               	clrf	7
  6110  02EB  0020               	movlb	0	; select bank0
  6111  02EC  0862               	movf	??_RTXUpdateDisplay,w
  6112  02ED  0081               	movwf	1
  6113  02EE  3001               	movlw	1
  6114  02EF  00E2               	movwf	??_RTXUpdateDisplay
  6115  02F0  0862               	movf	??_RTXUpdateDisplay,w
  6116  02F1  0021               	movlb	1	; select bank1
  6117  02F2  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6118                           
  6119                           ;RTX.c: 218: strRow1[iR++]='a';
  6120  02F3  3061               	movlw	97
  6121  02F4  0020               	movlb	0	; select bank0
  6122  02F5  00E2               	movwf	??_RTXUpdateDisplay
  6123  02F6  0021               	movlb	1	; select bank1
  6124  02F7  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6125  02F8  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  6126  02F9  0086               	movwf	6
  6127  02FA  0187               	clrf	7
  6128  02FB  0020               	movlb	0	; select bank0
  6129  02FC  0862               	movf	??_RTXUpdateDisplay,w
  6130  02FD  0081               	movwf	1
  6131  02FE  3001               	movlw	1
  6132  02FF  00E2               	movwf	??_RTXUpdateDisplay
  6133  0300  0862               	movf	??_RTXUpdateDisplay,w
  6134  0301  0021               	movlb	1	; select bank1
  6135  0302  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6136                           
  6137                           ;RTX.c: 219: strRow1[iR++]='t';
  6138  0303  3074               	movlw	116
  6139  0304  0020               	movlb	0	; select bank0
  6140  0305  00E2               	movwf	??_RTXUpdateDisplay
  6141  0306  0021               	movlb	1	; select bank1
  6142  0307  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6143  0308  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  6144  0309  0086               	movwf	6
  6145  030A  0187               	clrf	7
  6146  030B  0020               	movlb	0	; select bank0
  6147  030C  0862               	movf	??_RTXUpdateDisplay,w
  6148  030D  0081               	movwf	1
  6149  030E  3001               	movlw	1
  6150  030F  00E2               	movwf	??_RTXUpdateDisplay
  6151  0310  0862               	movf	??_RTXUpdateDisplay,w
  6152  0311  0021               	movlb	1	; select bank1
  6153  0312  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6154                           
  6155                           ;RTX.c: 220: strRow1[iR++]='a';
  6156  0313  3061               	movlw	97
  6157  0314  0020               	movlb	0	; select bank0
  6158  0315  00E2               	movwf	??_RTXUpdateDisplay
  6159  0316  0021               	movlb	1	; select bank1
  6160  0317  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6161  0318  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  6162  0319  0086               	movwf	6
  6163  031A  0187               	clrf	7
  6164  031B  0020               	movlb	0	; select bank0
  6165  031C  0862               	movf	??_RTXUpdateDisplay,w
  6166  031D  0081               	movwf	1
  6167  031E  3001               	movlw	1
  6168  031F  00E2               	movwf	??_RTXUpdateDisplay
  6169  0320  0862               	movf	??_RTXUpdateDisplay,w
  6170  0321  0021               	movlb	1	; select bank1
  6171  0322  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6172                           
  6173                           ;RTX.c: 223: iR=0;
  6174  0323  01E0               	clrf	RTXUpdateDisplay@iR^(0+128)
  6175                           
  6176                           ;RTX.c: 224: if(pgm_cfg.menu.gen_curr_sensIsProg)
  6177  0324  0022               	movlb	2	; select bank2
  6178  0325  1C57               	btfss	(_pgm_cfg^(0+256)+2),0
  6179  0326  2D2C               	goto	l6142
  6180                           
  6181                           ;RTX.c: 225: {
  6182                           ;RTX.c: 226: iR=RTXVisDec(gen_power,strRow2,4,iR++)+1;
  6183  0327  0832               	movf	_gen_power^(0+256),w
  6184  0328  0020               	movlb	0	; select bank0
  6185  0329  00D7               	movwf	RTXVisDec@val
  6186  032A  0022               	movlb	2	; select bank2
  6187  032B  0833               	movf	(_gen_power+1)^(0+256),w
  6188  032C  0020               	movlb	0	; select bank0
  6189  032D  00D8               	movwf	RTXVisDec@val+1
  6190  032E  0022               	movlb	2	; select bank2
  6191  032F  0834               	movf	(_gen_power+2)^(0+256),w
  6192  0330  0020               	movlb	0	; select bank0
  6193  0331  00D9               	movwf	RTXVisDec@val+2
  6194  0332  30BF               	movlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  6195  0333  00E2               	movwf	??_RTXUpdateDisplay
  6196  0334  0862               	movf	??_RTXUpdateDisplay,w
  6197  0335  00DA               	movwf	RTXVisDec@buff
  6198  0336  3004               	movlw	4
  6199  0337  00E3               	movwf	??_RTXUpdateDisplay+1
  6200  0338  0863               	movf	??_RTXUpdateDisplay+1,w
  6201  0339  00DB               	movwf	RTXVisDec@maxDigit
  6202  033A  0021               	movlb	1	; select bank1
  6203  033B  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6204  033C  0020               	movlb	0	; select bank0
  6205  033D  00E4               	movwf	??_RTXUpdateDisplay+2
  6206  033E  0864               	movf	??_RTXUpdateDisplay+2,w
  6207  033F  00DC               	movwf	RTXVisDec@offset
  6208  0340  3196  26A5  3180   	fcall	_RTXVisDec
  6209  0343  3E01               	addlw	1
  6210  0344  0020               	movlb	0	; select bank0
  6211  0345  00E5               	movwf	??_RTXUpdateDisplay+3
  6212  0346  0865               	movf	??_RTXUpdateDisplay+3,w
  6213  0347  0021               	movlb	1	; select bank1
  6214  0348  00E0               	movwf	RTXUpdateDisplay@iR^(0+128)
  6215  0349  3001               	movlw	1
  6216  034A  0020               	movlb	0	; select bank0
  6217  034B  00E2               	movwf	??_RTXUpdateDisplay
  6218  034C  0862               	movf	??_RTXUpdateDisplay,w
  6219  034D  0021               	movlb	1	; select bank1
  6220  034E  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6221                           
  6222                           ;RTX.c: 227: strRow2[iR++]='W';
  6223  034F  3057               	movlw	87
  6224  0350  0020               	movlb	0	; select bank0
  6225  0351  00E2               	movwf	??_RTXUpdateDisplay
  6226  0352  0021               	movlb	1	; select bank1
  6227  0353  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6228  0354  3EBF               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  6229  0355  0086               	movwf	6
  6230  0356  0187               	clrf	7
  6231  0357  0020               	movlb	0	; select bank0
  6232  0358  0862               	movf	??_RTXUpdateDisplay,w
  6233  0359  0081               	movwf	1
  6234  035A  3001               	movlw	1
  6235  035B  00E2               	movwf	??_RTXUpdateDisplay
  6236  035C  0862               	movf	??_RTXUpdateDisplay,w
  6237  035D  0021               	movlb	1	; select bank1
  6238  035E  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6239                           
  6240                           ;RTX.c: 228: strRow2[iR++]=' ';
  6241  035F  3020               	movlw	32
  6242  0360  0020               	movlb	0	; select bank0
  6243  0361  00E2               	movwf	??_RTXUpdateDisplay
  6244  0362  0021               	movlb	1	; select bank1
  6245  0363  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6246  0364  3EBF               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  6247  0365  0086               	movwf	6
  6248  0366  0187               	clrf	7
  6249  0367  0020               	movlb	0	; select bank0
  6250  0368  0862               	movf	??_RTXUpdateDisplay,w
  6251  0369  0081               	movwf	1
  6252  036A  3001               	movlw	1
  6253  036B  00E2               	movwf	??_RTXUpdateDisplay
  6254  036C  0862               	movf	??_RTXUpdateDisplay,w
  6255  036D  0021               	movlb	1	; select bank1
  6256  036E  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6257                           
  6258                           ;RTX.c: 229: strRow2[iR++]='-';
  6259  036F  302D               	movlw	45
  6260  0370  0020               	movlb	0	; select bank0
  6261  0371  00E2               	movwf	??_RTXUpdateDisplay
  6262  0372  0021               	movlb	1	; select bank1
  6263  0373  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6264  0374  3EBF               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  6265  0375  0086               	movwf	6
  6266  0376  0187               	clrf	7
  6267  0377  0020               	movlb	0	; select bank0
  6268  0378  0862               	movf	??_RTXUpdateDisplay,w
  6269  0379  0081               	movwf	1
  6270  037A  3001               	movlw	1
  6271  037B  00E2               	movwf	??_RTXUpdateDisplay
  6272  037C  0862               	movf	??_RTXUpdateDisplay,w
  6273  037D  0021               	movlb	1	; select bank1
  6274  037E  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6275                           
  6276                           ;RTX.c: 230: strRow2[iR++]=' ';
  6277  037F  3020               	movlw	32
  6278  0380  0020               	movlb	0	; select bank0
  6279  0381  00E2               	movwf	??_RTXUpdateDisplay
  6280  0382  0021               	movlb	1	; select bank1
  6281  0383  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6282  0384  3EBF               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  6283  0385  0086               	movwf	6
  6284  0386  0187               	clrf	7
  6285  0387  0020               	movlb	0	; select bank0
  6286  0388  0862               	movf	??_RTXUpdateDisplay,w
  6287  0389  0081               	movwf	1
  6288  038A  3001               	movlw	1
  6289  038B  00E2               	movwf	??_RTXUpdateDisplay
  6290  038C  0862               	movf	??_RTXUpdateDisplay,w
  6291  038D  0021               	movlb	1	; select bank1
  6292  038E  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6293                           
  6294                           ;RTX.c: 231: strRow2[iR++]=0x00;
  6295  038F  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6296  0390  3EBF               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  6297  0391  0086               	movwf	6
  6298  0392  0187               	clrf	7
  6299  0393  0181               	clrf	1
  6300  0394  3001               	movlw	1
  6301  0395  0020               	movlb	0	; select bank0
  6302  0396  00E2               	movwf	??_RTXUpdateDisplay
  6303  0397  0862               	movf	??_RTXUpdateDisplay,w
  6304  0398  0021               	movlb	1	; select bank1
  6305  0399  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6306                           
  6307                           ;RTX.c: 232: strRow2[iR++]='=';
  6308  039A  303D               	movlw	61
  6309  039B  0020               	movlb	0	; select bank0
  6310  039C  00E2               	movwf	??_RTXUpdateDisplay
  6311  039D  0021               	movlb	1	; select bank1
  6312  039E  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6313  039F  3EBF               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  6314  03A0  0086               	movwf	6
  6315  03A1  0187               	clrf	7
  6316  03A2  0020               	movlb	0	; select bank0
  6317  03A3  0862               	movf	??_RTXUpdateDisplay,w
  6318  03A4  0081               	movwf	1
  6319  03A5  3001               	movlw	1
  6320  03A6  00E2               	movwf	??_RTXUpdateDisplay
  6321  03A7  0862               	movf	??_RTXUpdateDisplay,w
  6322  03A8  0021               	movlb	1	; select bank1
  6323  03A9  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6324                           
  6325                           ;RTX.c: 233: iR=RTXVisDec(batt_gen_curr_sens,strRow2,3,iR++)+1;
  6326  03AA  0022               	movlb	2	; select bank2
  6327  03AB  0823               	movf	_batt_gen_curr_sens^(0+256),w
  6328  03AC  0020               	movlb	0	; select bank0
  6329  03AD  00D7               	movwf	RTXVisDec@val
  6330  03AE  0022               	movlb	2	; select bank2
  6331  03AF  0824               	movf	(_batt_gen_curr_sens+1)^(0+256),w
  6332  03B0  0020               	movlb	0	; select bank0
  6333  03B1  00D8               	movwf	RTXVisDec@val+1
  6334  03B2  0022               	movlb	2	; select bank2
  6335  03B3  0825               	movf	(_batt_gen_curr_sens+2)^(0+256),w
  6336  03B4  2EE4               	goto	L13
  6337  03B5                     l6046:	
  6338                           ;RTX.c: 252: }
  6339                           ;RTX.c: 253: }
  6340                           
  6341                           ;RTX.c: 251: strRow2[iR++]='V';
  6342                           
  6343                           ;RTX.c: 250: strRow2[iR++]='?';
  6344                           
  6345                           ;RTX.c: 249: strRow2[iR++]='?';
  6346                           
  6347                           ;RTX.c: 248: strRow2[iR++]='?';
  6348                           
  6349                           ;RTX.c: 247: strRow2[iR++]='=';
  6350                           
  6351                           ;RTX.c: 246: strRow2[iR++]=0x00;
  6352                           
  6353                           ;RTX.c: 245: strRow2[iR++]=' ';
  6354                           
  6355                           ;RTX.c: 244: strRow2[iR++]='-';
  6356                           
  6357                           ;RTX.c: 243: strRow2[iR++]=' ';
  6358                           
  6359                           ;RTX.c: 242: strRow2[iR++]='W';
  6360                           
  6361                           ;RTX.c: 241: strRow2[iR++]='?';
  6362                           
  6363                           ;RTX.c: 240: strRow2[iR++]='?';
  6364                           
  6365                           ;RTX.c: 239: strRow2[iR++]='?';
  6366                           
  6367                           ;RTX.c: 236: else
  6368                           ;RTX.c: 237: {
  6369                           ;RTX.c: 238: strRow2[iR++]='?';
  6370                           
  6371                           ;RTX.c: 235: }
  6372                           
  6373                           ;RTX.c: 234: strRow2[iR++]='V';
  6374                           
  6375                           
  6376                           ;RTX.c: 254: else if(val==UPD_DPY_CURRSENSCON)
  6377  03B5  3002               	movlw	2
  6378  03B6  065F               	xorwf	RTXUpdateDisplay@val^(0+128),w
  6379  03B7  1D03               	btfss	3,2
  6380  03B8  2D6E               	goto	l6180
  6381                           
  6382                           ;RTX.c: 255: {
  6383                           ;RTX.c: 256: iR=0;
  6384  03B9  01E0               	clrf	RTXUpdateDisplay@iR^(0+128)
  6385                           
  6386                           ;RTX.c: 257: strRow1[iR++]='P';
  6387  03BA  3050               	movlw	80
  6388  03BB  0020               	movlb	0	; select bank0
  6389  03BC  00E2               	movwf	??_RTXUpdateDisplay
  6390  03BD  0021               	movlb	1	; select bank1
  6391  03BE  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6392  03BF  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  6393  03C0  0086               	movwf	6
  6394  03C1  0187               	clrf	7
  6395  03C2  0020               	movlb	0	; select bank0
  6396  03C3  0862               	movf	??_RTXUpdateDisplay,w
  6397  03C4  0081               	movwf	1
  6398  03C5  3001               	movlw	1
  6399  03C6  00E2               	movwf	??_RTXUpdateDisplay
  6400  03C7  0862               	movf	??_RTXUpdateDisplay,w
  6401  03C8  0021               	movlb	1	; select bank1
  6402  03C9  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6403                           
  6404                           ;RTX.c: 258: strRow1[iR++]='o';
  6405  03CA  306F               	movlw	111
  6406  03CB  0020               	movlb	0	; select bank0
  6407  03CC  00E2               	movwf	??_RTXUpdateDisplay
  6408  03CD  0021               	movlb	1	; select bank1
  6409  03CE  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6410  03CF  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  6411  03D0  0086               	movwf	6
  6412  03D1  0187               	clrf	7
  6413  03D2  0020               	movlb	0	; select bank0
  6414  03D3  0862               	movf	??_RTXUpdateDisplay,w
  6415  03D4  0081               	movwf	1
  6416  03D5  3001               	movlw	1
  6417  03D6  00E2               	movwf	??_RTXUpdateDisplay
  6418  03D7  0862               	movf	??_RTXUpdateDisplay,w
  6419  03D8  0021               	movlb	1	; select bank1
  6420  03D9  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6421                           
  6422                           ;RTX.c: 259: strRow1[iR++]='t';
  6423  03DA  3074               	movlw	116
  6424  03DB  0020               	movlb	0	; select bank0
  6425  03DC  00E2               	movwf	??_RTXUpdateDisplay
  6426  03DD  0021               	movlb	1	; select bank1
  6427  03DE  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6428  03DF  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  6429  03E0  0086               	movwf	6
  6430  03E1  0187               	clrf	7
  6431  03E2  0020               	movlb	0	; select bank0
  6432  03E3  0862               	movf	??_RTXUpdateDisplay,w
  6433  03E4  0081               	movwf	1
  6434  03E5  3001               	movlw	1
  6435  03E6  00E2               	movwf	??_RTXUpdateDisplay
  6436  03E7  0862               	movf	??_RTXUpdateDisplay,w
  6437  03E8  0021               	movlb	1	; select bank1
  6438  03E9  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6439                           
  6440                           ;RTX.c: 260: strRow1[iR++]='.';
  6441  03EA  302E               	movlw	46
  6442  03EB  0020               	movlb	0	; select bank0
  6443  03EC  00E2               	movwf	??_RTXUpdateDisplay
  6444  03ED  0021               	movlb	1	; select bank1
  6445  03EE  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6446  03EF  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  6447  03F0  0086               	movwf	6
  6448  03F1  0187               	clrf	7
  6449  03F2  0020               	movlb	0	; select bank0
  6450  03F3  0862               	movf	??_RTXUpdateDisplay,w
  6451  03F4  0081               	movwf	1
  6452  03F5  3001               	movlw	1
  6453  03F6  00E2               	movwf	??_RTXUpdateDisplay
  6454  03F7  0862               	movf	??_RTXUpdateDisplay,w
  6455  03F8  0021               	movlb	1	; select bank1
  6456  03F9  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6457                           
  6458                           ;RTX.c: 261: strRow1[iR++]=' ';
  6459  03FA  3020               	movlw	32
  6460  03FB  0020               	movlb	0	; select bank0
  6461  03FC  00E2               	movwf	??_RTXUpdateDisplay
  6462  03FD  0021               	movlb	1	; select bank1
  6463  03FE  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6464  03FF  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  6465  0400  0086               	movwf	6
  6466  0401  0187               	clrf	7
  6467  0402  0020               	movlb	0	; select bank0
  6468  0403  0862               	movf	??_RTXUpdateDisplay,w
  6469  0404  0081               	movwf	1
  6470  0405  3001               	movlw	1
  6471  0406  00E2               	movwf	??_RTXUpdateDisplay
  6472  0407  0862               	movf	??_RTXUpdateDisplay,w
  6473  0408  0021               	movlb	1	; select bank1
  6474  0409  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6475                           
  6476                           ;RTX.c: 262: strRow1[iR++]='c';
  6477  040A  3063               	movlw	99
  6478  040B  0020               	movlb	0	; select bank0
  6479  040C  00E2               	movwf	??_RTXUpdateDisplay
  6480  040D  0021               	movlb	1	; select bank1
  6481  040E  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6482  040F  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  6483  0410  0086               	movwf	6
  6484  0411  0187               	clrf	7
  6485  0412  0020               	movlb	0	; select bank0
  6486  0413  0862               	movf	??_RTXUpdateDisplay,w
  6487  0414  0081               	movwf	1
  6488  0415  3001               	movlw	1
  6489  0416  00E2               	movwf	??_RTXUpdateDisplay
  6490  0417  0862               	movf	??_RTXUpdateDisplay,w
  6491  0418  0021               	movlb	1	; select bank1
  6492  0419  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6493                           
  6494                           ;RTX.c: 263: strRow1[iR++]='o';
  6495  041A  306F               	movlw	111
  6496  041B  0020               	movlb	0	; select bank0
  6497  041C  00E2               	movwf	??_RTXUpdateDisplay
  6498  041D  0021               	movlb	1	; select bank1
  6499  041E  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6500  041F  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  6501  0420  0086               	movwf	6
  6502  0421  0187               	clrf	7
  6503  0422  0020               	movlb	0	; select bank0
  6504  0423  0862               	movf	??_RTXUpdateDisplay,w
  6505  0424  0081               	movwf	1
  6506  0425  3001               	movlw	1
  6507  0426  00E2               	movwf	??_RTXUpdateDisplay
  6508  0427  0862               	movf	??_RTXUpdateDisplay,w
  6509  0428  0021               	movlb	1	; select bank1
  6510  0429  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6511                           
  6512                           ;RTX.c: 264: strRow1[iR++]='n';
  6513  042A  306E               	movlw	110
  6514  042B  0020               	movlb	0	; select bank0
  6515  042C  00E2               	movwf	??_RTXUpdateDisplay
  6516  042D  0021               	movlb	1	; select bank1
  6517  042E  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6518  042F  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  6519  0430  0086               	movwf	6
  6520  0431  0187               	clrf	7
  6521  0432  0020               	movlb	0	; select bank0
  6522  0433  0862               	movf	??_RTXUpdateDisplay,w
  6523  0434  0081               	movwf	1
  6524  0435  3001               	movlw	1
  6525  0436  00E2               	movwf	??_RTXUpdateDisplay
  6526  0437  0862               	movf	??_RTXUpdateDisplay,w
  6527  0438  0021               	movlb	1	; select bank1
  6528  0439  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6529                           
  6530                           ;RTX.c: 265: strRow1[iR++]='s';
  6531  043A  3073               	movlw	115
  6532  043B  0020               	movlb	0	; select bank0
  6533  043C  00E2               	movwf	??_RTXUpdateDisplay
  6534  043D  0021               	movlb	1	; select bank1
  6535  043E  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6536  043F  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  6537  0440  0086               	movwf	6
  6538  0441  0187               	clrf	7
  6539  0442  0020               	movlb	0	; select bank0
  6540  0443  0862               	movf	??_RTXUpdateDisplay,w
  6541  0444  0081               	movwf	1
  6542  0445  3001               	movlw	1
  6543  0446  00E2               	movwf	??_RTXUpdateDisplay
  6544  0447  0862               	movf	??_RTXUpdateDisplay,w
  6545  0448  0021               	movlb	1	; select bank1
  6546  0449  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6547                           
  6548                           ;RTX.c: 266: strRow1[iR++]='u';
  6549  044A  3075               	movlw	117
  6550  044B  0020               	movlb	0	; select bank0
  6551  044C  00E2               	movwf	??_RTXUpdateDisplay
  6552  044D  0021               	movlb	1	; select bank1
  6553  044E  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6554  044F  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  6555  0450  0086               	movwf	6
  6556  0451  0187               	clrf	7
  6557  0452  0020               	movlb	0	; select bank0
  6558  0453  0862               	movf	??_RTXUpdateDisplay,w
  6559  0454  0081               	movwf	1
  6560  0455  3001               	movlw	1
  6561  0456  00E2               	movwf	??_RTXUpdateDisplay
  6562  0457  0862               	movf	??_RTXUpdateDisplay,w
  6563  0458  0021               	movlb	1	; select bank1
  6564  0459  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6565                           
  6566                           ;RTX.c: 267: strRow1[iR++]='m';
  6567  045A  306D               	movlw	109
  6568  045B  0020               	movlb	0	; select bank0
  6569  045C  00E2               	movwf	??_RTXUpdateDisplay
  6570  045D  0021               	movlb	1	; select bank1
  6571  045E  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6572  045F  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  6573  0460  0086               	movwf	6
  6574  0461  0187               	clrf	7
  6575  0462  0020               	movlb	0	; select bank0
  6576  0463  0862               	movf	??_RTXUpdateDisplay,w
  6577  0464  0081               	movwf	1
  6578  0465  3001               	movlw	1
  6579  0466  00E2               	movwf	??_RTXUpdateDisplay
  6580  0467  0862               	movf	??_RTXUpdateDisplay,w
  6581  0468  0021               	movlb	1	; select bank1
  6582  0469  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6583                           
  6584                           ;RTX.c: 268: strRow1[iR++]='a';
  6585  046A  3061               	movlw	97
  6586  046B  0020               	movlb	0	; select bank0
  6587  046C  00E2               	movwf	??_RTXUpdateDisplay
  6588  046D  0021               	movlb	1	; select bank1
  6589  046E  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6590  046F  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  6591  0470  0086               	movwf	6
  6592  0471  0187               	clrf	7
  6593  0472  0020               	movlb	0	; select bank0
  6594  0473  0862               	movf	??_RTXUpdateDisplay,w
  6595  0474  0081               	movwf	1
  6596  0475  3001               	movlw	1
  6597  0476  00E2               	movwf	??_RTXUpdateDisplay
  6598  0477  0862               	movf	??_RTXUpdateDisplay,w
  6599  0478  0021               	movlb	1	; select bank1
  6600  0479  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6601                           
  6602                           ;RTX.c: 269: strRow1[iR++]='t';
  6603  047A  3074               	movlw	116
  6604  047B  0020               	movlb	0	; select bank0
  6605  047C  00E2               	movwf	??_RTXUpdateDisplay
  6606  047D  0021               	movlb	1	; select bank1
  6607  047E  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6608  047F  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  6609  0480  0086               	movwf	6
  6610  0481  0187               	clrf	7
  6611  0482  0020               	movlb	0	; select bank0
  6612  0483  0862               	movf	??_RTXUpdateDisplay,w
  6613  0484  0081               	movwf	1
  6614  0485  3001               	movlw	1
  6615  0486  00E2               	movwf	??_RTXUpdateDisplay
  6616  0487  0862               	movf	??_RTXUpdateDisplay,w
  6617  0488  0021               	movlb	1	; select bank1
  6618  0489  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6619                           
  6620                           ;RTX.c: 270: strRow1[iR++]='a';
  6621  048A  3061               	movlw	97
  6622  048B  0020               	movlb	0	; select bank0
  6623  048C  00E2               	movwf	??_RTXUpdateDisplay
  6624  048D  0021               	movlb	1	; select bank1
  6625  048E  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6626  048F  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  6627  0490  0086               	movwf	6
  6628  0491  0187               	clrf	7
  6629  0492  0020               	movlb	0	; select bank0
  6630  0493  0862               	movf	??_RTXUpdateDisplay,w
  6631  0494  0081               	movwf	1
  6632  0495  3001               	movlw	1
  6633  0496  00E2               	movwf	??_RTXUpdateDisplay
  6634  0497  0862               	movf	??_RTXUpdateDisplay,w
  6635  0498  0021               	movlb	1	; select bank1
  6636  0499  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6637                           
  6638                           ;RTX.c: 273: iR=0;
  6639  049A  01E0               	clrf	RTXUpdateDisplay@iR^(0+128)
  6640                           
  6641                           ;RTX.c: 274: if(pgm_cfg.menu.gen_curr_sensIsProg)
  6642  049B  0022               	movlb	2	; select bank2
  6643  049C  1C57               	btfss	(_pgm_cfg^(0+256)+2),0
  6644  049D  2D2C               	goto	l6142
  6645                           
  6646                           ;RTX.c: 275: {
  6647                           ;RTX.c: 276: iR=RTXVisDec(con_power,strRow2,4,iR++)+1;
  6648  049E  082C               	movf	_con_power^(0+256),w
  6649  049F  0020               	movlb	0	; select bank0
  6650  04A0  00D7               	movwf	RTXVisDec@val
  6651  04A1  0022               	movlb	2	; select bank2
  6652  04A2  082D               	movf	(_con_power+1)^(0+256),w
  6653  04A3  0020               	movlb	0	; select bank0
  6654  04A4  00D8               	movwf	RTXVisDec@val+1
  6655  04A5  0022               	movlb	2	; select bank2
  6656  04A6  082E               	movf	(_con_power+2)^(0+256),w
  6657  04A7  0020               	movlb	0	; select bank0
  6658  04A8  00D9               	movwf	RTXVisDec@val+2
  6659  04A9  30BF               	movlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  6660  04AA  00E2               	movwf	??_RTXUpdateDisplay
  6661  04AB  0862               	movf	??_RTXUpdateDisplay,w
  6662  04AC  00DA               	movwf	RTXVisDec@buff
  6663  04AD  3004               	movlw	4
  6664  04AE  00E3               	movwf	??_RTXUpdateDisplay+1
  6665  04AF  0863               	movf	??_RTXUpdateDisplay+1,w
  6666  04B0  00DB               	movwf	RTXVisDec@maxDigit
  6667  04B1  0021               	movlb	1	; select bank1
  6668  04B2  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6669  04B3  0020               	movlb	0	; select bank0
  6670  04B4  00E4               	movwf	??_RTXUpdateDisplay+2
  6671  04B5  0864               	movf	??_RTXUpdateDisplay+2,w
  6672  04B6  00DC               	movwf	RTXVisDec@offset
  6673  04B7  3196  26A5  3180   	fcall	_RTXVisDec
  6674  04BA  3E01               	addlw	1
  6675  04BB  0020               	movlb	0	; select bank0
  6676  04BC  00E5               	movwf	??_RTXUpdateDisplay+3
  6677  04BD  0865               	movf	??_RTXUpdateDisplay+3,w
  6678  04BE  0021               	movlb	1	; select bank1
  6679  04BF  00E0               	movwf	RTXUpdateDisplay@iR^(0+128)
  6680  04C0  3001               	movlw	1
  6681  04C1  0020               	movlb	0	; select bank0
  6682  04C2  00E2               	movwf	??_RTXUpdateDisplay
  6683  04C3  0862               	movf	??_RTXUpdateDisplay,w
  6684  04C4  0021               	movlb	1	; select bank1
  6685  04C5  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6686                           
  6687                           ;RTX.c: 277: strRow2[iR++]='W';
  6688  04C6  3057               	movlw	87
  6689  04C7  0020               	movlb	0	; select bank0
  6690  04C8  00E2               	movwf	??_RTXUpdateDisplay
  6691  04C9  0021               	movlb	1	; select bank1
  6692  04CA  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6693  04CB  3EBF               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  6694  04CC  0086               	movwf	6
  6695  04CD  0187               	clrf	7
  6696  04CE  0020               	movlb	0	; select bank0
  6697  04CF  0862               	movf	??_RTXUpdateDisplay,w
  6698  04D0  0081               	movwf	1
  6699  04D1  3001               	movlw	1
  6700  04D2  00E2               	movwf	??_RTXUpdateDisplay
  6701  04D3  0862               	movf	??_RTXUpdateDisplay,w
  6702  04D4  0021               	movlb	1	; select bank1
  6703  04D5  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6704                           
  6705                           ;RTX.c: 278: strRow2[iR++]=' ';
  6706  04D6  3020               	movlw	32
  6707  04D7  0020               	movlb	0	; select bank0
  6708  04D8  00E2               	movwf	??_RTXUpdateDisplay
  6709  04D9  0021               	movlb	1	; select bank1
  6710  04DA  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6711  04DB  3EBF               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  6712  04DC  0086               	movwf	6
  6713  04DD  0187               	clrf	7
  6714  04DE  0020               	movlb	0	; select bank0
  6715  04DF  0862               	movf	??_RTXUpdateDisplay,w
  6716  04E0  0081               	movwf	1
  6717  04E1  3001               	movlw	1
  6718  04E2  00E2               	movwf	??_RTXUpdateDisplay
  6719  04E3  0862               	movf	??_RTXUpdateDisplay,w
  6720  04E4  0021               	movlb	1	; select bank1
  6721  04E5  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6722                           
  6723                           ;RTX.c: 279: strRow2[iR++]='-';
  6724  04E6  302D               	movlw	45
  6725  04E7  0020               	movlb	0	; select bank0
  6726  04E8  00E2               	movwf	??_RTXUpdateDisplay
  6727  04E9  0021               	movlb	1	; select bank1
  6728  04EA  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6729  04EB  3EBF               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  6730  04EC  0086               	movwf	6
  6731  04ED  0187               	clrf	7
  6732  04EE  0020               	movlb	0	; select bank0
  6733  04EF  0862               	movf	??_RTXUpdateDisplay,w
  6734  04F0  0081               	movwf	1
  6735  04F1  3001               	movlw	1
  6736  04F2  00E2               	movwf	??_RTXUpdateDisplay
  6737  04F3  0862               	movf	??_RTXUpdateDisplay,w
  6738  04F4  0021               	movlb	1	; select bank1
  6739  04F5  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6740                           
  6741                           ;RTX.c: 280: strRow2[iR++]=' ';
  6742  04F6  3020               	movlw	32
  6743  04F7  0020               	movlb	0	; select bank0
  6744  04F8  00E2               	movwf	??_RTXUpdateDisplay
  6745  04F9  0021               	movlb	1	; select bank1
  6746  04FA  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6747  04FB  3EBF               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  6748  04FC  0086               	movwf	6
  6749  04FD  0187               	clrf	7
  6750  04FE  0020               	movlb	0	; select bank0
  6751  04FF  0862               	movf	??_RTXUpdateDisplay,w
  6752  0500  0081               	movwf	1
  6753  0501  3001               	movlw	1
  6754  0502  00E2               	movwf	??_RTXUpdateDisplay
  6755  0503  0862               	movf	??_RTXUpdateDisplay,w
  6756  0504  0021               	movlb	1	; select bank1
  6757  0505  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6758                           
  6759                           ;RTX.c: 281: strRow2[iR++]=0x00;
  6760  0506  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6761  0507  3EBF               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  6762  0508  0086               	movwf	6
  6763  0509  0187               	clrf	7
  6764  050A  0181               	clrf	1
  6765  050B  3001               	movlw	1
  6766  050C  0020               	movlb	0	; select bank0
  6767  050D  00E2               	movwf	??_RTXUpdateDisplay
  6768  050E  0862               	movf	??_RTXUpdateDisplay,w
  6769  050F  0021               	movlb	1	; select bank1
  6770  0510  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6771                           
  6772                           ;RTX.c: 282: strRow2[iR++]='=';
  6773  0511  303D               	movlw	61
  6774  0512  0020               	movlb	0	; select bank0
  6775  0513  00E2               	movwf	??_RTXUpdateDisplay
  6776  0514  0021               	movlb	1	; select bank1
  6777  0515  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6778  0516  3EBF               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  6779  0517  0086               	movwf	6
  6780  0518  0187               	clrf	7
  6781  0519  0020               	movlb	0	; select bank0
  6782  051A  0862               	movf	??_RTXUpdateDisplay,w
  6783  051B  0081               	movwf	1
  6784  051C  3001               	movlw	1
  6785  051D  00E2               	movwf	??_RTXUpdateDisplay
  6786  051E  0862               	movf	??_RTXUpdateDisplay,w
  6787  051F  0021               	movlb	1	; select bank1
  6788  0520  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6789                           
  6790                           ;RTX.c: 283: iR=RTXVisDec(batt_con_curr_sens,strRow2,3,iR++)+1;
  6791  0521  0022               	movlb	2	; select bank2
  6792  0522  0820               	movf	_batt_con_curr_sens^(0+256),w
  6793  0523  0020               	movlb	0	; select bank0
  6794  0524  00D7               	movwf	RTXVisDec@val
  6795  0525  0022               	movlb	2	; select bank2
  6796  0526  0821               	movf	(_batt_con_curr_sens+1)^(0+256),w
  6797  0527  0020               	movlb	0	; select bank0
  6798  0528  00D8               	movwf	RTXVisDec@val+1
  6799  0529  0022               	movlb	2	; select bank2
  6800  052A  0822               	movf	(_batt_con_curr_sens+2)^(0+256),w
  6801  052B  2EE4               	goto	L13
  6802  052C                     l6142:	
  6803                           ;RTX.c: 285: }
  6804                           
  6805                           ;RTX.c: 284: strRow2[iR++]='V';
  6806                           
  6807                           
  6808                           ;RTX.c: 286: else
  6809                           ;RTX.c: 287: {
  6810                           ;RTX.c: 288: strRow2[iR++]='?';
  6811  052C  303F               	movlw	63
  6812  052D  0020               	movlb	0	; select bank0
  6813  052E  00E2               	movwf	??_RTXUpdateDisplay
  6814  052F  0021               	movlb	1	; select bank1
  6815  0530  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6816  0531  3EBF               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  6817  0532  0086               	movwf	6
  6818  0533  0187               	clrf	7
  6819  0534  0020               	movlb	0	; select bank0
  6820  0535  0862               	movf	??_RTXUpdateDisplay,w
  6821  0536  0081               	movwf	1
  6822  0537  3001               	movlw	1
  6823  0538  00E2               	movwf	??_RTXUpdateDisplay
  6824  0539  0862               	movf	??_RTXUpdateDisplay,w
  6825  053A  0021               	movlb	1	; select bank1
  6826  053B  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6827                           
  6828                           ;RTX.c: 289: strRow2[iR++]='?';
  6829  053C  303F               	movlw	63
  6830  053D  0020               	movlb	0	; select bank0
  6831  053E  00E2               	movwf	??_RTXUpdateDisplay
  6832  053F  0021               	movlb	1	; select bank1
  6833  0540  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6834  0541  3EBF               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  6835  0542  0086               	movwf	6
  6836  0543  0187               	clrf	7
  6837  0544  0020               	movlb	0	; select bank0
  6838  0545  0862               	movf	??_RTXUpdateDisplay,w
  6839  0546  0081               	movwf	1
  6840  0547  3001               	movlw	1
  6841  0548  00E2               	movwf	??_RTXUpdateDisplay
  6842  0549  0862               	movf	??_RTXUpdateDisplay,w
  6843  054A  0021               	movlb	1	; select bank1
  6844  054B  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6845                           
  6846                           ;RTX.c: 290: strRow2[iR++]='?';
  6847  054C  303F               	movlw	63
  6848  054D  0020               	movlb	0	; select bank0
  6849  054E  00E2               	movwf	??_RTXUpdateDisplay
  6850  054F  0021               	movlb	1	; select bank1
  6851  0550  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6852  0551  3EBF               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  6853  0552  0086               	movwf	6
  6854  0553  0187               	clrf	7
  6855  0554  0020               	movlb	0	; select bank0
  6856  0555  0862               	movf	??_RTXUpdateDisplay,w
  6857  0556  0081               	movwf	1
  6858  0557  3001               	movlw	1
  6859  0558  00E2               	movwf	??_RTXUpdateDisplay
  6860  0559  0862               	movf	??_RTXUpdateDisplay,w
  6861  055A  0021               	movlb	1	; select bank1
  6862  055B  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6863                           
  6864                           ;RTX.c: 291: strRow2[iR++]='?';
  6865  055C  303F               	movlw	63
  6866  055D  0020               	movlb	0	; select bank0
  6867  055E  00E2               	movwf	??_RTXUpdateDisplay
  6868  055F  0021               	movlb	1	; select bank1
  6869  0560  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6870  0561  3EBF               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  6871  0562  0086               	movwf	6
  6872  0563  0187               	clrf	7
  6873  0564  0020               	movlb	0	; select bank0
  6874  0565  0862               	movf	??_RTXUpdateDisplay,w
  6875  0566  0081               	movwf	1
  6876  0567  3001               	movlw	1
  6877  0568  00E2               	movwf	??_RTXUpdateDisplay
  6878  0569  0862               	movf	??_RTXUpdateDisplay,w
  6879  056A  0021               	movlb	1	; select bank1
  6880  056B  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6881                           
  6882                           ;RTX.c: 292: strRow2[iR++]='W';
  6883  056C  3057               	movlw	87
  6884  056D  2F41               	goto	L9
  6885  056E                     l6180:	
  6886                           ;RTX.c: 302: }
  6887                           ;RTX.c: 303: }
  6888                           
  6889                           ;RTX.c: 301: strRow2[iR++]='V';
  6890                           
  6891                           ;RTX.c: 300: strRow2[iR++]='?';
  6892                           
  6893                           ;RTX.c: 299: strRow2[iR++]='?';
  6894                           
  6895                           ;RTX.c: 298: strRow2[iR++]='?';
  6896                           
  6897                           ;RTX.c: 297: strRow2[iR++]='=';
  6898                           
  6899                           ;RTX.c: 296: strRow2[iR++]=0x00;
  6900                           
  6901                           ;RTX.c: 295: strRow2[iR++]=' ';
  6902                           
  6903                           ;RTX.c: 294: strRow2[iR++]='-';
  6904                           
  6905                           ;RTX.c: 293: strRow2[iR++]=' ';
  6906                           
  6907                           
  6908                           ;RTX.c: 304: else if(val==UPD_DPY_VOLTSENS)
  6909  056E  3003               	movlw	3
  6910  056F  065F               	xorwf	RTXUpdateDisplay@val^(0+128),w
  6911  0570  1D03               	btfss	3,2
  6912  0571  2FDD               	goto	L21
  6913                           
  6914                           ;RTX.c: 305: {
  6915                           ;RTX.c: 306: iR=0;
  6916  0572  01E0               	clrf	RTXUpdateDisplay@iR^(0+128)
  6917                           
  6918                           ;RTX.c: 307: strRow1[iR++]='T';
  6919  0573  3054               	movlw	84
  6920  0574  0020               	movlb	0	; select bank0
  6921  0575  00E2               	movwf	??_RTXUpdateDisplay
  6922  0576  0021               	movlb	1	; select bank1
  6923  0577  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6924  0578  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  6925  0579  0086               	movwf	6
  6926  057A  0187               	clrf	7
  6927  057B  0020               	movlb	0	; select bank0
  6928  057C  0862               	movf	??_RTXUpdateDisplay,w
  6929  057D  0081               	movwf	1
  6930  057E  3001               	movlw	1
  6931  057F  00E2               	movwf	??_RTXUpdateDisplay
  6932  0580  0862               	movf	??_RTXUpdateDisplay,w
  6933  0581  0021               	movlb	1	; select bank1
  6934  0582  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6935                           
  6936                           ;RTX.c: 308: strRow1[iR++]='e';
  6937  0583  3065               	movlw	101
  6938  0584  0020               	movlb	0	; select bank0
  6939  0585  00E2               	movwf	??_RTXUpdateDisplay
  6940  0586  0021               	movlb	1	; select bank1
  6941  0587  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6942  0588  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  6943  0589  0086               	movwf	6
  6944  058A  0187               	clrf	7
  6945  058B  0020               	movlb	0	; select bank0
  6946  058C  0862               	movf	??_RTXUpdateDisplay,w
  6947  058D  0081               	movwf	1
  6948  058E  3001               	movlw	1
  6949  058F  00E2               	movwf	??_RTXUpdateDisplay
  6950  0590  0862               	movf	??_RTXUpdateDisplay,w
  6951  0591  0021               	movlb	1	; select bank1
  6952  0592  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6953                           
  6954                           ;RTX.c: 309: strRow1[iR++]='n';
  6955  0593  306E               	movlw	110
  6956  0594  0020               	movlb	0	; select bank0
  6957  0595  00E2               	movwf	??_RTXUpdateDisplay
  6958  0596  0021               	movlb	1	; select bank1
  6959  0597  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6960  0598  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  6961  0599  0086               	movwf	6
  6962  059A  0187               	clrf	7
  6963  059B  0020               	movlb	0	; select bank0
  6964  059C  0862               	movf	??_RTXUpdateDisplay,w
  6965  059D  0081               	movwf	1
  6966  059E  3001               	movlw	1
  6967  059F  00E2               	movwf	??_RTXUpdateDisplay
  6968  05A0  0862               	movf	??_RTXUpdateDisplay,w
  6969  05A1  0021               	movlb	1	; select bank1
  6970  05A2  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6971                           
  6972                           ;RTX.c: 310: strRow1[iR++]='s';
  6973  05A3  3073               	movlw	115
  6974  05A4  0020               	movlb	0	; select bank0
  6975  05A5  00E2               	movwf	??_RTXUpdateDisplay
  6976  05A6  0021               	movlb	1	; select bank1
  6977  05A7  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6978  05A8  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  6979  05A9  0086               	movwf	6
  6980  05AA  0187               	clrf	7
  6981  05AB  0020               	movlb	0	; select bank0
  6982  05AC  0862               	movf	??_RTXUpdateDisplay,w
  6983  05AD  0081               	movwf	1
  6984  05AE  3001               	movlw	1
  6985  05AF  00E2               	movwf	??_RTXUpdateDisplay
  6986  05B0  0862               	movf	??_RTXUpdateDisplay,w
  6987  05B1  0021               	movlb	1	; select bank1
  6988  05B2  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  6989                           
  6990                           ;RTX.c: 311: strRow1[iR++]='.';
  6991  05B3  302E               	movlw	46
  6992  05B4  0020               	movlb	0	; select bank0
  6993  05B5  00E2               	movwf	??_RTXUpdateDisplay
  6994  05B6  0021               	movlb	1	; select bank1
  6995  05B7  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  6996  05B8  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  6997  05B9  0086               	movwf	6
  6998  05BA  0187               	clrf	7
  6999  05BB  0020               	movlb	0	; select bank0
  7000  05BC  0862               	movf	??_RTXUpdateDisplay,w
  7001  05BD  0081               	movwf	1
  7002  05BE  3001               	movlw	1
  7003  05BF  00E2               	movwf	??_RTXUpdateDisplay
  7004  05C0  0862               	movf	??_RTXUpdateDisplay,w
  7005  05C1  0021               	movlb	1	; select bank1
  7006  05C2  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  7007                           
  7008                           ;RTX.c: 312: strRow1[iR++]=' ';
  7009  05C3  3020               	movlw	32
  7010  05C4  0020               	movlb	0	; select bank0
  7011  05C5  00E2               	movwf	??_RTXUpdateDisplay
  7012  05C6  0021               	movlb	1	; select bank1
  7013  05C7  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  7014  05C8  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  7015  05C9  0086               	movwf	6
  7016  05CA  0187               	clrf	7
  7017  05CB  0020               	movlb	0	; select bank0
  7018  05CC  0862               	movf	??_RTXUpdateDisplay,w
  7019  05CD  0081               	movwf	1
  7020  05CE  3001               	movlw	1
  7021  05CF  00E2               	movwf	??_RTXUpdateDisplay
  7022  05D0  0862               	movf	??_RTXUpdateDisplay,w
  7023  05D1  0021               	movlb	1	; select bank1
  7024  05D2  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  7025                           
  7026                           ;RTX.c: 313: strRow1[iR++]='m';
  7027  05D3  306D               	movlw	109
  7028  05D4  0020               	movlb	0	; select bank0
  7029  05D5  00E2               	movwf	??_RTXUpdateDisplay
  7030  05D6  0021               	movlb	1	; select bank1
  7031  05D7  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  7032  05D8  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  7033  05D9  0086               	movwf	6
  7034  05DA  0187               	clrf	7
  7035  05DB  0020               	movlb	0	; select bank0
  7036  05DC  0862               	movf	??_RTXUpdateDisplay,w
  7037  05DD  0081               	movwf	1
  7038  05DE  3001               	movlw	1
  7039  05DF  00E2               	movwf	??_RTXUpdateDisplay
  7040  05E0  0862               	movf	??_RTXUpdateDisplay,w
  7041  05E1  0021               	movlb	1	; select bank1
  7042  05E2  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  7043                           
  7044                           ;RTX.c: 314: strRow1[iR++]='i';
  7045  05E3  3069               	movlw	105
  7046  05E4  0020               	movlb	0	; select bank0
  7047  05E5  00E2               	movwf	??_RTXUpdateDisplay
  7048  05E6  0021               	movlb	1	; select bank1
  7049  05E7  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  7050  05E8  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  7051  05E9  0086               	movwf	6
  7052  05EA  0187               	clrf	7
  7053  05EB  0020               	movlb	0	; select bank0
  7054  05EC  0862               	movf	??_RTXUpdateDisplay,w
  7055  05ED  0081               	movwf	1
  7056  05EE  3001               	movlw	1
  7057  05EF  00E2               	movwf	??_RTXUpdateDisplay
  7058  05F0  0862               	movf	??_RTXUpdateDisplay,w
  7059  05F1  0021               	movlb	1	; select bank1
  7060  05F2  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  7061                           
  7062                           ;RTX.c: 315: strRow1[iR++]='s';
  7063  05F3  3073               	movlw	115
  7064  05F4  0020               	movlb	0	; select bank0
  7065  05F5  00E2               	movwf	??_RTXUpdateDisplay
  7066  05F6  0021               	movlb	1	; select bank1
  7067  05F7  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  7068  05F8  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  7069  05F9  0086               	movwf	6
  7070  05FA  0187               	clrf	7
  7071  05FB  0020               	movlb	0	; select bank0
  7072  05FC  0862               	movf	??_RTXUpdateDisplay,w
  7073  05FD  0081               	movwf	1
  7074  05FE  3001               	movlw	1
  7075  05FF  00E2               	movwf	??_RTXUpdateDisplay
  7076  0600  0862               	movf	??_RTXUpdateDisplay,w
  7077  0601  0021               	movlb	1	; select bank1
  7078  0602  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  7079                           
  7080                           ;RTX.c: 316: strRow1[iR++]='u';
  7081  0603  3075               	movlw	117
  7082  0604  0020               	movlb	0	; select bank0
  7083  0605  00E2               	movwf	??_RTXUpdateDisplay
  7084  0606  0021               	movlb	1	; select bank1
  7085  0607  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  7086  0608  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  7087  0609  0086               	movwf	6
  7088  060A  0187               	clrf	7
  7089  060B  0020               	movlb	0	; select bank0
  7090  060C  0862               	movf	??_RTXUpdateDisplay,w
  7091  060D  0081               	movwf	1
  7092  060E  3001               	movlw	1
  7093  060F  00E2               	movwf	??_RTXUpdateDisplay
  7094  0610  0862               	movf	??_RTXUpdateDisplay,w
  7095  0611  0021               	movlb	1	; select bank1
  7096  0612  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  7097                           
  7098                           ;RTX.c: 317: strRow1[iR++]='r';
  7099  0613  3072               	movlw	114
  7100  0614  0020               	movlb	0	; select bank0
  7101  0615  00E2               	movwf	??_RTXUpdateDisplay
  7102  0616  0021               	movlb	1	; select bank1
  7103  0617  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  7104  0618  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  7105  0619  0086               	movwf	6
  7106  061A  0187               	clrf	7
  7107  061B  0020               	movlb	0	; select bank0
  7108  061C  0862               	movf	??_RTXUpdateDisplay,w
  7109  061D  0081               	movwf	1
  7110  061E  3001               	movlw	1
  7111  061F  00E2               	movwf	??_RTXUpdateDisplay
  7112  0620  0862               	movf	??_RTXUpdateDisplay,w
  7113  0621  0021               	movlb	1	; select bank1
  7114  0622  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  7115                           
  7116                           ;RTX.c: 318: strRow1[iR++]='a';
  7117  0623  3061               	movlw	97
  7118  0624  0020               	movlb	0	; select bank0
  7119  0625  00E2               	movwf	??_RTXUpdateDisplay
  7120  0626  0021               	movlb	1	; select bank1
  7121  0627  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  7122  0628  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  7123  0629  0086               	movwf	6
  7124  062A  0187               	clrf	7
  7125  062B  0020               	movlb	0	; select bank0
  7126  062C  0862               	movf	??_RTXUpdateDisplay,w
  7127  062D  0081               	movwf	1
  7128  062E  3001               	movlw	1
  7129  062F  00E2               	movwf	??_RTXUpdateDisplay
  7130  0630  0862               	movf	??_RTXUpdateDisplay,w
  7131  0631  0021               	movlb	1	; select bank1
  7132  0632  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  7133                           
  7134                           ;RTX.c: 319: strRow1[iR++]='t';
  7135  0633  3074               	movlw	116
  7136  0634  0020               	movlb	0	; select bank0
  7137  0635  00E2               	movwf	??_RTXUpdateDisplay
  7138  0636  0021               	movlb	1	; select bank1
  7139  0637  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  7140  0638  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  7141  0639  0086               	movwf	6
  7142  063A  0187               	clrf	7
  7143  063B  0020               	movlb	0	; select bank0
  7144  063C  0862               	movf	??_RTXUpdateDisplay,w
  7145  063D  0081               	movwf	1
  7146  063E  3001               	movlw	1
  7147  063F  00E2               	movwf	??_RTXUpdateDisplay
  7148  0640  0862               	movf	??_RTXUpdateDisplay,w
  7149  0641  0021               	movlb	1	; select bank1
  7150  0642  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  7151                           
  7152                           ;RTX.c: 320: strRow1[iR++]='a';
  7153  0643  3061               	movlw	97
  7154  0644  0020               	movlb	0	; select bank0
  7155  0645  00E2               	movwf	??_RTXUpdateDisplay
  7156  0646  0021               	movlb	1	; select bank1
  7157  0647  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  7158  0648  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
  7159  0649  0086               	movwf	6
  7160  064A  0187               	clrf	7
  7161  064B  0020               	movlb	0	; select bank0
  7162  064C  0862               	movf	??_RTXUpdateDisplay,w
  7163  064D  0081               	movwf	1
  7164  064E  3001               	movlw	1
  7165  064F  00E2               	movwf	??_RTXUpdateDisplay
  7166  0650  0862               	movf	??_RTXUpdateDisplay,w
  7167  0651  0021               	movlb	1	; select bank1
  7168  0652  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  7169                           
  7170                           ;RTX.c: 323: iR=0;
  7171  0653  01E0               	clrf	RTXUpdateDisplay@iR^(0+128)
  7172                           
  7173                           ;RTX.c: 324: if(pgm_cfg.menu.gen_curr_sensIsProg)
  7174  0654  0022               	movlb	2	; select bank2
  7175  0655  1C57               	btfss	(_pgm_cfg^(0+256)+2),0
  7176  0656  2F00               	goto	l6276
  7177                           
  7178                           ;RTX.c: 325: {
  7179                           ;RTX.c: 326: iR=RTXVisDec(volt_sens,strRow2,4,iR++)+1;
  7180  0657  0835               	movf	_volt_sens^(0+256),w
  7181  0658  0020               	movlb	0	; select bank0
  7182  0659  00D7               	movwf	RTXVisDec@val
  7183  065A  0022               	movlb	2	; select bank2
  7184  065B  0836               	movf	(_volt_sens+1)^(0+256),w
  7185  065C  0020               	movlb	0	; select bank0
  7186  065D  00D8               	movwf	RTXVisDec@val+1
  7187  065E  0022               	movlb	2	; select bank2
  7188  065F  0837               	movf	(_volt_sens+2)^(0+256),w
  7189  0660  0020               	movlb	0	; select bank0
  7190  0661  00D9               	movwf	RTXVisDec@val+2
  7191  0662  30BF               	movlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  7192  0663  00E2               	movwf	??_RTXUpdateDisplay
  7193  0664  0862               	movf	??_RTXUpdateDisplay,w
  7194  0665  00DA               	movwf	RTXVisDec@buff
  7195  0666  3004               	movlw	4
  7196  0667  00E3               	movwf	??_RTXUpdateDisplay+1
  7197  0668  0863               	movf	??_RTXUpdateDisplay+1,w
  7198  0669  00DB               	movwf	RTXVisDec@maxDigit
  7199  066A  0021               	movlb	1	; select bank1
  7200  066B  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  7201  066C  0020               	movlb	0	; select bank0
  7202  066D  00E4               	movwf	??_RTXUpdateDisplay+2
  7203  066E  0864               	movf	??_RTXUpdateDisplay+2,w
  7204  066F  00DC               	movwf	RTXVisDec@offset
  7205  0670  3196  26A5  3180   	fcall	_RTXVisDec
  7206  0673  3E01               	addlw	1
  7207  0674  0020               	movlb	0	; select bank0
  7208  0675  00E5               	movwf	??_RTXUpdateDisplay+3
  7209  0676  0865               	movf	??_RTXUpdateDisplay+3,w
  7210  0677  0021               	movlb	1	; select bank1
  7211  0678  00E0               	movwf	RTXUpdateDisplay@iR^(0+128)
  7212  0679  3001               	movlw	1
  7213  067A  0020               	movlb	0	; select bank0
  7214  067B  00E2               	movwf	??_RTXUpdateDisplay
  7215  067C  0862               	movf	??_RTXUpdateDisplay,w
  7216  067D  0021               	movlb	1	; select bank1
  7217  067E  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  7218                           
  7219                           ;RTX.c: 327: strRow2[iR++]='V';
  7220  067F  3056               	movlw	86
  7221  0680  0020               	movlb	0	; select bank0
  7222  0681  00E2               	movwf	??_RTXUpdateDisplay
  7223  0682  0021               	movlb	1	; select bank1
  7224  0683  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  7225  0684  3EBF               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  7226  0685  0086               	movwf	6
  7227  0686  0187               	clrf	7
  7228  0687  0020               	movlb	0	; select bank0
  7229  0688  0862               	movf	??_RTXUpdateDisplay,w
  7230  0689  0081               	movwf	1
  7231  068A  3001               	movlw	1
  7232  068B  00E2               	movwf	??_RTXUpdateDisplay
  7233  068C  0862               	movf	??_RTXUpdateDisplay,w
  7234  068D  0021               	movlb	1	; select bank1
  7235  068E  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  7236                           
  7237                           ;RTX.c: 328: strRow2[iR++]=' ';
  7238  068F  3020               	movlw	32
  7239  0690  0020               	movlb	0	; select bank0
  7240  0691  00E2               	movwf	??_RTXUpdateDisplay
  7241  0692  0021               	movlb	1	; select bank1
  7242  0693  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  7243  0694  3EBF               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  7244  0695  0086               	movwf	6
  7245  0696  0187               	clrf	7
  7246  0697  0020               	movlb	0	; select bank0
  7247  0698  0862               	movf	??_RTXUpdateDisplay,w
  7248  0699  0081               	movwf	1
  7249  069A  3001               	movlw	1
  7250  069B  00E2               	movwf	??_RTXUpdateDisplay
  7251  069C  0862               	movf	??_RTXUpdateDisplay,w
  7252  069D  0021               	movlb	1	; select bank1
  7253  069E  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  7254                           
  7255                           ;RTX.c: 329: strRow2[iR++]='-';
  7256  069F  302D               	movlw	45
  7257  06A0  0020               	movlb	0	; select bank0
  7258  06A1  00E2               	movwf	??_RTXUpdateDisplay
  7259  06A2  0021               	movlb	1	; select bank1
  7260  06A3  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  7261  06A4  3EBF               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  7262  06A5  0086               	movwf	6
  7263  06A6  0187               	clrf	7
  7264  06A7  0020               	movlb	0	; select bank0
  7265  06A8  0862               	movf	??_RTXUpdateDisplay,w
  7266  06A9  0081               	movwf	1
  7267  06AA  3001               	movlw	1
  7268  06AB  00E2               	movwf	??_RTXUpdateDisplay
  7269  06AC  0862               	movf	??_RTXUpdateDisplay,w
  7270  06AD  0021               	movlb	1	; select bank1
  7271  06AE  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  7272                           
  7273                           ;RTX.c: 330: strRow2[iR++]=' ';
  7274  06AF  3020               	movlw	32
  7275  06B0  0020               	movlb	0	; select bank0
  7276  06B1  00E2               	movwf	??_RTXUpdateDisplay
  7277  06B2  0021               	movlb	1	; select bank1
  7278  06B3  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  7279  06B4  3EBF               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  7280  06B5  0086               	movwf	6
  7281  06B6  0187               	clrf	7
  7282  06B7  0020               	movlb	0	; select bank0
  7283  06B8  0862               	movf	??_RTXUpdateDisplay,w
  7284  06B9  0081               	movwf	1
  7285  06BA  3001               	movlw	1
  7286  06BB  00E2               	movwf	??_RTXUpdateDisplay
  7287  06BC  0862               	movf	??_RTXUpdateDisplay,w
  7288  06BD  0021               	movlb	1	; select bank1
  7289  06BE  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  7290                           
  7291                           ;RTX.c: 331: strRow2[iR++]=0x00;
  7292  06BF  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  7293  06C0  3EBF               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  7294  06C1  0086               	movwf	6
  7295  06C2  0187               	clrf	7
  7296  06C3  0181               	clrf	1
  7297  06C4  3001               	movlw	1
  7298  06C5  0020               	movlb	0	; select bank0
  7299  06C6  00E2               	movwf	??_RTXUpdateDisplay
  7300  06C7  0862               	movf	??_RTXUpdateDisplay,w
  7301  06C8  0021               	movlb	1	; select bank1
  7302  06C9  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  7303                           
  7304                           ;RTX.c: 332: strRow2[iR++]='=';
  7305  06CA  303D               	movlw	61
  7306  06CB  0020               	movlb	0	; select bank0
  7307  06CC  00E2               	movwf	??_RTXUpdateDisplay
  7308  06CD  0021               	movlb	1	; select bank1
  7309  06CE  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  7310  06CF  3EBF               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  7311  06D0  0086               	movwf	6
  7312  06D1  0187               	clrf	7
  7313  06D2  0020               	movlb	0	; select bank0
  7314  06D3  0862               	movf	??_RTXUpdateDisplay,w
  7315  06D4  0081               	movwf	1
  7316  06D5  3001               	movlw	1
  7317  06D6  00E2               	movwf	??_RTXUpdateDisplay
  7318  06D7  0862               	movf	??_RTXUpdateDisplay,w
  7319  06D8  0021               	movlb	1	; select bank1
  7320  06D9  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  7321                           
  7322                           ;RTX.c: 333: iR=RTXVisDec(batt_volt_sens,strRow2,3,iR++)+1;
  7323  06DA  0022               	movlb	2	; select bank2
  7324  06DB  0826               	movf	_batt_volt_sens^(0+256),w
  7325  06DC  0020               	movlb	0	; select bank0
  7326  06DD  00D7               	movwf	RTXVisDec@val
  7327  06DE  0022               	movlb	2	; select bank2
  7328  06DF  0827               	movf	(_batt_volt_sens+1)^(0+256),w
  7329  06E0  0020               	movlb	0	; select bank0
  7330  06E1  00D8               	movwf	RTXVisDec@val+1
  7331  06E2  0022               	movlb	2	; select bank2
  7332  06E3  0828               	movf	(_batt_volt_sens+2)^(0+256),w
  7333  06E4                     L13:	
  7334  06E4  0020               	movlb	0	; select bank0
  7335  06E5  00D9               	movwf	RTXVisDec@val+2
  7336  06E6  30BF               	movlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  7337  06E7  00E2               	movwf	??_RTXUpdateDisplay
  7338  06E8  0862               	movf	??_RTXUpdateDisplay,w
  7339  06E9  00DA               	movwf	RTXVisDec@buff
  7340  06EA  3003               	movlw	3
  7341  06EB  00E3               	movwf	??_RTXUpdateDisplay+1
  7342  06EC  0863               	movf	??_RTXUpdateDisplay+1,w
  7343  06ED  00DB               	movwf	RTXVisDec@maxDigit
  7344  06EE  0021               	movlb	1	; select bank1
  7345  06EF  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  7346  06F0  0020               	movlb	0	; select bank0
  7347  06F1  00E4               	movwf	??_RTXUpdateDisplay+2
  7348  06F2  0864               	movf	??_RTXUpdateDisplay+2,w
  7349  06F3  00DC               	movwf	RTXVisDec@offset
  7350  06F4  3196  26A5  3180   	fcall	_RTXVisDec
  7351  06F7  3E01               	addlw	1
  7352  06F8  0020               	movlb	0	; select bank0
  7353  06F9  00E5               	movwf	??_RTXUpdateDisplay+3
  7354  06FA  0865               	movf	??_RTXUpdateDisplay+3,w
  7355  06FB  0021               	movlb	1	; select bank1
  7356  06FC  00E0               	movwf	RTXUpdateDisplay@iR^(0+128)
  7357  06FD  3001               	movlw	1
  7358  06FE  0020               	movlb	0	; select bank0
  7359  06FF  2FC7               	goto	L10
  7360  0700                     l6276:	
  7361                           ;RTX.c: 335: }
  7362                           
  7363                           ;RTX.c: 334: strRow2[iR++]='V';
  7364                           
  7365                           
  7366                           ;RTX.c: 336: else
  7367                           ;RTX.c: 337: {
  7368                           ;RTX.c: 338: strRow2[iR++]='?';
  7369  0700  303F               	movlw	63
  7370  0701  0020               	movlb	0	; select bank0
  7371  0702  00E2               	movwf	??_RTXUpdateDisplay
  7372  0703  0021               	movlb	1	; select bank1
  7373  0704  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  7374  0705  3EBF               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  7375  0706  0086               	movwf	6
  7376  0707  0187               	clrf	7
  7377  0708  0020               	movlb	0	; select bank0
  7378  0709  0862               	movf	??_RTXUpdateDisplay,w
  7379  070A  0081               	movwf	1
  7380  070B  3001               	movlw	1
  7381  070C  00E2               	movwf	??_RTXUpdateDisplay
  7382  070D  0862               	movf	??_RTXUpdateDisplay,w
  7383  070E  0021               	movlb	1	; select bank1
  7384  070F  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  7385                           
  7386                           ;RTX.c: 339: strRow2[iR++]='?';
  7387  0710  303F               	movlw	63
  7388  0711  0020               	movlb	0	; select bank0
  7389  0712  00E2               	movwf	??_RTXUpdateDisplay
  7390  0713  0021               	movlb	1	; select bank1
  7391  0714  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  7392  0715  3EBF               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  7393  0716  0086               	movwf	6
  7394  0717  0187               	clrf	7
  7395  0718  0020               	movlb	0	; select bank0
  7396  0719  0862               	movf	??_RTXUpdateDisplay,w
  7397  071A  0081               	movwf	1
  7398  071B  3001               	movlw	1
  7399  071C  00E2               	movwf	??_RTXUpdateDisplay
  7400  071D  0862               	movf	??_RTXUpdateDisplay,w
  7401  071E  0021               	movlb	1	; select bank1
  7402  071F  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  7403                           
  7404                           ;RTX.c: 340: strRow2[iR++]='?';
  7405  0720  303F               	movlw	63
  7406  0721  0020               	movlb	0	; select bank0
  7407  0722  00E2               	movwf	??_RTXUpdateDisplay
  7408  0723  0021               	movlb	1	; select bank1
  7409  0724  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  7410  0725  3EBF               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  7411  0726  0086               	movwf	6
  7412  0727  0187               	clrf	7
  7413  0728  0020               	movlb	0	; select bank0
  7414  0729  0862               	movf	??_RTXUpdateDisplay,w
  7415  072A  0081               	movwf	1
  7416  072B  3001               	movlw	1
  7417  072C  00E2               	movwf	??_RTXUpdateDisplay
  7418  072D  0862               	movf	??_RTXUpdateDisplay,w
  7419  072E  0021               	movlb	1	; select bank1
  7420  072F  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  7421                           
  7422                           ;RTX.c: 341: strRow2[iR++]='?';
  7423  0730  303F               	movlw	63
  7424  0731  0020               	movlb	0	; select bank0
  7425  0732  00E2               	movwf	??_RTXUpdateDisplay
  7426  0733  0021               	movlb	1	; select bank1
  7427  0734  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  7428  0735  3EBF               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  7429  0736  0086               	movwf	6
  7430  0737  0187               	clrf	7
  7431  0738  0020               	movlb	0	; select bank0
  7432  0739  0862               	movf	??_RTXUpdateDisplay,w
  7433  073A  0081               	movwf	1
  7434  073B  3001               	movlw	1
  7435  073C  00E2               	movwf	??_RTXUpdateDisplay
  7436  073D  0862               	movf	??_RTXUpdateDisplay,w
  7437  073E  0021               	movlb	1	; select bank1
  7438  073F  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  7439                           
  7440                           ;RTX.c: 342: strRow2[iR++]='V';
  7441  0740  3056               	movlw	86
  7442  0741                     L9:	
  7443  0741  0020               	movlb	0	; select bank0
  7444  0742  00E2               	movwf	??_RTXUpdateDisplay
  7445  0743  0021               	movlb	1	; select bank1
  7446  0744  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  7447  0745  3EBF               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  7448  0746  0086               	movwf	6
  7449  0747  0187               	clrf	7
  7450  0748  0020               	movlb	0	; select bank0
  7451  0749  0862               	movf	??_RTXUpdateDisplay,w
  7452  074A  0081               	movwf	1
  7453  074B  3001               	movlw	1
  7454  074C  00E2               	movwf	??_RTXUpdateDisplay
  7455  074D  0862               	movf	??_RTXUpdateDisplay,w
  7456  074E  0021               	movlb	1	; select bank1
  7457  074F  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  7458                           
  7459                           ;RTX.c: 343: strRow2[iR++]=' ';
  7460  0750  3020               	movlw	32
  7461  0751  0020               	movlb	0	; select bank0
  7462  0752  00E2               	movwf	??_RTXUpdateDisplay
  7463  0753  0021               	movlb	1	; select bank1
  7464  0754  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  7465  0755  3EBF               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  7466  0756  0086               	movwf	6
  7467  0757  0187               	clrf	7
  7468  0758  0020               	movlb	0	; select bank0
  7469  0759  0862               	movf	??_RTXUpdateDisplay,w
  7470  075A  0081               	movwf	1
  7471  075B  3001               	movlw	1
  7472  075C  00E2               	movwf	??_RTXUpdateDisplay
  7473  075D  0862               	movf	??_RTXUpdateDisplay,w
  7474  075E  0021               	movlb	1	; select bank1
  7475  075F  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  7476                           
  7477                           ;RTX.c: 344: strRow2[iR++]='-';
  7478  0760  302D               	movlw	45
  7479  0761  0020               	movlb	0	; select bank0
  7480  0762  00E2               	movwf	??_RTXUpdateDisplay
  7481  0763  0021               	movlb	1	; select bank1
  7482  0764  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  7483  0765  3EBF               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  7484  0766  0086               	movwf	6
  7485  0767  0187               	clrf	7
  7486  0768  0020               	movlb	0	; select bank0
  7487  0769  0862               	movf	??_RTXUpdateDisplay,w
  7488  076A  0081               	movwf	1
  7489  076B  3001               	movlw	1
  7490  076C  00E2               	movwf	??_RTXUpdateDisplay
  7491  076D  0862               	movf	??_RTXUpdateDisplay,w
  7492  076E  0021               	movlb	1	; select bank1
  7493  076F  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  7494                           
  7495                           ;RTX.c: 345: strRow2[iR++]=' ';
  7496  0770  3020               	movlw	32
  7497  0771  0020               	movlb	0	; select bank0
  7498  0772  00E2               	movwf	??_RTXUpdateDisplay
  7499  0773  0021               	movlb	1	; select bank1
  7500  0774  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  7501  0775  3EBF               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  7502  0776  0086               	movwf	6
  7503  0777  0187               	clrf	7
  7504  0778  0020               	movlb	0	; select bank0
  7505  0779  0862               	movf	??_RTXUpdateDisplay,w
  7506  077A  0081               	movwf	1
  7507  077B  3001               	movlw	1
  7508  077C  00E2               	movwf	??_RTXUpdateDisplay
  7509  077D  0862               	movf	??_RTXUpdateDisplay,w
  7510  077E  0021               	movlb	1	; select bank1
  7511  077F  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  7512                           
  7513                           ;RTX.c: 346: strRow2[iR++]=0x00;
  7514  0780  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  7515  0781  3EBF               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  7516  0782  0086               	movwf	6
  7517  0783  0187               	clrf	7
  7518  0784  0181               	clrf	1
  7519  0785  3001               	movlw	1
  7520  0786  0020               	movlb	0	; select bank0
  7521  0787  00E2               	movwf	??_RTXUpdateDisplay
  7522  0788  0862               	movf	??_RTXUpdateDisplay,w
  7523  0789  0021               	movlb	1	; select bank1
  7524  078A  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  7525                           
  7526                           ;RTX.c: 347: strRow2[iR++]='=';
  7527  078B  303D               	movlw	61
  7528  078C  0020               	movlb	0	; select bank0
  7529  078D  00E2               	movwf	??_RTXUpdateDisplay
  7530  078E  0021               	movlb	1	; select bank1
  7531  078F  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  7532  0790  3EBF               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  7533  0791  0086               	movwf	6
  7534  0792  0187               	clrf	7
  7535  0793  0020               	movlb	0	; select bank0
  7536  0794  0862               	movf	??_RTXUpdateDisplay,w
  7537  0795  0081               	movwf	1
  7538  0796  3001               	movlw	1
  7539  0797  00E2               	movwf	??_RTXUpdateDisplay
  7540  0798  0862               	movf	??_RTXUpdateDisplay,w
  7541  0799  0021               	movlb	1	; select bank1
  7542  079A  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  7543                           
  7544                           ;RTX.c: 348: strRow2[iR++]='?';
  7545  079B  303F               	movlw	63
  7546  079C  0020               	movlb	0	; select bank0
  7547  079D  00E2               	movwf	??_RTXUpdateDisplay
  7548  079E  0021               	movlb	1	; select bank1
  7549  079F  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  7550  07A0  3EBF               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  7551  07A1  0086               	movwf	6
  7552  07A2  0187               	clrf	7
  7553  07A3  0020               	movlb	0	; select bank0
  7554  07A4  0862               	movf	??_RTXUpdateDisplay,w
  7555  07A5  0081               	movwf	1
  7556  07A6  3001               	movlw	1
  7557  07A7  00E2               	movwf	??_RTXUpdateDisplay
  7558  07A8  0862               	movf	??_RTXUpdateDisplay,w
  7559  07A9  0021               	movlb	1	; select bank1
  7560  07AA  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  7561                           
  7562                           ;RTX.c: 349: strRow2[iR++]='?';
  7563  07AB  303F               	movlw	63
  7564  07AC  0020               	movlb	0	; select bank0
  7565  07AD  00E2               	movwf	??_RTXUpdateDisplay
  7566  07AE  0021               	movlb	1	; select bank1
  7567  07AF  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  7568  07B0  3EBF               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  7569  07B1  0086               	movwf	6
  7570  07B2  0187               	clrf	7
  7571  07B3  0020               	movlb	0	; select bank0
  7572  07B4  0862               	movf	??_RTXUpdateDisplay,w
  7573  07B5  0081               	movwf	1
  7574  07B6  3001               	movlw	1
  7575  07B7  00E2               	movwf	??_RTXUpdateDisplay
  7576  07B8  0862               	movf	??_RTXUpdateDisplay,w
  7577  07B9  0021               	movlb	1	; select bank1
  7578  07BA  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  7579                           
  7580                           ;RTX.c: 350: strRow2[iR++]='?';
  7581  07BB  303F               	movlw	63
  7582  07BC  0020               	movlb	0	; select bank0
  7583  07BD  00E2               	movwf	??_RTXUpdateDisplay
  7584  07BE  0021               	movlb	1	; select bank1
  7585  07BF  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  7586  07C0  3EBF               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  7587  07C1  0086               	movwf	6
  7588  07C2  0187               	clrf	7
  7589  07C3  0020               	movlb	0	; select bank0
  7590  07C4  0862               	movf	??_RTXUpdateDisplay,w
  7591  07C5  0081               	movwf	1
  7592  07C6  3001               	movlw	1
  7593  07C7                     L10:	
  7594  07C7  00E2               	movwf	??_RTXUpdateDisplay
  7595  07C8  0862               	movf	??_RTXUpdateDisplay,w
  7596  07C9  0021               	movlb	1	; select bank1
  7597  07CA  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  7598                           
  7599                           ;RTX.c: 351: strRow2[iR++]='V';
  7600  07CB  3056               	movlw	86
  7601  07CC                     L11:	
  7602  07CC  0020               	movlb	0	; select bank0
  7603  07CD  00E2               	movwf	??_RTXUpdateDisplay
  7604  07CE  0021               	movlb	1	; select bank1
  7605  07CF  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
  7606  07D0  3EBF               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
  7607  07D1  0086               	movwf	6
  7608  07D2  0187               	clrf	7
  7609  07D3  0020               	movlb	0	; select bank0
  7610  07D4  0862               	movf	??_RTXUpdateDisplay,w
  7611  07D5  0081               	movwf	1
  7612  07D6  3001               	movlw	1
  7613  07D7  00E2               	movwf	??_RTXUpdateDisplay
  7614  07D8  0862               	movf	??_RTXUpdateDisplay,w
  7615  07D9  0021               	movlb	1	; select bank1
  7616  07DA  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
  7617  07DB                     L19:	
  7618                           
  7619                           ;RTX.c: 352: }
  7620                           ;RTX.c: 353: }
  7621  07DB  318F  2FE4         	goto	l6420
  7622  07DD                     L21:	
  7623  07DD  318D  2D91         	ljmp	l6314
  7624                           
  7625                           	psect	text19
  7626  1F6A                     __ptext19:	
  7627 ;; *************** function _itoa *****************
  7628 ;; Defined at:
  7629 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\itoa.c"
  7630 ;; Parameters:    Size  Location     Type
  7631 ;;  buf             1    wreg     PTR unsigned char 
  7632 ;;		 -> RTXUpdateDisplay@charIdSens(4), 
  7633 ;;  val             2    8[BANK0 ] int 
  7634 ;;  base            2   10[BANK0 ] int 
  7635 ;; Auto vars:     Size  Location     Type
  7636 ;;  buf             1   13[BANK0 ] PTR unsigned char 
  7637 ;;		 -> RTXUpdateDisplay@charIdSens(4), 
  7638 ;;  cp              1   12[BANK0 ] PTR unsigned char 
  7639 ;;		 -> RTXUpdateDisplay@charIdSens(4), 
  7640 ;; Return value:  Size  Location     Type
  7641 ;;                  1    wreg      PTR unsigned char 
  7642 ;; Registers used:
  7643 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7644 ;; Tracked objects:
  7645 ;;		On entry : 0/0
  7646 ;;		On exit  : 0/0
  7647 ;;		Unchanged: 0/0
  7648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7649 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7650 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7651 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7652 ;;      Totals:         1       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7653 ;;Total ram usage:        7 bytes
  7654 ;; Hardware stack levels used:    1
  7655 ;; Hardware stack levels required when called:    4
  7656 ;; This function calls:
  7657 ;;		_utoa
  7658 ;; This function is called by:
  7659 ;;		_RTXUpdateDisplay
  7660 ;; This function uses a non-reentrant model
  7661 ;;
  7662                           
  7663                           
  7664                           ;psect for function _itoa
  7665  1F6A                     _itoa:	
  7666                           
  7667                           ;incstack = 0
  7668                           ; Regs used in _itoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7669                           ;itoa@buf stored from wreg
  7670  1F6A  0020               	movlb	0	; select bank0
  7671  1F6B  00AD               	movwf	itoa@buf
  7672  1F6C  082D               	movf	itoa@buf,w
  7673  1F6D  00FA               	movwf	??_itoa
  7674  1F6E  087A               	movf	??_itoa,w
  7675  1F6F  00AC               	movwf	itoa@cp
  7676  1F70  1FA9               	btfss	itoa@val+1,7
  7677  1F71  2F82               	goto	l5656
  7678  1F72  302D               	movlw	45
  7679  1F73  00FA               	movwf	??_itoa
  7680  1F74  082D               	movf	itoa@buf,w
  7681  1F75  0086               	movwf	6
  7682  1F76  0187               	clrf	7
  7683  1F77  087A               	movf	??_itoa,w
  7684  1F78  0081               	movwf	1
  7685  1F79  3001               	movlw	1
  7686  1F7A  00FA               	movwf	??_itoa
  7687  1F7B  087A               	movf	??_itoa,w
  7688  1F7C  07AD               	addwf	itoa@buf,f
  7689  1F7D  09A8               	comf	itoa@val,f
  7690  1F7E  09A9               	comf	itoa@val+1,f
  7691  1F7F  0AA8               	incf	itoa@val,f
  7692  1F80  1903               	skipnz
  7693  1F81  0AA9               	incf	itoa@val+1,f
  7694  1F82                     l5656:	
  7695  1F82  0829               	movf	itoa@val+1,w
  7696  1F83  00A1               	movwf	utoa@val+1
  7697  1F84  0828               	movf	itoa@val,w
  7698  1F85  00A0               	movwf	utoa@val
  7699  1F86  082B               	movf	itoa@base+1,w
  7700  1F87  00A3               	movwf	utoa@base+1
  7701  1F88  082A               	movf	itoa@base,w
  7702  1F89  00A2               	movwf	utoa@base
  7703  1F8A  082D               	movf	itoa@buf,w
  7704  1F8B  3194  24B5         	fcall	_utoa
  7705  1F8D  0008               	return
  7706  1F8E                     __end_of_itoa:	
  7707                           ;	Return value of _itoa is never used
  7708                           
  7709                           
  7710                           	psect	text20
  7711  14B5                     __ptext20:	
  7712 ;; *************** function _utoa *****************
  7713 ;; Defined at:
  7714 ;;		line 17 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\itoa.c"
  7715 ;; Parameters:    Size  Location     Type
  7716 ;;  buf             1    wreg     PTR unsigned char 
  7717 ;;		 -> RTXUpdateDisplay@charIdSens(4), 
  7718 ;;  val             2    0[BANK0 ] unsigned int 
  7719 ;;  base            2    2[BANK0 ] int 
  7720 ;; Auto vars:     Size  Location     Type
  7721 ;;  buf             1    7[BANK0 ] PTR unsigned char 
  7722 ;;		 -> RTXUpdateDisplay@charIdSens(4), 
  7723 ;;  v               2    4[BANK0 ] unsigned int 
  7724 ;;  c               1    6[BANK0 ] unsigned char 
  7725 ;; Return value:  Size  Location     Type
  7726 ;;                  1    wreg      PTR unsigned char 
  7727 ;; Registers used:
  7728 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7729 ;; Tracked objects:
  7730 ;;		On entry : 0/0
  7731 ;;		On exit  : 0/0
  7732 ;;		Unchanged: 0/0
  7733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7734 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7735 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7736 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7737 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7738 ;;Total ram usage:        9 bytes
  7739 ;; Hardware stack levels used:    1
  7740 ;; Hardware stack levels required when called:    3
  7741 ;; This function calls:
  7742 ;;		___lwdiv
  7743 ;;		___lwmod
  7744 ;; This function is called by:
  7745 ;;		_itoa
  7746 ;; This function uses a non-reentrant model
  7747 ;;
  7748                           
  7749                           
  7750                           ;psect for function _utoa
  7751  14B5                     _utoa:	
  7752                           
  7753                           ;incstack = 0
  7754                           ; Regs used in _utoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7755                           ;utoa@buf stored from wreg
  7756  14B5  0020               	movlb	0	; select bank0
  7757  14B6  00A7               	movwf	utoa@buf
  7758  14B7  0821               	movf	utoa@val+1,w
  7759  14B8  00A5               	movwf	utoa@v+1
  7760  14B9  0820               	movf	utoa@val,w
  7761  14BA  00A4               	movwf	utoa@v
  7762  14BB                     l5592:	
  7763  14BB  0823               	movf	utoa@base+1,w
  7764  14BC  00F2               	movwf	___lwdiv@divisor+1
  7765  14BD  0822               	movf	utoa@base,w
  7766  14BE  00F1               	movwf	___lwdiv@divisor
  7767  14BF  0825               	movf	utoa@v+1,w
  7768  14C0  00F4               	movwf	___lwdiv@dividend+1
  7769  14C1  0824               	movf	utoa@v,w
  7770  14C2  00F3               	movwf	___lwdiv@dividend
  7771  14C3  3191  21A1  3194   	fcall	___lwdiv
  7772  14C6  0872               	movf	?___lwdiv+1,w
  7773  14C7  0020               	movlb	0	; select bank0
  7774  14C8  00A5               	movwf	utoa@v+1
  7775  14C9  0871               	movf	?___lwdiv,w
  7776  14CA  00A4               	movwf	utoa@v
  7777  14CB  3001               	movlw	1
  7778  14CC  00F9               	movwf	??_utoa
  7779  14CD  0879               	movf	??_utoa,w
  7780  14CE  07A7               	addwf	utoa@buf,f
  7781  14CF  0824               	movf	utoa@v,w
  7782  14D0  0425               	iorwf	utoa@v+1,w
  7783  14D1  1D03               	btfss	3,2
  7784  14D2  2CBB               	goto	l5592
  7785  14D3  0827               	movf	utoa@buf,w
  7786  14D4  0086               	movwf	6
  7787  14D5  0187               	clrf	7
  7788  14D6  0181               	clrf	1
  7789  14D7  3001               	movlw	1
  7790  14D8  02A7               	subwf	utoa@buf,f
  7791  14D9                     l5602:	
  7792  14D9  0823               	movf	utoa@base+1,w
  7793  14DA  00F2               	movwf	___lwmod@divisor+1
  7794  14DB  0822               	movf	utoa@base,w
  7795  14DC  00F1               	movwf	___lwmod@divisor
  7796  14DD  0821               	movf	utoa@val+1,w
  7797  14DE  00F4               	movwf	___lwmod@dividend+1
  7798  14DF  0820               	movf	utoa@val,w
  7799  14E0  00F3               	movwf	___lwmod@dividend
  7800  14E1  3190  20E4  3194   	fcall	___lwmod
  7801  14E4  0871               	movf	?___lwmod,w
  7802  14E5  00F9               	movwf	??_utoa
  7803  14E6  0879               	movf	??_utoa,w
  7804  14E7  0020               	movlb	0	; select bank0
  7805  14E8  00A6               	movwf	utoa@c
  7806  14E9  0823               	movf	utoa@base+1,w
  7807  14EA  00F2               	movwf	___lwdiv@divisor+1
  7808  14EB  0822               	movf	utoa@base,w
  7809  14EC  00F1               	movwf	___lwdiv@divisor
  7810  14ED  0821               	movf	utoa@val+1,w
  7811  14EE  00F4               	movwf	___lwdiv@dividend+1
  7812  14EF  0820               	movf	utoa@val,w
  7813  14F0  00F3               	movwf	___lwdiv@dividend
  7814  14F1  3191  21A1  3194   	fcall	___lwdiv
  7815  14F4  0872               	movf	?___lwdiv+1,w
  7816  14F5  0020               	movlb	0	; select bank0
  7817  14F6  00A1               	movwf	utoa@val+1
  7818  14F7  0871               	movf	?___lwdiv,w
  7819  14F8  00A0               	movwf	utoa@val
  7820  14F9  300A               	movlw	10
  7821  14FA  0226               	subwf	utoa@c,w
  7822  14FB  1C03               	skipc
  7823  14FC  2D01               	goto	l1059
  7824  14FD  3007               	movlw	7
  7825  14FE  00F9               	movwf	??_utoa
  7826  14FF  0879               	movf	??_utoa,w
  7827  1500  07A6               	addwf	utoa@c,f
  7828  1501                     l1059:	
  7829  1501  3030               	movlw	48
  7830  1502  00F9               	movwf	??_utoa
  7831  1503  0879               	movf	??_utoa,w
  7832  1504  07A6               	addwf	utoa@c,f
  7833  1505  0826               	movf	utoa@c,w
  7834  1506  00F9               	movwf	??_utoa
  7835  1507  0827               	movf	utoa@buf,w
  7836  1508  0086               	movwf	6
  7837  1509  0187               	clrf	7
  7838  150A  0879               	movf	??_utoa,w
  7839  150B  0081               	movwf	1
  7840  150C  3001               	movlw	1
  7841  150D  02A7               	subwf	utoa@buf,f
  7842  150E  0820               	movf	utoa@val,w
  7843  150F  0421               	iorwf	utoa@val+1,w
  7844  1510  1D03               	btfss	3,2
  7845  1511  2CD9               	goto	l5602
  7846                           
  7847                           ;	Return value of _utoa is never used
  7848  1512  3001               	movlw	1
  7849  1513  00F9               	movwf	??_utoa
  7850  1514  0879               	movf	??_utoa,w
  7851  1515  07A7               	addwf	utoa@buf,f
  7852  1516  0008               	return
  7853  1517                     __end_of_utoa:	
  7854                           
  7855                           	psect	text21
  7856  10E4                     __ptext21:	
  7857 ;; *************** function ___lwmod *****************
  7858 ;; Defined at:
  7859 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  7860 ;; Parameters:    Size  Location     Type
  7861 ;;  divisor         2    1[COMMON] unsigned int 
  7862 ;;  dividend        2    3[COMMON] unsigned int 
  7863 ;; Auto vars:     Size  Location     Type
  7864 ;;  counter         1    6[COMMON] unsigned char 
  7865 ;; Return value:  Size  Location     Type
  7866 ;;                  2    1[COMMON] unsigned int 
  7867 ;; Registers used:
  7868 ;;		wreg, status,2, status,0
  7869 ;; Tracked objects:
  7870 ;;		On entry : 0/0
  7871 ;;		On exit  : 0/0
  7872 ;;		Unchanged: 0/0
  7873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7874 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7875 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7876 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7877 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7878 ;;Total ram usage:        6 bytes
  7879 ;; Hardware stack levels used:    1
  7880 ;; Hardware stack levels required when called:    2
  7881 ;; This function calls:
  7882 ;;		Nothing
  7883 ;; This function is called by:
  7884 ;;		_utoa
  7885 ;; This function uses a non-reentrant model
  7886 ;;
  7887                           
  7888                           
  7889                           ;psect for function ___lwmod
  7890  10E4                     ___lwmod:	
  7891                           
  7892                           ;incstack = 0
  7893                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  7894  10E4  0871               	movf	___lwmod@divisor,w
  7895  10E5  0472               	iorwf	___lwmod@divisor+1,w
  7896  10E6  1903               	btfsc	3,2
  7897  10E7  290B               	goto	l3754
  7898  10E8  01F6               	clrf	___lwmod@counter
  7899  10E9  0AF6               	incf	___lwmod@counter,f
  7900  10EA                     l3744:	
  7901  10EA  1BF2               	btfsc	___lwmod@divisor+1,7
  7902  10EB  28F6               	goto	l3746
  7903  10EC  3001               	movlw	1
  7904  10ED                     u3725:	
  7905  10ED  35F1               	lslf	___lwmod@divisor,f
  7906  10EE  0DF2               	rlf	___lwmod@divisor+1,f
  7907  10EF  0B89               	decfsz	9,f
  7908  10F0  28ED               	goto	u3725
  7909  10F1  3001               	movlw	1
  7910  10F2  00F5               	movwf	??___lwmod
  7911  10F3  0875               	movf	??___lwmod,w
  7912  10F4  07F6               	addwf	___lwmod@counter,f
  7913  10F5  28EA               	goto	l3744
  7914  10F6                     l3746:	
  7915  10F6  0872               	movf	___lwmod@divisor+1,w
  7916  10F7  0274               	subwf	___lwmod@dividend+1,w
  7917  10F8  1D03               	skipz
  7918  10F9  28FC               	goto	u3745
  7919  10FA  0871               	movf	___lwmod@divisor,w
  7920  10FB  0273               	subwf	___lwmod@dividend,w
  7921  10FC                     u3745:	
  7922  10FC  1C03               	skipc
  7923  10FD  2902               	goto	l3750
  7924  10FE  0871               	movf	___lwmod@divisor,w
  7925  10FF  02F3               	subwf	___lwmod@dividend,f
  7926  1100  0872               	movf	___lwmod@divisor+1,w
  7927  1101  3BF4               	subwfb	___lwmod@dividend+1,f
  7928  1102                     l3750:	
  7929  1102  3001               	movlw	1
  7930  1103                     u3755:	
  7931  1103  36F2               	lsrf	___lwmod@divisor+1,f
  7932  1104  0CF1               	rrf	___lwmod@divisor,f
  7933  1105  0B89               	decfsz	9,f
  7934  1106  2903               	goto	u3755
  7935  1107  3001               	movlw	1
  7936  1108  02F6               	subwf	___lwmod@counter,f
  7937  1109  1D03               	btfss	3,2
  7938  110A  28F6               	goto	l3746
  7939  110B                     l3754:	
  7940  110B  0874               	movf	___lwmod@dividend+1,w
  7941  110C  00F2               	movwf	?___lwmod+1
  7942  110D  0873               	movf	___lwmod@dividend,w
  7943  110E  00F1               	movwf	?___lwmod
  7944  110F  0008               	return
  7945  1110                     __end_of___lwmod:	
  7946                           
  7947                           	psect	text22
  7948  11A1                     __ptext22:	
  7949 ;; *************** function ___lwdiv *****************
  7950 ;; Defined at:
  7951 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  7952 ;; Parameters:    Size  Location     Type
  7953 ;;  divisor         2    1[COMMON] unsigned int 
  7954 ;;  dividend        2    3[COMMON] unsigned int 
  7955 ;; Auto vars:     Size  Location     Type
  7956 ;;  quotient        2    6[COMMON] unsigned int 
  7957 ;;  counter         1    8[COMMON] unsigned char 
  7958 ;; Return value:  Size  Location     Type
  7959 ;;                  2    1[COMMON] unsigned int 
  7960 ;; Registers used:
  7961 ;;		wreg, status,2, status,0
  7962 ;; Tracked objects:
  7963 ;;		On entry : 0/0
  7964 ;;		On exit  : 0/0
  7965 ;;		Unchanged: 0/0
  7966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7967 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7968 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7969 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7970 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7971 ;;Total ram usage:        8 bytes
  7972 ;; Hardware stack levels used:    1
  7973 ;; Hardware stack levels required when called:    2
  7974 ;; This function calls:
  7975 ;;		Nothing
  7976 ;; This function is called by:
  7977 ;;		_utoa
  7978 ;; This function uses a non-reentrant model
  7979 ;;
  7980                           
  7981                           
  7982                           ;psect for function ___lwdiv
  7983  11A1                     ___lwdiv:	
  7984                           
  7985                           ;incstack = 0
  7986                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  7987  11A1  01F6               	clrf	___lwdiv@quotient
  7988  11A2  01F7               	clrf	___lwdiv@quotient+1
  7989  11A3  0871               	movf	___lwdiv@divisor,w
  7990  11A4  0472               	iorwf	___lwdiv@divisor+1,w
  7991  11A5  1903               	btfsc	3,2
  7992  11A6  29D0               	goto	l3732
  7993  11A7  01F8               	clrf	___lwdiv@counter
  7994  11A8  0AF8               	incf	___lwdiv@counter,f
  7995  11A9                     l3720:	
  7996  11A9  1BF2               	btfsc	___lwdiv@divisor+1,7
  7997  11AA  29B5               	goto	l3722
  7998  11AB  3001               	movlw	1
  7999  11AC                     u3655:	
  8000  11AC  35F1               	lslf	___lwdiv@divisor,f
  8001  11AD  0DF2               	rlf	___lwdiv@divisor+1,f
  8002  11AE  0B89               	decfsz	9,f
  8003  11AF  29AC               	goto	u3655
  8004  11B0  3001               	movlw	1
  8005  11B1  00F5               	movwf	??___lwdiv
  8006  11B2  0875               	movf	??___lwdiv,w
  8007  11B3  07F8               	addwf	___lwdiv@counter,f
  8008  11B4  29A9               	goto	l3720
  8009  11B5                     l3722:	
  8010  11B5  3001               	movlw	1
  8011  11B6                     u3675:	
  8012  11B6  35F6               	lslf	___lwdiv@quotient,f
  8013  11B7  0DF7               	rlf	___lwdiv@quotient+1,f
  8014  11B8  0B89               	decfsz	9,f
  8015  11B9  29B6               	goto	u3675
  8016  11BA  0872               	movf	___lwdiv@divisor+1,w
  8017  11BB  0274               	subwf	___lwdiv@dividend+1,w
  8018  11BC  1D03               	skipz
  8019  11BD  29C0               	goto	u3685
  8020  11BE  0871               	movf	___lwdiv@divisor,w
  8021  11BF  0273               	subwf	___lwdiv@dividend,w
  8022  11C0                     u3685:	
  8023  11C0  1C03               	skipc
  8024  11C1  29C7               	goto	l3728
  8025  11C2  0871               	movf	___lwdiv@divisor,w
  8026  11C3  02F3               	subwf	___lwdiv@dividend,f
  8027  11C4  0872               	movf	___lwdiv@divisor+1,w
  8028  11C5  3BF4               	subwfb	___lwdiv@dividend+1,f
  8029  11C6  1476               	bsf	___lwdiv@quotient,0
  8030  11C7                     l3728:	
  8031  11C7  3001               	movlw	1
  8032  11C8                     u3695:	
  8033  11C8  36F2               	lsrf	___lwdiv@divisor+1,f
  8034  11C9  0CF1               	rrf	___lwdiv@divisor,f
  8035  11CA  0B89               	decfsz	9,f
  8036  11CB  29C8               	goto	u3695
  8037  11CC  3001               	movlw	1
  8038  11CD  02F8               	subwf	___lwdiv@counter,f
  8039  11CE  1D03               	btfss	3,2
  8040  11CF  29B5               	goto	l3722
  8041  11D0                     l3732:	
  8042  11D0  0877               	movf	___lwdiv@quotient+1,w
  8043  11D1  00F2               	movwf	?___lwdiv+1
  8044  11D2  0876               	movf	___lwdiv@quotient,w
  8045  11D3  00F1               	movwf	?___lwdiv
  8046  11D4  0008               	return
  8047  11D5                     __end_of___lwdiv:	
  8048                           
  8049                           	psect	text23
  8050  16A5                     __ptext23:	
  8051 ;; *************** function _RTXVisDec *****************
  8052 ;; Defined at:
  8053 ;;		line 405 in file "RTX.c"
  8054 ;; Parameters:    Size  Location     Type
  8055 ;;  val             3   55[BANK0 ] float 
  8056 ;;  buff            1   58[BANK0 ] PTR unsigned char 
  8057 ;;		 -> RTXUpdateDisplay@strRow2(16), 
  8058 ;;  maxDigit        1   59[BANK0 ] unsigned char 
  8059 ;;  offset          1   60[BANK0 ] unsigned char 
  8060 ;; Auto vars:     Size  Location     Type
  8061 ;;  strTmp         16    0[BANK1 ] unsigned char [16]
  8062 ;;  status          2   16[BANK1 ] int 
  8063 ;;  i               1   22[BANK1 ] unsigned char 
  8064 ;;  j               1   21[BANK1 ] unsigned char 
  8065 ;;  p               1   20[BANK1 ] PTR unsigned char 
  8066 ;;		 -> ftoa@buf(17), 
  8067 ;;  isDec           1   19[BANK1 ] unsigned char 
  8068 ;;  posDec          1   18[BANK1 ] unsigned char 
  8069 ;; Return value:  Size  Location     Type
  8070 ;;                  1    wreg      unsigned char 
  8071 ;; Registers used:
  8072 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8073 ;; Tracked objects:
  8074 ;;		On entry : 0/0
  8075 ;;		On exit  : 0/0
  8076 ;;		Unchanged: 0/0
  8077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8078 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8079 ;;      Locals:         0       0      23       0       0       0       0       0       0       0       0       0       
      +0       0
  8080 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8081 ;;      Totals:         0      11      23       0       0       0       0       0       0       0       0       0       
      +0       0
  8082 ;;Total ram usage:       34 bytes
  8083 ;; Hardware stack levels used:    1
  8084 ;; Hardware stack levels required when called:    6
  8085 ;; This function calls:
  8086 ;;		_ftoa
  8087 ;; This function is called by:
  8088 ;;		_RTXUpdateDisplay
  8089 ;; This function uses a non-reentrant model
  8090 ;;
  8091                           
  8092                           
  8093                           ;psect for function _RTXVisDec
  8094  16A5                     _RTXVisDec:	
  8095                           
  8096                           ;RTX.c: 407: char *p;
  8097                           ;RTX.c: 408: unsigned char strTmp[16],isDec,posDec,i,j;
  8098                           ;RTX.c: 409: int status;
  8099                           ;RTX.c: 411: p=ftoa(val,(&(status)));
  8100                           
  8101                           ;incstack = 0
  8102                           ; Regs used in _RTXVisDec: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8103  16A5  0020               	movlb	0	; select bank0
  8104  16A6  0857               	movf	RTXVisDec@val,w
  8105  16A7  00C9               	movwf	ftoa@f
  8106  16A8  0858               	movf	RTXVisDec@val+1,w
  8107  16A9  00CA               	movwf	ftoa@f+1
  8108  16AA  0859               	movf	RTXVisDec@val+2,w
  8109  16AB  00CB               	movwf	ftoa@f+2
  8110  16AC  30B0               	movlw	(low (RTXVisDec@status| 0))& (0+255)
  8111  16AD  00DD               	movwf	??_RTXVisDec
  8112  16AE  085D               	movf	??_RTXVisDec,w
  8113  16AF  00CC               	movwf	ftoa@status
  8114  16B0  3196  2602  3196   	fcall	_ftoa
  8115  16B3  0020               	movlb	0	; select bank0
  8116  16B4  00DE               	movwf	??_RTXVisDec+1
  8117  16B5  085E               	movf	??_RTXVisDec+1,w
  8118  16B6  0021               	movlb	1	; select bank1
  8119  16B7  00B4               	movwf	RTXVisDec@p^(0+128)
  8120                           
  8121                           ;RTX.c: 413: isDec=0;
  8122  16B8  01B3               	clrf	RTXVisDec@isDec^(0+128)
  8123                           
  8124                           ;RTX.c: 414: for(i=0;i<sizeof(strTmp)/sizeof(char);i++)
  8125  16B9  01B6               	clrf	RTXVisDec@i^(0+128)
  8126  16BA  3010               	movlw	16
  8127  16BB  0236               	subwf	RTXVisDec@i^(0+128),w
  8128  16BC  1803               	btfsc	3,0
  8129  16BD  2F1C               	goto	l5692
  8130  16BE                     l5670:	
  8131                           
  8132                           ;RTX.c: 415: {
  8133                           ;RTX.c: 417: if((*(p+i))=='.')
  8134  16BE  0836               	movf	RTXVisDec@i^(0+128),w
  8135  16BF  0734               	addwf	RTXVisDec@p^(0+128),w
  8136  16C0  0020               	movlb	0	; select bank0
  8137  16C1  00DD               	movwf	??_RTXVisDec
  8138  16C2  085D               	movf	??_RTXVisDec,w
  8139  16C3  0086               	movwf	6
  8140  16C4  3001               	movlw	1	; select bank2/3
  8141  16C5  0087               	movwf	7
  8142  16C6  302E               	movlw	46
  8143  16C7  0601               	xorwf	1,w
  8144  16C8  1D03               	btfss	3,2
  8145  16C9  2ED3               	goto	l5676
  8146                           
  8147                           ;RTX.c: 418: {
  8148                           ;RTX.c: 419: isDec=1;
  8149  16CA  0021               	movlb	1	; select bank1
  8150  16CB  01B3               	clrf	RTXVisDec@isDec^(0+128)
  8151  16CC  0AB3               	incf	RTXVisDec@isDec^(0+128),f
  8152                           
  8153                           ;RTX.c: 420: posDec=i;
  8154  16CD  0836               	movf	RTXVisDec@i^(0+128),w
  8155  16CE  0020               	movlb	0	; select bank0
  8156  16CF  00DD               	movwf	??_RTXVisDec
  8157  16D0  085D               	movf	??_RTXVisDec,w
  8158  16D1  0021               	movlb	1	; select bank1
  8159  16D2  00B2               	movwf	RTXVisDec@posDec^(0+128)
  8160  16D3                     l5676:	
  8161                           
  8162                           ;RTX.c: 421: }
  8163                           ;RTX.c: 423: if(isDec)
  8164  16D3  0021               	movlb	1	; select bank1
  8165  16D4  0833               	movf	RTXVisDec@isDec^(0+128),w
  8166  16D5  1903               	btfsc	3,2
  8167  16D6  2EF4               	goto	l5682
  8168                           
  8169                           ;RTX.c: 424: {
  8170                           ;RTX.c: 425: if((i-posDec)>2)
  8171  16D7  0832               	movf	RTXVisDec@posDec^(0+128),w
  8172  16D8  0020               	movlb	0	; select bank0
  8173  16D9  00DD               	movwf	??_RTXVisDec
  8174  16DA  01DE               	clrf	??_RTXVisDec+1
  8175  16DB  09DD               	comf	??_RTXVisDec,f
  8176  16DC  09DE               	comf	??_RTXVisDec+1,f
  8177  16DD  0ADD               	incf	??_RTXVisDec,f
  8178  16DE  1903               	skipnz
  8179  16DF  0ADE               	incf	??_RTXVisDec+1,f
  8180  16E0  0021               	movlb	1	; select bank1
  8181  16E1  0836               	movf	RTXVisDec@i^(0+128),w
  8182  16E2  0020               	movlb	0	; select bank0
  8183  16E3  075D               	addwf	??_RTXVisDec,w
  8184  16E4  00DF               	movwf	??_RTXVisDec+2
  8185  16E5  085E               	movf	??_RTXVisDec+1,w
  8186  16E6  1803               	skipnc
  8187  16E7  0A5E               	incf	??_RTXVisDec+1,w
  8188  16E8  00E0               	movwf	??_RTXVisDec+3
  8189  16E9  0860               	movf	??_RTXVisDec+3,w
  8190  16EA  3A80               	xorlw	128
  8191  16EB  00E1               	movwf	??_RTXVisDec+4
  8192  16EC  3080               	movlw	128
  8193  16ED  0261               	subwf	??_RTXVisDec+4,w
  8194  16EE  1D03               	skipz
  8195  16EF  2EF2               	goto	u5775
  8196  16F0  3003               	movlw	3
  8197  16F1  025F               	subwf	??_RTXVisDec+2,w
  8198  16F2                     u5775:	
  8199  16F2  1803               	btfsc	3,0
  8200  16F3  2F1C               	goto	l5692
  8201  16F4                     l5682:	
  8202                           ;RTX.c: 426: break;
  8203                           
  8204                           
  8205                           ;RTX.c: 427: }
  8206                           ;RTX.c: 429: if((*(p+i))==0x00)
  8207  16F4  0021               	movlb	1	; select bank1
  8208  16F5  0836               	movf	RTXVisDec@i^(0+128),w
  8209  16F6  0734               	addwf	RTXVisDec@p^(0+128),w
  8210  16F7  0020               	movlb	0	; select bank0
  8211  16F8  00DD               	movwf	??_RTXVisDec
  8212  16F9  085D               	movf	??_RTXVisDec,w
  8213  16FA  0086               	movwf	6
  8214  16FB  3001               	movlw	1	; select bank2/3
  8215  16FC  0087               	movwf	7
  8216  16FD  0801               	movf	1,w
  8217  16FE  1903               	btfsc	3,2
  8218  16FF  2F1C               	goto	l5692
  8219                           
  8220                           ;RTX.c: 432: strTmp[i]=(*(p+i));
  8221                           
  8222                           ;RTX.c: 430: break;
  8223  1700  0021               	movlb	1	; select bank1
  8224  1701  0836               	movf	RTXVisDec@i^(0+128),w
  8225  1702  0734               	addwf	RTXVisDec@p^(0+128),w
  8226  1703  0020               	movlb	0	; select bank0
  8227  1704  00DD               	movwf	??_RTXVisDec
  8228  1705  085D               	movf	??_RTXVisDec,w
  8229  1706  0086               	movwf	6
  8230  1707  3001               	movlw	1	; select bank2/3
  8231  1708  0087               	movwf	7
  8232  1709  0801               	movf	1,w
  8233  170A  00DE               	movwf	??_RTXVisDec+1
  8234  170B  0021               	movlb	1	; select bank1
  8235  170C  0836               	movf	RTXVisDec@i^(0+128),w
  8236  170D  3EA0               	addlw	(low (RTXVisDec@strTmp| 0))& (0+255)
  8237  170E  0086               	movwf	6
  8238  170F  0187               	clrf	7
  8239  1710  0020               	movlb	0	; select bank0
  8240  1711  085E               	movf	??_RTXVisDec+1,w
  8241  1712  0081               	movwf	1
  8242  1713  3001               	movlw	1
  8243  1714  00DD               	movwf	??_RTXVisDec
  8244  1715  085D               	movf	??_RTXVisDec,w
  8245  1716  0021               	movlb	1	; select bank1
  8246  1717  07B6               	addwf	RTXVisDec@i^(0+128),f
  8247  1718  3010               	movlw	16
  8248  1719  0236               	subwf	RTXVisDec@i^(0+128),w
  8249  171A  1C03               	skipc
  8250  171B  2EBE               	goto	l5670
  8251  171C                     l5692:	
  8252                           
  8253                           ;RTX.c: 433: }
  8254                           ;RTX.c: 436: if(i>=maxDigit)
  8255  171C  0020               	movlb	0	; select bank0
  8256  171D  085B               	movf	RTXVisDec@maxDigit,w
  8257  171E  0021               	movlb	1	; select bank1
  8258  171F  0236               	subwf	RTXVisDec@i^(0+128),w
  8259  1720  1C03               	skipc
  8260  1721  2F29               	goto	l5696
  8261                           
  8262                           ;RTX.c: 437: i=maxDigit-1;
  8263  1722  0020               	movlb	0	; select bank0
  8264  1723  085B               	movf	RTXVisDec@maxDigit,w
  8265  1724  3EFF               	addlw	255
  8266  1725  00DD               	movwf	??_RTXVisDec
  8267  1726  085D               	movf	??_RTXVisDec,w
  8268  1727  0021               	movlb	1	; select bank1
  8269  1728  00B6               	movwf	RTXVisDec@i^(0+128)
  8270  1729                     l5696:	
  8271                           
  8272                           ;RTX.c: 440: for(j=0;j<i;j++)
  8273  1729  01B5               	clrf	RTXVisDec@j^(0+128)
  8274  172A                     l5702:	
  8275  172A  0836               	movf	RTXVisDec@i^(0+128),w
  8276  172B  0235               	subwf	RTXVisDec@j^(0+128),w
  8277  172C  1803               	btfsc	3,0
  8278  172D  2F48               	goto	l5704
  8279                           
  8280                           ;RTX.c: 441: (*(buff+j+offset))=strTmp[j];
  8281  172E  0835               	movf	RTXVisDec@j^(0+128),w
  8282  172F  3EA0               	addlw	(low (RTXVisDec@strTmp| 0))& (0+255)
  8283  1730  0086               	movwf	6
  8284  1731  0187               	clrf	7
  8285  1732  0801               	movf	1,w
  8286  1733  0020               	movlb	0	; select bank0
  8287  1734  00DD               	movwf	??_RTXVisDec
  8288  1735  085C               	movf	RTXVisDec@offset,w
  8289  1736  075A               	addwf	RTXVisDec@buff,w
  8290  1737  00DE               	movwf	??_RTXVisDec+1
  8291  1738  0021               	movlb	1	; select bank1
  8292  1739  0835               	movf	RTXVisDec@j^(0+128),w
  8293  173A  0020               	movlb	0	; select bank0
  8294  173B  075E               	addwf	??_RTXVisDec+1,w
  8295  173C  00DF               	movwf	??_RTXVisDec+2
  8296  173D  085F               	movf	??_RTXVisDec+2,w
  8297  173E  0086               	movwf	6
  8298  173F  0187               	clrf	7
  8299  1740  085D               	movf	??_RTXVisDec,w
  8300  1741  0081               	movwf	1
  8301  1742  3001               	movlw	1
  8302  1743  00DD               	movwf	??_RTXVisDec
  8303  1744  085D               	movf	??_RTXVisDec,w
  8304  1745  0021               	movlb	1	; select bank1
  8305  1746  07B5               	addwf	RTXVisDec@j^(0+128),f
  8306  1747  2F2A               	goto	l5702
  8307  1748                     l5704:	
  8308                           
  8309                           ;RTX.c: 443: return (j+offset);
  8310  1748  0835               	movf	RTXVisDec@j^(0+128),w
  8311  1749  0020               	movlb	0	; select bank0
  8312  174A  075C               	addwf	RTXVisDec@offset,w
  8313  174B  0008               	return
  8314  174C                     __end_of_RTXVisDec:	
  8315                           
  8316                           	psect	text24
  8317  1602                     __ptext24:	
  8318 ;; *************** function _ftoa *****************
  8319 ;; Defined at:
  8320 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftoa.c"
  8321 ;; Parameters:    Size  Location     Type
  8322 ;;  f               3   41[BANK0 ] float 
  8323 ;;  status          1   44[BANK0 ] PTR int 
  8324 ;;		 -> RTXVisDec@status(2), 
  8325 ;; Auto vars:     Size  Location     Type
  8326 ;;  l               4   50[BANK0 ] unsigned long 
  8327 ;;  rem             4   46[BANK0 ] unsigned long 
  8328 ;;  cp              1   54[BANK0 ] PTR unsigned char 
  8329 ;;		 -> ftoa@buf(17), 
  8330 ;; Return value:  Size  Location     Type
  8331 ;;                  1    wreg      PTR unsigned char 
  8332 ;; Registers used:
  8333 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8334 ;; Tracked objects:
  8335 ;;		On entry : 0/0
  8336 ;;		On exit  : 0/0
  8337 ;;		Unchanged: 0/0
  8338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8339 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8340 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8341 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8342 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8343 ;;Total ram usage:       14 bytes
  8344 ;; Hardware stack levels used:    1
  8345 ;; Hardware stack levels required when called:    5
  8346 ;; This function calls:
  8347 ;;		___ftge
  8348 ;;		___ftmul
  8349 ;;		___ftneg
  8350 ;;		___ftsub
  8351 ;;		___fttol
  8352 ;;		___lltoft
  8353 ;;		_sprintf
  8354 ;; This function is called by:
  8355 ;;		_RTXVisDec
  8356 ;; This function uses a non-reentrant model
  8357 ;;
  8358                           
  8359                           
  8360                           ;psect for function _ftoa
  8361  1602                     _ftoa:	
  8362                           
  8363                           ;incstack = 0
  8364                           ; Regs used in _ftoa: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8365  1602  30CF               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  8366  1603  0020               	movlb	0	; select bank0
  8367  1604  00CD               	movwf	??_ftoa
  8368  1605  084D               	movf	??_ftoa,w
  8369  1606  00D6               	movwf	ftoa@cp
  8370  1607  0849               	movf	ftoa@f,w
  8371  1608  00F1               	movwf	___ftge@ff1
  8372  1609  084A               	movf	ftoa@f+1,w
  8373  160A  00F2               	movwf	___ftge@ff1+1
  8374  160B  084B               	movf	ftoa@f+2,w
  8375  160C  00F3               	movwf	___ftge@ff1+2
  8376  160D  3000               	movlw	0
  8377  160E  00F4               	movwf	___ftge@ff2
  8378  160F  3000               	movlw	0
  8379  1610  00F5               	movwf	___ftge@ff2+1
  8380  1611  3000               	movlw	0
  8381  1612  00F6               	movwf	___ftge@ff2+2
  8382  1613  3192  220E  3196   	fcall	___ftge
  8383  1616  1803               	btfsc	3,0
  8384  1617  2E35               	goto	l5578
  8385  1618  302D               	movlw	45
  8386  1619  0020               	movlb	0	; select bank0
  8387  161A  00CD               	movwf	??_ftoa
  8388  161B  0856               	movf	ftoa@cp,w
  8389  161C  0086               	movwf	6
  8390  161D  3001               	movlw	1	; select bank2/3
  8391  161E  0087               	movwf	7
  8392  161F  084D               	movf	??_ftoa,w
  8393  1620  0081               	movwf	1
  8394  1621  3001               	movlw	1
  8395  1622  00CD               	movwf	??_ftoa
  8396  1623  084D               	movf	??_ftoa,w
  8397  1624  07D6               	addwf	ftoa@cp,f
  8398  1625  0849               	movf	ftoa@f,w
  8399  1626  00F1               	movwf	___ftneg@f1
  8400  1627  084A               	movf	ftoa@f+1,w
  8401  1628  00F2               	movwf	___ftneg@f1+1
  8402  1629  084B               	movf	ftoa@f+2,w
  8403  162A  00F3               	movwf	___ftneg@f1+2
  8404  162B  319C  24F1  3196   	fcall	___ftneg
  8405  162E  0871               	movf	?___ftneg,w
  8406  162F  0020               	movlb	0	; select bank0
  8407  1630  00C9               	movwf	ftoa@f
  8408  1631  0872               	movf	?___ftneg+1,w
  8409  1632  00CA               	movwf	ftoa@f+1
  8410  1633  0873               	movf	?___ftneg+2,w
  8411  1634  00CB               	movwf	ftoa@f+2
  8412  1635                     l5578:	
  8413  1635  0020               	movlb	0	; select bank0
  8414  1636  0849               	movf	ftoa@f,w
  8415  1637  00B0               	movwf	___fttol@f1
  8416  1638  084A               	movf	ftoa@f+1,w
  8417  1639  00B1               	movwf	___fttol@f1+1
  8418  163A  084B               	movf	ftoa@f+2,w
  8419  163B  00B2               	movwf	___fttol@f1+2
  8420  163C  3195  257B  3196   	fcall	___fttol
  8421  163F  0020               	movlb	0	; select bank0
  8422  1640  0833               	movf	?___fttol+3,w
  8423  1641  00D5               	movwf	ftoa@l+3
  8424  1642  0832               	movf	?___fttol+2,w
  8425  1643  00D4               	movwf	ftoa@l+2
  8426  1644  0831               	movf	?___fttol+1,w
  8427  1645  00D3               	movwf	ftoa@l+1
  8428  1646  0830               	movf	?___fttol,w
  8429  1647  00D2               	movwf	ftoa@l
  8430  1648  0855               	movf	ftoa@l+3,w
  8431  1649  00A3               	movwf	___lltoft@c+3
  8432  164A  0854               	movf	ftoa@l+2,w
  8433  164B  00A2               	movwf	___lltoft@c+2
  8434  164C  0853               	movf	ftoa@l+1,w
  8435  164D  00A1               	movwf	___lltoft@c+1
  8436  164E  0852               	movf	ftoa@l,w
  8437  164F  00A0               	movwf	___lltoft@c
  8438  1650  3190  2062  3196   	fcall	___lltoft
  8439  1653  0020               	movlb	0	; select bank0
  8440  1654  0820               	movf	?___lltoft,w
  8441  1655  00AA               	movwf	___ftsub@f2
  8442  1656  0821               	movf	?___lltoft+1,w
  8443  1657  00AB               	movwf	___ftsub@f2+1
  8444  1658  0822               	movf	?___lltoft+2,w
  8445  1659  00AC               	movwf	___ftsub@f2+2
  8446  165A  0849               	movf	ftoa@f,w
  8447  165B  00AD               	movwf	___ftsub@f1
  8448  165C  084A               	movf	ftoa@f+1,w
  8449  165D  00AE               	movwf	___ftsub@f1+1
  8450  165E  084B               	movf	ftoa@f+2,w
  8451  165F  00AF               	movwf	___ftsub@f1+2
  8452  1660  319E  26CB  3196   	fcall	___ftsub
  8453  1663  0020               	movlb	0	; select bank0
  8454  1664  082A               	movf	?___ftsub,w
  8455  1665  00C9               	movwf	ftoa@f
  8456  1666  082B               	movf	?___ftsub+1,w
  8457  1667  00CA               	movwf	ftoa@f+1
  8458  1668  082C               	movf	?___ftsub+2,w
  8459  1669  00CB               	movwf	ftoa@f+2
  8460  166A  0849               	movf	ftoa@f,w
  8461  166B  00A3               	movwf	___ftmul@f2
  8462  166C  084A               	movf	ftoa@f+1,w
  8463  166D  00A4               	movwf	___ftmul@f2+1
  8464  166E  084B               	movf	ftoa@f+2,w
  8465  166F  00A5               	movwf	___ftmul@f2+2
  8466  1670  3024               	movlw	36
  8467  1671  00A0               	movwf	___ftmul@f1
  8468  1672  3074               	movlw	116
  8469  1673  00A1               	movwf	___ftmul@f1+1
  8470  1674  3049               	movlw	73
  8471  1675  00A2               	movwf	___ftmul@f1+2
  8472  1676  3197  274C  3196   	fcall	___ftmul
  8473  1679  0020               	movlb	0	; select bank0
  8474  167A  0820               	movf	?___ftmul,w
  8475  167B  00B0               	movwf	___fttol@f1
  8476  167C  0821               	movf	?___ftmul+1,w
  8477  167D  00B1               	movwf	___fttol@f1+1
  8478  167E  0822               	movf	?___ftmul+2,w
  8479  167F  00B2               	movwf	___fttol@f1+2
  8480  1680  3195  257B  3196   	fcall	___fttol
  8481  1683  0020               	movlb	0	; select bank0
  8482  1684  0833               	movf	?___fttol+3,w
  8483  1685  00D1               	movwf	ftoa@rem+3
  8484  1686  0832               	movf	?___fttol+2,w
  8485  1687  00D0               	movwf	ftoa@rem+2
  8486  1688  0831               	movf	?___fttol+1,w
  8487  1689  00CF               	movwf	ftoa@rem+1
  8488  168A  0830               	movf	?___fttol,w
  8489  168B  00CE               	movwf	ftoa@rem
  8490  168C  3028               	movlw	low (STR_1| (0+32768))
  8491  168D  00AD               	movwf	sprintf@f
  8492  168E  30B9               	movlw	high (STR_1| (0+32768))
  8493  168F  00AE               	movwf	sprintf@f+1
  8494  1690  0855               	movf	ftoa@l+3,w
  8495  1691  00B2               	movwf	?_sprintf+5
  8496  1692  0854               	movf	ftoa@l+2,w
  8497  1693  00B1               	movwf	?_sprintf+4
  8498  1694  0853               	movf	ftoa@l+1,w
  8499  1695  00B0               	movwf	?_sprintf+3
  8500  1696  0852               	movf	ftoa@l,w
  8501  1697  00AF               	movwf	?_sprintf+2
  8502  1698  0851               	movf	ftoa@rem+3,w
  8503  1699  00B6               	movwf	?_sprintf+9
  8504  169A  0850               	movf	ftoa@rem+2,w
  8505  169B  00B5               	movwf	?_sprintf+8
  8506  169C  084F               	movf	ftoa@rem+1,w
  8507  169D  00B4               	movwf	?_sprintf+7
  8508  169E  084E               	movf	ftoa@rem,w
  8509  169F  00B3               	movwf	?_sprintf+6
  8510  16A0  0856               	movf	ftoa@cp,w
  8511  16A1  318B  23AE         	fcall	_sprintf
  8512  16A3  30CF               	movlw	(low (ftoa@buf| (0+256)))& (0+255)
  8513  16A4  0008               	return
  8514  16A5                     __end_of_ftoa:	
  8515                           
  8516                           	psect	text25
  8517  0BAE                     __ptext25:	
  8518 ;; *************** function _sprintf *****************
  8519 ;; Defined at:
  8520 ;;		line 492 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  8521 ;; Parameters:    Size  Location     Type
  8522 ;;  sp              1    wreg     PTR unsigned char 
  8523 ;;		 -> ftoa@buf(17), 
  8524 ;;  f               2   13[BANK0 ] PTR const unsigned char 
  8525 ;;		 -> STR_1(11), 
  8526 ;; Auto vars:     Size  Location     Type
  8527 ;;  sp              1   35[BANK0 ] PTR unsigned char 
  8528 ;;		 -> ftoa@buf(17), 
  8529 ;;  val             4   31[BANK0 ] unsigned long 
  8530 ;;  tmpval          4    0        struct .
  8531 ;;  prec            2   38[BANK0 ] int 
  8532 ;;  width           2   36[BANK0 ] int 
  8533 ;;  cp              2    0        PTR const unsigned char 
  8534 ;;  len             2    0        unsigned int 
  8535 ;;  c               1   40[BANK0 ] char 
  8536 ;;  ap              1   30[BANK0 ] PTR void [1]
  8537 ;;		 -> ?_sprintf(2), 
  8538 ;;  flag            1   29[BANK0 ] unsigned char 
  8539 ;; Return value:  Size  Location     Type
  8540 ;;                  2   13[BANK0 ] int 
  8541 ;; Registers used:
  8542 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8543 ;; Tracked objects:
  8544 ;;		On entry : 0/0
  8545 ;;		On exit  : 0/0
  8546 ;;		Unchanged: 0/0
  8547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8548 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8549 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8550 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8551 ;;      Totals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8552 ;;Total ram usage:       28 bytes
  8553 ;; Hardware stack levels used:    1
  8554 ;; Hardware stack levels required when called:    3
  8555 ;; This function calls:
  8556 ;;		___lldiv
  8557 ;;		___llmod
  8558 ;;		___wmul
  8559 ;;		_isdigit
  8560 ;; This function is called by:
  8561 ;;		_ftoa
  8562 ;; This function uses a non-reentrant model
  8563 ;;
  8564                           
  8565                           
  8566                           ;psect for function _sprintf
  8567  0BAE                     _sprintf:	
  8568                           
  8569                           ;incstack = 0
  8570                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8571                           ;sprintf@sp stored from wreg
  8572  0BAE  0020               	movlb	0	; select bank0
  8573  0BAF  00C3               	movwf	sprintf@sp
  8574                           
  8575                           ;doprnt.c: 494: va_list ap;
  8576                           ;doprnt.c: 499: signed char c;
  8577                           ;doprnt.c: 501: int width;
  8578                           ;doprnt.c: 504: int prec;
  8579                           ;doprnt.c: 508: unsigned char flag;
  8580                           ;doprnt.c: 523: union {
  8581                           ;doprnt.c: 524: unsigned long vd;
  8582                           ;doprnt.c: 525: double integ;
  8583                           ;doprnt.c: 526: } tmpval;
  8584                           ;doprnt.c: 528: unsigned long val;
  8585                           ;doprnt.c: 529: unsigned len;
  8586                           ;doprnt.c: 530: const char * cp;
  8587                           ;doprnt.c: 533: *ap = __va_start();
  8588  0BB0  302F               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  8589  0BB1  00B7               	movwf	??_sprintf
  8590  0BB2  0837               	movf	??_sprintf,w
  8591  0BB3  00BE               	movwf	sprintf@ap
  8592  0BB4                     l3566:	
  8593                           ;doprnt.c: 536: while(c = *f++) {
  8594                           
  8595  0BB4  082E               	movf	sprintf@f+1,w
  8596  0BB5  00B8               	movwf	??_sprintf+1
  8597  0BB6  082D               	movf	sprintf@f,w
  8598  0BB7  00B7               	movwf	??_sprintf
  8599  0BB8  0AAD               	incf	sprintf@f,f
  8600  0BB9  1903               	skipnz
  8601  0BBA  0AAE               	incf	sprintf@f+1,f
  8602  0BBB  0837               	movf	??_sprintf,w
  8603  0BBC  0084               	movwf	4
  8604  0BBD  0838               	movf	??_sprintf+1,w
  8605  0BBE  0085               	movwf	5
  8606  0BBF  0800               	movf	0,w	;code access
  8607  0BC0  00B9               	movwf	??_sprintf+2
  8608  0BC1  0839               	movf	??_sprintf+2,w
  8609  0BC2  00C8               	movwf	sprintf@c
  8610  0BC3  0848               	movf	sprintf@c,w
  8611  0BC4  1903               	btfsc	3,2
  8612  0BC5  2D8B               	goto	l3568
  8613                           
  8614                           ;doprnt.c: 538: if(c != '%')
  8615  0BC6  3025               	movlw	37
  8616  0BC7  0648               	xorwf	sprintf@c,w
  8617  0BC8  1903               	btfsc	3,2
  8618  0BC9  2BD7               	goto	l3476
  8619                           
  8620                           ;doprnt.c: 540: {
  8621                           ;doprnt.c: 541: ((*sp++ = (c)));
  8622  0BCA  0848               	movf	sprintf@c,w
  8623  0BCB  00B7               	movwf	??_sprintf
  8624  0BCC  0843               	movf	sprintf@sp,w
  8625  0BCD  0086               	movwf	6
  8626  0BCE  3001               	movlw	1	; select bank2/3
  8627  0BCF  0087               	movwf	7
  8628  0BD0  0837               	movf	??_sprintf,w
  8629  0BD1  0081               	movwf	1
  8630  0BD2  3001               	movlw	1
  8631  0BD3  00B7               	movwf	??_sprintf
  8632  0BD4  0837               	movf	??_sprintf,w
  8633  0BD5  07C3               	addwf	sprintf@sp,f
  8634                           
  8635                           ;doprnt.c: 542: continue;
  8636  0BD6  2BB4               	goto	l3566
  8637  0BD7                     l3476:	
  8638                           
  8639                           ;doprnt.c: 543: }
  8640                           ;doprnt.c: 546: width = 0;
  8641  0BD7  01C4               	clrf	sprintf@width
  8642  0BD8  01C5               	clrf	sprintf@width+1
  8643                           
  8644                           ;doprnt.c: 548: flag = 0;
  8645  0BD9  01BD               	clrf	sprintf@flag
  8646                           
  8647                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  8648  0BDA  082D               	movf	sprintf@f,w
  8649  0BDB  0084               	movwf	4
  8650  0BDC  082E               	movf	sprintf@f+1,w
  8651  0BDD  0085               	movwf	5
  8652  0BDE  0800               	movf	0,w	;code access
  8653  0BDF  319D  2519  318B   	fcall	_isdigit
  8654  0BE2  1C03               	btfss	3,0
  8655  0BE3  2C15               	goto	l3490
  8656                           
  8657                           ;doprnt.c: 598: width = 0;
  8658  0BE4  0020               	movlb	0	; select bank0
  8659  0BE5  01C4               	clrf	sprintf@width
  8660  0BE6  01C5               	clrf	sprintf@width+1
  8661  0BE7                     l3482:	
  8662                           ;doprnt.c: 599: do {
  8663                           
  8664                           
  8665                           ;doprnt.c: 600: width *= 10;
  8666  0BE7  300A               	movlw	10
  8667  0BE8  00F1               	movwf	___wmul@multiplier
  8668  0BE9  3000               	movlw	0
  8669  0BEA  00F2               	movwf	___wmul@multiplier+1
  8670  0BEB  0020               	movlb	0	; select bank0
  8671  0BEC  0845               	movf	sprintf@width+1,w
  8672  0BED  00F4               	movwf	___wmul@multiplicand+1
  8673  0BEE  0844               	movf	sprintf@width,w
  8674  0BEF  00F3               	movwf	___wmul@multiplicand
  8675  0BF0  319E  2622  318B   	fcall	___wmul
  8676  0BF3  0872               	movf	?___wmul+1,w
  8677  0BF4  0020               	movlb	0	; select bank0
  8678  0BF5  00C5               	movwf	sprintf@width+1
  8679  0BF6  0871               	movf	?___wmul,w
  8680  0BF7  00C4               	movwf	sprintf@width
  8681                           
  8682                           ;doprnt.c: 601: width += *f++ - '0';
  8683  0BF8  082D               	movf	sprintf@f,w
  8684  0BF9  0084               	movwf	4
  8685  0BFA  082E               	movf	sprintf@f+1,w
  8686  0BFB  0085               	movwf	5
  8687  0BFC  0800               	movf	0,w	;code access
  8688  0BFD  3ED0               	addlw	208
  8689  0BFE  00B7               	movwf	??_sprintf
  8690  0BFF  30FF               	movlw	255
  8691  0C00  1803               	skipnc
  8692  0C01  3000               	movlw	0
  8693  0C02  00B8               	movwf	??_sprintf+1
  8694  0C03  0837               	movf	??_sprintf,w
  8695  0C04  07C4               	addwf	sprintf@width,f
  8696  0C05  0838               	movf	??_sprintf+1,w
  8697  0C06  3DC5               	addwfc	sprintf@width+1,f
  8698  0C07  3001               	movlw	1
  8699  0C08  07AD               	addwf	sprintf@f,f
  8700  0C09  3000               	movlw	0
  8701  0C0A  3DAE               	addwfc	sprintf@f+1,f
  8702                           
  8703                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  8704  0C0B  082D               	movf	sprintf@f,w
  8705  0C0C  0084               	movwf	4
  8706  0C0D  082E               	movf	sprintf@f+1,w
  8707  0C0E  0085               	movwf	5
  8708  0C0F  0800               	movf	0,w	;code access
  8709  0C10  319D  2519  318B   	fcall	_isdigit
  8710  0C13  1803               	btfsc	3,0
  8711  0C14  2BE7               	goto	l3482
  8712  0C15                     l3490:	
  8713                           
  8714                           ;doprnt.c: 608: }
  8715                           ;doprnt.c: 611: if(*f == '.') {
  8716  0C15  0020               	movlb	0	; select bank0
  8717  0C16  082D               	movf	sprintf@f,w
  8718  0C17  0084               	movwf	4
  8719  0C18  082E               	movf	sprintf@f+1,w
  8720  0C19  0085               	movwf	5
  8721  0C1A  0012               	moviw fsr0++
  8722  0C1B  3A2E               	xorlw	46
  8723  0C1C  1D03               	btfss	3,2
  8724  0C1D  2C53               	goto	l3502
  8725                           
  8726                           ;doprnt.c: 613: f++;
  8727  0C1E  3001               	movlw	1
  8728  0C1F  07AD               	addwf	sprintf@f,f
  8729  0C20  3000               	movlw	0
  8730  0C21  3DAE               	addwfc	sprintf@f+1,f
  8731                           
  8732                           ;doprnt.c: 620: {
  8733                           ;doprnt.c: 621: prec = 0;
  8734  0C22  01C6               	clrf	sprintf@prec
  8735  0C23  01C7               	clrf	sprintf@prec+1
  8736  0C24                     l3500:	
  8737                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  8738                           
  8739  0C24  082D               	movf	sprintf@f,w
  8740  0C25  0084               	movwf	4
  8741  0C26  082E               	movf	sprintf@f+1,w
  8742  0C27  0085               	movwf	5
  8743  0C28  0800               	movf	0,w	;code access
  8744  0C29  319D  2519  318B   	fcall	_isdigit
  8745  0C2C  1C03               	btfss	3,0
  8746  0C2D  2C5E               	goto	l3508
  8747                           
  8748                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  8749  0C2E  0020               	movlb	0	; select bank0
  8750  0C2F  082D               	movf	sprintf@f,w
  8751  0C30  0084               	movwf	4
  8752  0C31  082E               	movf	sprintf@f+1,w
  8753  0C32  0085               	movwf	5
  8754  0C33  0800               	movf	0,w	;code access
  8755  0C34  00B7               	movwf	??_sprintf
  8756  0C35  01B8               	clrf	??_sprintf+1
  8757  0C36  0847               	movf	sprintf@prec+1,w
  8758  0C37  00F2               	movwf	___wmul@multiplier+1
  8759  0C38  0846               	movf	sprintf@prec,w
  8760  0C39  00F1               	movwf	___wmul@multiplier
  8761  0C3A  300A               	movlw	10
  8762  0C3B  00F3               	movwf	___wmul@multiplicand
  8763  0C3C  3000               	movlw	0
  8764  0C3D  00F4               	movwf	___wmul@multiplicand+1
  8765  0C3E  319E  2622  318B   	fcall	___wmul
  8766  0C41  0020               	movlb	0	; select bank0
  8767  0C42  0837               	movf	??_sprintf,w
  8768  0C43  0771               	addwf	?___wmul,w
  8769  0C44  00B9               	movwf	??_sprintf+2
  8770  0C45  0838               	movf	??_sprintf+1,w
  8771  0C46  3D72               	addwfc	?___wmul+1,w
  8772  0C47  00BA               	movwf	??_sprintf+3
  8773  0C48  0839               	movf	??_sprintf+2,w
  8774  0C49  3ED0               	addlw	208
  8775  0C4A  00C6               	movwf	sprintf@prec
  8776  0C4B  30FF               	movlw	255
  8777  0C4C  3D3A               	addwfc	??_sprintf+3,w
  8778  0C4D  00C7               	movwf	sprintf@prec+1
  8779  0C4E  3001               	movlw	1
  8780  0C4F  07AD               	addwf	sprintf@f,f
  8781  0C50  3000               	movlw	0
  8782  0C51  3DAE               	addwfc	sprintf@f+1,f
  8783  0C52  2C24               	goto	l3500
  8784  0C53                     l3502:	
  8785                           ;doprnt.c: 624: }
  8786                           ;doprnt.c: 625: } else {
  8787                           
  8788                           
  8789                           ;doprnt.c: 626: prec = 0;
  8790  0C53  0020               	movlb	0	; select bank0
  8791  0C54  01C6               	clrf	sprintf@prec
  8792  0C55  01C7               	clrf	sprintf@prec+1
  8793                           
  8794                           ;doprnt.c: 635: switch(c = *f++) {
  8795                           
  8796                           ;doprnt.c: 630: }
  8797                           ;doprnt.c: 633: loop:
  8798  0C56  2C5E               	goto	l3508
  8799  0C57                     l753:	
  8800                           ;doprnt.c: 641: case 'l':
  8801                           
  8802                           ;doprnt.c: 638: goto alldone;
  8803                           
  8804                           ;doprnt.c: 637: case 0:
  8805                           
  8806                           
  8807                           ;doprnt.c: 643: flag |= 0x10;
  8808  0C57  163D               	bsf	sprintf@flag,4
  8809                           
  8810                           ;doprnt.c: 644: goto loop;
  8811  0C58  2C5E               	goto	l3508
  8812  0C59                     l3504:	
  8813                           ;doprnt.c: 817: case 'u':
  8814                           
  8815                           ;doprnt.c: 813: continue;
  8816                           
  8817                           ;doprnt.c: 802: default:
  8818                           
  8819                           
  8820                           ;doprnt.c: 818: flag |= 0xC0;
  8821  0C59  30C0               	movlw	192
  8822  0C5A  00B7               	movwf	??_sprintf
  8823  0C5B  0837               	movf	??_sprintf,w
  8824  0C5C  04BD               	iorwf	sprintf@flag,f
  8825                           
  8826                           ;doprnt.c: 822: }
  8827                           
  8828                           ;doprnt.c: 819: break;
  8829  0C5D  2C76               	goto	l756
  8830  0C5E                     l3508:	
  8831  0C5E  0020               	movlb	0	; select bank0
  8832  0C5F  082E               	movf	sprintf@f+1,w
  8833  0C60  00B8               	movwf	??_sprintf+1
  8834  0C61  082D               	movf	sprintf@f,w
  8835  0C62  00B7               	movwf	??_sprintf
  8836  0C63  0AAD               	incf	sprintf@f,f
  8837  0C64  1903               	skipnz
  8838  0C65  0AAE               	incf	sprintf@f+1,f
  8839  0C66  0837               	movf	??_sprintf,w
  8840  0C67  0084               	movwf	4
  8841  0C68  0838               	movf	??_sprintf+1,w
  8842  0C69  0085               	movwf	5
  8843  0C6A  0800               	movf	0,w	;code access
  8844  0C6B  00C8               	movwf	sprintf@c
  8845                           
  8846                           ; Switch size 1, requested type "space"
  8847                           ; Number of cases is 3, Range of values is 0 to 117
  8848                           ; switch strategies available:
  8849                           ; Name         Instructions Cycles
  8850                           ; simple_byte           10     6 (average)
  8851                           ; direct_byte          242     6 (fixed)
  8852                           ; jumptable            260     6 (fixed)
  8853                           ;	Chosen strategy is simple_byte
  8854  0C6C  3A00               	xorlw	0	; case 0
  8855  0C6D  1903               	skipnz
  8856  0C6E  2D8B               	goto	l3568
  8857  0C6F  3A6C               	xorlw	108	; case 108
  8858  0C70  1903               	skipnz
  8859  0C71  2C57               	goto	l753
  8860  0C72  3A19               	xorlw	25	; case 117
  8861  0C73  1903               	skipnz
  8862  0C74  2C59               	goto	l3504
  8863  0C75  2BB4               	goto	l3566
  8864  0C76                     l756:	
  8865                           
  8866                           ;doprnt.c: 1273: {
  8867                           ;doprnt.c: 1281: if(flag & 0x10)
  8868  0C76  1E3D               	btfss	sprintf@flag,4
  8869  0C77  2C85               	goto	l3514
  8870                           
  8871                           ;doprnt.c: 1282: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned lo
      +                          ng)0));
  8872  0C78  083E               	movf	sprintf@ap,w
  8873  0C79  0086               	movwf	6
  8874  0C7A  0187               	clrf	7
  8875  0C7B  3F40               	moviw [0]fsr1
  8876  0C7C  00BF               	movwf	sprintf@val
  8877  0C7D  3F41               	moviw [1]fsr1
  8878  0C7E  00C0               	movwf	sprintf@val+1
  8879  0C7F  3F42               	moviw [2]fsr1
  8880  0C80  00C1               	movwf	sprintf@val+2
  8881  0C81  3F43               	moviw [3]fsr1
  8882  0C82  00C2               	movwf	sprintf@val+3
  8883  0C83  3004               	movlw	4
  8884  0C84  2C93               	goto	L15
  8885  0C85                     l3514:	
  8886                           
  8887                           ;doprnt.c: 1283: else
  8888                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  8889  0C85  083E               	movf	sprintf@ap,w
  8890  0C86  0086               	movwf	6
  8891  0C87  0187               	clrf	7
  8892  0C88  3F40               	moviw [0]fsr1
  8893  0C89  00B7               	movwf	??_sprintf
  8894  0C8A  3F41               	moviw [1]fsr1
  8895  0C8B  00B8               	movwf	??_sprintf+1
  8896  0C8C  0837               	movf	??_sprintf,w
  8897  0C8D  00BF               	movwf	sprintf@val
  8898  0C8E  0838               	movf	??_sprintf+1,w
  8899  0C8F  00C0               	movwf	sprintf@val+1
  8900  0C90  01C1               	clrf	sprintf@val+2
  8901  0C91  01C2               	clrf	sprintf@val+3
  8902  0C92  3002               	movlw	2
  8903  0C93                     L15:	
  8904  0C93  00B7               	movwf	??_sprintf
  8905  0C94  0837               	movf	??_sprintf,w
  8906  0C95  07BE               	addwf	sprintf@ap,f
  8907                           
  8908                           ;doprnt.c: 1287: }
  8909                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  8910  0C96  0846               	movf	sprintf@prec,w
  8911  0C97  0447               	iorwf	sprintf@prec+1,w
  8912  0C98  1D03               	btfss	3,2
  8913  0C99  2CA4               	goto	l3524
  8914  0C9A  0842               	movf	sprintf@val+3,w
  8915  0C9B  0441               	iorwf	sprintf@val+2,w
  8916  0C9C  0440               	iorwf	sprintf@val+1,w
  8917  0C9D  043F               	iorwf	sprintf@val,w
  8918  0C9E  1D03               	skipz
  8919  0C9F  2CA4               	goto	l3524
  8920                           
  8921                           ;doprnt.c: 1291: prec++;
  8922  0CA0  3001               	movlw	1
  8923  0CA1  07C6               	addwf	sprintf@prec,f
  8924  0CA2  3000               	movlw	0
  8925  0CA3  3DC7               	addwfc	sprintf@prec+1,f
  8926  0CA4                     l3524:	
  8927                           
  8928                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  8929  0CA4  01C8               	clrf	sprintf@c
  8930  0CA5  0AC8               	incf	sprintf@c,f
  8931  0CA6  300A               	movlw	10
  8932  0CA7  0648               	xorwf	sprintf@c,w
  8933  0CA8  1903               	btfsc	3,2
  8934  0CA9  2CD7               	goto	l3536
  8935  0CAA                     l3530:	
  8936                           
  8937                           ;doprnt.c: 1306: if(val < dpowers[c])
  8938  0CAA  0848               	movf	sprintf@c,w
  8939  0CAB  00B7               	movwf	??_sprintf
  8940  0CAC  01B8               	clrf	??_sprintf+1
  8941  0CAD  35B7               	lslf	??_sprintf,f
  8942  0CAE  0DB8               	rlf	??_sprintf+1,f
  8943  0CAF  35B7               	lslf	??_sprintf,f
  8944  0CB0  0DB8               	rlf	??_sprintf+1,f
  8945  0CB1  3000               	movlw	low (_dpowers| (0+32768))
  8946  0CB2  0737               	addwf	??_sprintf,w
  8947  0CB3  0084               	movwf	4
  8948  0CB4  30B9               	movlw	high (_dpowers| (0+32768))
  8949  0CB5  3D38               	addwfc	??_sprintf+1,w
  8950  0CB6  0085               	movwf	5
  8951  0CB7  3F00               	moviw [0]fsr0
  8952  0CB8  00B9               	movwf	??_sprintf+2
  8953  0CB9  3F01               	moviw [1]fsr0
  8954  0CBA  00BA               	movwf	??_sprintf+3
  8955  0CBB  3F02               	moviw [2]fsr0
  8956  0CBC  00BB               	movwf	??_sprintf+4
  8957  0CBD  3F03               	moviw [3]fsr0
  8958  0CBE  00BC               	movwf	??_sprintf+5
  8959  0CBF  083C               	movf	??_sprintf+5,w
  8960  0CC0  0242               	subwf	sprintf@val+3,w
  8961  0CC1  1D03               	skipz
  8962  0CC2  2CCD               	goto	u3265
  8963  0CC3  083B               	movf	??_sprintf+4,w
  8964  0CC4  0241               	subwf	sprintf@val+2,w
  8965  0CC5  1D03               	skipz
  8966  0CC6  2CCD               	goto	u3265
  8967  0CC7  083A               	movf	??_sprintf+3,w
  8968  0CC8  0240               	subwf	sprintf@val+1,w
  8969  0CC9  1D03               	skipz
  8970  0CCA  2CCD               	goto	u3265
  8971  0CCB  0839               	movf	??_sprintf+2,w
  8972  0CCC  023F               	subwf	sprintf@val,w
  8973  0CCD                     u3265:	
  8974  0CCD  1C03               	btfss	3,0
  8975  0CCE  2CD7               	goto	l3536
  8976                           
  8977                           ;doprnt.c: 1307: break;
  8978  0CCF  3001               	movlw	1
  8979  0CD0  00B7               	movwf	??_sprintf
  8980  0CD1  0837               	movf	??_sprintf,w
  8981  0CD2  07C8               	addwf	sprintf@c,f
  8982  0CD3  300A               	movlw	10
  8983  0CD4  0648               	xorwf	sprintf@c,w
  8984  0CD5  1D03               	btfss	3,2
  8985  0CD6  2CAA               	goto	l3530
  8986  0CD7                     l3536:	
  8987                           
  8988                           ;doprnt.c: 1339: if(c < prec)
  8989  0CD7  0848               	movf	sprintf@c,w
  8990  0CD8  00B7               	movwf	??_sprintf
  8991  0CD9  01B8               	clrf	??_sprintf+1
  8992  0CDA  1BB7               	btfsc	??_sprintf,7
  8993  0CDB  03B8               	decf	??_sprintf+1,f
  8994  0CDC  0838               	movf	??_sprintf+1,w
  8995  0CDD  3A80               	xorlw	128
  8996  0CDE  00B9               	movwf	??_sprintf+2
  8997  0CDF  0847               	movf	sprintf@prec+1,w
  8998  0CE0  3A80               	xorlw	128
  8999  0CE1  0239               	subwf	??_sprintf+2,w
  9000  0CE2  1D03               	skipz
  9001  0CE3  2CE6               	goto	u3285
  9002  0CE4  0846               	movf	sprintf@prec,w
  9003  0CE5  0237               	subwf	??_sprintf,w
  9004  0CE6                     u3285:	
  9005  0CE6  1803               	skipnc
  9006  0CE7  2CEE               	goto	l3540
  9007                           
  9008                           ;doprnt.c: 1340: c = prec;
  9009  0CE8  0020               	movlb	0	; select bank0
  9010  0CE9  0846               	movf	sprintf@prec,w
  9011  0CEA  00B7               	movwf	??_sprintf
  9012  0CEB  0837               	movf	??_sprintf,w
  9013  0CEC  00C8               	movwf	sprintf@c
  9014  0CED  2D06               	goto	l3544
  9015  0CEE                     l3540:	
  9016                           
  9017                           ;doprnt.c: 1341: else if(prec < c)
  9018  0CEE  0020               	movlb	0	; select bank0
  9019  0CEF  0848               	movf	sprintf@c,w
  9020  0CF0  00B7               	movwf	??_sprintf
  9021  0CF1  01B8               	clrf	??_sprintf+1
  9022  0CF2  1BB7               	btfsc	??_sprintf,7
  9023  0CF3  03B8               	decf	??_sprintf+1,f
  9024  0CF4  0847               	movf	sprintf@prec+1,w
  9025  0CF5  3A80               	xorlw	128
  9026  0CF6  00B9               	movwf	??_sprintf+2
  9027  0CF7  0838               	movf	??_sprintf+1,w
  9028  0CF8  3A80               	xorlw	128
  9029  0CF9  0239               	subwf	??_sprintf+2,w
  9030  0CFA  1D03               	skipz
  9031  0CFB  2CFE               	goto	u3295
  9032  0CFC  0837               	movf	??_sprintf,w
  9033  0CFD  0246               	subwf	sprintf@prec,w
  9034  0CFE                     u3295:	
  9035  0CFE  1803               	skipnc
  9036  0CFF  2D06               	goto	l3544
  9037                           
  9038                           ;doprnt.c: 1342: prec = c;
  9039  0D00  0020               	movlb	0	; select bank0
  9040  0D01  0848               	movf	sprintf@c,w
  9041  0D02  00C6               	movwf	sprintf@prec
  9042  0D03  01C7               	clrf	sprintf@prec+1
  9043  0D04  1BC6               	btfsc	sprintf@prec,7
  9044  0D05  03C7               	decf	sprintf@prec+1,f
  9045  0D06                     l3544:	
  9046                           
  9047                           ;doprnt.c: 1381: if(width > c)
  9048  0D06  0020               	movlb	0	; select bank0
  9049  0D07  0848               	movf	sprintf@c,w
  9050  0D08  00B7               	movwf	??_sprintf
  9051  0D09  01B8               	clrf	??_sprintf+1
  9052  0D0A  1BB7               	btfsc	??_sprintf,7
  9053  0D0B  03B8               	decf	??_sprintf+1,f
  9054  0D0C  0838               	movf	??_sprintf+1,w
  9055  0D0D  3A80               	xorlw	128
  9056  0D0E  00B9               	movwf	??_sprintf+2
  9057  0D0F  0845               	movf	sprintf@width+1,w
  9058  0D10  3A80               	xorlw	128
  9059  0D11  0239               	subwf	??_sprintf+2,w
  9060  0D12  1D03               	skipz
  9061  0D13  2D16               	goto	u3305
  9062  0D14  0844               	movf	sprintf@width,w
  9063  0D15  0237               	subwf	??_sprintf,w
  9064  0D16                     u3305:	
  9065  0D16  1803               	skipnc
  9066  0D17  2D23               	goto	l3548
  9067                           
  9068                           ;doprnt.c: 1382: width -= c;
  9069  0D18  0020               	movlb	0	; select bank0
  9070  0D19  0848               	movf	sprintf@c,w
  9071  0D1A  00B7               	movwf	??_sprintf
  9072  0D1B  01B8               	clrf	??_sprintf+1
  9073  0D1C  1BB7               	btfsc	??_sprintf,7
  9074  0D1D  03B8               	decf	??_sprintf+1,f
  9075  0D1E  0837               	movf	??_sprintf,w
  9076  0D1F  02C4               	subwf	sprintf@width,f
  9077  0D20  0838               	movf	??_sprintf+1,w
  9078  0D21  3BC5               	subwfb	sprintf@width+1,f
  9079  0D22  2D26               	goto	l3550
  9080  0D23                     l3548:	
  9081                           
  9082                           ;doprnt.c: 1383: else
  9083                           ;doprnt.c: 1384: width = 0;
  9084  0D23  0020               	movlb	0	; select bank0
  9085  0D24  01C4               	clrf	sprintf@width
  9086  0D25  01C5               	clrf	sprintf@width+1
  9087  0D26                     l3550:	
  9088                           
  9089                           ;doprnt.c: 1422: {
  9090                           ;doprnt.c: 1424: if(width
  9091                           ;doprnt.c: 1428: )
  9092  0D26  0844               	movf	sprintf@width,w
  9093  0D27  0445               	iorwf	sprintf@width+1,w
  9094  0D28  1903               	btfsc	3,2
  9095  0D29  2D80               	goto	l3564
  9096                           
  9097                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  9098                           
  9099                           ;doprnt.c: 1429: do
  9100  0D2A  3020               	movlw	32
  9101  0D2B  00B7               	movwf	??_sprintf
  9102  0D2C  0843               	movf	sprintf@sp,w
  9103  0D2D  0086               	movwf	6
  9104  0D2E  3001               	movlw	1	; select bank2/3
  9105  0D2F  0087               	movwf	7
  9106  0D30  0837               	movf	??_sprintf,w
  9107  0D31  0081               	movwf	1
  9108  0D32  3001               	movlw	1
  9109  0D33  00B7               	movwf	??_sprintf
  9110  0D34  0837               	movf	??_sprintf,w
  9111  0D35  07C3               	addwf	sprintf@sp,f
  9112                           
  9113                           ;doprnt.c: 1431: while(--width);
  9114  0D36  30FF               	movlw	255
  9115  0D37  07C4               	addwf	sprintf@width,f
  9116  0D38  30FF               	movlw	255
  9117  0D39  3DC5               	addwfc	sprintf@width+1,f
  9118  0D3A  2D26               	goto	l3550
  9119  0D3B                     l3558:	
  9120                           ;doprnt.c: 1469: }
  9121                           ;doprnt.c: 1474: while(prec--) {
  9122                           
  9123                           
  9124                           ;doprnt.c: 1478: {
  9125                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  9126  0D3B  3000               	movlw	0
  9127  0D3C  00A8               	movwf	___llmod@divisor+3
  9128  0D3D  3000               	movlw	0
  9129  0D3E  00A7               	movwf	___llmod@divisor+2
  9130  0D3F  3000               	movlw	0
  9131  0D40  00A6               	movwf	___llmod@divisor+1
  9132  0D41  300A               	movlw	10
  9133  0D42  00A5               	movwf	___llmod@divisor
  9134  0D43  0847               	movf	sprintf@prec+1,w
  9135  0D44  0085               	movwf	5
  9136  0D45  0846               	movf	sprintf@prec,w
  9137  0D46  0084               	movwf	4
  9138  0D47  3584               	lslf	4,f
  9139  0D48  0D85               	rlf	5,f
  9140  0D49  3584               	lslf	4,f
  9141  0D4A  0D85               	rlf	5,f
  9142  0D4B  3000               	movlw	low (_dpowers| (0+32768))
  9143  0D4C  0784               	addwf	4,f
  9144  0D4D  30B9               	movlw	high (_dpowers| (0+32768))
  9145  0D4E  3D85               	addwfc	5,f
  9146  0D4F  3F00               	moviw [0]fsr0
  9147  0D50  00F1               	movwf	___lldiv@divisor
  9148  0D51  3F01               	moviw [1]fsr0
  9149  0D52  00F2               	movwf	___lldiv@divisor+1
  9150  0D53  3F02               	moviw [2]fsr0
  9151  0D54  00F3               	movwf	___lldiv@divisor+2
  9152  0D55  3F03               	moviw [3]fsr0
  9153  0D56  00F4               	movwf	___lldiv@divisor+3
  9154  0D57  0842               	movf	sprintf@val+3,w
  9155  0D58  00F8               	movwf	___lldiv@dividend+3
  9156  0D59  0841               	movf	sprintf@val+2,w
  9157  0D5A  00F7               	movwf	___lldiv@dividend+2
  9158  0D5B  0840               	movf	sprintf@val+1,w
  9159  0D5C  00F6               	movwf	___lldiv@dividend+1
  9160  0D5D  083F               	movf	sprintf@val,w
  9161  0D5E  00F5               	movwf	___lldiv@dividend
  9162  0D5F  3193  23B2  318B   	fcall	___lldiv
  9163  0D62  0874               	movf	?___lldiv+3,w
  9164  0D63  0020               	movlb	0	; select bank0
  9165  0D64  00AC               	movwf	___llmod@dividend+3
  9166  0D65  0873               	movf	?___lldiv+2,w
  9167  0D66  00AB               	movwf	___llmod@dividend+2
  9168  0D67  0872               	movf	?___lldiv+1,w
  9169  0D68  00AA               	movwf	___llmod@dividend+1
  9170  0D69  0871               	movf	?___lldiv,w
  9171  0D6A  00A9               	movwf	___llmod@dividend
  9172  0D6B  3192  2289  318B   	fcall	___llmod
  9173  0D6E  0020               	movlb	0	; select bank0
  9174  0D6F  0825               	movf	?___llmod,w
  9175  0D70  3E30               	addlw	48
  9176  0D71  00B7               	movwf	??_sprintf
  9177  0D72  0837               	movf	??_sprintf,w
  9178  0D73  00C8               	movwf	sprintf@c
  9179                           
  9180                           ;doprnt.c: 1523: }
  9181                           ;doprnt.c: 1524: ((*sp++ = (c)));
  9182  0D74  0848               	movf	sprintf@c,w
  9183  0D75  00B7               	movwf	??_sprintf
  9184  0D76  0843               	movf	sprintf@sp,w
  9185  0D77  0086               	movwf	6
  9186  0D78  3001               	movlw	1	; select bank2/3
  9187  0D79  0087               	movwf	7
  9188  0D7A  0837               	movf	??_sprintf,w
  9189  0D7B  0081               	movwf	1
  9190  0D7C  3001               	movlw	1
  9191  0D7D  00B7               	movwf	??_sprintf
  9192  0D7E  0837               	movf	??_sprintf,w
  9193  0D7F  07C3               	addwf	sprintf@sp,f
  9194  0D80                     l3564:	
  9195  0D80  30FF               	movlw	255
  9196  0D81  07C6               	addwf	sprintf@prec,f
  9197  0D82  30FF               	movlw	255
  9198  0D83  3DC7               	addwfc	sprintf@prec+1,f
  9199  0D84  0A46               	incf	sprintf@prec,w
  9200  0D85  1D03               	skipz
  9201  0D86  2D3B               	goto	l3558
  9202  0D87  0A47               	incf	sprintf@prec+1,w
  9203  0D88  1903               	btfsc	3,2
  9204  0D89  2BB4               	goto	l3566
  9205  0D8A  2D3B               	goto	l3558
  9206  0D8B                     l3568:	
  9207                           ;doprnt.c: 1525: }
  9208                           ;doprnt.c: 1533: }
  9209                           ;doprnt.c: 1535: alldone:
  9210                           
  9211                           
  9212                           ;doprnt.c: 1538: *sp = 0;
  9213  0D8B  0843               	movf	sprintf@sp,w
  9214  0D8C  0086               	movwf	6
  9215  0D8D  3001               	movlw	1	; select bank2/3
  9216  0D8E  0087               	movwf	7
  9217  0D8F  0181               	clrf	1
  9218  0D90  0008               	return
  9219  0D91                     __end_of_sprintf:	
  9220                           ;doprnt.c: 1540: return 0;
  9221                           ;	Return value of _sprintf is never used
  9222                           
  9223                           
  9224                           	psect	text26
  9225  1D19                     __ptext26:	
  9226 ;; *************** function _isdigit *****************
  9227 ;; Defined at:
  9228 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  9229 ;; Parameters:    Size  Location     Type
  9230 ;;  c               1    wreg     unsigned char 
  9231 ;; Auto vars:     Size  Location     Type
  9232 ;;  c               1    2[COMMON] unsigned char 
  9233 ;; Return value:  Size  Location     Type
  9234 ;;		None               void
  9235 ;; Registers used:
  9236 ;;		wreg, status,2, status,0
  9237 ;; Tracked objects:
  9238 ;;		On entry : 0/0
  9239 ;;		On exit  : 0/0
  9240 ;;		Unchanged: 0/0
  9241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9242 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9243 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9244 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9245 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9246 ;;Total ram usage:        2 bytes
  9247 ;; Hardware stack levels used:    1
  9248 ;; Hardware stack levels required when called:    2
  9249 ;; This function calls:
  9250 ;;		Nothing
  9251 ;; This function is called by:
  9252 ;;		_sprintf
  9253 ;; This function uses a non-reentrant model
  9254 ;;
  9255                           
  9256                           
  9257                           ;psect for function _isdigit
  9258  1D19                     _isdigit:	
  9259                           
  9260                           ;incstack = 0
  9261                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  9262                           ;isdigit@c stored from wreg
  9263  1D19  00F2               	movwf	isdigit@c
  9264  1D1A  01F1               	clrf	_isdigit$1177
  9265  1D1B  303A               	movlw	58
  9266  1D1C  0272               	subwf	isdigit@c,w
  9267  1D1D  1803               	skipnc
  9268  1D1E  2D25               	goto	l3298
  9269  1D1F  3030               	movlw	48
  9270  1D20  0272               	subwf	isdigit@c,w
  9271  1D21  1C03               	skipc
  9272  1D22  2D25               	goto	l3298
  9273  1D23  01F1               	clrf	_isdigit$1177
  9274  1D24  0AF1               	incf	_isdigit$1177,f
  9275  1D25                     l3298:	
  9276  1D25  0C71               	rrf	_isdigit$1177,w
  9277  1D26  0008               	return
  9278  1D27                     __end_of_isdigit:	
  9279                           
  9280                           	psect	text27
  9281  1E22                     __ptext27:	
  9282 ;; *************** function ___wmul *****************
  9283 ;; Defined at:
  9284 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  9285 ;; Parameters:    Size  Location     Type
  9286 ;;  multiplier      2    1[COMMON] unsigned int 
  9287 ;;  multiplicand    2    3[COMMON] unsigned int 
  9288 ;; Auto vars:     Size  Location     Type
  9289 ;;  product         2    5[COMMON] unsigned int 
  9290 ;; Return value:  Size  Location     Type
  9291 ;;                  2    1[COMMON] unsigned int 
  9292 ;; Registers used:
  9293 ;;		wreg, status,2, status,0
  9294 ;; Tracked objects:
  9295 ;;		On entry : 0/0
  9296 ;;		On exit  : 0/0
  9297 ;;		Unchanged: 0/0
  9298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9299 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9300 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9302 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9303 ;;Total ram usage:        6 bytes
  9304 ;; Hardware stack levels used:    1
  9305 ;; Hardware stack levels required when called:    2
  9306 ;; This function calls:
  9307 ;;		Nothing
  9308 ;; This function is called by:
  9309 ;;		_sprintf
  9310 ;; This function uses a non-reentrant model
  9311 ;;
  9312                           
  9313                           
  9314                           ;psect for function ___wmul
  9315  1E22                     ___wmul:	
  9316                           
  9317                           ;incstack = 0
  9318                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  9319  1E22  01F5               	clrf	___wmul@product
  9320  1E23  01F6               	clrf	___wmul@product+1
  9321  1E24                     l3304:	
  9322  1E24  1C71               	btfss	___wmul@multiplier,0
  9323  1E25  2E2A               	goto	l779
  9324  1E26  0873               	movf	___wmul@multiplicand,w
  9325  1E27  07F5               	addwf	___wmul@product,f
  9326  1E28  0874               	movf	___wmul@multiplicand+1,w
  9327  1E29  3DF6               	addwfc	___wmul@product+1,f
  9328  1E2A                     l779:	
  9329  1E2A  3001               	movlw	1
  9330  1E2B                     u2715:	
  9331  1E2B  35F3               	lslf	___wmul@multiplicand,f
  9332  1E2C  0DF4               	rlf	___wmul@multiplicand+1,f
  9333  1E2D  0B89               	decfsz	9,f
  9334  1E2E  2E2B               	goto	u2715
  9335  1E2F  3001               	movlw	1
  9336  1E30                     u2725:	
  9337  1E30  36F2               	lsrf	___wmul@multiplier+1,f
  9338  1E31  0CF1               	rrf	___wmul@multiplier,f
  9339  1E32  0B89               	decfsz	9,f
  9340  1E33  2E30               	goto	u2725
  9341  1E34  0871               	movf	___wmul@multiplier,w
  9342  1E35  0472               	iorwf	___wmul@multiplier+1,w
  9343  1E36  1D03               	btfss	3,2
  9344  1E37  2E24               	goto	l3304
  9345  1E38  0876               	movf	___wmul@product+1,w
  9346  1E39  00F2               	movwf	?___wmul+1
  9347  1E3A  0875               	movf	___wmul@product,w
  9348  1E3B  00F1               	movwf	?___wmul
  9349  1E3C  0008               	return
  9350  1E3D                     __end_of___wmul:	
  9351                           
  9352                           	psect	text28
  9353  1289                     __ptext28:	
  9354 ;; *************** function ___llmod *****************
  9355 ;; Defined at:
  9356 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
  9357 ;; Parameters:    Size  Location     Type
  9358 ;;  divisor         4    5[BANK0 ] unsigned long 
  9359 ;;  dividend        4    9[BANK0 ] unsigned long 
  9360 ;; Auto vars:     Size  Location     Type
  9361 ;;  counter         1   11[COMMON] unsigned char 
  9362 ;; Return value:  Size  Location     Type
  9363 ;;                  4    5[BANK0 ] unsigned long 
  9364 ;; Registers used:
  9365 ;;		wreg, status,2, status,0
  9366 ;; Tracked objects:
  9367 ;;		On entry : 0/0
  9368 ;;		On exit  : 0/0
  9369 ;;		Unchanged: 0/0
  9370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9371 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9372 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9373 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9374 ;;      Totals:         2       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9375 ;;Total ram usage:       10 bytes
  9376 ;; Hardware stack levels used:    1
  9377 ;; Hardware stack levels required when called:    2
  9378 ;; This function calls:
  9379 ;;		Nothing
  9380 ;; This function is called by:
  9381 ;;		_sprintf
  9382 ;; This function uses a non-reentrant model
  9383 ;;
  9384                           
  9385                           
  9386                           ;psect for function ___llmod
  9387  1289                     ___llmod:	
  9388                           
  9389                           ;incstack = 0
  9390                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  9391  1289  0020               	movlb	0	; select bank0
  9392  128A  0828               	movf	___llmod@divisor+3,w
  9393  128B  0427               	iorwf	___llmod@divisor+2,w
  9394  128C  0426               	iorwf	___llmod@divisor+1,w
  9395  128D  0425               	iorwf	___llmod@divisor,w
  9396  128E  1903               	skipnz
  9397  128F  2AC3               	goto	l3426
  9398  1290  01FB               	clrf	___llmod@counter
  9399  1291  0AFB               	incf	___llmod@counter,f
  9400  1292                     l3416:	
  9401  1292  1BA8               	btfsc	___llmod@divisor+3,7
  9402  1293  2AA0               	goto	l3418
  9403  1294  3001               	movlw	1
  9404  1295                     u3055:	
  9405  1295  35A5               	lslf	___llmod@divisor,f
  9406  1296  0DA6               	rlf	___llmod@divisor+1,f
  9407  1297  0DA7               	rlf	___llmod@divisor+2,f
  9408  1298  0DA8               	rlf	___llmod@divisor+3,f
  9409  1299  0B89               	decfsz	9,f
  9410  129A  2A95               	goto	u3055
  9411  129B  3001               	movlw	1
  9412  129C  00FA               	movwf	??___llmod
  9413  129D  087A               	movf	??___llmod,w
  9414  129E  07FB               	addwf	___llmod@counter,f
  9415  129F  2A92               	goto	l3416
  9416  12A0                     l3418:	
  9417  12A0  0828               	movf	___llmod@divisor+3,w
  9418  12A1  022C               	subwf	___llmod@dividend+3,w
  9419  12A2  1D03               	skipz
  9420  12A3  2AAE               	goto	u3075
  9421  12A4  0827               	movf	___llmod@divisor+2,w
  9422  12A5  022B               	subwf	___llmod@dividend+2,w
  9423  12A6  1D03               	skipz
  9424  12A7  2AAE               	goto	u3075
  9425  12A8  0826               	movf	___llmod@divisor+1,w
  9426  12A9  022A               	subwf	___llmod@dividend+1,w
  9427  12AA  1D03               	skipz
  9428  12AB  2AAE               	goto	u3075
  9429  12AC  0825               	movf	___llmod@divisor,w
  9430  12AD  0229               	subwf	___llmod@dividend,w
  9431  12AE                     u3075:	
  9432  12AE  1C03               	skipc
  9433  12AF  2AB8               	goto	l3422
  9434  12B0  0825               	movf	___llmod@divisor,w
  9435  12B1  02A9               	subwf	___llmod@dividend,f
  9436  12B2  0826               	movf	___llmod@divisor+1,w
  9437  12B3  3BAA               	subwfb	___llmod@dividend+1,f
  9438  12B4  0827               	movf	___llmod@divisor+2,w
  9439  12B5  3BAB               	subwfb	___llmod@dividend+2,f
  9440  12B6  0828               	movf	___llmod@divisor+3,w
  9441  12B7  3BAC               	subwfb	___llmod@dividend+3,f
  9442  12B8                     l3422:	
  9443  12B8  3001               	movlw	1
  9444  12B9                     u3085:	
  9445  12B9  36A8               	lsrf	___llmod@divisor+3,f
  9446  12BA  0CA7               	rrf	___llmod@divisor+2,f
  9447  12BB  0CA6               	rrf	___llmod@divisor+1,f
  9448  12BC  0CA5               	rrf	___llmod@divisor,f
  9449  12BD  0B89               	decfsz	9,f
  9450  12BE  2AB9               	goto	u3085
  9451  12BF  3001               	movlw	1
  9452  12C0  02FB               	subwf	___llmod@counter,f
  9453  12C1  1D03               	btfss	3,2
  9454  12C2  2AA0               	goto	l3418
  9455  12C3                     l3426:	
  9456  12C3  082C               	movf	___llmod@dividend+3,w
  9457  12C4  00A8               	movwf	?___llmod+3
  9458  12C5  082B               	movf	___llmod@dividend+2,w
  9459  12C6  00A7               	movwf	?___llmod+2
  9460  12C7  082A               	movf	___llmod@dividend+1,w
  9461  12C8  00A6               	movwf	?___llmod+1
  9462  12C9  0829               	movf	___llmod@dividend,w
  9463  12CA  00A5               	movwf	?___llmod
  9464  12CB  0008               	return
  9465  12CC                     __end_of___llmod:	
  9466                           
  9467                           	psect	text29
  9468  13B2                     __ptext29:	
  9469 ;; *************** function ___lldiv *****************
  9470 ;; Defined at:
  9471 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
  9472 ;; Parameters:    Size  Location     Type
  9473 ;;  divisor         4    1[COMMON] unsigned long 
  9474 ;;  dividend        4    5[COMMON] unsigned long 
  9475 ;; Auto vars:     Size  Location     Type
  9476 ;;  quotient        4    0[BANK0 ] unsigned long 
  9477 ;;  counter         1    4[BANK0 ] unsigned char 
  9478 ;; Return value:  Size  Location     Type
  9479 ;;                  4    1[COMMON] unsigned long 
  9480 ;; Registers used:
  9481 ;;		wreg, status,2, status,0
  9482 ;; Tracked objects:
  9483 ;;		On entry : 0/0
  9484 ;;		On exit  : 0/0
  9485 ;;		Unchanged: 0/0
  9486 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9487 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9488 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9489 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9490 ;;      Totals:         9       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9491 ;;Total ram usage:       14 bytes
  9492 ;; Hardware stack levels used:    1
  9493 ;; Hardware stack levels required when called:    2
  9494 ;; This function calls:
  9495 ;;		Nothing
  9496 ;; This function is called by:
  9497 ;;		_sprintf
  9498 ;; This function uses a non-reentrant model
  9499 ;;
  9500                           
  9501                           
  9502                           ;psect for function ___lldiv
  9503  13B2                     ___lldiv:	
  9504                           
  9505                           ;incstack = 0
  9506                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  9507  13B2  3000               	movlw	0
  9508  13B3  0020               	movlb	0	; select bank0
  9509  13B4  00A3               	movwf	___lldiv@quotient+3
  9510  13B5  3000               	movlw	0
  9511  13B6  00A2               	movwf	___lldiv@quotient+2
  9512  13B7  3000               	movlw	0
  9513  13B8  00A1               	movwf	___lldiv@quotient+1
  9514  13B9  3000               	movlw	0
  9515  13BA  00A0               	movwf	___lldiv@quotient
  9516  13BB  0874               	movf	___lldiv@divisor+3,w
  9517  13BC  0473               	iorwf	___lldiv@divisor+2,w
  9518  13BD  0472               	iorwf	___lldiv@divisor+1,w
  9519  13BE  0471               	iorwf	___lldiv@divisor,w
  9520  13BF  1903               	skipnz
  9521  13C0  2BFC               	goto	l3406
  9522  13C1  01A4               	clrf	___lldiv@counter
  9523  13C2  0AA4               	incf	___lldiv@counter,f
  9524  13C3                     l3392:	
  9525  13C3  1BF4               	btfsc	___lldiv@divisor+3,7
  9526  13C4  2BD1               	goto	l3394
  9527  13C5  3001               	movlw	1
  9528  13C6                     u2985:	
  9529  13C6  35F1               	lslf	___lldiv@divisor,f
  9530  13C7  0DF2               	rlf	___lldiv@divisor+1,f
  9531  13C8  0DF3               	rlf	___lldiv@divisor+2,f
  9532  13C9  0DF4               	rlf	___lldiv@divisor+3,f
  9533  13CA  0B89               	decfsz	9,f
  9534  13CB  2BC6               	goto	u2985
  9535  13CC  3001               	movlw	1
  9536  13CD  00F9               	movwf	??___lldiv
  9537  13CE  0879               	movf	??___lldiv,w
  9538  13CF  07A4               	addwf	___lldiv@counter,f
  9539  13D0  2BC3               	goto	l3392
  9540  13D1                     l3394:	
  9541  13D1  3001               	movlw	1
  9542  13D2                     u3005:	
  9543  13D2  35A0               	lslf	___lldiv@quotient,f
  9544  13D3  0DA1               	rlf	___lldiv@quotient+1,f
  9545  13D4  0DA2               	rlf	___lldiv@quotient+2,f
  9546  13D5  0DA3               	rlf	___lldiv@quotient+3,f
  9547  13D6  0B89               	decfsz	9,f
  9548  13D7  2BD2               	goto	u3005
  9549  13D8  0874               	movf	___lldiv@divisor+3,w
  9550  13D9  0278               	subwf	___lldiv@dividend+3,w
  9551  13DA  1D03               	skipz
  9552  13DB  2BE6               	goto	u3015
  9553  13DC  0873               	movf	___lldiv@divisor+2,w
  9554  13DD  0277               	subwf	___lldiv@dividend+2,w
  9555  13DE  1D03               	skipz
  9556  13DF  2BE6               	goto	u3015
  9557  13E0  0872               	movf	___lldiv@divisor+1,w
  9558  13E1  0276               	subwf	___lldiv@dividend+1,w
  9559  13E2  1D03               	skipz
  9560  13E3  2BE6               	goto	u3015
  9561  13E4  0871               	movf	___lldiv@divisor,w
  9562  13E5  0275               	subwf	___lldiv@dividend,w
  9563  13E6                     u3015:	
  9564  13E6  1C03               	skipc
  9565  13E7  2BF1               	goto	l3402
  9566  13E8  0871               	movf	___lldiv@divisor,w
  9567  13E9  02F5               	subwf	___lldiv@dividend,f
  9568  13EA  0872               	movf	___lldiv@divisor+1,w
  9569  13EB  3BF6               	subwfb	___lldiv@dividend+1,f
  9570  13EC  0873               	movf	___lldiv@divisor+2,w
  9571  13ED  3BF7               	subwfb	___lldiv@dividend+2,f
  9572  13EE  0874               	movf	___lldiv@divisor+3,w
  9573  13EF  3BF8               	subwfb	___lldiv@dividend+3,f
  9574  13F0  1420               	bsf	___lldiv@quotient,0
  9575  13F1                     l3402:	
  9576  13F1  3001               	movlw	1
  9577  13F2                     u3025:	
  9578  13F2  36F4               	lsrf	___lldiv@divisor+3,f
  9579  13F3  0CF3               	rrf	___lldiv@divisor+2,f
  9580  13F4  0CF2               	rrf	___lldiv@divisor+1,f
  9581  13F5  0CF1               	rrf	___lldiv@divisor,f
  9582  13F6  0B89               	decfsz	9,f
  9583  13F7  2BF2               	goto	u3025
  9584  13F8  3001               	movlw	1
  9585  13F9  02A4               	subwf	___lldiv@counter,f
  9586  13FA  1D03               	btfss	3,2
  9587  13FB  2BD1               	goto	l3394
  9588  13FC                     l3406:	
  9589  13FC  0823               	movf	___lldiv@quotient+3,w
  9590  13FD  00F4               	movwf	?___lldiv+3
  9591  13FE  0822               	movf	___lldiv@quotient+2,w
  9592  13FF  00F3               	movwf	?___lldiv+2
  9593  1400  0821               	movf	___lldiv@quotient+1,w
  9594  1401  00F2               	movwf	?___lldiv+1
  9595  1402  0820               	movf	___lldiv@quotient,w
  9596  1403  00F1               	movwf	?___lldiv
  9597  1404  0008               	return
  9598  1405                     __end_of___lldiv:	
  9599                           
  9600                           	psect	text30
  9601  1062                     __ptext30:	
  9602 ;; *************** function ___lltoft *****************
  9603 ;; Defined at:
  9604 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lltoft.c"
  9605 ;; Parameters:    Size  Location     Type
  9606 ;;  c               4    0[BANK0 ] unsigned long 
  9607 ;; Auto vars:     Size  Location     Type
  9608 ;;  exp             1   10[COMMON] unsigned char 
  9609 ;; Return value:  Size  Location     Type
  9610 ;;                  3    0[BANK0 ] float 
  9611 ;; Registers used:
  9612 ;;		wreg, status,2, status,0, pclath, cstack
  9613 ;; Tracked objects:
  9614 ;;		On entry : 0/0
  9615 ;;		On exit  : 0/0
  9616 ;;		Unchanged: 0/0
  9617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9618 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9619 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9620 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9621 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9622 ;;Total ram usage:        6 bytes
  9623 ;; Hardware stack levels used:    1
  9624 ;; Hardware stack levels required when called:    3
  9625 ;; This function calls:
  9626 ;;		___ftpack
  9627 ;; This function is called by:
  9628 ;;		_ftoa
  9629 ;; This function uses a non-reentrant model
  9630 ;;
  9631                           
  9632                           
  9633                           ;psect for function ___lltoft
  9634  1062                     ___lltoft:	
  9635                           
  9636                           ;incstack = 0
  9637                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  9638  1062  308E               	movlw	142
  9639  1063  00F9               	movwf	??___lltoft
  9640  1064  0879               	movf	??___lltoft,w
  9641  1065  00FA               	movwf	___lltoft@exp
  9642  1066                     l5492:	
  9643  1066  30FF               	movlw	255
  9644  1067  0020               	movlb	0	; select bank0
  9645  1068  0523               	andwf	___lltoft@c+3,w
  9646  1069  1903               	btfsc	3,2
  9647  106A  2878               	goto	l5494
  9648  106B  3001               	movlw	1
  9649  106C                     u5615:	
  9650  106C  0020               	movlb	0	; select bank0
  9651  106D  36A3               	lsrf	___lltoft@c+3,f
  9652  106E  0CA2               	rrf	___lltoft@c+2,f
  9653  106F  0CA1               	rrf	___lltoft@c+1,f
  9654  1070  0CA0               	rrf	___lltoft@c,f
  9655  1071  0B89               	decfsz	9,f
  9656  1072  286C               	goto	u5615
  9657  1073  3001               	movlw	1
  9658  1074  00F9               	movwf	??___lltoft
  9659  1075  0879               	movf	??___lltoft,w
  9660  1076  07FA               	addwf	___lltoft@exp,f
  9661  1077  2866               	goto	l5492
  9662  1078                     l5494:	
  9663  1078  0820               	movf	___lltoft@c,w
  9664  1079  00F1               	movwf	___ftpack@arg
  9665  107A  0821               	movf	___lltoft@c+1,w
  9666  107B  00F2               	movwf	___ftpack@arg+1
  9667  107C  0822               	movf	___lltoft@c+2,w
  9668  107D  00F3               	movwf	___ftpack@arg+2
  9669  107E  087A               	movf	___lltoft@exp,w
  9670  107F  00F9               	movwf	??___lltoft
  9671  1080  0879               	movf	??___lltoft,w
  9672  1081  00F4               	movwf	___ftpack@exp
  9673  1082  01F5               	clrf	___ftpack@sign
  9674  1083  3195  2517         	fcall	___ftpack
  9675  1085  0871               	movf	?___ftpack,w
  9676  1086  0020               	movlb	0	; select bank0
  9677  1087  00A0               	movwf	?___lltoft
  9678  1088  0872               	movf	?___ftpack+1,w
  9679  1089  00A1               	movwf	?___lltoft+1
  9680  108A  0873               	movf	?___ftpack+2,w
  9681  108B  00A2               	movwf	?___lltoft+2
  9682  108C  0008               	return
  9683  108D                     __end_of___lltoft:	
  9684                           
  9685                           	psect	text31
  9686  157B                     __ptext31:	
  9687 ;; *************** function ___fttol *****************
  9688 ;; Defined at:
  9689 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
  9690 ;; Parameters:    Size  Location     Type
  9691 ;;  f1              3   16[BANK0 ] float 
  9692 ;; Auto vars:     Size  Location     Type
  9693 ;;  lval            4   25[BANK0 ] unsigned long 
  9694 ;;  exp1            1   29[BANK0 ] unsigned char 
  9695 ;;  sign1           1   24[BANK0 ] unsigned char 
  9696 ;; Return value:  Size  Location     Type
  9697 ;;                  4   16[BANK0 ] long 
  9698 ;; Registers used:
  9699 ;;		wreg, status,2, status,0
  9700 ;; Tracked objects:
  9701 ;;		On entry : 0/0
  9702 ;;		On exit  : 0/0
  9703 ;;		Unchanged: 0/0
  9704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9705 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9706 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9707 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9708 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9709 ;;Total ram usage:       14 bytes
  9710 ;; Hardware stack levels used:    1
  9711 ;; Hardware stack levels required when called:    2
  9712 ;; This function calls:
  9713 ;;		Nothing
  9714 ;; This function is called by:
  9715 ;;		_ftoa
  9716 ;; This function uses a non-reentrant model
  9717 ;;
  9718                           
  9719                           
  9720                           ;psect for function ___fttol
  9721  157B                     ___fttol:	
  9722                           
  9723                           ;incstack = 0
  9724                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  9725  157B  0020               	movlb	0	; select bank0
  9726  157C  0830               	movf	___fttol@f1,w
  9727  157D  00B4               	movwf	??___fttol
  9728  157E  0831               	movf	___fttol@f1+1,w
  9729  157F  00B5               	movwf	??___fttol+1
  9730  1580  0832               	movf	___fttol@f1+2,w
  9731  1581  00B6               	movwf	??___fttol+2
  9732  1582  1003               	clrc
  9733  1583  0D35               	rlf	??___fttol+1,w
  9734  1584  0D36               	rlf	??___fttol+2,w
  9735  1585  00B7               	movwf	??___fttol+3
  9736  1586  0837               	movf	??___fttol+3,w
  9737  1587  00BD               	movwf	___fttol@exp1
  9738  1588  083D               	movf	___fttol@exp1,w
  9739  1589  1D03               	btfss	3,2
  9740  158A  2D94               	goto	l3664
  9741  158B  3000               	movlw	0
  9742  158C  00B3               	movwf	?___fttol+3
  9743  158D  3000               	movlw	0
  9744  158E  00B2               	movwf	?___fttol+2
  9745  158F  3000               	movlw	0
  9746  1590  00B1               	movwf	?___fttol+1
  9747  1591  3000               	movlw	0
  9748  1592  00B0               	movwf	?___fttol
  9749  1593  0008               	return
  9750  1594                     l3664:	
  9751  1594  0830               	movf	___fttol@f1,w
  9752  1595  00B4               	movwf	??___fttol
  9753  1596  0831               	movf	___fttol@f1+1,w
  9754  1597  00B5               	movwf	??___fttol+1
  9755  1598  0832               	movf	___fttol@f1+2,w
  9756  1599  00B6               	movwf	??___fttol+2
  9757  159A  3017               	movlw	23
  9758  159B                     u3535:	
  9759  159B  36B6               	lsrf	??___fttol+2,f
  9760  159C  0CB5               	rrf	??___fttol+1,f
  9761  159D  0CB4               	rrf	??___fttol,f
  9762  159E  0B89               	decfsz	9,f
  9763  159F  2D9B               	goto	u3535
  9764  15A0  0834               	movf	??___fttol,w
  9765  15A1  00B7               	movwf	??___fttol+3
  9766  15A2  0837               	movf	??___fttol+3,w
  9767  15A3  00B8               	movwf	___fttol@sign1
  9768  15A4  17B1               	bsf	___fttol@f1+1,7
  9769  15A5  30FF               	movlw	255
  9770  15A6  05B0               	andwf	___fttol@f1,f
  9771  15A7  30FF               	movlw	255
  9772  15A8  05B1               	andwf	___fttol@f1+1,f
  9773  15A9  3000               	movlw	0
  9774  15AA  05B2               	andwf	___fttol@f1+2,f
  9775  15AB  0830               	movf	___fttol@f1,w
  9776  15AC  00B9               	movwf	___fttol@lval
  9777  15AD  0831               	movf	___fttol@f1+1,w
  9778  15AE  00BA               	movwf	___fttol@lval+1
  9779  15AF  0832               	movf	___fttol@f1+2,w
  9780  15B0  00BB               	movwf	___fttol@lval+2
  9781  15B1  01BC               	clrf	___fttol@lval+3
  9782  15B2  308E               	movlw	142
  9783  15B3  02BD               	subwf	___fttol@exp1,f
  9784  15B4  1FBD               	btfss	___fttol@exp1,7
  9785  15B5  2DD2               	goto	l3684
  9786  15B6  083D               	movf	___fttol@exp1,w
  9787  15B7  3A80               	xorlw	128
  9788  15B8  3E8F               	addlw	143
  9789  15B9  1803               	skipnc
  9790  15BA  2DC4               	goto	l3682
  9791  15BB  3000               	movlw	0
  9792  15BC  00B3               	movwf	?___fttol+3
  9793  15BD  3000               	movlw	0
  9794  15BE  00B2               	movwf	?___fttol+2
  9795  15BF  3000               	movlw	0
  9796  15C0  00B1               	movwf	?___fttol+1
  9797  15C1  3000               	movlw	0
  9798  15C2  00B0               	movwf	?___fttol
  9799  15C3  0008               	return
  9800  15C4                     l3682:	
  9801  15C4  3001               	movlw	1
  9802  15C5                     u3565:	
  9803  15C5  36BC               	lsrf	___fttol@lval+3,f
  9804  15C6  0CBB               	rrf	___fttol@lval+2,f
  9805  15C7  0CBA               	rrf	___fttol@lval+1,f
  9806  15C8  0CB9               	rrf	___fttol@lval,f
  9807  15C9  0B89               	decfsz	9,f
  9808  15CA  2DC5               	goto	u3565
  9809  15CB  3001               	movlw	1
  9810  15CC  00B4               	movwf	??___fttol
  9811  15CD  0834               	movf	??___fttol,w
  9812  15CE  07BD               	addwf	___fttol@exp1,f
  9813  15CF  1903               	btfsc	3,2
  9814  15D0  2DEB               	goto	l3692
  9815  15D1  2DC4               	goto	l3682
  9816  15D2                     l3684:	
  9817  15D2  3018               	movlw	24
  9818  15D3  023D               	subwf	___fttol@exp1,w
  9819  15D4  1C03               	skipc
  9820  15D5  2DE8               	goto	l1039
  9821  15D6  3000               	movlw	0
  9822  15D7  00B3               	movwf	?___fttol+3
  9823  15D8  3000               	movlw	0
  9824  15D9  00B2               	movwf	?___fttol+2
  9825  15DA  3000               	movlw	0
  9826  15DB  00B1               	movwf	?___fttol+1
  9827  15DC  3000               	movlw	0
  9828  15DD  00B0               	movwf	?___fttol
  9829  15DE  0008               	return
  9830  15DF                     l3690:	
  9831  15DF  3001               	movlw	1
  9832  15E0                     u3595:	
  9833  15E0  35B9               	lslf	___fttol@lval,f
  9834  15E1  0DBA               	rlf	___fttol@lval+1,f
  9835  15E2  0DBB               	rlf	___fttol@lval+2,f
  9836  15E3  0DBC               	rlf	___fttol@lval+3,f
  9837  15E4  0B89               	decfsz	9,f
  9838  15E5  2DE0               	goto	u3595
  9839  15E6  3001               	movlw	1
  9840  15E7  02BD               	subwf	___fttol@exp1,f
  9841  15E8                     l1039:	
  9842  15E8  083D               	movf	___fttol@exp1,w
  9843  15E9  1D03               	btfss	3,2
  9844  15EA  2DDF               	goto	l3690
  9845  15EB                     l3692:	
  9846  15EB  0838               	movf	___fttol@sign1,w
  9847  15EC  1903               	btfsc	3,2
  9848  15ED  2DF9               	goto	l3696
  9849  15EE  09B9               	comf	___fttol@lval,f
  9850  15EF  09BA               	comf	___fttol@lval+1,f
  9851  15F0  09BB               	comf	___fttol@lval+2,f
  9852  15F1  09BC               	comf	___fttol@lval+3,f
  9853  15F2  0AB9               	incf	___fttol@lval,f
  9854  15F3  1903               	skipnz
  9855  15F4  0ABA               	incf	___fttol@lval+1,f
  9856  15F5  1903               	skipnz
  9857  15F6  0ABB               	incf	___fttol@lval+2,f
  9858  15F7  1903               	skipnz
  9859  15F8  0ABC               	incf	___fttol@lval+3,f
  9860  15F9                     l3696:	
  9861  15F9  083C               	movf	___fttol@lval+3,w
  9862  15FA  00B3               	movwf	?___fttol+3
  9863  15FB  083B               	movf	___fttol@lval+2,w
  9864  15FC  00B2               	movwf	?___fttol+2
  9865  15FD  083A               	movf	___fttol@lval+1,w
  9866  15FE  00B1               	movwf	?___fttol+1
  9867  15FF  0839               	movf	___fttol@lval,w
  9868  1600  00B0               	movwf	?___fttol
  9869  1601  0008               	return
  9870  1602                     __end_of___fttol:	
  9871                           
  9872                           	psect	text32
  9873  1ECB                     __ptext32:	
  9874 ;; *************** function ___ftsub *****************
  9875 ;; Defined at:
  9876 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftsub.c"
  9877 ;; Parameters:    Size  Location     Type
  9878 ;;  f2              3   10[BANK0 ] float 
  9879 ;;  f1              3   13[BANK0 ] float 
  9880 ;; Auto vars:     Size  Location     Type
  9881 ;;		None
  9882 ;; Return value:  Size  Location     Type
  9883 ;;                  3   10[BANK0 ] float 
  9884 ;; Registers used:
  9885 ;;		wreg, status,2, status,0, pclath, cstack
  9886 ;; Tracked objects:
  9887 ;;		On entry : 0/0
  9888 ;;		On exit  : 0/0
  9889 ;;		Unchanged: 0/0
  9890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9891 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9892 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9894 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9895 ;;Total ram usage:        6 bytes
  9896 ;; Hardware stack levels used:    1
  9897 ;; Hardware stack levels required when called:    4
  9898 ;; This function calls:
  9899 ;;		___ftadd
  9900 ;; This function is called by:
  9901 ;;		_ftoa
  9902 ;; This function uses a non-reentrant model
  9903 ;;
  9904                           
  9905                           
  9906                           ;psect for function ___ftsub
  9907  1ECB                     ___ftsub:	
  9908                           
  9909                           ;incstack = 0
  9910                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  9911  1ECB  0020               	movlb	0	; select bank0
  9912  1ECC  082C               	movf	___ftsub@f2+2,w
  9913  1ECD  042B               	iorwf	___ftsub@f2+1,w
  9914  1ECE  042A               	iorwf	___ftsub@f2,w
  9915  1ECF  1903               	skipnz
  9916  1ED0  2ED3               	goto	l5484
  9917  1ED1  3080               	movlw	128
  9918  1ED2  06AC               	xorwf	___ftsub@f2+2,f
  9919  1ED3                     l5484:	
  9920  1ED3  082D               	movf	___ftsub@f1,w
  9921  1ED4  00A0               	movwf	___ftadd@f1
  9922  1ED5  082E               	movf	___ftsub@f1+1,w
  9923  1ED6  00A1               	movwf	___ftadd@f1+1
  9924  1ED7  082F               	movf	___ftsub@f1+2,w
  9925  1ED8  00A2               	movwf	___ftadd@f1+2
  9926  1ED9  082A               	movf	___ftsub@f2,w
  9927  1EDA  00A3               	movwf	___ftadd@f2
  9928  1EDB  082B               	movf	___ftsub@f2+1,w
  9929  1EDC  00A4               	movwf	___ftadd@f2+1
  9930  1EDD  082C               	movf	___ftsub@f2+2,w
  9931  1EDE  00A5               	movwf	___ftadd@f2+2
  9932  1EDF  3188  20FC         	fcall	___ftadd
  9933  1EE1  0020               	movlb	0	; select bank0
  9934  1EE2  0820               	movf	?___ftadd,w
  9935  1EE3  00AA               	movwf	?___ftsub
  9936  1EE4  0821               	movf	?___ftadd+1,w
  9937  1EE5  00AB               	movwf	?___ftsub+1
  9938  1EE6  0822               	movf	?___ftadd+2,w
  9939  1EE7  00AC               	movwf	?___ftsub+2
  9940  1EE8  0008               	return
  9941  1EE9                     __end_of___ftsub:	
  9942                           
  9943                           	psect	text33
  9944  08FC                     __ptext33:	
  9945 ;; *************** function ___ftadd *****************
  9946 ;; Defined at:
  9947 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftadd.c"
  9948 ;; Parameters:    Size  Location     Type
  9949 ;;  f1              3    0[BANK0 ] float 
  9950 ;;  f2              3    3[BANK0 ] float 
  9951 ;; Auto vars:     Size  Location     Type
  9952 ;;  exp1            1   11[COMMON] unsigned char 
  9953 ;;  exp2            1   10[COMMON] unsigned char 
  9954 ;;  sign            1    9[COMMON] unsigned char 
  9955 ;; Return value:  Size  Location     Type
  9956 ;;                  3    0[BANK0 ] float 
  9957 ;; Registers used:
  9958 ;;		wreg, status,2, status,0, pclath, cstack
  9959 ;; Tracked objects:
  9960 ;;		On entry : 0/0
  9961 ;;		On exit  : 0/0
  9962 ;;		Unchanged: 0/0
  9963 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9964 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9965 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9966 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9967 ;;      Totals:         3      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9968 ;;Total ram usage:       13 bytes
  9969 ;; Hardware stack levels used:    1
  9970 ;; Hardware stack levels required when called:    3
  9971 ;; This function calls:
  9972 ;;		___ftpack
  9973 ;; This function is called by:
  9974 ;;		_RTXUpdateDisplay
  9975 ;;		___ftsub
  9976 ;; This function uses a non-reentrant model
  9977 ;;
  9978                           
  9979                           
  9980                           ;psect for function ___ftadd
  9981  08FC                     ___ftadd:	
  9982                           
  9983                           ;incstack = 0
  9984                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  9985  08FC  0020               	movlb	0	; select bank0
  9986  08FD  0820               	movf	___ftadd@f1,w
  9987  08FE  00A6               	movwf	??___ftadd
  9988  08FF  0821               	movf	___ftadd@f1+1,w
  9989  0900  00A7               	movwf	??___ftadd+1
  9990  0901  0822               	movf	___ftadd@f1+2,w
  9991  0902  00A8               	movwf	??___ftadd+2
  9992  0903  1003               	clrc
  9993  0904  0D27               	rlf	??___ftadd+1,w
  9994  0905  0D28               	rlf	??___ftadd+2,w
  9995  0906  00A9               	movwf	??___ftadd+3
  9996  0907  0829               	movf	??___ftadd+3,w
  9997  0908  00FB               	movwf	___ftadd@exp1
  9998  0909  0823               	movf	___ftadd@f2,w
  9999  090A  00A6               	movwf	??___ftadd
 10000  090B  0824               	movf	___ftadd@f2+1,w
 10001  090C  00A7               	movwf	??___ftadd+1
 10002  090D  0825               	movf	___ftadd@f2+2,w
 10003  090E  00A8               	movwf	??___ftadd+2
 10004  090F  1003               	clrc
 10005  0910  0D27               	rlf	??___ftadd+1,w
 10006  0911  0D28               	rlf	??___ftadd+2,w
 10007  0912  00A9               	movwf	??___ftadd+3
 10008  0913  0829               	movf	??___ftadd+3,w
 10009  0914  00FA               	movwf	___ftadd@exp2
 10010  0915  087B               	movf	___ftadd@exp1,w
 10011  0916  1903               	btfsc	3,2
 10012  0917  2924               	goto	l5328
 10013  0918  087A               	movf	___ftadd@exp2,w
 10014  0919  027B               	subwf	___ftadd@exp1,w
 10015  091A  1803               	skipnc
 10016  091B  292B               	goto	l5332
 10017  091C  037B               	decf	___ftadd@exp1,w
 10018  091D  3AFF               	xorlw	255
 10019  091E  077A               	addwf	___ftadd@exp2,w
 10020  091F  00A6               	movwf	??___ftadd
 10021  0920  3019               	movlw	25
 10022  0921  0226               	subwf	??___ftadd,w
 10023  0922  1C03               	skipc
 10024  0923  292B               	goto	l5332
 10025  0924                     l5328:	
 10026  0924  0823               	movf	___ftadd@f2,w
 10027  0925  00A0               	movwf	?___ftadd
 10028  0926  0824               	movf	___ftadd@f2+1,w
 10029  0927  00A1               	movwf	?___ftadd+1
 10030  0928  0825               	movf	___ftadd@f2+2,w
 10031  0929  00A2               	movwf	?___ftadd+2
 10032  092A  0008               	return
 10033  092B                     l5332:	
 10034  092B  087A               	movf	___ftadd@exp2,w
 10035  092C  1903               	btfsc	3,2
 10036  092D  0008               	return
 10037  092E  087B               	movf	___ftadd@exp1,w
 10038  092F  027A               	subwf	___ftadd@exp2,w
 10039  0930  1803               	skipnc
 10040  0931  293A               	goto	l5338
 10041  0932  037A               	decf	___ftadd@exp2,w
 10042  0933  3AFF               	xorlw	255
 10043  0934  077B               	addwf	___ftadd@exp1,w
 10044  0935  00A6               	movwf	??___ftadd
 10045  0936  3019               	movlw	25
 10046  0937  0226               	subwf	??___ftadd,w
 10047  0938  1803               	btfsc	3,0
 10048  0939  0008               	return
 10049  093A                     l5338:	
 10050  093A  3006               	movlw	6
 10051  093B  00A6               	movwf	??___ftadd
 10052  093C  0826               	movf	??___ftadd,w
 10053  093D  00F9               	movwf	___ftadd@sign
 10054  093E  1BA2               	btfsc	___ftadd@f1+2,7
 10055  093F  17F9               	bsf	___ftadd@sign,7
 10056  0940  1BA5               	btfsc	___ftadd@f2+2,7
 10057  0941  1779               	bsf	___ftadd@sign,6
 10058  0942  17A1               	bsf	___ftadd@f1+1,7
 10059  0943  30FF               	movlw	255
 10060  0944  05A0               	andwf	___ftadd@f1,f
 10061  0945  30FF               	movlw	255
 10062  0946  05A1               	andwf	___ftadd@f1+1,f
 10063  0947  3000               	movlw	0
 10064  0948  05A2               	andwf	___ftadd@f1+2,f
 10065  0949  17A4               	bsf	___ftadd@f2+1,7
 10066  094A  30FF               	movlw	255
 10067  094B  05A3               	andwf	___ftadd@f2,f
 10068  094C  30FF               	movlw	255
 10069  094D  05A4               	andwf	___ftadd@f2+1,f
 10070  094E  3000               	movlw	0
 10071  094F  05A5               	andwf	___ftadd@f2+2,f
 10072  0950  087A               	movf	___ftadd@exp2,w
 10073  0951  027B               	subwf	___ftadd@exp1,w
 10074  0952  1803               	skipnc
 10075  0953  2976               	goto	l5360
 10076  0954                     l5350:	
 10077  0954  3001               	movlw	1
 10078  0955                     u5275:	
 10079  0955  35A3               	lslf	___ftadd@f2,f
 10080  0956  0DA4               	rlf	___ftadd@f2+1,f
 10081  0957  0DA5               	rlf	___ftadd@f2+2,f
 10082  0958  0B89               	decfsz	9,f
 10083  0959  2955               	goto	u5275
 10084  095A  3001               	movlw	1
 10085  095B  02FA               	subwf	___ftadd@exp2,f
 10086  095C  087A               	movf	___ftadd@exp2,w
 10087  095D  067B               	xorwf	___ftadd@exp1,w
 10088  095E  1903               	skipnz
 10089  095F  2971               	goto	l5358
 10090  0960  3001               	movlw	1
 10091  0961  02F9               	subwf	___ftadd@sign,f
 10092  0962  0879               	movf	___ftadd@sign,w
 10093  0963  3907               	andlw	7
 10094  0964  1903               	btfsc	3,2
 10095  0965  2971               	goto	l5358
 10096  0966  2954               	goto	l5350
 10097  0967                     l5356:	
 10098  0967  3001               	movlw	1
 10099  0968                     u5305:	
 10100  0968  36A2               	lsrf	___ftadd@f1+2,f
 10101  0969  0CA1               	rrf	___ftadd@f1+1,f
 10102  096A  0CA0               	rrf	___ftadd@f1,f
 10103  096B  0B89               	decfsz	9,f
 10104  096C  2968               	goto	u5305
 10105  096D  3001               	movlw	1
 10106  096E  00A6               	movwf	??___ftadd
 10107  096F  0826               	movf	??___ftadd,w
 10108  0970  07FB               	addwf	___ftadd@exp1,f
 10109  0971                     l5358:	
 10110  0971  087B               	movf	___ftadd@exp1,w
 10111  0972  067A               	xorwf	___ftadd@exp2,w
 10112  0973  1903               	btfsc	3,2
 10113  0974  299B               	goto	l971
 10114  0975  2967               	goto	l5356
 10115  0976                     l5360:	
 10116  0976  087B               	movf	___ftadd@exp1,w
 10117  0977  027A               	subwf	___ftadd@exp2,w
 10118  0978  1803               	skipnc
 10119  0979  299B               	goto	l971
 10120  097A                     l5362:	
 10121  097A  3001               	movlw	1
 10122  097B                     u5335:	
 10123  097B  35A0               	lslf	___ftadd@f1,f
 10124  097C  0DA1               	rlf	___ftadd@f1+1,f
 10125  097D  0DA2               	rlf	___ftadd@f1+2,f
 10126  097E  0B89               	decfsz	9,f
 10127  097F  297B               	goto	u5335
 10128  0980  3001               	movlw	1
 10129  0981  02FB               	subwf	___ftadd@exp1,f
 10130  0982  087A               	movf	___ftadd@exp2,w
 10131  0983  067B               	xorwf	___ftadd@exp1,w
 10132  0984  1903               	skipnz
 10133  0985  2997               	goto	l5370
 10134  0986  3001               	movlw	1
 10135  0987  02F9               	subwf	___ftadd@sign,f
 10136  0988  0879               	movf	___ftadd@sign,w
 10137  0989  3907               	andlw	7
 10138  098A  1903               	btfsc	3,2
 10139  098B  2997               	goto	l5370
 10140  098C  297A               	goto	l5362
 10141  098D                     l5368:	
 10142  098D  3001               	movlw	1
 10143  098E                     u5365:	
 10144  098E  36A5               	lsrf	___ftadd@f2+2,f
 10145  098F  0CA4               	rrf	___ftadd@f2+1,f
 10146  0990  0CA3               	rrf	___ftadd@f2,f
 10147  0991  0B89               	decfsz	9,f
 10148  0992  298E               	goto	u5365
 10149  0993  3001               	movlw	1
 10150  0994  00A6               	movwf	??___ftadd
 10151  0995  0826               	movf	??___ftadd,w
 10152  0996  07FA               	addwf	___ftadd@exp2,f
 10153  0997                     l5370:	
 10154  0997  087B               	movf	___ftadd@exp1,w
 10155  0998  067A               	xorwf	___ftadd@exp2,w
 10156  0999  1D03               	skipz
 10157  099A  298D               	goto	l5368
 10158  099B                     l971:	
 10159  099B  1FF9               	btfss	___ftadd@sign,7
 10160  099C  29AD               	goto	l5374
 10161  099D  30FF               	movlw	255
 10162  099E  06A0               	xorwf	___ftadd@f1,f
 10163  099F  30FF               	movlw	255
 10164  09A0  06A1               	xorwf	___ftadd@f1+1,f
 10165  09A1  30FF               	movlw	255
 10166  09A2  06A2               	xorwf	___ftadd@f1+2,f
 10167  09A3  3001               	movlw	1
 10168  09A4  07A0               	addwf	___ftadd@f1,f
 10169  09A5  3000               	movlw	0
 10170  09A6  1803               	skipnc
 10171  09A7  3001               	movlw	1
 10172  09A8  07A1               	addwf	___ftadd@f1+1,f
 10173  09A9  3000               	movlw	0
 10174  09AA  1803               	skipnc
 10175  09AB  3001               	movlw	1
 10176  09AC  07A2               	addwf	___ftadd@f1+2,f
 10177  09AD                     l5374:	
 10178  09AD  1F79               	btfss	___ftadd@sign,6
 10179  09AE  29BF               	goto	l5378
 10180  09AF  30FF               	movlw	255
 10181  09B0  06A3               	xorwf	___ftadd@f2,f
 10182  09B1  30FF               	movlw	255
 10183  09B2  06A4               	xorwf	___ftadd@f2+1,f
 10184  09B3  30FF               	movlw	255
 10185  09B4  06A5               	xorwf	___ftadd@f2+2,f
 10186  09B5  3001               	movlw	1
 10187  09B6  07A3               	addwf	___ftadd@f2,f
 10188  09B7  3000               	movlw	0
 10189  09B8  1803               	skipnc
 10190  09B9  3001               	movlw	1
 10191  09BA  07A4               	addwf	___ftadd@f2+1,f
 10192  09BB  3000               	movlw	0
 10193  09BC  1803               	skipnc
 10194  09BD  3001               	movlw	1
 10195  09BE  07A5               	addwf	___ftadd@f2+2,f
 10196  09BF                     l5378:	
 10197  09BF  01F9               	clrf	___ftadd@sign
 10198  09C0  0820               	movf	___ftadd@f1,w
 10199  09C1  07A3               	addwf	___ftadd@f2,f
 10200  09C2  0821               	movf	___ftadd@f1+1,w
 10201  09C3  3DA4               	addwfc	___ftadd@f2+1,f
 10202  09C4  0822               	movf	___ftadd@f1+2,w
 10203  09C5  3DA5               	addwfc	___ftadd@f2+2,f
 10204  09C6  1FA5               	btfss	___ftadd@f2+2,7
 10205  09C7  29DA               	goto	l5388
 10206  09C8  30FF               	movlw	255
 10207  09C9  06A3               	xorwf	___ftadd@f2,f
 10208  09CA  30FF               	movlw	255
 10209  09CB  06A4               	xorwf	___ftadd@f2+1,f
 10210  09CC  30FF               	movlw	255
 10211  09CD  06A5               	xorwf	___ftadd@f2+2,f
 10212  09CE  3001               	movlw	1
 10213  09CF  07A3               	addwf	___ftadd@f2,f
 10214  09D0  3000               	movlw	0
 10215  09D1  1803               	skipnc
 10216  09D2  3001               	movlw	1
 10217  09D3  07A4               	addwf	___ftadd@f2+1,f
 10218  09D4  3000               	movlw	0
 10219  09D5  1803               	skipnc
 10220  09D6  3001               	movlw	1
 10221  09D7  07A5               	addwf	___ftadd@f2+2,f
 10222  09D8  01F9               	clrf	___ftadd@sign
 10223  09D9  0AF9               	incf	___ftadd@sign,f
 10224  09DA                     l5388:	
 10225  09DA  0823               	movf	___ftadd@f2,w
 10226  09DB  00F1               	movwf	___ftpack@arg
 10227  09DC  0824               	movf	___ftadd@f2+1,w
 10228  09DD  00F2               	movwf	___ftpack@arg+1
 10229  09DE  0825               	movf	___ftadd@f2+2,w
 10230  09DF  00F3               	movwf	___ftpack@arg+2
 10231  09E0  087B               	movf	___ftadd@exp1,w
 10232  09E1  00A6               	movwf	??___ftadd
 10233  09E2  0826               	movf	??___ftadd,w
 10234  09E3  00F4               	movwf	___ftpack@exp
 10235  09E4  0879               	movf	___ftadd@sign,w
 10236  09E5  00A7               	movwf	??___ftadd+1
 10237  09E6  0827               	movf	??___ftadd+1,w
 10238  09E7  00F5               	movwf	___ftpack@sign
 10239  09E8  3195  2517         	fcall	___ftpack
 10240  09EA  0871               	movf	?___ftpack,w
 10241  09EB  0020               	movlb	0	; select bank0
 10242  09EC  00A0               	movwf	?___ftadd
 10243  09ED  0872               	movf	?___ftpack+1,w
 10244  09EE  00A1               	movwf	?___ftadd+1
 10245  09EF  0873               	movf	?___ftpack+2,w
 10246  09F0  00A2               	movwf	?___ftadd+2
 10247  09F1  0008               	return
 10248  09F2                     __end_of___ftadd:	
 10249                           
 10250                           	psect	text34
 10251  1CF1                     __ptext34:	
 10252 ;; *************** function ___ftneg *****************
 10253 ;; Defined at:
 10254 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftneg.c"
 10255 ;; Parameters:    Size  Location     Type
 10256 ;;  f1              3    1[COMMON] float 
 10257 ;; Auto vars:     Size  Location     Type
 10258 ;;		None
 10259 ;; Return value:  Size  Location     Type
 10260 ;;                  3    1[COMMON] float 
 10261 ;; Registers used:
 10262 ;;		wreg
 10263 ;; Tracked objects:
 10264 ;;		On entry : 0/0
 10265 ;;		On exit  : 0/0
 10266 ;;		Unchanged: 0/0
 10267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10268 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10269 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10271 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10272 ;;Total ram usage:        3 bytes
 10273 ;; Hardware stack levels used:    1
 10274 ;; Hardware stack levels required when called:    2
 10275 ;; This function calls:
 10276 ;;		Nothing
 10277 ;; This function is called by:
 10278 ;;		_RTXUpdateDisplay
 10279 ;;		_ftoa
 10280 ;; This function uses a non-reentrant model
 10281 ;;
 10282                           
 10283                           
 10284                           ;psect for function ___ftneg
 10285  1CF1                     ___ftneg:	
 10286                           
 10287                           ;incstack = 0
 10288                           ; Regs used in ___ftneg: [wreg]
 10289  1CF1  0873               	movf	___ftneg@f1+2,w
 10290  1CF2  0472               	iorwf	___ftneg@f1+1,w
 10291  1CF3  0471               	iorwf	___ftneg@f1,w
 10292  1CF4  1903               	skipnz
 10293  1CF5  0008               	return
 10294  1CF6  3080               	movlw	128
 10295  1CF7  06F3               	xorwf	___ftneg@f1+2,f
 10296  1CF8  0008               	return
 10297  1CF9                     __end_of___ftneg:	
 10298                           
 10299                           	psect	text35
 10300  174C                     __ptext35:	
 10301 ;; *************** function ___ftmul *****************
 10302 ;; Defined at:
 10303 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
 10304 ;; Parameters:    Size  Location     Type
 10305 ;;  f1              3    0[BANK0 ] float 
 10306 ;;  f2              3    3[BANK0 ] float 
 10307 ;; Auto vars:     Size  Location     Type
 10308 ;;  f3_as_produc    3   11[BANK0 ] unsigned um
 10309 ;;  sign            1   15[BANK0 ] unsigned char 
 10310 ;;  cntr            1   14[BANK0 ] unsigned char 
 10311 ;;  exp             1   10[BANK0 ] unsigned char 
 10312 ;; Return value:  Size  Location     Type
 10313 ;;                  3    0[BANK0 ] float 
 10314 ;; Registers used:
 10315 ;;		wreg, status,2, status,0, pclath, cstack
 10316 ;; Tracked objects:
 10317 ;;		On entry : 0/0
 10318 ;;		On exit  : 0/0
 10319 ;;		Unchanged: 0/0
 10320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10321 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10322 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10323 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10324 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10325 ;;Total ram usage:       16 bytes
 10326 ;; Hardware stack levels used:    1
 10327 ;; Hardware stack levels required when called:    3
 10328 ;; This function calls:
 10329 ;;		___ftpack
 10330 ;; This function is called by:
 10331 ;;		_RTXReadPkt
 10332 ;;		_ftoa
 10333 ;; This function uses a non-reentrant model
 10334 ;;
 10335                           
 10336                           
 10337                           ;psect for function ___ftmul
 10338  174C                     ___ftmul:	
 10339                           
 10340                           ;incstack = 0
 10341                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 10342  174C  0020               	movlb	0	; select bank0
 10343  174D  0820               	movf	___ftmul@f1,w
 10344  174E  00A6               	movwf	??___ftmul
 10345  174F  0821               	movf	___ftmul@f1+1,w
 10346  1750  00A7               	movwf	??___ftmul+1
 10347  1751  0822               	movf	___ftmul@f1+2,w
 10348  1752  00A8               	movwf	??___ftmul+2
 10349  1753  1003               	clrc
 10350  1754  0D27               	rlf	??___ftmul+1,w
 10351  1755  0D28               	rlf	??___ftmul+2,w
 10352  1756  00A9               	movwf	??___ftmul+3
 10353  1757  0829               	movf	??___ftmul+3,w
 10354  1758  00AA               	movwf	___ftmul@exp
 10355  1759  082A               	movf	___ftmul@exp,w
 10356  175A  1D03               	btfss	3,2
 10357  175B  2F63               	goto	l5436
 10358  175C  3000               	movlw	0
 10359  175D  00A0               	movwf	?___ftmul
 10360  175E  3000               	movlw	0
 10361  175F  00A1               	movwf	?___ftmul+1
 10362  1760  3000               	movlw	0
 10363  1761  00A2               	movwf	?___ftmul+2
 10364  1762  0008               	return
 10365  1763                     l5436:	
 10366  1763  0823               	movf	___ftmul@f2,w
 10367  1764  00A6               	movwf	??___ftmul
 10368  1765  0824               	movf	___ftmul@f2+1,w
 10369  1766  00A7               	movwf	??___ftmul+1
 10370  1767  0825               	movf	___ftmul@f2+2,w
 10371  1768  00A8               	movwf	??___ftmul+2
 10372  1769  1003               	clrc
 10373  176A  0D27               	rlf	??___ftmul+1,w
 10374  176B  0D28               	rlf	??___ftmul+2,w
 10375  176C  00A9               	movwf	??___ftmul+3
 10376  176D  0829               	movf	??___ftmul+3,w
 10377  176E  00AF               	movwf	___ftmul@sign
 10378  176F  082F               	movf	___ftmul@sign,w
 10379  1770  1D03               	btfss	3,2
 10380  1771  2F79               	goto	l5442
 10381  1772  3000               	movlw	0
 10382  1773  00A0               	movwf	?___ftmul
 10383  1774  3000               	movlw	0
 10384  1775  00A1               	movwf	?___ftmul+1
 10385  1776  3000               	movlw	0
 10386  1777  00A2               	movwf	?___ftmul+2
 10387  1778  0008               	return
 10388  1779                     l5442:	
 10389  1779  082F               	movf	___ftmul@sign,w
 10390  177A  3E7B               	addlw	123
 10391  177B  00A6               	movwf	??___ftmul
 10392  177C  0826               	movf	??___ftmul,w
 10393  177D  07AA               	addwf	___ftmul@exp,f
 10394  177E  0820               	movf	___ftmul@f1,w
 10395  177F  00A6               	movwf	??___ftmul
 10396  1780  0821               	movf	___ftmul@f1+1,w
 10397  1781  00A7               	movwf	??___ftmul+1
 10398  1782  0822               	movf	___ftmul@f1+2,w
 10399  1783  00A8               	movwf	??___ftmul+2
 10400  1784  3010               	movlw	16
 10401  1785                     u5505:	
 10402  1785  36A8               	lsrf	??___ftmul+2,f
 10403  1786  0CA7               	rrf	??___ftmul+1,f
 10404  1787  0CA6               	rrf	??___ftmul,f
 10405  1788  0B89               	decfsz	9,f
 10406  1789  2F85               	goto	u5505
 10407  178A  0826               	movf	??___ftmul,w
 10408  178B  00A9               	movwf	??___ftmul+3
 10409  178C  0829               	movf	??___ftmul+3,w
 10410  178D  00AF               	movwf	___ftmul@sign
 10411  178E  0823               	movf	___ftmul@f2,w
 10412  178F  00A6               	movwf	??___ftmul
 10413  1790  0824               	movf	___ftmul@f2+1,w
 10414  1791  00A7               	movwf	??___ftmul+1
 10415  1792  0825               	movf	___ftmul@f2+2,w
 10416  1793  00A8               	movwf	??___ftmul+2
 10417  1794  3010               	movlw	16
 10418  1795                     u5515:	
 10419  1795  36A8               	lsrf	??___ftmul+2,f
 10420  1796  0CA7               	rrf	??___ftmul+1,f
 10421  1797  0CA6               	rrf	??___ftmul,f
 10422  1798  0B89               	decfsz	9,f
 10423  1799  2F95               	goto	u5515
 10424  179A  0826               	movf	??___ftmul,w
 10425  179B  00A9               	movwf	??___ftmul+3
 10426  179C  0829               	movf	??___ftmul+3,w
 10427  179D  06AF               	xorwf	___ftmul@sign,f
 10428  179E  3080               	movlw	128
 10429  179F  00A6               	movwf	??___ftmul
 10430  17A0  0826               	movf	??___ftmul,w
 10431  17A1  05AF               	andwf	___ftmul@sign,f
 10432  17A2  17A1               	bsf	___ftmul@f1+1,7
 10433  17A3  17A4               	bsf	___ftmul@f2+1,7
 10434  17A4  30FF               	movlw	255
 10435  17A5  05A3               	andwf	___ftmul@f2,f
 10436  17A6  30FF               	movlw	255
 10437  17A7  05A4               	andwf	___ftmul@f2+1,f
 10438  17A8  3000               	movlw	0
 10439  17A9  05A5               	andwf	___ftmul@f2+2,f
 10440  17AA  3000               	movlw	0
 10441  17AB  00AB               	movwf	___ftmul@f3_as_product
 10442  17AC  3000               	movlw	0
 10443  17AD  00AC               	movwf	___ftmul@f3_as_product+1
 10444  17AE  3000               	movlw	0
 10445  17AF  00AD               	movwf	___ftmul@f3_as_product+2
 10446  17B0  3007               	movlw	7
 10447  17B1  00A6               	movwf	??___ftmul
 10448  17B2  0826               	movf	??___ftmul,w
 10449  17B3  00AE               	movwf	___ftmul@cntr
 10450  17B4                     l5454:	
 10451  17B4  1C20               	btfss	___ftmul@f1,0
 10452  17B5  2FBC               	goto	l5458
 10453  17B6  0823               	movf	___ftmul@f2,w
 10454  17B7  07AB               	addwf	___ftmul@f3_as_product,f
 10455  17B8  0824               	movf	___ftmul@f2+1,w
 10456  17B9  3DAC               	addwfc	___ftmul@f3_as_product+1,f
 10457  17BA  0825               	movf	___ftmul@f2+2,w
 10458  17BB  3DAD               	addwfc	___ftmul@f3_as_product+2,f
 10459  17BC                     l5458:	
 10460  17BC  3001               	movlw	1
 10461  17BD                     u5535:	
 10462  17BD  36A2               	lsrf	___ftmul@f1+2,f
 10463  17BE  0CA1               	rrf	___ftmul@f1+1,f
 10464  17BF  0CA0               	rrf	___ftmul@f1,f
 10465  17C0  0B89               	decfsz	9,f
 10466  17C1  2FBD               	goto	u5535
 10467  17C2  3001               	movlw	1
 10468  17C3                     u5545:	
 10469  17C3  35A3               	lslf	___ftmul@f2,f
 10470  17C4  0DA4               	rlf	___ftmul@f2+1,f
 10471  17C5  0DA5               	rlf	___ftmul@f2+2,f
 10472  17C6  0B89               	decfsz	9,f
 10473  17C7  2FC3               	goto	u5545
 10474  17C8  3001               	movlw	1
 10475  17C9  02AE               	subwf	___ftmul@cntr,f
 10476  17CA  1D03               	btfss	3,2
 10477  17CB  2FB4               	goto	l5454
 10478  17CC  3009               	movlw	9
 10479  17CD  00A6               	movwf	??___ftmul
 10480  17CE  0826               	movf	??___ftmul,w
 10481  17CF  00AE               	movwf	___ftmul@cntr
 10482  17D0                     l5466:	
 10483  17D0  1C20               	btfss	___ftmul@f1,0
 10484  17D1  2FD8               	goto	l5470
 10485  17D2  0823               	movf	___ftmul@f2,w
 10486  17D3  07AB               	addwf	___ftmul@f3_as_product,f
 10487  17D4  0824               	movf	___ftmul@f2+1,w
 10488  17D5  3DAC               	addwfc	___ftmul@f3_as_product+1,f
 10489  17D6  0825               	movf	___ftmul@f2+2,w
 10490  17D7  3DAD               	addwfc	___ftmul@f3_as_product+2,f
 10491  17D8                     l5470:	
 10492  17D8  3001               	movlw	1
 10493  17D9                     u5575:	
 10494  17D9  36A2               	lsrf	___ftmul@f1+2,f
 10495  17DA  0CA1               	rrf	___ftmul@f1+1,f
 10496  17DB  0CA0               	rrf	___ftmul@f1,f
 10497  17DC  0B89               	decfsz	9,f
 10498  17DD  2FD9               	goto	u5575
 10499  17DE  3001               	movlw	1
 10500  17DF                     u5585:	
 10501  17DF  36AD               	lsrf	___ftmul@f3_as_product+2,f
 10502  17E0  0CAC               	rrf	___ftmul@f3_as_product+1,f
 10503  17E1  0CAB               	rrf	___ftmul@f3_as_product,f
 10504  17E2  0B89               	decfsz	9,f
 10505  17E3  2FDF               	goto	u5585
 10506  17E4  3001               	movlw	1
 10507  17E5  02AE               	subwf	___ftmul@cntr,f
 10508  17E6  1D03               	btfss	3,2
 10509  17E7  2FD0               	goto	l5466
 10510  17E8  082B               	movf	___ftmul@f3_as_product,w
 10511  17E9  00F1               	movwf	___ftpack@arg
 10512  17EA  082C               	movf	___ftmul@f3_as_product+1,w
 10513  17EB  00F2               	movwf	___ftpack@arg+1
 10514  17EC  082D               	movf	___ftmul@f3_as_product+2,w
 10515  17ED  00F3               	movwf	___ftpack@arg+2
 10516  17EE  082A               	movf	___ftmul@exp,w
 10517  17EF  00A6               	movwf	??___ftmul
 10518  17F0  0826               	movf	??___ftmul,w
 10519  17F1  00F4               	movwf	___ftpack@exp
 10520  17F2  082F               	movf	___ftmul@sign,w
 10521  17F3  00A7               	movwf	??___ftmul+1
 10522  17F4  0827               	movf	??___ftmul+1,w
 10523  17F5  00F5               	movwf	___ftpack@sign
 10524  17F6  3195  2517         	fcall	___ftpack
 10525  17F8  0871               	movf	?___ftpack,w
 10526  17F9  0020               	movlb	0	; select bank0
 10527  17FA  00A0               	movwf	?___ftmul
 10528  17FB  0872               	movf	?___ftpack+1,w
 10529  17FC  00A1               	movwf	?___ftmul+1
 10530  17FD  0873               	movf	?___ftpack+2,w
 10531  17FE  00A2               	movwf	?___ftmul+2
 10532  17FF  0008               	return
 10533  1800                     __end_of___ftmul:	
 10534                           
 10535                           	psect	text36
 10536  1517                     __ptext36:	
 10537 ;; *************** function ___ftpack *****************
 10538 ;; Defined at:
 10539 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
 10540 ;; Parameters:    Size  Location     Type
 10541 ;;  arg             3    1[COMMON] unsigned um
 10542 ;;  exp             1    4[COMMON] unsigned char 
 10543 ;;  sign            1    5[COMMON] unsigned char 
 10544 ;; Auto vars:     Size  Location     Type
 10545 ;;		None
 10546 ;; Return value:  Size  Location     Type
 10547 ;;                  3    1[COMMON] float 
 10548 ;; Registers used:
 10549 ;;		wreg, status,2, status,0
 10550 ;; Tracked objects:
 10551 ;;		On entry : 0/0
 10552 ;;		On exit  : 0/0
 10553 ;;		Unchanged: 0/0
 10554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10555 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10556 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10557 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10558 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10559 ;;Total ram usage:        8 bytes
 10560 ;; Hardware stack levels used:    1
 10561 ;; Hardware stack levels required when called:    2
 10562 ;; This function calls:
 10563 ;;		Nothing
 10564 ;; This function is called by:
 10565 ;;		___ftadd
 10566 ;;		___ftmul
 10567 ;;		___lltoft
 10568 ;; This function uses a non-reentrant model
 10569 ;;
 10570                           
 10571                           
 10572                           ;psect for function ___ftpack
 10573  1517                     ___ftpack:	
 10574                           
 10575                           ;incstack = 0
 10576                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 10577  1517  0874               	movf	___ftpack@exp,w
 10578  1518  1903               	btfsc	3,2
 10579  1519  2D1F               	goto	l5270
 10580  151A  0873               	movf	___ftpack@arg+2,w
 10581  151B  0472               	iorwf	___ftpack@arg+1,w
 10582  151C  0471               	iorwf	___ftpack@arg,w
 10583  151D  1D03               	skipz
 10584  151E  2D30               	goto	l5276
 10585  151F                     l5270:	
 10586  151F  3000               	movlw	0
 10587  1520  00F1               	movwf	?___ftpack
 10588  1521  3000               	movlw	0
 10589  1522  00F2               	movwf	?___ftpack+1
 10590  1523  3000               	movlw	0
 10591  1524  00F3               	movwf	?___ftpack+2
 10592  1525  0008               	return
 10593  1526                     l5274:	
 10594  1526  3001               	movlw	1
 10595  1527  00F6               	movwf	??___ftpack
 10596  1528  0876               	movf	??___ftpack,w
 10597  1529  07F4               	addwf	___ftpack@exp,f
 10598  152A  3001               	movlw	1
 10599  152B                     u5035:	
 10600  152B  36F3               	lsrf	___ftpack@arg+2,f
 10601  152C  0CF2               	rrf	___ftpack@arg+1,f
 10602  152D  0CF1               	rrf	___ftpack@arg,f
 10603  152E  0B89               	decfsz	9,f
 10604  152F  2D2B               	goto	u5035
 10605  1530                     l5276:	
 10606  1530  30FE               	movlw	254
 10607  1531  0573               	andwf	___ftpack@arg+2,w
 10608  1532  1903               	btfsc	3,2
 10609  1533  2D49               	goto	l940
 10610  1534  2D26               	goto	l5274
 10611  1535                     l5278:	
 10612  1535  3001               	movlw	1
 10613  1536  00F6               	movwf	??___ftpack
 10614  1537  0876               	movf	??___ftpack,w
 10615  1538  07F4               	addwf	___ftpack@exp,f
 10616  1539  3001               	movlw	1
 10617  153A  07F1               	addwf	___ftpack@arg,f
 10618  153B  3000               	movlw	0
 10619  153C  1803               	skipnc
 10620  153D  3001               	movlw	1
 10621  153E  07F2               	addwf	___ftpack@arg+1,f
 10622  153F  3000               	movlw	0
 10623  1540  1803               	skipnc
 10624  1541  3001               	movlw	1
 10625  1542  07F3               	addwf	___ftpack@arg+2,f
 10626  1543  3001               	movlw	1
 10627  1544                     u5055:	
 10628  1544  36F3               	lsrf	___ftpack@arg+2,f
 10629  1545  0CF2               	rrf	___ftpack@arg+1,f
 10630  1546  0CF1               	rrf	___ftpack@arg,f
 10631  1547  0B89               	decfsz	9,f
 10632  1548  2D44               	goto	u5055
 10633  1549                     l940:	
 10634  1549  30FF               	movlw	255
 10635  154A  0573               	andwf	___ftpack@arg+2,w
 10636  154B  1903               	btfsc	3,2
 10637  154C  2D5A               	goto	l5286
 10638  154D  2D35               	goto	l5278
 10639  154E                     l5288:	
 10640  154E  3002               	movlw	2
 10641  154F  0274               	subwf	___ftpack@exp,w
 10642  1550  1C03               	btfss	3,0
 10643  1551  2D5C               	goto	l947
 10644  1552  3001               	movlw	1
 10645  1553  02F4               	subwf	___ftpack@exp,f
 10646  1554  3001               	movlw	1
 10647  1555                     u5075:	
 10648  1555  35F1               	lslf	___ftpack@arg,f
 10649  1556  0DF2               	rlf	___ftpack@arg+1,f
 10650  1557  0DF3               	rlf	___ftpack@arg+2,f
 10651  1558  0B89               	decfsz	9,f
 10652  1559  2D55               	goto	u5075
 10653  155A                     l5286:	
 10654  155A  1FF2               	btfss	___ftpack@arg+1,7
 10655  155B  2D4E               	goto	l5288
 10656  155C                     l947:	
 10657  155C  1874               	btfsc	___ftpack@exp,0
 10658  155D  2D64               	goto	l948
 10659  155E  30FF               	movlw	255
 10660  155F  05F1               	andwf	___ftpack@arg,f
 10661  1560  307F               	movlw	127
 10662  1561  05F2               	andwf	___ftpack@arg+1,f
 10663  1562  30FF               	movlw	255
 10664  1563  05F3               	andwf	___ftpack@arg+2,f
 10665  1564                     l948:	
 10666  1564  1003               	clrc
 10667  1565  0CF4               	rrf	___ftpack@exp,f
 10668  1566  0874               	movf	___ftpack@exp,w
 10669  1567  00F6               	movwf	??___ftpack
 10670  1568  01F7               	clrf	??___ftpack+1
 10671  1569  01F8               	clrf	??___ftpack+2
 10672  156A  3010               	movlw	16
 10673  156B                     u5115:	
 10674  156B  35F6               	lslf	??___ftpack,f
 10675  156C  0DF7               	rlf	??___ftpack+1,f
 10676  156D  0DF8               	rlf	??___ftpack+2,f
 10677  156E  0B89               	decfsz	9,f
 10678  156F  2D6B               	goto	u5115
 10679  1570  0876               	movf	??___ftpack,w
 10680  1571  04F1               	iorwf	___ftpack@arg,f
 10681  1572  0877               	movf	??___ftpack+1,w
 10682  1573  04F2               	iorwf	___ftpack@arg+1,f
 10683  1574  0878               	movf	??___ftpack+2,w
 10684  1575  04F3               	iorwf	___ftpack@arg+2,f
 10685  1576  0875               	movf	___ftpack@sign,w
 10686  1577  1903               	btfsc	3,2
 10687  1578  0008               	return
 10688  1579  17F3               	bsf	___ftpack@arg+2,7
 10689  157A  0008               	return
 10690  157B                     __end_of___ftpack:	
 10691                           
 10692                           	psect	text37
 10693  120E                     __ptext37:	
 10694 ;; *************** function ___ftge *****************
 10695 ;; Defined at:
 10696 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
 10697 ;; Parameters:    Size  Location     Type
 10698 ;;  ff1             3    1[COMMON] float 
 10699 ;;  ff2             3    4[COMMON] float 
 10700 ;; Auto vars:     Size  Location     Type
 10701 ;;		None
 10702 ;; Return value:  Size  Location     Type
 10703 ;;		None               void
 10704 ;; Registers used:
 10705 ;;		wreg, status,2, status,0
 10706 ;; Tracked objects:
 10707 ;;		On entry : 0/0
 10708 ;;		On exit  : 0/0
 10709 ;;		Unchanged: 0/0
 10710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10711 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10712 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10713 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10714 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10715 ;;Total ram usage:        9 bytes
 10716 ;; Hardware stack levels used:    1
 10717 ;; Hardware stack levels required when called:    2
 10718 ;; This function calls:
 10719 ;;		Nothing
 10720 ;; This function is called by:
 10721 ;;		_RTXUpdateDisplay
 10722 ;;		_ftoa
 10723 ;; This function uses a non-reentrant model
 10724 ;;
 10725                           
 10726                           
 10727                           ;psect for function ___ftge
 10728  120E                     ___ftge:	
 10729                           
 10730                           ;incstack = 0
 10731                           ; Regs used in ___ftge: [wreg+status,2+status,0]
 10732  120E  1FF3               	btfss	___ftge@ff1+2,7
 10733  120F  2A24               	goto	l3576
 10734  1210  0971               	comf	___ftge@ff1,w
 10735  1211  00F7               	movwf	??___ftge
 10736  1212  0972               	comf	___ftge@ff1+1,w
 10737  1213  00F8               	movwf	??___ftge+1
 10738  1214  0973               	comf	___ftge@ff1+2,w
 10739  1215  00F9               	movwf	??___ftge+2
 10740  1216  0AF7               	incf	??___ftge,f
 10741  1217  1903               	skipnz
 10742  1218  0AF8               	incf	??___ftge+1,f
 10743  1219  1903               	skipnz
 10744  121A  0AF9               	incf	??___ftge+2,f
 10745  121B  3000               	movlw	0
 10746  121C  0777               	addwf	??___ftge,w
 10747  121D  00F1               	movwf	___ftge@ff1
 10748  121E  3000               	movlw	0
 10749  121F  3D78               	addwfc	??___ftge+1,w
 10750  1220  00F2               	movwf	___ftge@ff1+1
 10751  1221  3080               	movlw	128
 10752  1222  3D79               	addwfc	??___ftge+2,w
 10753  1223  00F3               	movwf	___ftge@ff1+2
 10754  1224                     l3576:	
 10755  1224  1FF6               	btfss	___ftge@ff2+2,7
 10756  1225  2A3A               	goto	l3580
 10757  1226  0974               	comf	___ftge@ff2,w
 10758  1227  00F7               	movwf	??___ftge
 10759  1228  0975               	comf	___ftge@ff2+1,w
 10760  1229  00F8               	movwf	??___ftge+1
 10761  122A  0976               	comf	___ftge@ff2+2,w
 10762  122B  00F9               	movwf	??___ftge+2
 10763  122C  0AF7               	incf	??___ftge,f
 10764  122D  1903               	skipnz
 10765  122E  0AF8               	incf	??___ftge+1,f
 10766  122F  1903               	skipnz
 10767  1230  0AF9               	incf	??___ftge+2,f
 10768  1231  3000               	movlw	0
 10769  1232  0777               	addwf	??___ftge,w
 10770  1233  00F4               	movwf	___ftge@ff2
 10771  1234  3000               	movlw	0
 10772  1235  3D78               	addwfc	??___ftge+1,w
 10773  1236  00F5               	movwf	___ftge@ff2+1
 10774  1237  3080               	movlw	128
 10775  1238  3D79               	addwfc	??___ftge+2,w
 10776  1239  00F6               	movwf	___ftge@ff2+2
 10777  123A                     l3580:	
 10778  123A  3080               	movlw	128
 10779  123B  06F3               	xorwf	___ftge@ff1+2,f
 10780  123C  3080               	movlw	128
 10781  123D  06F6               	xorwf	___ftge@ff2+2,f
 10782  123E  0876               	movf	___ftge@ff2+2,w
 10783  123F  0273               	subwf	___ftge@ff1+2,w
 10784  1240  1D03               	skipz
 10785  1241  0008               	return
 10786  1242  0875               	movf	___ftge@ff2+1,w
 10787  1243  0272               	subwf	___ftge@ff1+1,w
 10788  1244  1D03               	skipz
 10789  1245  0008               	return
 10790  1246  0874               	movf	___ftge@ff2,w
 10791  1247  0271               	subwf	___ftge@ff1,w
 10792  1248  0008               	return
 10793  1249                     __end_of___ftge:	
 10794                           
 10795                           	psect	text38
 10796  12CC                     __ptext38:	
 10797 ;; *************** function _DPYSendStr *****************
 10798 ;; Defined at:
 10799 ;;		line 135 in file "DPY.c"
 10800 ;; Parameters:    Size  Location     Type
 10801 ;;  row             1    wreg     unsigned char 
 10802 ;;  col             1    0[BANK0 ] unsigned char 
 10803 ;;  data            1    1[BANK0 ] PTR unsigned char 
 10804 ;;		 -> RTXUpdateDisplay@strRow2(16), RTXUpdateDisplay@strRow1(16), 
 10805 ;;  len             1    2[BANK0 ] unsigned char 
 10806 ;; Auto vars:     Size  Location     Type
 10807 ;;  row             1    5[BANK0 ] unsigned char 
 10808 ;;  i               1    4[BANK0 ] unsigned char 
 10809 ;; Return value:  Size  Location     Type
 10810 ;;		None               void
 10811 ;; Registers used:
 10812 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10813 ;; Tracked objects:
 10814 ;;		On entry : 0/0
 10815 ;;		On exit  : 0/0
 10816 ;;		Unchanged: 0/0
 10817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10818 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10819 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10820 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10821 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10822 ;;Total ram usage:        6 bytes
 10823 ;; Hardware stack levels used:    1
 10824 ;; Hardware stack levels required when called:    5
 10825 ;; This function calls:
 10826 ;;		_DPYIsBusy
 10827 ;;		_DPYSendChar
 10828 ;;		_DPYSetCur
 10829 ;; This function is called by:
 10830 ;;		_RTXUpdateDisplay
 10831 ;; This function uses a non-reentrant model
 10832 ;;
 10833                           
 10834                           
 10835                           ;psect for function _DPYSendStr
 10836  12CC                     _DPYSendStr:	
 10837                           
 10838                           ;incstack = 0
 10839                           ; Regs used in _DPYSendStr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10840                           ;DPYSendStr@row stored from wreg
 10841  12CC  0020               	movlb	0	; select bank0
 10842  12CD  00A5               	movwf	DPYSendStr@row
 10843                           
 10844                           ;DPY.c: 137: unsigned char i;
 10845                           ;DPY.c: 140: DPYSetCur(row,col);
 10846  12CE  0820               	movf	DPYSendStr@col,w
 10847  12CF  00A3               	movwf	??_DPYSendStr
 10848  12D0  0823               	movf	??_DPYSendStr,w
 10849  12D1  00F8               	movwf	DPYSetCur@col
 10850  12D2  0825               	movf	DPYSendStr@row,w
 10851  12D3  319D  25C6  3192   	fcall	_DPYSetCur
 10852                           
 10853                           ;DPY.c: 142: for(i=0;i<len;i++)
 10854  12D6  0020               	movlb	0	; select bank0
 10855  12D7  01A4               	clrf	DPYSendStr@i
 10856  12D8                     l5644:	
 10857  12D8  0822               	movf	DPYSendStr@len,w
 10858  12D9  0224               	subwf	DPYSendStr@i,w
 10859  12DA  1803               	btfsc	3,0
 10860  12DB  0008               	return
 10861                           
 10862                           ;DPY.c: 143: {
 10863                           ;DPY.c: 145: DPYSendChar((*(data+i)));
 10864  12DC  0824               	movf	DPYSendStr@i,w
 10865  12DD  0721               	addwf	DPYSendStr@data,w
 10866  12DE  00A3               	movwf	??_DPYSendStr
 10867  12DF  0823               	movf	??_DPYSendStr,w
 10868  12E0  0086               	movwf	6
 10869  12E1  0187               	clrf	7
 10870  12E2  0801               	movf	1,w
 10871  12E3  319C  24F9  3192   	fcall	_DPYSendChar
 10872  12E6                     l5626:	
 10873                           ;DPY.c: 146: while(DPYIsBusy())
 10874                           
 10875  12E6  3192  2249  3192   	fcall	_DPYIsBusy
 10876  12E9  3A00               	xorlw	0
 10877  12EA  1903               	btfsc	3,2
 10878  12EB  2AEE               	goto	l5628
 10879                           
 10880                           ;DPY.c: 147: __nop();
 10881  12EC  0000               	nop
 10882  12ED  2AE6               	goto	l5626
 10883  12EE                     l5628:	
 10884                           
 10885                           ;DPY.c: 150: col++;
 10886  12EE  3001               	movlw	1
 10887  12EF  0020               	movlb	0	; select bank0
 10888  12F0  00A3               	movwf	??_DPYSendStr
 10889  12F1  0823               	movf	??_DPYSendStr,w
 10890  12F2  07A0               	addwf	DPYSendStr@col,f
 10891                           
 10892                           ;DPY.c: 151: if(col==16)
 10893  12F3  3010               	movlw	16
 10894  12F4  0620               	xorwf	DPYSendStr@col,w
 10895  12F5  1D03               	btfss	3,2
 10896  12F6  2AFD               	goto	l5636
 10897                           
 10898                           ;DPY.c: 152: {
 10899                           ;DPY.c: 153: col=0;
 10900  12F7  01A0               	clrf	DPYSendStr@col
 10901                           
 10902                           ;DPY.c: 154: row++;
 10903  12F8  3001               	movlw	1
 10904  12F9  00A3               	movwf	??_DPYSendStr
 10905  12FA  0823               	movf	??_DPYSendStr,w
 10906  12FB  07A5               	addwf	DPYSendStr@row,f
 10907  12FC  2B04               	goto	L17
 10908  12FD                     l5636:	
 10909                           ;DPY.c: 156: }
 10910                           
 10911                           ;DPY.c: 155: DPYSetCur(row,col);
 10912                           
 10913                           
 10914                           ;DPY.c: 157: else if(col==32)
 10915  12FD  3020               	movlw	32
 10916  12FE  0020               	movlb	0	; select bank0
 10917  12FF  0620               	xorwf	DPYSendStr@col,w
 10918  1300  1D03               	btfss	3,2
 10919  1301  2B0C               	goto	l5642
 10920                           
 10921                           ;DPY.c: 158: {
 10922                           ;DPY.c: 159: col=0;
 10923  1302  01A0               	clrf	DPYSendStr@col
 10924                           
 10925                           ;DPY.c: 160: row=0;
 10926  1303  01A5               	clrf	DPYSendStr@row
 10927  1304                     L17:	
 10928                           
 10929                           ;DPY.c: 161: DPYSetCur(row,col);
 10930  1304  0820               	movf	DPYSendStr@col,w
 10931  1305  00A3               	movwf	??_DPYSendStr
 10932  1306  0823               	movf	??_DPYSendStr,w
 10933  1307  00F8               	movwf	DPYSetCur@col
 10934  1308  0825               	movf	DPYSendStr@row,w
 10935  1309  319D  25C6  3192   	fcall	_DPYSetCur
 10936  130C                     l5642:	
 10937  130C  3001               	movlw	1
 10938  130D  0020               	movlb	0	; select bank0
 10939  130E  00A3               	movwf	??_DPYSendStr
 10940  130F  0823               	movf	??_DPYSendStr,w
 10941  1310  07A4               	addwf	DPYSendStr@i,f
 10942  1311  2AD8               	goto	l5644
 10943  1312                     __end_of_DPYSendStr:	
 10944                           
 10945                           	psect	text39
 10946  1DC6                     __ptext39:	
 10947 ;; *************** function _DPYSetCur *****************
 10948 ;; Defined at:
 10949 ;;		line 115 in file "DPY.c"
 10950 ;; Parameters:    Size  Location     Type
 10951 ;;  row             1    wreg     unsigned char 
 10952 ;;  col             1    8[COMMON] unsigned char 
 10953 ;; Auto vars:     Size  Location     Type
 10954 ;;  row             1   10[COMMON] unsigned char 
 10955 ;;  addr            1   11[COMMON] unsigned char 
 10956 ;; Return value:  Size  Location     Type
 10957 ;;		None               void
 10958 ;; Registers used:
 10959 ;;		wreg, status,2, status,0, pclath, cstack
 10960 ;; Tracked objects:
 10961 ;;		On entry : 0/0
 10962 ;;		On exit  : 0/0
 10963 ;;		Unchanged: 0/0
 10964 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10965 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10966 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10967 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10968 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10969 ;;Total ram usage:        4 bytes
 10970 ;; Hardware stack levels used:    1
 10971 ;; Hardware stack levels required when called:    4
 10972 ;; This function calls:
 10973 ;;		_DPYWriteByte
 10974 ;; This function is called by:
 10975 ;;		_DPYSendStr
 10976 ;; This function uses a non-reentrant model
 10977 ;;
 10978                           
 10979                           
 10980                           ;psect for function _DPYSetCur
 10981  1DC6                     _DPYSetCur:	
 10982                           
 10983                           ;incstack = 0
 10984                           ; Regs used in _DPYSetCur: [wreg+status,2+status,0+pclath+cstack]
 10985                           ;DPYSetCur@row stored from wreg
 10986  1DC6  00FA               	movwf	DPYSetCur@row
 10987                           
 10988                           ;DPY.c: 117: unsigned char addr;
 10989                           ;DPY.c: 120: addr=col;
 10990  1DC7  0878               	movf	DPYSetCur@col,w
 10991  1DC8  00F9               	movwf	??_DPYSetCur
 10992  1DC9  0879               	movf	??_DPYSetCur,w
 10993  1DCA  00FB               	movwf	DPYSetCur@addr
 10994                           
 10995                           ;DPY.c: 122: if(row==1)
 10996  1DCB  037A               	decf	DPYSetCur@row,w
 10997  1DCC  1D03               	btfss	3,2
 10998  1DCD  2DD2               	goto	l5532
 10999                           
 11000                           ;DPY.c: 123: addr+=0x40;
 11001  1DCE  3040               	movlw	64
 11002  1DCF  00F9               	movwf	??_DPYSetCur
 11003  1DD0  0879               	movf	??_DPYSetCur,w
 11004  1DD1  07FB               	addwf	DPYSetCur@addr,f
 11005  1DD2                     l5532:	
 11006                           
 11007                           ;DPY.c: 126: DPYWriteByte(RS_ISTRUCTION,(addr|0b10000000));
 11008  1DD2  087B               	movf	DPYSetCur@addr,w
 11009  1DD3  3880               	iorlw	128
 11010  1DD4  00F9               	movwf	??_DPYSetCur
 11011  1DD5  0879               	movf	??_DPYSetCur,w
 11012  1DD6  00F5               	movwf	DPYWriteByte@val
 11013  1DD7  3000               	movlw	0
 11014  1DD8  3194  2405         	fcall	_DPYWriteByte
 11015  1DDA  0008               	return
 11016  1DDB                     __end_of_DPYSetCur:	
 11017                           
 11018                           	psect	text40
 11019  1CF9                     __ptext40:	
 11020 ;; *************** function _DPYSendChar *****************
 11021 ;; Defined at:
 11022 ;;		line 129 in file "DPY.c"
 11023 ;; Parameters:    Size  Location     Type
 11024 ;;  c               1    wreg     unsigned char 
 11025 ;; Auto vars:     Size  Location     Type
 11026 ;;  c               1    9[COMMON] unsigned char 
 11027 ;; Return value:  Size  Location     Type
 11028 ;;		None               void
 11029 ;; Registers used:
 11030 ;;		wreg, status,2, status,0, pclath, cstack
 11031 ;; Tracked objects:
 11032 ;;		On entry : 0/0
 11033 ;;		On exit  : 0/0
 11034 ;;		Unchanged: 0/0
 11035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11037 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11038 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11039 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11040 ;;Total ram usage:        2 bytes
 11041 ;; Hardware stack levels used:    1
 11042 ;; Hardware stack levels required when called:    4
 11043 ;; This function calls:
 11044 ;;		_DPYWriteByte
 11045 ;; This function is called by:
 11046 ;;		_DPYSendStr
 11047 ;; This function uses a non-reentrant model
 11048 ;;
 11049                           
 11050                           
 11051                           ;psect for function _DPYSendChar
 11052  1CF9                     _DPYSendChar:	
 11053                           
 11054                           ;incstack = 0
 11055                           ; Regs used in _DPYSendChar: [wreg+status,2+status,0+pclath+cstack]
 11056                           ;DPYSendChar@c stored from wreg
 11057  1CF9  00F9               	movwf	DPYSendChar@c
 11058                           
 11059                           ;DPY.c: 132: DPYWriteByte(RS_DATA,c);
 11060  1CFA  0879               	movf	DPYSendChar@c,w
 11061  1CFB  00F8               	movwf	??_DPYSendChar
 11062  1CFC  0878               	movf	??_DPYSendChar,w
 11063  1CFD  00F5               	movwf	DPYWriteByte@val
 11064  1CFE  3001               	movlw	1
 11065  1CFF  3194  2405         	fcall	_DPYWriteByte
 11066  1D01  0008               	return
 11067  1D02                     __end_of_DPYSendChar:	
 11068                           
 11069                           	psect	text41
 11070  1249                     __ptext41:	
 11071 ;; *************** function _DPYIsBusy *****************
 11072 ;; Defined at:
 11073 ;;		line 311 in file "DPY.c"
 11074 ;; Parameters:    Size  Location     Type
 11075 ;;		None
 11076 ;; Auto vars:     Size  Location     Type
 11077 ;;  bf              1    6[COMMON] enum E1839
 11078 ;; Return value:  Size  Location     Type
 11079 ;;                  1    wreg      enum E1839
 11080 ;; Registers used:
 11081 ;;		wreg, status,2, status,0, pclath, cstack
 11082 ;; Tracked objects:
 11083 ;;		On entry : 0/0
 11084 ;;		On exit  : 0/0
 11085 ;;		Unchanged: 0/0
 11086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11088 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11089 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11090 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11091 ;;Total ram usage:        2 bytes
 11092 ;; Hardware stack levels used:    1
 11093 ;; Hardware stack levels required when called:    3
 11094 ;; This function calls:
 11095 ;;		_DLYDelay_us
 11096 ;; This function is called by:
 11097 ;;		_DPYSendStr
 11098 ;; This function uses a non-reentrant model
 11099 ;;
 11100                           
 11101                           
 11102                           ;psect for function _DPYIsBusy
 11103  1249                     _DPYIsBusy:	
 11104                           
 11105                           ;DPY.c: 313: te_DPY_BF bf;
 11106                           ;DPY.c: 316: TRISA|=0b00001111;
 11107                           
 11108                           ;incstack = 0
 11109                           ; Regs used in _DPYIsBusy: [wreg+status,2+status,0+pclath+cstack]
 11110  1249  300F               	movlw	15
 11111  124A  00F5               	movwf	??_DPYIsBusy
 11112  124B  0875               	movf	??_DPYIsBusy,w
 11113  124C  0021               	movlb	1	; select bank1
 11114  124D  048C               	iorwf	12,f	;volatile
 11115                           
 11116                           ;DPY.c: 319: LATAbits.LATA4=0;
 11117  124E  0022               	movlb	2	; select bank2
 11118  124F  120C               	bcf	12,4	;volatile
 11119                           
 11120                           ;DPY.c: 322: LATAbits.LATA6=0;
 11121  1250  130C               	bcf	12,6	;volatile
 11122                           
 11123                           ;DPY.c: 325: LATAbits.LATA7=1;
 11124  1251  178C               	bsf	12,7	;volatile
 11125                           
 11126                           ;DPY.c: 328: DLYDelay_us(100);
 11127  1252  3064               	movlw	100
 11128  1253  00F1               	movwf	DLYDelay_us@val
 11129  1254  3000               	movlw	0
 11130  1255  00F2               	movwf	DLYDelay_us@val+1
 11131  1256  319D  2544  3192   	fcall	_DLYDelay_us
 11132                           
 11133                           ;DPY.c: 331: LATAbits.LATA4=1;
 11134  1259  0022               	movlb	2	; select bank2
 11135  125A  160C               	bsf	12,4	;volatile
 11136                           
 11137                           ;DPY.c: 333: bf=BF_NOTBUSY;
 11138  125B  01F6               	clrf	DPYIsBusy@bf
 11139                           
 11140                           ;DPY.c: 334: if(PORTAbits.RA0)
 11141  125C  0020               	movlb	0	; select bank0
 11142  125D  1C0C               	btfss	12,0	;volatile
 11143  125E  2A61               	goto	l5554
 11144                           
 11145                           ;DPY.c: 335: bf=BF_BUSY;
 11146  125F  01F6               	clrf	DPYIsBusy@bf
 11147  1260  0AF6               	incf	DPYIsBusy@bf,f
 11148  1261                     l5554:	
 11149                           
 11150                           ;DPY.c: 337: DLYDelay_us(100);
 11151  1261  3064               	movlw	100
 11152  1262  00F1               	movwf	DLYDelay_us@val
 11153  1263  3000               	movlw	0
 11154  1264  00F2               	movwf	DLYDelay_us@val+1
 11155  1265  319D  2544  3192   	fcall	_DLYDelay_us
 11156                           
 11157                           ;DPY.c: 339: LATAbits.LATA4=0;
 11158  1268  0022               	movlb	2	; select bank2
 11159  1269  120C               	bcf	12,4	;volatile
 11160                           
 11161                           ;DPY.c: 341: DLYDelay_us(100);
 11162  126A  3064               	movlw	100
 11163  126B  00F1               	movwf	DLYDelay_us@val
 11164  126C  3000               	movlw	0
 11165  126D  00F2               	movwf	DLYDelay_us@val+1
 11166  126E  319D  2544  3192   	fcall	_DLYDelay_us
 11167                           
 11168                           ;DPY.c: 343: LATAbits.LATA4=1;
 11169  1271  0022               	movlb	2	; select bank2
 11170  1272  160C               	bsf	12,4	;volatile
 11171                           
 11172                           ;DPY.c: 345: DLYDelay_us(100);
 11173  1273  3064               	movlw	100
 11174  1274  00F1               	movwf	DLYDelay_us@val
 11175  1275  3000               	movlw	0
 11176  1276  00F2               	movwf	DLYDelay_us@val+1
 11177  1277  319D  2544  3192   	fcall	_DLYDelay_us
 11178                           
 11179                           ;DPY.c: 347: LATAbits.LATA4=0;
 11180  127A  0022               	movlb	2	; select bank2
 11181  127B  120C               	bcf	12,4	;volatile
 11182                           
 11183                           ;DPY.c: 349: DLYDelay_us(100);
 11184  127C  3064               	movlw	100
 11185  127D  00F1               	movwf	DLYDelay_us@val
 11186  127E  3000               	movlw	0
 11187  127F  00F2               	movwf	DLYDelay_us@val+1
 11188  1280  319D  2544         	fcall	_DLYDelay_us
 11189                           
 11190                           ;DPY.c: 352: TRISA&=0b11110000;
 11191  1282  30F0               	movlw	240
 11192  1283  00F5               	movwf	??_DPYIsBusy
 11193  1284  0875               	movf	??_DPYIsBusy,w
 11194  1285  0021               	movlb	1	; select bank1
 11195  1286  058C               	andwf	12,f	;volatile
 11196                           
 11197                           ;DPY.c: 354: return bf;
 11198  1287  0876               	movf	DPYIsBusy@bf,w
 11199  1288  0008               	return
 11200  1289                     __end_of_DPYIsBusy:	
 11201                           
 11202                           	psect	text42
 11203  1DB1                     __ptext42:	
 11204 ;; *************** function _PGMInit *****************
 11205 ;; Defined at:
 11206 ;;		line 17 in file "PGM.c"
 11207 ;; Parameters:    Size  Location     Type
 11208 ;;  state           1    wreg     unsigned char 
 11209 ;; Auto vars:     Size  Location     Type
 11210 ;;  state           1   11[COMMON] unsigned char 
 11211 ;; Return value:  Size  Location     Type
 11212 ;;		None               void
 11213 ;; Registers used:
 11214 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11215 ;; Tracked objects:
 11216 ;;		On entry : 0/0
 11217 ;;		On exit  : 0/0
 11218 ;;		Unchanged: 0/0
 11219 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11221 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11222 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11223 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11224 ;;Total ram usage:        1 bytes
 11225 ;; Hardware stack levels used:    1
 11226 ;; Hardware stack levels required when called:    6
 11227 ;; This function calls:
 11228 ;;		_PGMCheckNvm
 11229 ;;		_PGMReadNvm
 11230 ;; This function is called by:
 11231 ;;		_main
 11232 ;; This function uses a non-reentrant model
 11233 ;;
 11234                           
 11235                           
 11236                           ;psect for function _PGMInit
 11237  1DB1                     _PGMInit:	
 11238                           
 11239                           ;incstack = 0
 11240                           ; Regs used in _PGMInit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11241                           ;PGMInit@state stored from wreg
 11242  1DB1  00FB               	movwf	PGMInit@state
 11243                           
 11244                           ;PGM.c: 19: switch(state)
 11245  1DB2  2DBD               	goto	l5156
 11246  1DB3                     l5150:	
 11247                           ;PGM.c: 20: {
 11248                           ;PGM.c: 21: case 0:
 11249                           
 11250                           
 11251                           ;PGM.c: 23: T1CON=0b00000001;
 11252  1DB3  3001               	movlw	1
 11253  1DB4  0020               	movlb	0	; select bank0
 11254  1DB5  0098               	movwf	24	;volatile
 11255                           
 11256                           ;PGM.c: 24: break;
 11257  1DB6  0008               	return
 11258  1DB7                     l5152:	
 11259                           ;PGM.c: 25: case 1:
 11260                           
 11261                           
 11262                           ;PGM.c: 27: PGMReadNvm();
 11263  1DB7  3190  2001  319D   	fcall	_PGMReadNvm
 11264                           
 11265                           ;PGM.c: 28: PGMCheckNvm();
 11266  1DBA  319D  250D         	fcall	_PGMCheckNvm
 11267                           
 11268                           ;PGM.c: 33: }
 11269                           
 11270                           ;PGM.c: 29: break;
 11271  1DBC  0008               	return
 11272  1DBD                     l5156:	
 11273  1DBD  087B               	movf	PGMInit@state,w
 11274                           
 11275                           ; Switch size 1, requested type "space"
 11276                           ; Number of cases is 2, Range of values is 0 to 1
 11277                           ; switch strategies available:
 11278                           ; Name         Instructions Cycles
 11279                           ; simple_byte            7     4 (average)
 11280                           ; direct_byte           10     6 (fixed)
 11281                           ; jumptable            260     6 (fixed)
 11282                           ;	Chosen strategy is simple_byte
 11283  1DBE  3A00               	xorlw	0	; case 0
 11284  1DBF  1903               	skipnz
 11285  1DC0  2DB3               	goto	l5150
 11286  1DC1  3A01               	xorlw	1	; case 1
 11287  1DC2  1903               	skipnz
 11288  1DC3  2DB7               	goto	l5152
 11289  1DC4  2DC5               	goto	l359
 11290  1DC5                     l359:	
 11291  1DC5  0008               	return
 11292  1DC6                     __end_of_PGMInit:	
 11293                           
 11294                           	psect	text43
 11295  1001                     __ptext43:	
 11296 ;; *************** function _PGMReadNvm *****************
 11297 ;; Defined at:
 11298 ;;		line 36 in file "PGM.c"
 11299 ;; Parameters:    Size  Location     Type
 11300 ;;		None
 11301 ;; Auto vars:     Size  Location     Type
 11302 ;;		None
 11303 ;; Return value:  Size  Location     Type
 11304 ;;		None               void
 11305 ;; Registers used:
 11306 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11307 ;; Tracked objects:
 11308 ;;		On entry : 0/0
 11309 ;;		On exit  : 0/0
 11310 ;;		Unchanged: 0/0
 11311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11313 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11314 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11315 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11316 ;;Total ram usage:        2 bytes
 11317 ;; Hardware stack levels used:    1
 11318 ;; Hardware stack levels required when called:    3
 11319 ;; This function calls:
 11320 ;;		_NVMRead
 11321 ;; This function is called by:
 11322 ;;		_PGMInit
 11323 ;; This function uses a non-reentrant model
 11324 ;;
 11325                           
 11326                           
 11327                           ;psect for function _PGMReadNvm
 11328  1001                     _PGMReadNvm:	
 11329                           
 11330                           ;PGM.c: 38: NVMRead((unsigned short)(&(nvm_pgm_cfg)),(char *)(&(pgm_cfg)),sizeof(ts_PGM_
      +                          CFG));
 11331                           
 11332                           ;incstack = 0
 11333                           ; Regs used in _PGMReadNvm: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11334  1001  3020               	movlw	32
 11335  1002  00F1               	movwf	NVMRead@addr
 11336  1003  3038               	movlw	56
 11337  1004  00F2               	movwf	NVMRead@addr+1
 11338  1005  3055               	movlw	(low (_pgm_cfg| (0+256)))& (0+255)
 11339  1006  00F8               	movwf	??_PGMReadNvm
 11340  1007  0878               	movf	??_PGMReadNvm,w
 11341  1008  00F3               	movwf	NVMRead@dest
 11342  1009  3007               	movlw	7
 11343  100A  00F9               	movwf	??_PGMReadNvm+1
 11344  100B  0879               	movf	??_PGMReadNvm+1,w
 11345  100C  00F4               	movwf	NVMRead@len
 11346  100D  319F  27B2         	fcall	_NVMRead
 11347  100F  0008               	return
 11348  1010                     __end_of_PGMReadNvm:	
 11349                           
 11350                           	psect	text44
 11351  1FB2                     __ptext44:	
 11352 ;; *************** function _NVMRead *****************
 11353 ;; Defined at:
 11354 ;;		line 23 in file "NVM.c"
 11355 ;; Parameters:    Size  Location     Type
 11356 ;;  addr            2    1[COMMON] unsigned short 
 11357 ;;  dest            1    3[COMMON] PTR unsigned char 
 11358 ;;		 -> pgm_cfg(7), 
 11359 ;;  len             1    4[COMMON] unsigned char 
 11360 ;; Auto vars:     Size  Location     Type
 11361 ;;  i               1    7[COMMON] unsigned char 
 11362 ;; Return value:  Size  Location     Type
 11363 ;;		None               void
 11364 ;; Registers used:
 11365 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11366 ;; Tracked objects:
 11367 ;;		On entry : 0/0
 11368 ;;		On exit  : 0/0
 11369 ;;		Unchanged: 0/0
 11370 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11371 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11372 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11373 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11374 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11375 ;;Total ram usage:        7 bytes
 11376 ;; Hardware stack levels used:    1
 11377 ;; Hardware stack levels required when called:    2
 11378 ;; This function calls:
 11379 ;;		Nothing
 11380 ;; This function is called by:
 11381 ;;		_PGMReadNvm
 11382 ;; This function uses a non-reentrant model
 11383 ;;
 11384                           
 11385                           
 11386                           ;psect for function _NVMRead
 11387  1FB2                     _NVMRead:	
 11388                           
 11389                           ;NVM.c: 25: unsigned char i;
 11390                           ;NVM.c: 27: PMCON1bits.CFGS=0;
 11391                           
 11392                           ;incstack = 0
 11393                           ; Regs used in _NVMRead: [wreg+fsr1l+fsr1h+status,2+status,0]
 11394  1FB2  0023               	movlb	3	; select bank3
 11395  1FB3  1315               	bcf	21,6	;volatile
 11396                           
 11397                           ;NVM.c: 28: for(i=0;i<len;i++)
 11398  1FB4  01F7               	clrf	NVMRead@i
 11399  1FB5                     l4060:	
 11400  1FB5  0874               	movf	NVMRead@len,w
 11401  1FB6  0277               	subwf	NVMRead@i,w
 11402  1FB7  1803               	btfsc	3,0
 11403  1FB8  0008               	return
 11404  1FB9  0064               	clrwdt	;# 
 11405                           
 11406                           ;NVM.c: 31: PMADR=(addr+i);
 11407  1FBA  0877               	movf	NVMRead@i,w
 11408  1FBB  0771               	addwf	NVMRead@addr,w
 11409  1FBC  00F5               	movwf	??_NVMRead
 11410  1FBD  0872               	movf	NVMRead@addr+1,w
 11411  1FBE  1803               	skipnc
 11412  1FBF  0A72               	incf	NVMRead@addr+1,w
 11413  1FC0  00F6               	movwf	??_NVMRead+1
 11414  1FC1  0875               	movf	??_NVMRead,w
 11415  1FC2  0023               	movlb	3	; select bank3
 11416  1FC3  0091               	movwf	17	;volatile
 11417  1FC4  0876               	movf	??_NVMRead+1,w
 11418  1FC5  0092               	movwf	18	;volatile
 11419                           
 11420                           ;NVM.c: 32: PMCON1bits.RD=1;
 11421  1FC6  1415               	bsf	21,0	;volatile
 11422  1FC7                     l159:	
 11423                           ;NVM.c: 33: while(PMCON1bits.RD);
 11424                           
 11425  1FC7  1815               	btfsc	21,0	;volatile
 11426  1FC8  2FC7               	goto	l159
 11427                           
 11428                           ;NVM.c: 34: (*(dest+i))=PMDAT;
 11429  1FC9  0813               	movf	19,w	;volatile
 11430  1FCA  00F5               	movwf	??_NVMRead
 11431  1FCB  0877               	movf	NVMRead@i,w
 11432  1FCC  0773               	addwf	NVMRead@dest,w
 11433  1FCD  00F6               	movwf	??_NVMRead+1
 11434  1FCE  0876               	movf	??_NVMRead+1,w
 11435  1FCF  0086               	movwf	6
 11436  1FD0  3001               	movlw	1	; select bank2/3
 11437  1FD1  0087               	movwf	7
 11438  1FD2  0875               	movf	??_NVMRead,w
 11439  1FD3  0081               	movwf	1
 11440  1FD4  3001               	movlw	1
 11441  1FD5  00F5               	movwf	??_NVMRead
 11442  1FD6  0875               	movf	??_NVMRead,w
 11443  1FD7  07F7               	addwf	NVMRead@i,f
 11444  1FD8  2FB5               	goto	l4060
 11445  1FD9                     __end_of_NVMRead:	
 11446                           
 11447                           	psect	text45
 11448  1D0D                     __ptext45:	
 11449 ;; *************** function _PGMCheckNvm *****************
 11450 ;; Defined at:
 11451 ;;		line 46 in file "PGM.c"
 11452 ;; Parameters:    Size  Location     Type
 11453 ;;		None
 11454 ;; Auto vars:     Size  Location     Type
 11455 ;;		None
 11456 ;; Return value:  Size  Location     Type
 11457 ;;		None               void
 11458 ;; Registers used:
 11459 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11460 ;; Tracked objects:
 11461 ;;		On entry : 0/0
 11462 ;;		On exit  : 0/0
 11463 ;;		Unchanged: 0/0
 11464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11468 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11469 ;;Total ram usage:        0 bytes
 11470 ;; Hardware stack levels used:    1
 11471 ;; Hardware stack levels required when called:    5
 11472 ;; This function calls:
 11473 ;;		_PGMNvmReset
 11474 ;; This function is called by:
 11475 ;;		_PGMInit
 11476 ;; This function uses a non-reentrant model
 11477 ;;
 11478                           
 11479                           
 11480                           ;psect for function _PGMCheckNvm
 11481  1D0D                     _PGMCheckNvm:	
 11482                           
 11483                           ;PGM.c: 48: if(pgm_cfg.valChk1!=0x5C || pgm_cfg.valChk2!=0xC5)
 11484                           
 11485                           ;incstack = 0
 11486                           ; Regs used in _PGMCheckNvm: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11487  1D0D  305C               	movlw	92
 11488  1D0E  0022               	movlb	2	; select bank2
 11489  1D0F  0655               	xorwf	_pgm_cfg^(0+256),w
 11490  1D10  1D03               	btfss	3,2
 11491  1D11  2D16               	goto	l4856
 11492  1D12  30C5               	movlw	197
 11493  1D13  0656               	xorwf	(_pgm_cfg^(0+256)+1),w
 11494  1D14  1903               	btfsc	3,2
 11495  1D15  0008               	return
 11496  1D16                     l4856:	
 11497                           
 11498                           ;PGM.c: 49: PGMNvmReset();
 11499  1D16  319D  2578         	fcall	_PGMNvmReset
 11500  1D18  0008               	return
 11501  1D19                     __end_of_PGMCheckNvm:	
 11502                           
 11503                           	psect	text46
 11504  1D78                     __ptext46:	
 11505 ;; *************** function _PGMNvmReset *****************
 11506 ;; Defined at:
 11507 ;;		line 52 in file "PGM.c"
 11508 ;; Parameters:    Size  Location     Type
 11509 ;;		None
 11510 ;; Auto vars:     Size  Location     Type
 11511 ;;		None
 11512 ;; Return value:  Size  Location     Type
 11513 ;;		None               void
 11514 ;; Registers used:
 11515 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11516 ;; Tracked objects:
 11517 ;;		On entry : 0/0
 11518 ;;		On exit  : 0/0
 11519 ;;		Unchanged: 0/0
 11520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11522 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11523 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11524 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11525 ;;Total ram usage:        1 bytes
 11526 ;; Hardware stack levels used:    1
 11527 ;; Hardware stack levels required when called:    4
 11528 ;; This function calls:
 11529 ;;		_PGMWriteNvm
 11530 ;; This function is called by:
 11531 ;;		_PGMCheckNvm
 11532 ;; This function uses a non-reentrant model
 11533 ;;
 11534                           
 11535                           
 11536                           ;psect for function _PGMNvmReset
 11537  1D78                     _PGMNvmReset:	
 11538                           
 11539                           ;PGM.c: 55: pgm_cfg.valChk1=0x5C;
 11540                           
 11541                           ;incstack = 0
 11542                           ; Regs used in _PGMNvmReset: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11543  1D78  305C               	movlw	92
 11544  1D79  00FA               	movwf	??_PGMNvmReset
 11545  1D7A  087A               	movf	??_PGMNvmReset,w
 11546  1D7B  0022               	movlb	2	; select bank2
 11547  1D7C  00D5               	movwf	_pgm_cfg^(0+256)
 11548                           
 11549                           ;PGM.c: 56: pgm_cfg.valChk2=0xC5;
 11550  1D7D  30C5               	movlw	197
 11551  1D7E  00FA               	movwf	??_PGMNvmReset
 11552  1D7F  087A               	movf	??_PGMNvmReset,w
 11553  1D80  00D6               	movwf	(_pgm_cfg^(0+256)+1)
 11554                           
 11555                           ;PGM.c: 57: pgm_cfg.menu.val=0x00;
 11556  1D81  01D7               	clrf	(_pgm_cfg^(0+256)+2)
 11557                           
 11558                           ;PGM.c: 58: pgm_cfg.base_id=0x00;
 11559  1D82  01D8               	clrf	(_pgm_cfg^(0+256)+3)
 11560                           
 11561                           ;PGM.c: 59: pgm_cfg.gen_curr_sens_id=0x00;
 11562  1D83  01D9               	clrf	(_pgm_cfg^(0+256)+4)
 11563                           
 11564                           ;PGM.c: 60: pgm_cfg.con_curr_sens_id=0x00;
 11565  1D84  01DA               	clrf	(_pgm_cfg^(0+256)+5)
 11566                           
 11567                           ;PGM.c: 61: pgm_cfg.volt_sens_id=0x00;
 11568  1D85  01DB               	clrf	(_pgm_cfg^(0+256)+6)
 11569                           
 11570                           ;PGM.c: 63: PGMWriteNvm();
 11571  1D86  319D  2535         	fcall	_PGMWriteNvm
 11572  1D88  0001               	reset	;# 
 11573  1D89  0008               	return
 11574  1D8A                     __end_of_PGMNvmReset:	
 11575                           
 11576                           	psect	text47
 11577  1D35                     __ptext47:	
 11578 ;; *************** function _PGMWriteNvm *****************
 11579 ;; Defined at:
 11580 ;;		line 41 in file "PGM.c"
 11581 ;; Parameters:    Size  Location     Type
 11582 ;;		None
 11583 ;; Auto vars:     Size  Location     Type
 11584 ;;		None
 11585 ;; Return value:  Size  Location     Type
 11586 ;;		None               void
 11587 ;; Registers used:
 11588 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11589 ;; Tracked objects:
 11590 ;;		On entry : 0/0
 11591 ;;		On exit  : 0/0
 11592 ;;		Unchanged: 0/0
 11593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11595 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11596 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11597 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11598 ;;Total ram usage:        2 bytes
 11599 ;; Hardware stack levels used:    1
 11600 ;; Hardware stack levels required when called:    3
 11601 ;; This function calls:
 11602 ;;		_NVMWrite
 11603 ;; This function is called by:
 11604 ;;		_PGMNvmReset
 11605 ;;		_PGMSelLong
 11606 ;;		_RTXReadPkt
 11607 ;; This function uses a non-reentrant model
 11608 ;;
 11609                           
 11610                           
 11611                           ;psect for function _PGMWriteNvm
 11612  1D35                     _PGMWriteNvm:	
 11613                           
 11614                           ;PGM.c: 43: NVMWrite((unsigned short)(&(nvm_pgm_cfg)),(char *)(&(pgm_cfg)),sizeof(ts_PGM
      +                          _CFG));
 11615                           
 11616                           ;incstack = 0
 11617                           ; Regs used in _PGMWriteNvm: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11618  1D35  3020               	movlw	32
 11619  1D36  00F1               	movwf	NVMWrite@addr
 11620  1D37  3038               	movlw	56
 11621  1D38  00F2               	movwf	NVMWrite@addr+1
 11622  1D39  3055               	movlw	(low (_pgm_cfg| (0+256)))& (0+255)
 11623  1D3A  00F8               	movwf	??_PGMWriteNvm
 11624  1D3B  0878               	movf	??_PGMWriteNvm,w
 11625  1D3C  00F3               	movwf	NVMWrite@source
 11626  1D3D  3007               	movlw	7
 11627  1D3E  00F9               	movwf	??_PGMWriteNvm+1
 11628  1D3F  0879               	movf	??_PGMWriteNvm+1,w
 11629  1D40  00F4               	movwf	NVMWrite@len
 11630  1D41  3188  203F         	fcall	_NVMWrite
 11631  1D43  0008               	return
 11632  1D44                     __end_of_PGMWriteNvm:	
 11633                           
 11634                           	psect	text48
 11635  083F                     __ptext48:	
 11636 ;; *************** function _NVMWrite *****************
 11637 ;; Defined at:
 11638 ;;		line 38 in file "NVM.c"
 11639 ;; Parameters:    Size  Location     Type
 11640 ;;  addr            2    1[COMMON] unsigned short 
 11641 ;;  source          1    3[COMMON] PTR unsigned char 
 11642 ;;		 -> pgm_cfg(7), 
 11643 ;;  len             1    4[COMMON] unsigned char 
 11644 ;; Auto vars:     Size  Location     Type
 11645 ;;  bufTmpRow      64    0[BANK0 ] unsigned short [32]
 11646 ;;  rowAddr         2   64[BANK0 ] unsigned short 
 11647 ;;  j               1   68[BANK0 ] unsigned char 
 11648 ;;  latchAddr       1   67[BANK0 ] unsigned char 
 11649 ;;  i               1   66[BANK0 ] unsigned char 
 11650 ;; Return value:  Size  Location     Type
 11651 ;;		None               void
 11652 ;; Registers used:
 11653 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11654 ;; Tracked objects:
 11655 ;;		On entry : 0/0
 11656 ;;		On exit  : 0/0
 11657 ;;		Unchanged: 0/0
 11658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11659 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11660 ;;      Locals:         0      69       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11661 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11662 ;;      Totals:         7      69       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11663 ;;Total ram usage:       76 bytes
 11664 ;; Hardware stack levels used:    1
 11665 ;; Hardware stack levels required when called:    2
 11666 ;; This function calls:
 11667 ;;		Nothing
 11668 ;; This function is called by:
 11669 ;;		_PGMWriteNvm
 11670 ;; This function uses a non-reentrant model
 11671 ;;
 11672                           
 11673                           
 11674                           ;psect for function _NVMWrite
 11675  083F                     _NVMWrite:	
 11676                           
 11677                           ;NVM.c: 40: unsigned char i,j,latchAddr;
 11678                           ;NVM.c: 41: unsigned short rowAddr,bufTmpRow[0x20];
 11679                           ;NVM.c: 43: INTCONbits.GIE=0;
 11680                           
 11681                           ;incstack = 0
 11682                           ; Regs used in _NVMWrite: [wreg+fsr1l+fsr1h+status,2+status,0]
 11683  083F  138B               	bcf	11,7	;volatile
 11684                           
 11685                           ;NVM.c: 44: PMCON1bits.WREN=1;
 11686  0840  0023               	movlb	3	; select bank3
 11687  0841  1515               	bsf	21,2	;volatile
 11688                           
 11689                           ;NVM.c: 45: PMCON1bits.CFGS=0;
 11690  0842  1315               	bcf	21,6	;volatile
 11691                           
 11692                           ;NVM.c: 48: i=0;
 11693  0843  0020               	movlb	0	; select bank0
 11694  0844  01E2               	clrf	NVMWrite@i
 11695                           
 11696                           ;NVM.c: 50: rowAddr=(addr&(~(0x001F)));
 11697  0845  30E0               	movlw	224
 11698  0846  0571               	andwf	NVMWrite@addr,w
 11699  0847  00E0               	movwf	NVMWrite@rowAddr
 11700  0848  30FF               	movlw	255
 11701  0849  0572               	andwf	NVMWrite@addr+1,w
 11702  084A  00E1               	movwf	NVMWrite@rowAddr+1
 11703                           
 11704                           ;NVM.c: 51: latchAddr=(addr&0x001F);
 11705  084B  0871               	movf	NVMWrite@addr,w
 11706  084C  391F               	andlw	31
 11707  084D  00F5               	movwf	??_NVMWrite
 11708  084E  0875               	movf	??_NVMWrite,w
 11709  084F  00E3               	movwf	NVMWrite@latchAddr
 11710  0850                     l166:	
 11711                           ;NVM.c: 52: while(i<len)
 11712                           
 11713  0850  0874               	movf	NVMWrite@len,w
 11714  0851  0262               	subwf	NVMWrite@i,w
 11715  0852  1803               	btfsc	3,0
 11716  0853  28F8               	goto	l186
 11717  0854  0064               	clrwdt	;# 
 11718                           
 11719                           ;NVM.c: 57: for(j=0;j<sizeof(bufTmpRow)/sizeof(unsigned short);j++)
 11720  0855  0020               	movlb	0	; select bank0
 11721  0856  01E4               	clrf	NVMWrite@j
 11722  0857  3020               	movlw	32
 11723  0858  0264               	subwf	NVMWrite@j,w
 11724  0859  1803               	btfsc	3,0
 11725  085A  287F               	goto	l169
 11726  085B                     l168:	
 11727  085B  0064               	clrwdt	;# 
 11728                           
 11729                           ;NVM.c: 60: PMADR=(rowAddr+j);
 11730  085C  0020               	movlb	0	; select bank0
 11731  085D  0864               	movf	NVMWrite@j,w
 11732  085E  0760               	addwf	NVMWrite@rowAddr,w
 11733  085F  00F5               	movwf	??_NVMWrite
 11734  0860  0861               	movf	NVMWrite@rowAddr+1,w
 11735  0861  1803               	skipnc
 11736  0862  0A61               	incf	NVMWrite@rowAddr+1,w
 11737  0863  00F6               	movwf	??_NVMWrite+1
 11738  0864  0875               	movf	??_NVMWrite,w
 11739  0865  0023               	movlb	3	; select bank3
 11740  0866  0091               	movwf	17	;volatile
 11741  0867  0876               	movf	??_NVMWrite+1,w
 11742  0868  0092               	movwf	18	;volatile
 11743                           
 11744                           ;NVM.c: 61: PMCON1bits.RD=1;
 11745  0869  1415               	bsf	21,0	;volatile
 11746  086A                     l170:	
 11747                           ;NVM.c: 62: while(PMCON1bits.RD);
 11748                           
 11749  086A  1815               	btfsc	21,0	;volatile
 11750  086B  286A               	goto	l170
 11751                           
 11752                           ;NVM.c: 63: bufTmpRow[j]=PMDAT;
 11753  086C  0020               	movlb	0	; select bank0
 11754  086D  3564               	lslf	NVMWrite@j,w
 11755  086E  3E20               	addlw	(low (NVMWrite@bufTmpRow| 0))& (0+255)
 11756  086F  0086               	movwf	6
 11757  0870  0187               	clrf	7
 11758  0871  0023               	movlb	3	; select bank3
 11759  0872  0813               	movf	19,w	;volatile
 11760  0873  3FC0               	movwi [0]fsr1
 11761  0874  0814               	movf	20,w	;volatile
 11762  0875  3FC1               	movwi [1]fsr1
 11763  0876  3001               	movlw	1
 11764  0877  00F5               	movwf	??_NVMWrite
 11765  0878  0875               	movf	??_NVMWrite,w
 11766  0879  0020               	movlb	0	; select bank0
 11767  087A  07E4               	addwf	NVMWrite@j,f
 11768  087B  3020               	movlw	32
 11769  087C  0264               	subwf	NVMWrite@j,w
 11770  087D  1C03               	skipc
 11771  087E  285B               	goto	l168
 11772  087F                     l169:	
 11773                           
 11774                           ;NVM.c: 64: }
 11775                           ;NVM.c: 67: PMCON1bits.FREE=1;
 11776  087F  0023               	movlb	3	; select bank3
 11777  0880  1615               	bsf	21,4	;volatile
 11778                           
 11779                           ;NVM.c: 68: PMADR=rowAddr;
 11780  0881  0020               	movlb	0	; select bank0
 11781  0882  0861               	movf	NVMWrite@rowAddr+1,w
 11782  0883  0023               	movlb	3	; select bank3
 11783  0884  0092               	movwf	18	;volatile
 11784  0885  0020               	movlb	0	; select bank0
 11785  0886  0860               	movf	NVMWrite@rowAddr,w
 11786  0887  0023               	movlb	3	; select bank3
 11787  0888  0091               	movwf	17	;volatile
 11788                           
 11789                           ;NVM.c: 69: PMCON2=0x55;
 11790  0889  3055               	movlw	85
 11791  088A  0096               	movwf	22	;volsfr
 11792                           
 11793                           ;NVM.c: 70: PMCON2=0xAA;
 11794  088B  30AA               	movlw	170
 11795  088C  0096               	movwf	22	;volsfr
 11796                           
 11797                           ;NVM.c: 71: PMCON1bits.WR=1;
 11798  088D  1495               	bsf	21,1	;volatile
 11799  088E                     l173:	
 11800                           ;NVM.c: 72: while(PMCON1bits.WR);
 11801                           
 11802  088E  1895               	btfsc	21,1	;volatile
 11803  088F  288E               	goto	l173
 11804                           
 11805                           ;NVM.c: 73: __nop();
 11806  0890  0000               	nop
 11807                           
 11808                           ;NVM.c: 74: __nop();
 11809  0891  0000               	nop
 11810                           
 11811                           ;NVM.c: 77: for(;latchAddr<sizeof(bufTmpRow)/sizeof(unsigned short);latchAddr++)
 11812  0892  3020               	movlw	32
 11813  0893  0020               	movlb	0	; select bank0
 11814  0894  0263               	subwf	NVMWrite@latchAddr,w
 11815  0895  1803               	btfsc	3,0
 11816  0896  28BB               	goto	l3828
 11817  0897                     l176:	
 11818  0897  0064               	clrwdt	;# 
 11819                           
 11820                           ;NVM.c: 81: if(i>=len)
 11821  0898  0874               	movf	NVMWrite@len,w
 11822  0899  0020               	movlb	0	; select bank0
 11823  089A  0262               	subwf	NVMWrite@i,w
 11824  089B  1803               	btfsc	3,0
 11825  089C  28BB               	goto	l3828
 11826                           
 11827                           ;NVM.c: 84: bufTmpRow[latchAddr]=(*(source+i));
 11828                           
 11829                           ;NVM.c: 82: break;
 11830  089D  0862               	movf	NVMWrite@i,w
 11831  089E  0773               	addwf	NVMWrite@source,w
 11832  089F  00F5               	movwf	??_NVMWrite
 11833  08A0  0875               	movf	??_NVMWrite,w
 11834  08A1  0086               	movwf	6
 11835  08A2  3001               	movlw	1	; select bank2/3
 11836  08A3  0087               	movwf	7
 11837  08A4  0801               	movf	1,w
 11838  08A5  00F6               	movwf	??_NVMWrite+1
 11839  08A6  01F7               	clrf	??_NVMWrite+2
 11840  08A7  3563               	lslf	NVMWrite@latchAddr,w
 11841  08A8  3E20               	addlw	(low (NVMWrite@bufTmpRow| 0))& (0+255)
 11842  08A9  0086               	movwf	6
 11843  08AA  0187               	clrf	7
 11844  08AB  0876               	movf	??_NVMWrite+1,w
 11845  08AC  3FC0               	movwi [0]fsr1
 11846  08AD  0877               	movf	??_NVMWrite+2,w
 11847  08AE  3FC1               	movwi [1]fsr1
 11848                           
 11849                           ;NVM.c: 85: i++;
 11850  08AF  3001               	movlw	1
 11851  08B0  00F5               	movwf	??_NVMWrite
 11852  08B1  0875               	movf	??_NVMWrite,w
 11853  08B2  07E2               	addwf	NVMWrite@i,f
 11854  08B3  3001               	movlw	1
 11855  08B4  00F5               	movwf	??_NVMWrite
 11856  08B5  0875               	movf	??_NVMWrite,w
 11857  08B6  07E3               	addwf	NVMWrite@latchAddr,f
 11858  08B7  3020               	movlw	32
 11859  08B8  0263               	subwf	NVMWrite@latchAddr,w
 11860  08B9  1C03               	skipc
 11861  08BA  2897               	goto	l176
 11862  08BB                     l3828:	
 11863                           
 11864                           ;NVM.c: 86: }
 11865                           ;NVM.c: 88: latchAddr=0;
 11866  08BB  01E3               	clrf	NVMWrite@latchAddr
 11867                           
 11868                           ;NVM.c: 91: for(j=0;j<sizeof(bufTmpRow)/sizeof(unsigned short);j++)
 11869  08BC  01E4               	clrf	NVMWrite@j
 11870  08BD  3020               	movlw	32
 11871  08BE  0264               	subwf	NVMWrite@j,w
 11872  08BF  1803               	btfsc	3,0
 11873  08C0  28F3               	goto	l3850
 11874  08C1                     l3834:	
 11875                           
 11876                           ;NVM.c: 92: {
 11877                           ;NVM.c: 94: PMADR=(rowAddr+j);
 11878  08C1  0864               	movf	NVMWrite@j,w
 11879  08C2  0760               	addwf	NVMWrite@rowAddr,w
 11880  08C3  00F5               	movwf	??_NVMWrite
 11881  08C4  0861               	movf	NVMWrite@rowAddr+1,w
 11882  08C5  1803               	skipnc
 11883  08C6  0A61               	incf	NVMWrite@rowAddr+1,w
 11884  08C7  00F6               	movwf	??_NVMWrite+1
 11885  08C8  0875               	movf	??_NVMWrite,w
 11886  08C9  0023               	movlb	3	; select bank3
 11887  08CA  0091               	movwf	17	;volatile
 11888  08CB  0876               	movf	??_NVMWrite+1,w
 11889  08CC  0092               	movwf	18	;volatile
 11890                           
 11891                           ;NVM.c: 95: PMDAT=bufTmpRow[j];
 11892  08CD  0020               	movlb	0	; select bank0
 11893  08CE  3564               	lslf	NVMWrite@j,w
 11894  08CF  3E20               	addlw	(low (NVMWrite@bufTmpRow| 0))& (0+255)
 11895  08D0  0086               	movwf	6
 11896  08D1  0187               	clrf	7
 11897  08D2  3F40               	moviw [0]fsr1
 11898  08D3  0023               	movlb	3	; select bank3
 11899  08D4  0093               	movwf	19	;volatile
 11900  08D5  3F41               	moviw [1]fsr1
 11901  08D6  0094               	movwf	20	;volatile
 11902                           
 11903                           ;NVM.c: 97: if(j==(sizeof(bufTmpRow)/sizeof(unsigned short)-1))
 11904  08D7  301F               	movlw	31
 11905  08D8  0020               	movlb	0	; select bank0
 11906  08D9  0664               	xorwf	NVMWrite@j,w
 11907  08DA  1D03               	btfss	3,2
 11908  08DB  28DF               	goto	l181
 11909                           
 11910                           ;NVM.c: 98: PMCON1bits.LWLO=0;
 11911  08DC  0023               	movlb	3	; select bank3
 11912  08DD  1295               	bcf	21,5	;volatile
 11913  08DE  28E1               	goto	l3842
 11914  08DF                     l181:	
 11915                           
 11916                           ;NVM.c: 99: else
 11917                           ;NVM.c: 100: PMCON1bits.LWLO=1;
 11918  08DF  0023               	movlb	3	; select bank3
 11919  08E0  1695               	bsf	21,5	;volatile
 11920  08E1                     l3842:	
 11921                           
 11922                           ;NVM.c: 101: PMCON2=0x55;
 11923  08E1  3055               	movlw	85
 11924  08E2  0096               	movwf	22	;volsfr
 11925                           
 11926                           ;NVM.c: 102: PMCON2=0xAA;
 11927  08E3  30AA               	movlw	170
 11928  08E4  0096               	movwf	22	;volsfr
 11929                           
 11930                           ;NVM.c: 103: PMCON1bits.WR=1;
 11931  08E5  1495               	bsf	21,1	;volatile
 11932  08E6                     l183:	
 11933                           ;NVM.c: 104: while(PMCON1bits.WR);
 11934                           
 11935  08E6  1895               	btfsc	21,1	;volatile
 11936  08E7  28E6               	goto	l183
 11937                           
 11938                           ;NVM.c: 105: __nop();
 11939  08E8  0000               	nop
 11940                           
 11941                           ;NVM.c: 106: __nop();
 11942  08E9  0000               	nop
 11943  08EA  3001               	movlw	1
 11944  08EB  00F5               	movwf	??_NVMWrite
 11945  08EC  0875               	movf	??_NVMWrite,w
 11946  08ED  0020               	movlb	0	; select bank0
 11947  08EE  07E4               	addwf	NVMWrite@j,f
 11948  08EF  3020               	movlw	32
 11949  08F0  0264               	subwf	NVMWrite@j,w
 11950  08F1  1C03               	skipc
 11951  08F2  28C1               	goto	l3834
 11952  08F3                     l3850:	
 11953                           
 11954                           ;NVM.c: 107: }
 11955                           ;NVM.c: 109: rowAddr+=0x0020;
 11956  08F3  3020               	movlw	32
 11957  08F4  07E0               	addwf	NVMWrite@rowAddr,f
 11958  08F5  3000               	movlw	0
 11959  08F6  3DE1               	addwfc	NVMWrite@rowAddr+1,f
 11960  08F7  2850               	goto	l166
 11961  08F8                     l186:	
 11962                           
 11963                           ;NVM.c: 110: }
 11964                           ;NVM.c: 112: INTCONbits.GIE=1;
 11965  08F8  178B               	bsf	11,7	;volatile
 11966                           
 11967                           ;NVM.c: 113: PMCON1bits.WREN=0;
 11968  08F9  0023               	movlb	3	; select bank3
 11969  08FA  1115               	bcf	21,2	;volatile
 11970  08FB  0008               	return
 11971  08FC                     __end_of_NVMWrite:	
 11972                           
 11973                           	psect	text49
 11974  1DF2                     __ptext49:	
 11975 ;; *************** function _OUTInit *****************
 11976 ;; Defined at:
 11977 ;;		line 6 in file "OUT.c"
 11978 ;; Parameters:    Size  Location     Type
 11979 ;;  sta             1    wreg     unsigned char 
 11980 ;; Auto vars:     Size  Location     Type
 11981 ;;  sta             1    2[COMMON] unsigned char 
 11982 ;; Return value:  Size  Location     Type
 11983 ;;		None               void
 11984 ;; Registers used:
 11985 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11986 ;; Tracked objects:
 11987 ;;		On entry : 0/0
 11988 ;;		On exit  : 0/0
 11989 ;;		Unchanged: 0/0
 11990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11992 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11993 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11994 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11995 ;;Total ram usage:        2 bytes
 11996 ;; Hardware stack levels used:    1
 11997 ;; Hardware stack levels required when called:    2
 11998 ;; This function calls:
 11999 ;;		Nothing
 12000 ;; This function is called by:
 12001 ;;		_main
 12002 ;; This function uses a non-reentrant model
 12003 ;;
 12004                           
 12005                           
 12006                           ;psect for function _OUTInit
 12007  1DF2                     _OUTInit:	
 12008                           
 12009                           ;incstack = 0
 12010                           ; Regs used in _OUTInit: [wreg-fsr0h+status,2+status,0]
 12011                           ;OUTInit@sta stored from wreg
 12012  1DF2  00F2               	movwf	OUTInit@sta
 12013                           
 12014                           ;OUT.c: 8: switch(sta)
 12015  1DF3  2E03               	goto	l5064
 12016  1DF4                     l5056:	
 12017                           ;OUT.c: 9: {
 12018                           ;OUT.c: 10: case 0:
 12019                           
 12020                           
 12021                           ;OUT.c: 12: TRISA&=0b00000000; TRISB&=0b00000111; TRISC&=0b00010000; ANSELA&=0b00000000;
      +                           ANSELB&=0b00000000; ANSELC&=0b00000000;
 12022  1DF4  0021               	movlb	1	; select bank1
 12023  1DF5  018C               	clrf	12	;volatile
 12024  1DF6  3007               	movlw	7
 12025  1DF7  00F1               	movwf	??_OUTInit
 12026  1DF8  0871               	movf	??_OUTInit,w
 12027  1DF9  058D               	andwf	13,f	;volatile
 12028  1DFA  3010               	movlw	16
 12029  1DFB  00F1               	movwf	??_OUTInit
 12030  1DFC  0871               	movf	??_OUTInit,w
 12031  1DFD  058E               	andwf	14,f	;volatile
 12032  1DFE  0023               	movlb	3	; select bank3
 12033  1DFF  018C               	clrf	12	;volatile
 12034  1E00  018D               	clrf	13	;volatile
 12035  1E01  018E               	clrf	14	;volatile
 12036                           
 12037                           ;OUT.c: 20: }
 12038                           
 12039                           ;OUT.c: 13: break;
 12040  1E02  0008               	return
 12041  1E03                     l5064:	
 12042  1E03  0872               	movf	OUTInit@sta,w
 12043                           
 12044                           ; Switch size 1, requested type "space"
 12045                           ; Number of cases is 1, Range of values is 0 to 0
 12046                           ; switch strategies available:
 12047                           ; Name         Instructions Cycles
 12048                           ; simple_byte            4     3 (average)
 12049                           ; direct_byte            8     6 (fixed)
 12050                           ; jumptable            260     6 (fixed)
 12051                           ;	Chosen strategy is simple_byte
 12052  1E04  3A00               	xorlw	0	; case 0
 12053  1E05  1903               	skipnz
 12054  1E06  2DF4               	goto	l5056
 12055  1E07  2E08               	goto	l34
 12056  1E08                     l34:	
 12057  1E08  0008               	return
 12058  1E09                     __end_of_OUTInit:	
 12059                           
 12060                           	psect	text50
 12061  1D02                     __ptext50:	
 12062 ;; *************** function _NVMInit *****************
 12063 ;; Defined at:
 12064 ;;		line 6 in file "NVM.c"
 12065 ;; Parameters:    Size  Location     Type
 12066 ;;  sta             1    wreg     unsigned char 
 12067 ;; Auto vars:     Size  Location     Type
 12068 ;;  sta             1    1[COMMON] unsigned char 
 12069 ;; Return value:  Size  Location     Type
 12070 ;;		None               void
 12071 ;; Registers used:
 12072 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12073 ;; Tracked objects:
 12074 ;;		On entry : 0/0
 12075 ;;		On exit  : 0/0
 12076 ;;		Unchanged: 0/0
 12077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12079 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12081 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12082 ;;Total ram usage:        1 bytes
 12083 ;; Hardware stack levels used:    1
 12084 ;; Hardware stack levels required when called:    2
 12085 ;; This function calls:
 12086 ;;		Nothing
 12087 ;; This function is called by:
 12088 ;;		_main
 12089 ;; This function uses a non-reentrant model
 12090 ;;
 12091                           
 12092                           
 12093                           ;psect for function _NVMInit
 12094  1D02                     _NVMInit:	
 12095                           
 12096                           ;incstack = 0
 12097                           ; Regs used in _NVMInit: [wreg-fsr0h+status,2+status,0]
 12098                           ;NVMInit@sta stored from wreg
 12099  1D02  00F1               	movwf	NVMInit@sta
 12100                           
 12101                           ;NVM.c: 8: switch(sta)
 12102  1D03  2D07               	goto	l5108
 12103  1D04                     l5104:	
 12104                           ;NVM.c: 9: {
 12105                           ;NVM.c: 10: case 0:
 12106                           
 12107                           
 12108                           ;NVM.c: 12: PMCON1=0b00000000;
 12109  1D04  0023               	movlb	3	; select bank3
 12110  1D05  0195               	clrf	21	;volatile
 12111                           
 12112                           ;NVM.c: 20: }
 12113                           
 12114                           ;NVM.c: 13: break;
 12115  1D06  0008               	return
 12116  1D07                     l5108:	
 12117  1D07  0871               	movf	NVMInit@sta,w
 12118                           
 12119                           ; Switch size 1, requested type "space"
 12120                           ; Number of cases is 1, Range of values is 0 to 0
 12121                           ; switch strategies available:
 12122                           ; Name         Instructions Cycles
 12123                           ; simple_byte            4     3 (average)
 12124                           ; direct_byte            8     6 (fixed)
 12125                           ; jumptable            260     6 (fixed)
 12126                           ;	Chosen strategy is simple_byte
 12127  1D08  3A00               	xorlw	0	; case 0
 12128  1D09  1903               	skipnz
 12129  1D0A  2D04               	goto	l5104
 12130  1D0B  2D0C               	goto	l154
 12131  1D0C                     l154:	
 12132  1D0C  0008               	return
 12133  1D0D                     __end_of_NVMInit:	
 12134                           
 12135                           	psect	text51
 12136  1DDB                     __ptext51:	
 12137 ;; *************** function _INInit *****************
 12138 ;; Defined at:
 12139 ;;		line 6 in file "IN.c"
 12140 ;; Parameters:    Size  Location     Type
 12141 ;;  sta             1    wreg     unsigned char 
 12142 ;; Auto vars:     Size  Location     Type
 12143 ;;  sta             1    2[COMMON] unsigned char 
 12144 ;; Return value:  Size  Location     Type
 12145 ;;		None               void
 12146 ;; Registers used:
 12147 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 12148 ;; Tracked objects:
 12149 ;;		On entry : 0/0
 12150 ;;		On exit  : 0/0
 12151 ;;		Unchanged: 0/0
 12152 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12153 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12154 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12155 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12156 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12157 ;;Total ram usage:        2 bytes
 12158 ;; Hardware stack levels used:    1
 12159 ;; Hardware stack levels required when called:    2
 12160 ;; This function calls:
 12161 ;;		Nothing
 12162 ;; This function is called by:
 12163 ;;		_main
 12164 ;; This function uses a non-reentrant model
 12165 ;;
 12166                           
 12167                           
 12168                           ;psect for function _INInit
 12169  1DDB                     _INInit:	
 12170                           
 12171                           ;incstack = 0
 12172                           ; Regs used in _INInit: [wreg-fsr0h+status,2+status,0]
 12173                           ;INInit@sta stored from wreg
 12174  1DDB  00F2               	movwf	INInit@sta
 12175                           
 12176                           ;IN.c: 8: switch(sta)
 12177  1DDC  2DEC               	goto	l5052
 12178  1DDD                     l5044:	
 12179                           ;IN.c: 9: {
 12180                           ;IN.c: 10: case 0:
 12181                           
 12182                           
 12183                           ;IN.c: 12: TRISB|=0b00000111; TRISC|=0b00010000; ANSELB&=0b11111000; WPUB=0b00000111;
 12184  1DDD  3007               	movlw	7
 12185  1DDE  00F1               	movwf	??_INInit
 12186  1DDF  0871               	movf	??_INInit,w
 12187  1DE0  0021               	movlb	1	; select bank1
 12188  1DE1  048D               	iorwf	13,f	;volatile
 12189  1DE2  160E               	bsf	14,4	;volatile
 12190  1DE3  30F8               	movlw	248
 12191  1DE4  00F1               	movwf	??_INInit
 12192  1DE5  0871               	movf	??_INInit,w
 12193  1DE6  0023               	movlb	3	; select bank3
 12194  1DE7  058D               	andwf	13,f	;volatile
 12195  1DE8  3007               	movlw	7
 12196  1DE9  0024               	movlb	4	; select bank4
 12197  1DEA  008D               	movwf	13	;volatile
 12198                           
 12199                           ;IN.c: 20: }
 12200                           
 12201                           ;IN.c: 13: break;
 12202  1DEB  0008               	return
 12203  1DEC                     l5052:	
 12204  1DEC  0872               	movf	INInit@sta,w
 12205                           
 12206                           ; Switch size 1, requested type "space"
 12207                           ; Number of cases is 1, Range of values is 0 to 0
 12208                           ; switch strategies available:
 12209                           ; Name         Instructions Cycles
 12210                           ; simple_byte            4     3 (average)
 12211                           ; direct_byte            8     6 (fixed)
 12212                           ; jumptable            260     6 (fixed)
 12213                           ;	Chosen strategy is simple_byte
 12214  1DED  3A00               	xorlw	0	; case 0
 12215  1DEE  1903               	skipnz
 12216  1DEF  2DDD               	goto	l5044
 12217  1DF0  2DF1               	goto	l14
 12218  1DF1                     l14:	
 12219  1DF1  0008               	return
 12220  1DF2                     __end_of_INInit:	
 12221                           
 12222                           	psect	text52
 12223  1D8A                     __ptext52:	
 12224 ;; *************** function _DPYInit *****************
 12225 ;; Defined at:
 12226 ;;		line 46 in file "DPY.c"
 12227 ;; Parameters:    Size  Location     Type
 12228 ;;  sta             1    wreg     unsigned char 
 12229 ;; Auto vars:     Size  Location     Type
 12230 ;;  sta             1    4[BANK0 ] unsigned char 
 12231 ;; Return value:  Size  Location     Type
 12232 ;;		None               void
 12233 ;; Registers used:
 12234 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12235 ;; Tracked objects:
 12236 ;;		On entry : 0/0
 12237 ;;		On exit  : 0/0
 12238 ;;		Unchanged: 0/0
 12239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12241 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12243 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12244 ;;Total ram usage:        1 bytes
 12245 ;; Hardware stack levels used:    1
 12246 ;; Hardware stack levels required when called:    6
 12247 ;; This function calls:
 12248 ;;		_DPYInitDisplay
 12249 ;; This function is called by:
 12250 ;;		_main
 12251 ;; This function uses a non-reentrant model
 12252 ;;
 12253                           
 12254                           
 12255                           ;psect for function _DPYInit
 12256  1D8A                     _DPYInit:	
 12257                           
 12258                           ;incstack = 0
 12259                           ; Regs used in _DPYInit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12260                           ;DPYInit@sta stored from wreg
 12261  1D8A  0020               	movlb	0	; select bank0
 12262  1D8B  00A4               	movwf	DPYInit@sta
 12263                           
 12264                           ;DPY.c: 48: switch(sta)
 12265  1D8C  2D90               	goto	l6680
 12266  1D8D                     l6676:	
 12267                           ;DPY.c: 56: case 2:
 12268                           
 12269                           ;DPY.c: 55: break;
 12270                           
 12271                           ;DPY.c: 53: case 1:
 12272                           
 12273                           ;DPY.c: 52: break;
 12274                           
 12275                           ;DPY.c: 49: {
 12276                           ;DPY.c: 50: case 0:
 12277                           
 12278                           
 12279                           ;DPY.c: 58: DPYInitDisplay();
 12280  1D8D  3188  2001         	fcall	_DPYInitDisplay
 12281                           
 12282                           ;DPY.c: 60: }
 12283                           
 12284                           ;DPY.c: 59: break;
 12285  1D8F  0008               	return
 12286  1D90                     l6680:	
 12287  1D90  0020               	movlb	0	; select bank0
 12288  1D91  0824               	movf	DPYInit@sta,w
 12289                           
 12290                           ; Switch size 1, requested type "space"
 12291                           ; Number of cases is 3, Range of values is 0 to 2
 12292                           ; switch strategies available:
 12293                           ; Name         Instructions Cycles
 12294                           ; simple_byte           10     6 (average)
 12295                           ; direct_byte           12     6 (fixed)
 12296                           ; jumptable            260     6 (fixed)
 12297                           ;	Chosen strategy is simple_byte
 12298  1D92  3A00               	xorlw	0	; case 0
 12299  1D93  1903               	skipnz
 12300  1D94  2D9C               	goto	l261
 12301  1D95  3A01               	xorlw	1	; case 1
 12302  1D96  1903               	skipnz
 12303  1D97  2D9C               	goto	l261
 12304  1D98  3A03               	xorlw	3	; case 2
 12305  1D99  1903               	skipnz
 12306  1D9A  2D8D               	goto	l6676
 12307  1D9B  2D9C               	goto	l261
 12308  1D9C                     l261:	
 12309  1D9C  0008               	return
 12310  1D9D                     __end_of_DPYInit:	
 12311                           
 12312                           	psect	text53
 12313  0801                     __ptext53:	
 12314 ;; *************** function _DPYInitDisplay *****************
 12315 ;; Defined at:
 12316 ;;		line 63 in file "DPY.c"
 12317 ;; Parameters:    Size  Location     Type
 12318 ;;		None
 12319 ;; Auto vars:     Size  Location     Type
 12320 ;;  tmp             1    3[BANK0 ] unsigned char 
 12321 ;; Return value:  Size  Location     Type
 12322 ;;		None               void
 12323 ;; Registers used:
 12324 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12325 ;; Tracked objects:
 12326 ;;		On entry : 0/0
 12327 ;;		On exit  : 0/0
 12328 ;;		Unchanged: 0/0
 12329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12330 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12331 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12332 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12333 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12334 ;;Total ram usage:        2 bytes
 12335 ;; Hardware stack levels used:    1
 12336 ;; Hardware stack levels required when called:    5
 12337 ;; This function calls:
 12338 ;;		_DLYDelay_ms
 12339 ;;		_DPYDrawChar
 12340 ;;		_DPYWriteByte
 12341 ;;		_DPYWriteNibble
 12342 ;; This function is called by:
 12343 ;;		_DPYInit
 12344 ;; This function uses a non-reentrant model
 12345 ;;
 12346                           
 12347                           
 12348                           ;psect for function _DPYInitDisplay
 12349  0801                     _DPYInitDisplay:	
 12350                           
 12351                           ;DPY.c: 65: unsigned char tmp;
 12352                           ;DPY.c: 67: DLYDelay_ms(15);
 12353                           
 12354                           ;incstack = 0
 12355                           ; Regs used in _DPYInitDisplay: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12356  0801  300F               	movlw	15
 12357  0802  00F1               	movwf	DLYDelay_ms@val
 12358  0803  3000               	movlw	0
 12359  0804  00F2               	movwf	DLYDelay_ms@val+1
 12360  0805  319E  2609  3188   	fcall	_DLYDelay_ms
 12361                           
 12362                           ;DPY.c: 68: LATAbits.LATA6=0;
 12363  0808  0022               	movlb	2	; select bank2
 12364  0809  130C               	bcf	12,6	;volatile
 12365                           
 12366                           ;DPY.c: 69: LATAbits.LATA7=0;
 12367  080A  138C               	bcf	12,7	;volatile
 12368                           
 12369                           ;DPY.c: 72: DPYWriteNibble(RS_ISTRUCTION,0b00000010);
 12370  080B  3002               	movlw	2
 12371  080C  00FB               	movwf	??_DPYInitDisplay
 12372  080D  087B               	movf	??_DPYInitDisplay,w
 12373  080E  00F5               	movwf	DPYWriteNibble@val
 12374  080F  3000               	movlw	0
 12375  0810  3191  216F  3188   	fcall	_DPYWriteNibble
 12376                           
 12377                           ;DPY.c: 75: tmp=0b00100000;
 12378  0813  3020               	movlw	32
 12379  0814  00FB               	movwf	??_DPYInitDisplay
 12380  0815  087B               	movf	??_DPYInitDisplay,w
 12381  0816  0020               	movlb	0	; select bank0
 12382  0817  00A3               	movwf	DPYInitDisplay@tmp
 12383                           
 12384                           ;DPY.c: 80: tmp|=0b00001000;
 12385  0818  15A3               	bsf	DPYInitDisplay@tmp,3
 12386                           
 12387                           ;DPY.c: 88: DPYWriteByte(RS_ISTRUCTION,tmp);
 12388  0819  0823               	movf	DPYInitDisplay@tmp,w
 12389  081A  00FB               	movwf	??_DPYInitDisplay
 12390  081B  087B               	movf	??_DPYInitDisplay,w
 12391  081C  00F5               	movwf	DPYWriteByte@val
 12392  081D  3000               	movlw	0
 12393  081E  3194  2405  3188   	fcall	_DPYWriteByte
 12394                           
 12395                           ;DPY.c: 91: DPYWriteByte(RS_ISTRUCTION,0b00001110);
 12396  0821  300E               	movlw	14
 12397  0822  00FB               	movwf	??_DPYInitDisplay
 12398  0823  087B               	movf	??_DPYInitDisplay,w
 12399  0824  00F5               	movwf	DPYWriteByte@val
 12400  0825  3000               	movlw	0
 12401  0826  3194  2405  3188   	fcall	_DPYWriteByte
 12402                           
 12403                           ;DPY.c: 94: DPYWriteByte(RS_ISTRUCTION,0b00000110);
 12404  0829  3006               	movlw	6
 12405  082A  00FB               	movwf	??_DPYInitDisplay
 12406  082B  087B               	movf	??_DPYInitDisplay,w
 12407  082C  00F5               	movwf	DPYWriteByte@val
 12408  082D  3000               	movlw	0
 12409  082E  3194  2405  3188   	fcall	_DPYWriteByte
 12410                           
 12411                           ;DPY.c: 97: DPYWriteByte(RS_ISTRUCTION,0b00000001);
 12412  0831  01F5               	clrf	DPYWriteByte@val
 12413  0832  0AF5               	incf	DPYWriteByte@val,f
 12414  0833  3000               	movlw	0
 12415  0834  3194  2405  3188   	fcall	_DPYWriteByte
 12416                           
 12417                           ;DPY.c: 100: DPYDrawChar(0x00,picBatt);
 12418  0837  305C               	movlw	(low (_picBatt| (0+256)))& (0+255)
 12419  0838  00FB               	movwf	??_DPYInitDisplay
 12420  0839  087B               	movf	??_DPYInitDisplay,w
 12421  083A  00F8               	movwf	DPYDrawChar@p
 12422  083B  3000               	movlw	0
 12423  083C  3190  20B8         	fcall	_DPYDrawChar
 12424  083E  0008               	return
 12425  083F                     __end_of_DPYInitDisplay:	
 12426                           
 12427                           	psect	text54
 12428  116F                     __ptext54:	
 12429 ;; *************** function _DPYWriteNibble *****************
 12430 ;; Defined at:
 12431 ;;		line 166 in file "DPY.c"
 12432 ;; Parameters:    Size  Location     Type
 12433 ;;  rs              1    wreg     enum E1835
 12434 ;;  val             1    5[COMMON] unsigned char 
 12435 ;; Auto vars:     Size  Location     Type
 12436 ;;  rs              1    6[COMMON] enum E1835
 12437 ;; Return value:  Size  Location     Type
 12438 ;;		None               void
 12439 ;; Registers used:
 12440 ;;		wreg, status,2, status,0, pclath, cstack
 12441 ;; Tracked objects:
 12442 ;;		On entry : 0/0
 12443 ;;		On exit  : 0/0
 12444 ;;		Unchanged: 0/0
 12445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12446 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12447 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12449 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12450 ;;Total ram usage:        2 bytes
 12451 ;; Hardware stack levels used:    1
 12452 ;; Hardware stack levels required when called:    3
 12453 ;; This function calls:
 12454 ;;		_DLYDelay_us
 12455 ;;		_OUTSetHTCDataNibble
 12456 ;; This function is called by:
 12457 ;;		_DPYInitDisplay
 12458 ;; This function uses a non-reentrant model
 12459 ;;
 12460                           
 12461                           
 12462                           ;psect for function _DPYWriteNibble
 12463  116F                     _DPYWriteNibble:	
 12464                           
 12465                           ;incstack = 0
 12466                           ; Regs used in _DPYWriteNibble: [wreg+status,2+status,0+pclath+cstack]
 12467                           ;DPYWriteNibble@rs stored from wreg
 12468  116F  00F6               	movwf	DPYWriteNibble@rs
 12469                           
 12470                           ;DPY.c: 171: LATAbits.LATA4=0;
 12471  1170  0022               	movlb	2	; select bank2
 12472  1171  120C               	bcf	12,4	;volatile
 12473                           
 12474                           ;DPY.c: 174: if(rs==RS_ISTRUCTION)
 12475  1172  0876               	movf	DPYWriteNibble@rs,w
 12476  1173  1D03               	btfss	3,2
 12477  1174  2977               	goto	l5726
 12478                           
 12479                           ;DPY.c: 175: LATAbits.LATA6=0;
 12480  1175  130C               	bcf	12,6	;volatile
 12481  1176  297B               	goto	l292
 12482  1177                     l5726:	
 12483                           
 12484                           ;DPY.c: 176: else if(rs==RS_DATA)
 12485  1177  0376               	decf	DPYWriteNibble@rs,w
 12486  1178  1D03               	btfss	3,2
 12487  1179  297B               	goto	l292
 12488                           
 12489                           ;DPY.c: 177: LATAbits.LATA6=1;
 12490  117A  170C               	bsf	12,6	;volatile
 12491  117B                     l292:	
 12492                           
 12493                           ;DPY.c: 180: LATAbits.LATA7=0;
 12494  117B  138C               	bcf	12,7	;volatile
 12495                           
 12496                           ;DPY.c: 183: DLYDelay_us(100);
 12497  117C  3064               	movlw	100
 12498  117D  00F1               	movwf	DLYDelay_us@val
 12499  117E  3000               	movlw	0
 12500  117F  00F2               	movwf	DLYDelay_us@val+1
 12501  1180  319D  2544  3191   	fcall	_DLYDelay_us
 12502                           
 12503                           ;DPY.c: 186: LATAbits.LATA4=1;
 12504  1183  0022               	movlb	2	; select bank2
 12505  1184  160C               	bsf	12,4	;volatile
 12506                           
 12507                           ;DPY.c: 188: DLYDelay_us(100);
 12508  1185  3064               	movlw	100
 12509  1186  00F1               	movwf	DLYDelay_us@val
 12510  1187  3000               	movlw	0
 12511  1188  00F2               	movwf	DLYDelay_us@val+1
 12512  1189  319D  2544  3191   	fcall	_DLYDelay_us
 12513                           
 12514                           ;DPY.c: 190: OUTSetHTCDataNibble(val&0x0F);
 12515  118C  0875               	movf	DPYWriteNibble@val,w
 12516  118D  390F               	andlw	15
 12517  118E  319E  2658  3191   	fcall	_OUTSetHTCDataNibble
 12518                           
 12519                           ;DPY.c: 192: DLYDelay_us(100);
 12520  1191  3064               	movlw	100
 12521  1192  00F1               	movwf	DLYDelay_us@val
 12522  1193  3000               	movlw	0
 12523  1194  00F2               	movwf	DLYDelay_us@val+1
 12524  1195  319D  2544  3191   	fcall	_DLYDelay_us
 12525                           
 12526                           ;DPY.c: 194: LATAbits.LATA4=0;
 12527  1198  0022               	movlb	2	; select bank2
 12528  1199  120C               	bcf	12,4	;volatile
 12529                           
 12530                           ;DPY.c: 196: DLYDelay_us(100);
 12531  119A  3064               	movlw	100
 12532  119B  00F1               	movwf	DLYDelay_us@val
 12533  119C  3000               	movlw	0
 12534  119D  00F2               	movwf	DLYDelay_us@val+1
 12535  119E  319D  2544         	fcall	_DLYDelay_us
 12536  11A0  0008               	return
 12537  11A1                     __end_of_DPYWriteNibble:	
 12538                           
 12539                           	psect	text55
 12540  10B8                     __ptext55:	
 12541 ;; *************** function _DPYDrawChar *****************
 12542 ;; Defined at:
 12543 ;;		line 103 in file "DPY.c"
 12544 ;; Parameters:    Size  Location     Type
 12545 ;;  addr            1    wreg     unsigned char 
 12546 ;;  p               1    8[COMMON] PTR unsigned char 
 12547 ;;		 -> picBatt(9), 
 12548 ;; Auto vars:     Size  Location     Type
 12549 ;;  addr            1    0[BANK0 ] unsigned char 
 12550 ;;  i               1    2[BANK0 ] unsigned char 
 12551 ;;  tmpAddr         1    1[BANK0 ] unsigned char 
 12552 ;; Return value:  Size  Location     Type
 12553 ;;		None               void
 12554 ;; Registers used:
 12555 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12556 ;; Tracked objects:
 12557 ;;		On entry : 0/0
 12558 ;;		On exit  : 0/0
 12559 ;;		Unchanged: 0/0
 12560 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12561 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12562 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12563 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12564 ;;      Totals:         3       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12565 ;;Total ram usage:        6 bytes
 12566 ;; Hardware stack levels used:    1
 12567 ;; Hardware stack levels required when called:    4
 12568 ;; This function calls:
 12569 ;;		_DPYWriteByte
 12570 ;; This function is called by:
 12571 ;;		_DPYInitDisplay
 12572 ;; This function uses a non-reentrant model
 12573 ;;
 12574                           
 12575                           
 12576                           ;psect for function _DPYDrawChar
 12577  10B8                     _DPYDrawChar:	
 12578                           
 12579                           ;incstack = 0
 12580                           ; Regs used in _DPYDrawChar: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12581                           ;DPYDrawChar@addr stored from wreg
 12582  10B8  0020               	movlb	0	; select bank0
 12583  10B9  00A0               	movwf	DPYDrawChar@addr
 12584                           
 12585                           ;DPY.c: 105: unsigned char i,tmpAddr;
 12586                           ;DPY.c: 107: for(i=0;i<9;i++)
 12587  10BA  01A2               	clrf	DPYDrawChar@i
 12588  10BB                     L18:	
 12589  10BB  3009               	movlw	9
 12590  10BC  0222               	subwf	DPYDrawChar@i,w
 12591  10BD  1803               	btfsc	3,0
 12592  10BE  0008               	return
 12593                           
 12594                           ;DPY.c: 108: {
 12595                           ;DPY.c: 109: tmpAddr=(((i+addr)&0b00111111)|0b01000000);
 12596  10BF  0822               	movf	DPYDrawChar@i,w
 12597  10C0  0720               	addwf	DPYDrawChar@addr,w
 12598  10C1  393F               	andlw	63
 12599  10C2  3840               	iorlw	64
 12600  10C3  00F9               	movwf	??_DPYDrawChar
 12601  10C4  0879               	movf	??_DPYDrawChar,w
 12602  10C5  00A1               	movwf	DPYDrawChar@tmpAddr
 12603                           
 12604                           ;DPY.c: 110: DPYWriteByte(RS_ISTRUCTION,tmpAddr);
 12605  10C6  0821               	movf	DPYDrawChar@tmpAddr,w
 12606  10C7  00F9               	movwf	??_DPYDrawChar
 12607  10C8  0879               	movf	??_DPYDrawChar,w
 12608  10C9  00F5               	movwf	DPYWriteByte@val
 12609  10CA  3000               	movlw	0
 12610  10CB  3194  2405  3190   	fcall	_DPYWriteByte
 12611                           
 12612                           ;DPY.c: 111: DPYWriteByte(RS_DATA,(*(p+i)));
 12613  10CE  0020               	movlb	0	; select bank0
 12614  10CF  0822               	movf	DPYDrawChar@i,w
 12615  10D0  0778               	addwf	DPYDrawChar@p,w
 12616  10D1  00F9               	movwf	??_DPYDrawChar
 12617  10D2  0879               	movf	??_DPYDrawChar,w
 12618  10D3  0086               	movwf	6
 12619  10D4  3001               	movlw	1	; select bank2/3
 12620  10D5  0087               	movwf	7
 12621  10D6  0801               	movf	1,w
 12622  10D7  00FA               	movwf	??_DPYDrawChar+1
 12623  10D8  087A               	movf	??_DPYDrawChar+1,w
 12624  10D9  00F5               	movwf	DPYWriteByte@val
 12625  10DA  3001               	movlw	1
 12626  10DB  3194  2405  3190   	fcall	_DPYWriteByte
 12627  10DE  3001               	movlw	1
 12628  10DF  00F9               	movwf	??_DPYDrawChar
 12629  10E0  0879               	movf	??_DPYDrawChar,w
 12630  10E1  0020               	movlb	0	; select bank0
 12631  10E2  07A2               	addwf	DPYDrawChar@i,f
 12632  10E3  28BB               	goto	L18
 12633  10E4                     __end_of_DPYDrawChar:	
 12634                           
 12635                           	psect	text56
 12636  1405                     __ptext56:	
 12637 ;; *************** function _DPYWriteByte *****************
 12638 ;; Defined at:
 12639 ;;		line 199 in file "DPY.c"
 12640 ;; Parameters:    Size  Location     Type
 12641 ;;  rs              1    wreg     enum E1835
 12642 ;;  val             1    5[COMMON] unsigned char 
 12643 ;; Auto vars:     Size  Location     Type
 12644 ;;  rs              1    7[COMMON] enum E1835
 12645 ;; Return value:  Size  Location     Type
 12646 ;;		None               void
 12647 ;; Registers used:
 12648 ;;		wreg, status,2, status,0, pclath, cstack
 12649 ;; Tracked objects:
 12650 ;;		On entry : 0/0
 12651 ;;		On exit  : 0/0
 12652 ;;		Unchanged: 0/0
 12653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12654 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12655 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12656 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12657 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12658 ;;Total ram usage:        3 bytes
 12659 ;; Hardware stack levels used:    1
 12660 ;; Hardware stack levels required when called:    3
 12661 ;; This function calls:
 12662 ;;		_DLYDelay_us
 12663 ;;		_OUTSetHTCDataNibble
 12664 ;; This function is called by:
 12665 ;;		_DPYInitDisplay
 12666 ;;		_DPYDrawChar
 12667 ;;		_DPYSetCur
 12668 ;;		_DPYSendChar
 12669 ;; This function uses a non-reentrant model
 12670 ;;
 12671                           
 12672                           
 12673                           ;psect for function _DPYWriteByte
 12674  1405                     _DPYWriteByte:	
 12675                           
 12676                           ;incstack = 0
 12677                           ; Regs used in _DPYWriteByte: [wreg+status,2+status,0+pclath+cstack]
 12678                           ;DPYWriteByte@rs stored from wreg
 12679  1405  00F7               	movwf	DPYWriteByte@rs
 12680                           
 12681                           ;DPY.c: 202: LATAbits.LATA4=0;
 12682  1406  0022               	movlb	2	; select bank2
 12683  1407  120C               	bcf	12,4	;volatile
 12684                           
 12685                           ;DPY.c: 205: if(rs==RS_ISTRUCTION)
 12686  1408  0877               	movf	DPYWriteByte@rs,w
 12687  1409  1D03               	btfss	3,2
 12688  140A  2C0D               	goto	l5416
 12689                           
 12690                           ;DPY.c: 206: LATAbits.LATA6=0;
 12691  140B  130C               	bcf	12,6	;volatile
 12692  140C  2C11               	goto	l298
 12693  140D                     l5416:	
 12694                           
 12695                           ;DPY.c: 207: else if(rs==RS_DATA)
 12696  140D  0377               	decf	DPYWriteByte@rs,w
 12697  140E  1D03               	btfss	3,2
 12698  140F  2C11               	goto	l298
 12699                           
 12700                           ;DPY.c: 208: LATAbits.LATA6=1;
 12701  1410  170C               	bsf	12,6	;volatile
 12702  1411                     l298:	
 12703                           
 12704                           ;DPY.c: 211: LATAbits.LATA7=0;
 12705  1411  138C               	bcf	12,7	;volatile
 12706                           
 12707                           ;DPY.c: 214: DLYDelay_us(100);
 12708  1412  3064               	movlw	100
 12709  1413  00F1               	movwf	DLYDelay_us@val
 12710  1414  3000               	movlw	0
 12711  1415  00F2               	movwf	DLYDelay_us@val+1
 12712  1416  319D  2544  3194   	fcall	_DLYDelay_us
 12713                           
 12714                           ;DPY.c: 217: LATAbits.LATA4=1;
 12715  1419  0022               	movlb	2	; select bank2
 12716  141A  160C               	bsf	12,4	;volatile
 12717                           
 12718                           ;DPY.c: 219: DLYDelay_us(100);
 12719  141B  3064               	movlw	100
 12720  141C  00F1               	movwf	DLYDelay_us@val
 12721  141D  3000               	movlw	0
 12722  141E  00F2               	movwf	DLYDelay_us@val+1
 12723  141F  319D  2544  3194   	fcall	_DLYDelay_us
 12724                           
 12725                           ;DPY.c: 221: OUTSetHTCDataNibble((val>>4)&0b00001111);
 12726  1422  0875               	movf	DPYWriteByte@val,w
 12727  1423  00F6               	movwf	??_DPYWriteByte
 12728  1424  3004               	movlw	4
 12729  1425                     u5475:	
 12730  1425  36F6               	lsrf	??_DPYWriteByte,f
 12731  1426  0B89               	decfsz	9,f
 12732  1427  2C25               	goto	u5475
 12733  1428  0876               	movf	??_DPYWriteByte,w
 12734  1429  390F               	andlw	15
 12735  142A  319E  2658  3194   	fcall	_OUTSetHTCDataNibble
 12736                           
 12737                           ;DPY.c: 223: DLYDelay_us(100);
 12738  142D  3064               	movlw	100
 12739  142E  00F1               	movwf	DLYDelay_us@val
 12740  142F  3000               	movlw	0
 12741  1430  00F2               	movwf	DLYDelay_us@val+1
 12742  1431  319D  2544  3194   	fcall	_DLYDelay_us
 12743                           
 12744                           ;DPY.c: 225: LATAbits.LATA4=0;
 12745  1434  0022               	movlb	2	; select bank2
 12746  1435  120C               	bcf	12,4	;volatile
 12747                           
 12748                           ;DPY.c: 227: DLYDelay_us(100);
 12749  1436  3064               	movlw	100
 12750  1437  00F1               	movwf	DLYDelay_us@val
 12751  1438  3000               	movlw	0
 12752  1439  00F2               	movwf	DLYDelay_us@val+1
 12753  143A  319D  2544  3194   	fcall	_DLYDelay_us
 12754                           
 12755                           ;DPY.c: 229: LATAbits.LATA4=1;
 12756  143D  0022               	movlb	2	; select bank2
 12757  143E  160C               	bsf	12,4	;volatile
 12758                           
 12759                           ;DPY.c: 231: DLYDelay_us(100);
 12760  143F  3064               	movlw	100
 12761  1440  00F1               	movwf	DLYDelay_us@val
 12762  1441  3000               	movlw	0
 12763  1442  00F2               	movwf	DLYDelay_us@val+1
 12764  1443  319D  2544  3194   	fcall	_DLYDelay_us
 12765                           
 12766                           ;DPY.c: 233: OUTSetHTCDataNibble(val&0b00001111);
 12767  1446  0875               	movf	DPYWriteByte@val,w
 12768  1447  390F               	andlw	15
 12769  1448  319E  2658  3194   	fcall	_OUTSetHTCDataNibble
 12770                           
 12771                           ;DPY.c: 235: DLYDelay_us(100);
 12772  144B  3064               	movlw	100
 12773  144C  00F1               	movwf	DLYDelay_us@val
 12774  144D  3000               	movlw	0
 12775  144E  00F2               	movwf	DLYDelay_us@val+1
 12776  144F  319D  2544  3194   	fcall	_DLYDelay_us
 12777                           
 12778                           ;DPY.c: 237: LATAbits.LATA4=0;
 12779  1452  0022               	movlb	2	; select bank2
 12780  1453  120C               	bcf	12,4	;volatile
 12781                           
 12782                           ;DPY.c: 239: DLYDelay_us(100);
 12783  1454  3064               	movlw	100
 12784  1455  00F1               	movwf	DLYDelay_us@val
 12785  1456  3000               	movlw	0
 12786  1457  00F2               	movwf	DLYDelay_us@val+1
 12787  1458  319D  2544         	fcall	_DLYDelay_us
 12788  145A  0008               	return
 12789  145B                     __end_of_DPYWriteByte:	
 12790                           
 12791                           	psect	text57
 12792  1E58                     __ptext57:	
 12793 ;; *************** function _OUTSetHTCDataNibble *****************
 12794 ;; Defined at:
 12795 ;;		line 23 in file "OUT.c"
 12796 ;; Parameters:    Size  Location     Type
 12797 ;;  val             1    wreg     unsigned char 
 12798 ;; Auto vars:     Size  Location     Type
 12799 ;;  val             1    2[COMMON] unsigned char 
 12800 ;;  dataToSet       1    3[COMMON] unsigned char 
 12801 ;; Return value:  Size  Location     Type
 12802 ;;		None               void
 12803 ;; Registers used:
 12804 ;;		wreg, status,2, status,0
 12805 ;; Tracked objects:
 12806 ;;		On entry : 0/0
 12807 ;;		On exit  : 0/0
 12808 ;;		Unchanged: 0/0
 12809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12811 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12812 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12813 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12814 ;;Total ram usage:        3 bytes
 12815 ;; Hardware stack levels used:    1
 12816 ;; Hardware stack levels required when called:    2
 12817 ;; This function calls:
 12818 ;;		Nothing
 12819 ;; This function is called by:
 12820 ;;		_DPYWriteNibble
 12821 ;;		_DPYWriteByte
 12822 ;; This function uses a non-reentrant model
 12823 ;;
 12824                           
 12825                           
 12826                           ;psect for function _OUTSetHTCDataNibble
 12827  1E58                     _OUTSetHTCDataNibble:	
 12828                           
 12829                           ;incstack = 0
 12830                           ; Regs used in _OUTSetHTCDataNibble: [wreg+status,2+status,0]
 12831                           ;OUTSetHTCDataNibble@val stored from wreg
 12832  1E58  00F2               	movwf	OUTSetHTCDataNibble@val
 12833                           
 12834                           ;OUT.c: 25: unsigned char dataToSet=0;
 12835  1E59  01F3               	clrf	OUTSetHTCDataNibble@dataToSet
 12836                           
 12837                           ;OUT.c: 27: if(val&0b00000001)
 12838  1E5A  1872               	btfsc	OUTSetHTCDataNibble@val,0
 12839                           
 12840                           ;OUT.c: 28: dataToSet|=0b00001000;
 12841  1E5B  15F3               	bsf	OUTSetHTCDataNibble@dataToSet,3
 12842                           
 12843                           ;OUT.c: 29: if(val&0b00000010)
 12844  1E5C  18F2               	btfsc	OUTSetHTCDataNibble@val,1
 12845                           
 12846                           ;OUT.c: 30: dataToSet|=0b00000100;
 12847  1E5D  1573               	bsf	OUTSetHTCDataNibble@dataToSet,2
 12848                           
 12849                           ;OUT.c: 31: if(val&0b00000100)
 12850  1E5E  1972               	btfsc	OUTSetHTCDataNibble@val,2
 12851                           
 12852                           ;OUT.c: 32: dataToSet|=0b00000010;
 12853  1E5F  14F3               	bsf	OUTSetHTCDataNibble@dataToSet,1
 12854                           
 12855                           ;OUT.c: 33: if(val&0b00001000)
 12856  1E60  19F2               	btfsc	OUTSetHTCDataNibble@val,3
 12857                           
 12858                           ;OUT.c: 34: dataToSet|=0b00000001;
 12859  1E61  1473               	bsf	OUTSetHTCDataNibble@dataToSet,0
 12860                           
 12861                           ;OUT.c: 36: dataToSet&=0b00001111;
 12862  1E62  300F               	movlw	15
 12863  1E63  00F1               	movwf	??_OUTSetHTCDataNibble
 12864  1E64  0871               	movf	??_OUTSetHTCDataNibble,w
 12865  1E65  05F3               	andwf	OUTSetHTCDataNibble@dataToSet,f
 12866                           
 12867                           ;OUT.c: 37: LATA|=dataToSet;
 12868  1E66  0873               	movf	OUTSetHTCDataNibble@dataToSet,w
 12869  1E67  00F1               	movwf	??_OUTSetHTCDataNibble
 12870  1E68  0871               	movf	??_OUTSetHTCDataNibble,w
 12871  1E69  0022               	movlb	2	; select bank2
 12872  1E6A  048C               	iorwf	12,f	;volatile
 12873                           
 12874                           ;OUT.c: 38: dataToSet|=0b11110000;
 12875  1E6B  30F0               	movlw	240
 12876  1E6C  00F1               	movwf	??_OUTSetHTCDataNibble
 12877  1E6D  0871               	movf	??_OUTSetHTCDataNibble,w
 12878  1E6E  04F3               	iorwf	OUTSetHTCDataNibble@dataToSet,f
 12879                           
 12880                           ;OUT.c: 39: LATA&=dataToSet;
 12881  1E6F  0873               	movf	OUTSetHTCDataNibble@dataToSet,w
 12882  1E70  00F1               	movwf	??_OUTSetHTCDataNibble
 12883  1E71  0871               	movf	??_OUTSetHTCDataNibble,w
 12884  1E72  058C               	andwf	12,f	;volatile
 12885  1E73  0008               	return
 12886  1E74                     __end_of_OUTSetHTCDataNibble:	
 12887                           
 12888                           	psect	text58
 12889  1D44                     __ptext58:	
 12890 ;; *************** function _DLYDelay_us *****************
 12891 ;; Defined at:
 12892 ;;		line 6 in file "DLY.c"
 12893 ;; Parameters:    Size  Location     Type
 12894 ;;  val             2    1[COMMON] unsigned short 
 12895 ;; Auto vars:     Size  Location     Type
 12896 ;;  i               2    3[COMMON] unsigned short 
 12897 ;; Return value:  Size  Location     Type
 12898 ;;		None               void
 12899 ;; Registers used:
 12900 ;;		wreg, status,2
 12901 ;; Tracked objects:
 12902 ;;		On entry : 0/0
 12903 ;;		On exit  : 0/0
 12904 ;;		Unchanged: 0/0
 12905 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12906 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12907 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12908 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12909 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12910 ;;Total ram usage:        4 bytes
 12911 ;; Hardware stack levels used:    1
 12912 ;; Hardware stack levels required when called:    2
 12913 ;; This function calls:
 12914 ;;		Nothing
 12915 ;; This function is called by:
 12916 ;;		_DPYWriteNibble
 12917 ;;		_DPYWriteByte
 12918 ;;		_DPYIsBusy
 12919 ;; This function uses a non-reentrant model
 12920 ;;
 12921                           
 12922                           
 12923                           ;psect for function _DLYDelay_us
 12924  1D44                     _DLYDelay_us:	
 12925                           
 12926                           ;DLY.c: 8: unsigned short i;
 12927                           ;DLY.c: 10: for(i=0;i<val;i++)
 12928                           
 12929                           ;incstack = 0
 12930                           ; Regs used in _DLYDelay_us: [wreg+status,2]
 12931  1D44  01F3               	clrf	DLYDelay_us@i
 12932  1D45  01F4               	clrf	DLYDelay_us@i+1
 12933  1D46                     l88:	
 12934  1D46  0872               	movf	DLYDelay_us@val+1,w
 12935  1D47  0274               	subwf	DLYDelay_us@i+1,w
 12936  1D48  1D03               	skipz
 12937  1D49  2D4C               	goto	u5175
 12938  1D4A  0871               	movf	DLYDelay_us@val,w
 12939  1D4B  0273               	subwf	DLYDelay_us@i,w
 12940  1D4C                     u5175:	
 12941  1D4C  1803               	btfsc	3,0
 12942  1D4D  0008               	return
 12943  1D4E  0064               	clrwdt	;# 
 12944                           
 12945                           ;DLY.c: 13: _delay((unsigned long)((1)*(8000000/4000000.0)));
 12946  1D4F  3200               	nop2	;2 cycle nop
 12947  1D50  3001               	movlw	1
 12948  1D51  07F3               	addwf	DLYDelay_us@i,f
 12949  1D52  3000               	movlw	0
 12950  1D53  3DF4               	addwfc	DLYDelay_us@i+1,f
 12951  1D54  2D46               	goto	l88
 12952  1D55                     __end_of_DLYDelay_us:	
 12953                           
 12954                           	psect	text59
 12955  1E91                     __ptext59:	
 12956 ;; *************** function _DINTask *****************
 12957 ;; Defined at:
 12958 ;;		line 79 in file "DIN.c"
 12959 ;; Parameters:    Size  Location     Type
 12960 ;;		None
 12961 ;; Auto vars:     Size  Location     Type
 12962 ;;		None
 12963 ;; Return value:  Size  Location     Type
 12964 ;;		None               void
 12965 ;; Registers used:
 12966 ;;		wreg, status,2, status,0
 12967 ;; Tracked objects:
 12968 ;;		On entry : 0/0
 12969 ;;		On exit  : 0/0
 12970 ;;		Unchanged: 0/0
 12971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12973 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12974 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12975 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12976 ;;Total ram usage:        1 bytes
 12977 ;; Hardware stack levels used:    1
 12978 ;; Hardware stack levels required when called:    2
 12979 ;; This function calls:
 12980 ;;		Nothing
 12981 ;; This function is called by:
 12982 ;;		_main
 12983 ;; This function uses a non-reentrant model
 12984 ;;
 12985                           
 12986                           
 12987                           ;psect for function _DINTask
 12988  1E91                     _DINTask:	
 12989                           
 12990                           ;DIN.c: 81: u_in_sta_tmpTask.val=0;
 12991                           
 12992                           ;incstack = 0
 12993                           ; Regs used in _DINTask: [wreg+status,2+status,0]
 12994  1E91  0020               	movlb	0	; select bank0
 12995  1E92  01EE               	clrf	_u_in_sta_tmpTask
 12996                           
 12997                           ;DIN.c: 82: if(!PORTBbits.RB2)
 12998  1E93  1D0D               	btfss	13,2	;volatile
 12999                           
 13000                           ;DIN.c: 83: u_in_sta_tmpTask.sel=1;
 13001  1E94  146E               	bsf	_u_in_sta_tmpTask,0
 13002                           
 13003                           ;DIN.c: 86: if(u_in_sta_currTask.sel!=u_in_sta_tmpTask.sel)
 13004  1E95  086E               	movf	_u_in_sta_tmpTask,w
 13005  1E96  3901               	andlw	1
 13006  1E97  00F1               	movwf	??_DINTask
 13007  1E98  086D               	movf	_u_in_sta_currTask,w
 13008  1E99  3901               	andlw	1
 13009  1E9A  0671               	xorwf	??_DINTask,w
 13010  1E9B  1903               	skipnz
 13011  1E9C  2EA4               	goto	l5132
 13012                           
 13013                           ;DIN.c: 87: {
 13014                           ;DIN.c: 88: u_in_sta_currTask.sel=u_in_sta_tmpTask.sel;
 13015  1E9D  106D               	bcf	_u_in_sta_currTask,0
 13016  1E9E  1C6E               	btfss	_u_in_sta_tmpTask,0
 13017  1E9F  2EA1               	goto	l5128
 13018  1EA0  146D               	bsf	_u_in_sta_currTask,0
 13019  1EA1                     l5128:	
 13020                           
 13021                           ;DIN.c: 89: tmrDbncSel=0;
 13022  1EA1  0020               	movlb	0	; select bank0
 13023  1EA2  01E9               	clrf	_tmrDbncSel
 13024                           
 13025                           ;DIN.c: 90: u_flg_din.tmrDbncSel=1;
 13026  1EA3  146A               	bsf	_u_flg_din,0
 13027  1EA4                     l5132:	
 13028                           
 13029                           ;DIN.c: 91: }
 13030                           ;DIN.c: 94: if(u_in_sta_currTask.sel)
 13031  1EA4  1C6D               	btfss	_u_in_sta_currTask,0
 13032  1EA5  2EA8               	goto	l5136
 13033                           
 13034                           ;DIN.c: 95: u_flg_din.tmrLongSel=1;
 13035  1EA6  14EA               	bsf	_u_flg_din,1
 13036  1EA7  0008               	return
 13037  1EA8                     l5136:	
 13038                           
 13039                           ;DIN.c: 96: else
 13040                           ;DIN.c: 97: {
 13041                           ;DIN.c: 98: tmrLongSel=0;
 13042  1EA8  0022               	movlb	2	; select bank2
 13043  1EA9  01BA               	clrf	_tmrLongSel^(0+256)
 13044  1EAA  01BB               	clrf	(_tmrLongSel+1)^(0+256)
 13045                           
 13046                           ;DIN.c: 99: u_flg_din.tmrLongSel=0;
 13047  1EAB  0020               	movlb	0	; select bank0
 13048  1EAC  10EA               	bcf	_u_flg_din,1
 13049  1EAD  0008               	return
 13050  1EAE                     __end_of_DINTask:	
 13051                           
 13052                           	psect	text60
 13053  1D66                     __ptext60:	
 13054 ;; *************** function _DINInit *****************
 13055 ;; Defined at:
 13056 ;;		line 24 in file "DIN.c"
 13057 ;; Parameters:    Size  Location     Type
 13058 ;;  sta             1    wreg     unsigned char 
 13059 ;; Auto vars:     Size  Location     Type
 13060 ;;  sta             1    1[COMMON] unsigned char 
 13061 ;; Return value:  Size  Location     Type
 13062 ;;		None               void
 13063 ;; Registers used:
 13064 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 13065 ;; Tracked objects:
 13066 ;;		On entry : 0/0
 13067 ;;		On exit  : 0/0
 13068 ;;		Unchanged: 0/0
 13069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13071 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13073 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13074 ;;Total ram usage:        1 bytes
 13075 ;; Hardware stack levels used:    1
 13076 ;; Hardware stack levels required when called:    2
 13077 ;; This function calls:
 13078 ;;		Nothing
 13079 ;; This function is called by:
 13080 ;;		_main
 13081 ;; This function uses a non-reentrant model
 13082 ;;
 13083                           
 13084                           
 13085                           ;psect for function _DINInit
 13086  1D66                     _DINInit:	
 13087                           
 13088                           ;incstack = 0
 13089                           ; Regs used in _DINInit: [wreg-fsr0h+status,2+status,0]
 13090                           ;DINInit@sta stored from wreg
 13091  1D66  00F1               	movwf	DINInit@sta
 13092                           
 13093                           ;DIN.c: 26: switch(sta)
 13094  1D67  2D72               	goto	l5116
 13095  1D68                     l5112:	
 13096                           ;DIN.c: 27: {
 13097                           ;DIN.c: 31: case 1:
 13098                           
 13099                           
 13100                           ;DIN.c: 33: u_flg_din.val=0;
 13101  1D68  0020               	movlb	0	; select bank0
 13102  1D69  01EA               	clrf	_u_flg_din
 13103                           
 13104                           ;DIN.c: 34: u_in_sta_currTask.val=0;
 13105  1D6A  01ED               	clrf	_u_in_sta_currTask
 13106                           
 13107                           ;DIN.c: 35: u_in_sta_tmpTask.val=0;
 13108  1D6B  01EE               	clrf	_u_in_sta_tmpTask
 13109                           
 13110                           ;DIN.c: 36: u_in_ev_up.val=0;
 13111  1D6C  0021               	movlb	1	; select bank1
 13112  1D6D  01ED               	clrf	_u_in_ev_up^(0+128)
 13113                           
 13114                           ;DIN.c: 37: u_in_ev_down.val=0;
 13115  1D6E  0020               	movlb	0	; select bank0
 13116  1D6F  01EB               	clrf	_u_in_ev_down
 13117                           
 13118                           ;DIN.c: 38: u_in_ev_long.val=0;
 13119  1D70  01EC               	clrf	_u_in_ev_long
 13120                           
 13121                           ;DIN.c: 43: }
 13122                           
 13123                           ;DIN.c: 39: break;
 13124  1D71  0008               	return
 13125  1D72                     l5116:	
 13126  1D72  0871               	movf	DINInit@sta,w
 13127                           
 13128                           ; Switch size 1, requested type "space"
 13129                           ; Number of cases is 1, Range of values is 1 to 1
 13130                           ; switch strategies available:
 13131                           ; Name         Instructions Cycles
 13132                           ; simple_byte            4     3 (average)
 13133                           ; direct_byte           11     9 (fixed)
 13134                           ; jumptable            263     9 (fixed)
 13135                           ;	Chosen strategy is simple_byte
 13136  1D73  3A01               	xorlw	1	; case 1
 13137  1D74  1903               	skipnz
 13138  1D75  2D68               	goto	l5112
 13139  1D76  2D77               	goto	l211
 13140  1D77                     l211:	
 13141  1D77  0008               	return
 13142  1D78                     __end_of_DINInit:	
 13143                           
 13144                           	psect	text61
 13145  11D5                     __ptext61:	
 13146 ;; *************** function _CC1Init *****************
 13147 ;; Defined at:
 13148 ;;		line 77 in file "CC1.c"
 13149 ;; Parameters:    Size  Location     Type
 13150 ;;  state           1    wreg     unsigned char 
 13151 ;; Auto vars:     Size  Location     Type
 13152 ;;  state           1    2[BANK0 ] unsigned char 
 13153 ;; Return value:  Size  Location     Type
 13154 ;;		None               void
 13155 ;; Registers used:
 13156 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13157 ;; Tracked objects:
 13158 ;;		On entry : 0/0
 13159 ;;		On exit  : 0/0
 13160 ;;		Unchanged: 0/0
 13161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13162 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13163 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13164 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13165 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13166 ;;Total ram usage:        3 bytes
 13167 ;; Hardware stack levels used:    1
 13168 ;; Hardware stack levels required when called:    4
 13169 ;; This function calls:
 13170 ;;		_CC1Strobe
 13171 ;;		_CC1Write
 13172 ;;		_DLYDelay_ms
 13173 ;; This function is called by:
 13174 ;;		_main
 13175 ;; This function uses a non-reentrant model
 13176 ;;
 13177                           
 13178                           
 13179                           ;psect for function _CC1Init
 13180  11D5                     _CC1Init:	
 13181                           
 13182                           ;incstack = 0
 13183                           ; Regs used in _CC1Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13184                           ;CC1Init@state stored from wreg
 13185  11D5  0020               	movlb	0	; select bank0
 13186  11D6  00A2               	movwf	CC1Init@state
 13187                           
 13188                           ;CC1.c: 80: switch(state)
 13189  11D7  2A01               	goto	l6772
 13190  11D8                     l6760:	
 13191                           ;CC1.c: 81: {
 13192                           ;CC1.c: 82: case 0:
 13193                           
 13194                           
 13195                           ;CC1.c: 84: IOCBP=0b00000000; IOCBN=0b00000000;
 13196  11D8  0027               	movlb	7	; select bank7
 13197  11D9  0194               	clrf	20	;volatile
 13198  11DA  0195               	clrf	21	;volatile
 13199                           
 13200                           ;CC1.c: 88: break;
 13201                           
 13202                           ;CC1.c: 86: case 1:
 13203                           
 13204                           ;CC1.c: 85: break;
 13205  11DB  0008               	return
 13206  11DC                     l6762:	
 13207                           ;CC1.c: 89: case 2:
 13208                           
 13209                           
 13210                           ;CC1.c: 92: CC1Strobe(SRES);
 13211  11DC  3030               	movlw	48
 13212  11DD  319D  259D  3191   	fcall	_CC1Strobe
 13213                           
 13214                           ;CC1.c: 94: DLYDelay_ms(5);
 13215  11E0  3005               	movlw	5
 13216  11E1  00F1               	movwf	DLYDelay_ms@val
 13217  11E2  3000               	movlw	0
 13218  11E3  00F2               	movwf	DLYDelay_ms@val+1
 13219  11E4  319E  2609  3191   	fcall	_DLYDelay_ms
 13220                           
 13221                           ;CC1.c: 95: CC1Write(0x00,cc1InitVal,0x2E);
 13222  11E7  30A0               	movlw	(low (_cc1InitVal| (0+256)))& (0+255)
 13223  11E8  0020               	movlb	0	; select bank0
 13224  11E9  00A0               	movwf	??_CC1Init
 13225  11EA  0820               	movf	??_CC1Init,w
 13226  11EB  00F7               	movwf	CC1Write@src
 13227  11EC  302E               	movlw	46
 13228  11ED  00A1               	movwf	??_CC1Init+1
 13229  11EE  0821               	movf	??_CC1Init+1,w
 13230  11EF  00F8               	movwf	CC1Write@len
 13231  11F0  3000               	movlw	0
 13232  11F1  3187  27DF  3191   	fcall	_CC1Write
 13233                           
 13234                           ;CC1.c: 96: CC1Write(0x3E,cc1PaTable,8);
 13235  11F4  3065               	movlw	(low (_cc1PaTable| (0+256)))& (0+255)
 13236  11F5  0020               	movlb	0	; select bank0
 13237  11F6  00A0               	movwf	??_CC1Init
 13238  11F7  0820               	movf	??_CC1Init,w
 13239  11F8  00F7               	movwf	CC1Write@src
 13240  11F9  3008               	movlw	8
 13241  11FA  00A1               	movwf	??_CC1Init+1
 13242  11FB  0821               	movf	??_CC1Init+1,w
 13243  11FC  00F8               	movwf	CC1Write@len
 13244  11FD  303E               	movlw	62
 13245  11FE  3187  27DF         	fcall	_CC1Write
 13246                           
 13247                           ;CC1.c: 102: }
 13248                           
 13249                           ;CC1.c: 101: break;
 13250  1200  0008               	return
 13251  1201                     l6772:	
 13252  1201  0020               	movlb	0	; select bank0
 13253  1202  0822               	movf	CC1Init@state,w
 13254                           
 13255                           ; Switch size 1, requested type "space"
 13256                           ; Number of cases is 3, Range of values is 0 to 2
 13257                           ; switch strategies available:
 13258                           ; Name         Instructions Cycles
 13259                           ; simple_byte           10     6 (average)
 13260                           ; direct_byte           12     6 (fixed)
 13261                           ; jumptable            260     6 (fixed)
 13262                           ;	Chosen strategy is simple_byte
 13263  1203  3A00               	xorlw	0	; case 0
 13264  1204  1903               	skipnz
 13265  1205  29D8               	goto	l6760
 13266  1206  3A01               	xorlw	1	; case 1
 13267  1207  1903               	skipnz
 13268  1208  2A0D               	goto	l125
 13269  1209  3A03               	xorlw	3	; case 2
 13270  120A  1903               	skipnz
 13271  120B  29DC               	goto	l6762
 13272  120C  2A0D               	goto	l125
 13273  120D                     l125:	
 13274  120D  0008               	return
 13275  120E                     __end_of_CC1Init:	
 13276                           
 13277                           	psect	text62
 13278  1E09                     __ptext62:	
 13279 ;; *************** function _DLYDelay_ms *****************
 13280 ;; Defined at:
 13281 ;;		line 17 in file "DLY.c"
 13282 ;; Parameters:    Size  Location     Type
 13283 ;;  val             2    1[COMMON] unsigned short 
 13284 ;; Auto vars:     Size  Location     Type
 13285 ;;  i               2    5[COMMON] unsigned short 
 13286 ;; Return value:  Size  Location     Type
 13287 ;;		None               void
 13288 ;; Registers used:
 13289 ;;		wreg, status,2
 13290 ;; Tracked objects:
 13291 ;;		On entry : 0/0
 13292 ;;		On exit  : 0/0
 13293 ;;		Unchanged: 0/0
 13294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13295 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13296 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13297 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13298 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13299 ;;Total ram usage:        6 bytes
 13300 ;; Hardware stack levels used:    1
 13301 ;; Hardware stack levels required when called:    2
 13302 ;; This function calls:
 13303 ;;		Nothing
 13304 ;; This function is called by:
 13305 ;;		_CC1Init
 13306 ;;		_DPYInitDisplay
 13307 ;;		_PGMSelLong
 13308 ;;		_RTXReadPkt
 13309 ;; This function uses a non-reentrant model
 13310 ;;
 13311                           
 13312                           
 13313                           ;psect for function _DLYDelay_ms
 13314  1E09                     _DLYDelay_ms:	
 13315                           
 13316                           ;DLY.c: 19: unsigned short i;
 13317                           ;DLY.c: 21: for(i=0;i<val;i++)
 13318                           
 13319                           ;incstack = 0
 13320                           ; Regs used in _DLYDelay_ms: [wreg+status,2]
 13321  1E09  01F5               	clrf	DLYDelay_ms@i
 13322  1E0A  01F6               	clrf	DLYDelay_ms@i+1
 13323  1E0B                     l94:	
 13324  1E0B  0872               	movf	DLYDelay_ms@val+1,w
 13325  1E0C  0276               	subwf	DLYDelay_ms@i+1,w
 13326  1E0D  1D03               	skipz
 13327  1E0E  2E11               	goto	u5845
 13328  1E0F  0871               	movf	DLYDelay_ms@val,w
 13329  1E10  0275               	subwf	DLYDelay_ms@i,w
 13330  1E11                     u5845:	
 13331  1E11  1803               	btfsc	3,0
 13332  1E12  0008               	return
 13333  1E13  0064               	clrwdt	;# 
 13334                           
 13335                           ;DLY.c: 24: _delay((unsigned long)((1)*(8000000/4000.0)));
 13336  1E14  3003               	movlw	3
 13337  1E15  00F4               	movwf	??_DLYDelay_ms+1
 13338  1E16  3097               	movlw	151
 13339  1E17  00F3               	movwf	??_DLYDelay_ms
 13340  1E18                     u6637:	
 13341  1E18  0BF3               	decfsz	??_DLYDelay_ms,f
 13342  1E19  2E18               	goto	u6637
 13343  1E1A  0BF4               	decfsz	??_DLYDelay_ms+1,f
 13344  1E1B  2E18               	goto	u6637
 13345  1E1C  3200               	nop2
 13346  1E1D  3001               	movlw	1
 13347  1E1E  07F5               	addwf	DLYDelay_ms@i,f
 13348  1E1F  3000               	movlw	0
 13349  1E20  3DF6               	addwfc	DLYDelay_ms@i+1,f
 13350  1E21  2E0B               	goto	l94
 13351  1E22                     __end_of_DLYDelay_ms:	
 13352                           
 13353                           	psect	text63
 13354  07DF                     __ptext63:	
 13355 ;; *************** function _CC1Write *****************
 13356 ;; Defined at:
 13357 ;;		line 138 in file "CC1.c"
 13358 ;; Parameters:    Size  Location     Type
 13359 ;;  addr            1    wreg     unsigned char 
 13360 ;;  src             1    7[COMMON] PTR unsigned char 
 13361 ;;		 -> pktTx(11), cc1PaTable(8), cc1InitVal(47), 
 13362 ;;  len             1    8[COMMON] unsigned char 
 13363 ;; Auto vars:     Size  Location     Type
 13364 ;;  addr            1   10[COMMON] unsigned char 
 13365 ;;  cc1Addr         1   11[COMMON] unsigned char 
 13366 ;; Return value:  Size  Location     Type
 13367 ;;		None               void
 13368 ;; Registers used:
 13369 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13370 ;; Tracked objects:
 13371 ;;		On entry : 0/0
 13372 ;;		On exit  : 0/0
 13373 ;;		Unchanged: 0/0
 13374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13375 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13376 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13377 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13378 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13379 ;;Total ram usage:        5 bytes
 13380 ;; Hardware stack levels used:    1
 13381 ;; Hardware stack levels required when called:    3
 13382 ;; This function calls:
 13383 ;;		_SPIWrite
 13384 ;; This function is called by:
 13385 ;;		_CC1Init
 13386 ;;		_RTXSndPkt
 13387 ;; This function uses a non-reentrant model
 13388 ;;
 13389                           
 13390                           
 13391                           ;psect for function _CC1Write
 13392  07DF                     _CC1Write:	
 13393                           
 13394                           ;incstack = 0
 13395                           ; Regs used in _CC1Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13396                           ;CC1Write@addr stored from wreg
 13397  07DF  00FA               	movwf	CC1Write@addr
 13398                           
 13399                           ;CC1.c: 140: unsigned char cc1Addr;
 13400                           ;CC1.c: 143: LATAbits.LATA5=0;
 13401  07E0  0022               	movlb	2	; select bank2
 13402  07E1  128C               	bcf	12,5	;volatile
 13403                           
 13404                           ;CC1.c: 146: cc1Addr=((addr&0b00111111)|0b01000000);
 13405  07E2  087A               	movf	CC1Write@addr,w
 13406  07E3  393F               	andlw	63
 13407  07E4  3840               	iorlw	64
 13408  07E5  00F9               	movwf	??_CC1Write
 13409  07E6  0879               	movf	??_CC1Write,w
 13410  07E7  00FB               	movwf	CC1Write@cc1Addr
 13411                           
 13412                           ;CC1.c: 147: SPIWrite((&(cc1Addr)),1);
 13413  07E8  307B               	movlw	low CC1Write@cc1Addr
 13414  07E9  00F1               	movwf	SPIWrite@srcPtr
 13415  07EA  3000               	movlw	high CC1Write@cc1Addr
 13416  07EB  00F2               	movwf	SPIWrite@srcPtr+1
 13417  07EC  01F3               	clrf	SPIWrite@len
 13418  07ED  0AF3               	incf	SPIWrite@len,f
 13419  07EE  319E  2674  3187   	fcall	_SPIWrite
 13420                           
 13421                           ;CC1.c: 150: SPIWrite(src,len);
 13422  07F1  0877               	movf	CC1Write@src,w
 13423  07F2  00F1               	movwf	SPIWrite@srcPtr
 13424  07F3  3001               	movlw	1
 13425  07F4  00F2               	movwf	SPIWrite@srcPtr+1
 13426  07F5  0878               	movf	CC1Write@len,w
 13427  07F6  00F9               	movwf	??_CC1Write
 13428  07F7  0879               	movf	??_CC1Write,w
 13429  07F8  00F3               	movwf	SPIWrite@len
 13430  07F9  319E  2674         	fcall	_SPIWrite
 13431                           
 13432                           ;CC1.c: 153: LATAbits.LATA5=1;
 13433  07FB  0022               	movlb	2	; select bank2
 13434  07FC  168C               	bsf	12,5	;volatile
 13435  07FD  0008               	return
 13436  07FE                     __end_of_CC1Write:	
 13437                           
 13438                           	psect	text64
 13439  1D9D                     __ptext64:	
 13440 ;; *************** function _CC1Strobe *****************
 13441 ;; Defined at:
 13442 ;;		line 105 in file "CC1.c"
 13443 ;; Parameters:    Size  Location     Type
 13444 ;;  e_stb           1    wreg     enum E1838
 13445 ;; Auto vars:     Size  Location     Type
 13446 ;;  e_stb           1    8[COMMON] enum E1838
 13447 ;;  cc1Stb          1    9[COMMON] unsigned char 
 13448 ;; Return value:  Size  Location     Type
 13449 ;;		None               void
 13450 ;; Registers used:
 13451 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13452 ;; Tracked objects:
 13453 ;;		On entry : 0/0
 13454 ;;		On exit  : 0/0
 13455 ;;		Unchanged: 0/0
 13456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13458 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13459 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13460 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13461 ;;Total ram usage:        3 bytes
 13462 ;; Hardware stack levels used:    1
 13463 ;; Hardware stack levels required when called:    3
 13464 ;; This function calls:
 13465 ;;		_SPIWrite
 13466 ;; This function is called by:
 13467 ;;		_CC1Init
 13468 ;;		_RTXInit
 13469 ;;		_RTXTick
 13470 ;;		_RTXSup
 13471 ;;		_RTXSndPkt
 13472 ;; This function uses a non-reentrant model
 13473 ;;
 13474                           
 13475                           
 13476                           ;psect for function _CC1Strobe
 13477  1D9D                     _CC1Strobe:	
 13478                           
 13479                           ;incstack = 0
 13480                           ; Regs used in _CC1Strobe: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13481                           ;CC1Strobe@e_stb stored from wreg
 13482  1D9D  00F8               	movwf	CC1Strobe@e_stb
 13483                           
 13484                           ;CC1.c: 107: unsigned char cc1Stb;
 13485                           ;CC1.c: 110: LATAbits.LATA5=0;
 13486  1D9E  0022               	movlb	2	; select bank2
 13487  1D9F  128C               	bcf	12,5	;volatile
 13488                           
 13489                           ;CC1.c: 113: cc1Stb=((e_stb&0b00111111)|0b10000000);
 13490  1DA0  0878               	movf	CC1Strobe@e_stb,w
 13491  1DA1  393F               	andlw	63
 13492  1DA2  3880               	iorlw	128
 13493  1DA3  00F7               	movwf	??_CC1Strobe
 13494  1DA4  0877               	movf	??_CC1Strobe,w
 13495  1DA5  00F9               	movwf	CC1Strobe@cc1Stb
 13496                           
 13497                           ;CC1.c: 114: SPIWrite((&(cc1Stb)),1);
 13498  1DA6  3079               	movlw	low CC1Strobe@cc1Stb
 13499  1DA7  00F1               	movwf	SPIWrite@srcPtr
 13500  1DA8  3000               	movlw	high CC1Strobe@cc1Stb
 13501  1DA9  00F2               	movwf	SPIWrite@srcPtr+1
 13502  1DAA  01F3               	clrf	SPIWrite@len
 13503  1DAB  0AF3               	incf	SPIWrite@len,f
 13504  1DAC  319E  2674         	fcall	_SPIWrite
 13505                           
 13506                           ;CC1.c: 117: LATAbits.LATA5=1;
 13507  1DAE  0022               	movlb	2	; select bank2
 13508  1DAF  168C               	bsf	12,5	;volatile
 13509  1DB0  0008               	return
 13510  1DB1                     __end_of_CC1Strobe:	
 13511                           
 13512                           	psect	text65
 13513  1E74                     __ptext65:	
 13514 ;; *************** function _SPIWrite *****************
 13515 ;; Defined at:
 13516 ;;		line 39 in file "SPI.c"
 13517 ;; Parameters:    Size  Location     Type
 13518 ;;  srcPtr          2    1[COMMON] PTR unsigned char 
 13519 ;;		 -> pktTx(11), CC1Write@cc1Addr(1), CC1Read@cc1Addr(1), CC1Strobe@cc1Stb(1), 
 13520 ;;		 -> cc1PaTable(8), cc1InitVal(47), 
 13521 ;;  len             1    3[COMMON] unsigned char 
 13522 ;; Auto vars:     Size  Location     Type
 13523 ;;  i               1    6[COMMON] unsigned char 
 13524 ;; Return value:  Size  Location     Type
 13525 ;;		None               void
 13526 ;; Registers used:
 13527 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13528 ;; Tracked objects:
 13529 ;;		On entry : 0/0
 13530 ;;		On exit  : 0/0
 13531 ;;		Unchanged: 0/0
 13532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13533 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13534 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13535 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13536 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13537 ;;Total ram usage:        6 bytes
 13538 ;; Hardware stack levels used:    1
 13539 ;; Hardware stack levels required when called:    2
 13540 ;; This function calls:
 13541 ;;		Nothing
 13542 ;; This function is called by:
 13543 ;;		_CC1Strobe
 13544 ;;		_CC1Read
 13545 ;;		_CC1Write
 13546 ;; This function uses a non-reentrant model
 13547 ;;
 13548                           
 13549                           
 13550                           ;psect for function _SPIWrite
 13551  1E74                     _SPIWrite:	
 13552                           
 13553                           ;SPI.c: 41: unsigned char i;
 13554                           ;SPI.c: 43: for(i=0;i<len;i++)
 13555                           
 13556                           ;incstack = 0
 13557                           ; Regs used in _SPIWrite: [wreg+fsr1l+fsr1h+status,2+status,0]
 13558  1E74  01F6               	clrf	SPIWrite@i
 13559  1E75                     l5408:	
 13560  1E75  0873               	movf	SPIWrite@len,w
 13561  1E76  0276               	subwf	SPIWrite@i,w
 13562  1E77  1803               	btfsc	3,0
 13563  1E78  0008               	return
 13564                           
 13565                           ;SPI.c: 44: {
 13566                           ;SPI.c: 45: PIR1bits.SSPIF=0;
 13567  1E79  0020               	movlb	0	; select bank0
 13568  1E7A  1191               	bcf	17,3	;volatile
 13569                           
 13570                           ;SPI.c: 46: SSPBUF=(*(srcPtr+i));
 13571  1E7B  0876               	movf	SPIWrite@i,w
 13572  1E7C  00F4               	movwf	??_SPIWrite
 13573  1E7D  01F5               	clrf	??_SPIWrite+1
 13574  1E7E  0874               	movf	??_SPIWrite,w
 13575  1E7F  0771               	addwf	SPIWrite@srcPtr,w
 13576  1E80  0086               	movwf	6
 13577  1E81  0875               	movf	??_SPIWrite+1,w
 13578  1E82  3D72               	addwfc	SPIWrite@srcPtr+1,w
 13579  1E83  0087               	movwf	7
 13580  1E84  0801               	movf	1,w
 13581  1E85  0024               	movlb	4	; select bank4
 13582  1E86  0091               	movwf	17	;volatile
 13583  1E87                     l79:	
 13584                           ;SPI.c: 47: while(!(PIR1bits.SSPIF))
 13585                           
 13586  1E87  0020               	movlb	0	; select bank0
 13587  1E88  1991               	btfsc	17,3	;volatile
 13588  1E89  2E8C               	goto	l5406
 13589                           
 13590                           ;SPI.c: 48: __nop();
 13591  1E8A  0000               	nop
 13592  1E8B  2E87               	goto	l79
 13593  1E8C                     l5406:	
 13594  1E8C  3001               	movlw	1
 13595  1E8D  00F4               	movwf	??_SPIWrite
 13596  1E8E  0874               	movf	??_SPIWrite,w
 13597  1E8F  07F6               	addwf	SPIWrite@i,f
 13598  1E90  2E75               	goto	l5408
 13599  1E91                     __end_of_SPIWrite:	
 13600                           
 13601                           	psect	intentry
 13602  0004                     __pintentry:	
 13603 ;; *************** function _INTIsr *****************
 13604 ;; Defined at:
 13605 ;;		line 37 in file "Base.c"
 13606 ;; Parameters:    Size  Location     Type
 13607 ;;		None
 13608 ;; Auto vars:     Size  Location     Type
 13609 ;;		None
 13610 ;; Return value:  Size  Location     Type
 13611 ;;		None               void
 13612 ;; Registers used:
 13613 ;;		wreg, status,2, status,0, pclath, cstack
 13614 ;; Tracked objects:
 13615 ;;		On entry : 0/0
 13616 ;;		On exit  : 0/0
 13617 ;;		Unchanged: 0/0
 13618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13620 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13621 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13622 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13623 ;;Total ram usage:        1 bytes
 13624 ;; Hardware stack levels used:    1
 13625 ;; Hardware stack levels required when called:    1
 13626 ;; This function calls:
 13627 ;;		_SYSInt
 13628 ;; This function is called by:
 13629 ;;		Interrupt level 1
 13630 ;; This function uses a non-reentrant model
 13631 ;;
 13632                           
 13633  0004                     _INTIsr:	
 13634                           
 13635                           ;incstack = 0
 13636                           ; Regs used in _INTIsr: [wreg+status,2+status,0+pclath+cstack]
 13637  0004  3180               	pagesel	$
 13638  0005  0020               	movlb	0	; select bank0
 13639  0006  087F               	movf	127,w
 13640  0007  00F0               	movwf	??_INTIsr
 13641                           
 13642                           ;Base.c: 40: if(INTCONbits.T0IF==1)
 13643  0008  1D0B               	btfss	11,2	;volatile
 13644  0009  280D               	goto	i1l719
 13645                           
 13646                           ;Base.c: 41: {
 13647                           ;Base.c: 43: INTCONbits.T0IF=0;
 13648  000A  110B               	bcf	11,2	;volatile
 13649                           
 13650                           ;Base.c: 46: SYSInt();
 13651  000B  319C  24D9         	fcall	_SYSInt
 13652  000D                     i1l719:	
 13653  000D  0870               	movf	??_INTIsr,w
 13654  000E  0020               	movlb	0	; select bank0
 13655  000F  00FF               	movwf	127
 13656  0010  0009               	retfie
 13657  0011                     __end_of_INTIsr:	
 13658                           
 13659                           	psect	text67
 13660  1CD9                     __ptext67:	
 13661 ;; *************** function _SYSInt *****************
 13662 ;; Defined at:
 13663 ;;		line 32 in file "SYS.c"
 13664 ;; Parameters:    Size  Location     Type
 13665 ;;		None
 13666 ;; Auto vars:     Size  Location     Type
 13667 ;;		None
 13668 ;; Return value:  Size  Location     Type
 13669 ;;		None               void
 13670 ;; Registers used:
 13671 ;;		wreg
 13672 ;; Tracked objects:
 13673 ;;		On entry : 0/0
 13674 ;;		On exit  : 0/0
 13675 ;;		Unchanged: 0/0
 13676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13677 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13678 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13680 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13681 ;;Total ram usage:        0 bytes
 13682 ;; Hardware stack levels used:    1
 13683 ;; This function calls:
 13684 ;;		Nothing
 13685 ;; This function is called by:
 13686 ;;		_INTIsr
 13687 ;; This function uses a non-reentrant model
 13688 ;;
 13689                           
 13690                           
 13691                           ;psect for function _SYSInt
 13692  1CD9                     _SYSInt:	
 13693                           
 13694                           ;SYS.c: 35: u_SYS_STA.TICK=1;
 13695                           
 13696                           ;incstack = 0
 13697                           ; Regs used in _SYSInt: [wreg]
 13698  1CD9  0022               	movlb	2	; select bank2
 13699  1CDA  143E               	bsf	_u_SYS_STA^(0+256),0
 13700                           
 13701                           ;SYS.c: 38: TMR0=255-156;
 13702  1CDB  3063               	movlw	99
 13703  1CDC  0020               	movlb	0	; select bank0
 13704  1CDD  0095               	movwf	21	;volatile
 13705  1CDE  0008               	return
 13706  1CDF                     __end_of_SYSInt:	
 13707  007E                     btemp	set	126	;btemp
 13708  007E                     wtemp	set	126
 13709  007E                     wtemp0	set	126
 13710  0080                     wtemp1	set	128
 13711  0082                     wtemp2	set	130
 13712  0084                     wtemp3	set	132
 13713  0086                     wtemp4	set	134
 13714  0088                     wtemp5	set	136
 13715  007F                     wtemp6	set	127
 13716  007E                     ttemp	set	126
 13717  007E                     ttemp0	set	126
 13718  0081                     ttemp1	set	129
 13719  0084                     ttemp2	set	132
 13720  0087                     ttemp3	set	135
 13721  007F                     ttemp4	set	127
 13722  007E                     ltemp	set	126
 13723  007E                     ltemp0	set	126
 13724  0082                     ltemp1	set	130
 13725  0086                     ltemp2	set	134
 13726  0080                     ltemp3	set	128
 13727                           
 13728                           	psect	text18_split_1
 13729  0D91                     l6314:	
 13730                           
 13731                           ;RTX.c: 354: else if(val==UPD_DPY_POWER)
 13732  0D91  085F               	movf	RTXUpdateDisplay@val^(0+128),w
 13733  0D92  1D03               	btfss	3,2
 13734  0D93  2FE4               	goto	l6420
 13735                           
 13736                           ;RTX.c: 355: {
 13737                           ;RTX.c: 357: diffPower=gen_power-con_power;
 13738  0D94  0022               	movlb	2	; select bank2
 13739  0D95  0832               	movf	_gen_power^(0+256),w
 13740  0D96  0020               	movlb	0	; select bank0
 13741  0D97  00A0               	movwf	___ftadd@f1
 13742  0D98  0022               	movlb	2	; select bank2
 13743  0D99  0833               	movf	(_gen_power+1)^(0+256),w
 13744  0D9A  0020               	movlb	0	; select bank0
 13745  0D9B  00A1               	movwf	___ftadd@f1+1
 13746  0D9C  0022               	movlb	2	; select bank2
 13747  0D9D  0834               	movf	(_gen_power+2)^(0+256),w
 13748  0D9E  0020               	movlb	0	; select bank0
 13749  0D9F  00A2               	movwf	___ftadd@f1+2
 13750  0DA0  0022               	movlb	2	; select bank2
 13751  0DA1  082C               	movf	_con_power^(0+256),w
 13752  0DA2  00F1               	movwf	___ftneg@f1
 13753  0DA3  082D               	movf	(_con_power+1)^(0+256),w
 13754  0DA4  00F2               	movwf	___ftneg@f1+1
 13755  0DA5  082E               	movf	(_con_power+2)^(0+256),w
 13756  0DA6  00F3               	movwf	___ftneg@f1+2
 13757  0DA7  319C  24F1  318D   	fcall	___ftneg
 13758  0DAA  0871               	movf	?___ftneg,w
 13759  0DAB  0020               	movlb	0	; select bank0
 13760  0DAC  00A3               	movwf	___ftadd@f2
 13761  0DAD  0872               	movf	?___ftneg+1,w
 13762  0DAE  00A4               	movwf	___ftadd@f2+1
 13763  0DAF  0873               	movf	?___ftneg+2,w
 13764  0DB0  00A5               	movwf	___ftadd@f2+2
 13765  0DB1  3188  20FC  318D   	fcall	___ftadd
 13766  0DB4  0020               	movlb	0	; select bank0
 13767  0DB5  0820               	movf	?___ftadd,w
 13768  0DB6  0021               	movlb	1	; select bank1
 13769  0DB7  00BB               	movwf	RTXUpdateDisplay@diffPower^(0+128)
 13770  0DB8  0020               	movlb	0	; select bank0
 13771  0DB9  0821               	movf	?___ftadd+1,w
 13772  0DBA  0021               	movlb	1	; select bank1
 13773  0DBB  00BC               	movwf	(RTXUpdateDisplay@diffPower+1)^(0+128)
 13774  0DBC  0020               	movlb	0	; select bank0
 13775  0DBD  0822               	movf	?___ftadd+2,w
 13776  0DBE  0021               	movlb	1	; select bank1
 13777  0DBF  00BD               	movwf	(RTXUpdateDisplay@diffPower+2)^(0+128)
 13778                           
 13779                           ;RTX.c: 359: iR=0;
 13780  0DC0  01E0               	clrf	RTXUpdateDisplay@iR^(0+128)
 13781                           
 13782                           ;RTX.c: 360: strRow1[iR++]='S';
 13783  0DC1  3053               	movlw	83
 13784  0DC2  0020               	movlb	0	; select bank0
 13785  0DC3  00E2               	movwf	??_RTXUpdateDisplay
 13786  0DC4  0021               	movlb	1	; select bank1
 13787  0DC5  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
 13788  0DC6  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
 13789  0DC7  0086               	movwf	6
 13790  0DC8  0187               	clrf	7
 13791  0DC9  0020               	movlb	0	; select bank0
 13792  0DCA  0862               	movf	??_RTXUpdateDisplay,w
 13793  0DCB  0081               	movwf	1
 13794  0DCC  3001               	movlw	1
 13795  0DCD  00E2               	movwf	??_RTXUpdateDisplay
 13796  0DCE  0862               	movf	??_RTXUpdateDisplay,w
 13797  0DCF  0021               	movlb	1	; select bank1
 13798  0DD0  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
 13799                           
 13800                           ;RTX.c: 361: strRow1[iR++]='t';
 13801  0DD1  3074               	movlw	116
 13802  0DD2  0020               	movlb	0	; select bank0
 13803  0DD3  00E2               	movwf	??_RTXUpdateDisplay
 13804  0DD4  0021               	movlb	1	; select bank1
 13805  0DD5  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
 13806  0DD6  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
 13807  0DD7  0086               	movwf	6
 13808  0DD8  0187               	clrf	7
 13809  0DD9  0020               	movlb	0	; select bank0
 13810  0DDA  0862               	movf	??_RTXUpdateDisplay,w
 13811  0DDB  0081               	movwf	1
 13812  0DDC  3001               	movlw	1
 13813  0DDD  00E2               	movwf	??_RTXUpdateDisplay
 13814  0DDE  0862               	movf	??_RTXUpdateDisplay,w
 13815  0DDF  0021               	movlb	1	; select bank1
 13816  0DE0  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
 13817                           
 13818                           ;RTX.c: 362: strRow1[iR++]='a';
 13819  0DE1  3061               	movlw	97
 13820  0DE2  0020               	movlb	0	; select bank0
 13821  0DE3  00E2               	movwf	??_RTXUpdateDisplay
 13822  0DE4  0021               	movlb	1	; select bank1
 13823  0DE5  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
 13824  0DE6  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
 13825  0DE7  0086               	movwf	6
 13826  0DE8  0187               	clrf	7
 13827  0DE9  0020               	movlb	0	; select bank0
 13828  0DEA  0862               	movf	??_RTXUpdateDisplay,w
 13829  0DEB  0081               	movwf	1
 13830  0DEC  3001               	movlw	1
 13831  0DED  00E2               	movwf	??_RTXUpdateDisplay
 13832  0DEE  0862               	movf	??_RTXUpdateDisplay,w
 13833  0DEF  0021               	movlb	1	; select bank1
 13834  0DF0  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
 13835                           
 13836                           ;RTX.c: 363: strRow1[iR++]='i';
 13837  0DF1  3069               	movlw	105
 13838  0DF2  0020               	movlb	0	; select bank0
 13839  0DF3  00E2               	movwf	??_RTXUpdateDisplay
 13840  0DF4  0021               	movlb	1	; select bank1
 13841  0DF5  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
 13842  0DF6  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
 13843  0DF7  0086               	movwf	6
 13844  0DF8  0187               	clrf	7
 13845  0DF9  0020               	movlb	0	; select bank0
 13846  0DFA  0862               	movf	??_RTXUpdateDisplay,w
 13847  0DFB  0081               	movwf	1
 13848  0DFC  3001               	movlw	1
 13849  0DFD  00E2               	movwf	??_RTXUpdateDisplay
 13850  0DFE  0862               	movf	??_RTXUpdateDisplay,w
 13851  0DFF  0021               	movlb	1	; select bank1
 13852  0E00  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
 13853                           
 13854                           ;RTX.c: 364: strRow1[iR++]=' ';
 13855  0E01  3020               	movlw	32
 13856  0E02  0020               	movlb	0	; select bank0
 13857  0E03  00E2               	movwf	??_RTXUpdateDisplay
 13858  0E04  0021               	movlb	1	; select bank1
 13859  0E05  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
 13860  0E06  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
 13861  0E07  0086               	movwf	6
 13862  0E08  0187               	clrf	7
 13863  0E09  0020               	movlb	0	; select bank0
 13864  0E0A  0862               	movf	??_RTXUpdateDisplay,w
 13865  0E0B  0081               	movwf	1
 13866  0E0C  3001               	movlw	1
 13867  0E0D  00E2               	movwf	??_RTXUpdateDisplay
 13868  0E0E  0862               	movf	??_RTXUpdateDisplay,w
 13869  0E0F  0021               	movlb	1	; select bank1
 13870  0E10  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
 13871                           
 13872                           ;RTX.c: 365: if(diffPower>0)
 13873  0E11  3000               	movlw	0
 13874  0E12  00F1               	movwf	___ftge@ff1
 13875  0E13  3000               	movlw	0
 13876  0E14  00F2               	movwf	___ftge@ff1+1
 13877  0E15  3000               	movlw	0
 13878  0E16  00F3               	movwf	___ftge@ff1+2
 13879  0E17  083B               	movf	RTXUpdateDisplay@diffPower^(0+128),w
 13880  0E18  00F4               	movwf	___ftge@ff2
 13881  0E19  083C               	movf	(RTXUpdateDisplay@diffPower+1)^(0+128),w
 13882  0E1A  00F5               	movwf	___ftge@ff2+1
 13883  0E1B  083D               	movf	(RTXUpdateDisplay@diffPower+2)^(0+128),w
 13884  0E1C  00F6               	movwf	___ftge@ff2+2
 13885  0E1D  3192  220E  318D   	fcall	___ftge
 13886  0E20  1803               	btfsc	3,0
 13887  0E21  2EB3               	goto	l6368
 13888                           
 13889                           ;RTX.c: 366: {
 13890                           ;RTX.c: 367: strRow1[iR++]='g';
 13891  0E22  3067               	movlw	103
 13892  0E23  0020               	movlb	0	; select bank0
 13893  0E24  00E2               	movwf	??_RTXUpdateDisplay
 13894  0E25  0021               	movlb	1	; select bank1
 13895  0E26  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
 13896  0E27  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
 13897  0E28  0086               	movwf	6
 13898  0E29  0187               	clrf	7
 13899  0E2A  0020               	movlb	0	; select bank0
 13900  0E2B  0862               	movf	??_RTXUpdateDisplay,w
 13901  0E2C  0081               	movwf	1
 13902  0E2D  3001               	movlw	1
 13903  0E2E  00E2               	movwf	??_RTXUpdateDisplay
 13904  0E2F  0862               	movf	??_RTXUpdateDisplay,w
 13905  0E30  0021               	movlb	1	; select bank1
 13906  0E31  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
 13907                           
 13908                           ;RTX.c: 368: strRow1[iR++]='e';
 13909  0E32  3065               	movlw	101
 13910  0E33  0020               	movlb	0	; select bank0
 13911  0E34  00E2               	movwf	??_RTXUpdateDisplay
 13912  0E35  0021               	movlb	1	; select bank1
 13913  0E36  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
 13914  0E37  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
 13915  0E38  0086               	movwf	6
 13916  0E39  0187               	clrf	7
 13917  0E3A  0020               	movlb	0	; select bank0
 13918  0E3B  0862               	movf	??_RTXUpdateDisplay,w
 13919  0E3C  0081               	movwf	1
 13920  0E3D  3001               	movlw	1
 13921  0E3E  00E2               	movwf	??_RTXUpdateDisplay
 13922  0E3F  0862               	movf	??_RTXUpdateDisplay,w
 13923  0E40  0021               	movlb	1	; select bank1
 13924  0E41  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
 13925                           
 13926                           ;RTX.c: 369: strRow1[iR++]='n';
 13927  0E42  306E               	movlw	110
 13928  0E43  0020               	movlb	0	; select bank0
 13929  0E44  00E2               	movwf	??_RTXUpdateDisplay
 13930  0E45  0021               	movlb	1	; select bank1
 13931  0E46  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
 13932  0E47  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
 13933  0E48  0086               	movwf	6
 13934  0E49  0187               	clrf	7
 13935  0E4A  0020               	movlb	0	; select bank0
 13936  0E4B  0862               	movf	??_RTXUpdateDisplay,w
 13937  0E4C  0081               	movwf	1
 13938  0E4D  3001               	movlw	1
 13939  0E4E  00E2               	movwf	??_RTXUpdateDisplay
 13940  0E4F  0862               	movf	??_RTXUpdateDisplay,w
 13941  0E50  0021               	movlb	1	; select bank1
 13942  0E51  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
 13943                           
 13944                           ;RTX.c: 370: strRow1[iR++]='e';
 13945  0E52  3065               	movlw	101
 13946  0E53  0020               	movlb	0	; select bank0
 13947  0E54  00E2               	movwf	??_RTXUpdateDisplay
 13948  0E55  0021               	movlb	1	; select bank1
 13949  0E56  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
 13950  0E57  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
 13951  0E58  0086               	movwf	6
 13952  0E59  0187               	clrf	7
 13953  0E5A  0020               	movlb	0	; select bank0
 13954  0E5B  0862               	movf	??_RTXUpdateDisplay,w
 13955  0E5C  0081               	movwf	1
 13956  0E5D  3001               	movlw	1
 13957  0E5E  00E2               	movwf	??_RTXUpdateDisplay
 13958  0E5F  0862               	movf	??_RTXUpdateDisplay,w
 13959  0E60  0021               	movlb	1	; select bank1
 13960  0E61  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
 13961                           
 13962                           ;RTX.c: 371: strRow1[iR++]='r';
 13963  0E62  3072               	movlw	114
 13964  0E63  0020               	movlb	0	; select bank0
 13965  0E64  00E2               	movwf	??_RTXUpdateDisplay
 13966  0E65  0021               	movlb	1	; select bank1
 13967  0E66  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
 13968  0E67  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
 13969  0E68  0086               	movwf	6
 13970  0E69  0187               	clrf	7
 13971  0E6A  0020               	movlb	0	; select bank0
 13972  0E6B  0862               	movf	??_RTXUpdateDisplay,w
 13973  0E6C  0081               	movwf	1
 13974  0E6D  3001               	movlw	1
 13975  0E6E  00E2               	movwf	??_RTXUpdateDisplay
 13976  0E6F  0862               	movf	??_RTXUpdateDisplay,w
 13977  0E70  0021               	movlb	1	; select bank1
 13978  0E71  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
 13979                           
 13980                           ;RTX.c: 372: strRow1[iR++]='a';
 13981  0E72  3061               	movlw	97
 13982  0E73  0020               	movlb	0	; select bank0
 13983  0E74  00E2               	movwf	??_RTXUpdateDisplay
 13984  0E75  0021               	movlb	1	; select bank1
 13985  0E76  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
 13986  0E77  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
 13987  0E78  0086               	movwf	6
 13988  0E79  0187               	clrf	7
 13989  0E7A  0020               	movlb	0	; select bank0
 13990  0E7B  0862               	movf	??_RTXUpdateDisplay,w
 13991  0E7C  0081               	movwf	1
 13992  0E7D  3001               	movlw	1
 13993  0E7E  00E2               	movwf	??_RTXUpdateDisplay
 13994  0E7F  0862               	movf	??_RTXUpdateDisplay,w
 13995  0E80  0021               	movlb	1	; select bank1
 13996  0E81  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
 13997                           
 13998                           ;RTX.c: 373: strRow1[iR++]='n';
 13999  0E82  306E               	movlw	110
 14000  0E83  0020               	movlb	0	; select bank0
 14001  0E84  00E2               	movwf	??_RTXUpdateDisplay
 14002  0E85  0021               	movlb	1	; select bank1
 14003  0E86  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
 14004  0E87  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
 14005  0E88  0086               	movwf	6
 14006  0E89  0187               	clrf	7
 14007  0E8A  0020               	movlb	0	; select bank0
 14008  0E8B  0862               	movf	??_RTXUpdateDisplay,w
 14009  0E8C  0081               	movwf	1
 14010  0E8D  3001               	movlw	1
 14011  0E8E  00E2               	movwf	??_RTXUpdateDisplay
 14012  0E8F  0862               	movf	??_RTXUpdateDisplay,w
 14013  0E90  0021               	movlb	1	; select bank1
 14014  0E91  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
 14015                           
 14016                           ;RTX.c: 374: strRow1[iR++]='d';
 14017  0E92  3064               	movlw	100
 14018  0E93  0020               	movlb	0	; select bank0
 14019  0E94  00E2               	movwf	??_RTXUpdateDisplay
 14020  0E95  0021               	movlb	1	; select bank1
 14021  0E96  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
 14022  0E97  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
 14023  0E98  0086               	movwf	6
 14024  0E99  0187               	clrf	7
 14025  0E9A  0020               	movlb	0	; select bank0
 14026  0E9B  0862               	movf	??_RTXUpdateDisplay,w
 14027  0E9C  0081               	movwf	1
 14028  0E9D  3001               	movlw	1
 14029  0E9E  00E2               	movwf	??_RTXUpdateDisplay
 14030  0E9F  0862               	movf	??_RTXUpdateDisplay,w
 14031  0EA0  0021               	movlb	1	; select bank1
 14032  0EA1  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
 14033                           
 14034                           ;RTX.c: 375: strRow1[iR++]='o';
 14035  0EA2  306F               	movlw	111
 14036  0EA3  0020               	movlb	0	; select bank0
 14037  0EA4  00E2               	movwf	??_RTXUpdateDisplay
 14038  0EA5  0021               	movlb	1	; select bank1
 14039  0EA6  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
 14040  0EA7  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
 14041  0EA8  0086               	movwf	6
 14042  0EA9  0187               	clrf	7
 14043  0EAA  0020               	movlb	0	; select bank0
 14044  0EAB  0862               	movf	??_RTXUpdateDisplay,w
 14045  0EAC  0081               	movwf	1
 14046  0EAD  3001               	movlw	1
 14047  0EAE  00E2               	movwf	??_RTXUpdateDisplay
 14048  0EAF  0862               	movf	??_RTXUpdateDisplay,w
 14049  0EB0  0021               	movlb	1	; select bank1
 14050  0EB1  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
 14051                           
 14052                           ;RTX.c: 376: }
 14053  0EB2  2F63               	goto	l6398
 14054  0EB3                     l6368:	
 14055                           
 14056                           ;RTX.c: 377: else
 14057                           ;RTX.c: 378: {
 14058                           ;RTX.c: 379: strRow1[iR++]='c';
 14059  0EB3  3063               	movlw	99
 14060  0EB4  0020               	movlb	0	; select bank0
 14061  0EB5  00E2               	movwf	??_RTXUpdateDisplay
 14062  0EB6  0021               	movlb	1	; select bank1
 14063  0EB7  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
 14064  0EB8  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
 14065  0EB9  0086               	movwf	6
 14066  0EBA  0187               	clrf	7
 14067  0EBB  0020               	movlb	0	; select bank0
 14068  0EBC  0862               	movf	??_RTXUpdateDisplay,w
 14069  0EBD  0081               	movwf	1
 14070  0EBE  3001               	movlw	1
 14071  0EBF  00E2               	movwf	??_RTXUpdateDisplay
 14072  0EC0  0862               	movf	??_RTXUpdateDisplay,w
 14073  0EC1  0021               	movlb	1	; select bank1
 14074  0EC2  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
 14075                           
 14076                           ;RTX.c: 380: strRow1[iR++]='o';
 14077  0EC3  306F               	movlw	111
 14078  0EC4  0020               	movlb	0	; select bank0
 14079  0EC5  00E2               	movwf	??_RTXUpdateDisplay
 14080  0EC6  0021               	movlb	1	; select bank1
 14081  0EC7  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
 14082  0EC8  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
 14083  0EC9  0086               	movwf	6
 14084  0ECA  0187               	clrf	7
 14085  0ECB  0020               	movlb	0	; select bank0
 14086  0ECC  0862               	movf	??_RTXUpdateDisplay,w
 14087  0ECD  0081               	movwf	1
 14088  0ECE  3001               	movlw	1
 14089  0ECF  00E2               	movwf	??_RTXUpdateDisplay
 14090  0ED0  0862               	movf	??_RTXUpdateDisplay,w
 14091  0ED1  0021               	movlb	1	; select bank1
 14092  0ED2  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
 14093                           
 14094                           ;RTX.c: 381: strRow1[iR++]='n';
 14095  0ED3  306E               	movlw	110
 14096  0ED4  0020               	movlb	0	; select bank0
 14097  0ED5  00E2               	movwf	??_RTXUpdateDisplay
 14098  0ED6  0021               	movlb	1	; select bank1
 14099  0ED7  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
 14100  0ED8  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
 14101  0ED9  0086               	movwf	6
 14102  0EDA  0187               	clrf	7
 14103  0EDB  0020               	movlb	0	; select bank0
 14104  0EDC  0862               	movf	??_RTXUpdateDisplay,w
 14105  0EDD  0081               	movwf	1
 14106  0EDE  3001               	movlw	1
 14107  0EDF  00E2               	movwf	??_RTXUpdateDisplay
 14108  0EE0  0862               	movf	??_RTXUpdateDisplay,w
 14109  0EE1  0021               	movlb	1	; select bank1
 14110  0EE2  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
 14111                           
 14112                           ;RTX.c: 382: strRow1[iR++]='s';
 14113  0EE3  3073               	movlw	115
 14114  0EE4  0020               	movlb	0	; select bank0
 14115  0EE5  00E2               	movwf	??_RTXUpdateDisplay
 14116  0EE6  0021               	movlb	1	; select bank1
 14117  0EE7  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
 14118  0EE8  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
 14119  0EE9  0086               	movwf	6
 14120  0EEA  0187               	clrf	7
 14121  0EEB  0020               	movlb	0	; select bank0
 14122  0EEC  0862               	movf	??_RTXUpdateDisplay,w
 14123  0EED  0081               	movwf	1
 14124  0EEE  3001               	movlw	1
 14125  0EEF  00E2               	movwf	??_RTXUpdateDisplay
 14126  0EF0  0862               	movf	??_RTXUpdateDisplay,w
 14127  0EF1  0021               	movlb	1	; select bank1
 14128  0EF2  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
 14129                           
 14130                           ;RTX.c: 383: strRow1[iR++]='u';
 14131  0EF3  3075               	movlw	117
 14132  0EF4  0020               	movlb	0	; select bank0
 14133  0EF5  00E2               	movwf	??_RTXUpdateDisplay
 14134  0EF6  0021               	movlb	1	; select bank1
 14135  0EF7  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
 14136  0EF8  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
 14137  0EF9  0086               	movwf	6
 14138  0EFA  0187               	clrf	7
 14139  0EFB  0020               	movlb	0	; select bank0
 14140  0EFC  0862               	movf	??_RTXUpdateDisplay,w
 14141  0EFD  0081               	movwf	1
 14142  0EFE  3001               	movlw	1
 14143  0EFF  00E2               	movwf	??_RTXUpdateDisplay
 14144  0F00  0862               	movf	??_RTXUpdateDisplay,w
 14145  0F01  0021               	movlb	1	; select bank1
 14146  0F02  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
 14147                           
 14148                           ;RTX.c: 384: strRow1[iR++]='m';
 14149  0F03  306D               	movlw	109
 14150  0F04  0020               	movlb	0	; select bank0
 14151  0F05  00E2               	movwf	??_RTXUpdateDisplay
 14152  0F06  0021               	movlb	1	; select bank1
 14153  0F07  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
 14154  0F08  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
 14155  0F09  0086               	movwf	6
 14156  0F0A  0187               	clrf	7
 14157  0F0B  0020               	movlb	0	; select bank0
 14158  0F0C  0862               	movf	??_RTXUpdateDisplay,w
 14159  0F0D  0081               	movwf	1
 14160  0F0E  3001               	movlw	1
 14161  0F0F  00E2               	movwf	??_RTXUpdateDisplay
 14162  0F10  0862               	movf	??_RTXUpdateDisplay,w
 14163  0F11  0021               	movlb	1	; select bank1
 14164  0F12  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
 14165                           
 14166                           ;RTX.c: 385: strRow1[iR++]='a';
 14167  0F13  3061               	movlw	97
 14168  0F14  0020               	movlb	0	; select bank0
 14169  0F15  00E2               	movwf	??_RTXUpdateDisplay
 14170  0F16  0021               	movlb	1	; select bank1
 14171  0F17  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
 14172  0F18  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
 14173  0F19  0086               	movwf	6
 14174  0F1A  0187               	clrf	7
 14175  0F1B  0020               	movlb	0	; select bank0
 14176  0F1C  0862               	movf	??_RTXUpdateDisplay,w
 14177  0F1D  0081               	movwf	1
 14178  0F1E  3001               	movlw	1
 14179  0F1F  00E2               	movwf	??_RTXUpdateDisplay
 14180  0F20  0862               	movf	??_RTXUpdateDisplay,w
 14181  0F21  0021               	movlb	1	; select bank1
 14182  0F22  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
 14183                           
 14184                           ;RTX.c: 386: strRow1[iR++]='n';
 14185  0F23  306E               	movlw	110
 14186  0F24  0020               	movlb	0	; select bank0
 14187  0F25  00E2               	movwf	??_RTXUpdateDisplay
 14188  0F26  0021               	movlb	1	; select bank1
 14189  0F27  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
 14190  0F28  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
 14191  0F29  0086               	movwf	6
 14192  0F2A  0187               	clrf	7
 14193  0F2B  0020               	movlb	0	; select bank0
 14194  0F2C  0862               	movf	??_RTXUpdateDisplay,w
 14195  0F2D  0081               	movwf	1
 14196  0F2E  3001               	movlw	1
 14197  0F2F  00E2               	movwf	??_RTXUpdateDisplay
 14198  0F30  0862               	movf	??_RTXUpdateDisplay,w
 14199  0F31  0021               	movlb	1	; select bank1
 14200  0F32  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
 14201                           
 14202                           ;RTX.c: 387: strRow1[iR++]='d';
 14203  0F33  3064               	movlw	100
 14204  0F34  0020               	movlb	0	; select bank0
 14205  0F35  00E2               	movwf	??_RTXUpdateDisplay
 14206  0F36  0021               	movlb	1	; select bank1
 14207  0F37  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
 14208  0F38  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
 14209  0F39  0086               	movwf	6
 14210  0F3A  0187               	clrf	7
 14211  0F3B  0020               	movlb	0	; select bank0
 14212  0F3C  0862               	movf	??_RTXUpdateDisplay,w
 14213  0F3D  0081               	movwf	1
 14214  0F3E  3001               	movlw	1
 14215  0F3F  00E2               	movwf	??_RTXUpdateDisplay
 14216  0F40  0862               	movf	??_RTXUpdateDisplay,w
 14217  0F41  0021               	movlb	1	; select bank1
 14218  0F42  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
 14219                           
 14220                           ;RTX.c: 388: strRow1[iR++]='o';
 14221  0F43  306F               	movlw	111
 14222  0F44  0020               	movlb	0	; select bank0
 14223  0F45  00E2               	movwf	??_RTXUpdateDisplay
 14224  0F46  0021               	movlb	1	; select bank1
 14225  0F47  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
 14226  0F48  3ECF               	addlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
 14227  0F49  0086               	movwf	6
 14228  0F4A  0187               	clrf	7
 14229  0F4B  0020               	movlb	0	; select bank0
 14230  0F4C  0862               	movf	??_RTXUpdateDisplay,w
 14231  0F4D  0081               	movwf	1
 14232  0F4E  3001               	movlw	1
 14233  0F4F  00E2               	movwf	??_RTXUpdateDisplay
 14234  0F50  0862               	movf	??_RTXUpdateDisplay,w
 14235  0F51  0021               	movlb	1	; select bank1
 14236  0F52  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
 14237                           
 14238                           ;RTX.c: 389: diffPower=-diffPower;
 14239  0F53  083B               	movf	RTXUpdateDisplay@diffPower^(0+128),w
 14240  0F54  00F1               	movwf	___ftneg@f1
 14241  0F55  083C               	movf	(RTXUpdateDisplay@diffPower+1)^(0+128),w
 14242  0F56  00F2               	movwf	___ftneg@f1+1
 14243  0F57  083D               	movf	(RTXUpdateDisplay@diffPower+2)^(0+128),w
 14244  0F58  00F3               	movwf	___ftneg@f1+2
 14245  0F59  319C  24F1  318D   	fcall	___ftneg
 14246  0F5C  0871               	movf	?___ftneg,w
 14247  0F5D  0021               	movlb	1	; select bank1
 14248  0F5E  00BB               	movwf	RTXUpdateDisplay@diffPower^(0+128)
 14249  0F5F  0872               	movf	?___ftneg+1,w
 14250  0F60  00BC               	movwf	(RTXUpdateDisplay@diffPower+1)^(0+128)
 14251  0F61  0873               	movf	?___ftneg+2,w
 14252  0F62  00BD               	movwf	(RTXUpdateDisplay@diffPower+2)^(0+128)
 14253  0F63                     l6398:	
 14254                           
 14255                           ;RTX.c: 390: }
 14256                           ;RTX.c: 392: iR=0;
 14257  0F63  01E0               	clrf	RTXUpdateDisplay@iR^(0+128)
 14258                           
 14259                           ;RTX.c: 393: iR=RTXVisDec(diffPower,strRow2,4,iR)+1;
 14260  0F64  083B               	movf	RTXUpdateDisplay@diffPower^(0+128),w
 14261  0F65  0020               	movlb	0	; select bank0
 14262  0F66  00D7               	movwf	RTXVisDec@val
 14263  0F67  0021               	movlb	1	; select bank1
 14264  0F68  083C               	movf	(RTXUpdateDisplay@diffPower+1)^(0+128),w
 14265  0F69  0020               	movlb	0	; select bank0
 14266  0F6A  00D8               	movwf	RTXVisDec@val+1
 14267  0F6B  0021               	movlb	1	; select bank1
 14268  0F6C  083D               	movf	(RTXUpdateDisplay@diffPower+2)^(0+128),w
 14269  0F6D  0020               	movlb	0	; select bank0
 14270  0F6E  00D9               	movwf	RTXVisDec@val+2
 14271  0F6F  30BF               	movlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
 14272  0F70  00E2               	movwf	??_RTXUpdateDisplay
 14273  0F71  0862               	movf	??_RTXUpdateDisplay,w
 14274  0F72  00DA               	movwf	RTXVisDec@buff
 14275  0F73  3004               	movlw	4
 14276  0F74  00E3               	movwf	??_RTXUpdateDisplay+1
 14277  0F75  0863               	movf	??_RTXUpdateDisplay+1,w
 14278  0F76  00DB               	movwf	RTXVisDec@maxDigit
 14279  0F77  0021               	movlb	1	; select bank1
 14280  0F78  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
 14281  0F79  0020               	movlb	0	; select bank0
 14282  0F7A  00E4               	movwf	??_RTXUpdateDisplay+2
 14283  0F7B  0864               	movf	??_RTXUpdateDisplay+2,w
 14284  0F7C  00DC               	movwf	RTXVisDec@offset
 14285  0F7D  3196  26A5  318D   	fcall	_RTXVisDec
 14286  0F80  3E01               	addlw	1
 14287  0F81  0020               	movlb	0	; select bank0
 14288  0F82  00E5               	movwf	??_RTXUpdateDisplay+3
 14289  0F83  0865               	movf	??_RTXUpdateDisplay+3,w
 14290  0F84  0021               	movlb	1	; select bank1
 14291  0F85  00E0               	movwf	RTXUpdateDisplay@iR^(0+128)
 14292                           
 14293                           ;RTX.c: 395: strRow2[iR++]='W';
 14294  0F86  3057               	movlw	87
 14295  0F87  0020               	movlb	0	; select bank0
 14296  0F88  00E2               	movwf	??_RTXUpdateDisplay
 14297  0F89  0021               	movlb	1	; select bank1
 14298  0F8A  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
 14299  0F8B  3EBF               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
 14300  0F8C  0086               	movwf	6
 14301  0F8D  0187               	clrf	7
 14302  0F8E  0020               	movlb	0	; select bank0
 14303  0F8F  0862               	movf	??_RTXUpdateDisplay,w
 14304  0F90  0081               	movwf	1
 14305  0F91  3001               	movlw	1
 14306  0F92  00E2               	movwf	??_RTXUpdateDisplay
 14307  0F93  0862               	movf	??_RTXUpdateDisplay,w
 14308  0F94  0021               	movlb	1	; select bank1
 14309  0F95  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
 14310                           
 14311                           ;RTX.c: 396: strRow2[iR++]=' ';
 14312  0F96  3020               	movlw	32
 14313  0F97  0020               	movlb	0	; select bank0
 14314  0F98  00E2               	movwf	??_RTXUpdateDisplay
 14315  0F99  0021               	movlb	1	; select bank1
 14316  0F9A  0860               	movf	RTXUpdateDisplay@iR^(0+128),w
 14317  0F9B  3EBF               	addlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
 14318  0F9C  0086               	movwf	6
 14319  0F9D  0187               	clrf	7
 14320  0F9E  0020               	movlb	0	; select bank0
 14321  0F9F  0862               	movf	??_RTXUpdateDisplay,w
 14322  0FA0  0081               	movwf	1
 14323  0FA1  3001               	movlw	1
 14324  0FA2  00E2               	movwf	??_RTXUpdateDisplay
 14325  0FA3  0862               	movf	??_RTXUpdateDisplay,w
 14326  0FA4  0021               	movlb	1	; select bank1
 14327  0FA5  07E0               	addwf	RTXUpdateDisplay@iR^(0+128),f
 14328                           
 14329                           ;RTX.c: 398: if((pgm_cfg.menu.con_curr_sensIsProg && batt_con_curr_sens<2.5) || (pgm_cfg
      +                          .menu.gen_curr_sensIsProg && batt_gen_curr_sens<2.5) || (pgm_cfg.menu.volt_sensIsProg &&
      +                           batt_volt_sens<2.5))
 14330  0FA6  0022               	movlb	2	; select bank2
 14331  0FA7  1CD7               	btfss	(_pgm_cfg^(0+256)+2),1
 14332  0FA8  2FBA               	goto	l503
 14333  0FA9  0820               	movf	_batt_con_curr_sens^(0+256),w
 14334  0FAA  00F1               	movwf	___ftge@ff1
 14335  0FAB  0821               	movf	(_batt_con_curr_sens+1)^(0+256),w
 14336  0FAC  00F2               	movwf	___ftge@ff1+1
 14337  0FAD  0822               	movf	(_batt_con_curr_sens+2)^(0+256),w
 14338  0FAE  00F3               	movwf	___ftge@ff1+2
 14339  0FAF  3000               	movlw	0
 14340  0FB0  00F4               	movwf	___ftge@ff2
 14341  0FB1  3020               	movlw	32
 14342  0FB2  00F5               	movwf	___ftge@ff2+1
 14343  0FB3  3040               	movlw	64
 14344  0FB4  00F6               	movwf	___ftge@ff2+2
 14345  0FB5  3192  220E  318D   	fcall	___ftge
 14346  0FB8  1C03               	btfss	3,0
 14347  0FB9  2FE2               	goto	l6418
 14348  0FBA                     l503:	
 14349  0FBA  0022               	movlb	2	; select bank2
 14350  0FBB  1C57               	btfss	(_pgm_cfg^(0+256)+2),0
 14351  0FBC  2FCE               	goto	l505
 14352  0FBD  0823               	movf	_batt_gen_curr_sens^(0+256),w
 14353  0FBE  00F1               	movwf	___ftge@ff1
 14354  0FBF  0824               	movf	(_batt_gen_curr_sens+1)^(0+256),w
 14355  0FC0  00F2               	movwf	___ftge@ff1+1
 14356  0FC1  0825               	movf	(_batt_gen_curr_sens+2)^(0+256),w
 14357  0FC2  00F3               	movwf	___ftge@ff1+2
 14358  0FC3  3000               	movlw	0
 14359  0FC4  00F4               	movwf	___ftge@ff2
 14360  0FC5  3020               	movlw	32
 14361  0FC6  00F5               	movwf	___ftge@ff2+1
 14362  0FC7  3040               	movlw	64
 14363  0FC8  00F6               	movwf	___ftge@ff2+2
 14364  0FC9  3192  220E  318D   	fcall	___ftge
 14365  0FCC  1C03               	btfss	3,0
 14366  0FCD  2FE2               	goto	l6418
 14367  0FCE                     l505:	
 14368  0FCE  0022               	movlb	2	; select bank2
 14369  0FCF  1D57               	btfss	(_pgm_cfg^(0+256)+2),2
 14370  0FD0  2FE4               	goto	l6420
 14371  0FD1  0826               	movf	_batt_volt_sens^(0+256),w
 14372  0FD2  00F1               	movwf	___ftge@ff1
 14373  0FD3  0827               	movf	(_batt_volt_sens+1)^(0+256),w
 14374  0FD4  00F2               	movwf	___ftge@ff1+1
 14375  0FD5  0828               	movf	(_batt_volt_sens+2)^(0+256),w
 14376  0FD6  00F3               	movwf	___ftge@ff1+2
 14377  0FD7  3000               	movlw	0
 14378  0FD8  00F4               	movwf	___ftge@ff2
 14379  0FD9  3020               	movlw	32
 14380  0FDA  00F5               	movwf	___ftge@ff2+1
 14381  0FDB  3040               	movlw	64
 14382  0FDC  00F6               	movwf	___ftge@ff2+2
 14383  0FDD  3192  220E  318D   	fcall	___ftge
 14384  0FE0  1803               	btfsc	3,0
 14385  0FE1  2FE4               	goto	l6420
 14386  0FE2                     l6418:	
 14387                           
 14388                           ;RTX.c: 399: strRow2[sizeof(strRow2)/sizeof(char)-1]=0x00;
 14389  0FE2  0021               	movlb	1	; select bank1
 14390  0FE3  01CE               	clrf	(RTXUpdateDisplay@strRow2^(0+128)+15)
 14391  0FE4                     l6420:	
 14392                           
 14393                           ;RTX.c: 400: }
 14394                           ;RTX.c: 401: DPYSendStr(0,0,strRow1,sizeof(strRow1)/sizeof(char));
 14395  0FE4  0020               	movlb	0	; select bank0
 14396  0FE5  01A0               	clrf	DPYSendStr@col
 14397  0FE6  30CF               	movlw	(low (RTXUpdateDisplay@strRow1| 0))& (0+255)
 14398  0FE7  00E2               	movwf	??_RTXUpdateDisplay
 14399  0FE8  0862               	movf	??_RTXUpdateDisplay,w
 14400  0FE9  00A1               	movwf	DPYSendStr@data
 14401  0FEA  3010               	movlw	16
 14402  0FEB  00E3               	movwf	??_RTXUpdateDisplay+1
 14403  0FEC  0863               	movf	??_RTXUpdateDisplay+1,w
 14404  0FED  00A2               	movwf	DPYSendStr@len
 14405  0FEE  3000               	movlw	0
 14406  0FEF  3192  22CC  318D   	fcall	_DPYSendStr
 14407                           
 14408                           ;RTX.c: 402: DPYSendStr(1,0,strRow2,sizeof(strRow2)/sizeof(char));
 14409  0FF2  0020               	movlb	0	; select bank0
 14410  0FF3  01A0               	clrf	DPYSendStr@col
 14411  0FF4  30BF               	movlw	(low (RTXUpdateDisplay@strRow2| 0))& (0+255)
 14412  0FF5  00E2               	movwf	??_RTXUpdateDisplay
 14413  0FF6  0862               	movf	??_RTXUpdateDisplay,w
 14414  0FF7  00A1               	movwf	DPYSendStr@data
 14415  0FF8  3010               	movlw	16
 14416  0FF9  00E3               	movwf	??_RTXUpdateDisplay+1
 14417  0FFA  0863               	movf	??_RTXUpdateDisplay+1,w
 14418  0FFB  00A2               	movwf	DPYSendStr@len
 14419  0FFC  3001               	movlw	1
 14420  0FFD  3192  22CC         	fcall	_DPYSendStr
 14421  0FFF  0008               	return
 14422  1000                     __end_of_RTXUpdateDisplay:	


Data Sizes:
    Strings     11
    Constant    40
    Data        64
    BSS         89
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     73      80
    BANK1            80     76      80
    BANK2            80      0      77
    BANK3            80      0      64
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    ftoa@status	PTR int  size(1) Largest target is 2
		 -> RTXVisDec@status(BANK1[2]), 

    utoa@buf	PTR unsigned char  size(1) Largest target is 4
		 -> RTXUpdateDisplay@charIdSens(BANK1[4]), 

    sp__utoa	PTR unsigned char  size(1) Largest target is 4
		 -> RTXUpdateDisplay@charIdSens(BANK1[4]), 

    itoa@buf	PTR unsigned char  size(1) Largest target is 4
		 -> RTXUpdateDisplay@charIdSens(BANK1[4]), 

    itoa@cp	PTR unsigned char  size(1) Largest target is 4
		 -> RTXUpdateDisplay@charIdSens(BANK1[4]), 

    ftoa@cp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK3[17]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 11
		 -> STR_1(CODE[11]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK3[17]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    RTXRcvPkt@dst	PTR unsigned char  size(1) Largest target is 11
		 -> pktRx(BANK2[11]), 

    RTXSndPkt@src	PTR unsigned char  size(1) Largest target is 11
		 -> pktTx(BANK2[11]), 

    RTXVisDec@buff	PTR unsigned char  size(1) Largest target is 16
		 -> RTXUpdateDisplay@strRow2(BANK1[16]), 

    sp__ftoa	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK3[17]), 

    RTXVisDec@p	PTR unsigned char  size(1) Largest target is 17
		 -> ftoa@buf(BANK3[17]), 

    sp__itoa	PTR unsigned char  size(1) Largest target is 4
		 -> RTXUpdateDisplay@charIdSens(BANK1[4]), 

    DPYSendStr@data	PTR unsigned char  size(1) Largest target is 16
		 -> RTXUpdateDisplay@strRow2(BANK1[16]), RTXUpdateDisplay@strRow1(BANK1[16]), 

    DPYDrawChar@p	PTR unsigned char  size(1) Largest target is 9
		 -> picBatt(BANK2[9]), 

    NVMWrite@source	PTR unsigned char  size(1) Largest target is 7
		 -> pgm_cfg(BANK2[7]), 

    NVMRead@dest	PTR unsigned char  size(1) Largest target is 7
		 -> pgm_cfg(BANK2[7]), 

    CC1Write@src	PTR unsigned char  size(1) Largest target is 47
		 -> pktTx(BANK2[11]), cc1PaTable(BANK2[8]), cc1InitVal(BANK3[47]), 

    CC1Read@dst	PTR unsigned char  size(2) Largest target is 11
		 -> pktRx(BANK2[11]), numTxByte(BANK0[1]), numRxByte(BANK1[1]), sta(COMMON[1]), 

    SPIWrite@srcPtr	PTR unsigned char  size(2) Largest target is 47
		 -> pktTx(BANK2[11]), CC1Write@cc1Addr(COMMON[1]), CC1Read@cc1Addr(BANK0[1]), CC1Strobe@cc1Stb(COMMON[1]), 
		 -> cc1PaTable(BANK2[8]), cc1InitVal(BANK3[47]), 

    SPIRead@dstPtr	PTR unsigned char  size(2) Largest target is 11
		 -> pktRx(BANK2[11]), numTxByte(BANK0[1]), numRxByte(BANK1[1]), sta(COMMON[1]), 


Critical Paths under _main in COMMON

    _main->_PGMInit
    _RTXReadPkt->_CC1Read
    _RTXSup->_CC1Read
    _RTXSndPkt->_CC1Read
    _RTXSndPkt->_CC1Write
    _RTXRcvPkt->_CC1Read
    _CC1Read->_SPIRead
    _RTXUpdateDisplay->___ftadd
    _itoa->_utoa
    _utoa->___lwdiv
    _sprintf->___llmod
    ___llmod->___lldiv
    ___lltoft->___ftpack
    ___ftsub->___ftadd
    ___ftadd->___ftpack
    ___ftmul->___ftpack
    _DPYSendStr->_DPYSetCur
    _DPYSetCur->_DPYWriteByte
    _DPYSendChar->_DPYWriteByte
    _DPYIsBusy->_DLYDelay_us
    _PGMReadNvm->_NVMRead
    _PGMCheckNvm->_PGMNvmReset
    _PGMNvmReset->_PGMWriteNvm
    _PGMWriteNvm->_NVMWrite
    _DPYInit->_DPYInitDisplay
    _DPYInitDisplay->_DPYDrawChar
    _DPYWriteNibble->_DLYDelay_us
    _DPYDrawChar->_DPYWriteByte
    _DPYWriteByte->_DLYDelay_us
    _CC1Init->_CC1Write
    _CC1Write->_SPIWrite
    _CC1Strobe->_SPIWrite

Critical Paths under _INTIsr in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_RTXInit
    _SYSTask->_PGMSelLong
    _SYSTask->_RTXSelDown
    _RTXTick->_RTXUpdateDisplay
    _RTXSelDown->_RTXUpdateDisplay
    _PGMSelLong->_RTXUpdateDisplay
    _RTXTask->_RTXReadPkt
    _RTXReadPkt->_RTXUpdateDisplay
    _RTXSup->_CC1Read
    _RTXSendRPgm->_RTXSndPkt
    _RTXSendRData->_RTXSndPkt
    _RTXSndPkt->_CC1Read
    _RTXRcvPkt->_CC1Read
    _RTXInit->_RTXUpdateDisplay
    _RTXUpdateDisplay->_RTXVisDec
    _itoa->_utoa
    _RTXVisDec->_ftoa
    _ftoa->_sprintf
    _sprintf->___llmod
    ___llmod->___lldiv
    ___fttol->___ftmul
    ___ftsub->___ftadd
    _PGMWriteNvm->_NVMWrite
    _DPYInit->_DPYInitDisplay
    _DPYInitDisplay->_DPYDrawChar

Critical Paths under _INTIsr in BANK0

    None.

Critical Paths under _main in BANK1

    _RTXTick->_RTXUpdateDisplay
    _RTXSelDown->_RTXUpdateDisplay
    _PGMSelLong->_RTXUpdateDisplay
    _RTXTask->_RTXReadPkt
    _RTXReadPkt->_RTXUpdateDisplay
    _RTXInit->_RTXUpdateDisplay
    _RTXUpdateDisplay->_RTXVisDec

Critical Paths under _INTIsr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTIsr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTIsr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTIsr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTIsr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTIsr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTIsr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTIsr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTIsr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTIsr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTIsr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTIsr in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  257233
                                             71 BANK0      2     2      0
                            _CC1Init
                            _DINInit
                            _DINTask
                            _DPYInit
                             _INInit
                            _NVMInit
                            _OUTInit
                            _PGMInit
                            _RTXInit
                            _RTXTask
                            _SPIInit
                            _SYSInit
                            _SYSTask
 ---------------------------------------------------------------------------------
 (1) _SYSTask                                              0     0      0  136194
                            _DINTick
                         _PGMSelLong
                         _RTXSelDown
                            _RTXTick
 ---------------------------------------------------------------------------------
 (2) _RTXTick                                              0     0      0   47400
                          _CC1Strobe
                             _RTXSup
                   _RTXUpdateDisplay
 ---------------------------------------------------------------------------------
 (2) _RTXSelDown                                           1     1      0   43819
                                             70 BANK0      1     1      0
                   _RTXUpdateDisplay
 ---------------------------------------------------------------------------------
 (2) _PGMSelLong                                           1     1      0   44975
                                             70 BANK0      1     1      0
                        _DLYDelay_ms
                        _PGMWriteNvm
                   _RTXUpdateDisplay
 ---------------------------------------------------------------------------------
 (2) _DINTick                                              1     1      0       0
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSInit                                              2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _SPIInit                                              2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _RTXTask                                              0     0      0   65519
                         _RTXReadPkt
 ---------------------------------------------------------------------------------
 (2) _RTXReadPkt                                          12    12      0   65519
                                             70 BANK0      1     1      0
                                             65 BANK1     11    11      0
                            _CC1Read
                        _DLYDelay_ms
                        _PGMWriteNvm
                          _RTXRcvPkt
                       _RTXSendRData
                        _RTXSendRPgm
                             _RTXSup
                   _RTXUpdateDisplay
                            ___ftmul
 ---------------------------------------------------------------------------------
 (3) _RTXSup                                               0     0      0    2903
                            _CC1Read
                          _CC1Strobe
 ---------------------------------------------------------------------------------
 (3) _RTXSendRPgm                                          3     2      1    4544
                                              7 BANK0      3     2      1
                          _RTXSndPkt
 ---------------------------------------------------------------------------------
 (3) _RTXSendRData                                         3     2      1    4544
                                              7 BANK0      3     2      1
                          _RTXSndPkt
 ---------------------------------------------------------------------------------
 (4) _RTXSndPkt                                            4     3      1    4405
                                              3 BANK0      4     3      1
                            _CC1Read
                          _CC1Strobe
                           _CC1Write
 ---------------------------------------------------------------------------------
 (3) _RTXRcvPkt                                            3     2      1    2406
                                              3 BANK0      3     2      1
                            _CC1Read
 ---------------------------------------------------------------------------------
 (4) _CC1Read                                              6     3      3    2225
                                              9 COMMON     3     0      3
                                              0 BANK0      3     3      0
                            _SPIRead
                           _SPIWrite
 ---------------------------------------------------------------------------------
 (5) _SPIRead                                              8     5      3     253
                                              1 COMMON     8     5      3
 ---------------------------------------------------------------------------------
 (1) _RTXInit                                              1     1      0   44528
                                             70 BANK0      1     1      0
                          _CC1Strobe
                   _RTXUpdateDisplay
 ---------------------------------------------------------------------------------
 (3) _RTXUpdateDisplay                                    46    46      0   43819
                                             66 BANK0      4     4      0
                                             23 BANK1     42    42      0
                         _DPYSendStr
                          _RTXVisDec
                            ___ftadd
                             ___ftge
                            ___ftneg
                               _itoa
 ---------------------------------------------------------------------------------
 (4) _itoa                                                 7     3      4    2162
                                             10 COMMON     1     1      0
                                              8 BANK0      6     2      4
                               _utoa
 ---------------------------------------------------------------------------------
 (5) _utoa                                                 9     5      4    1341
                                              9 COMMON     1     1      0
                                              0 BANK0      8     4      4
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (6) ___lwmod                                              6     2      4     287
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              8     4      4     418
                                              1 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (4) _RTXVisDec                                           34    28      6   17057
                                             55 BANK0     11     5      6
                                              0 BANK1     23    23      0
                               _ftoa
 ---------------------------------------------------------------------------------
 (5) _ftoa                                                14    10      4   13997
                                             41 BANK0     14    10      4
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                           ___lltoft
                            _sprintf
 ---------------------------------------------------------------------------------
 (6) _sprintf                                             36    26     10    1998
                                             13 BANK0     28    18     10
                            ___lldiv
                            ___llmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (7) _isdigit                                              2     2      0      68
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4     348
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (7) ___llmod                                             10     2      8     287
                                             10 COMMON     2     2      0
                                              5 BANK0      8     0      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (7) ___lldiv                                             14     6      8     290
                                              1 COMMON     9     1      8
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (6) ___lltoft                                             6     2      4    2583
                                              9 COMMON     2     2      0
                                              0 BANK0      4     0      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___fttol                                             14    10      4     380
                                             16 BANK0     14    10      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (6) ___ftsub                                              6     0      6    4187
                                             10 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             13     7      6    3937
                                              9 COMMON     3     3      0
                                              0 BANK0     10     4      6
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftneg                                              3     0      3     237
                                              1 COMMON     3     0      3
 ---------------------------------------------------------------------------------
 (6) ___ftmul                                             16    10      6    3354
                                              0 BANK0     16    10      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2404
                                              1 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (4) ___ftge                                               9     3      6     776
                                              1 COMMON     9     3      6
 ---------------------------------------------------------------------------------
 (4) _DPYSendStr                                           6     3      3    7047
                                              0 BANK0      6     3      3
                          _DPYIsBusy
                        _DPYSendChar
                          _DPYSetCur
 ---------------------------------------------------------------------------------
 (5) _DPYSetCur                                            4     3      1    2577
                                              8 COMMON     4     3      1
                       _DPYWriteByte
 ---------------------------------------------------------------------------------
 (5) _DPYSendChar                                          2     2      0    2278
                                              8 COMMON     2     2      0
                       _DPYWriteByte
 ---------------------------------------------------------------------------------
 (5) _DPYIsBusy                                            2     2      0    1337
                                              5 COMMON     2     2      0
                        _DLYDelay_us
 ---------------------------------------------------------------------------------
 (1) _PGMInit                                              1     1      0    1128
                                             11 COMMON     1     1      0
                        _PGMCheckNvm
                         _PGMReadNvm
 ---------------------------------------------------------------------------------
 (2) _PGMReadNvm                                           2     2      0     326
                                              8 COMMON     2     2      0
                            _NVMRead
 ---------------------------------------------------------------------------------
 (3) _NVMRead                                              7     3      4     326
                                              1 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) _PGMCheckNvm                                          0     0      0     780
                        _PGMNvmReset
 ---------------------------------------------------------------------------------
 (3) _PGMNvmReset                                          1     1      0     780
                                             10 COMMON     1     1      0
                        _PGMWriteNvm
 ---------------------------------------------------------------------------------
 (3) _PGMWriteNvm                                          2     2      0     780
                                              8 COMMON     2     2      0
                           _NVMWrite
 ---------------------------------------------------------------------------------
 (4) _NVMWrite                                            76    72      4     780
                                              1 COMMON     7     3      4
                                              0 BANK0     69    69      0
 ---------------------------------------------------------------------------------
 (1) _OUTInit                                              2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _NVMInit                                              1     1      0      22
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _INInit                                               2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DPYInit                                              1     1      0    6918
                                              4 BANK0      1     1      0
                     _DPYInitDisplay
 ---------------------------------------------------------------------------------
 (2) _DPYInitDisplay                                       2     2      0    6887
                                             11 COMMON     1     1      0
                                              3 BANK0      1     1      0
                        _DLYDelay_ms
                        _DPYDrawChar
                       _DPYWriteByte
                     _DPYWriteNibble
 ---------------------------------------------------------------------------------
 (3) _DPYWriteNibble                                       2     1      1    1677
                                              5 COMMON     2     1      1
                        _DLYDelay_us
                _OUTSetHTCDataNibble
 ---------------------------------------------------------------------------------
 (3) _DPYDrawChar                                          6     5      1    2550
                                              8 COMMON     3     2      1
                                              0 BANK0      3     3      0
                       _DPYWriteByte
 ---------------------------------------------------------------------------------
 (6) _DPYWriteByte                                         3     2      1    2247
                                              5 COMMON     3     2      1
                        _DLYDelay_us
                _OUTSetHTCDataNibble
 ---------------------------------------------------------------------------------
 (7) _OUTSetHTCDataNibble                                  3     3      0     207
                                              1 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (7) _DLYDelay_us                                          4     2      2    1300
                                              1 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (1) _DINTask                                              1     1      0       0
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DINInit                                              1     1      0      22
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _CC1Init                                              3     3      0    2298
                                              0 BANK0      3     3      0
                          _CC1Strobe
                           _CC1Write
                        _DLYDelay_ms
 ---------------------------------------------------------------------------------
 (3) _DLYDelay_ms                                          6     4      2     376
                                              1 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (5) _CC1Write                                             5     3      2    1202
                                              7 COMMON     5     3      2
                           _SPIWrite
 ---------------------------------------------------------------------------------
 (4) _CC1Strobe                                            3     3      0     678
                                              7 COMMON     3     3      0
                           _SPIWrite
 ---------------------------------------------------------------------------------
 (5) _SPIWrite                                             6     3      3     610
                                              1 COMMON     6     3      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _INTIsr                                               1     1      0       0
                                              0 COMMON     1     1      0
                             _SYSInt
 ---------------------------------------------------------------------------------
 (10) _SYSInt                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CC1Init
     _CC1Strobe
       _SPIWrite
     _CC1Write
       _SPIWrite
     _DLYDelay_ms
   _DINInit
   _DINTask
   _DPYInit
     _DPYInitDisplay
       _DLYDelay_ms
       _DPYDrawChar
         _DPYWriteByte
           _DLYDelay_us
           _OUTSetHTCDataNibble
       _DPYWriteByte
         _DLYDelay_us
         _OUTSetHTCDataNibble
       _DPYWriteNibble
         _DLYDelay_us
         _OUTSetHTCDataNibble
   _INInit
   _NVMInit
   _OUTInit
   _PGMInit
     _PGMCheckNvm
       _PGMNvmReset
         _PGMWriteNvm
           _NVMWrite
     _PGMReadNvm
       _NVMRead
   _RTXInit
     _CC1Strobe
       _SPIWrite
     _RTXUpdateDisplay
       _DPYSendStr
         _DPYIsBusy
           _DLYDelay_us
         _DPYSendChar
           _DPYWriteByte
             _DLYDelay_us
             _OUTSetHTCDataNibble
         _DPYSetCur
           _DPYWriteByte
             _DLYDelay_us
             _OUTSetHTCDataNibble
       _RTXVisDec
         _ftoa
           ___ftge
           ___ftmul
             ___ftpack
           ___ftneg
           ___ftsub
             ___ftadd
               ___ftneg (ARG)
               ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___ftpack
           ___lltoft
             ___ftpack
           _sprintf
             ___lldiv
             ___llmod
               ___lldiv (ARG)
             ___wmul
             _isdigit
       ___ftadd
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftge
       ___ftneg
       _itoa
         _utoa
           ___lwdiv
           ___lwmod
   _RTXTask
     _RTXReadPkt
       _CC1Read
         _SPIRead
         _SPIWrite
       _DLYDelay_ms
       _PGMWriteNvm
         _NVMWrite
       _RTXRcvPkt
         _CC1Read
           _SPIRead
           _SPIWrite
       _RTXSendRData
         _RTXSndPkt
           _CC1Read
             _SPIRead
             _SPIWrite
           _CC1Strobe
             _SPIWrite
           _CC1Write
             _SPIWrite
       _RTXSendRPgm
         _RTXSndPkt
           _CC1Read
             _SPIRead
             _SPIWrite
           _CC1Strobe
             _SPIWrite
           _CC1Write
             _SPIWrite
       _RTXSup
         _CC1Read
           _SPIRead
           _SPIWrite
         _CC1Strobe
           _SPIWrite
       _RTXUpdateDisplay
         _DPYSendStr
           _DPYIsBusy
             _DLYDelay_us
           _DPYSendChar
             _DPYWriteByte
               _DLYDelay_us
               _OUTSetHTCDataNibble
           _DPYSetCur
             _DPYWriteByte
               _DLYDelay_us
               _OUTSetHTCDataNibble
         _RTXVisDec
           _ftoa
             ___ftge
             ___ftmul
               ___ftpack
             ___ftneg
             ___ftsub
               ___ftadd
                 ___ftneg (ARG)
                 ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol
               ___ftmul (ARG)
                 ___ftpack
             ___lltoft
               ___ftpack
             _sprintf
               ___lldiv
               ___llmod
                 ___lldiv (ARG)
               ___wmul
               _isdigit
         ___ftadd
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftneg
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
       ___ftmul
         ___ftpack
   _SPIInit
   _SYSInit
   _SYSTask
     _DINTick
     _PGMSelLong
       _DLYDelay_ms
       _PGMWriteNvm
         _NVMWrite
       _RTXUpdateDisplay
         _DPYSendStr
           _DPYIsBusy
             _DLYDelay_us
           _DPYSendChar
             _DPYWriteByte
               _DLYDelay_us
               _OUTSetHTCDataNibble
           _DPYSetCur
             _DPYWriteByte
               _DLYDelay_us
               _OUTSetHTCDataNibble
         _RTXVisDec
           _ftoa
             ___ftge
             ___ftmul
               ___ftpack
             ___ftneg
             ___ftsub
               ___ftadd
                 ___ftneg (ARG)
                 ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol
               ___ftmul (ARG)
                 ___ftpack
             ___lltoft
               ___ftpack
             _sprintf
               ___lldiv
               ___llmod
                 ___lldiv (ARG)
               ___wmul
               _isdigit
         ___ftadd
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftneg
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
     _RTXSelDown
       _RTXUpdateDisplay
         _DPYSendStr
           _DPYIsBusy
             _DLYDelay_us
           _DPYSendChar
             _DPYWriteByte
               _DLYDelay_us
               _OUTSetHTCDataNibble
           _DPYSetCur
             _DPYWriteByte
               _DLYDelay_us
               _OUTSetHTCDataNibble
         _RTXVisDec
           _ftoa
             ___ftge
             ___ftmul
               ___ftpack
             ___ftneg
             ___ftsub
               ___ftadd
                 ___ftneg (ARG)
                 ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol
               ___ftmul (ARG)
                 ___ftpack
             ___lltoft
               ___ftpack
             _sprintf
               ___lldiv
               ___llmod
                 ___lldiv (ARG)
               ___wmul
               _isdigit
         ___ftadd
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftneg
         _itoa
           _utoa
             ___lwdiv
             ___lwmod
     _RTXTick
       _CC1Strobe
         _SPIWrite
       _RTXSup
         _CC1Read
           _SPIRead
           _SPIWrite
         _CC1Strobe
           _SPIWrite
       _RTXUpdateDisplay
         _DPYSendStr
           _DPYIsBusy
             _DLYDelay_us
           _DPYSendChar
             _DPYWriteByte
               _DLYDelay_us
               _OUTSetHTCDataNibble
           _DPYSetCur
             _DPYWriteByte
               _DLYDelay_us
               _OUTSetHTCDataNibble
         _RTXVisDec
           _ftoa
             ___ftge
             ___ftmul
               ___ftpack
             ___ftneg
             ___ftsub
               ___ftadd
                 ___ftneg (ARG)
                 ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
             ___fttol
               ___ftmul (ARG)
                 ___ftpack
             ___lltoft
               ___ftpack
             _sprintf
               ___lldiv
               ___llmod
                 ___lldiv (ARG)
               ___wmul
               _isdigit
         ___ftadd
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftge
         ___ftneg
         _itoa
           _utoa
             ___lwdiv
             ___lwmod

 _INTIsr (ROOT)
   _SYSInt

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     49      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     4C      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4D       9       96.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      40      11       80.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     13A      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     13A      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Fri Apr 15 18:01:30 2016

          __size_of_CC1Strobe 0014                    __CFG_CP$ON 0000                            l14 1DF1  
                          l34 1E08                            l61 1EEB                            l70 1F98  
                          l65 1F06                            l94 1E0B                            l79 1E87  
                          l88 1D46           ___wmul@multiplicand 0073                  ?_DLYDelay_ms 0071  
                ?_DLYDelay_us 0071                  ___ftadd@exp1 007B                  ___ftadd@exp2 007A  
                ___ftadd@sign 0079                           l211 1D77                           l125 120D  
                         l214 1FEC                           l216 1FEA                           l154 1D0C  
                         l170 086A                           l261 1D9C                           l181 08DF  
                         l173 088E                           l166 0850                           l183 08E6  
                         l159 1FC7                           l503 0FBA                           l176 0897  
                         l168 085B                           l169 087F                           l505 0FCE  
                         l186 08F8                           l531 1F14                           l292 117B  
                         l453 14B4                           l359 1DC5                           l527 10B7  
                         l537 1362                           l298 1411                           l722 1318  
                         l723 1354                           l724 1355                           l645 1F69  
                         l753 0C57                           l940 1549                           l756 0C76  
                         l947 155C                           l971 099B                           l779 1E2A  
                         l948 1564               __end_of_CC1Init 120E               __end_of_CC1Read 1F47  
                         _sta 007C                  __CFG_BORV$LO 0000                           wreg 0009  
                  _RTXReadPkt 09F2               __end_of_DINInit 1D78            DPYDrawChar@tmpAddr 0021  
             __end_of_DINTask 1EAE               __end_of_DINTick 2000                    _RTXSelDown 1F07  
                __CFG_LVP$OFF 0000                   ?_DPYSendStr 0020                          l1039 15E8  
                        l1059 1501                          l3304 1E24                          l3402 13F1  
                        l4060 1FB5                          l3500 0C24                          l3406 13FC  
                        l3422 12B8                          l3502 0C53                          l5112 1D68  
                        l5104 1D04                          l3416 1292                          l3504 0C59  
             __end_of_DPYInit 1D9D                          l3418 12A0                          l3426 12C3  
                        l3530 0CAA                          l3514 0C85                          l5210 1F61  
                        l5116 1D72                          l5132 1EA4                          l5044 1DDD  
                        l5052 1DEC                          l5108 1D07                          l3540 0CEE  
                        l3524 0CA4                          l3508 0C5E                          l5150 1DB3  
                        l3550 0D26                          l5206 1F5E                          l5136 1EA8  
                        l5128 1EA1                          l5056 1DF4                          l5064 1E03  
                        l5152 1DB7                          l3392 13C3                          l3544 0D06  
                        l3536 0CD7                          l3720 11A9                          l5400 1F8F  
                        l3394 13D1                          l3298 1D25                          l3482 0BE7  
                        l3490 0C15                          l3722 11B5                          l5156 1DBD  
                        l3580 123A                          l5332 092B                          l3564 0D80  
                        l3548 0D23                          l3476 0BD7                          l3732 11D0  
                        l5084 1EFB                          l5406 1E8C                          l5270 151F  
                        l5350 0954                          l3558 0D3B                          l3566 0BB4  
                        l3750 1102                          l6142 052C                          l6046 03B5  
                        l5408 1E75                          l5416 140D                          l3576 1224  
                        l5360 0976                          l5328 0924                          l3664 1594  
                        l3568 0D8B                          l3728 11C7                          l3744 10EA  
                        l5192 1F49                          l3842 08E1                          l3850 08F3  
                        l3834 08C1                          l5274 1526                          l5442 1779  
                        l5370 0997                          l5362 097A                          l5338 093A  
                        l3690 15DF                          l3682 15C4                          l3746 10F6  
                        l3754 110B                          l5602 14D9                          l6314 0D91  
                        l3828 08BB                          l5532 1DD2                          l5276 1530  
                        l5436 1763                          l5356 0967                          l3692 15EB  
                        l3684 15D2                          l6180 056E                          l6420 0FE4  
                        l5286 155A                          l5278 1535                          l5470 17D8  
                        l5454 17B4                          l5374 09AD                          l5358 0971  
                        l5702 172A                          l6430 10A4                          l5288 154E  
                        l5368 098D                          l3696 15F9                          l5704 1748  
                        l5554 1261                          l5642 130C                          l5626 12E6  
                        l5466 17D0                          l5458 17BC                          l5378 09BF  
                        l6418 0FE2                          l5714 137B                          l6426 1098  
                        l6434 10AC                          l6506 115C                          l5636 12FD  
                        l5628 12EE                          l5644 12D8                          l5388 09DA  
                        l5484 1ED3                          l5492 1066                          l6276 0700  
                        l5396 1F9D                          l6428 109C                          l5726 1177  
                        l5494 1078                          l5670 16BE                          l6702 1498  
                        l6630 0B64                          l6606 0AF3                          l4856 1D16  
                        l5592 14BB                          l5656 1F82                          l6368 0EB3  
                        l6616 0B23                          l6536 0A22                          l6640 0BA0  
                        l5578 1635                          l5682 16F4                          l5914 024F  
                        l5770 006B                          l6634 0B8C                          l6626 0B3B  
                        l6570 0A69                          l6546 0A2F                          l6650 1F0E  
                        l6722 1E47                          l5676 16D3                          l5692 171C  
                        l5764 0066                          l6708 14A8                          l6556 0A4A  
                        l6644 09FC                          l6398 0F63                          l5870 01CC  
                        l5758 0052                          l6638 0B9C                          l6574 0A72  
                        l6566 0A63                          l6654 1F1D                          l6760 11D8  
                        l6680 1D90                          l5696 1729                          l5784 008F  
                        l5776 007F                          l6656 1F20                          l6728 1E4E  
                        l6762 11DC                          l6578 0A7A                          l6772 1201  
                        l6676 1D8D                          l5892 0211                          l6684 145E  
                        l6596 0AD0                          l5896 0227                          l5888 0209  
                        STR_1 3928             NVMWrite@bufTmpRow 0020                          u3005 13D2  
                        _LATA 010C                          u3015 13E6                          u3025 13F2  
                        u3055 1295                          u3305 0D16                          u3075 12AE  
                        u3085 12B9                          _PIE1 0091                          _PIE2 0092  
                        u3265 0CCD                          u5115 156B                          u5035 152B  
                        u2715 1E2B                          u2725 1E30                          u3285 0CE6  
                        u5055 1544                          u3535 159B                          u3295 0CFE  
                        u5305 0968                          u5075 1555                          u3565 15C5  
                        u3725 10ED                          u5175 1D4C                          u5335 097B  
                        u3655 11AC                          u5505 1785                          u3745 10FC  
                        u5515 1795                          u5275 0955                          u3595 15E0  
                        u3675 11B6                          u3755 1103                          u5365 098E  
                        u3685 11C0                          u5535 17BD                          u5615 106C  
                        u3695 11C8                          u5545 17C3                          u2985 13C6  
                        _PIR1 0011                          _PIR2 0012                          u5475 1425  
                        u5575 17D9                          u5585 17DF                          u5845 1E11  
                        u6637 1E18                          u5775 16F2                          _TMR0 0015  
                        _WPUB 020D               __end_of_PGMInit 1DC6                  __CFG_WRT$OFF 0000  
               __CFG_FCMEN$ON 0000                          _main 1312              __end_of_CC1Write 07FE  
                        _ftoa 1602                  ___ftpack@arg 0071               __end_of_NVMInit 1D0D  
             __end_of_NVMRead 1FD9                          _itoa 1F6A                  ___ftpack@exp 0074  
             __end_of_SPIInit 1F07               __end_of_SPIRead 1FB2                          fsr0h 0005  
                        fsr1h 0007                          fsr0l 0004                          indf0 0000  
                        indf1 0001                          fsr1l 0006                          btemp 007E  
                        _utoa 14B5               __end_of_OUTInit 1E09                  ?_DPYDrawChar 0078  
               __CFG_BOREN$ON 0000                          ltemp 007E                          start 0011  
             __end_of_RTXInit 14B5                          ttemp 007E             NVMWrite@latchAddr 0063  
             __end_of_RTXTask 1CE5               __end_of_RTXTick 116F                          wtemp 007E  
               __CFG_IESO$OFF 0000               __end_of_SYSInit 1F6A               __end_of_SYSTask 1E58  
          __size_of_DPYIsBusy 0040                  ___ftmul@cntr 002E                  ___ftmul@sign 002F  
          __size_of_DPYSetCur 0015                   ?_PGMReadNvm 0070                 __CFG_LPBOR$ON 0000  
            RTXSendRData@type 0027                  ___fttol@exp1 003D                   ?_PGMSelLong 0070  
            ??_DPYWriteNibble 0076                  ?_DPYSendChar 0070                  ___fttol@lval 0039  
                 _RTXSendRPgm 1039     RTXUpdateDisplay@diffPower 00BB                  SPIInit@state 0072  
                       ?_main 0070                         ?_ftoa 0049                         ?_itoa 0028  
             __end_of___ftadd 09F2                 __CFG_WDTE$OFF 0000               __end_of___ftneg 1CF9  
             __end_of___lldiv 1405                         ?_utoa 0020               __end_of___ftmul 1800  
                       _T1CON 0018               __end_of___llmod 12CC               __end_of___ftsub 1EE9  
             __end_of___fttol 1602                         _IOCBN 0395                         _IOCBP 0394  
             __end_of___lwdiv 11D5               __end_of___lwmod 1110                         i1l719 000D  
                       _PMADR 0191                         _PMDAT 0193                         _TMR1H 0017  
                       _TMR1L 0016                         _TRISA 008C                         _TRISB 008D  
                       _TRISC 008E                 __CFG_PWRTE$ON 0000                  ___lltoft@exp 007A  
       __size_of_RTXSendRData 0029               __end_of_dpowers 3928             __end_of_CC1Strobe 1DB1  
             __end_of_isdigit 1D27                         _pktRx 013F                         _pktTx 014A  
               ___ftpack@sign 0075                         main@i 0068                         ftoa@f 0049  
            __end_of_NVMWrite 08FC                         ftoa@l 0052              __end_of_SPIWrite 1E91  
                       ltemp0 007E                         ltemp1 0082                         ltemp2 0086  
                       ltemp3 0080                         ttemp0 007E                         ttemp1 0081  
                       ttemp2 0084                         ttemp3 0087                         ttemp4 007F  
                       utoa@c 0026                         utoa@v 0024                         status 0003  
                       wtemp0 007E                         wtemp1 0080                         wtemp2 0082  
                       wtemp3 0084                         wtemp4 0086                         wtemp5 0088  
                       wtemp6 007F               __end_of_sprintf 0D91                  ?_PGMCheckNvm 0070  
              __CFG_MCLRE$OFF 0000               __initialization 0013    RTXUpdateDisplay@charIdSens 00B7  
                DLYDelay_ms@i 0075                  DLYDelay_us@i 0073                  __end_of_main 1360  
                __end_of_ftoa 16A5            __size_of_RTXRcvPkt 000E                  __end_of_itoa 1F8E  
          __size_of_RTXSndPkt 0052                  __end_of_utoa 1517            __size_of_RTXVisDec 00A7  
                   ??_CC1Init 0020                     ??_CC1Read 0020           __size_of_DPYSendStr 0046  
              CC1Strobe@e_stb 0078             RTXUpdateDisplay@i 00BE                   DPYIsBusy@bf 0076  
                      ??_main 0067                    _cc1PaTable 0165                        ??_ftoa 004D  
               ___fttol@sign1 0038                        ??_itoa 007A                  _RTXSendRData 1010  
                      ??_utoa 0079                  CC1Init@state 0022                     ??_DINInit 0071  
                NVMWrite@addr 0071                     ??_DINTask 0071                     ??_DINTick 0071  
                  _cc1InitVal 01A0                  ?_PGMNvmReset 0070                     ??_DPYInit 007C  
                   ??_PGMInit 007B                   ?_RTXReadPkt 0070             __end_of_DPYIsBusy 1289  
                 ?_RTXSelDown 0070                 SPIRead@dstPtr 0071                     ??_NVMInit 0071  
                   ??_NVMRead 0075             __end_of_DPYSetCur 1DDB              ___llmod@dividend 0029  
                   ??_SPIInit 0071                     ??_SPIRead 0074                     ??_OUTInit 0071  
                      _ANSELA 018C                        _ANSELB 018D                        _ANSELC 018E  
            __end_of___ftpack 157B           __size_of_PGMReadNvm 000F              __end_of___lltoft 108D  
                   ??_RTXInit 007C                  ?_PGMWriteNvm 0070                     ??_RTXTask 007C  
                   ??_RTXTick 007C           __size_of_PGMSelLong 001D                        _INTCON 000B  
      OUTSetHTCDataNibble@val 0072           _OUTSetHTCDataNibble 1E58                     ??_SYSInit 0071  
                      _PMCON1 0195                        _PMCON2 0196                     ??_SYSTask 007C  
                      _INTIsr 0004                        _OSCCON 0099            _batt_gen_curr_sens 0123  
                      _INInit 1DDB                        _WDTCON 0097                        _SSPBUF 0211  
                      _RTXSup 108D                        _SYSInt 1CD9      __end_of_RTXUpdateDisplay 1000  
                 DPYSendStr@i 0024                        ___ftge 120E             RTXVisDec@maxDigit 005B  
               ?_DPYWriteByte 0075                        ___wmul 1E22                     ??___ftadd 0026  
              __CFG_STVREN$ON 0000                     ??___ftneg 0074                     ??___lldiv 0079  
                   ??___ftmul 0026                     ??___llmod 007A                     ??___ftsub 007C  
                   ??___fttol 0034                     ??___lwdiv 0075                     ??___lwmod 0075  
        ?_OUTSetHTCDataNibble 0070       __size_of_DPYInitDisplay 003E                        _tmrVis 013C  
         RTXReadPkt@volt4Calc 00E1                        ftoa@cp 0056         ___ftmul@f3_as_product 002B  
        __size_of_DLYDelay_ms 0019                        itoa@cp 002C          __size_of_DLYDelay_us 0011  
                   ?_CC1Write 0077                     ??_isdigit 0071                _batt_volt_sens 0126  
           __end_of_RTXRcvPkt 1D35                     ??_sprintf 0037             __end_of_RTXSndPkt 13B2  
           __end_of_RTXVisDec 174C       __end_of__initialization 0048            _batt_con_curr_sens 0120  
                  ___ftadd@f1 0020                    ___ftadd@f2 0023                    ___ftge@ff1 0071  
                  ___ftge@ff2 0074                    ___ftneg@f1 0071                    ___ftmul@f1 0020  
                  ___ftmul@f2 0023          __size_of_DPYDrawChar 002C                    ___ftsub@f1 002D  
                  ___ftsub@f2 002A                    ___fttol@f1 0030                __pcstackCOMMON 0070  
              ??_DPYWriteByte 0076                  __pidataBANK2 1D55                  __pidataBANK3 1110  
         __size_of_RTXReadPkt 01BC                    ___lltoft@c 0020           __size_of_RTXSelDown 001E  
             NVMWrite@rowAddr 0060         ??_OUTSetHTCDataNibble 0071                     ?_NVMWrite 0071  
             CC1Strobe@cc1Stb 0079          __size_of_DPYSendChar 0009                     ?_SPIWrite 0071  
                  CC1Read@len 007B                    CC1Read@dst 0079                    ??_CC1Write 0079  
                CC1Write@addr 007A             RTXReadPkt@valBatt 00E9                  DPYDrawChar@i 0022  
                DPYDrawChar@p 0078            RTXUpdateDisplay@iR 00E0                  ??_DPYSendStr 0023  
                sprintf@width 0044                    __pbssBANK0 0069                    __pbssBANK1 00EC  
                  __pbssBANK2 0120                    __pbssBANK3 01CF                       ?_INTIsr 0070  
                     ?_INInit 0070               __CFG_VCAPEN$OFF 0000                       ?_RTXSup 0070  
                     ?_SYSInt 0070                     INInit@sta 0072          __size_of_PGMCheckNvm 000C  
                  __pmaintext 1312                       ?___ftge 0071                  ??_PGMReadNvm 0078  
             CC1Write@cc1Addr 007B                       ?___wmul 0071                  ??_PGMSelLong 0066  
                  __pintentry 0004                  ?_RTXSendRPgm 0027                       _CC1Init 11D5  
                     _CC1Read 1F25            __end_of_DPYSendStr 1312             _u_in_sta_currTask 006D  
                   ?___ftpack 0071                    ??_NVMWrite 0075                     ?___lltoft 0020  
                  ??_SPIWrite 0074                       _DINInit 1D66                       _DINTick 1FD9  
                     _DINTask 1E91                       _DPYInit 1D8A                       _PGMInit 1DB1  
        __size_of_PGMNvmReset 0012                       _SSPCON1 0215                       _SSPCON2 0216  
                     _NVMInit 1D02                       _NVMRead 1FB2                       _SPIInit 1EE9  
                     _SPIRead 1F8E                       _SSPSTAT 0214                       _OUTInit 1DF2  
                DPYSendChar@c 0079               DPYDrawChar@addr 0020                       _RTXInit 145B  
                DPYSetCur@col 0078                       _RTXTick 113F                       _RTXTask 1CDF  
                DPYSetCur@row 007A            __end_of_PGMReadNvm 1010                       _SYSInit 1F47  
                     _SYSTask 1E3D            __end_of_PGMSelLong 1ECB                     _CC1Strobe 1D9D  
             __size_of_INTIsr 000D               __size_of_INInit 0017          __size_of_PGMWriteNvm 000F  
             __size_of_RTXSup 002B               __size_of_SYSInt 0006                     NVMWrite@i 0062  
                   NVMWrite@j 0064                     SPIWrite@i 0076               __size_of___ftge 003B  
                     ___ftadd 08FC                  RTXInit@state 0066                       ___ftneg 1CF1  
                     ___lldiv 13B2               __size_of___wmul 001B                       ___ftmul 174C  
                     ___llmod 1289                       ___ftsub 1ECB                       ___fttol 157B  
                     ___lwdiv 11A1                       ___lwmod 10E4                _DPYInitDisplay 0801  
                  ??___ftpack 0076                    ??___lltoft 0079                       __ptext1 1E3D  
                     __ptext2 113F                       __ptext3 1F07                       __ptext4 1EAE  
                     __ptext5 1FD9                       __ptext6 1F47                       __ptext7 1EE9  
                     __ptext8 1CDF                       __ptext9 09F2                       _picBatt 015C  
                     _dpowers 3900                       _isdigit 1D19                       _pgm_cfg 0155  
                ??_RTXReadPkt 0066                  ??_RTXSelDown 0066          __end_of_DPYWriteByte 145B  
                     _sprintf 0BAE                       clrloop0 1CEC                       _rtx_flg 00EC  
OUTSetHTCDataNibble@dataToSet 0073                  RTXRcvPkt@len 0023                  RTXRcvPkt@dst 0025  
        end_of_initialization 0048                       ftoa@buf 01CF                    _u_in_ev_up 00ED  
                     ftoa@rem 004E                     _DPYIsBusy 1249                    ?_CC1Strobe 0070  
                     itoa@buf 002D                       init_ram 1CE5                       itoa@val 0028  
                   _DPYSetCur 1DC6                       initloop 1CE6                  RTXSndPkt@len 0023  
                RTXSndPkt@src 0026               ___lldiv@divisor 0071             ?_RTXUpdateDisplay 0070  
             ___lldiv@counter 0024            ??_RTXUpdateDisplay 0062        __end_of_DPYInitDisplay 083F  
                  _tmrDbncSel 0069                       psplit$0 250057                  RTXVisDec@val 0057  
                __pstringtext 3900            __end_of_RTXReadPkt 0BAE                       utoa@buf 0027  
                     utoa@val 0020            __end_of_RTXSelDown 1F25                    DINInit@sta 0071  
                   _PORTAbits 000C                     _PORTBbits 000D             DPYWriteNibble@val 0075  
                  _tmrLongSel 013A              __CFG_FOSC$INTOSC 0000       __size_of_DPYWriteNibble 0032  
           __size_of_CC1Write 001F                    _visTypeDpy 00EE                   NVMRead@addr 0071  
                 NVMRead@dest 0073                    ?_DPYIsBusy 0070                     _RTXRcvPkt 1D27  
                  ?_DPYSetCur 0078                     _RTXSndPkt 1360                     _RTXVisDec 16A5  
              __end_of_INTIsr 0011                __end_of_INInit 1DF2           _nvm_pgm_cfg_absaddr 3820  
              __end_of_RTXSup 10B8                __end_of_SYSInt 1CDF                _tmrCalibration 0138  
                 ___ftmul@exp 002A               ?_DPYInitDisplay 0070                DLYDelay_ms@val 0071  
              DLYDelay_us@val 0071                __end_of___ftge 1249                __end_of___wmul 1E3D  
               ??_DLYDelay_ms 0073                 ??_DLYDelay_us 0073          __size_of_RTXSendRPgm 0029  
              DPYSendStr@data 0021                  SYSInit@state 0072             __size_of_NVMWrite 00BD  
           __size_of_SPIWrite 001D           start_initialization 0013               RTXSendRPgm@type 0027  
                  ftoa@status 004C            RTXReadPkt@dev_type 00E5                   CC1Read@addr 0021  
                 NVMWrite@len 0074                      ??_INTIsr 0070                      ??_INInit 0071  
                 ??_CC1Strobe 0077                    DPYInit@sta 0024                    ?_RTXRcvPkt 0023  
                  ?_RTXSndPkt 0023                    ?_RTXVisDec 0057                 ??_DPYDrawChar 0079  
             ___llmod@divisor 0025               ___llmod@counter 007B                      ??_RTXSup 007C  
                    ??_SYSInt 0070                CC1Read@cc1Addr 0022   __end_of_OUTSetHTCDataNibble 1E74  
         RTXUpdateDisplay@val 00DF                      ??___ftge 0077                      ??___wmul 0075  
               ??_DPYSendChar 0078                      ?_CC1Init 0070                      ?_CC1Read 0079  
                 __pdataBANK2 015C                   __pdataBANK3 01A0                   SPIWrite@len 0073  
                    ?_DINInit 0070                      ?_DINTask 0070                      ?_DINTick 0070  
       __size_of_DPYWriteByte 0056             __size_of___ftpack 0064             __size_of___lltoft 002B  
                 __pbssCOMMON 007C                      ?_DPYInit 0070                     ___latbits 0003  
               __pcstackBANK0 0020                 __pcstackBANK1 00A0           __end_of_DLYDelay_ms 1E22  
         __end_of_DLYDelay_us 1D55                      ?_PGMInit 0070                  _isdigit$1177 0071  
                    ?_NVMInit 0070                      ?_NVMRead 0071                      ?_SPIInit 0070  
                    ?_SPIRead 0071                NVMWrite@source 0073                      ?_OUTInit 0070  
            RTXReadPkt@dev_id 00E4       RTXUpdateDisplay@strRow1 00CF       RTXUpdateDisplay@strRow2 00BF  
                PGMInit@state 007B                      ?_RTXInit 0070                      ?_RTXTask 0070  
                    ?_RTXTick 0070                   ??_DPYIsBusy 0075                   CC1Write@len 0078  
                    ?_SYSInit 0070                   CC1Write@src 0077                      ?_SYSTask 0070  
                 sprintf@flag 003D                   ??_DPYSetCur 0079                 ??_PGMCheckNvm 007B  
         __p_nvm_pgm_cfg_text 3820                   sprintf@prec 0046              ___lwdiv@dividend 0073  
         __end_of_DPYDrawChar 10E4                      ?___ftadd 0020                  _DPYWriteByte 1405  
                    ?___ftneg 0071                      ?___lldiv 0071                      ?___ftmul 0020  
                    ?___llmod 0025                      ?___ftsub 002A                      ?___fttol 0030  
                    ?___lwdiv 0071                      ?___lwmod 0071                     _gen_power 0132  
                   _u_SYS_STA 013E                     _con_power 012C              _u_in_sta_tmpTask 006E  
               ?_RTXSendRData 0027                      NVMRead@i 0077                 ??_PGMNvmReset 007A  
                    SPIRead@i 0078                      _CC1Write 07DF           __end_of_DPYSendChar 1D02  
                    ?_isdigit 0070                _DPYWriteNibble 116F              ___lwdiv@quotient 0076  
                  pnum$text18 0025                      ?_sprintf 002D                 ??_PGMWriteNvm 0078  
                   _u_flg_din 006A                   ??_RTXRcvPkt 0024                   ??_RTXSndPkt 0024  
              ___wmul@product 0075                      _LATAbits 010C                   ??_RTXVisDec 005D  
                   clear_ram0 1CEB                     _numRxByte 00EF                      _PIR1bits 0011  
                   _numTxByte 006F           __end_of_PGMCheckNvm 1D19              DPYWriteNibble@rs 0076  
              ??_RTXSendRData 0028              __size_of_CC1Init 0039              __size_of_CC1Read 0022  
                 _DLYDelay_ms 1E09                   _DLYDelay_us 1D44                      _NVMWrite 083F  
                    _SPIWrite 1E74             ___wmul@multiplier 0071                    NVMInit@sta 0071  
                  NVMRead@len 0074        __end_of_DPYWriteNibble 11A1     __size_of_RTXUpdateDisplay 0FB5  
               DPYSetCur@addr 007B              __size_of_DINInit 0012              __size_of_DINTask 001D  
            __size_of_DINTick 0027              __size_of_DPYInit 0013                RTXSendRData@id 0029  
                   _volt_sens 0135                    SPIRead@len 0073              __size_of_PGMInit 0015  
         __end_of_PGMNvmReset 1D8A                 DPYSendStr@col 0020                 DPYSendStr@len 0022  
            __size_of_NVMInit 000B                 DPYSendStr@row 0025              __size_of_NVMRead 0027  
            __size_of_SPIInit 001E              __size_of_SPIRead 0024                  _u_in_ev_down 006B  
                _u_in_ev_long 006C              __size_of_OUTInit 0017              __size_of_RTXInit 005A  
       RTXReadPkt@valVoltCurr 00E6              __size_of_RTXTask 0006              __size_of_RTXTick 0030  
            __size_of_SYSInit 0023              __size_of_SYSTask 001B              ??_DPYInitDisplay 007B  
                 _DPYDrawChar 10B8                    OUTInit@sta 0072           __end_of_PGMWriteNvm 1D44  
             RTXVisDec@offset 005C               RTXVisDec@posDec 00B2               RTXVisDec@strTmp 00A0  
             RTXVisDec@status 00B0                   _DPYSendChar 1CF9              __size_of___ftadd 00F6  
            __size_of___ftneg 0008              __size_of___lldiv 0053              __size_of___ftmul 00B4  
            __size_of___llmod 0043              __size_of___ftsub 001E              __size_of___fttol 0087  
            __size_of___lwdiv 0034              __size_of___lwmod 002C                      ___ftpack 1517  
                    ___lltoft 1062               ?_DPYWriteNibble 0075                 _gen_curr_sens 012F  
                  sprintf@val 003F              __size_of_isdigit 000E               ___lwdiv@divisor 0071  
             ___lwdiv@counter 0078                      __ptext10 108D                      __ptext11 1039  
                    __ptext20 14B5                      __ptext12 1010                      __ptext21 10E4  
                    __ptext13 1360                      __ptext30 1062                      __ptext22 11A1  
                    __ptext14 1D27                      __ptext31 157B                      __ptext23 16A5  
                    __ptext15 1F25                      __ptext40 1CF9                      __ptext32 1ECB  
                    __ptext24 1602                      __ptext16 1F8E                      __ptext41 1249  
                    __ptext33 08FC                      __ptext25 0BAE                      __ptext17 145B  
                    __ptext50 1D02                      __ptext42 1DB1                      __ptext34 1CF1  
                    __ptext26 1D19                      __ptext18 004B                      __ptext51 1DDB  
                    __ptext43 1001                      __ptext35 174C                      __ptext27 1E22  
                    __ptext19 1F6A                      __ptext60 1D66                      __ptext52 1D8A  
                    __ptext44 1FB2                      __ptext36 1517                      __ptext28 1289  
                    __ptext61 11D5                      __ptext53 0801                      __ptext45 1D0D  
                    __ptext37 120E                      __ptext29 13B2                      __ptext62 1E09  
                    __ptext54 116F                      __ptext46 1D78                      __ptext38 12CC  
                    __ptext63 07DF                      __ptext55 10B8                      __ptext47 1D35  
                    __ptext39 1DC6                      __ptext64 1D9D                      __ptext56 1405  
                    __ptext48 083F                      __ptext65 1E74                      __ptext57 1E58  
                    __ptext49 1DF2                      __ptext58 1D44                      __ptext67 1CD9  
                    __ptext59 1E91              __size_of_sprintf 01E3           __end_of_nvm_pgm_cfg 3840  
               __size_of_main 004E                 __size_of_ftoa 00A3                 __size_of_itoa 0024  
                 _PGMCheckNvm 1D0D                 __size_of_utoa 0062                    RTXVisDec@i 00B6  
                  RTXVisDec@j 00B5                    RTXVisDec@p 00B4               DPYWriteByte@val 0075  
               ??_RTXSendRPgm 0028                 RTXSendRPgm@id 0029                 _con_curr_sens 0129  
                 _PGMNvmReset 1D78                    _INTCONbits 000B            pnum$text18_split_1 0057  
              RTXVisDec@isDec 00B3                      itoa@base 002A                      isdigit@c 0072  
           DPYInitDisplay@tmp 0023                    _DPYSendStr 12CC                SPIWrite@srcPtr 0071  
                    intlevel1 0000                     sprintf@ap 003E                     sprintf@sp 0043  
                 _PGMWriteNvm 1D35                    _PMCON1bits 0195          __end_of_RTXSendRData 1039  
            ___lwmod@dividend 0073              ___lldiv@dividend 0075             __CFG_CLKOUTEN$OFF 0000  
              DPYWriteByte@rs 0077                    _PGMReadNvm 1001                    _PGMSelLong 1EAE  
__size_of_OUTSetHTCDataNibble 001C                 RTXVisDec@buff 005A                      utoa@base 0022  
                  _OPTION_REG 0095                      sprintf@c 0048                      sprintf@f 002D  
            _RTXUpdateDisplay 004B           __end_of_RTXSendRPgm 1062              ___lldiv@quotient 0020  
             ___lwmod@divisor 0071               ___lwmod@counter 0076                   _nvm_pgm_cfg 3820  
                  _SSPCONbits 0215  
