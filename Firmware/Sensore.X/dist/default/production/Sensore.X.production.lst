

Microchip Technology PIC LITE Macro Assembler V1.34 build -361300703 
                                                                                               Wed Oct 04 00:36:00 2017

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	_nvm_pgm_cfg_text,global,class=CODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	inittext,global,class=CODE,delta=2
    14                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text3,local,class=CODE,merge=1,delta=2
    21                           	psect	text4,local,class=CODE,merge=1,delta=2
    22                           	psect	text5,local,class=CODE,merge=1,delta=2
    23                           	psect	text6,local,class=CODE,merge=1,delta=2
    24                           	psect	text7,local,class=CODE,merge=1,delta=2
    25                           	psect	text8,local,class=CODE,merge=1,delta=2
    26                           	psect	text9,local,class=CODE,merge=1,delta=2
    27                           	psect	text10,local,class=CODE,merge=1,delta=2
    28                           	psect	text11,local,class=CODE,merge=1,delta=2
    29                           	psect	text12,local,class=CODE,merge=1,delta=2
    30                           	psect	text13,local,class=CODE,merge=1,delta=2
    31                           	psect	text14,local,class=CODE,merge=1,delta=2
    32                           	psect	text15,local,class=CODE,merge=1,delta=2
    33                           	psect	text16,local,class=CODE,merge=1,delta=2
    34                           	psect	text17,local,class=CODE,merge=1,delta=2
    35                           	psect	text18,local,class=CODE,merge=1,delta=2
    36                           	psect	text19,local,class=CODE,merge=1,delta=2
    37                           	psect	text20,local,class=CODE,merge=1,delta=2
    38                           	psect	text21,local,class=CODE,merge=1,delta=2
    39                           	psect	text22,local,class=CODE,merge=1,delta=2
    40                           	psect	text23,local,class=CODE,merge=1,delta=2
    41                           	psect	text24,local,class=CODE,merge=1,delta=2
    42                           	psect	text25,local,class=CODE,merge=1,delta=2
    43                           	psect	text26,local,class=CODE,merge=1,delta=2
    44                           	psect	text27,local,class=CODE,merge=1,delta=2
    45                           	psect	text28,local,class=CODE,merge=1,delta=2
    46                           	psect	text29,local,class=CODE,merge=1,delta=2
    47                           	psect	text30,local,class=CODE,merge=1,delta=2
    48                           	psect	text31,local,class=CODE,merge=1,delta=2
    49                           	psect	text32,local,class=CODE,merge=1,delta=2
    50                           	psect	text33,local,class=CODE,merge=1,delta=2
    51                           	psect	text34,local,class=CODE,merge=1,delta=2
    52                           	psect	text35,local,class=CODE,merge=1,delta=2
    53                           	psect	text36,local,class=CODE,merge=1,delta=2
    54                           	psect	text37,local,class=CODE,merge=1,delta=2
    55                           	psect	text38,local,class=CODE,merge=1,delta=2
    56                           	psect	text39,local,class=CODE,merge=1,delta=2
    57                           	psect	text40,local,class=CODE,merge=1,delta=2
    58                           	psect	text41,local,class=CODE,merge=1,delta=2
    59                           	psect	text42,local,class=CODE,merge=1,delta=2
    60                           	psect	text43,local,class=CODE,merge=1,delta=2
    61                           	psect	text44,local,class=CODE,merge=1,delta=2
    62                           	psect	text45,local,class=CODE,merge=1,delta=2
    63                           	psect	text46,local,class=CODE,merge=1,delta=2
    64                           	psect	text47,local,class=CODE,merge=1,delta=2
    65                           	psect	text48,local,class=CODE,merge=1,delta=2
    66                           	psect	text49,local,class=CODE,merge=1,delta=2
    67                           	psect	text50,local,class=CODE,merge=1,delta=2
    68                           	psect	text51,local,class=CODE,merge=1,delta=2
    69                           	psect	text52,local,class=CODE,merge=1,delta=2
    70                           	psect	text53,local,class=CODE,merge=1,delta=2
    71                           	psect	text54,local,class=CODE,merge=1,delta=2
    72                           	psect	text55,local,class=CODE,merge=1,delta=2
    73                           	psect	intentry,global,class=CODE,delta=2
    74                           	psect	text57,local,class=CODE,merge=1,delta=2
    75                           	dabs	1,0x620,48
    76                           	dabs	1,0x5A0,80
    77                           	dabs	1,0x528,72
    78                           	dabs	1,0x2328,0,_adc_vals
    79                           	dabs	1,0x7E,2
    80  0000                     	;# 
    81  0001                     	;# 
    82  0002                     	;# 
    83  0003                     	;# 
    84  0004                     	;# 
    85  0005                     	;# 
    86  0006                     	;# 
    87  0007                     	;# 
    88  0008                     	;# 
    89  0009                     	;# 
    90  000A                     	;# 
    91  000B                     	;# 
    92  000C                     	;# 
    93  000D                     	;# 
    94  000E                     	;# 
    95  0010                     	;# 
    96  0011                     	;# 
    97  0012                     	;# 
    98  0015                     	;# 
    99  0016                     	;# 
   100  0016                     	;# 
   101  0017                     	;# 
   102  0018                     	;# 
   103  0019                     	;# 
   104  001A                     	;# 
   105  001B                     	;# 
   106  001C                     	;# 
   107  008C                     	;# 
   108  008D                     	;# 
   109  008E                     	;# 
   110  0090                     	;# 
   111  0091                     	;# 
   112  0092                     	;# 
   113  0095                     	;# 
   114  0096                     	;# 
   115  0097                     	;# 
   116  0099                     	;# 
   117  009A                     	;# 
   118  009B                     	;# 
   119  009B                     	;# 
   120  009C                     	;# 
   121  009D                     	;# 
   122  009E                     	;# 
   123  010C                     	;# 
   124  010D                     	;# 
   125  010E                     	;# 
   126  0116                     	;# 
   127  0117                     	;# 
   128  011D                     	;# 
   129  018C                     	;# 
   130  018D                     	;# 
   131  018E                     	;# 
   132  0191                     	;# 
   133  0191                     	;# 
   134  0192                     	;# 
   135  0193                     	;# 
   136  0193                     	;# 
   137  0194                     	;# 
   138  0195                     	;# 
   139  0196                     	;# 
   140  0197                     	;# 
   141  0199                     	;# 
   142  019A                     	;# 
   143  019B                     	;# 
   144  019B                     	;# 
   145  019B                     	;# 
   146  019B                     	;# 
   147  019C                     	;# 
   148  019C                     	;# 
   149  019D                     	;# 
   150  019E                     	;# 
   151  019F                     	;# 
   152  020D                     	;# 
   153  0210                     	;# 
   154  0211                     	;# 
   155  0211                     	;# 
   156  0212                     	;# 
   157  0212                     	;# 
   158  0213                     	;# 
   159  0213                     	;# 
   160  0214                     	;# 
   161  0214                     	;# 
   162  0215                     	;# 
   163  0215                     	;# 
   164  0215                     	;# 
   165  0216                     	;# 
   166  0216                     	;# 
   167  0217                     	;# 
   168  0217                     	;# 
   169  0291                     	;# 
   170  0291                     	;# 
   171  0292                     	;# 
   172  0293                     	;# 
   173  0298                     	;# 
   174  0298                     	;# 
   175  0299                     	;# 
   176  029A                     	;# 
   177  0394                     	;# 
   178  0395                     	;# 
   179  0396                     	;# 
   180  0FE4                     	;# 
   181  0FE5                     	;# 
   182  0FE6                     	;# 
   183  0FE7                     	;# 
   184  0FE8                     	;# 
   185  0FE9                     	;# 
   186  0FEA                     	;# 
   187  0FEB                     	;# 
   188  0FED                     	;# 
   189  0FEE                     	;# 
   190  0FEF                     	;# 
   191  0000                     	;# 
   192  0001                     	;# 
   193  0002                     	;# 
   194  0003                     	;# 
   195  0004                     	;# 
   196  0005                     	;# 
   197  0006                     	;# 
   198  0007                     	;# 
   199  0008                     	;# 
   200  0009                     	;# 
   201  000A                     	;# 
   202  000B                     	;# 
   203  000C                     	;# 
   204  000D                     	;# 
   205  000E                     	;# 
   206  0010                     	;# 
   207  0011                     	;# 
   208  0012                     	;# 
   209  0015                     	;# 
   210  0016                     	;# 
   211  0016                     	;# 
   212  0017                     	;# 
   213  0018                     	;# 
   214  0019                     	;# 
   215  001A                     	;# 
   216  001B                     	;# 
   217  001C                     	;# 
   218  008C                     	;# 
   219  008D                     	;# 
   220  008E                     	;# 
   221  0090                     	;# 
   222  0091                     	;# 
   223  0092                     	;# 
   224  0095                     	;# 
   225  0096                     	;# 
   226  0097                     	;# 
   227  0099                     	;# 
   228  009A                     	;# 
   229  009B                     	;# 
   230  009B                     	;# 
   231  009C                     	;# 
   232  009D                     	;# 
   233  009E                     	;# 
   234  010C                     	;# 
   235  010D                     	;# 
   236  010E                     	;# 
   237  0116                     	;# 
   238  0117                     	;# 
   239  011D                     	;# 
   240  018C                     	;# 
   241  018D                     	;# 
   242  018E                     	;# 
   243  0191                     	;# 
   244  0191                     	;# 
   245  0192                     	;# 
   246  0193                     	;# 
   247  0193                     	;# 
   248  0194                     	;# 
   249  0195                     	;# 
   250  0196                     	;# 
   251  0197                     	;# 
   252  0199                     	;# 
   253  019A                     	;# 
   254  019B                     	;# 
   255  019B                     	;# 
   256  019B                     	;# 
   257  019B                     	;# 
   258  019C                     	;# 
   259  019C                     	;# 
   260  019D                     	;# 
   261  019E                     	;# 
   262  019F                     	;# 
   263  020D                     	;# 
   264  0210                     	;# 
   265  0211                     	;# 
   266  0211                     	;# 
   267  0212                     	;# 
   268  0212                     	;# 
   269  0213                     	;# 
   270  0213                     	;# 
   271  0214                     	;# 
   272  0214                     	;# 
   273  0215                     	;# 
   274  0215                     	;# 
   275  0215                     	;# 
   276  0216                     	;# 
   277  0216                     	;# 
   278  0217                     	;# 
   279  0217                     	;# 
   280  0291                     	;# 
   281  0291                     	;# 
   282  0292                     	;# 
   283  0293                     	;# 
   284  0298                     	;# 
   285  0298                     	;# 
   286  0299                     	;# 
   287  029A                     	;# 
   288  0394                     	;# 
   289  0395                     	;# 
   290  0396                     	;# 
   291  0FE4                     	;# 
   292  0FE5                     	;# 
   293  0FE6                     	;# 
   294  0FE7                     	;# 
   295  0FE8                     	;# 
   296  0FE9                     	;# 
   297  0FEA                     	;# 
   298  0FEB                     	;# 
   299  0FED                     	;# 
   300  0FEE                     	;# 
   301  0FEF                     	;# 
   302  0000                     	;# 
   303  0001                     	;# 
   304  0002                     	;# 
   305  0003                     	;# 
   306  0004                     	;# 
   307  0005                     	;# 
   308  0006                     	;# 
   309  0007                     	;# 
   310  0008                     	;# 
   311  0009                     	;# 
   312  000A                     	;# 
   313  000B                     	;# 
   314  000C                     	;# 
   315  000D                     	;# 
   316  000E                     	;# 
   317  0010                     	;# 
   318  0011                     	;# 
   319  0012                     	;# 
   320  0015                     	;# 
   321  0016                     	;# 
   322  0016                     	;# 
   323  0017                     	;# 
   324  0018                     	;# 
   325  0019                     	;# 
   326  001A                     	;# 
   327  001B                     	;# 
   328  001C                     	;# 
   329  008C                     	;# 
   330  008D                     	;# 
   331  008E                     	;# 
   332  0090                     	;# 
   333  0091                     	;# 
   334  0092                     	;# 
   335  0095                     	;# 
   336  0096                     	;# 
   337  0097                     	;# 
   338  0099                     	;# 
   339  009A                     	;# 
   340  009B                     	;# 
   341  009B                     	;# 
   342  009C                     	;# 
   343  009D                     	;# 
   344  009E                     	;# 
   345  010C                     	;# 
   346  010D                     	;# 
   347  010E                     	;# 
   348  0116                     	;# 
   349  0117                     	;# 
   350  011D                     	;# 
   351  018C                     	;# 
   352  018D                     	;# 
   353  018E                     	;# 
   354  0191                     	;# 
   355  0191                     	;# 
   356  0192                     	;# 
   357  0193                     	;# 
   358  0193                     	;# 
   359  0194                     	;# 
   360  0195                     	;# 
   361  0196                     	;# 
   362  0197                     	;# 
   363  0199                     	;# 
   364  019A                     	;# 
   365  019B                     	;# 
   366  019B                     	;# 
   367  019B                     	;# 
   368  019B                     	;# 
   369  019C                     	;# 
   370  019C                     	;# 
   371  019D                     	;# 
   372  019E                     	;# 
   373  019F                     	;# 
   374  020D                     	;# 
   375  0210                     	;# 
   376  0211                     	;# 
   377  0211                     	;# 
   378  0212                     	;# 
   379  0212                     	;# 
   380  0213                     	;# 
   381  0213                     	;# 
   382  0214                     	;# 
   383  0214                     	;# 
   384  0215                     	;# 
   385  0215                     	;# 
   386  0215                     	;# 
   387  0216                     	;# 
   388  0216                     	;# 
   389  0217                     	;# 
   390  0217                     	;# 
   391  0291                     	;# 
   392  0291                     	;# 
   393  0292                     	;# 
   394  0293                     	;# 
   395  0298                     	;# 
   396  0298                     	;# 
   397  0299                     	;# 
   398  029A                     	;# 
   399  0394                     	;# 
   400  0395                     	;# 
   401  0396                     	;# 
   402  0FE4                     	;# 
   403  0FE5                     	;# 
   404  0FE6                     	;# 
   405  0FE7                     	;# 
   406  0FE8                     	;# 
   407  0FE9                     	;# 
   408  0FEA                     	;# 
   409  0FEB                     	;# 
   410  0FED                     	;# 
   411  0FEE                     	;# 
   412  0FEF                     	;# 
   413  0000                     	;# 
   414  0001                     	;# 
   415  0002                     	;# 
   416  0003                     	;# 
   417  0004                     	;# 
   418  0005                     	;# 
   419  0006                     	;# 
   420  0007                     	;# 
   421  0008                     	;# 
   422  0009                     	;# 
   423  000A                     	;# 
   424  000B                     	;# 
   425  000C                     	;# 
   426  000D                     	;# 
   427  000E                     	;# 
   428  0010                     	;# 
   429  0011                     	;# 
   430  0012                     	;# 
   431  0015                     	;# 
   432  0016                     	;# 
   433  0016                     	;# 
   434  0017                     	;# 
   435  0018                     	;# 
   436  0019                     	;# 
   437  001A                     	;# 
   438  001B                     	;# 
   439  001C                     	;# 
   440  008C                     	;# 
   441  008D                     	;# 
   442  008E                     	;# 
   443  0090                     	;# 
   444  0091                     	;# 
   445  0092                     	;# 
   446  0095                     	;# 
   447  0096                     	;# 
   448  0097                     	;# 
   449  0099                     	;# 
   450  009A                     	;# 
   451  009B                     	;# 
   452  009B                     	;# 
   453  009C                     	;# 
   454  009D                     	;# 
   455  009E                     	;# 
   456  010C                     	;# 
   457  010D                     	;# 
   458  010E                     	;# 
   459  0116                     	;# 
   460  0117                     	;# 
   461  011D                     	;# 
   462  018C                     	;# 
   463  018D                     	;# 
   464  018E                     	;# 
   465  0191                     	;# 
   466  0191                     	;# 
   467  0192                     	;# 
   468  0193                     	;# 
   469  0193                     	;# 
   470  0194                     	;# 
   471  0195                     	;# 
   472  0196                     	;# 
   473  0197                     	;# 
   474  0199                     	;# 
   475  019A                     	;# 
   476  019B                     	;# 
   477  019B                     	;# 
   478  019B                     	;# 
   479  019B                     	;# 
   480  019C                     	;# 
   481  019C                     	;# 
   482  019D                     	;# 
   483  019E                     	;# 
   484  019F                     	;# 
   485  020D                     	;# 
   486  0210                     	;# 
   487  0211                     	;# 
   488  0211                     	;# 
   489  0212                     	;# 
   490  0212                     	;# 
   491  0213                     	;# 
   492  0213                     	;# 
   493  0214                     	;# 
   494  0214                     	;# 
   495  0215                     	;# 
   496  0215                     	;# 
   497  0215                     	;# 
   498  0216                     	;# 
   499  0216                     	;# 
   500  0217                     	;# 
   501  0217                     	;# 
   502  0291                     	;# 
   503  0291                     	;# 
   504  0292                     	;# 
   505  0293                     	;# 
   506  0298                     	;# 
   507  0298                     	;# 
   508  0299                     	;# 
   509  029A                     	;# 
   510  0394                     	;# 
   511  0395                     	;# 
   512  0396                     	;# 
   513  0FE4                     	;# 
   514  0FE5                     	;# 
   515  0FE6                     	;# 
   516  0FE7                     	;# 
   517  0FE8                     	;# 
   518  0FE9                     	;# 
   519  0FEA                     	;# 
   520  0FEB                     	;# 
   521  0FED                     	;# 
   522  0FEE                     	;# 
   523  0FEF                     	;# 
   524  0000                     	;# 
   525  0001                     	;# 
   526  0002                     	;# 
   527  0003                     	;# 
   528  0004                     	;# 
   529  0005                     	;# 
   530  0006                     	;# 
   531  0007                     	;# 
   532  0008                     	;# 
   533  0009                     	;# 
   534  000A                     	;# 
   535  000B                     	;# 
   536  000C                     	;# 
   537  000D                     	;# 
   538  000E                     	;# 
   539  0010                     	;# 
   540  0011                     	;# 
   541  0012                     	;# 
   542  0015                     	;# 
   543  0016                     	;# 
   544  0016                     	;# 
   545  0017                     	;# 
   546  0018                     	;# 
   547  0019                     	;# 
   548  001A                     	;# 
   549  001B                     	;# 
   550  001C                     	;# 
   551  008C                     	;# 
   552  008D                     	;# 
   553  008E                     	;# 
   554  0090                     	;# 
   555  0091                     	;# 
   556  0092                     	;# 
   557  0095                     	;# 
   558  0096                     	;# 
   559  0097                     	;# 
   560  0099                     	;# 
   561  009A                     	;# 
   562  009B                     	;# 
   563  009B                     	;# 
   564  009C                     	;# 
   565  009D                     	;# 
   566  009E                     	;# 
   567  010C                     	;# 
   568  010D                     	;# 
   569  010E                     	;# 
   570  0116                     	;# 
   571  0117                     	;# 
   572  011D                     	;# 
   573  018C                     	;# 
   574  018D                     	;# 
   575  018E                     	;# 
   576  0191                     	;# 
   577  0191                     	;# 
   578  0192                     	;# 
   579  0193                     	;# 
   580  0193                     	;# 
   581  0194                     	;# 
   582  0195                     	;# 
   583  0196                     	;# 
   584  0197                     	;# 
   585  0199                     	;# 
   586  019A                     	;# 
   587  019B                     	;# 
   588  019B                     	;# 
   589  019B                     	;# 
   590  019B                     	;# 
   591  019C                     	;# 
   592  019C                     	;# 
   593  019D                     	;# 
   594  019E                     	;# 
   595  019F                     	;# 
   596  020D                     	;# 
   597  0210                     	;# 
   598  0211                     	;# 
   599  0211                     	;# 
   600  0212                     	;# 
   601  0212                     	;# 
   602  0213                     	;# 
   603  0213                     	;# 
   604  0214                     	;# 
   605  0214                     	;# 
   606  0215                     	;# 
   607  0215                     	;# 
   608  0215                     	;# 
   609  0216                     	;# 
   610  0216                     	;# 
   611  0217                     	;# 
   612  0217                     	;# 
   613  0291                     	;# 
   614  0291                     	;# 
   615  0292                     	;# 
   616  0293                     	;# 
   617  0298                     	;# 
   618  0298                     	;# 
   619  0299                     	;# 
   620  029A                     	;# 
   621  0394                     	;# 
   622  0395                     	;# 
   623  0396                     	;# 
   624  0FE4                     	;# 
   625  0FE5                     	;# 
   626  0FE6                     	;# 
   627  0FE7                     	;# 
   628  0FE8                     	;# 
   629  0FE9                     	;# 
   630  0FEA                     	;# 
   631  0FEB                     	;# 
   632  0FED                     	;# 
   633  0FEE                     	;# 
   634  0FEF                     	;# 
   635  0000                     	;# 
   636  0001                     	;# 
   637  0002                     	;# 
   638  0003                     	;# 
   639  0004                     	;# 
   640  0005                     	;# 
   641  0006                     	;# 
   642  0007                     	;# 
   643  0008                     	;# 
   644  0009                     	;# 
   645  000A                     	;# 
   646  000B                     	;# 
   647  000C                     	;# 
   648  000D                     	;# 
   649  000E                     	;# 
   650  0010                     	;# 
   651  0011                     	;# 
   652  0012                     	;# 
   653  0015                     	;# 
   654  0016                     	;# 
   655  0016                     	;# 
   656  0017                     	;# 
   657  0018                     	;# 
   658  0019                     	;# 
   659  001A                     	;# 
   660  001B                     	;# 
   661  001C                     	;# 
   662  008C                     	;# 
   663  008D                     	;# 
   664  008E                     	;# 
   665  0090                     	;# 
   666  0091                     	;# 
   667  0092                     	;# 
   668  0095                     	;# 
   669  0096                     	;# 
   670  0097                     	;# 
   671  0099                     	;# 
   672  009A                     	;# 
   673  009B                     	;# 
   674  009B                     	;# 
   675  009C                     	;# 
   676  009D                     	;# 
   677  009E                     	;# 
   678  010C                     	;# 
   679  010D                     	;# 
   680  010E                     	;# 
   681  0116                     	;# 
   682  0117                     	;# 
   683  011D                     	;# 
   684  018C                     	;# 
   685  018D                     	;# 
   686  018E                     	;# 
   687  0191                     	;# 
   688  0191                     	;# 
   689  0192                     	;# 
   690  0193                     	;# 
   691  0193                     	;# 
   692  0194                     	;# 
   693  0195                     	;# 
   694  0196                     	;# 
   695  0197                     	;# 
   696  0199                     	;# 
   697  019A                     	;# 
   698  019B                     	;# 
   699  019B                     	;# 
   700  019B                     	;# 
   701  019B                     	;# 
   702  019C                     	;# 
   703  019C                     	;# 
   704  019D                     	;# 
   705  019E                     	;# 
   706  019F                     	;# 
   707  020D                     	;# 
   708  0210                     	;# 
   709  0211                     	;# 
   710  0211                     	;# 
   711  0212                     	;# 
   712  0212                     	;# 
   713  0213                     	;# 
   714  0213                     	;# 
   715  0214                     	;# 
   716  0214                     	;# 
   717  0215                     	;# 
   718  0215                     	;# 
   719  0215                     	;# 
   720  0216                     	;# 
   721  0216                     	;# 
   722  0217                     	;# 
   723  0217                     	;# 
   724  0291                     	;# 
   725  0291                     	;# 
   726  0292                     	;# 
   727  0293                     	;# 
   728  0298                     	;# 
   729  0298                     	;# 
   730  0299                     	;# 
   731  029A                     	;# 
   732  0394                     	;# 
   733  0395                     	;# 
   734  0396                     	;# 
   735  0FE4                     	;# 
   736  0FE5                     	;# 
   737  0FE6                     	;# 
   738  0FE7                     	;# 
   739  0FE8                     	;# 
   740  0FE9                     	;# 
   741  0FEA                     	;# 
   742  0FEB                     	;# 
   743  0FED                     	;# 
   744  0FEE                     	;# 
   745  0FEF                     	;# 
   746  0000                     	;# 
   747  0001                     	;# 
   748  0002                     	;# 
   749  0003                     	;# 
   750  0004                     	;# 
   751  0005                     	;# 
   752  0006                     	;# 
   753  0007                     	;# 
   754  0008                     	;# 
   755  0009                     	;# 
   756  000A                     	;# 
   757  000B                     	;# 
   758  000C                     	;# 
   759  000D                     	;# 
   760  000E                     	;# 
   761  0010                     	;# 
   762  0011                     	;# 
   763  0012                     	;# 
   764  0015                     	;# 
   765  0016                     	;# 
   766  0016                     	;# 
   767  0017                     	;# 
   768  0018                     	;# 
   769  0019                     	;# 
   770  001A                     	;# 
   771  001B                     	;# 
   772  001C                     	;# 
   773  008C                     	;# 
   774  008D                     	;# 
   775  008E                     	;# 
   776  0090                     	;# 
   777  0091                     	;# 
   778  0092                     	;# 
   779  0095                     	;# 
   780  0096                     	;# 
   781  0097                     	;# 
   782  0099                     	;# 
   783  009A                     	;# 
   784  009B                     	;# 
   785  009B                     	;# 
   786  009C                     	;# 
   787  009D                     	;# 
   788  009E                     	;# 
   789  010C                     	;# 
   790  010D                     	;# 
   791  010E                     	;# 
   792  0116                     	;# 
   793  0117                     	;# 
   794  011D                     	;# 
   795  018C                     	;# 
   796  018D                     	;# 
   797  018E                     	;# 
   798  0191                     	;# 
   799  0191                     	;# 
   800  0192                     	;# 
   801  0193                     	;# 
   802  0193                     	;# 
   803  0194                     	;# 
   804  0195                     	;# 
   805  0196                     	;# 
   806  0197                     	;# 
   807  0199                     	;# 
   808  019A                     	;# 
   809  019B                     	;# 
   810  019B                     	;# 
   811  019B                     	;# 
   812  019B                     	;# 
   813  019C                     	;# 
   814  019C                     	;# 
   815  019D                     	;# 
   816  019E                     	;# 
   817  019F                     	;# 
   818  020D                     	;# 
   819  0210                     	;# 
   820  0211                     	;# 
   821  0211                     	;# 
   822  0212                     	;# 
   823  0212                     	;# 
   824  0213                     	;# 
   825  0213                     	;# 
   826  0214                     	;# 
   827  0214                     	;# 
   828  0215                     	;# 
   829  0215                     	;# 
   830  0215                     	;# 
   831  0216                     	;# 
   832  0216                     	;# 
   833  0217                     	;# 
   834  0217                     	;# 
   835  0291                     	;# 
   836  0291                     	;# 
   837  0292                     	;# 
   838  0293                     	;# 
   839  0298                     	;# 
   840  0298                     	;# 
   841  0299                     	;# 
   842  029A                     	;# 
   843  0394                     	;# 
   844  0395                     	;# 
   845  0396                     	;# 
   846  0FE4                     	;# 
   847  0FE5                     	;# 
   848  0FE6                     	;# 
   849  0FE7                     	;# 
   850  0FE8                     	;# 
   851  0FE9                     	;# 
   852  0FEA                     	;# 
   853  0FEB                     	;# 
   854  0FED                     	;# 
   855  0FEE                     	;# 
   856  0FEF                     	;# 
   857  0000                     	;# 
   858  0001                     	;# 
   859  0002                     	;# 
   860  0003                     	;# 
   861  0004                     	;# 
   862  0005                     	;# 
   863  0006                     	;# 
   864  0007                     	;# 
   865  0008                     	;# 
   866  0009                     	;# 
   867  000A                     	;# 
   868  000B                     	;# 
   869  000C                     	;# 
   870  000D                     	;# 
   871  000E                     	;# 
   872  0010                     	;# 
   873  0011                     	;# 
   874  0012                     	;# 
   875  0015                     	;# 
   876  0016                     	;# 
   877  0016                     	;# 
   878  0017                     	;# 
   879  0018                     	;# 
   880  0019                     	;# 
   881  001A                     	;# 
   882  001B                     	;# 
   883  001C                     	;# 
   884  008C                     	;# 
   885  008D                     	;# 
   886  008E                     	;# 
   887  0090                     	;# 
   888  0091                     	;# 
   889  0092                     	;# 
   890  0095                     	;# 
   891  0096                     	;# 
   892  0097                     	;# 
   893  0099                     	;# 
   894  009A                     	;# 
   895  009B                     	;# 
   896  009B                     	;# 
   897  009C                     	;# 
   898  009D                     	;# 
   899  009E                     	;# 
   900  010C                     	;# 
   901  010D                     	;# 
   902  010E                     	;# 
   903  0116                     	;# 
   904  0117                     	;# 
   905  011D                     	;# 
   906  018C                     	;# 
   907  018D                     	;# 
   908  018E                     	;# 
   909  0191                     	;# 
   910  0191                     	;# 
   911  0192                     	;# 
   912  0193                     	;# 
   913  0193                     	;# 
   914  0194                     	;# 
   915  0195                     	;# 
   916  0196                     	;# 
   917  0197                     	;# 
   918  0199                     	;# 
   919  019A                     	;# 
   920  019B                     	;# 
   921  019B                     	;# 
   922  019B                     	;# 
   923  019B                     	;# 
   924  019C                     	;# 
   925  019C                     	;# 
   926  019D                     	;# 
   927  019E                     	;# 
   928  019F                     	;# 
   929  020D                     	;# 
   930  0210                     	;# 
   931  0211                     	;# 
   932  0211                     	;# 
   933  0212                     	;# 
   934  0212                     	;# 
   935  0213                     	;# 
   936  0213                     	;# 
   937  0214                     	;# 
   938  0214                     	;# 
   939  0215                     	;# 
   940  0215                     	;# 
   941  0215                     	;# 
   942  0216                     	;# 
   943  0216                     	;# 
   944  0217                     	;# 
   945  0217                     	;# 
   946  0291                     	;# 
   947  0291                     	;# 
   948  0292                     	;# 
   949  0293                     	;# 
   950  0298                     	;# 
   951  0298                     	;# 
   952  0299                     	;# 
   953  029A                     	;# 
   954  0394                     	;# 
   955  0395                     	;# 
   956  0396                     	;# 
   957  0FE4                     	;# 
   958  0FE5                     	;# 
   959  0FE6                     	;# 
   960  0FE7                     	;# 
   961  0FE8                     	;# 
   962  0FE9                     	;# 
   963  0FEA                     	;# 
   964  0FEB                     	;# 
   965  0FED                     	;# 
   966  0FEE                     	;# 
   967  0FEF                     	;# 
   968  0000                     	;# 
   969  0001                     	;# 
   970  0002                     	;# 
   971  0003                     	;# 
   972  0004                     	;# 
   973  0005                     	;# 
   974  0006                     	;# 
   975  0007                     	;# 
   976  0008                     	;# 
   977  0009                     	;# 
   978  000A                     	;# 
   979  000B                     	;# 
   980  000C                     	;# 
   981  000D                     	;# 
   982  000E                     	;# 
   983  0010                     	;# 
   984  0011                     	;# 
   985  0012                     	;# 
   986  0015                     	;# 
   987  0016                     	;# 
   988  0016                     	;# 
   989  0017                     	;# 
   990  0018                     	;# 
   991  0019                     	;# 
   992  001A                     	;# 
   993  001B                     	;# 
   994  001C                     	;# 
   995  008C                     	;# 
   996  008D                     	;# 
   997  008E                     	;# 
   998  0090                     	;# 
   999  0091                     	;# 
  1000  0092                     	;# 
  1001  0095                     	;# 
  1002  0096                     	;# 
  1003  0097                     	;# 
  1004  0099                     	;# 
  1005  009A                     	;# 
  1006  009B                     	;# 
  1007  009B                     	;# 
  1008  009C                     	;# 
  1009  009D                     	;# 
  1010  009E                     	;# 
  1011  010C                     	;# 
  1012  010D                     	;# 
  1013  010E                     	;# 
  1014  0116                     	;# 
  1015  0117                     	;# 
  1016  011D                     	;# 
  1017  018C                     	;# 
  1018  018D                     	;# 
  1019  018E                     	;# 
  1020  0191                     	;# 
  1021  0191                     	;# 
  1022  0192                     	;# 
  1023  0193                     	;# 
  1024  0193                     	;# 
  1025  0194                     	;# 
  1026  0195                     	;# 
  1027  0196                     	;# 
  1028  0197                     	;# 
  1029  0199                     	;# 
  1030  019A                     	;# 
  1031  019B                     	;# 
  1032  019B                     	;# 
  1033  019B                     	;# 
  1034  019B                     	;# 
  1035  019C                     	;# 
  1036  019C                     	;# 
  1037  019D                     	;# 
  1038  019E                     	;# 
  1039  019F                     	;# 
  1040  020D                     	;# 
  1041  0210                     	;# 
  1042  0211                     	;# 
  1043  0211                     	;# 
  1044  0212                     	;# 
  1045  0212                     	;# 
  1046  0213                     	;# 
  1047  0213                     	;# 
  1048  0214                     	;# 
  1049  0214                     	;# 
  1050  0215                     	;# 
  1051  0215                     	;# 
  1052  0215                     	;# 
  1053  0216                     	;# 
  1054  0216                     	;# 
  1055  0217                     	;# 
  1056  0217                     	;# 
  1057  0291                     	;# 
  1058  0291                     	;# 
  1059  0292                     	;# 
  1060  0293                     	;# 
  1061  0298                     	;# 
  1062  0298                     	;# 
  1063  0299                     	;# 
  1064  029A                     	;# 
  1065  0394                     	;# 
  1066  0395                     	;# 
  1067  0396                     	;# 
  1068  0FE4                     	;# 
  1069  0FE5                     	;# 
  1070  0FE6                     	;# 
  1071  0FE7                     	;# 
  1072  0FE8                     	;# 
  1073  0FE9                     	;# 
  1074  0FEA                     	;# 
  1075  0FEB                     	;# 
  1076  0FED                     	;# 
  1077  0FEE                     	;# 
  1078  0FEF                     	;# 
  1079  0000                     	;# 
  1080  0001                     	;# 
  1081  0002                     	;# 
  1082  0003                     	;# 
  1083  0004                     	;# 
  1084  0005                     	;# 
  1085  0006                     	;# 
  1086  0007                     	;# 
  1087  0008                     	;# 
  1088  0009                     	;# 
  1089  000A                     	;# 
  1090  000B                     	;# 
  1091  000C                     	;# 
  1092  000D                     	;# 
  1093  000E                     	;# 
  1094  0010                     	;# 
  1095  0011                     	;# 
  1096  0012                     	;# 
  1097  0015                     	;# 
  1098  0016                     	;# 
  1099  0016                     	;# 
  1100  0017                     	;# 
  1101  0018                     	;# 
  1102  0019                     	;# 
  1103  001A                     	;# 
  1104  001B                     	;# 
  1105  001C                     	;# 
  1106  008C                     	;# 
  1107  008D                     	;# 
  1108  008E                     	;# 
  1109  0090                     	;# 
  1110  0091                     	;# 
  1111  0092                     	;# 
  1112  0095                     	;# 
  1113  0096                     	;# 
  1114  0097                     	;# 
  1115  0099                     	;# 
  1116  009A                     	;# 
  1117  009B                     	;# 
  1118  009B                     	;# 
  1119  009C                     	;# 
  1120  009D                     	;# 
  1121  009E                     	;# 
  1122  010C                     	;# 
  1123  010D                     	;# 
  1124  010E                     	;# 
  1125  0116                     	;# 
  1126  0117                     	;# 
  1127  011D                     	;# 
  1128  018C                     	;# 
  1129  018D                     	;# 
  1130  018E                     	;# 
  1131  0191                     	;# 
  1132  0191                     	;# 
  1133  0192                     	;# 
  1134  0193                     	;# 
  1135  0193                     	;# 
  1136  0194                     	;# 
  1137  0195                     	;# 
  1138  0196                     	;# 
  1139  0197                     	;# 
  1140  0199                     	;# 
  1141  019A                     	;# 
  1142  019B                     	;# 
  1143  019B                     	;# 
  1144  019B                     	;# 
  1145  019B                     	;# 
  1146  019C                     	;# 
  1147  019C                     	;# 
  1148  019D                     	;# 
  1149  019E                     	;# 
  1150  019F                     	;# 
  1151  020D                     	;# 
  1152  0210                     	;# 
  1153  0211                     	;# 
  1154  0211                     	;# 
  1155  0212                     	;# 
  1156  0212                     	;# 
  1157  0213                     	;# 
  1158  0213                     	;# 
  1159  0214                     	;# 
  1160  0214                     	;# 
  1161  0215                     	;# 
  1162  0215                     	;# 
  1163  0215                     	;# 
  1164  0216                     	;# 
  1165  0216                     	;# 
  1166  0217                     	;# 
  1167  0217                     	;# 
  1168  0291                     	;# 
  1169  0291                     	;# 
  1170  0292                     	;# 
  1171  0293                     	;# 
  1172  0298                     	;# 
  1173  0298                     	;# 
  1174  0299                     	;# 
  1175  029A                     	;# 
  1176  0394                     	;# 
  1177  0395                     	;# 
  1178  0396                     	;# 
  1179  0FE4                     	;# 
  1180  0FE5                     	;# 
  1181  0FE6                     	;# 
  1182  0FE7                     	;# 
  1183  0FE8                     	;# 
  1184  0FE9                     	;# 
  1185  0FEA                     	;# 
  1186  0FEB                     	;# 
  1187  0FED                     	;# 
  1188  0FEE                     	;# 
  1189  0FEF                     	;# 
  1190  0000                     	;# 
  1191  0001                     	;# 
  1192  0002                     	;# 
  1193  0003                     	;# 
  1194  0004                     	;# 
  1195  0005                     	;# 
  1196  0006                     	;# 
  1197  0007                     	;# 
  1198  0008                     	;# 
  1199  0009                     	;# 
  1200  000A                     	;# 
  1201  000B                     	;# 
  1202  000C                     	;# 
  1203  000D                     	;# 
  1204  000E                     	;# 
  1205  0010                     	;# 
  1206  0011                     	;# 
  1207  0012                     	;# 
  1208  0015                     	;# 
  1209  0016                     	;# 
  1210  0016                     	;# 
  1211  0017                     	;# 
  1212  0018                     	;# 
  1213  0019                     	;# 
  1214  001A                     	;# 
  1215  001B                     	;# 
  1216  001C                     	;# 
  1217  008C                     	;# 
  1218  008D                     	;# 
  1219  008E                     	;# 
  1220  0090                     	;# 
  1221  0091                     	;# 
  1222  0092                     	;# 
  1223  0095                     	;# 
  1224  0096                     	;# 
  1225  0097                     	;# 
  1226  0099                     	;# 
  1227  009A                     	;# 
  1228  009B                     	;# 
  1229  009B                     	;# 
  1230  009C                     	;# 
  1231  009D                     	;# 
  1232  009E                     	;# 
  1233  010C                     	;# 
  1234  010D                     	;# 
  1235  010E                     	;# 
  1236  0116                     	;# 
  1237  0117                     	;# 
  1238  011D                     	;# 
  1239  018C                     	;# 
  1240  018D                     	;# 
  1241  018E                     	;# 
  1242  0191                     	;# 
  1243  0191                     	;# 
  1244  0192                     	;# 
  1245  0193                     	;# 
  1246  0193                     	;# 
  1247  0194                     	;# 
  1248  0195                     	;# 
  1249  0196                     	;# 
  1250  0197                     	;# 
  1251  0199                     	;# 
  1252  019A                     	;# 
  1253  019B                     	;# 
  1254  019B                     	;# 
  1255  019B                     	;# 
  1256  019B                     	;# 
  1257  019C                     	;# 
  1258  019C                     	;# 
  1259  019D                     	;# 
  1260  019E                     	;# 
  1261  019F                     	;# 
  1262  020D                     	;# 
  1263  0210                     	;# 
  1264  0211                     	;# 
  1265  0211                     	;# 
  1266  0212                     	;# 
  1267  0212                     	;# 
  1268  0213                     	;# 
  1269  0213                     	;# 
  1270  0214                     	;# 
  1271  0214                     	;# 
  1272  0215                     	;# 
  1273  0215                     	;# 
  1274  0215                     	;# 
  1275  0216                     	;# 
  1276  0216                     	;# 
  1277  0217                     	;# 
  1278  0217                     	;# 
  1279  0291                     	;# 
  1280  0291                     	;# 
  1281  0292                     	;# 
  1282  0293                     	;# 
  1283  0298                     	;# 
  1284  0298                     	;# 
  1285  0299                     	;# 
  1286  029A                     	;# 
  1287  0394                     	;# 
  1288  0395                     	;# 
  1289  0396                     	;# 
  1290  0FE4                     	;# 
  1291  0FE5                     	;# 
  1292  0FE6                     	;# 
  1293  0FE7                     	;# 
  1294  0FE8                     	;# 
  1295  0FE9                     	;# 
  1296  0FEA                     	;# 
  1297  0FEB                     	;# 
  1298  0FED                     	;# 
  1299  0FEE                     	;# 
  1300  0FEF                     	;# 
  1301  0000                     	;# 
  1302  0001                     	;# 
  1303  0002                     	;# 
  1304  0003                     	;# 
  1305  0004                     	;# 
  1306  0005                     	;# 
  1307  0006                     	;# 
  1308  0007                     	;# 
  1309  0008                     	;# 
  1310  0009                     	;# 
  1311  000A                     	;# 
  1312  000B                     	;# 
  1313  000C                     	;# 
  1314  000D                     	;# 
  1315  000E                     	;# 
  1316  0010                     	;# 
  1317  0011                     	;# 
  1318  0012                     	;# 
  1319  0015                     	;# 
  1320  0016                     	;# 
  1321  0016                     	;# 
  1322  0017                     	;# 
  1323  0018                     	;# 
  1324  0019                     	;# 
  1325  001A                     	;# 
  1326  001B                     	;# 
  1327  001C                     	;# 
  1328  008C                     	;# 
  1329  008D                     	;# 
  1330  008E                     	;# 
  1331  0090                     	;# 
  1332  0091                     	;# 
  1333  0092                     	;# 
  1334  0095                     	;# 
  1335  0096                     	;# 
  1336  0097                     	;# 
  1337  0099                     	;# 
  1338  009A                     	;# 
  1339  009B                     	;# 
  1340  009B                     	;# 
  1341  009C                     	;# 
  1342  009D                     	;# 
  1343  009E                     	;# 
  1344  010C                     	;# 
  1345  010D                     	;# 
  1346  010E                     	;# 
  1347  0116                     	;# 
  1348  0117                     	;# 
  1349  011D                     	;# 
  1350  018C                     	;# 
  1351  018D                     	;# 
  1352  018E                     	;# 
  1353  0191                     	;# 
  1354  0191                     	;# 
  1355  0192                     	;# 
  1356  0193                     	;# 
  1357  0193                     	;# 
  1358  0194                     	;# 
  1359  0195                     	;# 
  1360  0196                     	;# 
  1361  0197                     	;# 
  1362  0199                     	;# 
  1363  019A                     	;# 
  1364  019B                     	;# 
  1365  019B                     	;# 
  1366  019B                     	;# 
  1367  019B                     	;# 
  1368  019C                     	;# 
  1369  019C                     	;# 
  1370  019D                     	;# 
  1371  019E                     	;# 
  1372  019F                     	;# 
  1373  020D                     	;# 
  1374  0210                     	;# 
  1375  0211                     	;# 
  1376  0211                     	;# 
  1377  0212                     	;# 
  1378  0212                     	;# 
  1379  0213                     	;# 
  1380  0213                     	;# 
  1381  0214                     	;# 
  1382  0214                     	;# 
  1383  0215                     	;# 
  1384  0215                     	;# 
  1385  0215                     	;# 
  1386  0216                     	;# 
  1387  0216                     	;# 
  1388  0217                     	;# 
  1389  0217                     	;# 
  1390  0291                     	;# 
  1391  0291                     	;# 
  1392  0292                     	;# 
  1393  0293                     	;# 
  1394  0298                     	;# 
  1395  0298                     	;# 
  1396  0299                     	;# 
  1397  029A                     	;# 
  1398  0394                     	;# 
  1399  0395                     	;# 
  1400  0396                     	;# 
  1401  0FE4                     	;# 
  1402  0FE5                     	;# 
  1403  0FE6                     	;# 
  1404  0FE7                     	;# 
  1405  0FE8                     	;# 
  1406  0FE9                     	;# 
  1407  0FEA                     	;# 
  1408  0FEB                     	;# 
  1409  0FED                     	;# 
  1410  0FEE                     	;# 
  1411  0FEF                     	;# 
  1412  0000                     	;# 
  1413  0001                     	;# 
  1414  0002                     	;# 
  1415  0003                     	;# 
  1416  0004                     	;# 
  1417  0005                     	;# 
  1418  0006                     	;# 
  1419  0007                     	;# 
  1420  0008                     	;# 
  1421  0009                     	;# 
  1422  000A                     	;# 
  1423  000B                     	;# 
  1424  000C                     	;# 
  1425  000D                     	;# 
  1426  000E                     	;# 
  1427  0010                     	;# 
  1428  0011                     	;# 
  1429  0012                     	;# 
  1430  0015                     	;# 
  1431  0016                     	;# 
  1432  0016                     	;# 
  1433  0017                     	;# 
  1434  0018                     	;# 
  1435  0019                     	;# 
  1436  001A                     	;# 
  1437  001B                     	;# 
  1438  001C                     	;# 
  1439  008C                     	;# 
  1440  008D                     	;# 
  1441  008E                     	;# 
  1442  0090                     	;# 
  1443  0091                     	;# 
  1444  0092                     	;# 
  1445  0095                     	;# 
  1446  0096                     	;# 
  1447  0097                     	;# 
  1448  0099                     	;# 
  1449  009A                     	;# 
  1450  009B                     	;# 
  1451  009B                     	;# 
  1452  009C                     	;# 
  1453  009D                     	;# 
  1454  009E                     	;# 
  1455  010C                     	;# 
  1456  010D                     	;# 
  1457  010E                     	;# 
  1458  0116                     	;# 
  1459  0117                     	;# 
  1460  011D                     	;# 
  1461  018C                     	;# 
  1462  018D                     	;# 
  1463  018E                     	;# 
  1464  0191                     	;# 
  1465  0191                     	;# 
  1466  0192                     	;# 
  1467  0193                     	;# 
  1468  0193                     	;# 
  1469  0194                     	;# 
  1470  0195                     	;# 
  1471  0196                     	;# 
  1472  0197                     	;# 
  1473  0199                     	;# 
  1474  019A                     	;# 
  1475  019B                     	;# 
  1476  019B                     	;# 
  1477  019B                     	;# 
  1478  019B                     	;# 
  1479  019C                     	;# 
  1480  019C                     	;# 
  1481  019D                     	;# 
  1482  019E                     	;# 
  1483  019F                     	;# 
  1484  020D                     	;# 
  1485  0210                     	;# 
  1486  0211                     	;# 
  1487  0211                     	;# 
  1488  0212                     	;# 
  1489  0212                     	;# 
  1490  0213                     	;# 
  1491  0213                     	;# 
  1492  0214                     	;# 
  1493  0214                     	;# 
  1494  0215                     	;# 
  1495  0215                     	;# 
  1496  0215                     	;# 
  1497  0216                     	;# 
  1498  0216                     	;# 
  1499  0217                     	;# 
  1500  0217                     	;# 
  1501  0291                     	;# 
  1502  0291                     	;# 
  1503  0292                     	;# 
  1504  0293                     	;# 
  1505  0298                     	;# 
  1506  0298                     	;# 
  1507  0299                     	;# 
  1508  029A                     	;# 
  1509  0394                     	;# 
  1510  0395                     	;# 
  1511  0396                     	;# 
  1512  0FE4                     	;# 
  1513  0FE5                     	;# 
  1514  0FE6                     	;# 
  1515  0FE7                     	;# 
  1516  0FE8                     	;# 
  1517  0FE9                     	;# 
  1518  0FEA                     	;# 
  1519  0FEB                     	;# 
  1520  0FED                     	;# 
  1521  0FEE                     	;# 
  1522  0FEF                     	;# 
  1523  0000                     	;# 
  1524  0001                     	;# 
  1525  0002                     	;# 
  1526  0003                     	;# 
  1527  0004                     	;# 
  1528  0005                     	;# 
  1529  0006                     	;# 
  1530  0007                     	;# 
  1531  0008                     	;# 
  1532  0009                     	;# 
  1533  000A                     	;# 
  1534  000B                     	;# 
  1535  000C                     	;# 
  1536  000D                     	;# 
  1537  000E                     	;# 
  1538  0010                     	;# 
  1539  0011                     	;# 
  1540  0012                     	;# 
  1541  0015                     	;# 
  1542  0016                     	;# 
  1543  0016                     	;# 
  1544  0017                     	;# 
  1545  0018                     	;# 
  1546  0019                     	;# 
  1547  001A                     	;# 
  1548  001B                     	;# 
  1549  001C                     	;# 
  1550  008C                     	;# 
  1551  008D                     	;# 
  1552  008E                     	;# 
  1553  0090                     	;# 
  1554  0091                     	;# 
  1555  0092                     	;# 
  1556  0095                     	;# 
  1557  0096                     	;# 
  1558  0097                     	;# 
  1559  0099                     	;# 
  1560  009A                     	;# 
  1561  009B                     	;# 
  1562  009B                     	;# 
  1563  009C                     	;# 
  1564  009D                     	;# 
  1565  009E                     	;# 
  1566  010C                     	;# 
  1567  010D                     	;# 
  1568  010E                     	;# 
  1569  0116                     	;# 
  1570  0117                     	;# 
  1571  011D                     	;# 
  1572  018C                     	;# 
  1573  018D                     	;# 
  1574  018E                     	;# 
  1575  0191                     	;# 
  1576  0191                     	;# 
  1577  0192                     	;# 
  1578  0193                     	;# 
  1579  0193                     	;# 
  1580  0194                     	;# 
  1581  0195                     	;# 
  1582  0196                     	;# 
  1583  0197                     	;# 
  1584  0199                     	;# 
  1585  019A                     	;# 
  1586  019B                     	;# 
  1587  019B                     	;# 
  1588  019B                     	;# 
  1589  019B                     	;# 
  1590  019C                     	;# 
  1591  019C                     	;# 
  1592  019D                     	;# 
  1593  019E                     	;# 
  1594  019F                     	;# 
  1595  020D                     	;# 
  1596  0210                     	;# 
  1597  0211                     	;# 
  1598  0211                     	;# 
  1599  0212                     	;# 
  1600  0212                     	;# 
  1601  0213                     	;# 
  1602  0213                     	;# 
  1603  0214                     	;# 
  1604  0214                     	;# 
  1605  0215                     	;# 
  1606  0215                     	;# 
  1607  0215                     	;# 
  1608  0216                     	;# 
  1609  0216                     	;# 
  1610  0217                     	;# 
  1611  0217                     	;# 
  1612  0291                     	;# 
  1613  0291                     	;# 
  1614  0292                     	;# 
  1615  0293                     	;# 
  1616  0298                     	;# 
  1617  0298                     	;# 
  1618  0299                     	;# 
  1619  029A                     	;# 
  1620  0394                     	;# 
  1621  0395                     	;# 
  1622  0396                     	;# 
  1623  0FE4                     	;# 
  1624  0FE5                     	;# 
  1625  0FE6                     	;# 
  1626  0FE7                     	;# 
  1627  0FE8                     	;# 
  1628  0FE9                     	;# 
  1629  0FEA                     	;# 
  1630  0FEB                     	;# 
  1631  0FED                     	;# 
  1632  0FEE                     	;# 
  1633  0FEF                     	;_adc_vals
  1634                           
  1635                           	psect	idataBANK1
  1636  0895                     __pidataBANK1:	
  1637                           
  1638                           ;initializer for _cc1PaTable
  1639  0895  3403               	retlw	3
  1640  0896  340F               	retlw	15
  1641  0897  341E               	retlw	30
  1642  0898  3427               	retlw	39
  1643  0899  3450               	retlw	80
  1644  089A  3481               	retlw	129
  1645  089B  34CB               	retlw	203
  1646  089C  34C2               	retlw	194
  1647                           
  1648                           	psect	idataBANK2
  1649  0C2A                     __pidataBANK2:	
  1650                           
  1651                           ;initializer for _cc1InitVal
  1652  0C2A  3447               	retlw	71
  1653  0C2B  3446               	retlw	70
  1654  0C2C  344E               	retlw	78
  1655  0C2D  340B               	retlw	11
  1656  0C2E  34D3               	retlw	211
  1657  0C2F  3491               	retlw	145
  1658  0C30  340B               	retlw	11
  1659  0C31  3408               	retlw	8
  1660  0C32  3404               	retlw	4
  1661  0C33  3400               	retlw	0
  1662  0C34  3400               	retlw	0
  1663  0C35  3406               	retlw	6
  1664  0C36  3400               	retlw	0
  1665  0C37  3421               	retlw	33
  1666  0C38  3463               	retlw	99
  1667  0C39  3491               	retlw	145
  1668  0C3A  34CA               	retlw	202
  1669  0C3B  3483               	retlw	131
  1670  0C3C  3402               	retlw	2
  1671  0C3D  3402               	retlw	2
  1672  0C3E  343B               	retlw	59
  1673  0C3F  3434               	retlw	52
  1674  0C40  3407               	retlw	7
  1675  0C41  343F               	retlw	63
  1676  0C42  3408               	retlw	8
  1677  0C43  3416               	retlw	22
  1678  0C44  346C               	retlw	108
  1679  0C45  3403               	retlw	3
  1680  0C46  3440               	retlw	64
  1681  0C47  3491               	retlw	145
  1682  0C48  3487               	retlw	135
  1683  0C49  346B               	retlw	107
  1684  0C4A  34FB               	retlw	251
  1685  0C4B  3456               	retlw	86
  1686  0C4C  3416               	retlw	22
  1687  0C4D  34E9               	retlw	233
  1688  0C4E  342A               	retlw	42
  1689  0C4F  3400               	retlw	0
  1690  0C50  341F               	retlw	31
  1691  0C51  3441               	retlw	65
  1692  0C52  3400               	retlw	0
  1693  0C53  3459               	retlw	89
  1694  0C54  347F               	retlw	127
  1695  0C55  343F               	retlw	63
  1696  0C56  3481               	retlw	129
  1697  0C57  3435               	retlw	53
  1698  0C58  3409               	retlw	9
  1699  3820                     _nvm_pgm_cfg_absaddr	set	14368
  1700  3820                     _nvm_pgm_cfg_absaddr	set	14368
  1701                           
  1702                           	psect	_nvm_pgm_cfg_text
  1703  3820                     __p_nvm_pgm_cfg_text:	
  1704  3820                     _nvm_pgm_cfg:	
  1705  3820  345C               	retlw	92
  1706  3821  34C5               	retlw	197
  1707  3822  3400               	retlw	0
  1708  3823  3400               	retlw	0
  1709  3824  3400               	retlw	0
  1710  3825  3400               	retlw	0
  1711  3826  3400               	retlw	0
  1712  3827  3400               	retlw	0
  1713  3828  3400               	retlw	0
  1714  3829  3400               	retlw	0
  1715  382A  3400               	retlw	0
  1716  382B  3400               	retlw	0
  1717  382C  3400               	retlw	0
  1718  382D  3400               	retlw	0
  1719  382E  3400               	retlw	0
  1720  382F  3400               	retlw	0
  1721  3830  3400               	retlw	0
  1722  3831  3400               	retlw	0
  1723  3832  3400               	retlw	0
  1724  3833  3400               	retlw	0
  1725  3834  3400               	retlw	0
  1726  3835  3400               	retlw	0
  1727  3836  3400               	retlw	0
  1728  3837  3400               	retlw	0
  1729  3838  3400               	retlw	0
  1730  3839  3400               	retlw	0
  1731  383A  3400               	retlw	0
  1732  383B  3400               	retlw	0
  1733  383C  3400               	retlw	0
  1734  383D  3400               	retlw	0
  1735  383E  3400               	retlw	0
  1736  383F  3400               	retlw	0
  1737  3840                     __end_of_nvm_pgm_cfg:	
  1738  000B                     _INTCON	set	11
  1739  000B                     _INTCONbits	set	11
  1740  0011                     _PIR1	set	17
  1741  0011                     _PIR1bits	set	17
  1742  0012                     _PIR2	set	18
  1743  000C                     _PORTA	set	12
  1744  000D                     _PORTBbits	set	13
  1745  000E                     _PORTC	set	14
  1746  0018                     _T1CON	set	24
  1747  0015                     _TMR0	set	21
  1748  0017                     _TMR1H	set	23
  1749  0016                     _TMR1L	set	22
  1750  009D                     _ADCON0	set	157
  1751  009D                     _ADCON0bits	set	157
  1752  009E                     _ADCON1	set	158
  1753  009C                     _ADRESH	set	156
  1754  009B                     _ADRESL	set	155
  1755  0095                     _OPTION_REG	set	149
  1756  0099                     _OSCCON	set	153
  1757  0091                     _PIE1	set	145
  1758  0092                     _PIE2	set	146
  1759  008C                     _TRISA	set	140
  1760  008D                     _TRISB	set	141
  1761  008E                     _TRISC	set	142
  1762  0097                     _WDTCON	set	151
  1763  0117                     _FVRCON	set	279
  1764  010C                     _LATAbits	set	268
  1765  010E                     _LATCbits	set	270
  1766  0191                     _PMADR	set	401
  1767  0193                     _PMDAT	set	403
  1768  018C                     _ANSELA	set	396
  1769  018D                     _ANSELB	set	397
  1770  018E                     _ANSELC	set	398
  1771  0195                     _PMCON1	set	405
  1772  0195                     _PMCON1bits	set	405
  1773  0196                     _PMCON2	set	406
  1774  0211                     _SSPBUF	set	529
  1775  0215                     _SSPCON1	set	533
  1776  0216                     _SSPCON2	set	534
  1777  0215                     _SSPCONbits	set	533
  1778  0214                     _SSPSTAT	set	532
  1779  020D                     _WPUB	set	525
  1780  0396                     _IOCBFbits	set	918
  1781  0395                     _IOCBN	set	917
  1782  0394                     _IOCBP	set	916
  1783                           
  1784                           ; #config settings
  1785  0000                     
  1786                           	psect	cinit
  1787  0016                     start_initialization:	
  1788  0016                     __initialization:		;BIGRAM
  1789                           
  1790                           ; Clear objects allocated to BIGRAM
  1791  0016  3028               	movlw	low (0+9000)
  1792  0017  0084               	movwf	4
  1793  0018  3023               	movlw	high (0+9000)
  1794  0019  0085               	movwf	5
  1795  001A  30C8               	movlw	200
  1796  001B  00FE               	movwf	btemp
  1797  001C  3000               	movlw	0
  1798  001D  00FF               	movwf	btemp+1
  1799  001E  3188  20CB  3180   	fcall	clear_ram0
  1800                           
  1801                           ; Clear objects allocated to COMMON
  1802  0021  01FC               	clrf	__pbssCOMMON& (0+127)
  1803                           
  1804                           ; Clear objects allocated to BANK1
  1805  0022  30A0               	movlw	low __pbssBANK1
  1806  0023  0084               	movwf	4
  1807  0024  3000               	movlw	high __pbssBANK1
  1808  0025  0085               	movwf	5
  1809  0026  3036               	movlw	54
  1810  0027  00FE               	movwf	btemp
  1811  0028  3000               	movlw	0
  1812  0029  00FF               	movwf	btemp+1
  1813  002A  3188  20CB  3180   	fcall	clear_ram0
  1814                           
  1815                           ; Initialize objects allocated to BANK1
  1816  002D  3095               	movlw	low __pidataBANK1
  1817  002E  0084               	movwf	4
  1818  002F  3088               	movlw	(high __pidataBANK1)| (0+128)
  1819  0030  0085               	movwf	5
  1820  0031  30D6               	movlw	low __pdataBANK1
  1821  0032  0086               	movwf	6
  1822  0033  3000               	movlw	high __pdataBANK1
  1823  0034  0087               	movwf	7
  1824  0035  3000               	movlw	0
  1825  0036  00FF               	movwf	btemp+1
  1826  0037  3008               	movlw	8
  1827  0038  3188  20BF  3180   	fcall	init_ram
  1828                           
  1829                           ; Initialize objects allocated to BANK2
  1830  003B  302A               	movlw	low __pidataBANK2
  1831  003C  0084               	movwf	4
  1832  003D  308C               	movlw	(high __pidataBANK2)| (0+128)
  1833  003E  0085               	movwf	5
  1834  003F  3020               	movlw	low __pdataBANK2
  1835  0040  0086               	movwf	6
  1836  0041  3001               	movlw	high __pdataBANK2
  1837  0042  0087               	movwf	7
  1838  0043  3000               	movlw	0
  1839  0044  00FF               	movwf	btemp+1
  1840  0045  302F               	movlw	47
  1841  0046  3188  20BF         	fcall	init_ram
  1842  0048                     end_of_initialization:	
  1843                           ;End of C runtime variable initialization code
  1844                           
  1845  0048                     __end_of__initialization:	
  1846  0048  0020               	movlb	0
  1847  0049  318E  2E38         	ljmp	_main	;jump to C main() function
  1848                           
  1849                           	psect	bssCOMMON
  1850  007C                     __pbssCOMMON:	
  1851  007C                     _pgm_flg:	
  1852  007C                     	ds	1
  1853                           
  1854                           	psect	bssBANK1
  1855  00A0                     __pbssBANK1:	
  1856  00A0                     _battV:	
  1857  00A0                     	ds	3
  1858  00A3                     _realRmsCurr:	
  1859  00A3                     	ds	3
  1860  00A6                     _rmsCurr:	
  1861  00A6                     	ds	3
  1862  00A9                     _batt:	
  1863  00A9                     	ds	2
  1864  00AB                     _errno:	
  1865  00AB                     	ds	2
  1866  00AD                     _tmrLongSel:	
  1867  00AD                     	ds	2
  1868  00AF                     _cntSndData:	
  1869  00AF                     	ds	1
  1870  00B0                     _flg_slp:	
  1871  00B0                     	ds	1
  1872  00B1                     _rtx_flg:	
  1873  00B1                     	ds	1
  1874  00B2                     _tmrDbncSel:	
  1875  00B2                     	ds	1
  1876  00B3                     _tmrRcvPkt:	
  1877  00B3                     	ds	1
  1878  00B4                     _u_SYS_STA:	
  1879  00B4                     	ds	1
  1880  00B5                     _u_flg_din:	
  1881  00B5                     	ds	1
  1882  00B6                     _u_in_ev_down:	
  1883  00B6                     	ds	1
  1884  00B7                     _u_in_ev_long:	
  1885  00B7                     	ds	1
  1886  00B8                     _u_in_ev_up:	
  1887  00B8                     	ds	1
  1888  00B9                     _u_in_sta_currTask:	
  1889  00B9                     	ds	1
  1890  00BA                     _u_in_sta_tmpTask:	
  1891  00BA                     	ds	1
  1892  00BB                     _pktRx:	
  1893  00BB                     	ds	11
  1894  00C6                     _pktTx:	
  1895  00C6                     	ds	11
  1896  00D1                     _pgm_cfg:	
  1897  00D1                     	ds	5
  1898                           
  1899                           	psect	dataBANK1
  1900  00D6                     __pdataBANK1:	
  1901  00D6                     _cc1PaTable:	
  1902  00D6                     	ds	8
  1903                           
  1904                           	psect	dataBANK2
  1905  0120                     __pdataBANK2:	
  1906  0120                     _cc1InitVal:	
  1907  0120                     	ds	47
  1908                           
  1909                           	psect	clrtext
  1910  08CB                     clear_ram0:	
  1911                           ;	Called with FSR0 containing the base address, and
  1912                           ;	btemp/btemp+1 has the size to clear
  1913                           
  1914  08CB  0064               	clrwdt	;clear the watchdog before getting into this loop
  1915  08CC                     clrloop0:	
  1916  08CC  0180               	clrf	0	;clear RAM location pointed to by FSR
  1917  08CD  3101               	addfsr 0,1
  1918  08CE  3001               	movlw	1
  1919  08CF  02FE               	subwf	126,f
  1920  08D0  3000               	movlw	0
  1921  08D1  3BFF               	subwfb	127,f
  1922  08D2  087F               	movf	127,w
  1923  08D3  047E               	iorwf	126,w
  1924  08D4  1903               	btfsc	3,2
  1925  08D5  3400               	retlw	0	;all done for this memory range, return
  1926  08D6  28CC               	goto	clrloop0	;have we reached the end yet?
  1927                           
  1928                           	psect	inittext
  1929  08BF                     init_ram:	
  1930  08BF  00FE               	movwf	126
  1931  08C0                     initloop:	
  1932  08C0  0012               	moviw fsr0++
  1933  08C1  001E               	movwi fsr1++
  1934  08C2  3001               	movlw	1
  1935  08C3  02FE               	subwf	126,f
  1936  08C4  3000               	movlw	0
  1937  08C5  3BFF               	subwfb	127,f
  1938  08C6  087F               	movf	127,w
  1939  08C7  047E               	iorwf	126,w
  1940  08C8  1903               	btfsc	3,2
  1941  08C9  3400               	retlw	0
  1942  08CA  28C0               	goto	initloop
  1943                           
  1944                           	psect	cstackBANK2
  1945  014F                     __pcstackBANK2:	
  1946  014F                     _ADCConv$1418:	
  1947                           
  1948                           ; 3 bytes @ 0x0
  1949  014F                     	ds	3
  1950  0152                     ADCConv@sumCurr:	
  1951                           
  1952                           ; 4 bytes @ 0x3
  1953  0152                     	ds	4
  1954  0156                     ADCConv@sumBatt:	
  1955                           
  1956                           ; 2 bytes @ 0x7
  1957  0156                     	ds	2
  1958  0158                     ADCConv@maxCurr:	
  1959                           
  1960                           ; 4 bytes @ 0x9
  1961  0158                     	ds	4
  1962  015C                     ADCConv@j:	
  1963                           
  1964                           ; 1 bytes @ 0xD
  1965  015C                     	ds	1
  1966  015D                     ADCConv@sumEavCurr:	
  1967                           
  1968                           ; 4 bytes @ 0xE
  1969  015D                     	ds	4
  1970  0161                     ADCConv@i:	
  1971                           
  1972                           ; 1 bytes @ 0x12
  1973  0161                     	ds	1
  1974                           
  1975                           	psect	cstackCOMMON
  1976  0070                     __pcstackCOMMON:	
  1977  0070                     ?_CC1Strobe:	
  1978  0070                     ?_PGMReadNvm:	
  1979                           ; 0 bytes @ 0x0
  1980                           
  1981  0070                     ?_PGMCheckNvm:	
  1982                           ; 0 bytes @ 0x0
  1983                           
  1984  0070                     ?_PGMNvmReset:	
  1985                           ; 0 bytes @ 0x0
  1986                           
  1987  0070                     ?_RTXStartSendPgm:	
  1988                           ; 0 bytes @ 0x0
  1989                           
  1990  0070                     ?_RTXStartSendData:	
  1991                           ; 0 bytes @ 0x0
  1992                           
  1993  0070                     ?_RTXSendPgm:	
  1994                           ; 0 bytes @ 0x0
  1995                           
  1996  0070                     ?_RTXSendData:	
  1997                           ; 0 bytes @ 0x0
  1998                           
  1999  0070                     ?_RTXReadPkt:	
  2000                           ; 0 bytes @ 0x0
  2001                           
  2002  0070                     ?_INInit:	
  2003                           ; 0 bytes @ 0x0
  2004                           
  2005  0070                     ?_OUTInit:	
  2006                           ; 0 bytes @ 0x0
  2007                           
  2008  0070                     ?_SPIInit:	
  2009                           ; 0 bytes @ 0x0
  2010                           
  2011  0070                     ?_ADCInit:	
  2012                           ; 0 bytes @ 0x0
  2013                           
  2014  0070                     ?_ADCConv:	
  2015                           ; 0 bytes @ 0x0
  2016                           
  2017  0070                     ?_CC1Init:	
  2018                           ; 0 bytes @ 0x0
  2019                           
  2020  0070                     ?_LEDInit:	
  2021                           ; 0 bytes @ 0x0
  2022                           
  2023  0070                     ?_LEDNormalFlash:	
  2024                           ; 0 bytes @ 0x0
  2025                           
  2026  0070                     ?_LEDFastFlash:	
  2027                           ; 0 bytes @ 0x0
  2028                           
  2029  0070                     ?_NVMInit:	
  2030                           ; 0 bytes @ 0x0
  2031                           
  2032  0070                     ?_DINInit:	
  2033                           ; 0 bytes @ 0x0
  2034                           
  2035  0070                     ?_DINTick:	
  2036                           ; 0 bytes @ 0x0
  2037                           
  2038  0070                     ?_DINTask:	
  2039                           ; 0 bytes @ 0x0
  2040                           
  2041  0070                     ?_PGMInit:	
  2042                           ; 0 bytes @ 0x0
  2043                           
  2044  0070                     ?_PGMTick:	
  2045                           ; 0 bytes @ 0x0
  2046                           
  2047  0070                     ?_PGMWriteNvm:	
  2048                           ; 0 bytes @ 0x0
  2049                           
  2050  0070                     ?_PGMPgmOff:	
  2051                           ; 0 bytes @ 0x0
  2052                           
  2053  0070                     ?_PGMSelUp:	
  2054                           ; 0 bytes @ 0x0
  2055                           
  2056  0070                     ?_PGMSelLong:	
  2057                           ; 0 bytes @ 0x0
  2058                           
  2059  0070                     ?_RTXInit:	
  2060                           ; 0 bytes @ 0x0
  2061                           
  2062  0070                     ?_RTXTick:	
  2063                           ; 0 bytes @ 0x0
  2064                           
  2065  0070                     ?_RTXTask:	
  2066                           ; 0 bytes @ 0x0
  2067                           
  2068  0070                     ?_RTXAwake:	
  2069                           ; 0 bytes @ 0x0
  2070                           
  2071  0070                     ?_SYSInit:	
  2072                           ; 0 bytes @ 0x0
  2073                           
  2074  0070                     ?_SYSInt:	
  2075                           ; 0 bytes @ 0x0
  2076                           
  2077  0070                     ??_SYSInt:	
  2078                           ; 0 bytes @ 0x0
  2079                           
  2080  0070                     ?_SYSTask:	
  2081                           ; 0 bytes @ 0x0
  2082                           
  2083  0070                     ?_INTIsr:	
  2084                           ; 0 bytes @ 0x0
  2085                           
  2086  0070                     ??_INTIsr:	
  2087                           ; 0 bytes @ 0x0
  2088                           
  2089  0070                     ?_main:	
  2090                           ; 0 bytes @ 0x0
  2091                           
  2092                           
  2093                           ; 0 bytes @ 0x0
  2094  0070                     	ds	1
  2095  0071                     ?_DLYDelay_ms:	
  2096  0071                     ??_INInit:	
  2097                           ; 0 bytes @ 0x1
  2098                           
  2099  0071                     ??_OUTInit:	
  2100                           ; 0 bytes @ 0x1
  2101                           
  2102  0071                     ??_SPIInit:	
  2103                           ; 0 bytes @ 0x1
  2104                           
  2105  0071                     ?_SPIRead:	
  2106                           ; 0 bytes @ 0x1
  2107                           
  2108  0071                     ?_SPIWrite:	
  2109                           ; 0 bytes @ 0x1
  2110                           
  2111  0071                     ??_ADCInit:	
  2112                           ; 0 bytes @ 0x1
  2113                           
  2114  0071                     ??_LEDInit:	
  2115                           ; 0 bytes @ 0x1
  2116                           
  2117  0071                     ??_NVMInit:	
  2118                           ; 0 bytes @ 0x1
  2119                           
  2120  0071                     ?_NVMRead:	
  2121                           ; 0 bytes @ 0x1
  2122                           
  2123  0071                     ?_NVMWrite:	
  2124                           ; 0 bytes @ 0x1
  2125                           
  2126  0071                     ??_DINInit:	
  2127                           ; 0 bytes @ 0x1
  2128                           
  2129  0071                     ??_DINTick:	
  2130                           ; 0 bytes @ 0x1
  2131                           
  2132  0071                     ??_DINTask:	
  2133                           ; 0 bytes @ 0x1
  2134                           
  2135  0071                     ??_PGMTick:	
  2136                           ; 0 bytes @ 0x1
  2137                           
  2138  0071                     ??_PGMPgmOff:	
  2139                           ; 0 bytes @ 0x1
  2140                           
  2141  0071                     ??_SYSInit:	
  2142                           ; 0 bytes @ 0x1
  2143                           
  2144  0071                     ?___ftge:	
  2145                           ; 0 bytes @ 0x1
  2146                           
  2147  0071                     ?___lwdiv:	
  2148                           ; 1 bit 
  2149                           
  2150  0071                     ?___ftpack:	
  2151                           ; 2 bytes @ 0x1
  2152                           
  2153  0071                     ?___lmul:	
  2154                           ; 3 bytes @ 0x1
  2155                           
  2156  0071                     ?___lldiv:	
  2157                           ; 4 bytes @ 0x1
  2158                           
  2159  0071                     SPIRead@len:	
  2160                           ; 4 bytes @ 0x1
  2161                           
  2162  0071                     LEDInit@sta:	
  2163                           ; 1 bytes @ 0x1
  2164                           
  2165  0071                     NVMInit@sta:	
  2166                           ; 1 bytes @ 0x1
  2167                           
  2168  0071                     DINInit@sta:	
  2169                           ; 1 bytes @ 0x1
  2170                           
  2171  0071                     SPIWrite@srcPtr:	
  2172                           ; 1 bytes @ 0x1
  2173                           
  2174  0071                     DLYDelay_ms@val:	
  2175                           ; 2 bytes @ 0x1
  2176                           
  2177  0071                     NVMRead@addr:	
  2178                           ; 2 bytes @ 0x1
  2179                           
  2180  0071                     NVMWrite@addr:	
  2181                           ; 2 bytes @ 0x1
  2182                           
  2183  0071                     ___lwdiv@divisor:	
  2184                           ; 2 bytes @ 0x1
  2185                           
  2186  0071                     ___ftpack@arg:	
  2187                           ; 2 bytes @ 0x1
  2188                           
  2189  0071                     ___ftge@ff1:	
  2190                           ; 3 bytes @ 0x1
  2191                           
  2192  0071                     ___lmul@multiplier:	
  2193                           ; 3 bytes @ 0x1
  2194                           
  2195  0071                     ___lldiv@divisor:	
  2196                           ; 4 bytes @ 0x1
  2197                           
  2198                           
  2199                           ; 4 bytes @ 0x1
  2200  0071                     	ds	1
  2201  0072                     ??_SPIRead:	
  2202  0072                     INInit@sta:	
  2203                           ; 0 bytes @ 0x2
  2204                           
  2205  0072                     OUTInit@sta:	
  2206                           ; 1 bytes @ 0x2
  2207                           
  2208  0072                     SPIInit@state:	
  2209                           ; 1 bytes @ 0x2
  2210                           
  2211  0072                     ADCInit@state:	
  2212                           ; 1 bytes @ 0x2
  2213                           
  2214  0072                     SYSInit@state:	
  2215                           ; 1 bytes @ 0x2
  2216                           
  2217                           
  2218                           ; 1 bytes @ 0x2
  2219  0072                     	ds	1
  2220  0073                     ??_DLYDelay_ms:	
  2221  0073                     SPIWrite@len:	
  2222                           ; 0 bytes @ 0x3
  2223                           
  2224  0073                     NVMRead@dest:	
  2225                           ; 1 bytes @ 0x3
  2226                           
  2227  0073                     NVMWrite@source:	
  2228                           ; 1 bytes @ 0x3
  2229                           
  2230  0073                     ___lwdiv@dividend:	
  2231                           ; 1 bytes @ 0x3
  2232                           
  2233                           
  2234                           ; 2 bytes @ 0x3
  2235  0073                     	ds	1
  2236  0074                     ??_SPIWrite:	
  2237  0074                     SPIRead@dstPtr:	
  2238                           ; 0 bytes @ 0x4
  2239                           
  2240  0074                     NVMRead@len:	
  2241                           ; 1 bytes @ 0x4
  2242                           
  2243  0074                     NVMWrite@len:	
  2244                           ; 1 bytes @ 0x4
  2245                           
  2246  0074                     ___ftpack@exp:	
  2247                           ; 1 bytes @ 0x4
  2248                           
  2249  0074                     ___ftge@ff2:	
  2250                           ; 1 bytes @ 0x4
  2251                           
  2252                           
  2253                           ; 3 bytes @ 0x4
  2254  0074                     	ds	1
  2255  0075                     ??_NVMRead:	
  2256  0075                     ??_NVMWrite:	
  2257                           ; 0 bytes @ 0x5
  2258                           
  2259  0075                     ??___lwdiv:	
  2260                           ; 0 bytes @ 0x5
  2261                           
  2262  0075                     SPIRead@i:	
  2263                           ; 0 bytes @ 0x5
  2264                           
  2265  0075                     ___ftpack@sign:	
  2266                           ; 1 bytes @ 0x5
  2267                           
  2268  0075                     DLYDelay_ms@i:	
  2269                           ; 1 bytes @ 0x5
  2270                           
  2271  0075                     ___lmul@multiplicand:	
  2272                           ; 2 bytes @ 0x5
  2273                           
  2274  0075                     ___lldiv@dividend:	
  2275                           ; 4 bytes @ 0x5
  2276                           
  2277                           
  2278                           ; 4 bytes @ 0x5
  2279  0075                     	ds	1
  2280  0076                     ??___ftpack:	
  2281  0076                     SPIWrite@i:	
  2282                           ; 0 bytes @ 0x6
  2283                           
  2284  0076                     ___lwdiv@counter:	
  2285                           ; 1 bytes @ 0x6
  2286                           
  2287                           
  2288                           ; 1 bytes @ 0x6
  2289  0076                     	ds	1
  2290  0077                     ??_CC1Strobe:	
  2291  0077                     ?_CC1Write:	
  2292                           ; 0 bytes @ 0x7
  2293                           
  2294  0077                     ?_CC1Read:	
  2295                           ; 0 bytes @ 0x7
  2296                           
  2297  0077                     ??_LEDNormalFlash:	
  2298                           ; 0 bytes @ 0x7
  2299                           
  2300  0077                     ??_LEDFastFlash:	
  2301                           ; 0 bytes @ 0x7
  2302                           
  2303  0077                     ??___ftge:	
  2304                           ; 0 bytes @ 0x7
  2305                           
  2306  0077                     CC1Read@dst:	
  2307                           ; 0 bytes @ 0x7
  2308                           
  2309  0077                     NVMRead@i:	
  2310                           ; 1 bytes @ 0x7
  2311                           
  2312  0077                     CC1Write@src:	
  2313                           ; 1 bytes @ 0x7
  2314                           
  2315  0077                     ___lwdiv@quotient:	
  2316                           ; 2 bytes @ 0x7
  2317                           
  2318                           
  2319                           ; 2 bytes @ 0x7
  2320  0077                     	ds	1
  2321  0078                     ??_PGMReadNvm:	
  2322  0078                     ??_PGMWriteNvm:	
  2323                           ; 0 bytes @ 0x8
  2324                           
  2325  0078                     CC1Strobe@e_stb:	
  2326                           ; 0 bytes @ 0x8
  2327                           
  2328  0078                     CC1Read@len:	
  2329                           ; 1 bytes @ 0x8
  2330                           
  2331  0078                     LEDNormalFlash@num:	
  2332                           ; 1 bytes @ 0x8
  2333                           
  2334  0078                     LEDFastFlash@num:	
  2335                           ; 1 bytes @ 0x8
  2336                           
  2337                           
  2338                           ; 1 bytes @ 0x8
  2339  0078                     	ds	1
  2340  0079                     ??_CC1Read:	
  2341  0079                     ??___lmul:	
  2342                           ; 0 bytes @ 0x9
  2343                           
  2344  0079                     ??___lldiv:	
  2345                           ; 0 bytes @ 0x9
  2346                           
  2347  0079                     ??___lltoft:	
  2348                           ; 0 bytes @ 0x9
  2349                           
  2350  0079                     ?___lwtoft:	
  2351                           ; 0 bytes @ 0x9
  2352                           
  2353  0079                     CC1Strobe@cc1Stb:	
  2354                           ; 3 bytes @ 0x9
  2355                           
  2356  0079                     CC1Write@len:	
  2357                           ; 1 bytes @ 0x9
  2358                           
  2359  0079                     LEDNormalFlash@i:	
  2360                           ; 1 bytes @ 0x9
  2361                           
  2362  0079                     LEDFastFlash@i:	
  2363                           ; 1 bytes @ 0x9
  2364                           
  2365  0079                     ___ftadd@sign:	
  2366                           ; 1 bytes @ 0x9
  2367                           
  2368  0079                     ___lwtoft@c:	
  2369                           ; 1 bytes @ 0x9
  2370                           
  2371                           
  2372                           ; 2 bytes @ 0x9
  2373  0079                     	ds	1
  2374  007A                     ??_CC1Write:	
  2375  007A                     ??_PGMNvmReset:	
  2376                           ; 0 bytes @ 0xA
  2377                           
  2378  007A                     ??_PGMSelLong:	
  2379                           ; 0 bytes @ 0xA
  2380                           
  2381  007A                     CC1Read@addr:	
  2382                           ; 0 bytes @ 0xA
  2383                           
  2384  007A                     ___ftadd@exp2:	
  2385                           ; 1 bytes @ 0xA
  2386                           
  2387  007A                     ___lltoft@exp:	
  2388                           ; 1 bytes @ 0xA
  2389                           
  2390                           
  2391                           ; 1 bytes @ 0xA
  2392  007A                     	ds	1
  2393  007B                     ??_PGMCheckNvm:	
  2394  007B                     ??_CC1Init:	
  2395                           ; 0 bytes @ 0xB
  2396                           
  2397  007B                     ??_PGMInit:	
  2398                           ; 0 bytes @ 0xB
  2399                           
  2400  007B                     CC1Read@cc1Addr:	
  2401                           ; 0 bytes @ 0xB
  2402                           
  2403  007B                     PGMInit@state:	
  2404                           ; 1 bytes @ 0xB
  2405                           
  2406  007B                     ___ftadd@exp1:	
  2407                           ; 1 bytes @ 0xB
  2408                           
  2409                           
  2410                           ; 1 bytes @ 0xB
  2411  007B                     	ds	1
  2412  007C                     ??_RTXStartSendPgm:	
  2413  007C                     ??_RTXStartSendData:	
  2414                           ; 0 bytes @ 0xC
  2415                           
  2416  007C                     ??_RTXInit:	
  2417                           ; 0 bytes @ 0xC
  2418                           
  2419  007C                     ??_RTXTick:	
  2420                           ; 0 bytes @ 0xC
  2421                           
  2422  007C                     ??_RTXTask:	
  2423                           ; 0 bytes @ 0xC
  2424                           
  2425  007C                     ??_RTXAwake:	
  2426                           ; 0 bytes @ 0xC
  2427                           
  2428  007C                     ??_SYSTask:	
  2429                           ; 0 bytes @ 0xC
  2430                           
  2431  007C                     ??___ftsub:	
  2432                           ; 0 bytes @ 0xC
  2433                           
  2434                           
  2435                           	psect	cstackBANK0
  2436  0020                     __pcstackBANK0:	
  2437                           ; 0 bytes @ 0xC
  2438                           
  2439  0020                     ?_RTXRcvPkt:	
  2440  0020                     ??___lwtoft:	
  2441                           ; 0 bytes @ 0x0
  2442                           
  2443  0020                     ?___ftadd:	
  2444                           ; 0 bytes @ 0x0
  2445                           
  2446  0020                     ?___lltoft:	
  2447                           ; 3 bytes @ 0x0
  2448                           
  2449  0020                     CC1Write@addr:	
  2450                           ; 3 bytes @ 0x0
  2451                           
  2452  0020                     RTXRcvPkt@len:	
  2453                           ; 1 bytes @ 0x0
  2454                           
  2455  0020                     ___ftadd@f1:	
  2456                           ; 1 bytes @ 0x0
  2457                           
  2458  0020                     ___lmul@product:	
  2459                           ; 3 bytes @ 0x0
  2460                           
  2461  0020                     ___lldiv@quotient:	
  2462                           ; 4 bytes @ 0x0
  2463                           
  2464  0020                     ___lltoft@c:	
  2465                           ; 4 bytes @ 0x0
  2466                           
  2467  0020                     NVMWrite@bufTmpRow:	
  2468                           ; 4 bytes @ 0x0
  2469                           
  2470                           
  2471                           ; 64 bytes @ 0x0
  2472  0020                     	ds	1
  2473  0021                     ??_RTXRcvPkt:	
  2474  0021                     CC1Write@cc1Addr:	
  2475                           ; 0 bytes @ 0x1
  2476                           
  2477                           
  2478                           ; 1 bytes @ 0x1
  2479  0021                     	ds	1
  2480  0022                     ?_RTXSndPkt:	
  2481  0022                     CC1Init@state:	
  2482                           ; 0 bytes @ 0x2
  2483                           
  2484  0022                     RTXSndPkt@len:	
  2485                           ; 1 bytes @ 0x2
  2486                           
  2487                           
  2488                           ; 1 bytes @ 0x2
  2489  0022                     	ds	1
  2490  0023                     ??_RTXSndPkt:	
  2491  0023                     RTXRcvPkt@dst:	
  2492                           ; 0 bytes @ 0x3
  2493                           
  2494  0023                     ___ftadd@f2:	
  2495                           ; 1 bytes @ 0x3
  2496                           
  2497                           
  2498                           ; 3 bytes @ 0x3
  2499  0023                     	ds	1
  2500  0024                     ?___ftmul:	
  2501  0024                     RTXSndPkt@numRxByte:	
  2502                           ; 3 bytes @ 0x4
  2503                           
  2504  0024                     ___lldiv@counter:	
  2505                           ; 1 bytes @ 0x4
  2506                           
  2507  0024                     ___ftmul@f1:	
  2508                           ; 1 bytes @ 0x4
  2509                           
  2510                           
  2511                           ; 3 bytes @ 0x4
  2512  0024                     	ds	1
  2513  0025                     RTXSndPkt@src:	
  2514                           
  2515                           ; 1 bytes @ 0x5
  2516  0025                     	ds	1
  2517  0026                     ??___ftadd:	
  2518  0026                     RTXSndPkt@numTxByte:	
  2519                           ; 0 bytes @ 0x6
  2520                           
  2521                           
  2522                           ; 1 bytes @ 0x6
  2523  0026                     	ds	1
  2524  0027                     RTXSndPkt@sta:	
  2525  0027                     ___ftmul@f2:	
  2526                           ; 1 bytes @ 0x7
  2527                           
  2528                           
  2529                           ; 3 bytes @ 0x7
  2530  0027                     	ds	1
  2531  0028                     ??_RTXSendPgm:	
  2532  0028                     ??_RTXSendData:	
  2533                           ; 0 bytes @ 0x8
  2534                           
  2535                           
  2536                           ; 0 bytes @ 0x8
  2537  0028                     	ds	1
  2538  0029                     RTXSendData@valTemp:	
  2539                           
  2540                           ; 3 bytes @ 0x9
  2541  0029                     	ds	1
  2542  002A                     ??___ftmul:	
  2543  002A                     ?___ftsub:	
  2544                           ; 0 bytes @ 0xA
  2545                           
  2546  002A                     ___ftsub@f2:	
  2547                           ; 3 bytes @ 0xA
  2548                           
  2549                           
  2550                           ; 3 bytes @ 0xA
  2551  002A                     	ds	2
  2552  002C                     RTXSendData@valBatt:	
  2553                           
  2554                           ; 3 bytes @ 0xC
  2555  002C                     	ds	1
  2556  002D                     ___ftsub@f1:	
  2557                           
  2558                           ; 3 bytes @ 0xD
  2559  002D                     	ds	1
  2560  002E                     ___ftmul@exp:	
  2561                           
  2562                           ; 1 bytes @ 0xE
  2563  002E                     	ds	1
  2564  002F                     ___ftmul@f3_as_product:	
  2565                           
  2566                           ; 3 bytes @ 0xF
  2567  002F                     	ds	3
  2568  0032                     ___ftmul@cntr:	
  2569                           
  2570                           ; 1 bytes @ 0x12
  2571  0032                     	ds	1
  2572  0033                     ___ftmul@sign:	
  2573                           
  2574                           ; 1 bytes @ 0x13
  2575  0033                     	ds	1
  2576  0034                     ?_sqrt:	
  2577  0034                     sqrt@y:	
  2578                           ; 3 bytes @ 0x14
  2579                           
  2580                           
  2581                           ; 3 bytes @ 0x14
  2582  0034                     	ds	3
  2583  0037                     ??_sqrt:	
  2584                           
  2585                           ; 0 bytes @ 0x17
  2586  0037                     	ds	3
  2587  003A                     sqrt@og:	
  2588                           
  2589                           ; 3 bytes @ 0x1A
  2590  003A                     	ds	3
  2591  003D                     sqrt@z:	
  2592                           
  2593                           ; 3 bytes @ 0x1D
  2594  003D                     	ds	3
  2595  0040                     sqrt@i:	
  2596                           
  2597                           ; 1 bytes @ 0x20
  2598  0040                     	ds	1
  2599  0041                     sqrt@q:	
  2600                           
  2601                           ; 3 bytes @ 0x21
  2602  0041                     	ds	3
  2603  0044                     sqrt@x:	
  2604                           
  2605                           ; 3 bytes @ 0x24
  2606  0044                     	ds	3
  2607  0047                     ?___ftdiv:	
  2608  0047                     ___ftdiv@f2:	
  2609                           ; 3 bytes @ 0x27
  2610                           
  2611                           
  2612                           ; 3 bytes @ 0x27
  2613  0047                     	ds	3
  2614  004A                     ___ftdiv@f1:	
  2615                           
  2616                           ; 3 bytes @ 0x2A
  2617  004A                     	ds	3
  2618  004D                     ??___ftdiv:	
  2619                           
  2620                           ; 0 bytes @ 0x2D
  2621  004D                     	ds	4
  2622  0051                     ___ftdiv@cntr:	
  2623                           
  2624                           ; 1 bytes @ 0x31
  2625  0051                     	ds	1
  2626  0052                     ___ftdiv@f3:	
  2627                           
  2628                           ; 3 bytes @ 0x32
  2629  0052                     	ds	3
  2630  0055                     ___ftdiv@exp:	
  2631                           
  2632                           ; 1 bytes @ 0x35
  2633  0055                     	ds	1
  2634  0056                     ___ftdiv@sign:	
  2635                           
  2636                           ; 1 bytes @ 0x36
  2637  0056                     	ds	1
  2638  0057                     ??_ADCConv:	
  2639                           
  2640                           ; 0 bytes @ 0x37
  2641  0057                     	ds	8
  2642  005F                     RTXInit@state:	
  2643                           
  2644                           ; 1 bytes @ 0x3F
  2645  005F                     	ds	1
  2646  0060                     NVMWrite@rowAddr:	
  2647                           
  2648                           ; 2 bytes @ 0x40
  2649  0060                     	ds	2
  2650  0062                     NVMWrite@i:	
  2651                           
  2652                           ; 1 bytes @ 0x42
  2653  0062                     	ds	1
  2654  0063                     NVMWrite@latchAddr:	
  2655                           
  2656                           ; 1 bytes @ 0x43
  2657  0063                     	ds	1
  2658  0064                     NVMWrite@j:	
  2659                           
  2660                           ; 1 bytes @ 0x44
  2661  0064                     	ds	1
  2662  0065                     ??_RTXReadPkt:	
  2663  0065                     ??_PGMSelUp:	
  2664                           ; 0 bytes @ 0x45
  2665                           
  2666                           
  2667                           ; 0 bytes @ 0x45
  2668  0065                     	ds	1
  2669  0066                     RTXReadPkt@numRxByte:	
  2670                           
  2671                           ; 1 bytes @ 0x46
  2672  0066                     	ds	1
  2673  0067                     ??_main:	
  2674                           
  2675                           ; 0 bytes @ 0x47
  2676  0067                     	ds	1
  2677  0068                     main@i:	
  2678                           
  2679                           ; 1 bytes @ 0x48
  2680  0068                     	ds	1
  2681                           
  2682                           	psect	maintext
  2683  0E38                     __pmaintext:	
  2684 ;;
  2685 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2686 ;;
  2687 ;; *************** function _main *****************
  2688 ;; Defined at:
  2689 ;;		line 54 in file "Sensore.c"
  2690 ;; Parameters:    Size  Location     Type
  2691 ;;		None
  2692 ;; Auto vars:     Size  Location     Type
  2693 ;;  i               1   72[BANK0 ] unsigned char 
  2694 ;; Return value:  Size  Location     Type
  2695 ;;		None               void
  2696 ;; Registers used:
  2697 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2698 ;; Tracked objects:
  2699 ;;		On entry : B1F/0
  2700 ;;		On exit  : 0/0
  2701 ;;		Unchanged: 0/0
  2702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2704 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2705 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2706 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2707 ;;Total ram usage:        2 bytes
  2708 ;; Hardware stack levels required when called:   11
  2709 ;; This function calls:
  2710 ;;		_ADCInit
  2711 ;;		_CC1Init
  2712 ;;		_DINInit
  2713 ;;		_DINTask
  2714 ;;		_INInit
  2715 ;;		_LEDInit
  2716 ;;		_NVMInit
  2717 ;;		_OUTInit
  2718 ;;		_PGMInit
  2719 ;;		_RTXInit
  2720 ;;		_RTXTask
  2721 ;;		_SPIInit
  2722 ;;		_SYSInit
  2723 ;;		_SYSTask
  2724 ;; This function is called by:
  2725 ;;		Startup code after reset
  2726 ;; This function uses a non-reentrant model
  2727 ;;
  2728                           
  2729                           
  2730                           ;psect for function _main
  2731  0E38                     _main:	
  2732                           
  2733                           ;Sensore.c: 56: unsigned char i;
  2734                           ;Sensore.c: 59: for(i=0;i<3;i++)
  2735                           
  2736                           ;incstack = 0
  2737                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2738  0E38  0020               	movlb	0	; select bank0
  2739  0E39  01E8               	clrf	main@i
  2740  0E3A  3003               	movlw	3
  2741  0E3B  0268               	subwf	main@i,w
  2742  0E3C  1803               	btfsc	3,0
  2743  0E3D  2E7F               	goto	l687
  2744  0E3E                     l686:	
  2745  0E3E  0064               	clrwdt	;# 
  2746                           
  2747                           ;Sensore.c: 63: SYSInit(i);
  2748  0E3F  0020               	movlb	0	; select bank0
  2749  0E40  0868               	movf	main@i,w
  2750  0E41  318B  2381  318E   	fcall	_SYSInit
  2751                           
  2752                           ;Sensore.c: 64: INInit(i);
  2753  0E44  0020               	movlb	0	; select bank0
  2754  0E45  0868               	movf	main@i,w
  2755  0E46  318A  22B4  318E   	fcall	_INInit
  2756                           
  2757                           ;Sensore.c: 65: OUTInit(i);
  2758  0E49  0020               	movlb	0	; select bank0
  2759  0E4A  0868               	movf	main@i,w
  2760  0E4B  318B  23A7  318E   	fcall	_OUTInit
  2761                           
  2762                           ;Sensore.c: 66: DINInit(i);
  2763  0E4E  0020               	movlb	0	; select bank0
  2764  0E4F  0868               	movf	main@i,w
  2765  0E50  3189  2113  318E   	fcall	_DINInit
  2766                           
  2767                           ;Sensore.c: 67: LEDInit(i);
  2768  0E53  0020               	movlb	0	; select bank0
  2769  0E54  0868               	movf	main@i,w
  2770  0E55  3188  209D  318E   	fcall	_LEDInit
  2771                           
  2772                           ;Sensore.c: 68: SPIInit(i);
  2773  0E58  0020               	movlb	0	; select bank0
  2774  0E59  0868               	movf	main@i,w
  2775  0E5A  318A  223B  318E   	fcall	_SPIInit
  2776                           
  2777                           ;Sensore.c: 69: CC1Init(i);
  2778  0E5D  0020               	movlb	0	; select bank0
  2779  0E5E  0868               	movf	main@i,w
  2780  0E5F  318C  2459  318E   	fcall	_CC1Init
  2781                           
  2782                           ;Sensore.c: 70: NVMInit(i);
  2783  0E62  0020               	movlb	0	; select bank0
  2784  0E63  0868               	movf	main@i,w
  2785  0E64  3188  20A8  318E   	fcall	_NVMInit
  2786                           
  2787                           ;Sensore.c: 71: RTXInit(i);
  2788  0E67  0020               	movlb	0	; select bank0
  2789  0E68  0868               	movf	main@i,w
  2790  0E69  318B  2337  318E   	fcall	_RTXInit
  2791                           
  2792                           ;Sensore.c: 72: PGMInit(i);
  2793  0E6C  0020               	movlb	0	; select bank0
  2794  0E6D  0868               	movf	main@i,w
  2795  0E6E  3189  216C  318E   	fcall	_PGMInit
  2796                           
  2797                           ;Sensore.c: 73: ADCInit(i);
  2798  0E71  0020               	movlb	0	; select bank0
  2799  0E72  0868               	movf	main@i,w
  2800  0E73  318B  23FB  318E   	fcall	_ADCInit
  2801  0E76  3001               	movlw	1
  2802  0E77  0020               	movlb	0	; select bank0
  2803  0E78  00E7               	movwf	??_main
  2804  0E79  0867               	movf	??_main,w
  2805  0E7A  07E8               	addwf	main@i,f
  2806  0E7B  3003               	movlw	3
  2807  0E7C  0268               	subwf	main@i,w
  2808  0E7D  1C03               	skipc
  2809  0E7E  2E3E               	goto	l686
  2810  0E7F                     l687:	
  2811                           
  2812                           ;Sensore.c: 74: }
  2813                           ;Sensore.c: 77: INTCONbits.GIE=1;
  2814  0E7F  178B               	bsf	11,7	;volatile
  2815  0E80                     l688:	
  2816                           ;Sensore.c: 80: while(1)
  2817                           
  2818  0E80  0064               	clrwdt	;# 
  2819                           
  2820                           ;Sensore.c: 84: SYSTask();
  2821  0E81  318C  2489  318E   	fcall	_SYSTask
  2822                           
  2823                           ;Sensore.c: 85: DINTask();
  2824  0E84  318A  2295  318E   	fcall	_DINTask
  2825                           
  2826                           ;Sensore.c: 86: RTXTask();
  2827  0E87  3188  208F  318E   	fcall	_RTXTask
  2828  0E8A  2E80               	goto	l688
  2829  0E8B                     __end_of_main:	
  2830                           
  2831                           	psect	text1
  2832  0C89                     __ptext1:	
  2833 ;; *************** function _SYSTask *****************
  2834 ;; Defined at:
  2835 ;;		line 45 in file "SYS.c"
  2836 ;; Parameters:    Size  Location     Type
  2837 ;;		None
  2838 ;; Auto vars:     Size  Location     Type
  2839 ;;		None
  2840 ;; Return value:  Size  Location     Type
  2841 ;;		None               void
  2842 ;; Registers used:
  2843 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2844 ;; Tracked objects:
  2845 ;;		On entry : 0/0
  2846 ;;		On exit  : 0/0
  2847 ;;		Unchanged: 0/0
  2848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2850 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2851 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2852 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2853 ;;Total ram usage:        0 bytes
  2854 ;; Hardware stack levels used:    1
  2855 ;; Hardware stack levels required when called:   10
  2856 ;; This function calls:
  2857 ;;		_ADCConv
  2858 ;;		_DINTick
  2859 ;;		_PGMPgmOff
  2860 ;;		_PGMSelLong
  2861 ;;		_PGMSelUp
  2862 ;;		_PGMTick
  2863 ;;		_RTXAwake
  2864 ;;		_RTXTick
  2865 ;; This function is called by:
  2866 ;;		_main
  2867 ;; This function uses a non-reentrant model
  2868 ;;
  2869                           
  2870                           
  2871                           ;psect for function _SYSTask
  2872  0C89                     _SYSTask:	
  2873                           
  2874                           ;SYS.c: 48: if(u_SYS_STA.TICK)
  2875                           
  2876                           ;incstack = 0
  2877                           ; Regs used in _SYSTask: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2878  0C89  0021               	movlb	1	; select bank1
  2879  0C8A  1C34               	btfss	_u_SYS_STA^(0+128),0
  2880  0C8B  2C96               	goto	l4376
  2881                           
  2882                           ;SYS.c: 49: {
  2883                           ;SYS.c: 51: u_SYS_STA.TICK=0;
  2884  0C8C  1034               	bcf	_u_SYS_STA^(0+128),0
  2885                           
  2886                           ;SYS.c: 54: RTXTick();
  2887  0C8D  3189  2133  318C   	fcall	_RTXTick
  2888                           
  2889                           ;SYS.c: 55: DINTick();
  2890  0C90  318B  2314  318C   	fcall	_DINTick
  2891                           
  2892                           ;SYS.c: 56: PGMTick();
  2893  0C93  3180  2003  318C   	fcall	_PGMTick
  2894  0C96                     l4376:	
  2895                           
  2896                           ;SYS.c: 57: }
  2897                           ;SYS.c: 59: ADCConv();
  2898  0C96  3180  204B  318C   	fcall	_ADCConv
  2899                           
  2900                           ;SYS.c: 61: if(u_in_ev_down.sel)
  2901  0C99  0021               	movlb	1	; select bank1
  2902  0C9A  1836               	btfsc	_u_in_ev_down^(0+128),0
  2903                           
  2904                           ;SYS.c: 62: {
  2905                           ;SYS.c: 64: u_in_ev_down.sel=0;
  2906  0C9B  1036               	bcf	_u_in_ev_down^(0+128),0
  2907                           
  2908                           ;SYS.c: 65: }
  2909                           ;SYS.c: 66: if(u_in_ev_up.sel)
  2910  0C9C  1C38               	btfss	_u_in_ev_up^(0+128),0
  2911  0C9D  2CA2               	goto	l4386
  2912                           
  2913                           ;SYS.c: 67: {
  2914                           ;SYS.c: 69: u_in_ev_up.sel=0;
  2915  0C9E  1038               	bcf	_u_in_ev_up^(0+128),0
  2916                           
  2917                           ;SYS.c: 70: PGMSelUp();
  2918  0C9F  3189  2182  318C   	fcall	_PGMSelUp
  2919  0CA2                     l4386:	
  2920                           
  2921                           ;SYS.c: 71: }
  2922                           ;SYS.c: 72: if(u_in_ev_long.sel)
  2923  0CA2  0021               	movlb	1	; select bank1
  2924  0CA3  1C37               	btfss	_u_in_ev_long^(0+128),0
  2925  0CA4  2CA9               	goto	l4392
  2926                           
  2927                           ;SYS.c: 73: {
  2928                           ;SYS.c: 75: u_in_ev_long.sel=0;
  2929  0CA5  1037               	bcf	_u_in_ev_long^(0+128),0
  2930                           
  2931                           ;SYS.c: 76: PGMSelLong();
  2932  0CA6  3189  2199  318C   	fcall	_PGMSelLong
  2933  0CA9                     l4392:	
  2934                           
  2935                           ;SYS.c: 77: }
  2936                           ;SYS.c: 80: if(flg_slp.goSleep)
  2937  0CA9  0021               	movlb	1	; select bank1
  2938  0CAA  1830               	btfsc	_flg_slp^(0+128),0
  2939                           
  2940                           ;SYS.c: 81: {
  2941                           ;SYS.c: 83: flg_slp.goSleep=0;
  2942  0CAB  1030               	bcf	_flg_slp^(0+128),0
  2943                           
  2944                           ;SYS.c: 87: }
  2945                           ;SYS.c: 90: if(rtx_flg.pgmDone)
  2946  0CAC  1C31               	btfss	_rtx_flg^(0+128),0
  2947  0CAD  2CB2               	goto	l4400
  2948                           
  2949                           ;SYS.c: 91: {
  2950                           ;SYS.c: 93: rtx_flg.pgmDone=0;
  2951  0CAE  1031               	bcf	_rtx_flg^(0+128),0
  2952                           
  2953                           ;SYS.c: 95: PGMPgmOff();
  2954  0CAF  3188  2085  318C   	fcall	_PGMPgmOff
  2955  0CB2                     l4400:	
  2956                           
  2957                           ;SYS.c: 96: }
  2958                           ;SYS.c: 99: if(flg_slp.exitSleep)
  2959  0CB2  0021               	movlb	1	; select bank1
  2960  0CB3  1CB0               	btfss	_flg_slp^(0+128),1
  2961  0CB4  0008               	return
  2962                           
  2963                           ;SYS.c: 100: {
  2964                           ;SYS.c: 102: flg_slp.exitSleep=0;
  2965  0CB5  10B0               	bcf	_flg_slp^(0+128),1
  2966                           
  2967                           ;SYS.c: 104: RTXAwake();
  2968  0CB6  3189  21CA         	fcall	_RTXAwake
  2969  0CB8  0008               	return
  2970  0CB9                     __end_of_SYSTask:	
  2971                           
  2972                           	psect	text2
  2973  0933                     __ptext2:	
  2974 ;; *************** function _RTXTick *****************
  2975 ;; Defined at:
  2976 ;;		line 90 in file "RTX.c"
  2977 ;; Parameters:    Size  Location     Type
  2978 ;;		None
  2979 ;; Auto vars:     Size  Location     Type
  2980 ;;		None
  2981 ;; Return value:  Size  Location     Type
  2982 ;;		None               void
  2983 ;; Registers used:
  2984 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2985 ;; Tracked objects:
  2986 ;;		On entry : 0/0
  2987 ;;		On exit  : 0/0
  2988 ;;		Unchanged: 0/0
  2989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2991 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2993 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2994 ;;Total ram usage:        0 bytes
  2995 ;; Hardware stack levels used:    1
  2996 ;; Hardware stack levels required when called:    6
  2997 ;; This function calls:
  2998 ;;		_RTXSendData
  2999 ;;		_RTXSendPgm
  3000 ;; This function is called by:
  3001 ;;		_SYSTask
  3002 ;; This function uses a non-reentrant model
  3003 ;;
  3004                           
  3005                           
  3006                           ;psect for function _RTXTick
  3007  0933                     _RTXTick:	
  3008                           
  3009                           ;RTX.c: 93: if(tmrRcvPkt)
  3010                           
  3011                           ;incstack = 0
  3012                           ; Regs used in _RTXTick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3013  0933  0021               	movlb	1	; select bank1
  3014  0934  0833               	movf	_tmrRcvPkt^(0+128),w
  3015  0935  1903               	btfsc	3,2
  3016  0936  0008               	return
  3017                           
  3018                           ;RTX.c: 94: {
  3019                           ;RTX.c: 95: tmrRcvPkt--;
  3020  0937  3001               	movlw	1
  3021  0938  02B3               	subwf	_tmrRcvPkt^(0+128),f
  3022                           
  3023                           ;RTX.c: 96: if(!(tmrRcvPkt))
  3024  0939  0833               	movf	_tmrRcvPkt^(0+128),w
  3025  093A  1D03               	btfss	3,2
  3026  093B  0008               	return
  3027                           
  3028                           ;RTX.c: 97: {
  3029                           ;RTX.c: 98: if(pgm_flg.pgmonoff)
  3030  093C  1C7C               	btfss	_pgm_flg,0
  3031  093D  2941               	goto	l4160
  3032                           
  3033                           ;RTX.c: 99: RTXSendPgm();
  3034  093E  318D  255A         	fcall	_RTXSendPgm
  3035  0940  0008               	return
  3036  0941                     l4160:	
  3037                           
  3038                           ;RTX.c: 100: else
  3039                           ;RTX.c: 101: RTXSendData();
  3040  0941  318E  26E1         	fcall	_RTXSendData
  3041  0943  0008               	return
  3042  0944                     __end_of_RTXTick:	
  3043                           
  3044                           	psect	text3
  3045  09CA                     __ptext3:	
  3046 ;; *************** function _RTXAwake *****************
  3047 ;; Defined at:
  3048 ;;		line 113 in file "RTX.c"
  3049 ;; Parameters:    Size  Location     Type
  3050 ;;		None
  3051 ;; Auto vars:     Size  Location     Type
  3052 ;;		None
  3053 ;; Return value:  Size  Location     Type
  3054 ;;		None               void
  3055 ;; Registers used:
  3056 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3057 ;; Tracked objects:
  3058 ;;		On entry : 0/0
  3059 ;;		On exit  : 0/0
  3060 ;;		Unchanged: 0/0
  3061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3065 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3066 ;;Total ram usage:        0 bytes
  3067 ;; Hardware stack levels used:    1
  3068 ;; Hardware stack levels required when called:    9
  3069 ;; This function calls:
  3070 ;;		_CC1Init
  3071 ;;		_DLYDelay_ms
  3072 ;;		_RTXInit
  3073 ;; This function is called by:
  3074 ;;		_SYSTask
  3075 ;; This function uses a non-reentrant model
  3076 ;;
  3077                           
  3078                           
  3079                           ;psect for function _RTXAwake
  3080  09CA                     _RTXAwake:	
  3081                           
  3082                           ;RTX.c: 116: LATAbits.LATA5=0;
  3083                           
  3084                           ;incstack = 0
  3085                           ; Regs used in _RTXAwake: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3086  09CA  0022               	movlb	2	; select bank2
  3087  09CB  128C               	bcf	12,5	;volatile
  3088                           
  3089                           ;RTX.c: 117: DLYDelay_ms(1);
  3090  09CC  3001               	movlw	1
  3091  09CD  00F1               	movwf	DLYDelay_ms@val
  3092  09CE  3000               	movlw	0
  3093  09CF  00F2               	movwf	DLYDelay_ms@val+1
  3094  09D0  3189  21B1  3189   	fcall	_DLYDelay_ms
  3095                           
  3096                           ;RTX.c: 118: LATAbits.LATA5=1;
  3097  09D3  0022               	movlb	2	; select bank2
  3098  09D4  168C               	bsf	12,5	;volatile
  3099                           
  3100                           ;RTX.c: 119: DLYDelay_ms(1);
  3101  09D5  3001               	movlw	1
  3102  09D6  00F1               	movwf	DLYDelay_ms@val
  3103  09D7  3000               	movlw	0
  3104  09D8  00F2               	movwf	DLYDelay_ms@val+1
  3105  09D9  3189  21B1  3189   	fcall	_DLYDelay_ms
  3106                           
  3107                           ;RTX.c: 122: CC1Init(2);
  3108  09DC  3002               	movlw	2
  3109  09DD  318C  2459  3189   	fcall	_CC1Init
  3110                           
  3111                           ;RTX.c: 125: RTXInit(2);
  3112  09E0  3002               	movlw	2
  3113  09E1  318B  2337         	fcall	_RTXInit
  3114  09E3  0008               	return
  3115  09E4                     __end_of_RTXAwake:	
  3116                           
  3117                           	psect	text4
  3118  0B37                     __ptext4:	
  3119 ;; *************** function _RTXInit *****************
  3120 ;; Defined at:
  3121 ;;		line 67 in file "RTX.c"
  3122 ;; Parameters:    Size  Location     Type
  3123 ;;  state           1    wreg     unsigned char 
  3124 ;; Auto vars:     Size  Location     Type
  3125 ;;  state           1   63[BANK0 ] unsigned char 
  3126 ;; Return value:  Size  Location     Type
  3127 ;;		None               void
  3128 ;; Registers used:
  3129 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3130 ;; Tracked objects:
  3131 ;;		On entry : 0/0
  3132 ;;		On exit  : 0/0
  3133 ;;		Unchanged: 0/0
  3134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3136 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3138 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3139 ;;Total ram usage:        1 bytes
  3140 ;; Hardware stack levels used:    1
  3141 ;; Hardware stack levels required when called:    8
  3142 ;; This function calls:
  3143 ;;		_CC1Strobe
  3144 ;;		_RTXStartSendData
  3145 ;; This function is called by:
  3146 ;;		_RTXAwake
  3147 ;;		_main
  3148 ;; This function uses a non-reentrant model
  3149 ;;
  3150                           
  3151                           
  3152                           ;psect for function _RTXInit
  3153  0B37                     _RTXInit:	
  3154                           
  3155                           ;incstack = 0
  3156                           ; Regs used in _RTXInit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3157                           ;RTXInit@state stored from wreg
  3158  0B37  0020               	movlb	0	; select bank0
  3159  0B38  00DF               	movwf	RTXInit@state
  3160                           
  3161                           ;RTX.c: 69: switch(state)
  3162  0B39  2B4E               	goto	l4090
  3163  0B3A                     l4082:	
  3164                           ;RTX.c: 74: case 1:
  3165                           
  3166                           ;RTX.c: 73: break;
  3167                           
  3168                           ;RTX.c: 70: {
  3169                           ;RTX.c: 71: case 0:
  3170                           
  3171                           
  3172                           ;RTX.c: 76: tmrRcvPkt=0;
  3173  0B3A  0021               	movlb	1	; select bank1
  3174  0B3B  01B3               	clrf	_tmrRcvPkt^(0+128)
  3175                           
  3176                           ;RTX.c: 77: cntSndData=0;
  3177  0B3C  01AF               	clrf	_cntSndData^(0+128)
  3178                           
  3179                           ;RTX.c: 78: rtx_flg.val=0;
  3180  0B3D  01B1               	clrf	_rtx_flg^(0+128)
  3181                           
  3182                           ;RTX.c: 79: break;
  3183  0B3E  0008               	return
  3184  0B3F                     l4084:	
  3185                           ;RTX.c: 80: case 2:
  3186                           
  3187                           
  3188                           ;RTX.c: 82: CC1Strobe(SIDLE);
  3189  0B3F  3036               	movlw	54
  3190  0B40  3189  2144  318B   	fcall	_CC1Strobe
  3191                           
  3192                           ;RTX.c: 83: CC1Strobe(SCAL);
  3193  0B43  3033               	movlw	51
  3194  0B44  3189  2144  318B   	fcall	_CC1Strobe
  3195                           
  3196                           ;RTX.c: 84: CC1Strobe(SRX);
  3197  0B47  3034               	movlw	52
  3198  0B48  3189  2144  318B   	fcall	_CC1Strobe
  3199                           
  3200                           ;RTX.c: 85: RTXStartSendData();
  3201  0B4B  3189  2104         	fcall	_RTXStartSendData
  3202                           
  3203                           ;RTX.c: 87: }
  3204                           
  3205                           ;RTX.c: 86: break;
  3206  0B4D  0008               	return
  3207  0B4E                     l4090:	
  3208  0B4E  0020               	movlb	0	; select bank0
  3209  0B4F  085F               	movf	RTXInit@state,w
  3210                           
  3211                           ; Switch size 1, requested type "space"
  3212                           ; Number of cases is 3, Range of values is 0 to 2
  3213                           ; switch strategies available:
  3214                           ; Name         Instructions Cycles
  3215                           ; simple_byte           10     6 (average)
  3216                           ; direct_byte           12     6 (fixed)
  3217                           ; jumptable            260     6 (fixed)
  3218                           ;	Chosen strategy is simple_byte
  3219  0B50  3A00               	xorlw	0	; case 0
  3220  0B51  1903               	skipnz
  3221  0B52  2B5A               	goto	l479
  3222  0B53  3A01               	xorlw	1	; case 1
  3223  0B54  1903               	skipnz
  3224  0B55  2B3A               	goto	l4082
  3225  0B56  3A03               	xorlw	3	; case 2
  3226  0B57  1903               	skipnz
  3227  0B58  2B3F               	goto	l4084
  3228  0B59  2B5A               	goto	l479
  3229  0B5A                     l479:	
  3230  0B5A  0008               	return
  3231  0B5B                     __end_of_RTXInit:	
  3232                           
  3233                           	psect	text5
  3234  0904                     __ptext5:	
  3235 ;; *************** function _RTXStartSendData *****************
  3236 ;; Defined at:
  3237 ;;		line 214 in file "RTX.c"
  3238 ;; Parameters:    Size  Location     Type
  3239 ;;		None
  3240 ;; Auto vars:     Size  Location     Type
  3241 ;;		None
  3242 ;; Return value:  Size  Location     Type
  3243 ;;		None               void
  3244 ;; Registers used:
  3245 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3246 ;; Tracked objects:
  3247 ;;		On entry : 0/0
  3248 ;;		On exit  : 0/0
  3249 ;;		Unchanged: 0/0
  3250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3252 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3253 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3254 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3255 ;;Total ram usage:        0 bytes
  3256 ;; Hardware stack levels used:    1
  3257 ;; Hardware stack levels required when called:    7
  3258 ;; This function calls:
  3259 ;;		_ADCConv
  3260 ;;		_DLYDelay_ms
  3261 ;;		_RTXSendData
  3262 ;; This function is called by:
  3263 ;;		_RTXInit
  3264 ;; This function uses a non-reentrant model
  3265 ;;
  3266                           
  3267                           
  3268                           ;psect for function _RTXStartSendData
  3269  0904                     _RTXStartSendData:	
  3270                           
  3271                           ;RTX.c: 217: DLYDelay_ms(100);
  3272                           
  3273                           ;incstack = 0
  3274                           ; Regs used in _RTXStartSendData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3275  0904  3064               	movlw	100
  3276  0905  00F1               	movwf	DLYDelay_ms@val
  3277  0906  3000               	movlw	0
  3278  0907  00F2               	movwf	DLYDelay_ms@val+1
  3279  0908  3189  21B1  3189   	fcall	_DLYDelay_ms
  3280                           
  3281                           ;RTX.c: 219: ADCConv();
  3282  090B  3180  204B  3189   	fcall	_ADCConv
  3283                           
  3284                           ;RTX.c: 222: cntSndData=0;
  3285  090E  0021               	movlb	1	; select bank1
  3286  090F  01AF               	clrf	_cntSndData^(0+128)
  3287                           
  3288                           ;RTX.c: 224: RTXSendData();
  3289  0910  318E  26E1         	fcall	_RTXSendData
  3290  0912  0008               	return
  3291  0913                     __end_of_RTXStartSendData:	
  3292                           
  3293                           	psect	text6
  3294  0EE1                     __ptext6:	
  3295 ;; *************** function _RTXSendData *****************
  3296 ;; Defined at:
  3297 ;;		line 227 in file "RTX.c"
  3298 ;; Parameters:    Size  Location     Type
  3299 ;;		None
  3300 ;; Auto vars:     Size  Location     Type
  3301 ;;  valBatt         3   12[BANK0 ] struct _RTX_DATA
  3302 ;;  valTemp         3    9[BANK0 ] struct _RTX_DATA
  3303 ;; Return value:  Size  Location     Type
  3304 ;;		None               void
  3305 ;; Registers used:
  3306 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3307 ;; Tracked objects:
  3308 ;;		On entry : 0/0
  3309 ;;		On exit  : 0/0
  3310 ;;		Unchanged: 0/0
  3311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3313 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3314 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3315 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3316 ;;Total ram usage:        7 bytes
  3317 ;; Hardware stack levels used:    1
  3318 ;; Hardware stack levels required when called:    5
  3319 ;; This function calls:
  3320 ;;		_LEDFastFlash
  3321 ;;		_RTXSndPkt
  3322 ;; This function is called by:
  3323 ;;		_RTXTick
  3324 ;;		_RTXStartSendData
  3325 ;; This function uses a non-reentrant model
  3326 ;;
  3327                           
  3328                           
  3329                           ;psect for function _RTXSendData
  3330  0EE1                     _RTXSendData:	
  3331                           
  3332                           ;RTX.c: 229: tu_RTX_DATA valTemp,valBatt;
  3333                           ;RTX.c: 231: if(!(pgm_flg.pgmonoff))
  3334                           
  3335                           ;incstack = 0
  3336                           ; Regs used in _RTXSendData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3337  0EE1  187C               	btfsc	_pgm_flg,0
  3338  0EE2  0008               	return
  3339                           
  3340                           ;RTX.c: 232: {
  3341                           ;RTX.c: 234: if(cntSndData<5 && pgm_cfg.menu.baseIdProg)
  3342  0EE3  3005               	movlw	5
  3343  0EE4  0021               	movlb	1	; select bank1
  3344  0EE5  022F               	subwf	_cntSndData^(0+128),w
  3345  0EE6  1C03               	btfss	3,0
  3346  0EE7  1C53               	btfss	(_pgm_cfg^(0+128)+2),0
  3347  0EE8  2F55               	goto	l522
  3348                           
  3349                           ;RTX.c: 235: {
  3350                           ;RTX.c: 237: pktTx[ID_DEST]=pgm_cfg.baseId;
  3351  0EE9  0855               	movf	(_pgm_cfg^(0+128)+4),w
  3352  0EEA  0020               	movlb	0	; select bank0
  3353  0EEB  00A8               	movwf	??_RTXSendData
  3354  0EEC  0828               	movf	??_RTXSendData,w
  3355  0EED  0021               	movlb	1	; select bank1
  3356  0EEE  00C6               	movwf	_pktTx^(0+128)
  3357                           
  3358                           ;RTX.c: 238: pktTx[TYPE_DEST]=BASE;
  3359  0EEF  01C7               	clrf	(_pktTx^(0+128)+1)
  3360                           
  3361                           ;RTX.c: 239: pktTx[ID_SOURCE]=pgm_cfg.sensId;
  3362  0EF0  0854               	movf	(_pgm_cfg^(0+128)+3),w
  3363  0EF1  0020               	movlb	0	; select bank0
  3364  0EF2  00A8               	movwf	??_RTXSendData
  3365  0EF3  0828               	movf	??_RTXSendData,w
  3366  0EF4  0021               	movlb	1	; select bank1
  3367  0EF5  00C8               	movwf	(_pktTx^(0+128)+2)
  3368                           
  3369                           ;RTX.c: 241: if(PORTBbits.RB5)
  3370  0EF6  0020               	movlb	0	; select bank0
  3371  0EF7  1E8D               	btfss	13,5	;volatile
  3372  0EF8  2EFD               	goto	l3950
  3373                           
  3374                           ;RTX.c: 242: pktTx[TYPE_SOURCE]=SENS_CURRGEN;
  3375  0EF9  0021               	movlb	1	; select bank1
  3376  0EFA  01C9               	clrf	(_pktTx^(0+128)+3)
  3377  0EFB  0AC9               	incf	(_pktTx^(0+128)+3),f
  3378  0EFC  2F03               	goto	l3952
  3379  0EFD                     l3950:	
  3380                           
  3381                           ;RTX.c: 243: else
  3382                           ;RTX.c: 244: pktTx[TYPE_SOURCE]=SENS_CURRCON;
  3383  0EFD  3002               	movlw	2
  3384  0EFE  0020               	movlb	0	; select bank0
  3385  0EFF  00A8               	movwf	??_RTXSendData
  3386  0F00  0828               	movf	??_RTXSendData,w
  3387  0F01  0021               	movlb	1	; select bank1
  3388  0F02  00C9               	movwf	(_pktTx^(0+128)+3)
  3389  0F03                     l3952:	
  3390                           
  3391                           ;RTX.c: 245: pktTx[OP]=DAT;
  3392  0F03  01CA               	clrf	(_pktTx^(0+128)+4)
  3393                           
  3394                           ;RTX.c: 246: valTemp.val=rmsCurr+0;
  3395  0F04  0826               	movf	_rmsCurr^(0+128),w
  3396  0F05  0020               	movlb	0	; select bank0
  3397  0F06  00A9               	movwf	RTXSendData@valTemp
  3398  0F07  0021               	movlb	1	; select bank1
  3399  0F08  0827               	movf	(_rmsCurr+1)^(0+128),w
  3400  0F09  0020               	movlb	0	; select bank0
  3401  0F0A  00AA               	movwf	RTXSendData@valTemp+1
  3402  0F0B  0021               	movlb	1	; select bank1
  3403  0F0C  0828               	movf	(_rmsCurr+2)^(0+128),w
  3404  0F0D  0020               	movlb	0	; select bank0
  3405  0F0E  00AB               	movwf	RTXSendData@valTemp+2
  3406                           
  3407                           ;RTX.c: 247: pktTx[VAL]=valTemp.val_byte[0];
  3408  0F0F  0829               	movf	RTXSendData@valTemp,w
  3409  0F10  00A8               	movwf	??_RTXSendData
  3410  0F11  0828               	movf	??_RTXSendData,w
  3411  0F12  0021               	movlb	1	; select bank1
  3412  0F13  00CB               	movwf	(_pktTx^(0+128)+5)
  3413                           
  3414                           ;RTX.c: 248: pktTx[VAL+1]=valTemp.val_byte[1];
  3415  0F14  0020               	movlb	0	; select bank0
  3416  0F15  082A               	movf	RTXSendData@valTemp+1,w
  3417  0F16  00A8               	movwf	??_RTXSendData
  3418  0F17  0828               	movf	??_RTXSendData,w
  3419  0F18  0021               	movlb	1	; select bank1
  3420  0F19  00CC               	movwf	(_pktTx^(0+128)+6)
  3421                           
  3422                           ;RTX.c: 249: pktTx[VAL+2]=valTemp.val_byte[2];
  3423  0F1A  0020               	movlb	0	; select bank0
  3424  0F1B  082B               	movf	RTXSendData@valTemp+2,w
  3425  0F1C  00A8               	movwf	??_RTXSendData
  3426  0F1D  0828               	movf	??_RTXSendData,w
  3427  0F1E  0021               	movlb	1	; select bank1
  3428  0F1F  00CD               	movwf	(_pktTx^(0+128)+7)
  3429                           
  3430                           ;RTX.c: 250: valBatt.val=battV;
  3431  0F20  0820               	movf	_battV^(0+128),w
  3432  0F21  0020               	movlb	0	; select bank0
  3433  0F22  00AC               	movwf	RTXSendData@valBatt
  3434  0F23  0021               	movlb	1	; select bank1
  3435  0F24  0821               	movf	(_battV+1)^(0+128),w
  3436  0F25  0020               	movlb	0	; select bank0
  3437  0F26  00AD               	movwf	RTXSendData@valBatt+1
  3438  0F27  0021               	movlb	1	; select bank1
  3439  0F28  0822               	movf	(_battV+2)^(0+128),w
  3440  0F29  0020               	movlb	0	; select bank0
  3441  0F2A  00AE               	movwf	RTXSendData@valBatt+2
  3442                           
  3443                           ;RTX.c: 251: pktTx[BAT]=valBatt.val_byte[0];
  3444  0F2B  082C               	movf	RTXSendData@valBatt,w
  3445  0F2C  00A8               	movwf	??_RTXSendData
  3446  0F2D  0828               	movf	??_RTXSendData,w
  3447  0F2E  0021               	movlb	1	; select bank1
  3448  0F2F  00CE               	movwf	(_pktTx^(0+128)+8)
  3449                           
  3450                           ;RTX.c: 252: pktTx[BAT+1]=valBatt.val_byte[1];
  3451  0F30  0020               	movlb	0	; select bank0
  3452  0F31  082D               	movf	RTXSendData@valBatt+1,w
  3453  0F32  00A8               	movwf	??_RTXSendData
  3454  0F33  0828               	movf	??_RTXSendData,w
  3455  0F34  0021               	movlb	1	; select bank1
  3456  0F35  00CF               	movwf	(_pktTx^(0+128)+9)
  3457                           
  3458                           ;RTX.c: 253: pktTx[BAT+2]=valBatt.val_byte[2];
  3459  0F36  0020               	movlb	0	; select bank0
  3460  0F37  082E               	movf	RTXSendData@valBatt+2,w
  3461  0F38  00A8               	movwf	??_RTXSendData
  3462  0F39  0828               	movf	??_RTXSendData,w
  3463  0F3A  0021               	movlb	1	; select bank1
  3464  0F3B  00D0               	movwf	(_pktTx^(0+128)+10)
  3465                           
  3466                           ;RTX.c: 256: RTXSndPkt(pktTx,0x0B);
  3467  0F3C  300B               	movlw	11
  3468  0F3D  0020               	movlb	0	; select bank0
  3469  0F3E  00A8               	movwf	??_RTXSendData
  3470  0F3F  0828               	movf	??_RTXSendData,w
  3471  0F40  00A2               	movwf	RTXSndPkt@len
  3472  0F41  30C6               	movlw	(low (_pktTx| 0))& (0+255)
  3473  0F42  318E  268B  318E   	fcall	_RTXSndPkt
  3474                           
  3475                           ;RTX.c: 259: cntSndData++;
  3476  0F45  3001               	movlw	1
  3477  0F46  0020               	movlb	0	; select bank0
  3478  0F47  00A8               	movwf	??_RTXSendData
  3479  0F48  0828               	movf	??_RTXSendData,w
  3480  0F49  0021               	movlb	1	; select bank1
  3481  0F4A  07AF               	addwf	_cntSndData^(0+128),f
  3482                           
  3483                           ;RTX.c: 262: LEDFastFlash(1);
  3484  0F4B  3001               	movlw	1
  3485  0F4C  318A  2277         	fcall	_LEDFastFlash
  3486                           
  3487                           ;RTX.c: 265: tmrRcvPkt=100;
  3488  0F4E  3064               	movlw	100
  3489  0F4F  0020               	movlb	0	; select bank0
  3490  0F50  00A8               	movwf	??_RTXSendData
  3491  0F51  0828               	movf	??_RTXSendData,w
  3492  0F52  0021               	movlb	1	; select bank1
  3493  0F53  00B3               	movwf	_tmrRcvPkt^(0+128)
  3494                           
  3495                           ;RTX.c: 266: }
  3496  0F54  0008               	return
  3497  0F55                     l522:	
  3498                           
  3499                           ;RTX.c: 267: else
  3500                           ;RTX.c: 268: flg_slp.goSleep=1;
  3501  0F55  1430               	bsf	_flg_slp^(0+128),0
  3502  0F56  0008               	return
  3503  0F57                     __end_of_RTXSendData:	
  3504                           
  3505                           	psect	text7
  3506  0A77                     __ptext7:	
  3507 ;; *************** function _LEDFastFlash *****************
  3508 ;; Defined at:
  3509 ;;		line 38 in file "LED.c"
  3510 ;; Parameters:    Size  Location     Type
  3511 ;;  num             1    wreg     unsigned char 
  3512 ;; Auto vars:     Size  Location     Type
  3513 ;;  num             1    8[COMMON] unsigned char 
  3514 ;;  i               1    9[COMMON] unsigned char 
  3515 ;; Return value:  Size  Location     Type
  3516 ;;		None               void
  3517 ;; Registers used:
  3518 ;;		wreg, status,2, status,0, pclath, cstack
  3519 ;; Tracked objects:
  3520 ;;		On entry : 0/0
  3521 ;;		On exit  : 0/0
  3522 ;;		Unchanged: 0/0
  3523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3525 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3526 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3527 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3528 ;;Total ram usage:        3 bytes
  3529 ;; Hardware stack levels used:    1
  3530 ;; Hardware stack levels required when called:    3
  3531 ;; This function calls:
  3532 ;;		_DLYDelay_ms
  3533 ;; This function is called by:
  3534 ;;		_RTXSendData
  3535 ;; This function uses a non-reentrant model
  3536 ;;
  3537                           
  3538                           
  3539                           ;psect for function _LEDFastFlash
  3540  0A77                     _LEDFastFlash:	
  3541                           
  3542                           ;incstack = 0
  3543                           ; Regs used in _LEDFastFlash: [wreg+status,2+status,0+pclath+cstack]
  3544                           ;LEDFastFlash@num stored from wreg
  3545  0A77  00F8               	movwf	LEDFastFlash@num
  3546                           
  3547                           ;LED.c: 40: unsigned char i;
  3548                           ;LED.c: 42: for(i=0;i<num;i++)
  3549  0A78  01F9               	clrf	LEDFastFlash@i
  3550  0A79                     l3634:	
  3551  0A79  0878               	movf	LEDFastFlash@num,w
  3552  0A7A  0279               	subwf	LEDFastFlash@i,w
  3553  0A7B  1803               	btfsc	3,0
  3554  0A7C  0008               	return
  3555  0A7D  0064               	clrwdt	;# 
  3556                           
  3557                           ;LED.c: 45: LATCbits.LATC7=0;
  3558  0A7E  0022               	movlb	2	; select bank2
  3559  0A7F  138E               	bcf	14,7	;volatile
  3560                           
  3561                           ;LED.c: 46: DLYDelay_ms(5);
  3562  0A80  3005               	movlw	5
  3563  0A81  00F1               	movwf	DLYDelay_ms@val
  3564  0A82  3000               	movlw	0
  3565  0A83  00F2               	movwf	DLYDelay_ms@val+1
  3566  0A84  3189  21B1  318A   	fcall	_DLYDelay_ms
  3567                           
  3568                           ;LED.c: 47: LATCbits.LATC7=1;
  3569  0A87  0022               	movlb	2	; select bank2
  3570  0A88  178E               	bsf	14,7	;volatile
  3571                           
  3572                           ;LED.c: 48: DLYDelay_ms(5);
  3573  0A89  3005               	movlw	5
  3574  0A8A  00F1               	movwf	DLYDelay_ms@val
  3575  0A8B  3000               	movlw	0
  3576  0A8C  00F2               	movwf	DLYDelay_ms@val+1
  3577  0A8D  3189  21B1  318A   	fcall	_DLYDelay_ms
  3578  0A90  3001               	movlw	1
  3579  0A91  00F7               	movwf	??_LEDFastFlash
  3580  0A92  0877               	movf	??_LEDFastFlash,w
  3581  0A93  07F9               	addwf	LEDFastFlash@i,f
  3582  0A94  2A79               	goto	l3634
  3583  0A95                     __end_of_LEDFastFlash:	
  3584                           
  3585                           	psect	text8
  3586  0C59                     __ptext8:	
  3587 ;; *************** function _CC1Init *****************
  3588 ;; Defined at:
  3589 ;;		line 74 in file "CC1.c"
  3590 ;; Parameters:    Size  Location     Type
  3591 ;;  state           1    wreg     unsigned char 
  3592 ;; Auto vars:     Size  Location     Type
  3593 ;;  state           1    2[BANK0 ] unsigned char 
  3594 ;; Return value:  Size  Location     Type
  3595 ;;		None               void
  3596 ;; Registers used:
  3597 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3598 ;; Tracked objects:
  3599 ;;		On entry : 0/0
  3600 ;;		On exit  : 0/0
  3601 ;;		Unchanged: 0/0
  3602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3604 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3605 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3606 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3607 ;;Total ram usage:        2 bytes
  3608 ;; Hardware stack levels used:    1
  3609 ;; Hardware stack levels required when called:    4
  3610 ;; This function calls:
  3611 ;;		_CC1Strobe
  3612 ;;		_CC1Write
  3613 ;;		_DLYDelay_ms
  3614 ;; This function is called by:
  3615 ;;		_RTXAwake
  3616 ;;		_main
  3617 ;; This function uses a non-reentrant model
  3618 ;;
  3619                           
  3620                           
  3621                           ;psect for function _CC1Init
  3622  0C59                     _CC1Init:	
  3623                           
  3624                           ;incstack = 0
  3625                           ; Regs used in _CC1Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3626                           ;CC1Init@state stored from wreg
  3627  0C59  0020               	movlb	0	; select bank0
  3628  0C5A  00A2               	movwf	CC1Init@state
  3629                           
  3630                           ;CC1.c: 76: switch(state)
  3631  0C5B  2C7F               	goto	l4036
  3632  0C5C                     l4026:	
  3633                           ;CC1.c: 84: case 2:
  3634                           
  3635                           ;CC1.c: 83: break;
  3636                           
  3637                           ;CC1.c: 77: {
  3638                           ;CC1.c: 81: case 1:
  3639                           
  3640                           
  3641                           ;CC1.c: 87: CC1Strobe(SRES);
  3642  0C5C  3030               	movlw	48
  3643  0C5D  3189  2144  318C   	fcall	_CC1Strobe
  3644                           
  3645                           ;CC1.c: 89: DLYDelay_ms(5);
  3646  0C60  3005               	movlw	5
  3647  0C61  00F1               	movwf	DLYDelay_ms@val
  3648  0C62  3000               	movlw	0
  3649  0C63  00F2               	movwf	DLYDelay_ms@val+1
  3650  0C64  3189  21B1  318C   	fcall	_DLYDelay_ms
  3651                           
  3652                           ;CC1.c: 91: CC1Write(0x00,cc1InitVal,0x2E);
  3653  0C67  3020               	movlw	low _cc1InitVal
  3654  0C68  00F7               	movwf	CC1Write@src
  3655  0C69  3001               	movlw	high _cc1InitVal
  3656  0C6A  00F8               	movwf	CC1Write@src+1
  3657  0C6B  302E               	movlw	46
  3658  0C6C  00FB               	movwf	??_CC1Init
  3659  0C6D  087B               	movf	??_CC1Init,w
  3660  0C6E  00F9               	movwf	CC1Write@len
  3661  0C6F  3000               	movlw	0
  3662  0C70  318A  22F3  318C   	fcall	_CC1Write
  3663                           
  3664                           ;CC1.c: 92: CC1Write(0x3E,cc1PaTable,8);
  3665  0C73  30D6               	movlw	low _cc1PaTable
  3666  0C74  00F7               	movwf	CC1Write@src
  3667  0C75  3000               	movlw	high _cc1PaTable
  3668  0C76  00F8               	movwf	CC1Write@src+1
  3669  0C77  3008               	movlw	8
  3670  0C78  00FB               	movwf	??_CC1Init
  3671  0C79  087B               	movf	??_CC1Init,w
  3672  0C7A  00F9               	movwf	CC1Write@len
  3673  0C7B  303E               	movlw	62
  3674  0C7C  318A  22F3         	fcall	_CC1Write
  3675                           
  3676                           ;CC1.c: 98: }
  3677                           
  3678                           ;CC1.c: 97: break;
  3679  0C7E  0008               	return
  3680  0C7F                     l4036:	
  3681  0C7F  0020               	movlb	0	; select bank0
  3682  0C80  0822               	movf	CC1Init@state,w
  3683                           
  3684                           ; Switch size 1, requested type "space"
  3685                           ; Number of cases is 2, Range of values is 1 to 2
  3686                           ; switch strategies available:
  3687                           ; Name         Instructions Cycles
  3688                           ; simple_byte            7     4 (average)
  3689                           ; direct_byte           13     9 (fixed)
  3690                           ; jumptable            263     9 (fixed)
  3691                           ;	Chosen strategy is simple_byte
  3692  0C81  3A01               	xorlw	1	; case 1
  3693  0C82  1903               	skipnz
  3694  0C83  2C88               	goto	l180
  3695  0C84  3A03               	xorlw	3	; case 2
  3696  0C85  1903               	skipnz
  3697  0C86  2C5C               	goto	l4026
  3698  0C87  2C88               	goto	l180
  3699  0C88                     l180:	
  3700  0C88  0008               	return
  3701  0C89                     __end_of_CC1Init:	
  3702                           
  3703                           	psect	text9
  3704  0003                     __ptext9:	
  3705 ;; *************** function _PGMTick *****************
  3706 ;; Defined at:
  3707 ;;		line 37 in file "PGM.c"
  3708 ;; Parameters:    Size  Location     Type
  3709 ;;		None
  3710 ;; Auto vars:     Size  Location     Type
  3711 ;;		None
  3712 ;; Return value:  Size  Location     Type
  3713 ;;		None               void
  3714 ;; Registers used:
  3715 ;;		None
  3716 ;; Tracked objects:
  3717 ;;		On entry : 0/0
  3718 ;;		On exit  : 0/0
  3719 ;;		Unchanged: 0/0
  3720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3722 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3724 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3725 ;;Total ram usage:        0 bytes
  3726 ;; Hardware stack levels used:    1
  3727 ;; Hardware stack levels required when called:    2
  3728 ;; This function calls:
  3729 ;;		Nothing
  3730 ;; This function is called by:
  3731 ;;		_SYSTask
  3732 ;; This function uses a non-reentrant model
  3733 ;;
  3734                           
  3735                           
  3736                           ;psect for function _PGMTick
  3737  0003                     _PGMTick:	
  3738                           
  3739                           ;incstack = 0
  3740                           ; Regs used in _PGMTick: []
  3741  0003  0008               	return
  3742  0004                     __end_of_PGMTick:	
  3743                           
  3744                           	psect	text10
  3745  0982                     __ptext10:	
  3746 ;; *************** function _PGMSelUp *****************
  3747 ;; Defined at:
  3748 ;;		line 79 in file "PGM.c"
  3749 ;; Parameters:    Size  Location     Type
  3750 ;;		None
  3751 ;; Auto vars:     Size  Location     Type
  3752 ;;		None
  3753 ;; Return value:  Size  Location     Type
  3754 ;;		None               void
  3755 ;; Registers used:
  3756 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3757 ;; Tracked objects:
  3758 ;;		On entry : 0/0
  3759 ;;		On exit  : 0/0
  3760 ;;		Unchanged: 0/0
  3761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3763 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3764 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3765 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3766 ;;Total ram usage:        1 bytes
  3767 ;; Hardware stack levels used:    1
  3768 ;; Hardware stack levels required when called:    8
  3769 ;; This function calls:
  3770 ;;		_PGMWriteNvm
  3771 ;;		_RTXStartSendPgm
  3772 ;; This function is called by:
  3773 ;;		_SYSTask
  3774 ;; This function uses a non-reentrant model
  3775 ;;
  3776                           
  3777                           
  3778                           ;psect for function _PGMSelUp
  3779  0982                     _PGMSelUp:	
  3780                           
  3781                           ;PGM.c: 82: if(!(pgm_flg.resetDone))
  3782                           
  3783                           ;incstack = 0
  3784                           ; Regs used in _PGMSelUp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3785  0982  18FC               	btfsc	_pgm_flg,1
  3786  0983  2997               	goto	l4136
  3787                           
  3788                           ;PGM.c: 83: {
  3789                           ;PGM.c: 85: if(pgm_cfg.sensId==0x00)
  3790  0984  0021               	movlb	1	; select bank1
  3791  0985  0854               	movf	(_pgm_cfg^(0+128)+3),w
  3792  0986  1D03               	btfss	3,2
  3793  0987  2992               	goto	l4130
  3794                           
  3795                           ;PGM.c: 86: {
  3796                           ;PGM.c: 88: pgm_cfg.sensId=TMR1L^TMR1H;
  3797  0988  0020               	movlb	0	; select bank0
  3798  0989  0816               	movf	22,w	;volatile
  3799  098A  0617               	xorwf	23,w	;volatile
  3800  098B  00E5               	movwf	??_PGMSelUp
  3801  098C  0865               	movf	??_PGMSelUp,w
  3802  098D  0021               	movlb	1	; select bank1
  3803  098E  00D4               	movwf	(_pgm_cfg^(0+128)+3)
  3804                           
  3805                           ;PGM.c: 90: PGMWriteNvm();
  3806  098F  3188  20D7  3189   	fcall	_PGMWriteNvm
  3807  0992                     l4130:	
  3808                           
  3809                           ;PGM.c: 91: }
  3810                           ;PGM.c: 93: pgm_flg.pgmonoff=1;
  3811  0992  147C               	bsf	_pgm_flg,0
  3812                           
  3813                           ;PGM.c: 95: LATCbits.LATC7=0;
  3814  0993  0022               	movlb	2	; select bank2
  3815  0994  138E               	bcf	14,7	;volatile
  3816                           
  3817                           ;PGM.c: 97: RTXStartSendPgm();
  3818  0995  3188  20F5         	fcall	_RTXStartSendPgm
  3819  0997                     l4136:	
  3820                           
  3821                           ;PGM.c: 98: }
  3822                           ;PGM.c: 100: pgm_flg.resetDone=0;
  3823  0997  10FC               	bcf	_pgm_flg,1
  3824  0998  0008               	return
  3825  0999                     __end_of_PGMSelUp:	
  3826                           
  3827                           	psect	text11
  3828  08F5                     __ptext11:	
  3829 ;; *************** function _RTXStartSendPgm *****************
  3830 ;; Defined at:
  3831 ;;		line 272 in file "RTX.c"
  3832 ;; Parameters:    Size  Location     Type
  3833 ;;		None
  3834 ;; Auto vars:     Size  Location     Type
  3835 ;;		None
  3836 ;; Return value:  Size  Location     Type
  3837 ;;		None               void
  3838 ;; Registers used:
  3839 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3840 ;; Tracked objects:
  3841 ;;		On entry : 0/0
  3842 ;;		On exit  : 0/0
  3843 ;;		Unchanged: 0/0
  3844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3848 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3849 ;;Total ram usage:        0 bytes
  3850 ;; Hardware stack levels used:    1
  3851 ;; Hardware stack levels required when called:    7
  3852 ;; This function calls:
  3853 ;;		_ADCConv
  3854 ;;		_DLYDelay_ms
  3855 ;;		_RTXSendPgm
  3856 ;; This function is called by:
  3857 ;;		_PGMSelUp
  3858 ;; This function uses a non-reentrant model
  3859 ;;
  3860                           
  3861                           
  3862                           ;psect for function _RTXStartSendPgm
  3863  08F5                     _RTXStartSendPgm:	
  3864                           
  3865                           ;RTX.c: 275: DLYDelay_ms(100);
  3866                           
  3867                           ;incstack = 0
  3868                           ; Regs used in _RTXStartSendPgm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3869  08F5  3064               	movlw	100
  3870  08F6  00F1               	movwf	DLYDelay_ms@val
  3871  08F7  3000               	movlw	0
  3872  08F8  00F2               	movwf	DLYDelay_ms@val+1
  3873  08F9  3189  21B1  3188   	fcall	_DLYDelay_ms
  3874                           
  3875                           ;RTX.c: 277: ADCConv();
  3876  08FC  3180  204B  3188   	fcall	_ADCConv
  3877                           
  3878                           ;RTX.c: 280: cntSndData=0;
  3879  08FF  0021               	movlb	1	; select bank1
  3880  0900  01AF               	clrf	_cntSndData^(0+128)
  3881                           
  3882                           ;RTX.c: 282: RTXSendPgm();
  3883  0901  318D  255A         	fcall	_RTXSendPgm
  3884  0903  0008               	return
  3885  0904                     __end_of_RTXStartSendPgm:	
  3886                           
  3887                           	psect	text12
  3888  0D5A                     __ptext12:	
  3889 ;; *************** function _RTXSendPgm *****************
  3890 ;; Defined at:
  3891 ;;		line 285 in file "RTX.c"
  3892 ;; Parameters:    Size  Location     Type
  3893 ;;		None
  3894 ;; Auto vars:     Size  Location     Type
  3895 ;;		None
  3896 ;; Return value:  Size  Location     Type
  3897 ;;		None               void
  3898 ;; Registers used:
  3899 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3900 ;; Tracked objects:
  3901 ;;		On entry : 0/0
  3902 ;;		On exit  : 0/0
  3903 ;;		Unchanged: 0/0
  3904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3906 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3907 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3908 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3909 ;;Total ram usage:        1 bytes
  3910 ;; Hardware stack levels used:    1
  3911 ;; Hardware stack levels required when called:    5
  3912 ;; This function calls:
  3913 ;;		_PGMPgmOff
  3914 ;;		_RTXSndPkt
  3915 ;; This function is called by:
  3916 ;;		_RTXTick
  3917 ;;		_RTXStartSendPgm
  3918 ;; This function uses a non-reentrant model
  3919 ;;
  3920                           
  3921                           
  3922                           ;psect for function _RTXSendPgm
  3923  0D5A                     _RTXSendPgm:	
  3924                           
  3925                           ;RTX.c: 288: if(cntSndData<5)
  3926                           
  3927                           ;incstack = 0
  3928                           ; Regs used in _RTXSendPgm: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3929  0D5A  3005               	movlw	5
  3930  0D5B  0021               	movlb	1	; select bank1
  3931  0D5C  022F               	subwf	_cntSndData^(0+128),w
  3932  0D5D  1803               	skipnc
  3933  0D5E  2D91               	goto	l4020
  3934                           
  3935                           ;RTX.c: 289: {
  3936                           ;RTX.c: 291: pktTx[ID_DEST]=0x00;
  3937  0D5F  01C6               	clrf	_pktTx^(0+128)
  3938                           
  3939                           ;RTX.c: 292: pktTx[TYPE_DEST]=BASE;
  3940  0D60  01C7               	clrf	(_pktTx^(0+128)+1)
  3941                           
  3942                           ;RTX.c: 293: pktTx[ID_SOURCE]=pgm_cfg.sensId;
  3943  0D61  0854               	movf	(_pgm_cfg^(0+128)+3),w
  3944  0D62  0020               	movlb	0	; select bank0
  3945  0D63  00A8               	movwf	??_RTXSendPgm
  3946  0D64  0828               	movf	??_RTXSendPgm,w
  3947  0D65  0021               	movlb	1	; select bank1
  3948  0D66  00C8               	movwf	(_pktTx^(0+128)+2)
  3949                           
  3950                           ;RTX.c: 295: if(PORTBbits.RB5)
  3951  0D67  0020               	movlb	0	; select bank0
  3952  0D68  1E8D               	btfss	13,5	;volatile
  3953  0D69  2D6E               	goto	l3998
  3954                           
  3955                           ;RTX.c: 296: pktTx[TYPE_SOURCE]=SENS_CURRGEN;
  3956  0D6A  0021               	movlb	1	; select bank1
  3957  0D6B  01C9               	clrf	(_pktTx^(0+128)+3)
  3958  0D6C  0AC9               	incf	(_pktTx^(0+128)+3),f
  3959  0D6D  2D74               	goto	l4000
  3960  0D6E                     l3998:	
  3961                           
  3962                           ;RTX.c: 297: else
  3963                           ;RTX.c: 298: pktTx[TYPE_SOURCE]=SENS_CURRCON;
  3964  0D6E  3002               	movlw	2
  3965  0D6F  0020               	movlb	0	; select bank0
  3966  0D70  00A8               	movwf	??_RTXSendPgm
  3967  0D71  0828               	movf	??_RTXSendPgm,w
  3968  0D72  0021               	movlb	1	; select bank1
  3969  0D73  00C9               	movwf	(_pktTx^(0+128)+3)
  3970  0D74                     l4000:	
  3971                           
  3972                           ;RTX.c: 299: pktTx[OP]=PGM;
  3973  0D74  01CA               	clrf	(_pktTx^(0+128)+4)
  3974  0D75  0ACA               	incf	(_pktTx^(0+128)+4),f
  3975                           
  3976                           ;RTX.c: 300: pktTx[VAL]=0x00;
  3977  0D76  01CB               	clrf	(_pktTx^(0+128)+5)
  3978                           
  3979                           ;RTX.c: 301: pktTx[VAL+1]=0x00;
  3980  0D77  01CC               	clrf	(_pktTx^(0+128)+6)
  3981                           
  3982                           ;RTX.c: 302: pktTx[VAL+2]=0x00;
  3983  0D78  01CD               	clrf	(_pktTx^(0+128)+7)
  3984                           
  3985                           ;RTX.c: 303: pktTx[BAT]=0x00;
  3986  0D79  01CE               	clrf	(_pktTx^(0+128)+8)
  3987                           
  3988                           ;RTX.c: 304: pktTx[BAT+1]=0x00;
  3989  0D7A  01CF               	clrf	(_pktTx^(0+128)+9)
  3990                           
  3991                           ;RTX.c: 305: pktTx[BAT+2]=0x00;
  3992  0D7B  01D0               	clrf	(_pktTx^(0+128)+10)
  3993                           
  3994                           ;RTX.c: 308: RTXSndPkt(pktTx,0x0B);
  3995  0D7C  300B               	movlw	11
  3996  0D7D  0020               	movlb	0	; select bank0
  3997  0D7E  00A8               	movwf	??_RTXSendPgm
  3998  0D7F  0828               	movf	??_RTXSendPgm,w
  3999  0D80  00A2               	movwf	RTXSndPkt@len
  4000  0D81  30C6               	movlw	(low (_pktTx| 0))& (0+255)
  4001  0D82  318E  268B         	fcall	_RTXSndPkt
  4002                           
  4003                           ;RTX.c: 311: cntSndData++;
  4004  0D84  3001               	movlw	1
  4005  0D85  0020               	movlb	0	; select bank0
  4006  0D86  00A8               	movwf	??_RTXSendPgm
  4007  0D87  0828               	movf	??_RTXSendPgm,w
  4008  0D88  0021               	movlb	1	; select bank1
  4009  0D89  07AF               	addwf	_cntSndData^(0+128),f
  4010                           
  4011                           ;RTX.c: 314: tmrRcvPkt=100;
  4012  0D8A  3064               	movlw	100
  4013  0D8B  0020               	movlb	0	; select bank0
  4014  0D8C  00A8               	movwf	??_RTXSendPgm
  4015  0D8D  0828               	movf	??_RTXSendPgm,w
  4016  0D8E  0021               	movlb	1	; select bank1
  4017  0D8F  00B3               	movwf	_tmrRcvPkt^(0+128)
  4018                           
  4019                           ;RTX.c: 315: }
  4020  0D90  0008               	return
  4021  0D91                     l4020:	
  4022                           
  4023                           ;RTX.c: 316: else
  4024                           ;RTX.c: 317: {
  4025                           ;RTX.c: 319: PGMPgmOff();
  4026  0D91  3188  2085         	fcall	_PGMPgmOff
  4027                           
  4028                           ;RTX.c: 321: flg_slp.goSleep=1;
  4029  0D93  0021               	movlb	1	; select bank1
  4030  0D94  1430               	bsf	_flg_slp^(0+128),0
  4031  0D95  0008               	return
  4032  0D96                     __end_of_RTXSendPgm:	
  4033                           
  4034                           	psect	text13
  4035  0E8B                     __ptext13:	
  4036 ;; *************** function _RTXSndPkt *****************
  4037 ;; Defined at:
  4038 ;;		line 128 in file "RTX.c"
  4039 ;; Parameters:    Size  Location     Type
  4040 ;;  src             1    wreg     PTR unsigned char 
  4041 ;;		 -> pktTx(11), 
  4042 ;;  len             1    2[BANK0 ] unsigned char 
  4043 ;; Auto vars:     Size  Location     Type
  4044 ;;  src             1    5[BANK0 ] PTR unsigned char 
  4045 ;;		 -> pktTx(11), 
  4046 ;;  sta             1    7[BANK0 ] unsigned char 
  4047 ;;  numTxByte       1    6[BANK0 ] unsigned char 
  4048 ;;  numRxByte       1    4[BANK0 ] unsigned char 
  4049 ;; Return value:  Size  Location     Type
  4050 ;;		None               void
  4051 ;; Registers used:
  4052 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4053 ;; Tracked objects:
  4054 ;;		On entry : 0/0
  4055 ;;		On exit  : 0/0
  4056 ;;		Unchanged: 0/0
  4057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4058 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4059 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4060 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4061 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4062 ;;Total ram usage:        6 bytes
  4063 ;; Hardware stack levels used:    1
  4064 ;; Hardware stack levels required when called:    4
  4065 ;; This function calls:
  4066 ;;		_CC1Read
  4067 ;;		_CC1Strobe
  4068 ;;		_CC1Write
  4069 ;; This function is called by:
  4070 ;;		_RTXSendData
  4071 ;;		_RTXSendPgm
  4072 ;; This function uses a non-reentrant model
  4073 ;;
  4074                           
  4075                           
  4076                           ;psect for function _RTXSndPkt
  4077  0E8B                     _RTXSndPkt:	
  4078                           
  4079                           ;incstack = 0
  4080                           ; Regs used in _RTXSndPkt: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4081                           ;RTXSndPkt@src stored from wreg
  4082  0E8B  0020               	movlb	0	; select bank0
  4083  0E8C  00A5               	movwf	RTXSndPkt@src
  4084  0E8D                     l496:	
  4085                           ;RTX.c: 130: unsigned char sta,numRxByte,numTxByte;
  4086                           ;RTX.c: 133: do
  4087                           
  4088  0E8D  0064               	clrwdt	;# 
  4089                           
  4090                           ;RTX.c: 136: CC1Read(0x35,(&(sta)),1);
  4091  0E8E  3027               	movlw	(low (RTXSndPkt@sta| 0))& (0+255)
  4092  0E8F  0020               	movlb	0	; select bank0
  4093  0E90  00A3               	movwf	??_RTXSndPkt
  4094  0E91  0823               	movf	??_RTXSndPkt,w
  4095  0E92  00F7               	movwf	CC1Read@dst
  4096  0E93  01F8               	clrf	CC1Read@len
  4097  0E94  0AF8               	incf	CC1Read@len,f
  4098  0E95  3035               	movlw	53
  4099  0E96  3189  21E4  318E   	fcall	_CC1Read
  4100                           
  4101                           ;RTX.c: 137: }
  4102                           ;RTX.c: 138: while(!(((sta&0b00011111)==0x0D) || ((sta&0b00011111)==0x01)));
  4103  0E99  301F               	movlw	31
  4104  0E9A  0020               	movlb	0	; select bank0
  4105  0E9B  0527               	andwf	RTXSndPkt@sta,w
  4106  0E9C  00A3               	movwf	??_RTXSndPkt
  4107  0E9D  300D               	movlw	13
  4108  0E9E  0623               	xorwf	??_RTXSndPkt,w
  4109  0E9F  1903               	btfsc	3,2
  4110  0EA0  2EA7               	goto	l3642
  4111  0EA1  301F               	movlw	31
  4112  0EA2  0527               	andwf	RTXSndPkt@sta,w
  4113  0EA3  00A3               	movwf	??_RTXSndPkt
  4114  0EA4  0323               	decf	??_RTXSndPkt,w
  4115  0EA5  1D03               	btfss	3,2
  4116  0EA6  2E8D               	goto	l496
  4117  0EA7                     l3642:	
  4118                           
  4119                           ;RTX.c: 140: CC1Strobe(SIDLE);
  4120  0EA7  3036               	movlw	54
  4121  0EA8  3189  2144  318E   	fcall	_CC1Strobe
  4122                           
  4123                           ;RTX.c: 141: CC1Read(0x3B,(&(numRxByte)),1);
  4124  0EAB  3024               	movlw	(low (RTXSndPkt@numRxByte| 0))& (0+255)
  4125  0EAC  0020               	movlb	0	; select bank0
  4126  0EAD  00A3               	movwf	??_RTXSndPkt
  4127  0EAE  0823               	movf	??_RTXSndPkt,w
  4128  0EAF  00F7               	movwf	CC1Read@dst
  4129  0EB0  01F8               	clrf	CC1Read@len
  4130  0EB1  0AF8               	incf	CC1Read@len,f
  4131  0EB2  303B               	movlw	59
  4132  0EB3  3189  21E4  318E   	fcall	_CC1Read
  4133                           
  4134                           ;RTX.c: 142: CC1Read(0x3A,(&(numTxByte)),1);
  4135  0EB6  3026               	movlw	(low (RTXSndPkt@numTxByte| 0))& (0+255)
  4136  0EB7  0020               	movlb	0	; select bank0
  4137  0EB8  00A3               	movwf	??_RTXSndPkt
  4138  0EB9  0823               	movf	??_RTXSndPkt,w
  4139  0EBA  00F7               	movwf	CC1Read@dst
  4140  0EBB  01F8               	clrf	CC1Read@len
  4141  0EBC  0AF8               	incf	CC1Read@len,f
  4142  0EBD  303A               	movlw	58
  4143  0EBE  3189  21E4  318E   	fcall	_CC1Read
  4144                           
  4145                           ;RTX.c: 144: CC1Strobe(SFTX);
  4146  0EC1  303B               	movlw	59
  4147  0EC2  3189  2144  318E   	fcall	_CC1Strobe
  4148                           
  4149                           ;RTX.c: 145: CC1Read(0x3A,(&(numTxByte)),1);
  4150  0EC5  3026               	movlw	(low (RTXSndPkt@numTxByte| 0))& (0+255)
  4151  0EC6  0020               	movlb	0	; select bank0
  4152  0EC7  00A3               	movwf	??_RTXSndPkt
  4153  0EC8  0823               	movf	??_RTXSndPkt,w
  4154  0EC9  00F7               	movwf	CC1Read@dst
  4155  0ECA  01F8               	clrf	CC1Read@len
  4156  0ECB  0AF8               	incf	CC1Read@len,f
  4157  0ECC  303A               	movlw	58
  4158  0ECD  3189  21E4  318E   	fcall	_CC1Read
  4159                           
  4160                           ;RTX.c: 147: CC1Write(0x3F,src,len);
  4161  0ED0  0020               	movlb	0	; select bank0
  4162  0ED1  0825               	movf	RTXSndPkt@src,w
  4163  0ED2  00F7               	movwf	CC1Write@src
  4164  0ED3  3000               	movlw	0
  4165  0ED4  00F8               	movwf	CC1Write@src+1
  4166  0ED5  0822               	movf	RTXSndPkt@len,w
  4167  0ED6  00A3               	movwf	??_RTXSndPkt
  4168  0ED7  0823               	movf	??_RTXSndPkt,w
  4169  0ED8  00F9               	movwf	CC1Write@len
  4170  0ED9  303F               	movlw	63
  4171  0EDA  318A  22F3  318E   	fcall	_CC1Write
  4172                           
  4173                           ;RTX.c: 149: CC1Strobe(STX);
  4174  0EDD  3035               	movlw	53
  4175  0EDE  3189  2144         	fcall	_CC1Strobe
  4176  0EE0  0008               	return
  4177  0EE1                     __end_of_RTXSndPkt:	
  4178                           
  4179                           	psect	text14
  4180  0AF3                     __ptext14:	
  4181 ;; *************** function _CC1Write *****************
  4182 ;; Defined at:
  4183 ;;		line 134 in file "CC1.c"
  4184 ;; Parameters:    Size  Location     Type
  4185 ;;  addr            1    wreg     unsigned char 
  4186 ;;  src             2    7[COMMON] PTR unsigned char 
  4187 ;;		 -> pktTx(11), cc1PaTable(8), cc1InitVal(47), 
  4188 ;;  len             1    9[COMMON] unsigned char 
  4189 ;; Auto vars:     Size  Location     Type
  4190 ;;  addr            1    0[BANK0 ] unsigned char 
  4191 ;;  cc1Addr         1    1[BANK0 ] unsigned char 
  4192 ;; Return value:  Size  Location     Type
  4193 ;;		None               void
  4194 ;; Registers used:
  4195 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4196 ;; Tracked objects:
  4197 ;;		On entry : 0/0
  4198 ;;		On exit  : 0/0
  4199 ;;		Unchanged: 0/0
  4200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4201 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4202 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4203 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4204 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4205 ;;Total ram usage:        6 bytes
  4206 ;; Hardware stack levels used:    1
  4207 ;; Hardware stack levels required when called:    3
  4208 ;; This function calls:
  4209 ;;		_SPIWrite
  4210 ;; This function is called by:
  4211 ;;		_CC1Init
  4212 ;;		_RTXSndPkt
  4213 ;; This function uses a non-reentrant model
  4214 ;;
  4215                           
  4216                           
  4217                           ;psect for function _CC1Write
  4218  0AF3                     _CC1Write:	
  4219                           
  4220                           ;incstack = 0
  4221                           ; Regs used in _CC1Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4222                           ;CC1Write@addr stored from wreg
  4223  0AF3  0020               	movlb	0	; select bank0
  4224  0AF4  00A0               	movwf	CC1Write@addr
  4225                           
  4226                           ;CC1.c: 136: unsigned char cc1Addr;
  4227                           ;CC1.c: 139: LATAbits.LATA5=0;
  4228  0AF5  0022               	movlb	2	; select bank2
  4229  0AF6  128C               	bcf	12,5	;volatile
  4230                           
  4231                           ;CC1.c: 142: cc1Addr=((addr&0b00111111)|0b01000000);
  4232  0AF7  0020               	movlb	0	; select bank0
  4233  0AF8  0820               	movf	CC1Write@addr,w
  4234  0AF9  393F               	andlw	63
  4235  0AFA  3840               	iorlw	64
  4236  0AFB  00FA               	movwf	??_CC1Write
  4237  0AFC  087A               	movf	??_CC1Write,w
  4238  0AFD  00A1               	movwf	CC1Write@cc1Addr
  4239                           
  4240                           ;CC1.c: 143: SPIWrite((&(cc1Addr)),1);
  4241  0AFE  3021               	movlw	low CC1Write@cc1Addr
  4242  0AFF  00F1               	movwf	SPIWrite@srcPtr
  4243  0B00  3000               	movlw	high CC1Write@cc1Addr
  4244  0B01  00F2               	movwf	SPIWrite@srcPtr+1
  4245  0B02  01F3               	clrf	SPIWrite@len
  4246  0B03  0AF3               	incf	SPIWrite@len,f
  4247  0B04  318A  2200  318A   	fcall	_SPIWrite
  4248                           
  4249                           ;CC1.c: 146: SPIWrite(src,len);
  4250  0B07  0877               	movf	CC1Write@src,w
  4251  0B08  00F1               	movwf	SPIWrite@srcPtr
  4252  0B09  0878               	movf	CC1Write@src+1,w
  4253  0B0A  00F2               	movwf	SPIWrite@srcPtr+1
  4254  0B0B  0879               	movf	CC1Write@len,w
  4255  0B0C  00FA               	movwf	??_CC1Write
  4256  0B0D  087A               	movf	??_CC1Write,w
  4257  0B0E  00F3               	movwf	SPIWrite@len
  4258  0B0F  318A  2200         	fcall	_SPIWrite
  4259                           
  4260                           ;CC1.c: 149: LATAbits.LATA5=1;
  4261  0B11  0022               	movlb	2	; select bank2
  4262  0B12  168C               	bsf	12,5	;volatile
  4263  0B13  0008               	return
  4264  0B14                     __end_of_CC1Write:	
  4265                           
  4266                           	psect	text15
  4267  004B                     __ptext15:	
  4268 ;; *************** function _ADCConv *****************
  4269 ;; Defined at:
  4270 ;;		line 94 in file "ADC.c"
  4271 ;; Parameters:    Size  Location     Type
  4272 ;;		None
  4273 ;; Auto vars:     Size  Location     Type
  4274 ;;  sumEavCurr      4   14[BANK2 ] unsigned long 
  4275 ;;  maxCurr         4    9[BANK2 ] unsigned long 
  4276 ;;  sumCurr         4    3[BANK2 ] unsigned long 
  4277 ;;  sumBatt         2    7[BANK2 ] unsigned short 
  4278 ;;  i               1   18[BANK2 ] unsigned char 
  4279 ;;  j               1   13[BANK2 ] unsigned char 
  4280 ;; Return value:  Size  Location     Type
  4281 ;;		None               void
  4282 ;; Registers used:
  4283 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4284 ;; Tracked objects:
  4285 ;;		On entry : 0/0
  4286 ;;		On exit  : 0/0
  4287 ;;		Unchanged: 0/0
  4288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4290 ;;      Locals:         0       0       0      19       0       0       0       0       0       0       0       0       
      +0       0
  4291 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4292 ;;      Totals:         0       8       0      19       0       0       0       0       0       0       0       0       
      +0       0
  4293 ;;Total ram usage:       27 bytes
  4294 ;; Hardware stack levels used:    1
  4295 ;; Hardware stack levels required when called:    6
  4296 ;; This function calls:
  4297 ;;		_DLYDelay_ms
  4298 ;;		___ftdiv
  4299 ;;		___ftmul
  4300 ;;		___lldiv
  4301 ;;		___lltoft
  4302 ;;		___lmul
  4303 ;;		___lwdiv
  4304 ;;		___lwtoft
  4305 ;;		_sqrt
  4306 ;; This function is called by:
  4307 ;;		_RTXStartSendData
  4308 ;;		_RTXStartSendPgm
  4309 ;;		_SYSTask
  4310 ;; This function uses a non-reentrant model
  4311 ;;
  4312                           
  4313                           
  4314                           ;psect for function _ADCConv
  4315  004B                     _ADCConv:	
  4316                           
  4317                           ;ADC.c: 96: unsigned char i,j;
  4318                           ;ADC.c: 97: unsigned short sumBatt;
  4319                           ;ADC.c: 98: unsigned long sumCurr;
  4320                           ;ADC.c: 99: unsigned long sumEavCurr;
  4321                           ;ADC.c: 100: unsigned long maxCurr;
  4322                           ;ADC.c: 104: LATAbits.LATA0=1;
  4323                           
  4324                           ;incstack = 0
  4325                           ; Regs used in _ADCConv: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4326  004B  0022               	movlb	2	; select bank2
  4327  004C  140C               	bsf	12,0	;volatile
  4328                           
  4329                           ;ADC.c: 106: ADCON1=0b10010011;
  4330  004D  3093               	movlw	147
  4331  004E  0021               	movlb	1	; select bank1
  4332  004F  009E               	movwf	30	;volatile
  4333                           
  4334                           ;ADC.c: 107: ADCON0=0b00000101;
  4335  0050  3005               	movlw	5
  4336  0051  009D               	movwf	29	;volatile
  4337                           
  4338                           ;ADC.c: 109: _delay((unsigned long)((10)*(8000000/4000000.0)));
  4339  0052  3006               	movlw	6
  4340  0053  0020               	movlb	0	; select bank0
  4341  0054  00D7               	movwf	??_ADCConv
  4342  0055                     u4987:	
  4343  0055  0BD7               	decfsz	??_ADCConv,f
  4344  0056  2855               	goto	u4987
  4345  0057  0000               	nop
  4346                           
  4347                           ;ADC.c: 110: for(i=0;i<(10);i++)
  4348  0058  0022               	movlb	2	; select bank2
  4349  0059  01E1               	clrf	ADCConv@i^(0+256)
  4350  005A  300A               	movlw	10
  4351  005B  0261               	subwf	ADCConv@i^(0+256),w
  4352  005C  1803               	btfsc	3,0
  4353  005D  28AC               	goto	l3782
  4354  005E                     l124:	
  4355                           
  4356                           ;ADC.c: 111: {
  4357                           ;ADC.c: 113: ADCON0bits.GO=1;
  4358  005E  0021               	movlb	1	; select bank1
  4359  005F  149D               	bsf	29,1	;volatile
  4360  0060                     l126:	
  4361                           ;ADC.c: 115: while(ADCON0bits.GO)
  4362                           
  4363  0060  0021               	movlb	1	; select bank1
  4364  0061  1C9D               	btfss	29,1	;volatile
  4365  0062  2865               	goto	l3774
  4366  0063  0064               	clrwdt	;# 
  4367  0064  2860               	goto	l126
  4368  0065                     l3774:	
  4369                           
  4370                           ;ADC.c: 118: adc_vals[i].lVal=ADRESL;
  4371  0065  0022               	movlb	2	; select bank2
  4372  0066  0861               	movf	ADCConv@i^(0+256),w
  4373  0067  0020               	movlb	0	; select bank0
  4374  0068  00D7               	movwf	??_ADCConv
  4375  0069  01D8               	clrf	??_ADCConv+1
  4376  006A  35D7               	lslf	??_ADCConv,f
  4377  006B  0DD8               	rlf	??_ADCConv+1,f
  4378  006C  3028               	movlw	40
  4379  006D  00D9               	movwf	??_ADCConv+2
  4380  006E  3023               	movlw	35
  4381  006F  00DA               	movwf	??_ADCConv+3
  4382  0070  0857               	movf	??_ADCConv,w
  4383  0071  0759               	addwf	??_ADCConv+2,w
  4384  0072  00DB               	movwf	??_ADCConv+4
  4385  0073  0858               	movf	??_ADCConv+1,w
  4386  0074  3D5A               	addwfc	??_ADCConv+3,w
  4387  0075  00DC               	movwf	??_ADCConv+5
  4388  0076  085B               	movf	??_ADCConv+4,w
  4389  0077  0086               	movwf	6
  4390  0078  085C               	movf	??_ADCConv+5,w
  4391  0079  0087               	movwf	7
  4392  007A  0021               	movlb	1	; select bank1
  4393  007B  081B               	movf	27,w	;volatile
  4394  007C  0081               	movwf	1
  4395                           
  4396                           ;ADC.c: 119: adc_vals[i].hVal=ADRESH;
  4397  007D  0022               	movlb	2	; select bank2
  4398  007E  0861               	movf	ADCConv@i^(0+256),w
  4399  007F  0020               	movlb	0	; select bank0
  4400  0080  00D7               	movwf	??_ADCConv
  4401  0081  01D8               	clrf	??_ADCConv+1
  4402  0082  35D7               	lslf	??_ADCConv,f
  4403  0083  0DD8               	rlf	??_ADCConv+1,f
  4404  0084  0857               	movf	??_ADCConv,w
  4405  0085  3E01               	addlw	1
  4406  0086  00D9               	movwf	??_ADCConv+2
  4407  0087  3000               	movlw	0
  4408  0088  3D58               	addwfc	??_ADCConv+1,w
  4409  0089  00DA               	movwf	??_ADCConv+3
  4410  008A  3028               	movlw	40
  4411  008B  00DB               	movwf	??_ADCConv+4
  4412  008C  3023               	movlw	35
  4413  008D  00DC               	movwf	??_ADCConv+5
  4414  008E  0859               	movf	??_ADCConv+2,w
  4415  008F  075B               	addwf	??_ADCConv+4,w
  4416  0090  00DD               	movwf	??_ADCConv+6
  4417  0091  085A               	movf	??_ADCConv+3,w
  4418  0092  3D5C               	addwfc	??_ADCConv+5,w
  4419  0093  00DE               	movwf	??_ADCConv+7
  4420  0094  085D               	movf	??_ADCConv+6,w
  4421  0095  0086               	movwf	6
  4422  0096  085E               	movf	??_ADCConv+7,w
  4423  0097  0087               	movwf	7
  4424  0098  0021               	movlb	1	; select bank1
  4425  0099  081C               	movf	28,w	;volatile
  4426  009A  0081               	movwf	1
  4427                           
  4428                           ;ADC.c: 121: DLYDelay_ms((20));
  4429  009B  3014               	movlw	20
  4430  009C  00F1               	movwf	DLYDelay_ms@val
  4431  009D  3000               	movlw	0
  4432  009E  00F2               	movwf	DLYDelay_ms@val+1
  4433  009F  3189  21B1  3180   	fcall	_DLYDelay_ms
  4434  00A2  3001               	movlw	1
  4435  00A3  0020               	movlb	0	; select bank0
  4436  00A4  00D7               	movwf	??_ADCConv
  4437  00A5  0857               	movf	??_ADCConv,w
  4438  00A6  0022               	movlb	2	; select bank2
  4439  00A7  07E1               	addwf	ADCConv@i^(0+256),f
  4440  00A8  300A               	movlw	10
  4441  00A9  0261               	subwf	ADCConv@i^(0+256),w
  4442  00AA  1C03               	skipc
  4443  00AB  285E               	goto	l124
  4444  00AC                     l3782:	
  4445                           
  4446                           ;ADC.c: 122: }
  4447                           ;ADC.c: 124: sumBatt=0;
  4448  00AC  01D6               	clrf	ADCConv@sumBatt^(0+256)
  4449  00AD  01D7               	clrf	(ADCConv@sumBatt+1)^(0+256)
  4450                           
  4451                           ;ADC.c: 125: for(i=0;i<(10);i++)
  4452  00AE  01E1               	clrf	ADCConv@i^(0+256)
  4453  00AF  300A               	movlw	10
  4454  00B0  0261               	subwf	ADCConv@i^(0+256),w
  4455  00B1  1803               	btfsc	3,0
  4456  00B2  28D8               	goto	l3794
  4457  00B3                     l3788:	
  4458                           
  4459                           ;ADC.c: 126: sumBatt+=adc_vals[i].val;
  4460  00B3  0861               	movf	ADCConv@i^(0+256),w
  4461  00B4  0020               	movlb	0	; select bank0
  4462  00B5  00D7               	movwf	??_ADCConv
  4463  00B6  01D8               	clrf	??_ADCConv+1
  4464  00B7  35D7               	lslf	??_ADCConv,f
  4465  00B8  0DD8               	rlf	??_ADCConv+1,f
  4466  00B9  3028               	movlw	40
  4467  00BA  00D9               	movwf	??_ADCConv+2
  4468  00BB  3023               	movlw	35
  4469  00BC  00DA               	movwf	??_ADCConv+3
  4470  00BD  0857               	movf	??_ADCConv,w
  4471  00BE  0759               	addwf	??_ADCConv+2,w
  4472  00BF  0086               	movwf	6
  4473  00C0  0858               	movf	??_ADCConv+1,w
  4474  00C1  3D5A               	addwfc	??_ADCConv+3,w
  4475  00C2  0087               	movwf	7
  4476  00C3  3F40               	moviw [0]fsr1
  4477  00C4  00DB               	movwf	??_ADCConv+4
  4478  00C5  3F41               	moviw [1]fsr1
  4479  00C6  00DC               	movwf	??_ADCConv+5
  4480  00C7  085B               	movf	??_ADCConv+4,w
  4481  00C8  0022               	movlb	2	; select bank2
  4482  00C9  07D6               	addwf	ADCConv@sumBatt^(0+256),f
  4483  00CA  0020               	movlb	0	; select bank0
  4484  00CB  085C               	movf	??_ADCConv+5,w
  4485  00CC  0022               	movlb	2	; select bank2
  4486  00CD  3DD7               	addwfc	(ADCConv@sumBatt+1)^(0+256),f
  4487  00CE  3001               	movlw	1
  4488  00CF  0020               	movlb	0	; select bank0
  4489  00D0  00D7               	movwf	??_ADCConv
  4490  00D1  0857               	movf	??_ADCConv,w
  4491  00D2  0022               	movlb	2	; select bank2
  4492  00D3  07E1               	addwf	ADCConv@i^(0+256),f
  4493  00D4  300A               	movlw	10
  4494  00D5  0261               	subwf	ADCConv@i^(0+256),w
  4495  00D6  1C03               	skipc
  4496  00D7  28B3               	goto	l3788
  4497  00D8                     l3794:	
  4498                           
  4499                           ;ADC.c: 127: batt=sumBatt/(10);
  4500  00D8  300A               	movlw	10
  4501  00D9  00F1               	movwf	___lwdiv@divisor
  4502  00DA  3000               	movlw	0
  4503  00DB  00F2               	movwf	___lwdiv@divisor+1
  4504  00DC  0857               	movf	(ADCConv@sumBatt+1)^(0+256),w
  4505  00DD  00F4               	movwf	___lwdiv@dividend+1
  4506  00DE  0856               	movf	ADCConv@sumBatt^(0+256),w
  4507  00DF  00F3               	movwf	___lwdiv@dividend
  4508  00E0  318C  24EB  3180   	fcall	___lwdiv
  4509  00E3  0872               	movf	?___lwdiv+1,w
  4510  00E4  0021               	movlb	1	; select bank1
  4511  00E5  00AA               	movwf	(_batt+1)^(0+128)
  4512  00E6  0871               	movf	?___lwdiv,w
  4513  00E7  00A9               	movwf	_batt^(0+128)
  4514                           
  4515                           ;ADC.c: 131: battV=batt*1.024/1024*11;
  4516  00E8  3000               	movlw	0
  4517  00E9  0020               	movlb	0	; select bank0
  4518  00EA  00C7               	movwf	___ftdiv@f2
  4519  00EB  3080               	movlw	128
  4520  00EC  00C8               	movwf	___ftdiv@f2+1
  4521  00ED  3044               	movlw	68
  4522  00EE  00C9               	movwf	___ftdiv@f2+2
  4523  00EF  3012               	movlw	18
  4524  00F0  00A4               	movwf	___ftmul@f1
  4525  00F1  3083               	movlw	131
  4526  00F2  00A5               	movwf	___ftmul@f1+1
  4527  00F3  303F               	movlw	63
  4528  00F4  00A6               	movwf	___ftmul@f1+2
  4529  00F5  0021               	movlb	1	; select bank1
  4530  00F6  082A               	movf	(_batt+1)^(0+128),w
  4531  00F7  00FA               	movwf	___lwtoft@c+1
  4532  00F8  0829               	movf	_batt^(0+128),w
  4533  00F9  00F9               	movwf	___lwtoft@c
  4534  00FA  3189  2158  3180   	fcall	___lwtoft
  4535  00FD  0879               	movf	?___lwtoft,w
  4536  00FE  0020               	movlb	0	; select bank0
  4537  00FF  00A7               	movwf	___ftmul@f2
  4538  0100  087A               	movf	?___lwtoft+1,w
  4539  0101  00A8               	movwf	___ftmul@f2+1
  4540  0102  087B               	movf	?___lwtoft+2,w
  4541  0103  00A9               	movwf	___ftmul@f2+2
  4542  0104  3186  26DA  3180   	fcall	___ftmul
  4543  0107  0020               	movlb	0	; select bank0
  4544  0108  0824               	movf	?___ftmul,w
  4545  0109  00CA               	movwf	___ftdiv@f1
  4546  010A  0825               	movf	?___ftmul+1,w
  4547  010B  00CB               	movwf	___ftdiv@f1+1
  4548  010C  0826               	movf	?___ftmul+2,w
  4549  010D  00CC               	movwf	___ftdiv@f1+2
  4550  010E  318F  2757  3180   	fcall	___ftdiv
  4551  0111  0020               	movlb	0	; select bank0
  4552  0112  0847               	movf	?___ftdiv,w
  4553  0113  0022               	movlb	2	; select bank2
  4554  0114  00CF               	movwf	_ADCConv$1418^(0+256)
  4555  0115  0020               	movlb	0	; select bank0
  4556  0116  0848               	movf	?___ftdiv+1,w
  4557  0117  0022               	movlb	2	; select bank2
  4558  0118  00D0               	movwf	(_ADCConv$1418+1)^(0+256)
  4559  0119  0020               	movlb	0	; select bank0
  4560  011A  0849               	movf	?___ftdiv+2,w
  4561  011B  0022               	movlb	2	; select bank2
  4562  011C  00D1               	movwf	(_ADCConv$1418+2)^(0+256)
  4563                           
  4564                           ;ADC.c: 131: battV=batt*1.024/1024*11;
  4565  011D  3000               	movlw	0
  4566  011E  0020               	movlb	0	; select bank0
  4567  011F  00A4               	movwf	___ftmul@f1
  4568  0120  3030               	movlw	48
  4569  0121  00A5               	movwf	___ftmul@f1+1
  4570  0122  3041               	movlw	65
  4571  0123  00A6               	movwf	___ftmul@f1+2
  4572  0124  0022               	movlb	2	; select bank2
  4573  0125  084F               	movf	_ADCConv$1418^(0+256),w
  4574  0126  0020               	movlb	0	; select bank0
  4575  0127  00A7               	movwf	___ftmul@f2
  4576  0128  0022               	movlb	2	; select bank2
  4577  0129  0850               	movf	(_ADCConv$1418+1)^(0+256),w
  4578  012A  0020               	movlb	0	; select bank0
  4579  012B  00A8               	movwf	___ftmul@f2+1
  4580  012C  0022               	movlb	2	; select bank2
  4581  012D  0851               	movf	(_ADCConv$1418+2)^(0+256),w
  4582  012E  0020               	movlb	0	; select bank0
  4583  012F  00A9               	movwf	___ftmul@f2+2
  4584  0130  3186  26DA  3180   	fcall	___ftmul
  4585  0133  0020               	movlb	0	; select bank0
  4586  0134  0824               	movf	?___ftmul,w
  4587  0135  0021               	movlb	1	; select bank1
  4588  0136  00A0               	movwf	_battV^(0+128)
  4589  0137  0020               	movlb	0	; select bank0
  4590  0138  0825               	movf	?___ftmul+1,w
  4591  0139  0021               	movlb	1	; select bank1
  4592  013A  00A1               	movwf	(_battV+1)^(0+128)
  4593  013B  0020               	movlb	0	; select bank0
  4594  013C  0826               	movf	?___ftmul+2,w
  4595  013D  0021               	movlb	1	; select bank1
  4596  013E  00A2               	movwf	(_battV+2)^(0+128)
  4597                           
  4598                           ;ADC.c: 133: LATAbits.LATA0=0;
  4599  013F  0022               	movlb	2	; select bank2
  4600  0140  100C               	bcf	12,0	;volatile
  4601                           
  4602                           ;ADC.c: 137: ADCON1=0b10010011;
  4603  0141  3093               	movlw	147
  4604  0142  0021               	movlb	1	; select bank1
  4605  0143  009E               	movwf	30	;volatile
  4606                           
  4607                           ;ADC.c: 138: ADCON0=0b00001001;
  4608  0144  3009               	movlw	9
  4609  0145  009D               	movwf	29	;volatile
  4610                           
  4611                           ;ADC.c: 140: _delay((unsigned long)((10)*(8000000/4000000.0)));
  4612  0146  3006               	movlw	6
  4613  0147  0020               	movlb	0	; select bank0
  4614  0148  00D7               	movwf	??_ADCConv
  4615  0149                     u4997:	
  4616  0149  0BD7               	decfsz	??_ADCConv,f
  4617  014A  2949               	goto	u4997
  4618  014B  0000               	nop
  4619                           
  4620                           ;ADC.c: 141: for(i=0;i<(100);i++)
  4621  014C  0022               	movlb	2	; select bank2
  4622  014D  01E1               	clrf	ADCConv@i^(0+256)
  4623  014E  3064               	movlw	100
  4624  014F  0261               	subwf	ADCConv@i^(0+256),w
  4625  0150  1803               	btfsc	3,0
  4626  0151  29A0               	goto	l3818
  4627  0152                     l131:	
  4628                           
  4629                           ;ADC.c: 142: {
  4630                           ;ADC.c: 144: ADCON0bits.GO=1;
  4631  0152  0021               	movlb	1	; select bank1
  4632  0153  149D               	bsf	29,1	;volatile
  4633  0154                     l133:	
  4634                           ;ADC.c: 146: while(ADCON0bits.GO)
  4635                           
  4636  0154  0021               	movlb	1	; select bank1
  4637  0155  1C9D               	btfss	29,1	;volatile
  4638  0156  2959               	goto	l3810
  4639  0157  0064               	clrwdt	;# 
  4640  0158  2954               	goto	l133
  4641  0159                     l3810:	
  4642                           
  4643                           ;ADC.c: 149: adc_vals[i].lVal=ADRESL;
  4644  0159  0022               	movlb	2	; select bank2
  4645  015A  0861               	movf	ADCConv@i^(0+256),w
  4646  015B  0020               	movlb	0	; select bank0
  4647  015C  00D7               	movwf	??_ADCConv
  4648  015D  01D8               	clrf	??_ADCConv+1
  4649  015E  35D7               	lslf	??_ADCConv,f
  4650  015F  0DD8               	rlf	??_ADCConv+1,f
  4651  0160  3028               	movlw	40
  4652  0161  00D9               	movwf	??_ADCConv+2
  4653  0162  3023               	movlw	35
  4654  0163  00DA               	movwf	??_ADCConv+3
  4655  0164  0857               	movf	??_ADCConv,w
  4656  0165  0759               	addwf	??_ADCConv+2,w
  4657  0166  00DB               	movwf	??_ADCConv+4
  4658  0167  0858               	movf	??_ADCConv+1,w
  4659  0168  3D5A               	addwfc	??_ADCConv+3,w
  4660  0169  00DC               	movwf	??_ADCConv+5
  4661  016A  085B               	movf	??_ADCConv+4,w
  4662  016B  0086               	movwf	6
  4663  016C  085C               	movf	??_ADCConv+5,w
  4664  016D  0087               	movwf	7
  4665  016E  0021               	movlb	1	; select bank1
  4666  016F  081B               	movf	27,w	;volatile
  4667  0170  0081               	movwf	1
  4668                           
  4669                           ;ADC.c: 150: adc_vals[i].hVal=ADRESH;
  4670  0171  0022               	movlb	2	; select bank2
  4671  0172  0861               	movf	ADCConv@i^(0+256),w
  4672  0173  0020               	movlb	0	; select bank0
  4673  0174  00D7               	movwf	??_ADCConv
  4674  0175  01D8               	clrf	??_ADCConv+1
  4675  0176  35D7               	lslf	??_ADCConv,f
  4676  0177  0DD8               	rlf	??_ADCConv+1,f
  4677  0178  0857               	movf	??_ADCConv,w
  4678  0179  3E01               	addlw	1
  4679  017A  00D9               	movwf	??_ADCConv+2
  4680  017B  3000               	movlw	0
  4681  017C  3D58               	addwfc	??_ADCConv+1,w
  4682  017D  00DA               	movwf	??_ADCConv+3
  4683  017E  3028               	movlw	40
  4684  017F  00DB               	movwf	??_ADCConv+4
  4685  0180  3023               	movlw	35
  4686  0181  00DC               	movwf	??_ADCConv+5
  4687  0182  0859               	movf	??_ADCConv+2,w
  4688  0183  075B               	addwf	??_ADCConv+4,w
  4689  0184  00DD               	movwf	??_ADCConv+6
  4690  0185  085A               	movf	??_ADCConv+3,w
  4691  0186  3D5C               	addwfc	??_ADCConv+5,w
  4692  0187  00DE               	movwf	??_ADCConv+7
  4693  0188  085D               	movf	??_ADCConv+6,w
  4694  0189  0086               	movwf	6
  4695  018A  085E               	movf	??_ADCConv+7,w
  4696  018B  0087               	movwf	7
  4697  018C  0021               	movlb	1	; select bank1
  4698  018D  081C               	movf	28,w	;volatile
  4699  018E  0081               	movwf	1
  4700                           
  4701                           ;ADC.c: 152: DLYDelay_ms((200-17));
  4702  018F  30B7               	movlw	183
  4703  0190  00F1               	movwf	DLYDelay_ms@val
  4704  0191  3000               	movlw	0
  4705  0192  00F2               	movwf	DLYDelay_ms@val+1
  4706  0193  3189  21B1  3180   	fcall	_DLYDelay_ms
  4707  0196  3001               	movlw	1
  4708  0197  0020               	movlb	0	; select bank0
  4709  0198  00D7               	movwf	??_ADCConv
  4710  0199  0857               	movf	??_ADCConv,w
  4711  019A  0022               	movlb	2	; select bank2
  4712  019B  07E1               	addwf	ADCConv@i^(0+256),f
  4713  019C  3064               	movlw	100
  4714  019D  0261               	subwf	ADCConv@i^(0+256),w
  4715  019E  1C03               	skipc
  4716  019F  2952               	goto	l131
  4717  01A0                     l3818:	
  4718                           
  4719                           ;ADC.c: 153: }
  4720                           ;ADC.c: 155: maxCurr=0;
  4721  01A0  3000               	movlw	0
  4722  01A1  00DB               	movwf	(ADCConv@maxCurr+3)^(0+256)
  4723  01A2  3000               	movlw	0
  4724  01A3  00DA               	movwf	(ADCConv@maxCurr+2)^(0+256)
  4725  01A4  3000               	movlw	0
  4726  01A5  00D9               	movwf	(ADCConv@maxCurr+1)^(0+256)
  4727  01A6  3000               	movlw	0
  4728  01A7  00D8               	movwf	ADCConv@maxCurr^(0+256)
  4729                           
  4730                           ;ADC.c: 156: for(i=0;i<(100);i++)
  4731  01A8  01E1               	clrf	ADCConv@i^(0+256)
  4732  01A9  3064               	movlw	100
  4733  01AA  0261               	subwf	ADCConv@i^(0+256),w
  4734  01AB  1803               	btfsc	3,0
  4735  01AC  29FD               	goto	l3834
  4736  01AD                     l3826:	
  4737                           
  4738                           ;ADC.c: 157: {
  4739                           ;ADC.c: 158: if(adc_vals[i].val>maxCurr)
  4740  01AD  0861               	movf	ADCConv@i^(0+256),w
  4741  01AE  0020               	movlb	0	; select bank0
  4742  01AF  00D7               	movwf	??_ADCConv
  4743  01B0  01D8               	clrf	??_ADCConv+1
  4744  01B1  35D7               	lslf	??_ADCConv,f
  4745  01B2  0DD8               	rlf	??_ADCConv+1,f
  4746  01B3  3028               	movlw	40
  4747  01B4  0757               	addwf	??_ADCConv,w
  4748  01B5  0084               	movwf	4
  4749  01B6  3023               	movlw	35
  4750  01B7  3D58               	addwfc	??_ADCConv+1,w
  4751  01B8  0085               	movwf	5
  4752  01B9  3F00               	moviw [0]fsr0
  4753  01BA  00D9               	movwf	??_ADCConv+2
  4754  01BB  3F01               	moviw [1]fsr0
  4755  01BC  00DA               	movwf	??_ADCConv+3
  4756  01BD  01DB               	clrf	??_ADCConv+4
  4757  01BE  01DC               	clrf	??_ADCConv+5
  4758  01BF  085C               	movf	??_ADCConv+5,w
  4759  01C0  0022               	movlb	2	; select bank2
  4760  01C1  025B               	subwf	(ADCConv@maxCurr+3)^(0+256),w
  4761  01C2  1D03               	skipz
  4762  01C3  29D4               	goto	u4345
  4763  01C4  0020               	movlb	0	; select bank0
  4764  01C5  085B               	movf	??_ADCConv+4,w
  4765  01C6  0022               	movlb	2	; select bank2
  4766  01C7  025A               	subwf	(ADCConv@maxCurr+2)^(0+256),w
  4767  01C8  1D03               	skipz
  4768  01C9  29D4               	goto	u4345
  4769  01CA  0020               	movlb	0	; select bank0
  4770  01CB  085A               	movf	??_ADCConv+3,w
  4771  01CC  0022               	movlb	2	; select bank2
  4772  01CD  0259               	subwf	(ADCConv@maxCurr+1)^(0+256),w
  4773  01CE  1D03               	skipz
  4774  01CF  29D4               	goto	u4345
  4775  01D0  0020               	movlb	0	; select bank0
  4776  01D1  0859               	movf	??_ADCConv+2,w
  4777  01D2  0022               	movlb	2	; select bank2
  4778  01D3  0258               	subwf	ADCConv@maxCurr^(0+256),w
  4779  01D4                     u4345:	
  4780  01D4  1803               	skipnc
  4781  01D5  29F3               	goto	l3830
  4782                           
  4783                           ;ADC.c: 159: maxCurr=adc_vals[i].val;
  4784  01D6  0861               	movf	ADCConv@i^(0+256),w
  4785  01D7  0020               	movlb	0	; select bank0
  4786  01D8  00D7               	movwf	??_ADCConv
  4787  01D9  01D8               	clrf	??_ADCConv+1
  4788  01DA  35D7               	lslf	??_ADCConv,f
  4789  01DB  0DD8               	rlf	??_ADCConv+1,f
  4790  01DC  3028               	movlw	40
  4791  01DD  00D9               	movwf	??_ADCConv+2
  4792  01DE  3023               	movlw	35
  4793  01DF  00DA               	movwf	??_ADCConv+3
  4794  01E0  0857               	movf	??_ADCConv,w
  4795  01E1  0759               	addwf	??_ADCConv+2,w
  4796  01E2  0086               	movwf	6
  4797  01E3  0858               	movf	??_ADCConv+1,w
  4798  01E4  3D5A               	addwfc	??_ADCConv+3,w
  4799  01E5  0087               	movwf	7
  4800  01E6  3F40               	moviw [0]fsr1
  4801  01E7  00DB               	movwf	??_ADCConv+4
  4802  01E8  3F41               	moviw [1]fsr1
  4803  01E9  00DC               	movwf	??_ADCConv+5
  4804  01EA  085B               	movf	??_ADCConv+4,w
  4805  01EB  0022               	movlb	2	; select bank2
  4806  01EC  00D8               	movwf	ADCConv@maxCurr^(0+256)
  4807  01ED  0020               	movlb	0	; select bank0
  4808  01EE  085C               	movf	??_ADCConv+5,w
  4809  01EF  0022               	movlb	2	; select bank2
  4810  01F0  00D9               	movwf	(ADCConv@maxCurr^(0+256)+1)
  4811  01F1  01DA               	clrf	(ADCConv@maxCurr^(0+256)+2)
  4812  01F2  01DB               	clrf	(ADCConv@maxCurr^(0+256)+3)
  4813  01F3                     l3830:	
  4814  01F3  3001               	movlw	1
  4815  01F4  0020               	movlb	0	; select bank0
  4816  01F5  00D7               	movwf	??_ADCConv
  4817  01F6  0857               	movf	??_ADCConv,w
  4818  01F7  0022               	movlb	2	; select bank2
  4819  01F8  07E1               	addwf	ADCConv@i^(0+256),f
  4820  01F9  3064               	movlw	100
  4821  01FA  0261               	subwf	ADCConv@i^(0+256),w
  4822  01FB  1C03               	skipc
  4823  01FC  29AD               	goto	l3826
  4824  01FD                     l3834:	
  4825                           
  4826                           ;ADC.c: 160: }
  4827                           ;ADC.c: 162: rmsCurr=(float)maxCurr/sqrt(2);
  4828  01FD  3000               	movlw	0
  4829  01FE  0020               	movlb	0	; select bank0
  4830  01FF  00B4               	movwf	sqrt@y
  4831  0200  3000               	movlw	0
  4832  0201  00B5               	movwf	sqrt@y+1
  4833  0202  3040               	movlw	64
  4834  0203  00B6               	movwf	sqrt@y+2
  4835  0204  3185  252E  3180   	fcall	_sqrt
  4836  0207  0020               	movlb	0	; select bank0
  4837  0208  0834               	movf	?_sqrt,w
  4838  0209  00C7               	movwf	___ftdiv@f2
  4839  020A  0835               	movf	?_sqrt+1,w
  4840  020B  00C8               	movwf	___ftdiv@f2+1
  4841  020C  0836               	movf	?_sqrt+2,w
  4842  020D  00C9               	movwf	___ftdiv@f2+2
  4843  020E  0022               	movlb	2	; select bank2
  4844  020F  085B               	movf	(ADCConv@maxCurr+3)^(0+256),w
  4845  0210  0020               	movlb	0	; select bank0
  4846  0211  00A3               	movwf	___lltoft@c+3
  4847  0212  0022               	movlb	2	; select bank2
  4848  0213  085A               	movf	(ADCConv@maxCurr+2)^(0+256),w
  4849  0214  0020               	movlb	0	; select bank0
  4850  0215  00A2               	movwf	___lltoft@c+2
  4851  0216  0022               	movlb	2	; select bank2
  4852  0217  0859               	movf	(ADCConv@maxCurr+1)^(0+256),w
  4853  0218  0020               	movlb	0	; select bank0
  4854  0219  00A1               	movwf	___lltoft@c+1
  4855  021A  0022               	movlb	2	; select bank2
  4856  021B  0858               	movf	ADCConv@maxCurr^(0+256),w
  4857  021C  0020               	movlb	0	; select bank0
  4858  021D  00A0               	movwf	___lltoft@c
  4859  021E  318B  23D0  3180   	fcall	___lltoft
  4860  0221  0020               	movlb	0	; select bank0
  4861  0222  0820               	movf	?___lltoft,w
  4862  0223  00CA               	movwf	___ftdiv@f1
  4863  0224  0821               	movf	?___lltoft+1,w
  4864  0225  00CB               	movwf	___ftdiv@f1+1
  4865  0226  0822               	movf	?___lltoft+2,w
  4866  0227  00CC               	movwf	___ftdiv@f1+2
  4867  0228  318F  2757  3180   	fcall	___ftdiv
  4868  022B  0020               	movlb	0	; select bank0
  4869  022C  0847               	movf	?___ftdiv,w
  4870  022D  0021               	movlb	1	; select bank1
  4871  022E  00A6               	movwf	_rmsCurr^(0+128)
  4872  022F  0020               	movlb	0	; select bank0
  4873  0230  0848               	movf	?___ftdiv+1,w
  4874  0231  0021               	movlb	1	; select bank1
  4875  0232  00A7               	movwf	(_rmsCurr+1)^(0+128)
  4876  0233  0020               	movlb	0	; select bank0
  4877  0234  0849               	movf	?___ftdiv+2,w
  4878  0235  0021               	movlb	1	; select bank1
  4879  0236  00A8               	movwf	(_rmsCurr+2)^(0+128)
  4880                           
  4881                           ;ADC.c: 165: sumCurr=0;
  4882  0237  3000               	movlw	0
  4883  0238  0022               	movlb	2	; select bank2
  4884  0239  00D5               	movwf	(ADCConv@sumCurr+3)^(0+256)
  4885  023A  3000               	movlw	0
  4886  023B  00D4               	movwf	(ADCConv@sumCurr+2)^(0+256)
  4887  023C  3000               	movlw	0
  4888  023D  00D3               	movwf	(ADCConv@sumCurr+1)^(0+256)
  4889  023E  3000               	movlw	0
  4890  023F  00D2               	movwf	ADCConv@sumCurr^(0+256)
  4891                           
  4892                           ;ADC.c: 166: for(i=0;i<(100);)
  4893  0240  01E1               	clrf	ADCConv@i^(0+256)
  4894  0241  3064               	movlw	100
  4895  0242  0261               	subwf	ADCConv@i^(0+256),w
  4896  0243  1803               	btfsc	3,0
  4897  0244  2ABC               	goto	l3864
  4898  0245                     l3844:	
  4899                           
  4900                           ;ADC.c: 167: {
  4901                           ;ADC.c: 174: sumEavCurr=0;
  4902  0245  3000               	movlw	0
  4903  0246  00E0               	movwf	(ADCConv@sumEavCurr+3)^(0+256)
  4904  0247  3000               	movlw	0
  4905  0248  00DF               	movwf	(ADCConv@sumEavCurr+2)^(0+256)
  4906  0249  3000               	movlw	0
  4907  024A  00DE               	movwf	(ADCConv@sumEavCurr+1)^(0+256)
  4908  024B  3000               	movlw	0
  4909  024C  00DD               	movwf	ADCConv@sumEavCurr^(0+256)
  4910                           
  4911                           ;ADC.c: 175: for(j=0;j<((100)/(20));j++,i++)
  4912  024D  01DC               	clrf	ADCConv@j^(0+256)
  4913  024E  3005               	movlw	5
  4914  024F  025C               	subwf	ADCConv@j^(0+256),w
  4915  0250  1803               	btfsc	3,0
  4916  0251  2A80               	goto	l3860
  4917  0252                     l3852:	
  4918                           
  4919                           ;ADC.c: 176: sumEavCurr+=adc_vals[i].val;
  4920  0252  0861               	movf	ADCConv@i^(0+256),w
  4921  0253  0020               	movlb	0	; select bank0
  4922  0254  00D7               	movwf	??_ADCConv
  4923  0255  01D8               	clrf	??_ADCConv+1
  4924  0256  35D7               	lslf	??_ADCConv,f
  4925  0257  0DD8               	rlf	??_ADCConv+1,f
  4926  0258  3028               	movlw	40
  4927  0259  00D9               	movwf	??_ADCConv+2
  4928  025A  3023               	movlw	35
  4929  025B  00DA               	movwf	??_ADCConv+3
  4930  025C  0857               	movf	??_ADCConv,w
  4931  025D  0759               	addwf	??_ADCConv+2,w
  4932  025E  0086               	movwf	6
  4933  025F  0858               	movf	??_ADCConv+1,w
  4934  0260  3D5A               	addwfc	??_ADCConv+3,w
  4935  0261  0087               	movwf	7
  4936  0262  3F40               	moviw [0]fsr1
  4937  0263  00DB               	movwf	??_ADCConv+4
  4938  0264  3F41               	moviw [1]fsr1
  4939  0265  00DC               	movwf	??_ADCConv+5
  4940  0266  085B               	movf	??_ADCConv+4,w
  4941  0267  0022               	movlb	2	; select bank2
  4942  0268  07DD               	addwf	ADCConv@sumEavCurr^(0+256),f
  4943  0269  0020               	movlb	0	; select bank0
  4944  026A  085C               	movf	??_ADCConv+5,w
  4945  026B  0022               	movlb	2	; select bank2
  4946  026C  3DDE               	addwfc	(ADCConv@sumEavCurr+1)^(0+256),f
  4947  026D  3000               	movlw	0
  4948  026E  3DDF               	addwfc	(ADCConv@sumEavCurr+2)^(0+256),f
  4949  026F  3DE0               	addwfc	(ADCConv@sumEavCurr+3)^(0+256),f
  4950  0270  3001               	movlw	1
  4951  0271  0020               	movlb	0	; select bank0
  4952  0272  00D7               	movwf	??_ADCConv
  4953  0273  0857               	movf	??_ADCConv,w
  4954  0274  0022               	movlb	2	; select bank2
  4955  0275  07DC               	addwf	ADCConv@j^(0+256),f
  4956  0276  3001               	movlw	1
  4957  0277  0020               	movlb	0	; select bank0
  4958  0278  00D7               	movwf	??_ADCConv
  4959  0279  0857               	movf	??_ADCConv,w
  4960  027A  0022               	movlb	2	; select bank2
  4961  027B  07E1               	addwf	ADCConv@i^(0+256),f
  4962  027C  3005               	movlw	5
  4963  027D  025C               	subwf	ADCConv@j^(0+256),w
  4964  027E  1C03               	skipc
  4965  027F  2A52               	goto	l3852
  4966  0280                     l3860:	
  4967                           
  4968                           ;ADC.c: 177: sumEavCurr/=((100)/(20));
  4969  0280  3000               	movlw	0
  4970  0281  00F4               	movwf	___lldiv@divisor+3
  4971  0282  3000               	movlw	0
  4972  0283  00F3               	movwf	___lldiv@divisor+2
  4973  0284  3000               	movlw	0
  4974  0285  00F2               	movwf	___lldiv@divisor+1
  4975  0286  3005               	movlw	5
  4976  0287  00F1               	movwf	___lldiv@divisor
  4977  0288  0860               	movf	(ADCConv@sumEavCurr+3)^(0+256),w
  4978  0289  00F8               	movwf	___lldiv@dividend+3
  4979  028A  085F               	movf	(ADCConv@sumEavCurr+2)^(0+256),w
  4980  028B  00F7               	movwf	___lldiv@dividend+2
  4981  028C  085E               	movf	(ADCConv@sumEavCurr+1)^(0+256),w
  4982  028D  00F6               	movwf	___lldiv@dividend+1
  4983  028E  085D               	movf	ADCConv@sumEavCurr^(0+256),w
  4984  028F  00F5               	movwf	___lldiv@dividend
  4985  0290  318D  25E5  3180   	fcall	___lldiv
  4986  0293  0874               	movf	?___lldiv+3,w
  4987  0294  0022               	movlb	2	; select bank2
  4988  0295  00E0               	movwf	(ADCConv@sumEavCurr+3)^(0+256)
  4989  0296  0873               	movf	?___lldiv+2,w
  4990  0297  00DF               	movwf	(ADCConv@sumEavCurr+2)^(0+256)
  4991  0298  0872               	movf	?___lldiv+1,w
  4992  0299  00DE               	movwf	(ADCConv@sumEavCurr+1)^(0+256)
  4993  029A  0871               	movf	?___lldiv,w
  4994  029B  00DD               	movwf	ADCConv@sumEavCurr^(0+256)
  4995                           
  4996                           ;ADC.c: 178: sumCurr+=sumEavCurr*sumEavCurr;
  4997  029C  0860               	movf	(ADCConv@sumEavCurr+3)^(0+256),w
  4998  029D  00F4               	movwf	___lmul@multiplier+3
  4999  029E  085F               	movf	(ADCConv@sumEavCurr+2)^(0+256),w
  5000  029F  00F3               	movwf	___lmul@multiplier+2
  5001  02A0  085E               	movf	(ADCConv@sumEavCurr+1)^(0+256),w
  5002  02A1  00F2               	movwf	___lmul@multiplier+1
  5003  02A2  085D               	movf	ADCConv@sumEavCurr^(0+256),w
  5004  02A3  00F1               	movwf	___lmul@multiplier
  5005  02A4  0860               	movf	(ADCConv@sumEavCurr+3)^(0+256),w
  5006  02A5  00F8               	movwf	___lmul@multiplicand+3
  5007  02A6  085F               	movf	(ADCConv@sumEavCurr+2)^(0+256),w
  5008  02A7  00F7               	movwf	___lmul@multiplicand+2
  5009  02A8  085E               	movf	(ADCConv@sumEavCurr+1)^(0+256),w
  5010  02A9  00F6               	movwf	___lmul@multiplicand+1
  5011  02AA  085D               	movf	ADCConv@sumEavCurr^(0+256),w
  5012  02AB  00F5               	movwf	___lmul@multiplicand
  5013  02AC  318C  24B9  3180   	fcall	___lmul
  5014  02AF  0871               	movf	?___lmul,w
  5015  02B0  0022               	movlb	2	; select bank2
  5016  02B1  07D2               	addwf	ADCConv@sumCurr^(0+256),f
  5017  02B2  0872               	movf	?___lmul+1,w
  5018  02B3  3DD3               	addwfc	(ADCConv@sumCurr+1)^(0+256),f
  5019  02B4  0873               	movf	?___lmul+2,w
  5020  02B5  3DD4               	addwfc	(ADCConv@sumCurr+2)^(0+256),f
  5021  02B6  0874               	movf	?___lmul+3,w
  5022  02B7  3DD5               	addwfc	(ADCConv@sumCurr+3)^(0+256),f
  5023  02B8  3064               	movlw	100
  5024  02B9  0261               	subwf	ADCConv@i^(0+256),w
  5025  02BA  1C03               	skipc
  5026  02BB  2A45               	goto	l3844
  5027  02BC                     l3864:	
  5028                           
  5029                           ;ADC.c: 179: }
  5030                           ;ADC.c: 186: realRmsCurr=(float)sumCurr*2;
  5031  02BC  3000               	movlw	0
  5032  02BD  0020               	movlb	0	; select bank0
  5033  02BE  00A4               	movwf	___ftmul@f1
  5034  02BF  3000               	movlw	0
  5035  02C0  00A5               	movwf	___ftmul@f1+1
  5036  02C1  3040               	movlw	64
  5037  02C2  00A6               	movwf	___ftmul@f1+2
  5038  02C3  0022               	movlb	2	; select bank2
  5039  02C4  0855               	movf	(ADCConv@sumCurr+3)^(0+256),w
  5040  02C5  0020               	movlb	0	; select bank0
  5041  02C6  00A3               	movwf	___lltoft@c+3
  5042  02C7  0022               	movlb	2	; select bank2
  5043  02C8  0854               	movf	(ADCConv@sumCurr+2)^(0+256),w
  5044  02C9  0020               	movlb	0	; select bank0
  5045  02CA  00A2               	movwf	___lltoft@c+2
  5046  02CB  0022               	movlb	2	; select bank2
  5047  02CC  0853               	movf	(ADCConv@sumCurr+1)^(0+256),w
  5048  02CD  0020               	movlb	0	; select bank0
  5049  02CE  00A1               	movwf	___lltoft@c+1
  5050  02CF  0022               	movlb	2	; select bank2
  5051  02D0  0852               	movf	ADCConv@sumCurr^(0+256),w
  5052  02D1  0020               	movlb	0	; select bank0
  5053  02D2  00A0               	movwf	___lltoft@c
  5054  02D3  318B  23D0  3180   	fcall	___lltoft
  5055  02D6  0020               	movlb	0	; select bank0
  5056  02D7  0820               	movf	?___lltoft,w
  5057  02D8  00A7               	movwf	___ftmul@f2
  5058  02D9  0821               	movf	?___lltoft+1,w
  5059  02DA  00A8               	movwf	___ftmul@f2+1
  5060  02DB  0822               	movf	?___lltoft+2,w
  5061  02DC  00A9               	movwf	___ftmul@f2+2
  5062  02DD  3186  26DA  3180   	fcall	___ftmul
  5063  02E0  0020               	movlb	0	; select bank0
  5064  02E1  0824               	movf	?___ftmul,w
  5065  02E2  0021               	movlb	1	; select bank1
  5066  02E3  00A3               	movwf	_realRmsCurr^(0+128)
  5067  02E4  0020               	movlb	0	; select bank0
  5068  02E5  0825               	movf	?___ftmul+1,w
  5069  02E6  0021               	movlb	1	; select bank1
  5070  02E7  00A4               	movwf	(_realRmsCurr+1)^(0+128)
  5071  02E8  0020               	movlb	0	; select bank0
  5072  02E9  0826               	movf	?___ftmul+2,w
  5073  02EA  0021               	movlb	1	; select bank1
  5074  02EB  00A5               	movwf	(_realRmsCurr+2)^(0+128)
  5075                           
  5076                           ;ADC.c: 187: realRmsCurr*=(float)1.024;
  5077  02EC  3012               	movlw	18
  5078  02ED  0020               	movlb	0	; select bank0
  5079  02EE  00A4               	movwf	___ftmul@f1
  5080  02EF  3083               	movlw	131
  5081  02F0  00A5               	movwf	___ftmul@f1+1
  5082  02F1  303F               	movlw	63
  5083  02F2  00A6               	movwf	___ftmul@f1+2
  5084  02F3  0021               	movlb	1	; select bank1
  5085  02F4  0823               	movf	_realRmsCurr^(0+128),w
  5086  02F5  0020               	movlb	0	; select bank0
  5087  02F6  00A7               	movwf	___ftmul@f2
  5088  02F7  0021               	movlb	1	; select bank1
  5089  02F8  0824               	movf	(_realRmsCurr+1)^(0+128),w
  5090  02F9  0020               	movlb	0	; select bank0
  5091  02FA  00A8               	movwf	___ftmul@f2+1
  5092  02FB  0021               	movlb	1	; select bank1
  5093  02FC  0825               	movf	(_realRmsCurr+2)^(0+128),w
  5094  02FD  0020               	movlb	0	; select bank0
  5095  02FE  00A9               	movwf	___ftmul@f2+2
  5096  02FF  3186  26DA  3180   	fcall	___ftmul
  5097  0302  0020               	movlb	0	; select bank0
  5098  0303  0824               	movf	?___ftmul,w
  5099  0304  0021               	movlb	1	; select bank1
  5100  0305  00A3               	movwf	_realRmsCurr^(0+128)
  5101  0306  0020               	movlb	0	; select bank0
  5102  0307  0825               	movf	?___ftmul+1,w
  5103  0308  0021               	movlb	1	; select bank1
  5104  0309  00A4               	movwf	(_realRmsCurr+1)^(0+128)
  5105  030A  0020               	movlb	0	; select bank0
  5106  030B  0826               	movf	?___ftmul+2,w
  5107  030C  0021               	movlb	1	; select bank1
  5108  030D  00A5               	movwf	(_realRmsCurr+2)^(0+128)
  5109                           
  5110                           ;ADC.c: 188: realRmsCurr*=(float)1.024;
  5111  030E  3012               	movlw	18
  5112  030F  0020               	movlb	0	; select bank0
  5113  0310  00A4               	movwf	___ftmul@f1
  5114  0311  3083               	movlw	131
  5115  0312  00A5               	movwf	___ftmul@f1+1
  5116  0313  303F               	movlw	63
  5117  0314  00A6               	movwf	___ftmul@f1+2
  5118  0315  0021               	movlb	1	; select bank1
  5119  0316  0823               	movf	_realRmsCurr^(0+128),w
  5120  0317  0020               	movlb	0	; select bank0
  5121  0318  00A7               	movwf	___ftmul@f2
  5122  0319  0021               	movlb	1	; select bank1
  5123  031A  0824               	movf	(_realRmsCurr+1)^(0+128),w
  5124  031B  0020               	movlb	0	; select bank0
  5125  031C  00A8               	movwf	___ftmul@f2+1
  5126  031D  0021               	movlb	1	; select bank1
  5127  031E  0825               	movf	(_realRmsCurr+2)^(0+128),w
  5128  031F  0020               	movlb	0	; select bank0
  5129  0320  00A9               	movwf	___ftmul@f2+2
  5130  0321  3186  26DA  3180   	fcall	___ftmul
  5131  0324  0020               	movlb	0	; select bank0
  5132  0325  0824               	movf	?___ftmul,w
  5133  0326  0021               	movlb	1	; select bank1
  5134  0327  00A3               	movwf	_realRmsCurr^(0+128)
  5135  0328  0020               	movlb	0	; select bank0
  5136  0329  0825               	movf	?___ftmul+1,w
  5137  032A  0021               	movlb	1	; select bank1
  5138  032B  00A4               	movwf	(_realRmsCurr+1)^(0+128)
  5139  032C  0020               	movlb	0	; select bank0
  5140  032D  0826               	movf	?___ftmul+2,w
  5141  032E  0021               	movlb	1	; select bank1
  5142  032F  00A5               	movwf	(_realRmsCurr+2)^(0+128)
  5143                           
  5144                           ;ADC.c: 189: realRmsCurr*=(float)2000;
  5145  0330  3000               	movlw	0
  5146  0331  0020               	movlb	0	; select bank0
  5147  0332  00A4               	movwf	___ftmul@f1
  5148  0333  30FA               	movlw	250
  5149  0334  00A5               	movwf	___ftmul@f1+1
  5150  0335  3044               	movlw	68
  5151  0336  00A6               	movwf	___ftmul@f1+2
  5152  0337  0021               	movlb	1	; select bank1
  5153  0338  0823               	movf	_realRmsCurr^(0+128),w
  5154  0339  0020               	movlb	0	; select bank0
  5155  033A  00A7               	movwf	___ftmul@f2
  5156  033B  0021               	movlb	1	; select bank1
  5157  033C  0824               	movf	(_realRmsCurr+1)^(0+128),w
  5158  033D  0020               	movlb	0	; select bank0
  5159  033E  00A8               	movwf	___ftmul@f2+1
  5160  033F  0021               	movlb	1	; select bank1
  5161  0340  0825               	movf	(_realRmsCurr+2)^(0+128),w
  5162  0341  0020               	movlb	0	; select bank0
  5163  0342  00A9               	movwf	___ftmul@f2+2
  5164  0343  3186  26DA  3180   	fcall	___ftmul
  5165  0346  0020               	movlb	0	; select bank0
  5166  0347  0824               	movf	?___ftmul,w
  5167  0348  0021               	movlb	1	; select bank1
  5168  0349  00A3               	movwf	_realRmsCurr^(0+128)
  5169  034A  0020               	movlb	0	; select bank0
  5170  034B  0825               	movf	?___ftmul+1,w
  5171  034C  0021               	movlb	1	; select bank1
  5172  034D  00A4               	movwf	(_realRmsCurr+1)^(0+128)
  5173  034E  0020               	movlb	0	; select bank0
  5174  034F  0826               	movf	?___ftmul+2,w
  5175  0350  0021               	movlb	1	; select bank1
  5176  0351  00A5               	movwf	(_realRmsCurr+2)^(0+128)
  5177                           
  5178                           ;ADC.c: 190: realRmsCurr*=(float)2000;
  5179  0352  3000               	movlw	0
  5180  0353  0020               	movlb	0	; select bank0
  5181  0354  00A4               	movwf	___ftmul@f1
  5182  0355  30FA               	movlw	250
  5183  0356  00A5               	movwf	___ftmul@f1+1
  5184  0357  3044               	movlw	68
  5185  0358  00A6               	movwf	___ftmul@f1+2
  5186  0359  0021               	movlb	1	; select bank1
  5187  035A  0823               	movf	_realRmsCurr^(0+128),w
  5188  035B  0020               	movlb	0	; select bank0
  5189  035C  00A7               	movwf	___ftmul@f2
  5190  035D  0021               	movlb	1	; select bank1
  5191  035E  0824               	movf	(_realRmsCurr+1)^(0+128),w
  5192  035F  0020               	movlb	0	; select bank0
  5193  0360  00A8               	movwf	___ftmul@f2+1
  5194  0361  0021               	movlb	1	; select bank1
  5195  0362  0825               	movf	(_realRmsCurr+2)^(0+128),w
  5196  0363  0020               	movlb	0	; select bank0
  5197  0364  00A9               	movwf	___ftmul@f2+2
  5198  0365  3186  26DA  3180   	fcall	___ftmul
  5199  0368  0020               	movlb	0	; select bank0
  5200  0369  0824               	movf	?___ftmul,w
  5201  036A  0021               	movlb	1	; select bank1
  5202  036B  00A3               	movwf	_realRmsCurr^(0+128)
  5203  036C  0020               	movlb	0	; select bank0
  5204  036D  0825               	movf	?___ftmul+1,w
  5205  036E  0021               	movlb	1	; select bank1
  5206  036F  00A4               	movwf	(_realRmsCurr+1)^(0+128)
  5207  0370  0020               	movlb	0	; select bank0
  5208  0371  0826               	movf	?___ftmul+2,w
  5209  0372  0021               	movlb	1	; select bank1
  5210  0373  00A5               	movwf	(_realRmsCurr+2)^(0+128)
  5211                           
  5212                           ;ADC.c: 191: realRmsCurr/=(float)1024;
  5213  0374  3000               	movlw	0
  5214  0375  0020               	movlb	0	; select bank0
  5215  0376  00C7               	movwf	___ftdiv@f2
  5216  0377  3080               	movlw	128
  5217  0378  00C8               	movwf	___ftdiv@f2+1
  5218  0379  3044               	movlw	68
  5219  037A  00C9               	movwf	___ftdiv@f2+2
  5220  037B  0021               	movlb	1	; select bank1
  5221  037C  0823               	movf	_realRmsCurr^(0+128),w
  5222  037D  0020               	movlb	0	; select bank0
  5223  037E  00CA               	movwf	___ftdiv@f1
  5224  037F  0021               	movlb	1	; select bank1
  5225  0380  0824               	movf	(_realRmsCurr+1)^(0+128),w
  5226  0381  0020               	movlb	0	; select bank0
  5227  0382  00CB               	movwf	___ftdiv@f1+1
  5228  0383  0021               	movlb	1	; select bank1
  5229  0384  0825               	movf	(_realRmsCurr+2)^(0+128),w
  5230  0385  0020               	movlb	0	; select bank0
  5231  0386  00CC               	movwf	___ftdiv@f1+2
  5232  0387  318F  2757  3180   	fcall	___ftdiv
  5233  038A  0020               	movlb	0	; select bank0
  5234  038B  0847               	movf	?___ftdiv,w
  5235  038C  0021               	movlb	1	; select bank1
  5236  038D  00A3               	movwf	_realRmsCurr^(0+128)
  5237  038E  0020               	movlb	0	; select bank0
  5238  038F  0848               	movf	?___ftdiv+1,w
  5239  0390  0021               	movlb	1	; select bank1
  5240  0391  00A4               	movwf	(_realRmsCurr+1)^(0+128)
  5241  0392  0020               	movlb	0	; select bank0
  5242  0393  0849               	movf	?___ftdiv+2,w
  5243  0394  0021               	movlb	1	; select bank1
  5244  0395  00A5               	movwf	(_realRmsCurr+2)^(0+128)
  5245                           
  5246                           ;ADC.c: 192: realRmsCurr/=(float)1024;
  5247  0396  3000               	movlw	0
  5248  0397  0020               	movlb	0	; select bank0
  5249  0398  00C7               	movwf	___ftdiv@f2
  5250  0399  3080               	movlw	128
  5251  039A  00C8               	movwf	___ftdiv@f2+1
  5252  039B  3044               	movlw	68
  5253  039C  00C9               	movwf	___ftdiv@f2+2
  5254  039D  0021               	movlb	1	; select bank1
  5255  039E  0823               	movf	_realRmsCurr^(0+128),w
  5256  039F  0020               	movlb	0	; select bank0
  5257  03A0  00CA               	movwf	___ftdiv@f1
  5258  03A1  0021               	movlb	1	; select bank1
  5259  03A2  0824               	movf	(_realRmsCurr+1)^(0+128),w
  5260  03A3  0020               	movlb	0	; select bank0
  5261  03A4  00CB               	movwf	___ftdiv@f1+1
  5262  03A5  0021               	movlb	1	; select bank1
  5263  03A6  0825               	movf	(_realRmsCurr+2)^(0+128),w
  5264  03A7  0020               	movlb	0	; select bank0
  5265  03A8  00CC               	movwf	___ftdiv@f1+2
  5266  03A9  318F  2757  3180   	fcall	___ftdiv
  5267  03AC  0020               	movlb	0	; select bank0
  5268  03AD  0847               	movf	?___ftdiv,w
  5269  03AE  0021               	movlb	1	; select bank1
  5270  03AF  00A3               	movwf	_realRmsCurr^(0+128)
  5271  03B0  0020               	movlb	0	; select bank0
  5272  03B1  0848               	movf	?___ftdiv+1,w
  5273  03B2  0021               	movlb	1	; select bank1
  5274  03B3  00A4               	movwf	(_realRmsCurr+1)^(0+128)
  5275  03B4  0020               	movlb	0	; select bank0
  5276  03B5  0849               	movf	?___ftdiv+2,w
  5277  03B6  0021               	movlb	1	; select bank1
  5278  03B7  00A5               	movwf	(_realRmsCurr+2)^(0+128)
  5279                           
  5280                           ;ADC.c: 193: realRmsCurr/=(float)33.2;
  5281  03B8  30CD               	movlw	205
  5282  03B9  0020               	movlb	0	; select bank0
  5283  03BA  00C7               	movwf	___ftdiv@f2
  5284  03BB  3004               	movlw	4
  5285  03BC  00C8               	movwf	___ftdiv@f2+1
  5286  03BD  3042               	movlw	66
  5287  03BE  00C9               	movwf	___ftdiv@f2+2
  5288  03BF  0021               	movlb	1	; select bank1
  5289  03C0  0823               	movf	_realRmsCurr^(0+128),w
  5290  03C1  0020               	movlb	0	; select bank0
  5291  03C2  00CA               	movwf	___ftdiv@f1
  5292  03C3  0021               	movlb	1	; select bank1
  5293  03C4  0824               	movf	(_realRmsCurr+1)^(0+128),w
  5294  03C5  0020               	movlb	0	; select bank0
  5295  03C6  00CB               	movwf	___ftdiv@f1+1
  5296  03C7  0021               	movlb	1	; select bank1
  5297  03C8  0825               	movf	(_realRmsCurr+2)^(0+128),w
  5298  03C9  0020               	movlb	0	; select bank0
  5299  03CA  00CC               	movwf	___ftdiv@f1+2
  5300  03CB  318F  2757  3180   	fcall	___ftdiv
  5301  03CE  0020               	movlb	0	; select bank0
  5302  03CF  0847               	movf	?___ftdiv,w
  5303  03D0  0021               	movlb	1	; select bank1
  5304  03D1  00A3               	movwf	_realRmsCurr^(0+128)
  5305  03D2  0020               	movlb	0	; select bank0
  5306  03D3  0848               	movf	?___ftdiv+1,w
  5307  03D4  0021               	movlb	1	; select bank1
  5308  03D5  00A4               	movwf	(_realRmsCurr+1)^(0+128)
  5309  03D6  0020               	movlb	0	; select bank0
  5310  03D7  0849               	movf	?___ftdiv+2,w
  5311  03D8  0021               	movlb	1	; select bank1
  5312  03D9  00A5               	movwf	(_realRmsCurr+2)^(0+128)
  5313                           
  5314                           ;ADC.c: 194: realRmsCurr/=(float)33.2;
  5315  03DA  30CD               	movlw	205
  5316  03DB  0020               	movlb	0	; select bank0
  5317  03DC  00C7               	movwf	___ftdiv@f2
  5318  03DD  3004               	movlw	4
  5319  03DE  00C8               	movwf	___ftdiv@f2+1
  5320  03DF  3042               	movlw	66
  5321  03E0  00C9               	movwf	___ftdiv@f2+2
  5322  03E1  0021               	movlb	1	; select bank1
  5323  03E2  0823               	movf	_realRmsCurr^(0+128),w
  5324  03E3  0020               	movlb	0	; select bank0
  5325  03E4  00CA               	movwf	___ftdiv@f1
  5326  03E5  0021               	movlb	1	; select bank1
  5327  03E6  0824               	movf	(_realRmsCurr+1)^(0+128),w
  5328  03E7  0020               	movlb	0	; select bank0
  5329  03E8  00CB               	movwf	___ftdiv@f1+1
  5330  03E9  0021               	movlb	1	; select bank1
  5331  03EA  0825               	movf	(_realRmsCurr+2)^(0+128),w
  5332  03EB  0020               	movlb	0	; select bank0
  5333  03EC  00CC               	movwf	___ftdiv@f1+2
  5334  03ED  318F  2757  3180   	fcall	___ftdiv
  5335  03F0  0020               	movlb	0	; select bank0
  5336  03F1  0847               	movf	?___ftdiv,w
  5337  03F2  0021               	movlb	1	; select bank1
  5338  03F3  00A3               	movwf	_realRmsCurr^(0+128)
  5339  03F4  0020               	movlb	0	; select bank0
  5340  03F5  0848               	movf	?___ftdiv+1,w
  5341  03F6  0021               	movlb	1	; select bank1
  5342  03F7  00A4               	movwf	(_realRmsCurr+1)^(0+128)
  5343  03F8  0020               	movlb	0	; select bank0
  5344  03F9  0849               	movf	?___ftdiv+2,w
  5345  03FA  0021               	movlb	1	; select bank1
  5346  03FB  00A5               	movwf	(_realRmsCurr+2)^(0+128)
  5347                           
  5348                           ;ADC.c: 195: realRmsCurr/=(float)(20);
  5349  03FC  3000               	movlw	0
  5350  03FD  0020               	movlb	0	; select bank0
  5351  03FE  00C7               	movwf	___ftdiv@f2
  5352  03FF  30A0               	movlw	160
  5353  0400  00C8               	movwf	___ftdiv@f2+1
  5354  0401  3041               	movlw	65
  5355  0402  00C9               	movwf	___ftdiv@f2+2
  5356  0403  0021               	movlb	1	; select bank1
  5357  0404  0823               	movf	_realRmsCurr^(0+128),w
  5358  0405  0020               	movlb	0	; select bank0
  5359  0406  00CA               	movwf	___ftdiv@f1
  5360  0407  0021               	movlb	1	; select bank1
  5361  0408  0824               	movf	(_realRmsCurr+1)^(0+128),w
  5362  0409  0020               	movlb	0	; select bank0
  5363  040A  00CB               	movwf	___ftdiv@f1+1
  5364  040B  0021               	movlb	1	; select bank1
  5365  040C  0825               	movf	(_realRmsCurr+2)^(0+128),w
  5366  040D  0020               	movlb	0	; select bank0
  5367  040E  00CC               	movwf	___ftdiv@f1+2
  5368  040F  318F  2757  3180   	fcall	___ftdiv
  5369  0412  0020               	movlb	0	; select bank0
  5370  0413  0847               	movf	?___ftdiv,w
  5371  0414  0021               	movlb	1	; select bank1
  5372  0415  00A3               	movwf	_realRmsCurr^(0+128)
  5373  0416  0020               	movlb	0	; select bank0
  5374  0417  0848               	movf	?___ftdiv+1,w
  5375  0418  0021               	movlb	1	; select bank1
  5376  0419  00A4               	movwf	(_realRmsCurr+1)^(0+128)
  5377  041A  0020               	movlb	0	; select bank0
  5378  041B  0849               	movf	?___ftdiv+2,w
  5379  041C  0021               	movlb	1	; select bank1
  5380  041D  00A5               	movwf	(_realRmsCurr+2)^(0+128)
  5381                           
  5382                           ;ADC.c: 196: realRmsCurr=sqrt(realRmsCurr);
  5383  041E  0823               	movf	_realRmsCurr^(0+128),w
  5384  041F  0020               	movlb	0	; select bank0
  5385  0420  00B4               	movwf	sqrt@y
  5386  0421  0021               	movlb	1	; select bank1
  5387  0422  0824               	movf	(_realRmsCurr+1)^(0+128),w
  5388  0423  0020               	movlb	0	; select bank0
  5389  0424  00B5               	movwf	sqrt@y+1
  5390  0425  0021               	movlb	1	; select bank1
  5391  0426  0825               	movf	(_realRmsCurr+2)^(0+128),w
  5392  0427  0020               	movlb	0	; select bank0
  5393  0428  00B6               	movwf	sqrt@y+2
  5394  0429  3185  252E         	fcall	_sqrt
  5395  042B  0020               	movlb	0	; select bank0
  5396  042C  0834               	movf	?_sqrt,w
  5397  042D  0021               	movlb	1	; select bank1
  5398  042E  00A3               	movwf	_realRmsCurr^(0+128)
  5399  042F  0020               	movlb	0	; select bank0
  5400  0430  0835               	movf	?_sqrt+1,w
  5401  0431  0021               	movlb	1	; select bank1
  5402  0432  00A4               	movwf	(_realRmsCurr+1)^(0+128)
  5403  0433  0020               	movlb	0	; select bank0
  5404  0434  0836               	movf	?_sqrt+2,w
  5405  0435  0021               	movlb	1	; select bank1
  5406  0436  00A5               	movwf	(_realRmsCurr+2)^(0+128)
  5407  0437  0008               	return
  5408  0438                     __end_of_ADCConv:	
  5409                           
  5410                           	psect	text16
  5411  052E                     __ptext16:	
  5412 ;; *************** function _sqrt *****************
  5413 ;; Defined at:
  5414 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\sqrt.c"
  5415 ;; Parameters:    Size  Location     Type
  5416 ;;  y               3   20[BANK0 ] unsigned char 
  5417 ;; Auto vars:     Size  Location     Type
  5418 ;;  x               3   36[BANK0 ] unsigned char 
  5419 ;;  q               3   33[BANK0 ] unsigned char 
  5420 ;;  z               3   29[BANK0 ] unsigned char 
  5421 ;;  og              3   26[BANK0 ] unsigned char 
  5422 ;;  i               1   32[BANK0 ] unsigned char 
  5423 ;; Return value:  Size  Location     Type
  5424 ;;                  3   20[BANK0 ] unsigned char 
  5425 ;; Registers used:
  5426 ;;		wreg, status,2, status,0, pclath, cstack
  5427 ;; Tracked objects:
  5428 ;;		On entry : 0/0
  5429 ;;		On exit  : 0/0
  5430 ;;		Unchanged: 0/0
  5431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5432 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5433 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5434 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5435 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5436 ;;Total ram usage:       19 bytes
  5437 ;; Hardware stack levels used:    1
  5438 ;; Hardware stack levels required when called:    5
  5439 ;; This function calls:
  5440 ;;		___ftge
  5441 ;;		___ftmul
  5442 ;;		___ftsub
  5443 ;; This function is called by:
  5444 ;;		_ADCConv
  5445 ;; This function uses a non-reentrant model
  5446 ;;
  5447                           
  5448                           
  5449                           ;psect for function _sqrt
  5450  052E                     _sqrt:	
  5451                           
  5452                           ;incstack = 0
  5453                           ; Regs used in _sqrt: [wreg+status,2+status,0+pclath+cstack]
  5454  052E  3000               	movlw	0
  5455  052F  00F1               	movwf	___ftge@ff1
  5456  0530  3000               	movlw	0
  5457  0531  00F2               	movwf	___ftge@ff1+1
  5458  0532  3000               	movlw	0
  5459  0533  00F3               	movwf	___ftge@ff1+2
  5460  0534  0020               	movlb	0	; select bank0
  5461  0535  0834               	movf	sqrt@y,w
  5462  0536  00F4               	movwf	___ftge@ff2
  5463  0537  0835               	movf	sqrt@y+1,w
  5464  0538  00F5               	movwf	___ftge@ff2+1
  5465  0539  0836               	movf	sqrt@y+2,w
  5466  053A  00F6               	movwf	___ftge@ff2+2
  5467  053B  318D  251F  3185   	fcall	___ftge
  5468  053E  1C03               	btfss	3,0
  5469  053F  2D5F               	goto	l3604
  5470  0540  0020               	movlb	0	; select bank0
  5471  0541  0834               	movf	sqrt@y,w
  5472  0542  00F1               	movwf	___ftge@ff1
  5473  0543  0835               	movf	sqrt@y+1,w
  5474  0544  00F2               	movwf	___ftge@ff1+1
  5475  0545  0836               	movf	sqrt@y+2,w
  5476  0546  00F3               	movwf	___ftge@ff1+2
  5477  0547  3000               	movlw	0
  5478  0548  00F4               	movwf	___ftge@ff2
  5479  0549  3000               	movlw	0
  5480  054A  00F5               	movwf	___ftge@ff2+1
  5481  054B  3000               	movlw	0
  5482  054C  00F6               	movwf	___ftge@ff2+2
  5483  054D  318D  251F  3185   	fcall	___ftge
  5484  0550  1803               	btfsc	3,0
  5485  0551  2D57               	goto	l1055
  5486  0552  3021               	movlw	33
  5487  0553  0021               	movlb	1	; select bank1
  5488  0554  00AB               	movwf	_errno^(0+128)
  5489  0555  3000               	movlw	0
  5490  0556  00AC               	movwf	(_errno^(0+128)+1)
  5491  0557                     l1055:	
  5492  0557  3000               	movlw	0
  5493  0558  0020               	movlb	0	; select bank0
  5494  0559  00B4               	movwf	?_sqrt
  5495  055A  3000               	movlw	0
  5496  055B  00B5               	movwf	?_sqrt+1
  5497  055C  3000               	movlw	0
  5498  055D  00B6               	movwf	?_sqrt+2
  5499  055E  0008               	return
  5500  055F                     l3604:	
  5501  055F  0020               	movlb	0	; select bank0
  5502  0560  0834               	movf	sqrt@y,w
  5503  0561  00BD               	movwf	sqrt@z
  5504  0562  0835               	movf	sqrt@y+1,w
  5505  0563  00BE               	movwf	sqrt@z+1
  5506  0564  0836               	movf	sqrt@y+2,w
  5507  0565  00BF               	movwf	sqrt@z+2
  5508  0566  0934               	comf	sqrt@y,w
  5509  0567  00B7               	movwf	??_sqrt
  5510  0568  0935               	comf	sqrt@y+1,w
  5511  0569  00B8               	movwf	??_sqrt+1
  5512  056A  0936               	comf	sqrt@y+2,w
  5513  056B  00B9               	movwf	??_sqrt+2
  5514  056C  0AB7               	incf	??_sqrt,f
  5515  056D  1903               	skipnz
  5516  056E  0AB8               	incf	??_sqrt+1,f
  5517  056F  1903               	skipnz
  5518  0570  0AB9               	incf	??_sqrt+2,f
  5519  0571  30C8               	movlw	200
  5520  0572  0737               	addwf	??_sqrt,w
  5521  0573  00C4               	movwf	sqrt@x
  5522  0574  306E               	movlw	110
  5523  0575  3D38               	addwfc	??_sqrt+1,w
  5524  0576  00C5               	movwf	sqrt@x+1
  5525  0577  30BE               	movlw	190
  5526  0578  3D39               	addwfc	??_sqrt+2,w
  5527  0579  00C6               	movwf	sqrt@x+2
  5528  057A  3001               	movlw	1
  5529  057B                     u3925:	
  5530  057B  36C6               	lsrf	sqrt@x+2,f
  5531  057C  0CC5               	rrf	sqrt@x+1,f
  5532  057D  0CC4               	rrf	sqrt@x,f
  5533  057E  0B89               	decfsz	9,f
  5534  057F  2D7B               	goto	u3925
  5535  0580  3000               	movlw	0
  5536  0581  00B7               	movwf	??_sqrt
  5537  0582  3080               	movlw	128
  5538  0583  00B8               	movwf	??_sqrt+1
  5539  0584  3000               	movlw	0
  5540  0585  00B9               	movwf	??_sqrt+2
  5541  0586  0837               	movf	??_sqrt,w
  5542  0587  02BD               	subwf	sqrt@z,f
  5543  0588  0838               	movf	??_sqrt+1,w
  5544  0589  3BBE               	subwfb	sqrt@z+1,f
  5545  058A  0839               	movf	??_sqrt+2,w
  5546  058B  3BBF               	subwfb	sqrt@z+2,f
  5547  058C  3004               	movlw	4
  5548  058D  00B7               	movwf	??_sqrt
  5549  058E  0837               	movf	??_sqrt,w
  5550  058F  00C0               	movwf	sqrt@i
  5551  0590                     l1057:	
  5552  0590  0844               	movf	sqrt@x,w
  5553  0591  00BA               	movwf	sqrt@og
  5554  0592  0845               	movf	sqrt@x+1,w
  5555  0593  00BB               	movwf	sqrt@og+1
  5556  0594  0846               	movf	sqrt@x+2,w
  5557  0595  00BC               	movwf	sqrt@og+2
  5558  0596  083D               	movf	sqrt@z,w
  5559  0597  00A4               	movwf	___ftmul@f1
  5560  0598  083E               	movf	sqrt@z+1,w
  5561  0599  00A5               	movwf	___ftmul@f1+1
  5562  059A  083F               	movf	sqrt@z+2,w
  5563  059B  00A6               	movwf	___ftmul@f1+2
  5564  059C  0844               	movf	sqrt@x,w
  5565  059D  00A7               	movwf	___ftmul@f2
  5566  059E  0845               	movf	sqrt@x+1,w
  5567  059F  00A8               	movwf	___ftmul@f2+1
  5568  05A0  0846               	movf	sqrt@x+2,w
  5569  05A1  00A9               	movwf	___ftmul@f2+2
  5570  05A2  3186  26DA  3185   	fcall	___ftmul
  5571  05A5  0020               	movlb	0	; select bank0
  5572  05A6  0824               	movf	?___ftmul,w
  5573  05A7  00C1               	movwf	sqrt@q
  5574  05A8  0825               	movf	?___ftmul+1,w
  5575  05A9  00C2               	movwf	sqrt@q+1
  5576  05AA  0826               	movf	?___ftmul+2,w
  5577  05AB  00C3               	movwf	sqrt@q+2
  5578  05AC  0844               	movf	sqrt@x,w
  5579  05AD  00A4               	movwf	___ftmul@f1
  5580  05AE  0845               	movf	sqrt@x+1,w
  5581  05AF  00A5               	movwf	___ftmul@f1+1
  5582  05B0  0846               	movf	sqrt@x+2,w
  5583  05B1  00A6               	movwf	___ftmul@f1+2
  5584  05B2  0841               	movf	sqrt@q,w
  5585  05B3  00A7               	movwf	___ftmul@f2
  5586  05B4  0842               	movf	sqrt@q+1,w
  5587  05B5  00A8               	movwf	___ftmul@f2+1
  5588  05B6  0843               	movf	sqrt@q+2,w
  5589  05B7  00A9               	movwf	___ftmul@f2+2
  5590  05B8  3186  26DA  3185   	fcall	___ftmul
  5591  05BB  0020               	movlb	0	; select bank0
  5592  05BC  0824               	movf	?___ftmul,w
  5593  05BD  00C1               	movwf	sqrt@q
  5594  05BE  0825               	movf	?___ftmul+1,w
  5595  05BF  00C2               	movwf	sqrt@q+1
  5596  05C0  0826               	movf	?___ftmul+2,w
  5597  05C1  00C3               	movwf	sqrt@q+2
  5598  05C2  0844               	movf	sqrt@x,w
  5599  05C3  00A4               	movwf	___ftmul@f1
  5600  05C4  0845               	movf	sqrt@x+1,w
  5601  05C5  00A5               	movwf	___ftmul@f1+1
  5602  05C6  0846               	movf	sqrt@x+2,w
  5603  05C7  00A6               	movwf	___ftmul@f1+2
  5604  05C8  0841               	movf	sqrt@q,w
  5605  05C9  00A7               	movwf	___ftmul@f2
  5606  05CA  0842               	movf	sqrt@q+1,w
  5607  05CB  00A8               	movwf	___ftmul@f2+1
  5608  05CC  0843               	movf	sqrt@q+2,w
  5609  05CD  00A9               	movwf	___ftmul@f2+2
  5610  05CE  3186  26DA  3185   	fcall	___ftmul
  5611  05D1  0020               	movlb	0	; select bank0
  5612  05D2  0824               	movf	?___ftmul,w
  5613  05D3  00C1               	movwf	sqrt@q
  5614  05D4  0825               	movf	?___ftmul+1,w
  5615  05D5  00C2               	movwf	sqrt@q+1
  5616  05D6  0826               	movf	?___ftmul+2,w
  5617  05D7  00C3               	movwf	sqrt@q+2
  5618  05D8  3000               	movlw	0
  5619  05D9  00A4               	movwf	___ftmul@f1
  5620  05DA  30C0               	movlw	192
  5621  05DB  00A5               	movwf	___ftmul@f1+1
  5622  05DC  303F               	movlw	63
  5623  05DD  00A6               	movwf	___ftmul@f1+2
  5624  05DE  0844               	movf	sqrt@x,w
  5625  05DF  00A7               	movwf	___ftmul@f2
  5626  05E0  0845               	movf	sqrt@x+1,w
  5627  05E1  00A8               	movwf	___ftmul@f2+1
  5628  05E2  0846               	movf	sqrt@x+2,w
  5629  05E3  00A9               	movwf	___ftmul@f2+2
  5630  05E4  3186  26DA  3185   	fcall	___ftmul
  5631  05E7  0020               	movlb	0	; select bank0
  5632  05E8  0824               	movf	?___ftmul,w
  5633  05E9  00C4               	movwf	sqrt@x
  5634  05EA  0825               	movf	?___ftmul+1,w
  5635  05EB  00C5               	movwf	sqrt@x+1
  5636  05EC  0826               	movf	?___ftmul+2,w
  5637  05ED  00C6               	movwf	sqrt@x+2
  5638  05EE  0841               	movf	sqrt@q,w
  5639  05EF  00AA               	movwf	___ftsub@f2
  5640  05F0  0842               	movf	sqrt@q+1,w
  5641  05F1  00AB               	movwf	___ftsub@f2+1
  5642  05F2  0843               	movf	sqrt@q+2,w
  5643  05F3  00AC               	movwf	___ftsub@f2+2
  5644  05F4  0844               	movf	sqrt@x,w
  5645  05F5  00AD               	movwf	___ftsub@f1
  5646  05F6  0845               	movf	sqrt@x+1,w
  5647  05F7  00AE               	movwf	___ftsub@f1+1
  5648  05F8  0846               	movf	sqrt@x+2,w
  5649  05F9  00AF               	movwf	___ftsub@f1+2
  5650  05FA  318A  2259  3185   	fcall	___ftsub
  5651  05FD  0020               	movlb	0	; select bank0
  5652  05FE  082A               	movf	?___ftsub,w
  5653  05FF  00C4               	movwf	sqrt@x
  5654  0600  082B               	movf	?___ftsub+1,w
  5655  0601  00C5               	movwf	sqrt@x+1
  5656  0602  082C               	movf	?___ftsub+2,w
  5657  0603  00C6               	movwf	sqrt@x+2
  5658  0604  3001               	movlw	1
  5659  0605  02C0               	subwf	sqrt@i,f
  5660  0606  1D03               	btfss	3,2
  5661  0607  2D90               	goto	l1057
  5662  0608  0834               	movf	sqrt@y,w
  5663  0609  00A4               	movwf	___ftmul@f1
  5664  060A  0835               	movf	sqrt@y+1,w
  5665  060B  00A5               	movwf	___ftmul@f1+1
  5666  060C  0836               	movf	sqrt@y+2,w
  5667  060D  00A6               	movwf	___ftmul@f1+2
  5668  060E  0844               	movf	sqrt@x,w
  5669  060F  00A7               	movwf	___ftmul@f2
  5670  0610  0845               	movf	sqrt@x+1,w
  5671  0611  00A8               	movwf	___ftmul@f2+1
  5672  0612  0846               	movf	sqrt@x+2,w
  5673  0613  00A9               	movwf	___ftmul@f2+2
  5674  0614  3186  26DA         	fcall	___ftmul
  5675  0616  0020               	movlb	0	; select bank0
  5676  0617  0824               	movf	?___ftmul,w
  5677  0618  00B4               	movwf	?_sqrt
  5678  0619  0825               	movf	?___ftmul+1,w
  5679  061A  00B5               	movwf	?_sqrt+1
  5680  061B  0826               	movf	?___ftmul+2,w
  5681  061C  00B6               	movwf	?_sqrt+2
  5682  061D  0008               	return
  5683  061E                     __end_of_sqrt:	
  5684                           
  5685                           	psect	text17
  5686  0A59                     __ptext17:	
  5687 ;; *************** function ___ftsub *****************
  5688 ;; Defined at:
  5689 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftsub.c"
  5690 ;; Parameters:    Size  Location     Type
  5691 ;;  f2              3   10[BANK0 ] float 
  5692 ;;  f1              3   13[BANK0 ] float 
  5693 ;; Auto vars:     Size  Location     Type
  5694 ;;		None
  5695 ;; Return value:  Size  Location     Type
  5696 ;;                  3   10[BANK0 ] float 
  5697 ;; Registers used:
  5698 ;;		wreg, status,2, status,0, pclath, cstack
  5699 ;; Tracked objects:
  5700 ;;		On entry : 0/0
  5701 ;;		On exit  : 0/0
  5702 ;;		Unchanged: 0/0
  5703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5704 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5705 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5707 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5708 ;;Total ram usage:        6 bytes
  5709 ;; Hardware stack levels used:    1
  5710 ;; Hardware stack levels required when called:    4
  5711 ;; This function calls:
  5712 ;;		___ftadd
  5713 ;; This function is called by:
  5714 ;;		_sqrt
  5715 ;; This function uses a non-reentrant model
  5716 ;;
  5717                           
  5718                           
  5719                           ;psect for function ___ftsub
  5720  0A59                     ___ftsub:	
  5721                           
  5722                           ;incstack = 0
  5723                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  5724  0A59  0020               	movlb	0	; select bank0
  5725  0A5A  082C               	movf	___ftsub@f2+2,w
  5726  0A5B  042B               	iorwf	___ftsub@f2+1,w
  5727  0A5C  042A               	iorwf	___ftsub@f2,w
  5728  0A5D  1903               	skipnz
  5729  0A5E  2A61               	goto	l3592
  5730  0A5F  3080               	movlw	128
  5731  0A60  06AC               	xorwf	___ftsub@f2+2,f
  5732  0A61                     l3592:	
  5733  0A61  082D               	movf	___ftsub@f1,w
  5734  0A62  00A0               	movwf	___ftadd@f1
  5735  0A63  082E               	movf	___ftsub@f1+1,w
  5736  0A64  00A1               	movwf	___ftadd@f1+1
  5737  0A65  082F               	movf	___ftsub@f1+2,w
  5738  0A66  00A2               	movwf	___ftadd@f1+2
  5739  0A67  082A               	movf	___ftsub@f2,w
  5740  0A68  00A3               	movwf	___ftadd@f2
  5741  0A69  082B               	movf	___ftsub@f2+1,w
  5742  0A6A  00A4               	movwf	___ftadd@f2+1
  5743  0A6B  082C               	movf	___ftsub@f2+2,w
  5744  0A6C  00A5               	movwf	___ftadd@f2+2
  5745  0A6D  3184  2438         	fcall	___ftadd
  5746  0A6F  0020               	movlb	0	; select bank0
  5747  0A70  0820               	movf	?___ftadd,w
  5748  0A71  00AA               	movwf	?___ftsub
  5749  0A72  0821               	movf	?___ftadd+1,w
  5750  0A73  00AB               	movwf	?___ftsub+1
  5751  0A74  0822               	movf	?___ftadd+2,w
  5752  0A75  00AC               	movwf	?___ftsub+2
  5753  0A76  0008               	return
  5754  0A77                     __end_of___ftsub:	
  5755                           
  5756                           	psect	text18
  5757  0438                     __ptext18:	
  5758 ;; *************** function ___ftadd *****************
  5759 ;; Defined at:
  5760 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftadd.c"
  5761 ;; Parameters:    Size  Location     Type
  5762 ;;  f1              3    0[BANK0 ] float 
  5763 ;;  f2              3    3[BANK0 ] float 
  5764 ;; Auto vars:     Size  Location     Type
  5765 ;;  exp1            1   11[COMMON] unsigned char 
  5766 ;;  exp2            1   10[COMMON] unsigned char 
  5767 ;;  sign            1    9[COMMON] unsigned char 
  5768 ;; Return value:  Size  Location     Type
  5769 ;;                  3    0[BANK0 ] float 
  5770 ;; Registers used:
  5771 ;;		wreg, status,2, status,0, pclath, cstack
  5772 ;; Tracked objects:
  5773 ;;		On entry : 0/0
  5774 ;;		On exit  : 0/0
  5775 ;;		Unchanged: 0/0
  5776 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5777 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5778 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5779 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5780 ;;      Totals:         3      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5781 ;;Total ram usage:       13 bytes
  5782 ;; Hardware stack levels used:    1
  5783 ;; Hardware stack levels required when called:    3
  5784 ;; This function calls:
  5785 ;;		___ftpack
  5786 ;; This function is called by:
  5787 ;;		___ftsub
  5788 ;; This function uses a non-reentrant model
  5789 ;;
  5790                           
  5791                           
  5792                           ;psect for function ___ftadd
  5793  0438                     ___ftadd:	
  5794                           
  5795                           ;incstack = 0
  5796                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  5797  0438  0020               	movlb	0	; select bank0
  5798  0439  0820               	movf	___ftadd@f1,w
  5799  043A  00A6               	movwf	??___ftadd
  5800  043B  0821               	movf	___ftadd@f1+1,w
  5801  043C  00A7               	movwf	??___ftadd+1
  5802  043D  0822               	movf	___ftadd@f1+2,w
  5803  043E  00A8               	movwf	??___ftadd+2
  5804  043F  1003               	clrc
  5805  0440  0D27               	rlf	??___ftadd+1,w
  5806  0441  0D28               	rlf	??___ftadd+2,w
  5807  0442  00A9               	movwf	??___ftadd+3
  5808  0443  0829               	movf	??___ftadd+3,w
  5809  0444  00FB               	movwf	___ftadd@exp1
  5810  0445  0823               	movf	___ftadd@f2,w
  5811  0446  00A6               	movwf	??___ftadd
  5812  0447  0824               	movf	___ftadd@f2+1,w
  5813  0448  00A7               	movwf	??___ftadd+1
  5814  0449  0825               	movf	___ftadd@f2+2,w
  5815  044A  00A8               	movwf	??___ftadd+2
  5816  044B  1003               	clrc
  5817  044C  0D27               	rlf	??___ftadd+1,w
  5818  044D  0D28               	rlf	??___ftadd+2,w
  5819  044E  00A9               	movwf	??___ftadd+3
  5820  044F  0829               	movf	??___ftadd+3,w
  5821  0450  00FA               	movwf	___ftadd@exp2
  5822  0451  087B               	movf	___ftadd@exp1,w
  5823  0452  1903               	btfsc	3,2
  5824  0453  2C60               	goto	l3422
  5825  0454  087A               	movf	___ftadd@exp2,w
  5826  0455  027B               	subwf	___ftadd@exp1,w
  5827  0456  1803               	skipnc
  5828  0457  2C67               	goto	l3426
  5829  0458  037B               	decf	___ftadd@exp1,w
  5830  0459  3AFF               	xorlw	255
  5831  045A  077A               	addwf	___ftadd@exp2,w
  5832  045B  00A6               	movwf	??___ftadd
  5833  045C  3019               	movlw	25
  5834  045D  0226               	subwf	??___ftadd,w
  5835  045E  1C03               	skipc
  5836  045F  2C67               	goto	l3426
  5837  0460                     l3422:	
  5838  0460  0823               	movf	___ftadd@f2,w
  5839  0461  00A0               	movwf	?___ftadd
  5840  0462  0824               	movf	___ftadd@f2+1,w
  5841  0463  00A1               	movwf	?___ftadd+1
  5842  0464  0825               	movf	___ftadd@f2+2,w
  5843  0465  00A2               	movwf	?___ftadd+2
  5844  0466  0008               	return
  5845  0467                     l3426:	
  5846  0467  087A               	movf	___ftadd@exp2,w
  5847  0468  1903               	btfsc	3,2
  5848  0469  0008               	return
  5849  046A  087B               	movf	___ftadd@exp1,w
  5850  046B  027A               	subwf	___ftadd@exp2,w
  5851  046C  1803               	skipnc
  5852  046D  2C76               	goto	l3432
  5853  046E  037A               	decf	___ftadd@exp2,w
  5854  046F  3AFF               	xorlw	255
  5855  0470  077B               	addwf	___ftadd@exp1,w
  5856  0471  00A6               	movwf	??___ftadd
  5857  0472  3019               	movlw	25
  5858  0473  0226               	subwf	??___ftadd,w
  5859  0474  1803               	btfsc	3,0
  5860  0475  0008               	return
  5861  0476                     l3432:	
  5862  0476  3006               	movlw	6
  5863  0477  00A6               	movwf	??___ftadd
  5864  0478  0826               	movf	??___ftadd,w
  5865  0479  00F9               	movwf	___ftadd@sign
  5866  047A  1BA2               	btfsc	___ftadd@f1+2,7
  5867  047B  17F9               	bsf	___ftadd@sign,7
  5868  047C  1BA5               	btfsc	___ftadd@f2+2,7
  5869  047D  1779               	bsf	___ftadd@sign,6
  5870  047E  17A1               	bsf	___ftadd@f1+1,7
  5871  047F  30FF               	movlw	255
  5872  0480  05A0               	andwf	___ftadd@f1,f
  5873  0481  30FF               	movlw	255
  5874  0482  05A1               	andwf	___ftadd@f1+1,f
  5875  0483  3000               	movlw	0
  5876  0484  05A2               	andwf	___ftadd@f1+2,f
  5877  0485  17A4               	bsf	___ftadd@f2+1,7
  5878  0486  30FF               	movlw	255
  5879  0487  05A3               	andwf	___ftadd@f2,f
  5880  0488  30FF               	movlw	255
  5881  0489  05A4               	andwf	___ftadd@f2+1,f
  5882  048A  3000               	movlw	0
  5883  048B  05A5               	andwf	___ftadd@f2+2,f
  5884  048C  087A               	movf	___ftadd@exp2,w
  5885  048D  027B               	subwf	___ftadd@exp1,w
  5886  048E  1803               	skipnc
  5887  048F  2CB2               	goto	l3454
  5888  0490                     l3444:	
  5889  0490  3001               	movlw	1
  5890  0491                     u3595:	
  5891  0491  35A3               	lslf	___ftadd@f2,f
  5892  0492  0DA4               	rlf	___ftadd@f2+1,f
  5893  0493  0DA5               	rlf	___ftadd@f2+2,f
  5894  0494  0B89               	decfsz	9,f
  5895  0495  2C91               	goto	u3595
  5896  0496  3001               	movlw	1
  5897  0497  02FA               	subwf	___ftadd@exp2,f
  5898  0498  087A               	movf	___ftadd@exp2,w
  5899  0499  067B               	xorwf	___ftadd@exp1,w
  5900  049A  1903               	skipnz
  5901  049B  2CAD               	goto	l3452
  5902  049C  3001               	movlw	1
  5903  049D  02F9               	subwf	___ftadd@sign,f
  5904  049E  0879               	movf	___ftadd@sign,w
  5905  049F  3907               	andlw	7
  5906  04A0  1903               	btfsc	3,2
  5907  04A1  2CAD               	goto	l3452
  5908  04A2  2C90               	goto	l3444
  5909  04A3                     l3450:	
  5910  04A3  3001               	movlw	1
  5911  04A4                     u3625:	
  5912  04A4  36A2               	lsrf	___ftadd@f1+2,f
  5913  04A5  0CA1               	rrf	___ftadd@f1+1,f
  5914  04A6  0CA0               	rrf	___ftadd@f1,f
  5915  04A7  0B89               	decfsz	9,f
  5916  04A8  2CA4               	goto	u3625
  5917  04A9  3001               	movlw	1
  5918  04AA  00A6               	movwf	??___ftadd
  5919  04AB  0826               	movf	??___ftadd,w
  5920  04AC  07FB               	addwf	___ftadd@exp1,f
  5921  04AD                     l3452:	
  5922  04AD  087B               	movf	___ftadd@exp1,w
  5923  04AE  067A               	xorwf	___ftadd@exp2,w
  5924  04AF  1903               	btfsc	3,2
  5925  04B0  2CD7               	goto	l887
  5926  04B1  2CA3               	goto	l3450
  5927  04B2                     l3454:	
  5928  04B2  087B               	movf	___ftadd@exp1,w
  5929  04B3  027A               	subwf	___ftadd@exp2,w
  5930  04B4  1803               	skipnc
  5931  04B5  2CD7               	goto	l887
  5932  04B6                     l3456:	
  5933  04B6  3001               	movlw	1
  5934  04B7                     u3655:	
  5935  04B7  35A0               	lslf	___ftadd@f1,f
  5936  04B8  0DA1               	rlf	___ftadd@f1+1,f
  5937  04B9  0DA2               	rlf	___ftadd@f1+2,f
  5938  04BA  0B89               	decfsz	9,f
  5939  04BB  2CB7               	goto	u3655
  5940  04BC  3001               	movlw	1
  5941  04BD  02FB               	subwf	___ftadd@exp1,f
  5942  04BE  087A               	movf	___ftadd@exp2,w
  5943  04BF  067B               	xorwf	___ftadd@exp1,w
  5944  04C0  1903               	skipnz
  5945  04C1  2CD3               	goto	l3464
  5946  04C2  3001               	movlw	1
  5947  04C3  02F9               	subwf	___ftadd@sign,f
  5948  04C4  0879               	movf	___ftadd@sign,w
  5949  04C5  3907               	andlw	7
  5950  04C6  1903               	btfsc	3,2
  5951  04C7  2CD3               	goto	l3464
  5952  04C8  2CB6               	goto	l3456
  5953  04C9                     l3462:	
  5954  04C9  3001               	movlw	1
  5955  04CA                     u3685:	
  5956  04CA  36A5               	lsrf	___ftadd@f2+2,f
  5957  04CB  0CA4               	rrf	___ftadd@f2+1,f
  5958  04CC  0CA3               	rrf	___ftadd@f2,f
  5959  04CD  0B89               	decfsz	9,f
  5960  04CE  2CCA               	goto	u3685
  5961  04CF  3001               	movlw	1
  5962  04D0  00A6               	movwf	??___ftadd
  5963  04D1  0826               	movf	??___ftadd,w
  5964  04D2  07FA               	addwf	___ftadd@exp2,f
  5965  04D3                     l3464:	
  5966  04D3  087B               	movf	___ftadd@exp1,w
  5967  04D4  067A               	xorwf	___ftadd@exp2,w
  5968  04D5  1D03               	skipz
  5969  04D6  2CC9               	goto	l3462
  5970  04D7                     l887:	
  5971  04D7  1FF9               	btfss	___ftadd@sign,7
  5972  04D8  2CE9               	goto	l3468
  5973  04D9  30FF               	movlw	255
  5974  04DA  06A0               	xorwf	___ftadd@f1,f
  5975  04DB  30FF               	movlw	255
  5976  04DC  06A1               	xorwf	___ftadd@f1+1,f
  5977  04DD  30FF               	movlw	255
  5978  04DE  06A2               	xorwf	___ftadd@f1+2,f
  5979  04DF  3001               	movlw	1
  5980  04E0  07A0               	addwf	___ftadd@f1,f
  5981  04E1  3000               	movlw	0
  5982  04E2  1803               	skipnc
  5983  04E3  3001               	movlw	1
  5984  04E4  07A1               	addwf	___ftadd@f1+1,f
  5985  04E5  3000               	movlw	0
  5986  04E6  1803               	skipnc
  5987  04E7  3001               	movlw	1
  5988  04E8  07A2               	addwf	___ftadd@f1+2,f
  5989  04E9                     l3468:	
  5990  04E9  1F79               	btfss	___ftadd@sign,6
  5991  04EA  2CFB               	goto	l3472
  5992  04EB  30FF               	movlw	255
  5993  04EC  06A3               	xorwf	___ftadd@f2,f
  5994  04ED  30FF               	movlw	255
  5995  04EE  06A4               	xorwf	___ftadd@f2+1,f
  5996  04EF  30FF               	movlw	255
  5997  04F0  06A5               	xorwf	___ftadd@f2+2,f
  5998  04F1  3001               	movlw	1
  5999  04F2  07A3               	addwf	___ftadd@f2,f
  6000  04F3  3000               	movlw	0
  6001  04F4  1803               	skipnc
  6002  04F5  3001               	movlw	1
  6003  04F6  07A4               	addwf	___ftadd@f2+1,f
  6004  04F7  3000               	movlw	0
  6005  04F8  1803               	skipnc
  6006  04F9  3001               	movlw	1
  6007  04FA  07A5               	addwf	___ftadd@f2+2,f
  6008  04FB                     l3472:	
  6009  04FB  01F9               	clrf	___ftadd@sign
  6010  04FC  0820               	movf	___ftadd@f1,w
  6011  04FD  07A3               	addwf	___ftadd@f2,f
  6012  04FE  0821               	movf	___ftadd@f1+1,w
  6013  04FF  3DA4               	addwfc	___ftadd@f2+1,f
  6014  0500  0822               	movf	___ftadd@f1+2,w
  6015  0501  3DA5               	addwfc	___ftadd@f2+2,f
  6016  0502  1FA5               	btfss	___ftadd@f2+2,7
  6017  0503  2D16               	goto	l3482
  6018  0504  30FF               	movlw	255
  6019  0505  06A3               	xorwf	___ftadd@f2,f
  6020  0506  30FF               	movlw	255
  6021  0507  06A4               	xorwf	___ftadd@f2+1,f
  6022  0508  30FF               	movlw	255
  6023  0509  06A5               	xorwf	___ftadd@f2+2,f
  6024  050A  3001               	movlw	1
  6025  050B  07A3               	addwf	___ftadd@f2,f
  6026  050C  3000               	movlw	0
  6027  050D  1803               	skipnc
  6028  050E  3001               	movlw	1
  6029  050F  07A4               	addwf	___ftadd@f2+1,f
  6030  0510  3000               	movlw	0
  6031  0511  1803               	skipnc
  6032  0512  3001               	movlw	1
  6033  0513  07A5               	addwf	___ftadd@f2+2,f
  6034  0514  01F9               	clrf	___ftadd@sign
  6035  0515  0AF9               	incf	___ftadd@sign,f
  6036  0516                     l3482:	
  6037  0516  0823               	movf	___ftadd@f2,w
  6038  0517  00F1               	movwf	___ftpack@arg
  6039  0518  0824               	movf	___ftadd@f2+1,w
  6040  0519  00F2               	movwf	___ftpack@arg+1
  6041  051A  0825               	movf	___ftadd@f2+2,w
  6042  051B  00F3               	movwf	___ftpack@arg+2
  6043  051C  087B               	movf	___ftadd@exp1,w
  6044  051D  00A6               	movwf	??___ftadd
  6045  051E  0826               	movf	??___ftadd,w
  6046  051F  00F4               	movwf	___ftpack@exp
  6047  0520  0879               	movf	___ftadd@sign,w
  6048  0521  00A7               	movwf	??___ftadd+1
  6049  0522  0827               	movf	??___ftadd+1,w
  6050  0523  00F5               	movwf	___ftpack@sign
  6051  0524  3187  278E         	fcall	___ftpack
  6052  0526  0871               	movf	?___ftpack,w
  6053  0527  0020               	movlb	0	; select bank0
  6054  0528  00A0               	movwf	?___ftadd
  6055  0529  0872               	movf	?___ftpack+1,w
  6056  052A  00A1               	movwf	?___ftadd+1
  6057  052B  0873               	movf	?___ftpack+2,w
  6058  052C  00A2               	movwf	?___ftadd+2
  6059  052D  0008               	return
  6060  052E                     __end_of___ftadd:	
  6061                           
  6062                           	psect	text19
  6063  06DA                     __ptext19:	
  6064 ;; *************** function ___ftmul *****************
  6065 ;; Defined at:
  6066 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  6067 ;; Parameters:    Size  Location     Type
  6068 ;;  f1              3    4[BANK0 ] float 
  6069 ;;  f2              3    7[BANK0 ] float 
  6070 ;; Auto vars:     Size  Location     Type
  6071 ;;  f3_as_produc    3   15[BANK0 ] unsigned um
  6072 ;;  sign            1   19[BANK0 ] unsigned char 
  6073 ;;  cntr            1   18[BANK0 ] unsigned char 
  6074 ;;  exp             1   14[BANK0 ] unsigned char 
  6075 ;; Return value:  Size  Location     Type
  6076 ;;                  3    4[BANK0 ] float 
  6077 ;; Registers used:
  6078 ;;		wreg, status,2, status,0, pclath, cstack
  6079 ;; Tracked objects:
  6080 ;;		On entry : 0/0
  6081 ;;		On exit  : 0/0
  6082 ;;		Unchanged: 0/0
  6083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6084 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6085 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6086 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6087 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6088 ;;Total ram usage:       16 bytes
  6089 ;; Hardware stack levels used:    1
  6090 ;; Hardware stack levels required when called:    3
  6091 ;; This function calls:
  6092 ;;		___ftpack
  6093 ;; This function is called by:
  6094 ;;		_ADCConv
  6095 ;;		_sqrt
  6096 ;; This function uses a non-reentrant model
  6097 ;;
  6098                           
  6099                           
  6100                           ;psect for function ___ftmul
  6101  06DA                     ___ftmul:	
  6102                           
  6103                           ;incstack = 0
  6104                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  6105  06DA  0020               	movlb	0	; select bank0
  6106  06DB  0824               	movf	___ftmul@f1,w
  6107  06DC  00AA               	movwf	??___ftmul
  6108  06DD  0825               	movf	___ftmul@f1+1,w
  6109  06DE  00AB               	movwf	??___ftmul+1
  6110  06DF  0826               	movf	___ftmul@f1+2,w
  6111  06E0  00AC               	movwf	??___ftmul+2
  6112  06E1  1003               	clrc
  6113  06E2  0D2B               	rlf	??___ftmul+1,w
  6114  06E3  0D2C               	rlf	??___ftmul+2,w
  6115  06E4  00AD               	movwf	??___ftmul+3
  6116  06E5  082D               	movf	??___ftmul+3,w
  6117  06E6  00AE               	movwf	___ftmul@exp
  6118  06E7  082E               	movf	___ftmul@exp,w
  6119  06E8  1D03               	btfss	3,2
  6120  06E9  2EF1               	goto	l3544
  6121  06EA  3000               	movlw	0
  6122  06EB  00A4               	movwf	?___ftmul
  6123  06EC  3000               	movlw	0
  6124  06ED  00A5               	movwf	?___ftmul+1
  6125  06EE  3000               	movlw	0
  6126  06EF  00A6               	movwf	?___ftmul+2
  6127  06F0  0008               	return
  6128  06F1                     l3544:	
  6129  06F1  0827               	movf	___ftmul@f2,w
  6130  06F2  00AA               	movwf	??___ftmul
  6131  06F3  0828               	movf	___ftmul@f2+1,w
  6132  06F4  00AB               	movwf	??___ftmul+1
  6133  06F5  0829               	movf	___ftmul@f2+2,w
  6134  06F6  00AC               	movwf	??___ftmul+2
  6135  06F7  1003               	clrc
  6136  06F8  0D2B               	rlf	??___ftmul+1,w
  6137  06F9  0D2C               	rlf	??___ftmul+2,w
  6138  06FA  00AD               	movwf	??___ftmul+3
  6139  06FB  082D               	movf	??___ftmul+3,w
  6140  06FC  00B3               	movwf	___ftmul@sign
  6141  06FD  0833               	movf	___ftmul@sign,w
  6142  06FE  1D03               	btfss	3,2
  6143  06FF  2F07               	goto	l3550
  6144  0700  3000               	movlw	0
  6145  0701  00A4               	movwf	?___ftmul
  6146  0702  3000               	movlw	0
  6147  0703  00A5               	movwf	?___ftmul+1
  6148  0704  3000               	movlw	0
  6149  0705  00A6               	movwf	?___ftmul+2
  6150  0706  0008               	return
  6151  0707                     l3550:	
  6152  0707  0833               	movf	___ftmul@sign,w
  6153  0708  3E7B               	addlw	123
  6154  0709  00AA               	movwf	??___ftmul
  6155  070A  082A               	movf	??___ftmul,w
  6156  070B  07AE               	addwf	___ftmul@exp,f
  6157  070C  0824               	movf	___ftmul@f1,w
  6158  070D  00AA               	movwf	??___ftmul
  6159  070E  0825               	movf	___ftmul@f1+1,w
  6160  070F  00AB               	movwf	??___ftmul+1
  6161  0710  0826               	movf	___ftmul@f1+2,w
  6162  0711  00AC               	movwf	??___ftmul+2
  6163  0712  3010               	movlw	16
  6164  0713                     u3795:	
  6165  0713  36AC               	lsrf	??___ftmul+2,f
  6166  0714  0CAB               	rrf	??___ftmul+1,f
  6167  0715  0CAA               	rrf	??___ftmul,f
  6168  0716  0B89               	decfsz	9,f
  6169  0717  2F13               	goto	u3795
  6170  0718  082A               	movf	??___ftmul,w
  6171  0719  00AD               	movwf	??___ftmul+3
  6172  071A  082D               	movf	??___ftmul+3,w
  6173  071B  00B3               	movwf	___ftmul@sign
  6174  071C  0827               	movf	___ftmul@f2,w
  6175  071D  00AA               	movwf	??___ftmul
  6176  071E  0828               	movf	___ftmul@f2+1,w
  6177  071F  00AB               	movwf	??___ftmul+1
  6178  0720  0829               	movf	___ftmul@f2+2,w
  6179  0721  00AC               	movwf	??___ftmul+2
  6180  0722  3010               	movlw	16
  6181  0723                     u3805:	
  6182  0723  36AC               	lsrf	??___ftmul+2,f
  6183  0724  0CAB               	rrf	??___ftmul+1,f
  6184  0725  0CAA               	rrf	??___ftmul,f
  6185  0726  0B89               	decfsz	9,f
  6186  0727  2F23               	goto	u3805
  6187  0728  082A               	movf	??___ftmul,w
  6188  0729  00AD               	movwf	??___ftmul+3
  6189  072A  082D               	movf	??___ftmul+3,w
  6190  072B  06B3               	xorwf	___ftmul@sign,f
  6191  072C  3080               	movlw	128
  6192  072D  00AA               	movwf	??___ftmul
  6193  072E  082A               	movf	??___ftmul,w
  6194  072F  05B3               	andwf	___ftmul@sign,f
  6195  0730  17A5               	bsf	___ftmul@f1+1,7
  6196  0731  17A8               	bsf	___ftmul@f2+1,7
  6197  0732  30FF               	movlw	255
  6198  0733  05A7               	andwf	___ftmul@f2,f
  6199  0734  30FF               	movlw	255
  6200  0735  05A8               	andwf	___ftmul@f2+1,f
  6201  0736  3000               	movlw	0
  6202  0737  05A9               	andwf	___ftmul@f2+2,f
  6203  0738  3000               	movlw	0
  6204  0739  00AF               	movwf	___ftmul@f3_as_product
  6205  073A  3000               	movlw	0
  6206  073B  00B0               	movwf	___ftmul@f3_as_product+1
  6207  073C  3000               	movlw	0
  6208  073D  00B1               	movwf	___ftmul@f3_as_product+2
  6209  073E  3007               	movlw	7
  6210  073F  00AA               	movwf	??___ftmul
  6211  0740  082A               	movf	??___ftmul,w
  6212  0741  00B2               	movwf	___ftmul@cntr
  6213  0742                     l3562:	
  6214  0742  1C24               	btfss	___ftmul@f1,0
  6215  0743  2F4A               	goto	l3566
  6216  0744  0827               	movf	___ftmul@f2,w
  6217  0745  07AF               	addwf	___ftmul@f3_as_product,f
  6218  0746  0828               	movf	___ftmul@f2+1,w
  6219  0747  3DB0               	addwfc	___ftmul@f3_as_product+1,f
  6220  0748  0829               	movf	___ftmul@f2+2,w
  6221  0749  3DB1               	addwfc	___ftmul@f3_as_product+2,f
  6222  074A                     l3566:	
  6223  074A  3001               	movlw	1
  6224  074B                     u3825:	
  6225  074B  36A6               	lsrf	___ftmul@f1+2,f
  6226  074C  0CA5               	rrf	___ftmul@f1+1,f
  6227  074D  0CA4               	rrf	___ftmul@f1,f
  6228  074E  0B89               	decfsz	9,f
  6229  074F  2F4B               	goto	u3825
  6230  0750  3001               	movlw	1
  6231  0751                     u3835:	
  6232  0751  35A7               	lslf	___ftmul@f2,f
  6233  0752  0DA8               	rlf	___ftmul@f2+1,f
  6234  0753  0DA9               	rlf	___ftmul@f2+2,f
  6235  0754  0B89               	decfsz	9,f
  6236  0755  2F51               	goto	u3835
  6237  0756  3001               	movlw	1
  6238  0757  02B2               	subwf	___ftmul@cntr,f
  6239  0758  1D03               	btfss	3,2
  6240  0759  2F42               	goto	l3562
  6241  075A  3009               	movlw	9
  6242  075B  00AA               	movwf	??___ftmul
  6243  075C  082A               	movf	??___ftmul,w
  6244  075D  00B2               	movwf	___ftmul@cntr
  6245  075E                     l3574:	
  6246  075E  1C24               	btfss	___ftmul@f1,0
  6247  075F  2F66               	goto	l3578
  6248  0760  0827               	movf	___ftmul@f2,w
  6249  0761  07AF               	addwf	___ftmul@f3_as_product,f
  6250  0762  0828               	movf	___ftmul@f2+1,w
  6251  0763  3DB0               	addwfc	___ftmul@f3_as_product+1,f
  6252  0764  0829               	movf	___ftmul@f2+2,w
  6253  0765  3DB1               	addwfc	___ftmul@f3_as_product+2,f
  6254  0766                     l3578:	
  6255  0766  3001               	movlw	1
  6256  0767                     u3865:	
  6257  0767  36A6               	lsrf	___ftmul@f1+2,f
  6258  0768  0CA5               	rrf	___ftmul@f1+1,f
  6259  0769  0CA4               	rrf	___ftmul@f1,f
  6260  076A  0B89               	decfsz	9,f
  6261  076B  2F67               	goto	u3865
  6262  076C  3001               	movlw	1
  6263  076D                     u3875:	
  6264  076D  36B1               	lsrf	___ftmul@f3_as_product+2,f
  6265  076E  0CB0               	rrf	___ftmul@f3_as_product+1,f
  6266  076F  0CAF               	rrf	___ftmul@f3_as_product,f
  6267  0770  0B89               	decfsz	9,f
  6268  0771  2F6D               	goto	u3875
  6269  0772  3001               	movlw	1
  6270  0773  02B2               	subwf	___ftmul@cntr,f
  6271  0774  1D03               	btfss	3,2
  6272  0775  2F5E               	goto	l3574
  6273  0776  082F               	movf	___ftmul@f3_as_product,w
  6274  0777  00F1               	movwf	___ftpack@arg
  6275  0778  0830               	movf	___ftmul@f3_as_product+1,w
  6276  0779  00F2               	movwf	___ftpack@arg+1
  6277  077A  0831               	movf	___ftmul@f3_as_product+2,w
  6278  077B  00F3               	movwf	___ftpack@arg+2
  6279  077C  082E               	movf	___ftmul@exp,w
  6280  077D  00AA               	movwf	??___ftmul
  6281  077E  082A               	movf	??___ftmul,w
  6282  077F  00F4               	movwf	___ftpack@exp
  6283  0780  0833               	movf	___ftmul@sign,w
  6284  0781  00AB               	movwf	??___ftmul+1
  6285  0782  082B               	movf	??___ftmul+1,w
  6286  0783  00F5               	movwf	___ftpack@sign
  6287  0784  3187  278E         	fcall	___ftpack
  6288  0786  0871               	movf	?___ftpack,w
  6289  0787  0020               	movlb	0	; select bank0
  6290  0788  00A4               	movwf	?___ftmul
  6291  0789  0872               	movf	?___ftpack+1,w
  6292  078A  00A5               	movwf	?___ftmul+1
  6293  078B  0873               	movf	?___ftpack+2,w
  6294  078C  00A6               	movwf	?___ftmul+2
  6295  078D  0008               	return
  6296  078E                     __end_of___ftmul:	
  6297                           
  6298                           	psect	text20
  6299  0D1F                     __ptext20:	
  6300 ;; *************** function ___ftge *****************
  6301 ;; Defined at:
  6302 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
  6303 ;; Parameters:    Size  Location     Type
  6304 ;;  ff1             3    1[COMMON] float 
  6305 ;;  ff2             3    4[COMMON] float 
  6306 ;; Auto vars:     Size  Location     Type
  6307 ;;		None
  6308 ;; Return value:  Size  Location     Type
  6309 ;;		None               void
  6310 ;; Registers used:
  6311 ;;		wreg, status,2, status,0
  6312 ;; Tracked objects:
  6313 ;;		On entry : 0/0
  6314 ;;		On exit  : 0/0
  6315 ;;		Unchanged: 0/0
  6316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6317 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6318 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6319 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6320 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6321 ;;Total ram usage:        9 bytes
  6322 ;; Hardware stack levels used:    1
  6323 ;; Hardware stack levels required when called:    2
  6324 ;; This function calls:
  6325 ;;		Nothing
  6326 ;; This function is called by:
  6327 ;;		_sqrt
  6328 ;; This function uses a non-reentrant model
  6329 ;;
  6330                           
  6331                           
  6332                           ;psect for function ___ftge
  6333  0D1F                     ___ftge:	
  6334                           
  6335                           ;incstack = 0
  6336                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  6337  0D1F  1FF3               	btfss	___ftge@ff1+2,7
  6338  0D20  2D35               	goto	l3522
  6339  0D21  0971               	comf	___ftge@ff1,w
  6340  0D22  00F7               	movwf	??___ftge
  6341  0D23  0972               	comf	___ftge@ff1+1,w
  6342  0D24  00F8               	movwf	??___ftge+1
  6343  0D25  0973               	comf	___ftge@ff1+2,w
  6344  0D26  00F9               	movwf	??___ftge+2
  6345  0D27  0AF7               	incf	??___ftge,f
  6346  0D28  1903               	skipnz
  6347  0D29  0AF8               	incf	??___ftge+1,f
  6348  0D2A  1903               	skipnz
  6349  0D2B  0AF9               	incf	??___ftge+2,f
  6350  0D2C  3000               	movlw	0
  6351  0D2D  0777               	addwf	??___ftge,w
  6352  0D2E  00F1               	movwf	___ftge@ff1
  6353  0D2F  3000               	movlw	0
  6354  0D30  3D78               	addwfc	??___ftge+1,w
  6355  0D31  00F2               	movwf	___ftge@ff1+1
  6356  0D32  3080               	movlw	128
  6357  0D33  3D79               	addwfc	??___ftge+2,w
  6358  0D34  00F3               	movwf	___ftge@ff1+2
  6359  0D35                     l3522:	
  6360  0D35  1FF6               	btfss	___ftge@ff2+2,7
  6361  0D36  2D4B               	goto	l3526
  6362  0D37  0974               	comf	___ftge@ff2,w
  6363  0D38  00F7               	movwf	??___ftge
  6364  0D39  0975               	comf	___ftge@ff2+1,w
  6365  0D3A  00F8               	movwf	??___ftge+1
  6366  0D3B  0976               	comf	___ftge@ff2+2,w
  6367  0D3C  00F9               	movwf	??___ftge+2
  6368  0D3D  0AF7               	incf	??___ftge,f
  6369  0D3E  1903               	skipnz
  6370  0D3F  0AF8               	incf	??___ftge+1,f
  6371  0D40  1903               	skipnz
  6372  0D41  0AF9               	incf	??___ftge+2,f
  6373  0D42  3000               	movlw	0
  6374  0D43  0777               	addwf	??___ftge,w
  6375  0D44  00F4               	movwf	___ftge@ff2
  6376  0D45  3000               	movlw	0
  6377  0D46  3D78               	addwfc	??___ftge+1,w
  6378  0D47  00F5               	movwf	___ftge@ff2+1
  6379  0D48  3080               	movlw	128
  6380  0D49  3D79               	addwfc	??___ftge+2,w
  6381  0D4A  00F6               	movwf	___ftge@ff2+2
  6382  0D4B                     l3526:	
  6383  0D4B  3080               	movlw	128
  6384  0D4C  06F3               	xorwf	___ftge@ff1+2,f
  6385  0D4D  3080               	movlw	128
  6386  0D4E  06F6               	xorwf	___ftge@ff2+2,f
  6387  0D4F  0876               	movf	___ftge@ff2+2,w
  6388  0D50  0273               	subwf	___ftge@ff1+2,w
  6389  0D51  1D03               	skipz
  6390  0D52  0008               	return
  6391  0D53  0875               	movf	___ftge@ff2+1,w
  6392  0D54  0272               	subwf	___ftge@ff1+1,w
  6393  0D55  1D03               	skipz
  6394  0D56  0008               	return
  6395  0D57  0874               	movf	___ftge@ff2,w
  6396  0D58  0271               	subwf	___ftge@ff1,w
  6397  0D59  0008               	return
  6398  0D5A                     __end_of___ftge:	
  6399                           
  6400                           	psect	text21
  6401  0958                     __ptext21:	
  6402 ;; *************** function ___lwtoft *****************
  6403 ;; Defined at:
  6404 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwtoft.c"
  6405 ;; Parameters:    Size  Location     Type
  6406 ;;  c               2    9[COMMON] unsigned int 
  6407 ;; Auto vars:     Size  Location     Type
  6408 ;;		None
  6409 ;; Return value:  Size  Location     Type
  6410 ;;                  3    9[COMMON] float 
  6411 ;; Registers used:
  6412 ;;		wreg, status,2, status,0, pclath, cstack
  6413 ;; Tracked objects:
  6414 ;;		On entry : 0/0
  6415 ;;		On exit  : 0/0
  6416 ;;		Unchanged: 0/0
  6417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6418 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6419 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6420 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6421 ;;      Totals:         3       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6422 ;;Total ram usage:        4 bytes
  6423 ;; Hardware stack levels used:    1
  6424 ;; Hardware stack levels required when called:    3
  6425 ;; This function calls:
  6426 ;;		___ftpack
  6427 ;; This function is called by:
  6428 ;;		_ADCConv
  6429 ;; This function uses a non-reentrant model
  6430 ;;
  6431                           
  6432                           
  6433                           ;psect for function ___lwtoft
  6434  0958                     ___lwtoft:	
  6435                           
  6436                           ;incstack = 0
  6437                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  6438  0958  0879               	movf	___lwtoft@c,w
  6439  0959  00F1               	movwf	___ftpack@arg
  6440  095A  087A               	movf	___lwtoft@c+1,w
  6441  095B  00F2               	movwf	___ftpack@arg+1
  6442  095C  01F3               	clrf	___ftpack@arg+2
  6443  095D  308E               	movlw	142
  6444  095E  0020               	movlb	0	; select bank0
  6445  095F  00A0               	movwf	??___lwtoft
  6446  0960  0820               	movf	??___lwtoft,w
  6447  0961  00F4               	movwf	___ftpack@exp
  6448  0962  01F5               	clrf	___ftpack@sign
  6449  0963  3187  278E         	fcall	___ftpack
  6450  0965  0871               	movf	?___ftpack,w
  6451  0966  00F9               	movwf	?___lwtoft
  6452  0967  0872               	movf	?___ftpack+1,w
  6453  0968  00FA               	movwf	?___lwtoft+1
  6454  0969  0873               	movf	?___ftpack+2,w
  6455  096A  00FB               	movwf	?___lwtoft+2
  6456  096B  0008               	return
  6457  096C                     __end_of___lwtoft:	
  6458                           
  6459                           	psect	text22
  6460  0CEB                     __ptext22:	
  6461 ;; *************** function ___lwdiv *****************
  6462 ;; Defined at:
  6463 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  6464 ;; Parameters:    Size  Location     Type
  6465 ;;  divisor         2    1[COMMON] unsigned int 
  6466 ;;  dividend        2    3[COMMON] unsigned int 
  6467 ;; Auto vars:     Size  Location     Type
  6468 ;;  quotient        2    7[COMMON] unsigned int 
  6469 ;;  counter         1    6[COMMON] unsigned char 
  6470 ;; Return value:  Size  Location     Type
  6471 ;;                  2    1[COMMON] unsigned int 
  6472 ;; Registers used:
  6473 ;;		wreg, status,2, status,0
  6474 ;; Tracked objects:
  6475 ;;		On entry : 0/0
  6476 ;;		On exit  : 0/0
  6477 ;;		Unchanged: 0/0
  6478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6479 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6480 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6481 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6482 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6483 ;;Total ram usage:        8 bytes
  6484 ;; Hardware stack levels used:    1
  6485 ;; Hardware stack levels required when called:    2
  6486 ;; This function calls:
  6487 ;;		Nothing
  6488 ;; This function is called by:
  6489 ;;		_ADCConv
  6490 ;; This function uses a non-reentrant model
  6491 ;;
  6492                           
  6493                           
  6494                           ;psect for function ___lwdiv
  6495  0CEB                     ___lwdiv:	
  6496                           
  6497                           ;incstack = 0
  6498                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6499  0CEB  01F7               	clrf	___lwdiv@quotient
  6500  0CEC  01F8               	clrf	___lwdiv@quotient+1
  6501  0CED  0871               	movf	___lwdiv@divisor,w
  6502  0CEE  0472               	iorwf	___lwdiv@divisor+1,w
  6503  0CEF  1903               	btfsc	3,2
  6504  0CF0  2D1A               	goto	l3756
  6505  0CF1  01F6               	clrf	___lwdiv@counter
  6506  0CF2  0AF6               	incf	___lwdiv@counter,f
  6507  0CF3                     l3744:	
  6508  0CF3  1BF2               	btfsc	___lwdiv@divisor+1,7
  6509  0CF4  2CFF               	goto	l3746
  6510  0CF5  3001               	movlw	1
  6511  0CF6                     u4195:	
  6512  0CF6  35F1               	lslf	___lwdiv@divisor,f
  6513  0CF7  0DF2               	rlf	___lwdiv@divisor+1,f
  6514  0CF8  0B89               	decfsz	9,f
  6515  0CF9  2CF6               	goto	u4195
  6516  0CFA  3001               	movlw	1
  6517  0CFB  00F5               	movwf	??___lwdiv
  6518  0CFC  0875               	movf	??___lwdiv,w
  6519  0CFD  07F6               	addwf	___lwdiv@counter,f
  6520  0CFE  2CF3               	goto	l3744
  6521  0CFF                     l3746:	
  6522  0CFF  3001               	movlw	1
  6523  0D00                     u4215:	
  6524  0D00  35F7               	lslf	___lwdiv@quotient,f
  6525  0D01  0DF8               	rlf	___lwdiv@quotient+1,f
  6526  0D02  0B89               	decfsz	9,f
  6527  0D03  2D00               	goto	u4215
  6528  0D04  0872               	movf	___lwdiv@divisor+1,w
  6529  0D05  0274               	subwf	___lwdiv@dividend+1,w
  6530  0D06  1D03               	skipz
  6531  0D07  2D0A               	goto	u4225
  6532  0D08  0871               	movf	___lwdiv@divisor,w
  6533  0D09  0273               	subwf	___lwdiv@dividend,w
  6534  0D0A                     u4225:	
  6535  0D0A  1C03               	skipc
  6536  0D0B  2D11               	goto	l3752
  6537  0D0C  0871               	movf	___lwdiv@divisor,w
  6538  0D0D  02F3               	subwf	___lwdiv@dividend,f
  6539  0D0E  0872               	movf	___lwdiv@divisor+1,w
  6540  0D0F  3BF4               	subwfb	___lwdiv@dividend+1,f
  6541  0D10  1477               	bsf	___lwdiv@quotient,0
  6542  0D11                     l3752:	
  6543  0D11  3001               	movlw	1
  6544  0D12                     u4235:	
  6545  0D12  36F2               	lsrf	___lwdiv@divisor+1,f
  6546  0D13  0CF1               	rrf	___lwdiv@divisor,f
  6547  0D14  0B89               	decfsz	9,f
  6548  0D15  2D12               	goto	u4235
  6549  0D16  3001               	movlw	1
  6550  0D17  02F6               	subwf	___lwdiv@counter,f
  6551  0D18  1D03               	btfss	3,2
  6552  0D19  2CFF               	goto	l3746
  6553  0D1A                     l3756:	
  6554  0D1A  0878               	movf	___lwdiv@quotient+1,w
  6555  0D1B  00F2               	movwf	?___lwdiv+1
  6556  0D1C  0877               	movf	___lwdiv@quotient,w
  6557  0D1D  00F1               	movwf	?___lwdiv
  6558  0D1E  0008               	return
  6559  0D1F                     __end_of___lwdiv:	
  6560                           
  6561                           	psect	text23
  6562  0CB9                     __ptext23:	
  6563 ;; *************** function ___lmul *****************
  6564 ;; Defined at:
  6565 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul32.c"
  6566 ;; Parameters:    Size  Location     Type
  6567 ;;  multiplier      4    1[COMMON] unsigned long 
  6568 ;;  multiplicand    4    5[COMMON] unsigned long 
  6569 ;; Auto vars:     Size  Location     Type
  6570 ;;  product         4    0[BANK0 ] unsigned long 
  6571 ;; Return value:  Size  Location     Type
  6572 ;;                  4    1[COMMON] unsigned long 
  6573 ;; Registers used:
  6574 ;;		wreg, status,2, status,0
  6575 ;; Tracked objects:
  6576 ;;		On entry : 0/0
  6577 ;;		On exit  : 0/0
  6578 ;;		Unchanged: 0/0
  6579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6580 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6581 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6582 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6583 ;;      Totals:         8       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6584 ;;Total ram usage:       12 bytes
  6585 ;; Hardware stack levels used:    1
  6586 ;; Hardware stack levels required when called:    2
  6587 ;; This function calls:
  6588 ;;		Nothing
  6589 ;; This function is called by:
  6590 ;;		_ADCConv
  6591 ;; This function uses a non-reentrant model
  6592 ;;
  6593                           
  6594                           
  6595                           ;psect for function ___lmul
  6596  0CB9                     ___lmul:	
  6597                           
  6598                           ;incstack = 0
  6599                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  6600  0CB9  3000               	movlw	0
  6601  0CBA  0020               	movlb	0	; select bank0
  6602  0CBB  00A3               	movwf	___lmul@product+3
  6603  0CBC  3000               	movlw	0
  6604  0CBD  00A2               	movwf	___lmul@product+2
  6605  0CBE  3000               	movlw	0
  6606  0CBF  00A1               	movwf	___lmul@product+1
  6607  0CC0  3000               	movlw	0
  6608  0CC1  00A0               	movwf	___lmul@product
  6609  0CC2                     l3646:	
  6610  0CC2  1C71               	btfss	___lmul@multiplier,0
  6611  0CC3  2CCD               	goto	l3650
  6612  0CC4  0875               	movf	___lmul@multiplicand,w
  6613  0CC5  0020               	movlb	0	; select bank0
  6614  0CC6  07A0               	addwf	___lmul@product,f
  6615  0CC7  0876               	movf	___lmul@multiplicand+1,w
  6616  0CC8  3DA1               	addwfc	___lmul@product+1,f
  6617  0CC9  0877               	movf	___lmul@multiplicand+2,w
  6618  0CCA  3DA2               	addwfc	___lmul@product+2,f
  6619  0CCB  0878               	movf	___lmul@multiplicand+3,w
  6620  0CCC  3DA3               	addwfc	___lmul@product+3,f
  6621  0CCD                     l3650:	
  6622  0CCD  3001               	movlw	1
  6623  0CCE                     u3985:	
  6624  0CCE  35F5               	lslf	___lmul@multiplicand,f
  6625  0CCF  0DF6               	rlf	___lmul@multiplicand+1,f
  6626  0CD0  0DF7               	rlf	___lmul@multiplicand+2,f
  6627  0CD1  0DF8               	rlf	___lmul@multiplicand+3,f
  6628  0CD2  0B89               	decfsz	9,f
  6629  0CD3  2CCE               	goto	u3985
  6630  0CD4  3001               	movlw	1
  6631  0CD5                     u3995:	
  6632  0CD5  36F4               	lsrf	___lmul@multiplier+3,f
  6633  0CD6  0CF3               	rrf	___lmul@multiplier+2,f
  6634  0CD7  0CF2               	rrf	___lmul@multiplier+1,f
  6635  0CD8  0CF1               	rrf	___lmul@multiplier,f
  6636  0CD9  0B89               	decfsz	9,f
  6637  0CDA  2CD5               	goto	u3995
  6638  0CDB  0874               	movf	___lmul@multiplier+3,w
  6639  0CDC  0473               	iorwf	___lmul@multiplier+2,w
  6640  0CDD  0472               	iorwf	___lmul@multiplier+1,w
  6641  0CDE  0471               	iorwf	___lmul@multiplier,w
  6642  0CDF  1D03               	skipz
  6643  0CE0  2CC2               	goto	l3646
  6644  0CE1  0020               	movlb	0	; select bank0
  6645  0CE2  0823               	movf	___lmul@product+3,w
  6646  0CE3  00F4               	movwf	?___lmul+3
  6647  0CE4  0822               	movf	___lmul@product+2,w
  6648  0CE5  00F3               	movwf	?___lmul+2
  6649  0CE6  0821               	movf	___lmul@product+1,w
  6650  0CE7  00F2               	movwf	?___lmul+1
  6651  0CE8  0820               	movf	___lmul@product,w
  6652  0CE9  00F1               	movwf	?___lmul
  6653  0CEA  0008               	return
  6654  0CEB                     __end_of___lmul:	
  6655                           
  6656                           	psect	text24
  6657  0BD0                     __ptext24:	
  6658 ;; *************** function ___lltoft *****************
  6659 ;; Defined at:
  6660 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lltoft.c"
  6661 ;; Parameters:    Size  Location     Type
  6662 ;;  c               4    0[BANK0 ] unsigned long 
  6663 ;; Auto vars:     Size  Location     Type
  6664 ;;  exp             1   10[COMMON] unsigned char 
  6665 ;; Return value:  Size  Location     Type
  6666 ;;                  3    0[BANK0 ] float 
  6667 ;; Registers used:
  6668 ;;		wreg, status,2, status,0, pclath, cstack
  6669 ;; Tracked objects:
  6670 ;;		On entry : 0/0
  6671 ;;		On exit  : 0/0
  6672 ;;		Unchanged: 0/0
  6673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6674 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6675 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6676 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6677 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6678 ;;Total ram usage:        6 bytes
  6679 ;; Hardware stack levels used:    1
  6680 ;; Hardware stack levels required when called:    3
  6681 ;; This function calls:
  6682 ;;		___ftpack
  6683 ;; This function is called by:
  6684 ;;		_ADCConv
  6685 ;; This function uses a non-reentrant model
  6686 ;;
  6687                           
  6688                           
  6689                           ;psect for function ___lltoft
  6690  0BD0                     ___lltoft:	
  6691                           
  6692                           ;incstack = 0
  6693                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  6694  0BD0  308E               	movlw	142
  6695  0BD1  00F9               	movwf	??___lltoft
  6696  0BD2  0879               	movf	??___lltoft,w
  6697  0BD3  00FA               	movwf	___lltoft@exp
  6698  0BD4                     l3728:	
  6699  0BD4  30FF               	movlw	255
  6700  0BD5  0020               	movlb	0	; select bank0
  6701  0BD6  0523               	andwf	___lltoft@c+3,w
  6702  0BD7  1903               	btfsc	3,2
  6703  0BD8  2BE6               	goto	l3730
  6704  0BD9  3001               	movlw	1
  6705  0BDA                     u4165:	
  6706  0BDA  0020               	movlb	0	; select bank0
  6707  0BDB  36A3               	lsrf	___lltoft@c+3,f
  6708  0BDC  0CA2               	rrf	___lltoft@c+2,f
  6709  0BDD  0CA1               	rrf	___lltoft@c+1,f
  6710  0BDE  0CA0               	rrf	___lltoft@c,f
  6711  0BDF  0B89               	decfsz	9,f
  6712  0BE0  2BDA               	goto	u4165
  6713  0BE1  3001               	movlw	1
  6714  0BE2  00F9               	movwf	??___lltoft
  6715  0BE3  0879               	movf	??___lltoft,w
  6716  0BE4  07FA               	addwf	___lltoft@exp,f
  6717  0BE5  2BD4               	goto	l3728
  6718  0BE6                     l3730:	
  6719  0BE6  0820               	movf	___lltoft@c,w
  6720  0BE7  00F1               	movwf	___ftpack@arg
  6721  0BE8  0821               	movf	___lltoft@c+1,w
  6722  0BE9  00F2               	movwf	___ftpack@arg+1
  6723  0BEA  0822               	movf	___lltoft@c+2,w
  6724  0BEB  00F3               	movwf	___ftpack@arg+2
  6725  0BEC  087A               	movf	___lltoft@exp,w
  6726  0BED  00F9               	movwf	??___lltoft
  6727  0BEE  0879               	movf	??___lltoft,w
  6728  0BEF  00F4               	movwf	___ftpack@exp
  6729  0BF0  01F5               	clrf	___ftpack@sign
  6730  0BF1  3187  278E         	fcall	___ftpack
  6731  0BF3  0871               	movf	?___ftpack,w
  6732  0BF4  0020               	movlb	0	; select bank0
  6733  0BF5  00A0               	movwf	?___lltoft
  6734  0BF6  0872               	movf	?___ftpack+1,w
  6735  0BF7  00A1               	movwf	?___lltoft+1
  6736  0BF8  0873               	movf	?___ftpack+2,w
  6737  0BF9  00A2               	movwf	?___lltoft+2
  6738  0BFA  0008               	return
  6739  0BFB                     __end_of___lltoft:	
  6740                           
  6741                           	psect	text25
  6742  0DE5                     __ptext25:	
  6743 ;; *************** function ___lldiv *****************
  6744 ;; Defined at:
  6745 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
  6746 ;; Parameters:    Size  Location     Type
  6747 ;;  divisor         4    1[COMMON] unsigned long 
  6748 ;;  dividend        4    5[COMMON] unsigned long 
  6749 ;; Auto vars:     Size  Location     Type
  6750 ;;  quotient        4    0[BANK0 ] unsigned long 
  6751 ;;  counter         1    4[BANK0 ] unsigned char 
  6752 ;; Return value:  Size  Location     Type
  6753 ;;                  4    1[COMMON] unsigned long 
  6754 ;; Registers used:
  6755 ;;		wreg, status,2, status,0
  6756 ;; Tracked objects:
  6757 ;;		On entry : 0/0
  6758 ;;		On exit  : 0/0
  6759 ;;		Unchanged: 0/0
  6760 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6761 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6762 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6763 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6764 ;;      Totals:         9       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6765 ;;Total ram usage:       14 bytes
  6766 ;; Hardware stack levels used:    1
  6767 ;; Hardware stack levels required when called:    2
  6768 ;; This function calls:
  6769 ;;		Nothing
  6770 ;; This function is called by:
  6771 ;;		_ADCConv
  6772 ;; This function uses a non-reentrant model
  6773 ;;
  6774                           
  6775                           
  6776                           ;psect for function ___lldiv
  6777  0DE5                     ___lldiv:	
  6778                           
  6779                           ;incstack = 0
  6780                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  6781  0DE5  3000               	movlw	0
  6782  0DE6  0020               	movlb	0	; select bank0
  6783  0DE7  00A3               	movwf	___lldiv@quotient+3
  6784  0DE8  3000               	movlw	0
  6785  0DE9  00A2               	movwf	___lldiv@quotient+2
  6786  0DEA  3000               	movlw	0
  6787  0DEB  00A1               	movwf	___lldiv@quotient+1
  6788  0DEC  3000               	movlw	0
  6789  0DED  00A0               	movwf	___lldiv@quotient
  6790  0DEE  0874               	movf	___lldiv@divisor+3,w
  6791  0DEF  0473               	iorwf	___lldiv@divisor+2,w
  6792  0DF0  0472               	iorwf	___lldiv@divisor+1,w
  6793  0DF1  0471               	iorwf	___lldiv@divisor,w
  6794  0DF2  1903               	skipnz
  6795  0DF3  2E2F               	goto	l3720
  6796  0DF4  01A4               	clrf	___lldiv@counter
  6797  0DF5  0AA4               	incf	___lldiv@counter,f
  6798  0DF6                     l3706:	
  6799  0DF6  1BF4               	btfsc	___lldiv@divisor+3,7
  6800  0DF7  2E04               	goto	l3708
  6801  0DF8  3001               	movlw	1
  6802  0DF9                     u4105:	
  6803  0DF9  35F1               	lslf	___lldiv@divisor,f
  6804  0DFA  0DF2               	rlf	___lldiv@divisor+1,f
  6805  0DFB  0DF3               	rlf	___lldiv@divisor+2,f
  6806  0DFC  0DF4               	rlf	___lldiv@divisor+3,f
  6807  0DFD  0B89               	decfsz	9,f
  6808  0DFE  2DF9               	goto	u4105
  6809  0DFF  3001               	movlw	1
  6810  0E00  00F9               	movwf	??___lldiv
  6811  0E01  0879               	movf	??___lldiv,w
  6812  0E02  07A4               	addwf	___lldiv@counter,f
  6813  0E03  2DF6               	goto	l3706
  6814  0E04                     l3708:	
  6815  0E04  3001               	movlw	1
  6816  0E05                     u4125:	
  6817  0E05  35A0               	lslf	___lldiv@quotient,f
  6818  0E06  0DA1               	rlf	___lldiv@quotient+1,f
  6819  0E07  0DA2               	rlf	___lldiv@quotient+2,f
  6820  0E08  0DA3               	rlf	___lldiv@quotient+3,f
  6821  0E09  0B89               	decfsz	9,f
  6822  0E0A  2E05               	goto	u4125
  6823  0E0B  0874               	movf	___lldiv@divisor+3,w
  6824  0E0C  0278               	subwf	___lldiv@dividend+3,w
  6825  0E0D  1D03               	skipz
  6826  0E0E  2E19               	goto	u4135
  6827  0E0F  0873               	movf	___lldiv@divisor+2,w
  6828  0E10  0277               	subwf	___lldiv@dividend+2,w
  6829  0E11  1D03               	skipz
  6830  0E12  2E19               	goto	u4135
  6831  0E13  0872               	movf	___lldiv@divisor+1,w
  6832  0E14  0276               	subwf	___lldiv@dividend+1,w
  6833  0E15  1D03               	skipz
  6834  0E16  2E19               	goto	u4135
  6835  0E17  0871               	movf	___lldiv@divisor,w
  6836  0E18  0275               	subwf	___lldiv@dividend,w
  6837  0E19                     u4135:	
  6838  0E19  1C03               	skipc
  6839  0E1A  2E24               	goto	l3716
  6840  0E1B  0871               	movf	___lldiv@divisor,w
  6841  0E1C  02F5               	subwf	___lldiv@dividend,f
  6842  0E1D  0872               	movf	___lldiv@divisor+1,w
  6843  0E1E  3BF6               	subwfb	___lldiv@dividend+1,f
  6844  0E1F  0873               	movf	___lldiv@divisor+2,w
  6845  0E20  3BF7               	subwfb	___lldiv@dividend+2,f
  6846  0E21  0874               	movf	___lldiv@divisor+3,w
  6847  0E22  3BF8               	subwfb	___lldiv@dividend+3,f
  6848  0E23  1420               	bsf	___lldiv@quotient,0
  6849  0E24                     l3716:	
  6850  0E24  3001               	movlw	1
  6851  0E25                     u4145:	
  6852  0E25  36F4               	lsrf	___lldiv@divisor+3,f
  6853  0E26  0CF3               	rrf	___lldiv@divisor+2,f
  6854  0E27  0CF2               	rrf	___lldiv@divisor+1,f
  6855  0E28  0CF1               	rrf	___lldiv@divisor,f
  6856  0E29  0B89               	decfsz	9,f
  6857  0E2A  2E25               	goto	u4145
  6858  0E2B  3001               	movlw	1
  6859  0E2C  02A4               	subwf	___lldiv@counter,f
  6860  0E2D  1D03               	btfss	3,2
  6861  0E2E  2E04               	goto	l3708
  6862  0E2F                     l3720:	
  6863  0E2F  0823               	movf	___lldiv@quotient+3,w
  6864  0E30  00F4               	movwf	?___lldiv+3
  6865  0E31  0822               	movf	___lldiv@quotient+2,w
  6866  0E32  00F3               	movwf	?___lldiv+2
  6867  0E33  0821               	movf	___lldiv@quotient+1,w
  6868  0E34  00F2               	movwf	?___lldiv+1
  6869  0E35  0820               	movf	___lldiv@quotient,w
  6870  0E36  00F1               	movwf	?___lldiv
  6871  0E37  0008               	return
  6872  0E38                     __end_of___lldiv:	
  6873                           
  6874                           	psect	text26
  6875  0F57                     __ptext26:	
  6876 ;; *************** function ___ftdiv *****************
  6877 ;; Defined at:
  6878 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  6879 ;; Parameters:    Size  Location     Type
  6880 ;;  f2              3   39[BANK0 ] float 
  6881 ;;  f1              3   42[BANK0 ] float 
  6882 ;; Auto vars:     Size  Location     Type
  6883 ;;  f3              3   50[BANK0 ] float 
  6884 ;;  sign            1   54[BANK0 ] unsigned char 
  6885 ;;  exp             1   53[BANK0 ] unsigned char 
  6886 ;;  cntr            1   49[BANK0 ] unsigned char 
  6887 ;; Return value:  Size  Location     Type
  6888 ;;                  3   39[BANK0 ] float 
  6889 ;; Registers used:
  6890 ;;		wreg, status,2, status,0, pclath, cstack
  6891 ;; Tracked objects:
  6892 ;;		On entry : 0/0
  6893 ;;		On exit  : 0/0
  6894 ;;		Unchanged: 0/0
  6895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6896 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6897 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6898 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6899 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6900 ;;Total ram usage:       16 bytes
  6901 ;; Hardware stack levels used:    1
  6902 ;; Hardware stack levels required when called:    3
  6903 ;; This function calls:
  6904 ;;		___ftpack
  6905 ;; This function is called by:
  6906 ;;		_ADCConv
  6907 ;; This function uses a non-reentrant model
  6908 ;;
  6909                           
  6910                           
  6911                           ;psect for function ___ftdiv
  6912  0F57                     ___ftdiv:	
  6913                           
  6914                           ;incstack = 0
  6915                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  6916  0F57  0020               	movlb	0	; select bank0
  6917  0F58  084A               	movf	___ftdiv@f1,w
  6918  0F59  00CD               	movwf	??___ftdiv
  6919  0F5A  084B               	movf	___ftdiv@f1+1,w
  6920  0F5B  00CE               	movwf	??___ftdiv+1
  6921  0F5C  084C               	movf	___ftdiv@f1+2,w
  6922  0F5D  00CF               	movwf	??___ftdiv+2
  6923  0F5E  1003               	clrc
  6924  0F5F  0D4E               	rlf	??___ftdiv+1,w
  6925  0F60  0D4F               	rlf	??___ftdiv+2,w
  6926  0F61  00D0               	movwf	??___ftdiv+3
  6927  0F62  0850               	movf	??___ftdiv+3,w
  6928  0F63  00D5               	movwf	___ftdiv@exp
  6929  0F64  0855               	movf	___ftdiv@exp,w
  6930  0F65  1D03               	btfss	3,2
  6931  0F66  2F6E               	goto	l3664
  6932  0F67  3000               	movlw	0
  6933  0F68  00C7               	movwf	?___ftdiv
  6934  0F69  3000               	movlw	0
  6935  0F6A  00C8               	movwf	?___ftdiv+1
  6936  0F6B  3000               	movlw	0
  6937  0F6C  00C9               	movwf	?___ftdiv+2
  6938  0F6D  0008               	return
  6939  0F6E                     l3664:	
  6940  0F6E  0847               	movf	___ftdiv@f2,w
  6941  0F6F  00CD               	movwf	??___ftdiv
  6942  0F70  0848               	movf	___ftdiv@f2+1,w
  6943  0F71  00CE               	movwf	??___ftdiv+1
  6944  0F72  0849               	movf	___ftdiv@f2+2,w
  6945  0F73  00CF               	movwf	??___ftdiv+2
  6946  0F74  1003               	clrc
  6947  0F75  0D4E               	rlf	??___ftdiv+1,w
  6948  0F76  0D4F               	rlf	??___ftdiv+2,w
  6949  0F77  00D0               	movwf	??___ftdiv+3
  6950  0F78  0850               	movf	??___ftdiv+3,w
  6951  0F79  00D6               	movwf	___ftdiv@sign
  6952  0F7A  0856               	movf	___ftdiv@sign,w
  6953  0F7B  1D03               	btfss	3,2
  6954  0F7C  2F84               	goto	l3670
  6955  0F7D  3000               	movlw	0
  6956  0F7E  00C7               	movwf	?___ftdiv
  6957  0F7F  3000               	movlw	0
  6958  0F80  00C8               	movwf	?___ftdiv+1
  6959  0F81  3000               	movlw	0
  6960  0F82  00C9               	movwf	?___ftdiv+2
  6961  0F83  0008               	return
  6962  0F84                     l3670:	
  6963  0F84  3000               	movlw	0
  6964  0F85  00D2               	movwf	___ftdiv@f3
  6965  0F86  3000               	movlw	0
  6966  0F87  00D3               	movwf	___ftdiv@f3+1
  6967  0F88  3000               	movlw	0
  6968  0F89  00D4               	movwf	___ftdiv@f3+2
  6969  0F8A  3089               	movlw	137
  6970  0F8B  0756               	addwf	___ftdiv@sign,w
  6971  0F8C  00CD               	movwf	??___ftdiv
  6972  0F8D  084D               	movf	??___ftdiv,w
  6973  0F8E  02D5               	subwf	___ftdiv@exp,f
  6974  0F8F  084A               	movf	___ftdiv@f1,w
  6975  0F90  00CD               	movwf	??___ftdiv
  6976  0F91  084B               	movf	___ftdiv@f1+1,w
  6977  0F92  00CE               	movwf	??___ftdiv+1
  6978  0F93  084C               	movf	___ftdiv@f1+2,w
  6979  0F94  00CF               	movwf	??___ftdiv+2
  6980  0F95  3010               	movlw	16
  6981  0F96                     u4035:	
  6982  0F96  36CF               	lsrf	??___ftdiv+2,f
  6983  0F97  0CCE               	rrf	??___ftdiv+1,f
  6984  0F98  0CCD               	rrf	??___ftdiv,f
  6985  0F99  0B89               	decfsz	9,f
  6986  0F9A  2F96               	goto	u4035
  6987  0F9B  084D               	movf	??___ftdiv,w
  6988  0F9C  00D0               	movwf	??___ftdiv+3
  6989  0F9D  0850               	movf	??___ftdiv+3,w
  6990  0F9E  00D6               	movwf	___ftdiv@sign
  6991  0F9F  0847               	movf	___ftdiv@f2,w
  6992  0FA0  00CD               	movwf	??___ftdiv
  6993  0FA1  0848               	movf	___ftdiv@f2+1,w
  6994  0FA2  00CE               	movwf	??___ftdiv+1
  6995  0FA3  0849               	movf	___ftdiv@f2+2,w
  6996  0FA4  00CF               	movwf	??___ftdiv+2
  6997  0FA5  3010               	movlw	16
  6998  0FA6                     u4045:	
  6999  0FA6  36CF               	lsrf	??___ftdiv+2,f
  7000  0FA7  0CCE               	rrf	??___ftdiv+1,f
  7001  0FA8  0CCD               	rrf	??___ftdiv,f
  7002  0FA9  0B89               	decfsz	9,f
  7003  0FAA  2FA6               	goto	u4045
  7004  0FAB  084D               	movf	??___ftdiv,w
  7005  0FAC  00D0               	movwf	??___ftdiv+3
  7006  0FAD  0850               	movf	??___ftdiv+3,w
  7007  0FAE  06D6               	xorwf	___ftdiv@sign,f
  7008  0FAF  3080               	movlw	128
  7009  0FB0  00CD               	movwf	??___ftdiv
  7010  0FB1  084D               	movf	??___ftdiv,w
  7011  0FB2  05D6               	andwf	___ftdiv@sign,f
  7012  0FB3  17CB               	bsf	___ftdiv@f1+1,7
  7013  0FB4  30FF               	movlw	255
  7014  0FB5  05CA               	andwf	___ftdiv@f1,f
  7015  0FB6  30FF               	movlw	255
  7016  0FB7  05CB               	andwf	___ftdiv@f1+1,f
  7017  0FB8  3000               	movlw	0
  7018  0FB9  05CC               	andwf	___ftdiv@f1+2,f
  7019  0FBA  17C8               	bsf	___ftdiv@f2+1,7
  7020  0FBB  30FF               	movlw	255
  7021  0FBC  05C7               	andwf	___ftdiv@f2,f
  7022  0FBD  30FF               	movlw	255
  7023  0FBE  05C8               	andwf	___ftdiv@f2+1,f
  7024  0FBF  3000               	movlw	0
  7025  0FC0  05C9               	andwf	___ftdiv@f2+2,f
  7026  0FC1  3018               	movlw	24
  7027  0FC2  00CD               	movwf	??___ftdiv
  7028  0FC3  084D               	movf	??___ftdiv,w
  7029  0FC4  00D1               	movwf	___ftdiv@cntr
  7030  0FC5                     l3684:	
  7031  0FC5  3001               	movlw	1
  7032  0FC6                     u4055:	
  7033  0FC6  35D2               	lslf	___ftdiv@f3,f
  7034  0FC7  0DD3               	rlf	___ftdiv@f3+1,f
  7035  0FC8  0DD4               	rlf	___ftdiv@f3+2,f
  7036  0FC9  0B89               	decfsz	9,f
  7037  0FCA  2FC6               	goto	u4055
  7038  0FCB  0849               	movf	___ftdiv@f2+2,w
  7039  0FCC  024C               	subwf	___ftdiv@f1+2,w
  7040  0FCD  1D03               	skipz
  7041  0FCE  2FD5               	goto	u4065
  7042  0FCF  0848               	movf	___ftdiv@f2+1,w
  7043  0FD0  024B               	subwf	___ftdiv@f1+1,w
  7044  0FD1  1D03               	skipz
  7045  0FD2  2FD5               	goto	u4065
  7046  0FD3  0847               	movf	___ftdiv@f2,w
  7047  0FD4  024A               	subwf	___ftdiv@f1,w
  7048  0FD5                     u4065:	
  7049  0FD5  1C03               	skipc
  7050  0FD6  2FDE               	goto	l3692
  7051  0FD7  0847               	movf	___ftdiv@f2,w
  7052  0FD8  02CA               	subwf	___ftdiv@f1,f
  7053  0FD9  0848               	movf	___ftdiv@f2+1,w
  7054  0FDA  3BCB               	subwfb	___ftdiv@f1+1,f
  7055  0FDB  0849               	movf	___ftdiv@f2+2,w
  7056  0FDC  3BCC               	subwfb	___ftdiv@f1+2,f
  7057  0FDD  1452               	bsf	___ftdiv@f3,0
  7058  0FDE                     l3692:	
  7059  0FDE  3001               	movlw	1
  7060  0FDF                     u4075:	
  7061  0FDF  35CA               	lslf	___ftdiv@f1,f
  7062  0FE0  0DCB               	rlf	___ftdiv@f1+1,f
  7063  0FE1  0DCC               	rlf	___ftdiv@f1+2,f
  7064  0FE2  0B89               	decfsz	9,f
  7065  0FE3  2FDF               	goto	u4075
  7066  0FE4  3001               	movlw	1
  7067  0FE5  02D1               	subwf	___ftdiv@cntr,f
  7068  0FE6  1D03               	btfss	3,2
  7069  0FE7  2FC5               	goto	l3684
  7070  0FE8  0852               	movf	___ftdiv@f3,w
  7071  0FE9  00F1               	movwf	___ftpack@arg
  7072  0FEA  0853               	movf	___ftdiv@f3+1,w
  7073  0FEB  00F2               	movwf	___ftpack@arg+1
  7074  0FEC  0854               	movf	___ftdiv@f3+2,w
  7075  0FED  00F3               	movwf	___ftpack@arg+2
  7076  0FEE  0855               	movf	___ftdiv@exp,w
  7077  0FEF  00CD               	movwf	??___ftdiv
  7078  0FF0  084D               	movf	??___ftdiv,w
  7079  0FF1  00F4               	movwf	___ftpack@exp
  7080  0FF2  0856               	movf	___ftdiv@sign,w
  7081  0FF3  00CE               	movwf	??___ftdiv+1
  7082  0FF4  084E               	movf	??___ftdiv+1,w
  7083  0FF5  00F5               	movwf	___ftpack@sign
  7084  0FF6  3187  278E         	fcall	___ftpack
  7085  0FF8  0871               	movf	?___ftpack,w
  7086  0FF9  0020               	movlb	0	; select bank0
  7087  0FFA  00C7               	movwf	?___ftdiv
  7088  0FFB  0872               	movf	?___ftpack+1,w
  7089  0FFC  00C8               	movwf	?___ftdiv+1
  7090  0FFD  0873               	movf	?___ftpack+2,w
  7091  0FFE  00C9               	movwf	?___ftdiv+2
  7092  0FFF  0008               	return
  7093  1000                     __end_of___ftdiv:	
  7094                           
  7095                           	psect	text27
  7096  078E                     __ptext27:	
  7097 ;; *************** function ___ftpack *****************
  7098 ;; Defined at:
  7099 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  7100 ;; Parameters:    Size  Location     Type
  7101 ;;  arg             3    1[COMMON] unsigned um
  7102 ;;  exp             1    4[COMMON] unsigned char 
  7103 ;;  sign            1    5[COMMON] unsigned char 
  7104 ;; Auto vars:     Size  Location     Type
  7105 ;;		None
  7106 ;; Return value:  Size  Location     Type
  7107 ;;                  3    1[COMMON] float 
  7108 ;; Registers used:
  7109 ;;		wreg, status,2, status,0
  7110 ;; Tracked objects:
  7111 ;;		On entry : 0/0
  7112 ;;		On exit  : 0/0
  7113 ;;		Unchanged: 0/0
  7114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7115 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7116 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7117 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7118 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7119 ;;Total ram usage:        8 bytes
  7120 ;; Hardware stack levels used:    1
  7121 ;; Hardware stack levels required when called:    2
  7122 ;; This function calls:
  7123 ;;		Nothing
  7124 ;; This function is called by:
  7125 ;;		___ftadd
  7126 ;;		___ftdiv
  7127 ;;		___ftmul
  7128 ;;		___lltoft
  7129 ;;		___lwtoft
  7130 ;; This function uses a non-reentrant model
  7131 ;;
  7132                           
  7133                           
  7134                           ;psect for function ___ftpack
  7135  078E                     ___ftpack:	
  7136                           
  7137                           ;incstack = 0
  7138                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  7139  078E  0874               	movf	___ftpack@exp,w
  7140  078F  1903               	btfsc	3,2
  7141  0790  2F96               	goto	l3370
  7142  0791  0873               	movf	___ftpack@arg+2,w
  7143  0792  0472               	iorwf	___ftpack@arg+1,w
  7144  0793  0471               	iorwf	___ftpack@arg,w
  7145  0794  1D03               	skipz
  7146  0795  2FA7               	goto	l3376
  7147  0796                     l3370:	
  7148  0796  3000               	movlw	0
  7149  0797  00F1               	movwf	?___ftpack
  7150  0798  3000               	movlw	0
  7151  0799  00F2               	movwf	?___ftpack+1
  7152  079A  3000               	movlw	0
  7153  079B  00F3               	movwf	?___ftpack+2
  7154  079C  0008               	return
  7155  079D                     l3374:	
  7156  079D  3001               	movlw	1
  7157  079E  00F6               	movwf	??___ftpack
  7158  079F  0876               	movf	??___ftpack,w
  7159  07A0  07F4               	addwf	___ftpack@exp,f
  7160  07A1  3001               	movlw	1
  7161  07A2                     u3365:	
  7162  07A2  36F3               	lsrf	___ftpack@arg+2,f
  7163  07A3  0CF2               	rrf	___ftpack@arg+1,f
  7164  07A4  0CF1               	rrf	___ftpack@arg,f
  7165  07A5  0B89               	decfsz	9,f
  7166  07A6  2FA2               	goto	u3365
  7167  07A7                     l3376:	
  7168  07A7  30FE               	movlw	254
  7169  07A8  0573               	andwf	___ftpack@arg+2,w
  7170  07A9  1903               	btfsc	3,2
  7171  07AA  2FC0               	goto	l856
  7172  07AB  2F9D               	goto	l3374
  7173  07AC                     l3378:	
  7174  07AC  3001               	movlw	1
  7175  07AD  00F6               	movwf	??___ftpack
  7176  07AE  0876               	movf	??___ftpack,w
  7177  07AF  07F4               	addwf	___ftpack@exp,f
  7178  07B0  3001               	movlw	1
  7179  07B1  07F1               	addwf	___ftpack@arg,f
  7180  07B2  3000               	movlw	0
  7181  07B3  1803               	skipnc
  7182  07B4  3001               	movlw	1
  7183  07B5  07F2               	addwf	___ftpack@arg+1,f
  7184  07B6  3000               	movlw	0
  7185  07B7  1803               	skipnc
  7186  07B8  3001               	movlw	1
  7187  07B9  07F3               	addwf	___ftpack@arg+2,f
  7188  07BA  3001               	movlw	1
  7189  07BB                     u3385:	
  7190  07BB  36F3               	lsrf	___ftpack@arg+2,f
  7191  07BC  0CF2               	rrf	___ftpack@arg+1,f
  7192  07BD  0CF1               	rrf	___ftpack@arg,f
  7193  07BE  0B89               	decfsz	9,f
  7194  07BF  2FBB               	goto	u3385
  7195  07C0                     l856:	
  7196  07C0  30FF               	movlw	255
  7197  07C1  0573               	andwf	___ftpack@arg+2,w
  7198  07C2  1903               	btfsc	3,2
  7199  07C3  2FD1               	goto	l3386
  7200  07C4  2FAC               	goto	l3378
  7201  07C5                     l3388:	
  7202  07C5  3002               	movlw	2
  7203  07C6  0274               	subwf	___ftpack@exp,w
  7204  07C7  1C03               	btfss	3,0
  7205  07C8  2FD3               	goto	l863
  7206  07C9  3001               	movlw	1
  7207  07CA  02F4               	subwf	___ftpack@exp,f
  7208  07CB  3001               	movlw	1
  7209  07CC                     u3405:	
  7210  07CC  35F1               	lslf	___ftpack@arg,f
  7211  07CD  0DF2               	rlf	___ftpack@arg+1,f
  7212  07CE  0DF3               	rlf	___ftpack@arg+2,f
  7213  07CF  0B89               	decfsz	9,f
  7214  07D0  2FCC               	goto	u3405
  7215  07D1                     l3386:	
  7216  07D1  1FF2               	btfss	___ftpack@arg+1,7
  7217  07D2  2FC5               	goto	l3388
  7218  07D3                     l863:	
  7219  07D3  1874               	btfsc	___ftpack@exp,0
  7220  07D4  2FDB               	goto	l864
  7221  07D5  30FF               	movlw	255
  7222  07D6  05F1               	andwf	___ftpack@arg,f
  7223  07D7  307F               	movlw	127
  7224  07D8  05F2               	andwf	___ftpack@arg+1,f
  7225  07D9  30FF               	movlw	255
  7226  07DA  05F3               	andwf	___ftpack@arg+2,f
  7227  07DB                     l864:	
  7228  07DB  1003               	clrc
  7229  07DC  0CF4               	rrf	___ftpack@exp,f
  7230  07DD  0874               	movf	___ftpack@exp,w
  7231  07DE  00F6               	movwf	??___ftpack
  7232  07DF  01F7               	clrf	??___ftpack+1
  7233  07E0  01F8               	clrf	??___ftpack+2
  7234  07E1  3010               	movlw	16
  7235  07E2                     u3445:	
  7236  07E2  35F6               	lslf	??___ftpack,f
  7237  07E3  0DF7               	rlf	??___ftpack+1,f
  7238  07E4  0DF8               	rlf	??___ftpack+2,f
  7239  07E5  0B89               	decfsz	9,f
  7240  07E6  2FE2               	goto	u3445
  7241  07E7  0876               	movf	??___ftpack,w
  7242  07E8  04F1               	iorwf	___ftpack@arg,f
  7243  07E9  0877               	movf	??___ftpack+1,w
  7244  07EA  04F2               	iorwf	___ftpack@arg+1,f
  7245  07EB  0878               	movf	??___ftpack+2,w
  7246  07EC  04F3               	iorwf	___ftpack@arg+2,f
  7247  07ED  0875               	movf	___ftpack@sign,w
  7248  07EE  1903               	btfsc	3,2
  7249  07EF  0008               	return
  7250  07F0  17F3               	bsf	___ftpack@arg+2,7
  7251  07F1  0008               	return
  7252  07F2                     __end_of___ftpack:	
  7253                           
  7254                           	psect	text28
  7255  0999                     __ptext28:	
  7256 ;; *************** function _PGMSelLong *****************
  7257 ;; Defined at:
  7258 ;;		line 103 in file "PGM.c"
  7259 ;; Parameters:    Size  Location     Type
  7260 ;;		None
  7261 ;; Auto vars:     Size  Location     Type
  7262 ;;		None
  7263 ;; Return value:  Size  Location     Type
  7264 ;;		None               void
  7265 ;; Registers used:
  7266 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7267 ;; Tracked objects:
  7268 ;;		On entry : 0/0
  7269 ;;		On exit  : 0/0
  7270 ;;		Unchanged: 0/0
  7271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7273 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7274 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7275 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7276 ;;Total ram usage:        1 bytes
  7277 ;; Hardware stack levels used:    1
  7278 ;; Hardware stack levels required when called:    4
  7279 ;; This function calls:
  7280 ;;		_LEDNormalFlash
  7281 ;;		_PGMWriteNvm
  7282 ;; This function is called by:
  7283 ;;		_SYSTask
  7284 ;; This function uses a non-reentrant model
  7285 ;;
  7286                           
  7287                           
  7288                           ;psect for function _PGMSelLong
  7289  0999                     _PGMSelLong:	
  7290                           
  7291                           ;PGM.c: 106: pgm_cfg.menu.val=0x00;
  7292                           
  7293                           ;incstack = 0
  7294                           ; Regs used in _PGMSelLong: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7295  0999  0021               	movlb	1	; select bank1
  7296  099A  01D3               	clrf	(_pgm_cfg^(0+128)+2)
  7297                           
  7298                           ;PGM.c: 108: pgm_cfg.sensId=TMR1L^TMR1H;
  7299  099B  0020               	movlb	0	; select bank0
  7300  099C  0816               	movf	22,w	;volatile
  7301  099D  0617               	xorwf	23,w	;volatile
  7302  099E  00FA               	movwf	??_PGMSelLong
  7303  099F  087A               	movf	??_PGMSelLong,w
  7304  09A0  0021               	movlb	1	; select bank1
  7305  09A1  00D4               	movwf	(_pgm_cfg^(0+128)+3)
  7306                           
  7307                           ;PGM.c: 109: if(pgm_cfg.sensId==0x00)
  7308  09A2  0854               	movf	(_pgm_cfg^(0+128)+3),w
  7309  09A3  1D03               	btfss	3,2
  7310  09A4  29A9               	goto	l4146
  7311                           
  7312                           ;PGM.c: 110: pgm_cfg.sensId++;
  7313  09A5  3001               	movlw	1
  7314  09A6  00FA               	movwf	??_PGMSelLong
  7315  09A7  087A               	movf	??_PGMSelLong,w
  7316  09A8  07D4               	addwf	(_pgm_cfg^(0+128)+3),f
  7317  09A9                     l4146:	
  7318                           
  7319                           ;PGM.c: 112: PGMWriteNvm();
  7320  09A9  3188  20D7  3189   	fcall	_PGMWriteNvm
  7321                           
  7322                           ;PGM.c: 114: LEDNormalFlash(3);
  7323  09AC  3003               	movlw	3
  7324  09AD  318A  221D         	fcall	_LEDNormalFlash
  7325                           
  7326                           ;PGM.c: 116: pgm_flg.resetDone=1;
  7327  09AF  14FC               	bsf	_pgm_flg,1
  7328  09B0  0008               	return
  7329  09B1                     __end_of_PGMSelLong:	
  7330                           
  7331                           	psect	text29
  7332  0B14                     __ptext29:	
  7333 ;; *************** function _DINTick *****************
  7334 ;; Defined at:
  7335 ;;		line 46 in file "DIN.c"
  7336 ;; Parameters:    Size  Location     Type
  7337 ;;		None
  7338 ;; Auto vars:     Size  Location     Type
  7339 ;;		None
  7340 ;; Return value:  Size  Location     Type
  7341 ;;		None               void
  7342 ;; Registers used:
  7343 ;;		wreg, status,2, status,0
  7344 ;; Tracked objects:
  7345 ;;		On entry : 0/0
  7346 ;;		On exit  : 0/0
  7347 ;;		Unchanged: 0/0
  7348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7350 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7351 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7352 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7353 ;;Total ram usage:        1 bytes
  7354 ;; Hardware stack levels used:    1
  7355 ;; Hardware stack levels required when called:    2
  7356 ;; This function calls:
  7357 ;;		Nothing
  7358 ;; This function is called by:
  7359 ;;		_SYSTask
  7360 ;; This function uses a non-reentrant model
  7361 ;;
  7362                           
  7363                           
  7364                           ;psect for function _DINTick
  7365  0B14                     _DINTick:	
  7366                           
  7367                           ;DIN.c: 50: if(u_flg_din.tmrDbncSel)
  7368                           
  7369                           ;incstack = 0
  7370                           ; Regs used in _DINTick: [wreg+status,2+status,0]
  7371  0B14  0021               	movlb	1	; select bank1
  7372  0B15  1C35               	btfss	_u_flg_din^(0+128),0
  7373  0B16  2B26               	goto	l300
  7374                           
  7375                           ;DIN.c: 51: {
  7376                           ;DIN.c: 52: tmrDbncSel++;
  7377  0B17  3001               	movlw	1
  7378  0B18  00F1               	movwf	??_DINTick
  7379  0B19  0871               	movf	??_DINTick,w
  7380  0B1A  07B2               	addwf	_tmrDbncSel^(0+128),f
  7381                           
  7382                           ;DIN.c: 53: if(tmrDbncSel>5)
  7383  0B1B  3006               	movlw	6
  7384  0B1C  0232               	subwf	_tmrDbncSel^(0+128),w
  7385  0B1D  1C03               	skipc
  7386  0B1E  2B26               	goto	l300
  7387                           
  7388                           ;DIN.c: 54: {
  7389                           ;DIN.c: 55: u_flg_din.tmrDbncSel=0;
  7390  0B1F  1035               	bcf	_u_flg_din^(0+128),0
  7391                           
  7392                           ;DIN.c: 56: tmrDbncSel=0;
  7393  0B20  01B2               	clrf	_tmrDbncSel^(0+128)
  7394                           
  7395                           ;DIN.c: 58: if(u_in_sta_currTask.sel)
  7396  0B21  1C39               	btfss	_u_in_sta_currTask^(0+128),0
  7397  0B22  2B25               	goto	l302
  7398                           
  7399                           ;DIN.c: 59: u_in_ev_down.sel=1;
  7400  0B23  1436               	bsf	_u_in_ev_down^(0+128),0
  7401  0B24  2B26               	goto	l300
  7402  0B25                     l302:	
  7403                           
  7404                           ;DIN.c: 60: else
  7405                           ;DIN.c: 61: u_in_ev_up.sel=1;
  7406  0B25  1438               	bsf	_u_in_ev_up^(0+128),0
  7407  0B26                     l300:	
  7408                           
  7409                           ;DIN.c: 62: }
  7410                           ;DIN.c: 63: }
  7411                           ;DIN.c: 66: if(u_flg_din.tmrLongSel)
  7412  0B26  1CB5               	btfss	_u_flg_din^(0+128),1
  7413  0B27  0008               	return
  7414                           
  7415                           ;DIN.c: 67: {
  7416                           ;DIN.c: 68: tmrLongSel++;
  7417  0B28  3001               	movlw	1
  7418  0B29  07AD               	addwf	_tmrLongSel^(0+128),f
  7419  0B2A  3000               	movlw	0
  7420  0B2B  3DAE               	addwfc	(_tmrLongSel+1)^(0+128),f
  7421                           
  7422                           ;DIN.c: 69: if(tmrLongSel>200)
  7423  0B2C  3000               	movlw	0
  7424  0B2D  022E               	subwf	(_tmrLongSel+1)^(0+128),w
  7425  0B2E  30C9               	movlw	201
  7426  0B2F  1903               	skipnz
  7427  0B30  022D               	subwf	_tmrLongSel^(0+128),w
  7428  0B31  1C03               	skipc
  7429  0B32  0008               	return
  7430                           
  7431                           ;DIN.c: 70: {
  7432                           ;DIN.c: 72: tmrLongSel=0;
  7433  0B33  01AD               	clrf	_tmrLongSel^(0+128)
  7434  0B34  01AE               	clrf	(_tmrLongSel+1)^(0+128)
  7435                           
  7436                           ;DIN.c: 74: u_in_ev_long.sel=1;
  7437  0B35  1437               	bsf	_u_in_ev_long^(0+128),0
  7438  0B36  0008               	return
  7439  0B37                     __end_of_DINTick:	
  7440                           
  7441                           	psect	text30
  7442  0B81                     __ptext30:	
  7443 ;; *************** function _SYSInit *****************
  7444 ;; Defined at:
  7445 ;;		line 18 in file "SYS.c"
  7446 ;; Parameters:    Size  Location     Type
  7447 ;;  state           1    wreg     unsigned char 
  7448 ;; Auto vars:     Size  Location     Type
  7449 ;;  state           1    2[COMMON] unsigned char 
  7450 ;; Return value:  Size  Location     Type
  7451 ;;		None               void
  7452 ;; Registers used:
  7453 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7454 ;; Tracked objects:
  7455 ;;		On entry : 0/0
  7456 ;;		On exit  : 0/0
  7457 ;;		Unchanged: 0/0
  7458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7460 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7461 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7462 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7463 ;;Total ram usage:        2 bytes
  7464 ;; Hardware stack levels used:    1
  7465 ;; Hardware stack levels required when called:    2
  7466 ;; This function calls:
  7467 ;;		Nothing
  7468 ;; This function is called by:
  7469 ;;		_main
  7470 ;; This function uses a non-reentrant model
  7471 ;;
  7472                           
  7473                           
  7474                           ;psect for function _SYSInit
  7475  0B81                     _SYSInit:	
  7476                           
  7477                           ;incstack = 0
  7478                           ; Regs used in _SYSInit: [wreg-fsr0h+status,2+status,0]
  7479                           ;SYSInit@state stored from wreg
  7480  0B81  00F2               	movwf	SYSInit@state
  7481                           
  7482                           ;SYS.c: 20: switch(state)
  7483  0B82  2B9E               	goto	l4364
  7484  0B83                     l4342:	
  7485                           ;SYS.c: 21: {
  7486                           ;SYS.c: 22: case 0:
  7487                           
  7488                           
  7489                           ;SYS.c: 24: OPTION_REG=0b00000110; OSCCON=0b01110011; WDTCON=0b00001001; IOCBP=0b0000000
      +                          0; IOCBN=0b00000000; TMR0=255-156; INTCON|=0b00100000; INTCON&=0b11111011; PIR1=0b000000
      +                          00; PIR2=0b00000000; PIE1=0b00000000; PIE2=0b00000000;
  7490  0B83  3006               	movlw	6
  7491  0B84  0021               	movlb	1	; select bank1
  7492  0B85  0095               	movwf	21	;volatile
  7493  0B86  3073               	movlw	115
  7494  0B87  0099               	movwf	25	;volatile
  7495  0B88  3009               	movlw	9
  7496  0B89  0097               	movwf	23	;volatile
  7497  0B8A  0027               	movlb	7	; select bank7
  7498  0B8B  0194               	clrf	20	;volatile
  7499  0B8C  0195               	clrf	21	;volatile
  7500  0B8D  3063               	movlw	99
  7501  0B8E  0020               	movlb	0	; select bank0
  7502  0B8F  0095               	movwf	21	;volatile
  7503  0B90  168B               	bsf	11,5	;volatile
  7504  0B91  30FB               	movlw	251
  7505  0B92  00F1               	movwf	??_SYSInit
  7506  0B93  0871               	movf	??_SYSInit,w
  7507  0B94  058B               	andwf	11,f	;volatile
  7508  0B95  0191               	clrf	17	;volatile
  7509  0B96  0192               	clrf	18	;volatile
  7510  0B97  0021               	movlb	1	; select bank1
  7511  0B98  0191               	clrf	17	;volatile
  7512  0B99  0192               	clrf	18	;volatile
  7513                           
  7514                           ;SYS.c: 25: break;
  7515  0B9A  0008               	return
  7516  0B9B                     l4360:	
  7517                           ;SYS.c: 26: case 1:
  7518                           
  7519                           
  7520                           ;SYS.c: 28: u_SYS_STA.VAL=0;
  7521  0B9B  0021               	movlb	1	; select bank1
  7522  0B9C  01B4               	clrf	_u_SYS_STA^(0+128)
  7523                           
  7524                           ;SYS.c: 33: }
  7525                           
  7526                           ;SYS.c: 29: break;
  7527  0B9D  0008               	return
  7528  0B9E                     l4364:	
  7529  0B9E  0872               	movf	SYSInit@state,w
  7530                           
  7531                           ; Switch size 1, requested type "space"
  7532                           ; Number of cases is 2, Range of values is 0 to 1
  7533                           ; switch strategies available:
  7534                           ; Name         Instructions Cycles
  7535                           ; simple_byte            7     4 (average)
  7536                           ; direct_byte           10     6 (fixed)
  7537                           ; jumptable            260     6 (fixed)
  7538                           ;	Chosen strategy is simple_byte
  7539  0B9F  3A00               	xorlw	0	; case 0
  7540  0BA0  1903               	skipnz
  7541  0BA1  2B83               	goto	l4342
  7542  0BA2  3A01               	xorlw	1	; case 1
  7543  0BA3  1903               	skipnz
  7544  0BA4  2B9B               	goto	l4360
  7545  0BA5  2BA6               	goto	l607
  7546  0BA6                     l607:	
  7547  0BA6  0008               	return
  7548  0BA7                     __end_of_SYSInit:	
  7549                           
  7550                           	psect	text31
  7551  0A3B                     __ptext31:	
  7552 ;; *************** function _SPIInit *****************
  7553 ;; Defined at:
  7554 ;;		line 8 in file "SPI.c"
  7555 ;; Parameters:    Size  Location     Type
  7556 ;;  state           1    wreg     unsigned char 
  7557 ;; Auto vars:     Size  Location     Type
  7558 ;;  state           1    2[COMMON] unsigned char 
  7559 ;; Return value:  Size  Location     Type
  7560 ;;		None               void
  7561 ;; Registers used:
  7562 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7563 ;; Tracked objects:
  7564 ;;		On entry : 0/0
  7565 ;;		On exit  : 0/0
  7566 ;;		Unchanged: 0/0
  7567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7569 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7570 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7571 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7572 ;;Total ram usage:        2 bytes
  7573 ;; Hardware stack levels used:    1
  7574 ;; Hardware stack levels required when called:    2
  7575 ;; This function calls:
  7576 ;;		Nothing
  7577 ;; This function is called by:
  7578 ;;		_main
  7579 ;; This function uses a non-reentrant model
  7580 ;;
  7581                           
  7582                           
  7583                           ;psect for function _SPIInit
  7584  0A3B                     _SPIInit:	
  7585                           
  7586                           ;incstack = 0
  7587                           ; Regs used in _SPIInit: [wreg-fsr0h+status,2+status,0]
  7588                           ;SPIInit@state stored from wreg
  7589  0A3B  00F2               	movwf	SPIInit@state
  7590                           
  7591                           ;SPI.c: 10: switch(state)
  7592  0A3C  2A4D               	goto	l4252
  7593  0A3D                     l60:	
  7594                           ;SPI.c: 11: {
  7595                           ;SPI.c: 12: case 0:
  7596                           
  7597                           
  7598                           ;SPI.c: 14: TRISC|=0b00010000; TRISC&=0b11010111; SSPCONbits.SSPEN=0; SSPBUF=0x00; SSPCO
      +                          N1=0b00000001; SSPCON2=0b00000000; SSPSTAT=0b01000000; SSPCONbits.SSPEN=1;
  7599  0A3D  0021               	movlb	1	; select bank1
  7600  0A3E  160E               	bsf	14,4	;volatile
  7601  0A3F  30D7               	movlw	215
  7602  0A40  00F1               	movwf	??_SPIInit
  7603  0A41  0871               	movf	??_SPIInit,w
  7604  0A42  058E               	andwf	14,f	;volatile
  7605  0A43  0024               	movlb	4	; select bank4
  7606  0A44  1295               	bcf	21,5	;volatile
  7607  0A45  0191               	clrf	17	;volatile
  7608  0A46  3001               	movlw	1
  7609  0A47  0095               	movwf	21	;volatile
  7610  0A48  0196               	clrf	22	;volatile
  7611  0A49  3040               	movlw	64
  7612  0A4A  0094               	movwf	20	;volatile
  7613  0A4B  1695               	bsf	21,5	;volatile
  7614                           
  7615                           ;SPI.c: 22: }
  7616                           
  7617                           ;SPI.c: 21: break;
  7618                           
  7619                           ;SPI.c: 19: case 2:
  7620                           
  7621                           ;SPI.c: 18: break;
  7622                           
  7623                           ;SPI.c: 16: case 1:
  7624                           
  7625                           ;SPI.c: 15: break;
  7626  0A4C  0008               	return
  7627  0A4D                     l4252:	
  7628  0A4D  0872               	movf	SPIInit@state,w
  7629                           
  7630                           ; Switch size 1, requested type "space"
  7631                           ; Number of cases is 3, Range of values is 0 to 2
  7632                           ; switch strategies available:
  7633                           ; Name         Instructions Cycles
  7634                           ; simple_byte           10     6 (average)
  7635                           ; direct_byte           12     6 (fixed)
  7636                           ; jumptable            260     6 (fixed)
  7637                           ;	Chosen strategy is simple_byte
  7638  0A4E  3A00               	xorlw	0	; case 0
  7639  0A4F  1903               	skipnz
  7640  0A50  2A3D               	goto	l60
  7641  0A51  3A01               	xorlw	1	; case 1
  7642  0A52  1903               	skipnz
  7643  0A53  2A58               	goto	l64
  7644  0A54  3A03               	xorlw	3	; case 2
  7645  0A55  1903               	skipnz
  7646  0A56  2A58               	goto	l64
  7647  0A57  2A58               	goto	l64
  7648  0A58                     l64:	
  7649  0A58  0008               	return
  7650  0A59                     __end_of_SPIInit:	
  7651                           
  7652                           	psect	text32
  7653  088F                     __ptext32:	
  7654 ;; *************** function _RTXTask *****************
  7655 ;; Defined at:
  7656 ;;		line 106 in file "RTX.c"
  7657 ;; Parameters:    Size  Location     Type
  7658 ;;		None
  7659 ;; Auto vars:     Size  Location     Type
  7660 ;;		None
  7661 ;; Return value:  Size  Location     Type
  7662 ;;		None               void
  7663 ;; Registers used:
  7664 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7665 ;; Tracked objects:
  7666 ;;		On entry : 0/0
  7667 ;;		On exit  : 0/0
  7668 ;;		Unchanged: 0/0
  7669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7671 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7672 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7673 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7674 ;;Total ram usage:        0 bytes
  7675 ;; Hardware stack levels used:    1
  7676 ;; Hardware stack levels required when called:    6
  7677 ;; This function calls:
  7678 ;;		_RTXReadPkt
  7679 ;; This function is called by:
  7680 ;;		_main
  7681 ;; This function uses a non-reentrant model
  7682 ;;
  7683                           
  7684                           
  7685                           ;psect for function _RTXTask
  7686  088F                     _RTXTask:	
  7687                           
  7688                           ;RTX.c: 109: if(!(PORTBbits.RB0))
  7689                           
  7690                           ;incstack = 0
  7691                           ; Regs used in _RTXTask: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7692  088F  0020               	movlb	0	; select bank0
  7693  0890  180D               	btfsc	13,0	;volatile
  7694  0891  0008               	return
  7695                           
  7696                           ;RTX.c: 110: RTXReadPkt();
  7697  0892  318D  2596         	fcall	_RTXReadPkt
  7698  0894  0008               	return
  7699  0895                     __end_of_RTXTask:	
  7700                           
  7701                           	psect	text33
  7702  0D96                     __ptext33:	
  7703 ;; *************** function _RTXReadPkt *****************
  7704 ;; Defined at:
  7705 ;;		line 158 in file "RTX.c"
  7706 ;; Parameters:    Size  Location     Type
  7707 ;;		None
  7708 ;; Auto vars:     Size  Location     Type
  7709 ;;  numRxByte       1   70[BANK0 ] unsigned char 
  7710 ;; Return value:  Size  Location     Type
  7711 ;;		None               void
  7712 ;; Registers used:
  7713 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7714 ;; Tracked objects:
  7715 ;;		On entry : 0/0
  7716 ;;		On exit  : 0/0
  7717 ;;		Unchanged: 0/0
  7718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7720 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7721 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7722 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7723 ;;Total ram usage:        2 bytes
  7724 ;; Hardware stack levels used:    1
  7725 ;; Hardware stack levels required when called:    5
  7726 ;; This function calls:
  7727 ;;		_CC1Read
  7728 ;;		_CC1Strobe
  7729 ;;		_LEDNormalFlash
  7730 ;;		_PGMPgmOff
  7731 ;;		_PGMWriteNvm
  7732 ;;		_RTXRcvPkt
  7733 ;; This function is called by:
  7734 ;;		_RTXTask
  7735 ;; This function uses a non-reentrant model
  7736 ;;
  7737                           
  7738                           
  7739                           ;psect for function _RTXReadPkt
  7740  0D96                     _RTXReadPkt:	
  7741                           
  7742                           ;RTX.c: 160: unsigned char numRxByte;
  7743                           ;RTX.c: 163: CC1Read(0x3B,(&(numRxByte)),1);
  7744                           
  7745                           ;incstack = 0
  7746                           ; Regs used in _RTXReadPkt: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7747  0D96  3066               	movlw	(low (RTXReadPkt@numRxByte| 0))& (0+255)
  7748  0D97  0020               	movlb	0	; select bank0
  7749  0D98  00E5               	movwf	??_RTXReadPkt
  7750  0D99  0865               	movf	??_RTXReadPkt,w
  7751  0D9A  00F7               	movwf	CC1Read@dst
  7752  0D9B  01F8               	clrf	CC1Read@len
  7753  0D9C  0AF8               	incf	CC1Read@len,f
  7754  0D9D  303B               	movlw	59
  7755  0D9E  3189  21E4  318D   	fcall	_CC1Read
  7756                           
  7757                           ;RTX.c: 164: while(numRxByte>=0x0B)
  7758  0DA1  300B               	movlw	11
  7759  0DA2  0020               	movlb	0	; select bank0
  7760  0DA3  0266               	subwf	RTXReadPkt@numRxByte,w
  7761  0DA4  1C03               	btfss	3,0
  7762  0DA5  0008               	return
  7763  0DA6  0064               	clrwdt	;# 
  7764                           
  7765                           ;RTX.c: 168: RTXRcvPkt(pktRx,0x0B);
  7766  0DA7  300B               	movlw	11
  7767  0DA8  0020               	movlb	0	; select bank0
  7768  0DA9  00E5               	movwf	??_RTXReadPkt
  7769  0DAA  0865               	movf	??_RTXReadPkt,w
  7770  0DAB  00A0               	movwf	RTXRcvPkt@len
  7771  0DAC  30BB               	movlw	(low (_pktRx| 0))& (0+255)
  7772  0DAD  3187  27F2  318D   	fcall	_RTXRcvPkt
  7773                           
  7774                           ;RTX.c: 170: if(pgm_flg.pgmonoff)
  7775  0DB0  1C7C               	btfss	_pgm_flg,0
  7776  0DB1  2DD0               	goto	l4186
  7777                           
  7778                           ;RTX.c: 171: {
  7779                           ;RTX.c: 173: if(pktRx[OP]==rPGM)
  7780  0DB2  3081               	movlw	129
  7781  0DB3  0021               	movlb	1	; select bank1
  7782  0DB4  063F               	xorwf	(_pktRx^(0+128)+4),w
  7783  0DB5  1D03               	btfss	3,2
  7784  0DB6  2D96               	goto	_RTXReadPkt
  7785                           
  7786                           ;RTX.c: 174: {
  7787                           ;RTX.c: 175: if(pktRx[ID_DEST]==pgm_cfg.sensId)
  7788  0DB7  0854               	movf	(_pgm_cfg^(0+128)+3),w
  7789  0DB8  063B               	xorwf	_pktRx^(0+128),w
  7790  0DB9  1D03               	skipz
  7791  0DBA  2D96               	goto	_RTXReadPkt
  7792                           
  7793                           ;RTX.c: 176: {
  7794                           ;RTX.c: 178: pgm_cfg.baseId=pktRx[ID_SOURCE];
  7795  0DBB  083D               	movf	(_pktRx^(0+128)+2),w
  7796  0DBC  0020               	movlb	0	; select bank0
  7797  0DBD  00E5               	movwf	??_RTXReadPkt
  7798  0DBE  0865               	movf	??_RTXReadPkt,w
  7799  0DBF  0021               	movlb	1	; select bank1
  7800  0DC0  00D5               	movwf	(_pgm_cfg^(0+128)+4)
  7801                           
  7802                           ;RTX.c: 180: pgm_cfg.menu.baseIdProg=1;
  7803  0DC1  1453               	bsf	(_pgm_cfg^(0+128)+2),0
  7804                           
  7805                           ;RTX.c: 181: PGMWriteNvm();
  7806  0DC2  3188  20D7  318D   	fcall	_PGMWriteNvm
  7807                           
  7808                           ;RTX.c: 183: PGMPgmOff();
  7809  0DC5  3188  2085  318D   	fcall	_PGMPgmOff
  7810                           
  7811                           ;RTX.c: 185: tmrRcvPkt=0;
  7812  0DC8  0021               	movlb	1	; select bank1
  7813  0DC9  01B3               	clrf	_tmrRcvPkt^(0+128)
  7814                           
  7815                           ;RTX.c: 187: LEDNormalFlash(3);
  7816  0DCA  3003               	movlw	3
  7817  0DCB  318A  221D  318D   	fcall	_LEDNormalFlash
  7818                           
  7819                           ;RTX.c: 189: flg_slp.goSleep=1;
  7820  0DCE  0021               	movlb	1	; select bank1
  7821  0DCF  2DE3               	goto	l4196
  7822  0DD0                     l4186:	
  7823                           ;RTX.c: 190: }
  7824                           ;RTX.c: 191: }
  7825                           ;RTX.c: 192: }
  7826                           
  7827                           
  7828                           ;RTX.c: 193: else
  7829                           ;RTX.c: 194: {
  7830                           ;RTX.c: 196: if(pktRx[OP]==rDAT)
  7831  0DD0  3080               	movlw	128
  7832  0DD1  0021               	movlb	1	; select bank1
  7833  0DD2  063F               	xorwf	(_pktRx^(0+128)+4),w
  7834  0DD3  1D03               	btfss	3,2
  7835  0DD4  2D96               	goto	_RTXReadPkt
  7836                           
  7837                           ;RTX.c: 197: {
  7838                           ;RTX.c: 198: if((pktRx[ID_DEST]==pgm_cfg.sensId) && (pktRx[ID_SOURCE]==pgm_cfg.baseId))
  7839  0DD5  0854               	movf	(_pgm_cfg^(0+128)+3),w
  7840  0DD6  063B               	xorwf	_pktRx^(0+128),w
  7841  0DD7  1D03               	skipz
  7842  0DD8  2D96               	goto	_RTXReadPkt
  7843  0DD9  0855               	movf	(_pgm_cfg^(0+128)+4),w
  7844  0DDA  063D               	xorwf	(_pktRx^(0+128)+2),w
  7845  0DDB  1D03               	skipz
  7846  0DDC  2D96               	goto	_RTXReadPkt
  7847                           
  7848                           ;RTX.c: 199: {
  7849                           ;RTX.c: 201: CC1Strobe(SIDLE);
  7850  0DDD  3036               	movlw	54
  7851  0DDE  3189  2144  318D   	fcall	_CC1Strobe
  7852                           
  7853                           ;RTX.c: 203: tmrRcvPkt=0;
  7854  0DE1  0021               	movlb	1	; select bank1
  7855  0DE2  01B3               	clrf	_tmrRcvPkt^(0+128)
  7856  0DE3                     l4196:	
  7857                           
  7858                           ;RTX.c: 205: flg_slp.goSleep=1;
  7859  0DE3  1430               	bsf	_flg_slp^(0+128),0
  7860  0DE4  2D96               	goto	_RTXReadPkt
  7861  0DE5                     __end_of_RTXReadPkt:	
  7862                           ;RTX.c: 206: }
  7863                           ;RTX.c: 207: }
  7864                           ;RTX.c: 208: }
  7865                           ;RTX.c: 210: CC1Read(0x3B,(&(numRxByte)),1);
  7866                           
  7867                           
  7868                           	psect	text34
  7869  07F2                     __ptext34:	
  7870 ;; *************** function _RTXRcvPkt *****************
  7871 ;; Defined at:
  7872 ;;		line 152 in file "RTX.c"
  7873 ;; Parameters:    Size  Location     Type
  7874 ;;  dst             1    wreg     PTR unsigned char 
  7875 ;;		 -> pktRx(11), 
  7876 ;;  len             1    0[BANK0 ] unsigned char 
  7877 ;; Auto vars:     Size  Location     Type
  7878 ;;  dst             1    3[BANK0 ] PTR unsigned char 
  7879 ;;		 -> pktRx(11), 
  7880 ;; Return value:  Size  Location     Type
  7881 ;;		None               void
  7882 ;; Registers used:
  7883 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7884 ;; Tracked objects:
  7885 ;;		On entry : 0/0
  7886 ;;		On exit  : 0/0
  7887 ;;		Unchanged: 0/0
  7888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7889 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7890 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7891 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7892 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7893 ;;Total ram usage:        4 bytes
  7894 ;; Hardware stack levels used:    1
  7895 ;; Hardware stack levels required when called:    4
  7896 ;; This function calls:
  7897 ;;		_CC1Read
  7898 ;; This function is called by:
  7899 ;;		_RTXReadPkt
  7900 ;; This function uses a non-reentrant model
  7901 ;;
  7902                           
  7903                           
  7904                           ;psect for function _RTXRcvPkt
  7905  07F2                     _RTXRcvPkt:	
  7906                           
  7907                           ;incstack = 0
  7908                           ; Regs used in _RTXRcvPkt: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7909                           ;RTXRcvPkt@dst stored from wreg
  7910  07F2  0020               	movlb	0	; select bank0
  7911  07F3  00A3               	movwf	RTXRcvPkt@dst
  7912                           
  7913                           ;RTX.c: 155: CC1Read(0x3F,dst,len);
  7914  07F4  0823               	movf	RTXRcvPkt@dst,w
  7915  07F5  00A1               	movwf	??_RTXRcvPkt
  7916  07F6  0821               	movf	??_RTXRcvPkt,w
  7917  07F7  00F7               	movwf	CC1Read@dst
  7918  07F8  0820               	movf	RTXRcvPkt@len,w
  7919  07F9  00A2               	movwf	??_RTXRcvPkt+1
  7920  07FA  0822               	movf	??_RTXRcvPkt+1,w
  7921  07FB  00F8               	movwf	CC1Read@len
  7922  07FC  303F               	movlw	63
  7923  07FD  3189  21E4         	fcall	_CC1Read
  7924  07FF  0008               	return
  7925  0800                     __end_of_RTXRcvPkt:	
  7926                           
  7927                           	psect	text35
  7928  09E4                     __ptext35:	
  7929 ;; *************** function _CC1Read *****************
  7930 ;; Defined at:
  7931 ;;		line 116 in file "CC1.c"
  7932 ;; Parameters:    Size  Location     Type
  7933 ;;  addr            1    wreg     unsigned char 
  7934 ;;  dst             1    7[COMMON] PTR unsigned char 
  7935 ;;		 -> pktRx(11), RTXReadPkt@numRxByte(1), RTXSndPkt@numTxByte(1), RTXSndPkt@numRxByte(1), 
  7936 ;;		 -> RTXSndPkt@sta(1), 
  7937 ;;  len             1    8[COMMON] unsigned char 
  7938 ;; Auto vars:     Size  Location     Type
  7939 ;;  addr            1   10[COMMON] unsigned char 
  7940 ;;  cc1Addr         1   11[COMMON] unsigned char 
  7941 ;; Return value:  Size  Location     Type
  7942 ;;		None               void
  7943 ;; Registers used:
  7944 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7945 ;; Tracked objects:
  7946 ;;		On entry : 0/0
  7947 ;;		On exit  : 0/0
  7948 ;;		Unchanged: 0/0
  7949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7950 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7951 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7952 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7953 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7954 ;;Total ram usage:        5 bytes
  7955 ;; Hardware stack levels used:    1
  7956 ;; Hardware stack levels required when called:    3
  7957 ;; This function calls:
  7958 ;;		_SPIRead
  7959 ;;		_SPIWrite
  7960 ;; This function is called by:
  7961 ;;		_RTXSndPkt
  7962 ;;		_RTXRcvPkt
  7963 ;;		_RTXReadPkt
  7964 ;; This function uses a non-reentrant model
  7965 ;;
  7966                           
  7967                           
  7968                           ;psect for function _CC1Read
  7969  09E4                     _CC1Read:	
  7970                           
  7971                           ;incstack = 0
  7972                           ; Regs used in _CC1Read: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7973                           ;CC1Read@addr stored from wreg
  7974  09E4  00FA               	movwf	CC1Read@addr
  7975                           
  7976                           ;CC1.c: 118: unsigned char cc1Addr;
  7977                           ;CC1.c: 121: LATAbits.LATA5=0;
  7978  09E5  0022               	movlb	2	; select bank2
  7979  09E6  128C               	bcf	12,5	;volatile
  7980                           
  7981                           ;CC1.c: 124: cc1Addr=((addr&0b00111111)|0b11000000);
  7982  09E7  087A               	movf	CC1Read@addr,w
  7983  09E8  393F               	andlw	63
  7984  09E9  38C0               	iorlw	192
  7985  09EA  00F9               	movwf	??_CC1Read
  7986  09EB  0879               	movf	??_CC1Read,w
  7987  09EC  00FB               	movwf	CC1Read@cc1Addr
  7988                           
  7989                           ;CC1.c: 125: SPIWrite((&(cc1Addr)),1);
  7990  09ED  307B               	movlw	low CC1Read@cc1Addr
  7991  09EE  00F1               	movwf	SPIWrite@srcPtr
  7992  09EF  3000               	movlw	high CC1Read@cc1Addr
  7993  09F0  00F2               	movwf	SPIWrite@srcPtr+1
  7994  09F1  01F3               	clrf	SPIWrite@len
  7995  09F2  0AF3               	incf	SPIWrite@len,f
  7996  09F3  318A  2200  3189   	fcall	_SPIWrite
  7997                           
  7998                           ;CC1.c: 128: SPIRead(dst,len);
  7999  09F6  0878               	movf	CC1Read@len,w
  8000  09F7  00F9               	movwf	??_CC1Read
  8001  09F8  0879               	movf	??_CC1Read,w
  8002  09F9  00F1               	movwf	SPIRead@len
  8003  09FA  0877               	movf	CC1Read@dst,w
  8004  09FB  318A  22D3         	fcall	_SPIRead
  8005                           
  8006                           ;CC1.c: 131: LATAbits.LATA5=1;
  8007  09FD  0022               	movlb	2	; select bank2
  8008  09FE  168C               	bsf	12,5	;volatile
  8009  09FF  0008               	return
  8010  0A00                     __end_of_CC1Read:	
  8011                           
  8012                           	psect	text36
  8013  0AD3                     __ptext36:	
  8014 ;; *************** function _SPIRead *****************
  8015 ;; Defined at:
  8016 ;;		line 25 in file "SPI.c"
  8017 ;; Parameters:    Size  Location     Type
  8018 ;;  dstPtr          1    wreg     PTR unsigned char 
  8019 ;;		 -> pktRx(11), RTXReadPkt@numRxByte(1), RTXSndPkt@numTxByte(1), RTXSndPkt@numRxByte(1), 
  8020 ;;		 -> RTXSndPkt@sta(1), 
  8021 ;;  len             1    1[COMMON] unsigned char 
  8022 ;; Auto vars:     Size  Location     Type
  8023 ;;  dstPtr          1    4[COMMON] PTR unsigned char 
  8024 ;;		 -> pktRx(11), RTXReadPkt@numRxByte(1), RTXSndPkt@numTxByte(1), RTXSndPkt@numRxByte(1), 
  8025 ;;		 -> RTXSndPkt@sta(1), 
  8026 ;;  i               1    5[COMMON] unsigned char 
  8027 ;; Return value:  Size  Location     Type
  8028 ;;		None               void
  8029 ;; Registers used:
  8030 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8031 ;; Tracked objects:
  8032 ;;		On entry : 0/0
  8033 ;;		On exit  : 0/0
  8034 ;;		Unchanged: 0/0
  8035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8036 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8037 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8038 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8039 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8040 ;;Total ram usage:        5 bytes
  8041 ;; Hardware stack levels used:    1
  8042 ;; Hardware stack levels required when called:    2
  8043 ;; This function calls:
  8044 ;;		Nothing
  8045 ;; This function is called by:
  8046 ;;		_CC1Read
  8047 ;; This function uses a non-reentrant model
  8048 ;;
  8049                           
  8050                           
  8051                           ;psect for function _SPIRead
  8052  0AD3                     _SPIRead:	
  8053                           
  8054                           ;incstack = 0
  8055                           ; Regs used in _SPIRead: [wreg+fsr1l+fsr1h+status,2+status,0]
  8056                           ;SPIRead@dstPtr stored from wreg
  8057  0AD3  00F4               	movwf	SPIRead@dstPtr
  8058                           
  8059                           ;SPI.c: 27: unsigned char i;
  8060                           ;SPI.c: 29: for(i=0;i<len;i++)
  8061  0AD4  01F5               	clrf	SPIRead@i
  8062  0AD5                     l3406:	
  8063  0AD5  0871               	movf	SPIRead@len,w
  8064  0AD6  0275               	subwf	SPIRead@i,w
  8065  0AD7  1803               	btfsc	3,0
  8066  0AD8  0008               	return
  8067                           
  8068                           ;SPI.c: 30: {
  8069                           ;SPI.c: 31: PIR1bits.SSPIF=0;
  8070  0AD9  0020               	movlb	0	; select bank0
  8071  0ADA  1191               	bcf	17,3	;volatile
  8072                           
  8073                           ;SPI.c: 32: SSPBUF=0xFF;
  8074  0ADB  30FF               	movlw	255
  8075  0ADC  0024               	movlb	4	; select bank4
  8076  0ADD  0091               	movwf	17	;volatile
  8077  0ADE                     l69:	
  8078                           ;SPI.c: 33: while(!(PIR1bits.SSPIF))
  8079                           
  8080  0ADE  0020               	movlb	0	; select bank0
  8081  0ADF  1991               	btfsc	17,3	;volatile
  8082  0AE0  2AE3               	goto	l3402
  8083                           
  8084                           ;SPI.c: 34: __nop();
  8085  0AE1  0000               	nop
  8086  0AE2  2ADE               	goto	l69
  8087  0AE3                     l3402:	
  8088                           
  8089                           ;SPI.c: 35: (*(dstPtr+i))=SSPBUF;
  8090  0AE3  0024               	movlb	4	; select bank4
  8091  0AE4  0811               	movf	17,w	;volatile
  8092  0AE5  00F2               	movwf	??_SPIRead
  8093  0AE6  0875               	movf	SPIRead@i,w
  8094  0AE7  0774               	addwf	SPIRead@dstPtr,w
  8095  0AE8  00F3               	movwf	??_SPIRead+1
  8096  0AE9  0873               	movf	??_SPIRead+1,w
  8097  0AEA  0086               	movwf	6
  8098  0AEB  0187               	clrf	7
  8099  0AEC  0872               	movf	??_SPIRead,w
  8100  0AED  0081               	movwf	1
  8101  0AEE  3001               	movlw	1
  8102  0AEF  00F2               	movwf	??_SPIRead
  8103  0AF0  0872               	movf	??_SPIRead,w
  8104  0AF1  07F5               	addwf	SPIRead@i,f
  8105  0AF2  2AD5               	goto	l3406
  8106  0AF3                     __end_of_SPIRead:	
  8107                           
  8108                           	psect	text37
  8109  0885                     __ptext37:	
  8110 ;; *************** function _PGMPgmOff *****************
  8111 ;; Defined at:
  8112 ;;		line 71 in file "PGM.c"
  8113 ;; Parameters:    Size  Location     Type
  8114 ;;		None
  8115 ;; Auto vars:     Size  Location     Type
  8116 ;;		None
  8117 ;; Return value:  Size  Location     Type
  8118 ;;		None               void
  8119 ;; Registers used:
  8120 ;;		None
  8121 ;; Tracked objects:
  8122 ;;		On entry : 0/0
  8123 ;;		On exit  : 0/0
  8124 ;;		Unchanged: 0/0
  8125 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8126 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8127 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8128 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8129 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8130 ;;Total ram usage:        0 bytes
  8131 ;; Hardware stack levels used:    1
  8132 ;; Hardware stack levels required when called:    2
  8133 ;; This function calls:
  8134 ;;		Nothing
  8135 ;; This function is called by:
  8136 ;;		_RTXReadPkt
  8137 ;;		_RTXSendPgm
  8138 ;;		_SYSTask
  8139 ;; This function uses a non-reentrant model
  8140 ;;
  8141                           
  8142                           
  8143                           ;psect for function _PGMPgmOff
  8144  0885                     _PGMPgmOff:	
  8145                           
  8146                           ;PGM.c: 74: LATCbits.LATC7=1;
  8147                           
  8148                           ;incstack = 0
  8149                           ; Regs used in _PGMPgmOff: []
  8150  0885  0022               	movlb	2	; select bank2
  8151  0886  178E               	bsf	14,7	;volatile
  8152                           
  8153                           ;PGM.c: 76: pgm_flg.pgmonoff=0;
  8154  0887  107C               	bcf	_pgm_flg,0
  8155  0888  0008               	return
  8156  0889                     __end_of_PGMPgmOff:	
  8157                           
  8158                           	psect	text38
  8159  0A1D                     __ptext38:	
  8160 ;; *************** function _LEDNormalFlash *****************
  8161 ;; Defined at:
  8162 ;;		line 24 in file "LED.c"
  8163 ;; Parameters:    Size  Location     Type
  8164 ;;  num             1    wreg     unsigned char 
  8165 ;; Auto vars:     Size  Location     Type
  8166 ;;  num             1    8[COMMON] unsigned char 
  8167 ;;  i               1    9[COMMON] unsigned char 
  8168 ;; Return value:  Size  Location     Type
  8169 ;;		None               void
  8170 ;; Registers used:
  8171 ;;		wreg, status,2, status,0, pclath, cstack
  8172 ;; Tracked objects:
  8173 ;;		On entry : 0/0
  8174 ;;		On exit  : 0/0
  8175 ;;		Unchanged: 0/0
  8176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8178 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8179 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8180 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8181 ;;Total ram usage:        3 bytes
  8182 ;; Hardware stack levels used:    1
  8183 ;; Hardware stack levels required when called:    3
  8184 ;; This function calls:
  8185 ;;		_DLYDelay_ms
  8186 ;; This function is called by:
  8187 ;;		_PGMSelLong
  8188 ;;		_RTXReadPkt
  8189 ;; This function uses a non-reentrant model
  8190 ;;
  8191                           
  8192                           
  8193                           ;psect for function _LEDNormalFlash
  8194  0A1D                     _LEDNormalFlash:	
  8195                           
  8196                           ;incstack = 0
  8197                           ; Regs used in _LEDNormalFlash: [wreg+status,2+status,0+pclath+cstack]
  8198                           ;LEDNormalFlash@num stored from wreg
  8199  0A1D  00F8               	movwf	LEDNormalFlash@num
  8200                           
  8201                           ;LED.c: 26: unsigned char i;
  8202                           ;LED.c: 28: for(i=0;i<num;i++)
  8203  0A1E  01F9               	clrf	LEDNormalFlash@i
  8204  0A1F                     l4046:	
  8205  0A1F  0878               	movf	LEDNormalFlash@num,w
  8206  0A20  0279               	subwf	LEDNormalFlash@i,w
  8207  0A21  1803               	btfsc	3,0
  8208  0A22  0008               	return
  8209  0A23  0064               	clrwdt	;# 
  8210                           
  8211                           ;LED.c: 31: LATCbits.LATC7=0;
  8212  0A24  0022               	movlb	2	; select bank2
  8213  0A25  138E               	bcf	14,7	;volatile
  8214                           
  8215                           ;LED.c: 32: DLYDelay_ms(200);
  8216  0A26  30C8               	movlw	200
  8217  0A27  00F1               	movwf	DLYDelay_ms@val
  8218  0A28  3000               	movlw	0
  8219  0A29  00F2               	movwf	DLYDelay_ms@val+1
  8220  0A2A  3189  21B1  318A   	fcall	_DLYDelay_ms
  8221                           
  8222                           ;LED.c: 33: LATCbits.LATC7=1;
  8223  0A2D  0022               	movlb	2	; select bank2
  8224  0A2E  178E               	bsf	14,7	;volatile
  8225                           
  8226                           ;LED.c: 34: DLYDelay_ms(200);
  8227  0A2F  30C8               	movlw	200
  8228  0A30  00F1               	movwf	DLYDelay_ms@val
  8229  0A31  3000               	movlw	0
  8230  0A32  00F2               	movwf	DLYDelay_ms@val+1
  8231  0A33  3189  21B1  318A   	fcall	_DLYDelay_ms
  8232  0A36  3001               	movlw	1
  8233  0A37  00F7               	movwf	??_LEDNormalFlash
  8234  0A38  0877               	movf	??_LEDNormalFlash,w
  8235  0A39  07F9               	addwf	LEDNormalFlash@i,f
  8236  0A3A  2A1F               	goto	l4046
  8237  0A3B                     __end_of_LEDNormalFlash:	
  8238                           
  8239                           	psect	text39
  8240  09B1                     __ptext39:	
  8241 ;; *************** function _DLYDelay_ms *****************
  8242 ;; Defined at:
  8243 ;;		line 17 in file "DLY.c"
  8244 ;; Parameters:    Size  Location     Type
  8245 ;;  val             2    1[COMMON] unsigned short 
  8246 ;; Auto vars:     Size  Location     Type
  8247 ;;  i               2    5[COMMON] unsigned short 
  8248 ;; Return value:  Size  Location     Type
  8249 ;;		None               void
  8250 ;; Registers used:
  8251 ;;		wreg, status,2
  8252 ;; Tracked objects:
  8253 ;;		On entry : 0/0
  8254 ;;		On exit  : 0/0
  8255 ;;		Unchanged: 0/0
  8256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8257 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8258 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8259 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8260 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8261 ;;Total ram usage:        6 bytes
  8262 ;; Hardware stack levels used:    1
  8263 ;; Hardware stack levels required when called:    2
  8264 ;; This function calls:
  8265 ;;		Nothing
  8266 ;; This function is called by:
  8267 ;;		_ADCConv
  8268 ;;		_CC1Init
  8269 ;;		_LEDNormalFlash
  8270 ;;		_LEDFastFlash
  8271 ;;		_RTXAwake
  8272 ;;		_RTXStartSendData
  8273 ;;		_RTXStartSendPgm
  8274 ;;		_LEDVFastFlash
  8275 ;; This function uses a non-reentrant model
  8276 ;;
  8277                           
  8278                           
  8279                           ;psect for function _DLYDelay_ms
  8280  09B1                     _DLYDelay_ms:	
  8281                           
  8282                           ;DLY.c: 19: unsigned short i;
  8283                           ;DLY.c: 21: for(i=0;i<val;i++)
  8284                           
  8285                           ;incstack = 0
  8286                           ; Regs used in _DLYDelay_ms: [wreg+status,2]
  8287  09B1  01F5               	clrf	DLYDelay_ms@i
  8288  09B2  01F6               	clrf	DLYDelay_ms@i+1
  8289  09B3                     l154:	
  8290  09B3  0872               	movf	DLYDelay_ms@val+1,w
  8291  09B4  0276               	subwf	DLYDelay_ms@i+1,w
  8292  09B5  1D03               	skipz
  8293  09B6  29B9               	goto	u3735
  8294  09B7  0871               	movf	DLYDelay_ms@val,w
  8295  09B8  0275               	subwf	DLYDelay_ms@i,w
  8296  09B9                     u3735:	
  8297  09B9  1803               	btfsc	3,0
  8298  09BA  0008               	return
  8299  09BB  0064               	clrwdt	;# 
  8300                           
  8301                           ;DLY.c: 24: _delay((unsigned long)((1)*(8000000/4000.0)));
  8302  09BC  3003               	movlw	3
  8303  09BD  00F4               	movwf	??_DLYDelay_ms+1
  8304  09BE  3097               	movlw	151
  8305  09BF  00F3               	movwf	??_DLYDelay_ms
  8306  09C0                     u5007:	
  8307  09C0  0BF3               	decfsz	??_DLYDelay_ms,f
  8308  09C1  29C0               	goto	u5007
  8309  09C2  0BF4               	decfsz	??_DLYDelay_ms+1,f
  8310  09C3  29C0               	goto	u5007
  8311  09C4  3200               	nop2
  8312  09C5  3001               	movlw	1
  8313  09C6  07F5               	addwf	DLYDelay_ms@i,f
  8314  09C7  3000               	movlw	0
  8315  09C8  3DF6               	addwfc	DLYDelay_ms@i+1,f
  8316  09C9  29B3               	goto	l154
  8317  09CA                     __end_of_DLYDelay_ms:	
  8318                           
  8319                           	psect	text40
  8320  0944                     __ptext40:	
  8321 ;; *************** function _CC1Strobe *****************
  8322 ;; Defined at:
  8323 ;;		line 101 in file "CC1.c"
  8324 ;; Parameters:    Size  Location     Type
  8325 ;;  e_stb           1    wreg     enum E1836
  8326 ;; Auto vars:     Size  Location     Type
  8327 ;;  e_stb           1    8[COMMON] enum E1836
  8328 ;;  cc1Stb          1    9[COMMON] unsigned char 
  8329 ;; Return value:  Size  Location     Type
  8330 ;;		None               void
  8331 ;; Registers used:
  8332 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8333 ;; Tracked objects:
  8334 ;;		On entry : 0/0
  8335 ;;		On exit  : 0/0
  8336 ;;		Unchanged: 0/0
  8337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8339 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8340 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8341 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8342 ;;Total ram usage:        3 bytes
  8343 ;; Hardware stack levels used:    1
  8344 ;; Hardware stack levels required when called:    3
  8345 ;; This function calls:
  8346 ;;		_SPIWrite
  8347 ;; This function is called by:
  8348 ;;		_CC1Init
  8349 ;;		_RTXInit
  8350 ;;		_RTXSndPkt
  8351 ;;		_RTXReadPkt
  8352 ;;		_CC1Sleep
  8353 ;; This function uses a non-reentrant model
  8354 ;;
  8355                           
  8356                           
  8357                           ;psect for function _CC1Strobe
  8358  0944                     _CC1Strobe:	
  8359                           
  8360                           ;incstack = 0
  8361                           ; Regs used in _CC1Strobe: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8362                           ;CC1Strobe@e_stb stored from wreg
  8363  0944  00F8               	movwf	CC1Strobe@e_stb
  8364                           
  8365                           ;CC1.c: 103: unsigned char cc1Stb;
  8366                           ;CC1.c: 106: LATAbits.LATA5=0;
  8367  0945  0022               	movlb	2	; select bank2
  8368  0946  128C               	bcf	12,5	;volatile
  8369                           
  8370                           ;CC1.c: 109: cc1Stb=((e_stb&0b00111111)|0b10000000);
  8371  0947  0878               	movf	CC1Strobe@e_stb,w
  8372  0948  393F               	andlw	63
  8373  0949  3880               	iorlw	128
  8374  094A  00F7               	movwf	??_CC1Strobe
  8375  094B  0877               	movf	??_CC1Strobe,w
  8376  094C  00F9               	movwf	CC1Strobe@cc1Stb
  8377                           
  8378                           ;CC1.c: 110: SPIWrite((&(cc1Stb)),1);
  8379  094D  3079               	movlw	low CC1Strobe@cc1Stb
  8380  094E  00F1               	movwf	SPIWrite@srcPtr
  8381  094F  3000               	movlw	high CC1Strobe@cc1Stb
  8382  0950  00F2               	movwf	SPIWrite@srcPtr+1
  8383  0951  01F3               	clrf	SPIWrite@len
  8384  0952  0AF3               	incf	SPIWrite@len,f
  8385  0953  318A  2200         	fcall	_SPIWrite
  8386                           
  8387                           ;CC1.c: 113: LATAbits.LATA5=1;
  8388  0955  0022               	movlb	2	; select bank2
  8389  0956  168C               	bsf	12,5	;volatile
  8390  0957  0008               	return
  8391  0958                     __end_of_CC1Strobe:	
  8392                           
  8393                           	psect	text41
  8394  0A00                     __ptext41:	
  8395 ;; *************** function _SPIWrite *****************
  8396 ;; Defined at:
  8397 ;;		line 39 in file "SPI.c"
  8398 ;; Parameters:    Size  Location     Type
  8399 ;;  srcPtr          2    1[COMMON] PTR unsigned char 
  8400 ;;		 -> pktTx(11), CC1Write@cc1Addr(1), CC1Read@cc1Addr(1), CC1Strobe@cc1Stb(1), 
  8401 ;;		 -> cc1PaTable(8), cc1InitVal(47), 
  8402 ;;  len             1    3[COMMON] unsigned char 
  8403 ;; Auto vars:     Size  Location     Type
  8404 ;;  i               1    6[COMMON] unsigned char 
  8405 ;; Return value:  Size  Location     Type
  8406 ;;		None               void
  8407 ;; Registers used:
  8408 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8409 ;; Tracked objects:
  8410 ;;		On entry : 0/0
  8411 ;;		On exit  : 0/0
  8412 ;;		Unchanged: 0/0
  8413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8414 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8415 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8416 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8417 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8418 ;;Total ram usage:        6 bytes
  8419 ;; Hardware stack levels used:    1
  8420 ;; Hardware stack levels required when called:    2
  8421 ;; This function calls:
  8422 ;;		Nothing
  8423 ;; This function is called by:
  8424 ;;		_CC1Strobe
  8425 ;;		_CC1Read
  8426 ;;		_CC1Write
  8427 ;; This function uses a non-reentrant model
  8428 ;;
  8429                           
  8430                           
  8431                           ;psect for function _SPIWrite
  8432  0A00                     _SPIWrite:	
  8433                           
  8434                           ;SPI.c: 41: unsigned char i;
  8435                           ;SPI.c: 43: for(i=0;i<len;i++)
  8436                           
  8437                           ;incstack = 0
  8438                           ; Regs used in _SPIWrite: [wreg+fsr1l+fsr1h+status,2+status,0]
  8439  0A00  01F6               	clrf	SPIWrite@i
  8440  0A01                     l3414:	
  8441  0A01  0873               	movf	SPIWrite@len,w
  8442  0A02  0276               	subwf	SPIWrite@i,w
  8443  0A03  1803               	btfsc	3,0
  8444  0A04  0008               	return
  8445                           
  8446                           ;SPI.c: 44: {
  8447                           ;SPI.c: 45: PIR1bits.SSPIF=0;
  8448  0A05  0020               	movlb	0	; select bank0
  8449  0A06  1191               	bcf	17,3	;volatile
  8450                           
  8451                           ;SPI.c: 46: SSPBUF=(*(srcPtr+i));
  8452  0A07  0876               	movf	SPIWrite@i,w
  8453  0A08  00F4               	movwf	??_SPIWrite
  8454  0A09  01F5               	clrf	??_SPIWrite+1
  8455  0A0A  0874               	movf	??_SPIWrite,w
  8456  0A0B  0771               	addwf	SPIWrite@srcPtr,w
  8457  0A0C  0086               	movwf	6
  8458  0A0D  0875               	movf	??_SPIWrite+1,w
  8459  0A0E  3D72               	addwfc	SPIWrite@srcPtr+1,w
  8460  0A0F  0087               	movwf	7
  8461  0A10  0801               	movf	1,w
  8462  0A11  0024               	movlb	4	; select bank4
  8463  0A12  0091               	movwf	17	;volatile
  8464  0A13                     l78:	
  8465                           ;SPI.c: 47: while(!(PIR1bits.SSPIF))
  8466                           
  8467  0A13  0020               	movlb	0	; select bank0
  8468  0A14  1991               	btfsc	17,3	;volatile
  8469  0A15  2A18               	goto	l3412
  8470                           
  8471                           ;SPI.c: 48: __nop();
  8472  0A16  0000               	nop
  8473  0A17  2A13               	goto	l78
  8474  0A18                     l3412:	
  8475  0A18  3001               	movlw	1
  8476  0A19  00F4               	movwf	??_SPIWrite
  8477  0A1A  0874               	movf	??_SPIWrite,w
  8478  0A1B  07F6               	addwf	SPIWrite@i,f
  8479  0A1C  2A01               	goto	l3414
  8480  0A1D                     __end_of_SPIWrite:	
  8481                           
  8482                           	psect	text42
  8483  096C                     __ptext42:	
  8484 ;; *************** function _PGMInit *****************
  8485 ;; Defined at:
  8486 ;;		line 17 in file "PGM.c"
  8487 ;; Parameters:    Size  Location     Type
  8488 ;;  state           1    wreg     unsigned char 
  8489 ;; Auto vars:     Size  Location     Type
  8490 ;;  state           1   11[COMMON] unsigned char 
  8491 ;; Return value:  Size  Location     Type
  8492 ;;		None               void
  8493 ;; Registers used:
  8494 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8495 ;; Tracked objects:
  8496 ;;		On entry : 0/0
  8497 ;;		On exit  : 0/0
  8498 ;;		Unchanged: 0/0
  8499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8500 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8501 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8502 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8503 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8504 ;;Total ram usage:        1 bytes
  8505 ;; Hardware stack levels used:    1
  8506 ;; Hardware stack levels required when called:    6
  8507 ;; This function calls:
  8508 ;;		_PGMCheckNvm
  8509 ;;		_PGMReadNvm
  8510 ;; This function is called by:
  8511 ;;		_main
  8512 ;; This function uses a non-reentrant model
  8513 ;;
  8514                           
  8515                           
  8516                           ;psect for function _PGMInit
  8517  096C                     _PGMInit:	
  8518                           
  8519                           ;incstack = 0
  8520                           ; Regs used in _PGMInit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8521                           ;PGMInit@state stored from wreg
  8522  096C  00FB               	movwf	PGMInit@state
  8523                           
  8524                           ;PGM.c: 19: switch(state)
  8525  096D  2979               	goto	l4334
  8526  096E                     l4324:	
  8527                           ;PGM.c: 20: {
  8528                           ;PGM.c: 21: case 0:
  8529                           
  8530                           
  8531                           ;PGM.c: 23: T1CON=0b00000001;
  8532  096E  3001               	movlw	1
  8533  096F  0020               	movlb	0	; select bank0
  8534  0970  0098               	movwf	24	;volatile
  8535                           
  8536                           ;PGM.c: 24: break;
  8537  0971  0008               	return
  8538  0972                     l4326:	
  8539                           ;PGM.c: 25: case 1:
  8540                           
  8541                           
  8542                           ;PGM.c: 27: pgm_flg.val=0;
  8543  0972  01FC               	clrf	_pgm_flg
  8544                           
  8545                           ;PGM.c: 28: PGMReadNvm();
  8546  0973  3188  20E6  3189   	fcall	_PGMReadNvm
  8547                           
  8548                           ;PGM.c: 29: PGMCheckNvm();
  8549  0976  3188  20B3         	fcall	_PGMCheckNvm
  8550                           
  8551                           ;PGM.c: 34: }
  8552                           
  8553                           ;PGM.c: 30: break;
  8554  0978  0008               	return
  8555  0979                     l4334:	
  8556  0979  087B               	movf	PGMInit@state,w
  8557                           
  8558                           ; Switch size 1, requested type "space"
  8559                           ; Number of cases is 2, Range of values is 0 to 1
  8560                           ; switch strategies available:
  8561                           ; Name         Instructions Cycles
  8562                           ; simple_byte            7     4 (average)
  8563                           ; direct_byte           10     6 (fixed)
  8564                           ; jumptable            260     6 (fixed)
  8565                           ;	Chosen strategy is simple_byte
  8566  097A  3A00               	xorlw	0	; case 0
  8567  097B  1903               	skipnz
  8568  097C  296E               	goto	l4324
  8569  097D  3A01               	xorlw	1	; case 1
  8570  097E  1903               	skipnz
  8571  097F  2972               	goto	l4326
  8572  0980  2981               	goto	l383
  8573  0981                     l383:	
  8574  0981  0008               	return
  8575  0982                     __end_of_PGMInit:	
  8576                           
  8577                           	psect	text43
  8578  08E6                     __ptext43:	
  8579 ;; *************** function _PGMReadNvm *****************
  8580 ;; Defined at:
  8581 ;;		line 41 in file "PGM.c"
  8582 ;; Parameters:    Size  Location     Type
  8583 ;;		None
  8584 ;; Auto vars:     Size  Location     Type
  8585 ;;		None
  8586 ;; Return value:  Size  Location     Type
  8587 ;;		None               void
  8588 ;; Registers used:
  8589 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8590 ;; Tracked objects:
  8591 ;;		On entry : 0/0
  8592 ;;		On exit  : 0/0
  8593 ;;		Unchanged: 0/0
  8594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8596 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8597 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8598 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8599 ;;Total ram usage:        2 bytes
  8600 ;; Hardware stack levels used:    1
  8601 ;; Hardware stack levels required when called:    3
  8602 ;; This function calls:
  8603 ;;		_NVMRead
  8604 ;; This function is called by:
  8605 ;;		_PGMInit
  8606 ;; This function uses a non-reentrant model
  8607 ;;
  8608                           
  8609                           
  8610                           ;psect for function _PGMReadNvm
  8611  08E6                     _PGMReadNvm:	
  8612                           
  8613                           ;PGM.c: 43: NVMRead((unsigned short)(&(nvm_pgm_cfg)),(char *)(&(pgm_cfg)),sizeof(ts_PGM_
      +                          CFG));
  8614                           
  8615                           ;incstack = 0
  8616                           ; Regs used in _PGMReadNvm: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8617  08E6  3020               	movlw	32
  8618  08E7  00F1               	movwf	NVMRead@addr
  8619  08E8  3038               	movlw	56
  8620  08E9  00F2               	movwf	NVMRead@addr+1
  8621  08EA  30D1               	movlw	(low (_pgm_cfg| 0))& (0+255)
  8622  08EB  00F8               	movwf	??_PGMReadNvm
  8623  08EC  0878               	movf	??_PGMReadNvm,w
  8624  08ED  00F3               	movwf	NVMRead@dest
  8625  08EE  3005               	movlw	5
  8626  08EF  00F9               	movwf	??_PGMReadNvm+1
  8627  08F0  0879               	movf	??_PGMReadNvm+1,w
  8628  08F1  00F4               	movwf	NVMRead@len
  8629  08F2  318B  235B         	fcall	_NVMRead
  8630  08F4  0008               	return
  8631  08F5                     __end_of_PGMReadNvm:	
  8632                           
  8633                           	psect	text44
  8634  0B5B                     __ptext44:	
  8635 ;; *************** function _NVMRead *****************
  8636 ;; Defined at:
  8637 ;;		line 23 in file "NVM.c"
  8638 ;; Parameters:    Size  Location     Type
  8639 ;;  addr            2    1[COMMON] unsigned short 
  8640 ;;  dest            1    3[COMMON] PTR unsigned char 
  8641 ;;		 -> pgm_cfg(5), 
  8642 ;;  len             1    4[COMMON] unsigned char 
  8643 ;; Auto vars:     Size  Location     Type
  8644 ;;  i               1    7[COMMON] unsigned char 
  8645 ;; Return value:  Size  Location     Type
  8646 ;;		None               void
  8647 ;; Registers used:
  8648 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8649 ;; Tracked objects:
  8650 ;;		On entry : 0/0
  8651 ;;		On exit  : 0/0
  8652 ;;		Unchanged: 0/0
  8653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8654 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8655 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8656 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8657 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8658 ;;Total ram usage:        7 bytes
  8659 ;; Hardware stack levels used:    1
  8660 ;; Hardware stack levels required when called:    2
  8661 ;; This function calls:
  8662 ;;		Nothing
  8663 ;; This function is called by:
  8664 ;;		_PGMReadNvm
  8665 ;; This function uses a non-reentrant model
  8666 ;;
  8667                           
  8668                           
  8669                           ;psect for function _NVMRead
  8670  0B5B                     _NVMRead:	
  8671                           
  8672                           ;NVM.c: 25: unsigned char i;
  8673                           ;NVM.c: 27: PMCON1bits.CFGS=0;
  8674                           
  8675                           ;incstack = 0
  8676                           ; Regs used in _NVMRead: [wreg+fsr1l+fsr1h+status,2+status,0]
  8677  0B5B  0023               	movlb	3	; select bank3
  8678  0B5C  1315               	bcf	21,6	;volatile
  8679                           
  8680                           ;NVM.c: 28: for(i=0;i<len;i++)
  8681  0B5D  01F7               	clrf	NVMRead@i
  8682  0B5E                     l4060:	
  8683  0B5E  0874               	movf	NVMRead@len,w
  8684  0B5F  0277               	subwf	NVMRead@i,w
  8685  0B60  1803               	btfsc	3,0
  8686  0B61  0008               	return
  8687  0B62  0064               	clrwdt	;# 
  8688                           
  8689                           ;NVM.c: 31: PMADR=(addr+i);
  8690  0B63  0877               	movf	NVMRead@i,w
  8691  0B64  0771               	addwf	NVMRead@addr,w
  8692  0B65  00F5               	movwf	??_NVMRead
  8693  0B66  0872               	movf	NVMRead@addr+1,w
  8694  0B67  1803               	skipnc
  8695  0B68  0A72               	incf	NVMRead@addr+1,w
  8696  0B69  00F6               	movwf	??_NVMRead+1
  8697  0B6A  0875               	movf	??_NVMRead,w
  8698  0B6B  0023               	movlb	3	; select bank3
  8699  0B6C  0091               	movwf	17	;volatile
  8700  0B6D  0876               	movf	??_NVMRead+1,w
  8701  0B6E  0092               	movwf	18	;volatile
  8702                           
  8703                           ;NVM.c: 32: PMCON1bits.RD=1;
  8704  0B6F  1415               	bsf	21,0	;volatile
  8705  0B70                     l245:	
  8706                           ;NVM.c: 33: while(PMCON1bits.RD);
  8707                           
  8708  0B70  1815               	btfsc	21,0	;volatile
  8709  0B71  2B70               	goto	l245
  8710                           
  8711                           ;NVM.c: 34: (*(dest+i))=PMDAT;
  8712  0B72  0813               	movf	19,w	;volatile
  8713  0B73  00F5               	movwf	??_NVMRead
  8714  0B74  0877               	movf	NVMRead@i,w
  8715  0B75  0773               	addwf	NVMRead@dest,w
  8716  0B76  00F6               	movwf	??_NVMRead+1
  8717  0B77  0876               	movf	??_NVMRead+1,w
  8718  0B78  0086               	movwf	6
  8719  0B79  0187               	clrf	7
  8720  0B7A  0875               	movf	??_NVMRead,w
  8721  0B7B  0081               	movwf	1
  8722  0B7C  3001               	movlw	1
  8723  0B7D  00F5               	movwf	??_NVMRead
  8724  0B7E  0875               	movf	??_NVMRead,w
  8725  0B7F  07F7               	addwf	NVMRead@i,f
  8726  0B80  2B5E               	goto	l4060
  8727  0B81                     __end_of_NVMRead:	
  8728                           
  8729                           	psect	text45
  8730  08B3                     __ptext45:	
  8731 ;; *************** function _PGMCheckNvm *****************
  8732 ;; Defined at:
  8733 ;;		line 51 in file "PGM.c"
  8734 ;; Parameters:    Size  Location     Type
  8735 ;;		None
  8736 ;; Auto vars:     Size  Location     Type
  8737 ;;		None
  8738 ;; Return value:  Size  Location     Type
  8739 ;;		None               void
  8740 ;; Registers used:
  8741 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8742 ;; Tracked objects:
  8743 ;;		On entry : 0/0
  8744 ;;		On exit  : 0/0
  8745 ;;		Unchanged: 0/0
  8746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8748 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8750 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8751 ;;Total ram usage:        0 bytes
  8752 ;; Hardware stack levels used:    1
  8753 ;; Hardware stack levels required when called:    5
  8754 ;; This function calls:
  8755 ;;		_PGMNvmReset
  8756 ;; This function is called by:
  8757 ;;		_PGMInit
  8758 ;; This function uses a non-reentrant model
  8759 ;;
  8760                           
  8761                           
  8762                           ;psect for function _PGMCheckNvm
  8763  08B3                     _PGMCheckNvm:	
  8764                           
  8765                           ;PGM.c: 53: if(pgm_cfg.valChk1!=0x5C || pgm_cfg.valChk2!=0xC5)
  8766                           
  8767                           ;incstack = 0
  8768                           ; Regs used in _PGMCheckNvm: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8769  08B3  305C               	movlw	92
  8770  08B4  0021               	movlb	1	; select bank1
  8771  08B5  0651               	xorwf	_pgm_cfg^(0+128),w
  8772  08B6  1D03               	btfss	3,2
  8773  08B7  28BC               	goto	l4120
  8774  08B8  30C5               	movlw	197
  8775  08B9  0652               	xorwf	(_pgm_cfg^(0+128)+1),w
  8776  08BA  1903               	btfsc	3,2
  8777  08BB  0008               	return
  8778  08BC                     l4120:	
  8779                           
  8780                           ;PGM.c: 54: PGMNvmReset();
  8781  08BC  3189  2123         	fcall	_PGMNvmReset
  8782  08BE  0008               	return
  8783  08BF                     __end_of_PGMCheckNvm:	
  8784                           
  8785                           	psect	text46
  8786  0923                     __ptext46:	
  8787 ;; *************** function _PGMNvmReset *****************
  8788 ;; Defined at:
  8789 ;;		line 57 in file "PGM.c"
  8790 ;; Parameters:    Size  Location     Type
  8791 ;;		None
  8792 ;; Auto vars:     Size  Location     Type
  8793 ;;		None
  8794 ;; Return value:  Size  Location     Type
  8795 ;;		None               void
  8796 ;; Registers used:
  8797 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8798 ;; Tracked objects:
  8799 ;;		On entry : 0/0
  8800 ;;		On exit  : 0/0
  8801 ;;		Unchanged: 0/0
  8802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8804 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8805 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8806 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8807 ;;Total ram usage:        1 bytes
  8808 ;; Hardware stack levels used:    1
  8809 ;; Hardware stack levels required when called:    4
  8810 ;; This function calls:
  8811 ;;		_PGMWriteNvm
  8812 ;; This function is called by:
  8813 ;;		_PGMCheckNvm
  8814 ;; This function uses a non-reentrant model
  8815 ;;
  8816                           
  8817                           
  8818                           ;psect for function _PGMNvmReset
  8819  0923                     _PGMNvmReset:	
  8820                           
  8821                           ;PGM.c: 60: pgm_cfg.valChk1=0x5C;
  8822                           
  8823                           ;incstack = 0
  8824                           ; Regs used in _PGMNvmReset: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8825  0923  305C               	movlw	92
  8826  0924  00FA               	movwf	??_PGMNvmReset
  8827  0925  087A               	movf	??_PGMNvmReset,w
  8828  0926  0021               	movlb	1	; select bank1
  8829  0927  00D1               	movwf	_pgm_cfg^(0+128)
  8830                           
  8831                           ;PGM.c: 61: pgm_cfg.valChk2=0xC5;
  8832  0928  30C5               	movlw	197
  8833  0929  00FA               	movwf	??_PGMNvmReset
  8834  092A  087A               	movf	??_PGMNvmReset,w
  8835  092B  00D2               	movwf	(_pgm_cfg^(0+128)+1)
  8836                           
  8837                           ;PGM.c: 62: pgm_cfg.menu.val=0x00;
  8838  092C  01D3               	clrf	(_pgm_cfg^(0+128)+2)
  8839                           
  8840                           ;PGM.c: 63: pgm_cfg.sensId=0x00;
  8841  092D  01D4               	clrf	(_pgm_cfg^(0+128)+3)
  8842                           
  8843                           ;PGM.c: 64: pgm_cfg.baseId=0x00;
  8844  092E  01D5               	clrf	(_pgm_cfg^(0+128)+4)
  8845                           
  8846                           ;PGM.c: 66: PGMWriteNvm();
  8847  092F  3188  20D7         	fcall	_PGMWriteNvm
  8848  0931  0001               	reset	;# 
  8849  0932  0008               	return
  8850  0933                     __end_of_PGMNvmReset:	
  8851                           
  8852                           	psect	text47
  8853  08D7                     __ptext47:	
  8854 ;; *************** function _PGMWriteNvm *****************
  8855 ;; Defined at:
  8856 ;;		line 46 in file "PGM.c"
  8857 ;; Parameters:    Size  Location     Type
  8858 ;;		None
  8859 ;; Auto vars:     Size  Location     Type
  8860 ;;		None
  8861 ;; Return value:  Size  Location     Type
  8862 ;;		None               void
  8863 ;; Registers used:
  8864 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8865 ;; Tracked objects:
  8866 ;;		On entry : 0/0
  8867 ;;		On exit  : 0/0
  8868 ;;		Unchanged: 0/0
  8869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8871 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8872 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8873 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8874 ;;Total ram usage:        2 bytes
  8875 ;; Hardware stack levels used:    1
  8876 ;; Hardware stack levels required when called:    3
  8877 ;; This function calls:
  8878 ;;		_NVMWrite
  8879 ;; This function is called by:
  8880 ;;		_PGMNvmReset
  8881 ;;		_PGMSelUp
  8882 ;;		_PGMSelLong
  8883 ;;		_RTXReadPkt
  8884 ;; This function uses a non-reentrant model
  8885 ;;
  8886                           
  8887                           
  8888                           ;psect for function _PGMWriteNvm
  8889  08D7                     _PGMWriteNvm:	
  8890                           
  8891                           ;PGM.c: 48: NVMWrite((unsigned short)(&(nvm_pgm_cfg)),(char *)(&(pgm_cfg)),sizeof(ts_PGM
      +                          _CFG));
  8892                           
  8893                           ;incstack = 0
  8894                           ; Regs used in _PGMWriteNvm: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8895  08D7  3020               	movlw	32
  8896  08D8  00F1               	movwf	NVMWrite@addr
  8897  08D9  3038               	movlw	56
  8898  08DA  00F2               	movwf	NVMWrite@addr+1
  8899  08DB  30D1               	movlw	(low (_pgm_cfg| 0))& (0+255)
  8900  08DC  00F8               	movwf	??_PGMWriteNvm
  8901  08DD  0878               	movf	??_PGMWriteNvm,w
  8902  08DE  00F3               	movwf	NVMWrite@source
  8903  08DF  3005               	movlw	5
  8904  08E0  00F9               	movwf	??_PGMWriteNvm+1
  8905  08E1  0879               	movf	??_PGMWriteNvm+1,w
  8906  08E2  00F4               	movwf	NVMWrite@len
  8907  08E3  3186  261E         	fcall	_NVMWrite
  8908  08E5  0008               	return
  8909  08E6                     __end_of_PGMWriteNvm:	
  8910                           
  8911                           	psect	text48
  8912  061E                     __ptext48:	
  8913 ;; *************** function _NVMWrite *****************
  8914 ;; Defined at:
  8915 ;;		line 38 in file "NVM.c"
  8916 ;; Parameters:    Size  Location     Type
  8917 ;;  addr            2    1[COMMON] unsigned short 
  8918 ;;  source          1    3[COMMON] PTR unsigned char 
  8919 ;;		 -> pgm_cfg(5), 
  8920 ;;  len             1    4[COMMON] unsigned char 
  8921 ;; Auto vars:     Size  Location     Type
  8922 ;;  bufTmpRow      64    0[BANK0 ] unsigned short [32]
  8923 ;;  rowAddr         2   64[BANK0 ] unsigned short 
  8924 ;;  j               1   68[BANK0 ] unsigned char 
  8925 ;;  latchAddr       1   67[BANK0 ] unsigned char 
  8926 ;;  i               1   66[BANK0 ] unsigned char 
  8927 ;; Return value:  Size  Location     Type
  8928 ;;		None               void
  8929 ;; Registers used:
  8930 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8931 ;; Tracked objects:
  8932 ;;		On entry : 0/0
  8933 ;;		On exit  : 0/0
  8934 ;;		Unchanged: 0/0
  8935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8936 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8937 ;;      Locals:         0      69       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8938 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8939 ;;      Totals:         7      69       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8940 ;;Total ram usage:       76 bytes
  8941 ;; Hardware stack levels used:    1
  8942 ;; Hardware stack levels required when called:    2
  8943 ;; This function calls:
  8944 ;;		Nothing
  8945 ;; This function is called by:
  8946 ;;		_PGMWriteNvm
  8947 ;; This function uses a non-reentrant model
  8948 ;;
  8949                           
  8950                           
  8951                           ;psect for function _NVMWrite
  8952  061E                     _NVMWrite:	
  8953                           
  8954                           ;NVM.c: 40: unsigned char i,j,latchAddr;
  8955                           ;NVM.c: 41: unsigned short rowAddr,bufTmpRow[0x20];
  8956                           ;NVM.c: 43: INTCONbits.GIE=0;
  8957                           
  8958                           ;incstack = 0
  8959                           ; Regs used in _NVMWrite: [wreg+fsr1l+fsr1h+status,2+status,0]
  8960  061E  138B               	bcf	11,7	;volatile
  8961                           
  8962                           ;NVM.c: 44: PMCON1bits.WREN=1;
  8963  061F  0023               	movlb	3	; select bank3
  8964  0620  1515               	bsf	21,2	;volatile
  8965                           
  8966                           ;NVM.c: 45: PMCON1bits.CFGS=0;
  8967  0621  1315               	bcf	21,6	;volatile
  8968                           
  8969                           ;NVM.c: 48: i=0;
  8970  0622  0020               	movlb	0	; select bank0
  8971  0623  01E2               	clrf	NVMWrite@i
  8972                           
  8973                           ;NVM.c: 50: rowAddr=(addr&(~(0x001F)));
  8974  0624  30E0               	movlw	224
  8975  0625  0571               	andwf	NVMWrite@addr,w
  8976  0626  00E0               	movwf	NVMWrite@rowAddr
  8977  0627  30FF               	movlw	255
  8978  0628  0572               	andwf	NVMWrite@addr+1,w
  8979  0629  00E1               	movwf	NVMWrite@rowAddr+1
  8980                           
  8981                           ;NVM.c: 51: latchAddr=(addr&0x001F);
  8982  062A  0871               	movf	NVMWrite@addr,w
  8983  062B  391F               	andlw	31
  8984  062C  00F5               	movwf	??_NVMWrite
  8985  062D  0875               	movf	??_NVMWrite,w
  8986  062E  00E3               	movwf	NVMWrite@latchAddr
  8987  062F                     l252:	
  8988                           ;NVM.c: 52: while(i<len)
  8989                           
  8990  062F  0874               	movf	NVMWrite@len,w
  8991  0630  0262               	subwf	NVMWrite@i,w
  8992  0631  1803               	btfsc	3,0
  8993  0632  2ED6               	goto	l272
  8994  0633  0064               	clrwdt	;# 
  8995                           
  8996                           ;NVM.c: 57: for(j=0;j<sizeof(bufTmpRow)/sizeof(unsigned short);j++)
  8997  0634  0020               	movlb	0	; select bank0
  8998  0635  01E4               	clrf	NVMWrite@j
  8999  0636  3020               	movlw	32
  9000  0637  0264               	subwf	NVMWrite@j,w
  9001  0638  1803               	btfsc	3,0
  9002  0639  2E5E               	goto	l255
  9003  063A                     l254:	
  9004  063A  0064               	clrwdt	;# 
  9005                           
  9006                           ;NVM.c: 60: PMADR=(rowAddr+j);
  9007  063B  0020               	movlb	0	; select bank0
  9008  063C  0864               	movf	NVMWrite@j,w
  9009  063D  0760               	addwf	NVMWrite@rowAddr,w
  9010  063E  00F5               	movwf	??_NVMWrite
  9011  063F  0861               	movf	NVMWrite@rowAddr+1,w
  9012  0640  1803               	skipnc
  9013  0641  0A61               	incf	NVMWrite@rowAddr+1,w
  9014  0642  00F6               	movwf	??_NVMWrite+1
  9015  0643  0875               	movf	??_NVMWrite,w
  9016  0644  0023               	movlb	3	; select bank3
  9017  0645  0091               	movwf	17	;volatile
  9018  0646  0876               	movf	??_NVMWrite+1,w
  9019  0647  0092               	movwf	18	;volatile
  9020                           
  9021                           ;NVM.c: 61: PMCON1bits.RD=1;
  9022  0648  1415               	bsf	21,0	;volatile
  9023  0649                     l256:	
  9024                           ;NVM.c: 62: while(PMCON1bits.RD);
  9025                           
  9026  0649  1815               	btfsc	21,0	;volatile
  9027  064A  2E49               	goto	l256
  9028                           
  9029                           ;NVM.c: 63: bufTmpRow[j]=PMDAT;
  9030  064B  0020               	movlb	0	; select bank0
  9031  064C  3564               	lslf	NVMWrite@j,w
  9032  064D  3E20               	addlw	(low (NVMWrite@bufTmpRow| 0))& (0+255)
  9033  064E  0086               	movwf	6
  9034  064F  0187               	clrf	7
  9035  0650  0023               	movlb	3	; select bank3
  9036  0651  0813               	movf	19,w	;volatile
  9037  0652  3FC0               	movwi [0]fsr1
  9038  0653  0814               	movf	20,w	;volatile
  9039  0654  3FC1               	movwi [1]fsr1
  9040  0655  3001               	movlw	1
  9041  0656  00F5               	movwf	??_NVMWrite
  9042  0657  0875               	movf	??_NVMWrite,w
  9043  0658  0020               	movlb	0	; select bank0
  9044  0659  07E4               	addwf	NVMWrite@j,f
  9045  065A  3020               	movlw	32
  9046  065B  0264               	subwf	NVMWrite@j,w
  9047  065C  1C03               	skipc
  9048  065D  2E3A               	goto	l254
  9049  065E                     l255:	
  9050                           
  9051                           ;NVM.c: 64: }
  9052                           ;NVM.c: 67: PMCON1bits.FREE=1;
  9053  065E  0023               	movlb	3	; select bank3
  9054  065F  1615               	bsf	21,4	;volatile
  9055                           
  9056                           ;NVM.c: 68: PMADR=rowAddr;
  9057  0660  0020               	movlb	0	; select bank0
  9058  0661  0861               	movf	NVMWrite@rowAddr+1,w
  9059  0662  0023               	movlb	3	; select bank3
  9060  0663  0092               	movwf	18	;volatile
  9061  0664  0020               	movlb	0	; select bank0
  9062  0665  0860               	movf	NVMWrite@rowAddr,w
  9063  0666  0023               	movlb	3	; select bank3
  9064  0667  0091               	movwf	17	;volatile
  9065                           
  9066                           ;NVM.c: 69: PMCON2=0x55;
  9067  0668  3055               	movlw	85
  9068  0669  0096               	movwf	22	;volsfr
  9069                           
  9070                           ;NVM.c: 70: PMCON2=0xAA;
  9071  066A  30AA               	movlw	170
  9072  066B  0096               	movwf	22	;volsfr
  9073                           
  9074                           ;NVM.c: 71: PMCON1bits.WR=1;
  9075  066C  1495               	bsf	21,1	;volatile
  9076  066D                     l259:	
  9077                           ;NVM.c: 72: while(PMCON1bits.WR);
  9078                           
  9079  066D  1895               	btfsc	21,1	;volatile
  9080  066E  2E6D               	goto	l259
  9081                           
  9082                           ;NVM.c: 73: __nop();
  9083  066F  0000               	nop
  9084                           
  9085                           ;NVM.c: 74: __nop();
  9086  0670  0000               	nop
  9087                           
  9088                           ;NVM.c: 77: for(;latchAddr<sizeof(bufTmpRow)/sizeof(unsigned short);latchAddr++)
  9089  0671  3020               	movlw	32
  9090  0672  0020               	movlb	0	; select bank0
  9091  0673  0263               	subwf	NVMWrite@latchAddr,w
  9092  0674  1803               	btfsc	3,0
  9093  0675  2E99               	goto	l3908
  9094  0676                     l262:	
  9095  0676  0064               	clrwdt	;# 
  9096                           
  9097                           ;NVM.c: 81: if(i>=len)
  9098  0677  0874               	movf	NVMWrite@len,w
  9099  0678  0020               	movlb	0	; select bank0
  9100  0679  0262               	subwf	NVMWrite@i,w
  9101  067A  1803               	btfsc	3,0
  9102  067B  2E99               	goto	l3908
  9103                           
  9104                           ;NVM.c: 84: bufTmpRow[latchAddr]=(*(source+i));
  9105                           
  9106                           ;NVM.c: 82: break;
  9107  067C  0862               	movf	NVMWrite@i,w
  9108  067D  0773               	addwf	NVMWrite@source,w
  9109  067E  00F5               	movwf	??_NVMWrite
  9110  067F  0875               	movf	??_NVMWrite,w
  9111  0680  0086               	movwf	6
  9112  0681  0187               	clrf	7
  9113  0682  0801               	movf	1,w
  9114  0683  00F6               	movwf	??_NVMWrite+1
  9115  0684  01F7               	clrf	??_NVMWrite+2
  9116  0685  3563               	lslf	NVMWrite@latchAddr,w
  9117  0686  3E20               	addlw	(low (NVMWrite@bufTmpRow| 0))& (0+255)
  9118  0687  0086               	movwf	6
  9119  0688  0187               	clrf	7
  9120  0689  0876               	movf	??_NVMWrite+1,w
  9121  068A  3FC0               	movwi [0]fsr1
  9122  068B  0877               	movf	??_NVMWrite+2,w
  9123  068C  3FC1               	movwi [1]fsr1
  9124                           
  9125                           ;NVM.c: 85: i++;
  9126  068D  3001               	movlw	1
  9127  068E  00F5               	movwf	??_NVMWrite
  9128  068F  0875               	movf	??_NVMWrite,w
  9129  0690  07E2               	addwf	NVMWrite@i,f
  9130  0691  3001               	movlw	1
  9131  0692  00F5               	movwf	??_NVMWrite
  9132  0693  0875               	movf	??_NVMWrite,w
  9133  0694  07E3               	addwf	NVMWrite@latchAddr,f
  9134  0695  3020               	movlw	32
  9135  0696  0263               	subwf	NVMWrite@latchAddr,w
  9136  0697  1C03               	skipc
  9137  0698  2E76               	goto	l262
  9138  0699                     l3908:	
  9139                           
  9140                           ;NVM.c: 86: }
  9141                           ;NVM.c: 88: latchAddr=0;
  9142  0699  01E3               	clrf	NVMWrite@latchAddr
  9143                           
  9144                           ;NVM.c: 91: for(j=0;j<sizeof(bufTmpRow)/sizeof(unsigned short);j++)
  9145  069A  01E4               	clrf	NVMWrite@j
  9146  069B  3020               	movlw	32
  9147  069C  0264               	subwf	NVMWrite@j,w
  9148  069D  1803               	btfsc	3,0
  9149  069E  2ED1               	goto	l3930
  9150  069F                     l3914:	
  9151                           
  9152                           ;NVM.c: 92: {
  9153                           ;NVM.c: 94: PMADR=(rowAddr+j);
  9154  069F  0864               	movf	NVMWrite@j,w
  9155  06A0  0760               	addwf	NVMWrite@rowAddr,w
  9156  06A1  00F5               	movwf	??_NVMWrite
  9157  06A2  0861               	movf	NVMWrite@rowAddr+1,w
  9158  06A3  1803               	skipnc
  9159  06A4  0A61               	incf	NVMWrite@rowAddr+1,w
  9160  06A5  00F6               	movwf	??_NVMWrite+1
  9161  06A6  0875               	movf	??_NVMWrite,w
  9162  06A7  0023               	movlb	3	; select bank3
  9163  06A8  0091               	movwf	17	;volatile
  9164  06A9  0876               	movf	??_NVMWrite+1,w
  9165  06AA  0092               	movwf	18	;volatile
  9166                           
  9167                           ;NVM.c: 95: PMDAT=bufTmpRow[j];
  9168  06AB  0020               	movlb	0	; select bank0
  9169  06AC  3564               	lslf	NVMWrite@j,w
  9170  06AD  3E20               	addlw	(low (NVMWrite@bufTmpRow| 0))& (0+255)
  9171  06AE  0086               	movwf	6
  9172  06AF  0187               	clrf	7
  9173  06B0  3F40               	moviw [0]fsr1
  9174  06B1  0023               	movlb	3	; select bank3
  9175  06B2  0093               	movwf	19	;volatile
  9176  06B3  3F41               	moviw [1]fsr1
  9177  06B4  0094               	movwf	20	;volatile
  9178                           
  9179                           ;NVM.c: 97: if(j==(sizeof(bufTmpRow)/sizeof(unsigned short)-1))
  9180  06B5  301F               	movlw	31
  9181  06B6  0020               	movlb	0	; select bank0
  9182  06B7  0664               	xorwf	NVMWrite@j,w
  9183  06B8  1D03               	btfss	3,2
  9184  06B9  2EBD               	goto	l267
  9185                           
  9186                           ;NVM.c: 98: PMCON1bits.LWLO=0;
  9187  06BA  0023               	movlb	3	; select bank3
  9188  06BB  1295               	bcf	21,5	;volatile
  9189  06BC  2EBF               	goto	l3922
  9190  06BD                     l267:	
  9191                           
  9192                           ;NVM.c: 99: else
  9193                           ;NVM.c: 100: PMCON1bits.LWLO=1;
  9194  06BD  0023               	movlb	3	; select bank3
  9195  06BE  1695               	bsf	21,5	;volatile
  9196  06BF                     l3922:	
  9197                           
  9198                           ;NVM.c: 101: PMCON2=0x55;
  9199  06BF  3055               	movlw	85
  9200  06C0  0096               	movwf	22	;volsfr
  9201                           
  9202                           ;NVM.c: 102: PMCON2=0xAA;
  9203  06C1  30AA               	movlw	170
  9204  06C2  0096               	movwf	22	;volsfr
  9205                           
  9206                           ;NVM.c: 103: PMCON1bits.WR=1;
  9207  06C3  1495               	bsf	21,1	;volatile
  9208  06C4                     l269:	
  9209                           ;NVM.c: 104: while(PMCON1bits.WR);
  9210                           
  9211  06C4  1895               	btfsc	21,1	;volatile
  9212  06C5  2EC4               	goto	l269
  9213                           
  9214                           ;NVM.c: 105: __nop();
  9215  06C6  0000               	nop
  9216                           
  9217                           ;NVM.c: 106: __nop();
  9218  06C7  0000               	nop
  9219  06C8  3001               	movlw	1
  9220  06C9  00F5               	movwf	??_NVMWrite
  9221  06CA  0875               	movf	??_NVMWrite,w
  9222  06CB  0020               	movlb	0	; select bank0
  9223  06CC  07E4               	addwf	NVMWrite@j,f
  9224  06CD  3020               	movlw	32
  9225  06CE  0264               	subwf	NVMWrite@j,w
  9226  06CF  1C03               	skipc
  9227  06D0  2E9F               	goto	l3914
  9228  06D1                     l3930:	
  9229                           
  9230                           ;NVM.c: 107: }
  9231                           ;NVM.c: 109: rowAddr+=0x0020;
  9232  06D1  3020               	movlw	32
  9233  06D2  07E0               	addwf	NVMWrite@rowAddr,f
  9234  06D3  3000               	movlw	0
  9235  06D4  3DE1               	addwfc	NVMWrite@rowAddr+1,f
  9236  06D5  2E2F               	goto	l252
  9237  06D6                     l272:	
  9238                           
  9239                           ;NVM.c: 110: }
  9240                           ;NVM.c: 112: INTCONbits.GIE=1;
  9241  06D6  178B               	bsf	11,7	;volatile
  9242                           
  9243                           ;NVM.c: 113: PMCON1bits.WREN=0;
  9244  06D7  0023               	movlb	3	; select bank3
  9245  06D8  1115               	bcf	21,2	;volatile
  9246  06D9  0008               	return
  9247  06DA                     __end_of_NVMWrite:	
  9248                           
  9249                           	psect	text49
  9250  0BA7                     __ptext49:	
  9251 ;; *************** function _OUTInit *****************
  9252 ;; Defined at:
  9253 ;;		line 6 in file "OUT.c"
  9254 ;; Parameters:    Size  Location     Type
  9255 ;;  sta             1    wreg     unsigned char 
  9256 ;; Auto vars:     Size  Location     Type
  9257 ;;  sta             1    2[COMMON] unsigned char 
  9258 ;; Return value:  Size  Location     Type
  9259 ;;		None               void
  9260 ;; Registers used:
  9261 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9262 ;; Tracked objects:
  9263 ;;		On entry : 0/0
  9264 ;;		On exit  : 0/0
  9265 ;;		Unchanged: 0/0
  9266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9268 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9269 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9270 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9271 ;;Total ram usage:        2 bytes
  9272 ;; Hardware stack levels used:    1
  9273 ;; Hardware stack levels required when called:    2
  9274 ;; This function calls:
  9275 ;;		Nothing
  9276 ;; This function is called by:
  9277 ;;		_main
  9278 ;; This function uses a non-reentrant model
  9279 ;;
  9280                           
  9281                           
  9282                           ;psect for function _OUTInit
  9283  0BA7                     _OUTInit:	
  9284                           
  9285                           ;incstack = 0
  9286                           ; Regs used in _OUTInit: [wreg-fsr0h+status,2+status,0]
  9287                           ;OUTInit@sta stored from wreg
  9288  0BA7  00F2               	movwf	OUTInit@sta
  9289                           
  9290                           ;OUT.c: 8: switch(sta)
  9291  0BA8  2BCA               	goto	l4232
  9292  0BA9                     l4226:	
  9293                           ;OUT.c: 9: {
  9294                           ;OUT.c: 10: case 0:
  9295                           
  9296                           
  9297                           ;OUT.c: 12: TRISA&=0b00000110; TRISB&=0b00100111; TRISC&=0b00010000; ANSELA&=0b00000110;
      +                           ANSELB&=0b00100111; ANSELC&=0b00010000; PORTA&=0b11111110; PORTC|=0b10000000;
  9298  0BA9  3006               	movlw	6
  9299  0BAA  00F1               	movwf	??_OUTInit
  9300  0BAB  0871               	movf	??_OUTInit,w
  9301  0BAC  0021               	movlb	1	; select bank1
  9302  0BAD  058C               	andwf	12,f	;volatile
  9303  0BAE  3027               	movlw	39
  9304  0BAF  00F1               	movwf	??_OUTInit
  9305  0BB0  0871               	movf	??_OUTInit,w
  9306  0BB1  058D               	andwf	13,f	;volatile
  9307  0BB2  3010               	movlw	16
  9308  0BB3  00F1               	movwf	??_OUTInit
  9309  0BB4  0871               	movf	??_OUTInit,w
  9310  0BB5  058E               	andwf	14,f	;volatile
  9311  0BB6  3006               	movlw	6
  9312  0BB7  00F1               	movwf	??_OUTInit
  9313  0BB8  0871               	movf	??_OUTInit,w
  9314  0BB9  0023               	movlb	3	; select bank3
  9315  0BBA  058C               	andwf	12,f	;volatile
  9316  0BBB  3027               	movlw	39
  9317  0BBC  00F1               	movwf	??_OUTInit
  9318  0BBD  0871               	movf	??_OUTInit,w
  9319  0BBE  058D               	andwf	13,f	;volatile
  9320  0BBF  3010               	movlw	16
  9321  0BC0  00F1               	movwf	??_OUTInit
  9322  0BC1  0871               	movf	??_OUTInit,w
  9323  0BC2  058E               	andwf	14,f	;volatile
  9324  0BC3  30FE               	movlw	254
  9325  0BC4  00F1               	movwf	??_OUTInit
  9326  0BC5  0871               	movf	??_OUTInit,w
  9327  0BC6  0020               	movlb	0	; select bank0
  9328  0BC7  058C               	andwf	12,f	;volatile
  9329  0BC8  178E               	bsf	14,7	;volatile
  9330                           
  9331                           ;OUT.c: 20: }
  9332                           
  9333                           ;OUT.c: 13: break;
  9334  0BC9  0008               	return
  9335  0BCA                     l4232:	
  9336  0BCA  0872               	movf	OUTInit@sta,w
  9337                           
  9338                           ; Switch size 1, requested type "space"
  9339                           ; Number of cases is 1, Range of values is 0 to 0
  9340                           ; switch strategies available:
  9341                           ; Name         Instructions Cycles
  9342                           ; simple_byte            4     3 (average)
  9343                           ; direct_byte            8     6 (fixed)
  9344                           ; jumptable            260     6 (fixed)
  9345                           ;	Chosen strategy is simple_byte
  9346  0BCB  3A00               	xorlw	0	; case 0
  9347  0BCC  1903               	skipnz
  9348  0BCD  2BA9               	goto	l4226
  9349  0BCE  2BCF               	goto	l40
  9350  0BCF                     l40:	
  9351  0BCF  0008               	return
  9352  0BD0                     __end_of_OUTInit:	
  9353                           
  9354                           	psect	text50
  9355  08A8                     __ptext50:	
  9356 ;; *************** function _NVMInit *****************
  9357 ;; Defined at:
  9358 ;;		line 6 in file "NVM.c"
  9359 ;; Parameters:    Size  Location     Type
  9360 ;;  sta             1    wreg     unsigned char 
  9361 ;; Auto vars:     Size  Location     Type
  9362 ;;  sta             1    1[COMMON] unsigned char 
  9363 ;; Return value:  Size  Location     Type
  9364 ;;		None               void
  9365 ;; Registers used:
  9366 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9367 ;; Tracked objects:
  9368 ;;		On entry : 0/0
  9369 ;;		On exit  : 0/0
  9370 ;;		Unchanged: 0/0
  9371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9373 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9375 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9376 ;;Total ram usage:        1 bytes
  9377 ;; Hardware stack levels used:    1
  9378 ;; Hardware stack levels required when called:    2
  9379 ;; This function calls:
  9380 ;;		Nothing
  9381 ;; This function is called by:
  9382 ;;		_main
  9383 ;; This function uses a non-reentrant model
  9384 ;;
  9385                           
  9386                           
  9387                           ;psect for function _NVMInit
  9388  08A8                     _NVMInit:	
  9389                           
  9390                           ;incstack = 0
  9391                           ; Regs used in _NVMInit: [wreg-fsr0h+status,2+status,0]
  9392                           ;NVMInit@sta stored from wreg
  9393  08A8  00F1               	movwf	NVMInit@sta
  9394                           
  9395                           ;NVM.c: 8: switch(sta)
  9396  08A9  28AD               	goto	l4290
  9397  08AA                     l4286:	
  9398                           ;NVM.c: 9: {
  9399                           ;NVM.c: 10: case 0:
  9400                           
  9401                           
  9402                           ;NVM.c: 12: PMCON1=0b00000000;
  9403  08AA  0023               	movlb	3	; select bank3
  9404  08AB  0195               	clrf	21	;volatile
  9405                           
  9406                           ;NVM.c: 20: }
  9407                           
  9408                           ;NVM.c: 13: break;
  9409  08AC  0008               	return
  9410  08AD                     l4290:	
  9411  08AD  0871               	movf	NVMInit@sta,w
  9412                           
  9413                           ; Switch size 1, requested type "space"
  9414                           ; Number of cases is 1, Range of values is 0 to 0
  9415                           ; switch strategies available:
  9416                           ; Name         Instructions Cycles
  9417                           ; simple_byte            4     3 (average)
  9418                           ; direct_byte            8     6 (fixed)
  9419                           ; jumptable            260     6 (fixed)
  9420                           ;	Chosen strategy is simple_byte
  9421  08AE  3A00               	xorlw	0	; case 0
  9422  08AF  1903               	skipnz
  9423  08B0  28AA               	goto	l4286
  9424  08B1  28B2               	goto	l240
  9425  08B2                     l240:	
  9426  08B2  0008               	return
  9427  08B3                     __end_of_NVMInit:	
  9428                           
  9429                           	psect	text51
  9430  089D                     __ptext51:	
  9431 ;; *************** function _LEDInit *****************
  9432 ;; Defined at:
  9433 ;;		line 7 in file "LED.c"
  9434 ;; Parameters:    Size  Location     Type
  9435 ;;  sta             1    wreg     unsigned char 
  9436 ;; Auto vars:     Size  Location     Type
  9437 ;;  sta             1    1[COMMON] unsigned char 
  9438 ;; Return value:  Size  Location     Type
  9439 ;;		None               void
  9440 ;; Registers used:
  9441 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9442 ;; Tracked objects:
  9443 ;;		On entry : 0/0
  9444 ;;		On exit  : 0/0
  9445 ;;		Unchanged: 0/0
  9446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9447 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9448 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9449 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9450 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9451 ;;Total ram usage:        1 bytes
  9452 ;; Hardware stack levels used:    1
  9453 ;; Hardware stack levels required when called:    2
  9454 ;; This function calls:
  9455 ;;		Nothing
  9456 ;; This function is called by:
  9457 ;;		_main
  9458 ;; This function uses a non-reentrant model
  9459 ;;
  9460                           
  9461                           
  9462                           ;psect for function _LEDInit
  9463  089D                     _LEDInit:	
  9464                           
  9465                           ;incstack = 0
  9466                           ; Regs used in _LEDInit: [wreg-fsr0h+status,2+status,0]
  9467                           ;LEDInit@sta stored from wreg
  9468  089D  00F1               	movwf	LEDInit@sta
  9469                           
  9470                           ;LED.c: 9: switch(sta)
  9471  089E  28A2               	goto	l4282
  9472  089F                     l200:	
  9473                           ;LED.c: 10: {
  9474                           ;LED.c: 17: case 2:
  9475                           
  9476                           
  9477                           ;LED.c: 19: LATCbits.LATC7=1;
  9478  089F  0022               	movlb	2	; select bank2
  9479  08A0  178E               	bsf	14,7	;volatile
  9480                           
  9481                           ;LED.c: 21: }
  9482                           
  9483                           ;LED.c: 20: break;
  9484  08A1  0008               	return
  9485  08A2                     l4282:	
  9486  08A2  0871               	movf	LEDInit@sta,w
  9487                           
  9488                           ; Switch size 1, requested type "space"
  9489                           ; Number of cases is 1, Range of values is 2 to 2
  9490                           ; switch strategies available:
  9491                           ; Name         Instructions Cycles
  9492                           ; simple_byte            4     3 (average)
  9493                           ; direct_byte           11     9 (fixed)
  9494                           ; jumptable            263     9 (fixed)
  9495                           ;	Chosen strategy is simple_byte
  9496  08A3  3A02               	xorlw	2	; case 2
  9497  08A4  1903               	skipnz
  9498  08A5  289F               	goto	l200
  9499  08A6  28A7               	goto	l202
  9500  08A7                     l202:	
  9501  08A7  0008               	return
  9502  08A8                     __end_of_LEDInit:	
  9503                           
  9504                           	psect	text52
  9505  0AB4                     __ptext52:	
  9506 ;; *************** function _INInit *****************
  9507 ;; Defined at:
  9508 ;;		line 6 in file "IN.c"
  9509 ;; Parameters:    Size  Location     Type
  9510 ;;  sta             1    wreg     unsigned char 
  9511 ;; Auto vars:     Size  Location     Type
  9512 ;;  sta             1    2[COMMON] unsigned char 
  9513 ;; Return value:  Size  Location     Type
  9514 ;;		None               void
  9515 ;; Registers used:
  9516 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9517 ;; Tracked objects:
  9518 ;;		On entry : 0/0
  9519 ;;		On exit  : 0/0
  9520 ;;		Unchanged: 0/0
  9521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9523 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9524 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9525 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9526 ;;Total ram usage:        2 bytes
  9527 ;; Hardware stack levels used:    1
  9528 ;; Hardware stack levels required when called:    2
  9529 ;; This function calls:
  9530 ;;		Nothing
  9531 ;; This function is called by:
  9532 ;;		_main
  9533 ;; This function uses a non-reentrant model
  9534 ;;
  9535                           
  9536                           
  9537                           ;psect for function _INInit
  9538  0AB4                     _INInit:	
  9539                           
  9540                           ;incstack = 0
  9541                           ; Regs used in _INInit: [wreg-fsr0h+status,2+status,0]
  9542                           ;INInit@sta stored from wreg
  9543  0AB4  00F2               	movwf	INInit@sta
  9544                           
  9545                           ;IN.c: 8: switch(sta)
  9546  0AB5  2ACD               	goto	l4222
  9547  0AB6                     l4214:	
  9548                           ;IN.c: 9: {
  9549                           ;IN.c: 10: case 0:
  9550                           
  9551                           
  9552                           ;IN.c: 12: TRISA|=0b00000110; TRISB|=0b00100111; TRISC|=0b00010000; ANSELB&=0b11011000; 
      +                          ANSELC&=0b11101111; WPUB=0b00100111;
  9553  0AB6  3006               	movlw	6
  9554  0AB7  00F1               	movwf	??_INInit
  9555  0AB8  0871               	movf	??_INInit,w
  9556  0AB9  0021               	movlb	1	; select bank1
  9557  0ABA  048C               	iorwf	12,f	;volatile
  9558  0ABB  3027               	movlw	39
  9559  0ABC  00F1               	movwf	??_INInit
  9560  0ABD  0871               	movf	??_INInit,w
  9561  0ABE  048D               	iorwf	13,f	;volatile
  9562  0ABF  160E               	bsf	14,4	;volatile
  9563  0AC0  30D8               	movlw	216
  9564  0AC1  00F1               	movwf	??_INInit
  9565  0AC2  0871               	movf	??_INInit,w
  9566  0AC3  0023               	movlb	3	; select bank3
  9567  0AC4  058D               	andwf	13,f	;volatile
  9568  0AC5  30EF               	movlw	239
  9569  0AC6  00F1               	movwf	??_INInit
  9570  0AC7  0871               	movf	??_INInit,w
  9571  0AC8  058E               	andwf	14,f	;volatile
  9572  0AC9  3027               	movlw	39
  9573  0ACA  0024               	movlb	4	; select bank4
  9574  0ACB  008D               	movwf	13	;volatile
  9575                           
  9576                           ;IN.c: 20: }
  9577                           
  9578                           ;IN.c: 13: break;
  9579  0ACC  0008               	return
  9580  0ACD                     l4222:	
  9581  0ACD  0872               	movf	INInit@sta,w
  9582                           
  9583                           ; Switch size 1, requested type "space"
  9584                           ; Number of cases is 1, Range of values is 0 to 0
  9585                           ; switch strategies available:
  9586                           ; Name         Instructions Cycles
  9587                           ; simple_byte            4     3 (average)
  9588                           ; direct_byte            8     6 (fixed)
  9589                           ; jumptable            260     6 (fixed)
  9590                           ;	Chosen strategy is simple_byte
  9591  0ACE  3A00               	xorlw	0	; case 0
  9592  0ACF  1903               	skipnz
  9593  0AD0  2AB6               	goto	l4214
  9594  0AD1  2AD2               	goto	l18
  9595  0AD2                     l18:	
  9596  0AD2  0008               	return
  9597  0AD3                     __end_of_INInit:	
  9598                           
  9599                           	psect	text53
  9600  0A95                     __ptext53:	
  9601 ;; *************** function _DINTask *****************
  9602 ;; Defined at:
  9603 ;;		line 79 in file "DIN.c"
  9604 ;; Parameters:    Size  Location     Type
  9605 ;;		None
  9606 ;; Auto vars:     Size  Location     Type
  9607 ;;		None
  9608 ;; Return value:  Size  Location     Type
  9609 ;;		None               void
  9610 ;; Registers used:
  9611 ;;		wreg, status,2, status,0
  9612 ;; Tracked objects:
  9613 ;;		On entry : 0/0
  9614 ;;		On exit  : 0/0
  9615 ;;		Unchanged: 0/0
  9616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9618 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9619 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9620 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9621 ;;Total ram usage:        1 bytes
  9622 ;; Hardware stack levels used:    1
  9623 ;; Hardware stack levels required when called:    2
  9624 ;; This function calls:
  9625 ;;		Nothing
  9626 ;; This function is called by:
  9627 ;;		_main
  9628 ;; This function uses a non-reentrant model
  9629 ;;
  9630                           
  9631                           
  9632                           ;psect for function _DINTask
  9633  0A95                     _DINTask:	
  9634                           
  9635                           ;DIN.c: 81: u_in_sta_tmpTask.val=0;
  9636                           
  9637                           ;incstack = 0
  9638                           ; Regs used in _DINTask: [wreg+status,2+status,0]
  9639  0A95  0021               	movlb	1	; select bank1
  9640  0A96  01BA               	clrf	_u_in_sta_tmpTask^(0+128)
  9641                           
  9642                           ;DIN.c: 82: if(!PORTBbits.RB2)
  9643  0A97  0020               	movlb	0	; select bank0
  9644  0A98  190D               	btfsc	13,2	;volatile
  9645  0A99  2A9C               	goto	l4306
  9646                           
  9647                           ;DIN.c: 83: u_in_sta_tmpTask.sel=1;
  9648  0A9A  0021               	movlb	1	; select bank1
  9649  0A9B  143A               	bsf	_u_in_sta_tmpTask^(0+128),0
  9650  0A9C                     l4306:	
  9651                           
  9652                           ;DIN.c: 86: if(u_in_sta_currTask.sel!=u_in_sta_tmpTask.sel)
  9653  0A9C  0021               	movlb	1	; select bank1
  9654  0A9D  083A               	movf	_u_in_sta_tmpTask^(0+128),w
  9655  0A9E  3901               	andlw	1
  9656  0A9F  00F1               	movwf	??_DINTask
  9657  0AA0  0839               	movf	_u_in_sta_currTask^(0+128),w
  9658  0AA1  3901               	andlw	1
  9659  0AA2  0671               	xorwf	??_DINTask,w
  9660  0AA3  1903               	skipnz
  9661  0AA4  2AAC               	goto	l4314
  9662                           
  9663                           ;DIN.c: 87: {
  9664                           ;DIN.c: 88: u_in_sta_currTask.sel=u_in_sta_tmpTask.sel;
  9665  0AA5  1039               	bcf	_u_in_sta_currTask^(0+128),0
  9666  0AA6  1C3A               	btfss	_u_in_sta_tmpTask^(0+128),0
  9667  0AA7  2AA9               	goto	l4310
  9668  0AA8  1439               	bsf	_u_in_sta_currTask^(0+128),0
  9669  0AA9                     l4310:	
  9670                           
  9671                           ;DIN.c: 89: tmrDbncSel=0;
  9672  0AA9  0021               	movlb	1	; select bank1
  9673  0AAA  01B2               	clrf	_tmrDbncSel^(0+128)
  9674                           
  9675                           ;DIN.c: 90: u_flg_din.tmrDbncSel=1;
  9676  0AAB  1435               	bsf	_u_flg_din^(0+128),0
  9677  0AAC                     l4314:	
  9678                           
  9679                           ;DIN.c: 91: }
  9680                           ;DIN.c: 94: if(u_in_sta_currTask.sel)
  9681  0AAC  1C39               	btfss	_u_in_sta_currTask^(0+128),0
  9682  0AAD  2AB0               	goto	l4318
  9683                           
  9684                           ;DIN.c: 95: u_flg_din.tmrLongSel=1;
  9685  0AAE  14B5               	bsf	_u_flg_din^(0+128),1
  9686  0AAF  0008               	return
  9687  0AB0                     l4318:	
  9688                           
  9689                           ;DIN.c: 96: else
  9690                           ;DIN.c: 97: {
  9691                           ;DIN.c: 98: tmrLongSel=0;
  9692  0AB0  01AD               	clrf	_tmrLongSel^(0+128)
  9693  0AB1  01AE               	clrf	(_tmrLongSel+1)^(0+128)
  9694                           
  9695                           ;DIN.c: 99: u_flg_din.tmrLongSel=0;
  9696  0AB2  10B5               	bcf	_u_flg_din^(0+128),1
  9697  0AB3  0008               	return
  9698  0AB4                     __end_of_DINTask:	
  9699                           
  9700                           	psect	text54
  9701  0913                     __ptext54:	
  9702 ;; *************** function _DINInit *****************
  9703 ;; Defined at:
  9704 ;;		line 24 in file "DIN.c"
  9705 ;; Parameters:    Size  Location     Type
  9706 ;;  sta             1    wreg     unsigned char 
  9707 ;; Auto vars:     Size  Location     Type
  9708 ;;  sta             1    1[COMMON] unsigned char 
  9709 ;; Return value:  Size  Location     Type
  9710 ;;		None               void
  9711 ;; Registers used:
  9712 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9713 ;; Tracked objects:
  9714 ;;		On entry : 0/0
  9715 ;;		On exit  : 0/0
  9716 ;;		Unchanged: 0/0
  9717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9719 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9721 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9722 ;;Total ram usage:        1 bytes
  9723 ;; Hardware stack levels used:    1
  9724 ;; Hardware stack levels required when called:    2
  9725 ;; This function calls:
  9726 ;;		Nothing
  9727 ;; This function is called by:
  9728 ;;		_main
  9729 ;; This function uses a non-reentrant model
  9730 ;;
  9731                           
  9732                           
  9733                           ;psect for function _DINInit
  9734  0913                     _DINInit:	
  9735                           
  9736                           ;incstack = 0
  9737                           ; Regs used in _DINInit: [wreg-fsr0h+status,2+status,0]
  9738                           ;DINInit@sta stored from wreg
  9739  0913  00F1               	movwf	DINInit@sta
  9740                           
  9741                           ;DIN.c: 26: switch(sta)
  9742  0914  291D               	goto	l4298
  9743  0915                     l4294:	
  9744                           ;DIN.c: 27: {
  9745                           ;DIN.c: 31: case 1:
  9746                           
  9747                           
  9748                           ;DIN.c: 33: u_flg_din.val=0;
  9749  0915  0021               	movlb	1	; select bank1
  9750  0916  01B5               	clrf	_u_flg_din^(0+128)
  9751                           
  9752                           ;DIN.c: 34: u_in_sta_currTask.val=0;
  9753  0917  01B9               	clrf	_u_in_sta_currTask^(0+128)
  9754                           
  9755                           ;DIN.c: 35: u_in_sta_tmpTask.val=0;
  9756  0918  01BA               	clrf	_u_in_sta_tmpTask^(0+128)
  9757                           
  9758                           ;DIN.c: 36: u_in_ev_up.val=0;
  9759  0919  01B8               	clrf	_u_in_ev_up^(0+128)
  9760                           
  9761                           ;DIN.c: 37: u_in_ev_down.val=0;
  9762  091A  01B6               	clrf	_u_in_ev_down^(0+128)
  9763                           
  9764                           ;DIN.c: 38: u_in_ev_long.val=0;
  9765  091B  01B7               	clrf	_u_in_ev_long^(0+128)
  9766                           
  9767                           ;DIN.c: 43: }
  9768                           
  9769                           ;DIN.c: 39: break;
  9770  091C  0008               	return
  9771  091D                     l4298:	
  9772  091D  0871               	movf	DINInit@sta,w
  9773                           
  9774                           ; Switch size 1, requested type "space"
  9775                           ; Number of cases is 1, Range of values is 1 to 1
  9776                           ; switch strategies available:
  9777                           ; Name         Instructions Cycles
  9778                           ; simple_byte            4     3 (average)
  9779                           ; direct_byte           11     9 (fixed)
  9780                           ; jumptable            263     9 (fixed)
  9781                           ;	Chosen strategy is simple_byte
  9782  091E  3A01               	xorlw	1	; case 1
  9783  091F  1903               	skipnz
  9784  0920  2915               	goto	l4294
  9785  0921  2922               	goto	l297
  9786  0922                     l297:	
  9787  0922  0008               	return
  9788  0923                     __end_of_DINInit:	
  9789                           
  9790                           	psect	text55
  9791  0BFB                     __ptext55:	
  9792 ;; *************** function _ADCInit *****************
  9793 ;; Defined at:
  9794 ;;		line 73 in file "ADC.c"
  9795 ;; Parameters:    Size  Location     Type
  9796 ;;  state           1    wreg     unsigned char 
  9797 ;; Auto vars:     Size  Location     Type
  9798 ;;  state           1    2[COMMON] unsigned char 
  9799 ;; Return value:  Size  Location     Type
  9800 ;;		None               void
  9801 ;; Registers used:
  9802 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9803 ;; Tracked objects:
  9804 ;;		On entry : 0/0
  9805 ;;		On exit  : 0/0
  9806 ;;		Unchanged: 0/0
  9807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9809 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9810 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9811 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9812 ;;Total ram usage:        2 bytes
  9813 ;; Hardware stack levels used:    1
  9814 ;; Hardware stack levels required when called:    2
  9815 ;; This function calls:
  9816 ;;		Nothing
  9817 ;; This function is called by:
  9818 ;;		_main
  9819 ;; This function uses a non-reentrant model
  9820 ;;
  9821                           
  9822                           
  9823                           ;psect for function _ADCInit
  9824  0BFB                     _ADCInit:	
  9825                           
  9826                           ;incstack = 0
  9827                           ; Regs used in _ADCInit: [wreg-fsr0h+status,2+status,0]
  9828                           ;ADCInit@state stored from wreg
  9829  0BFB  00F2               	movwf	ADCInit@state
  9830                           
  9831                           ;ADC.c: 75: switch(state)
  9832  0BFC  2C21               	goto	l4270
  9833  0BFD                     l4256:	
  9834                           ;ADC.c: 76: {
  9835                           ;ADC.c: 77: case 0:
  9836                           
  9837                           
  9838                           ;ADC.c: 79: ADCON0=0b00000101; ADCON1=0b10010011; FVRCON=0b10000001; ANSELA|=0b00000110;
      +                          ;
  9839  0BFD  3005               	movlw	5
  9840  0BFE  0021               	movlb	1	; select bank1
  9841  0BFF  009D               	movwf	29	;volatile
  9842  0C00  3093               	movlw	147
  9843  0C01  009E               	movwf	30	;volatile
  9844  0C02  3081               	movlw	129
  9845  0C03  0022               	movlb	2	; select bank2
  9846  0C04  0097               	movwf	23	;volatile
  9847  0C05  3006               	movlw	6
  9848  0C06  00F1               	movwf	??_ADCInit
  9849  0C07  0871               	movf	??_ADCInit,w
  9850  0C08  0023               	movlb	3	; select bank3
  9851  0C09  048C               	iorwf	12,f	;volatile
  9852                           
  9853                           ;ADC.c: 80: break;
  9854  0C0A  0008               	return
  9855  0C0B                     l4260:	
  9856                           ;ADC.c: 81: case 1:
  9857                           
  9858                           
  9859                           ;ADC.c: 83: batt=0;
  9860  0C0B  0021               	movlb	1	; select bank1
  9861  0C0C  01A9               	clrf	_batt^(0+128)
  9862  0C0D  01AA               	clrf	(_batt+1)^(0+128)
  9863                           
  9864                           ;ADC.c: 84: battV=0;
  9865  0C0E  3000               	movlw	0
  9866  0C0F  00A0               	movwf	_battV^(0+128)
  9867  0C10  3000               	movlw	0
  9868  0C11  00A1               	movwf	(_battV+1)^(0+128)
  9869  0C12  3000               	movlw	0
  9870  0C13  00A2               	movwf	(_battV+2)^(0+128)
  9871                           
  9872                           ;ADC.c: 85: rmsCurr=0;
  9873  0C14  3000               	movlw	0
  9874  0C15  00A6               	movwf	_rmsCurr^(0+128)
  9875  0C16  3000               	movlw	0
  9876  0C17  00A7               	movwf	(_rmsCurr+1)^(0+128)
  9877  0C18  3000               	movlw	0
  9878  0C19  00A8               	movwf	(_rmsCurr+2)^(0+128)
  9879                           
  9880                           ;ADC.c: 86: realRmsCurr=0;
  9881  0C1A  3000               	movlw	0
  9882  0C1B  00A3               	movwf	_realRmsCurr^(0+128)
  9883  0C1C  3000               	movlw	0
  9884  0C1D  00A4               	movwf	(_realRmsCurr+1)^(0+128)
  9885  0C1E  3000               	movlw	0
  9886  0C1F  00A5               	movwf	(_realRmsCurr+2)^(0+128)
  9887                           
  9888                           ;ADC.c: 91: }
  9889                           
  9890                           ;ADC.c: 87: break;
  9891  0C20  0008               	return
  9892  0C21                     l4270:	
  9893  0C21  0872               	movf	ADCInit@state,w
  9894                           
  9895                           ; Switch size 1, requested type "space"
  9896                           ; Number of cases is 2, Range of values is 0 to 1
  9897                           ; switch strategies available:
  9898                           ; Name         Instructions Cycles
  9899                           ; simple_byte            7     4 (average)
  9900                           ; direct_byte           10     6 (fixed)
  9901                           ; jumptable            260     6 (fixed)
  9902                           ;	Chosen strategy is simple_byte
  9903  0C22  3A00               	xorlw	0	; case 0
  9904  0C23  1903               	skipnz
  9905  0C24  2BFD               	goto	l4256
  9906  0C25  3A01               	xorlw	1	; case 1
  9907  0C26  1903               	skipnz
  9908  0C27  2C0B               	goto	l4260
  9909  0C28  2C29               	goto	l121
  9910  0C29                     l121:	
  9911  0C29  0008               	return
  9912  0C2A                     __end_of_ADCInit:	
  9913                           
  9914                           	psect	intentry
  9915  0004                     __pintentry:	
  9916 ;; *************** function _INTIsr *****************
  9917 ;; Defined at:
  9918 ;;		line 37 in file "Sensore.c"
  9919 ;; Parameters:    Size  Location     Type
  9920 ;;		None
  9921 ;; Auto vars:     Size  Location     Type
  9922 ;;		None
  9923 ;; Return value:  Size  Location     Type
  9924 ;;		None               void
  9925 ;; Registers used:
  9926 ;;		wreg, status,2, status,0, pclath, cstack
  9927 ;; Tracked objects:
  9928 ;;		On entry : 0/0
  9929 ;;		On exit  : 0/0
  9930 ;;		Unchanged: 0/0
  9931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9934 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9935 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9936 ;;Total ram usage:        1 bytes
  9937 ;; Hardware stack levels used:    1
  9938 ;; Hardware stack levels required when called:    1
  9939 ;; This function calls:
  9940 ;;		_SYSInt
  9941 ;; This function is called by:
  9942 ;;		Interrupt level 1
  9943 ;; This function uses a non-reentrant model
  9944 ;;
  9945                           
  9946  0004                     _INTIsr:	
  9947                           
  9948                           ;incstack = 0
  9949                           ; Regs used in _INTIsr: [wreg+status,2+status,0+pclath+cstack]
  9950  0004  3180               	pagesel	$
  9951  0005  0020               	movlb	0	; select bank0
  9952  0006  087F               	movf	127,w
  9953  0007  00F0               	movwf	??_INTIsr
  9954                           
  9955                           ;Sensore.c: 40: if(INTCONbits.TMR0IF)
  9956  0008  1D0B               	btfss	11,2	;volatile
  9957  0009  280D               	goto	i1l3334
  9958                           
  9959                           ;Sensore.c: 41: {
  9960                           ;Sensore.c: 43: INTCONbits.TMR0IF=0;
  9961  000A  110B               	bcf	11,2	;volatile
  9962                           
  9963                           ;Sensore.c: 46: SYSInt();
  9964  000B  3188  2089         	fcall	_SYSInt
  9965  000D                     i1l3334:	
  9966                           
  9967                           ;Sensore.c: 47: }
  9968                           ;Sensore.c: 50: if(IOCBFbits.IOCBF2)
  9969  000D  0027               	movlb	7	; select bank7
  9970  000E  1916               	btfsc	22,2	;volatile
  9971                           
  9972                           ;Sensore.c: 51: IOCBFbits.IOCBF2=0;
  9973  000F  1116               	bcf	22,2	;volatile
  9974  0010  0870               	movf	??_INTIsr,w
  9975  0011  0020               	movlb	0	; select bank0
  9976  0012  00FF               	movwf	127
  9977  0013  0009               	retfie
  9978  0014                     __end_of_INTIsr:	
  9979                           
  9980                           	psect	text57
  9981  0889                     __ptext57:	
  9982 ;; *************** function _SYSInt *****************
  9983 ;; Defined at:
  9984 ;;		line 36 in file "SYS.c"
  9985 ;; Parameters:    Size  Location     Type
  9986 ;;		None
  9987 ;; Auto vars:     Size  Location     Type
  9988 ;;		None
  9989 ;; Return value:  Size  Location     Type
  9990 ;;		None               void
  9991 ;; Registers used:
  9992 ;;		wreg
  9993 ;; Tracked objects:
  9994 ;;		On entry : 0/0
  9995 ;;		On exit  : 0/0
  9996 ;;		Unchanged: 0/0
  9997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10001 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10002 ;;Total ram usage:        0 bytes
 10003 ;; Hardware stack levels used:    1
 10004 ;; This function calls:
 10005 ;;		Nothing
 10006 ;; This function is called by:
 10007 ;;		_INTIsr
 10008 ;; This function uses a non-reentrant model
 10009 ;;
 10010                           
 10011                           
 10012                           ;psect for function _SYSInt
 10013  0889                     _SYSInt:	
 10014                           
 10015                           ;SYS.c: 39: u_SYS_STA.TICK=1;
 10016                           
 10017                           ;incstack = 0
 10018                           ; Regs used in _SYSInt: [wreg]
 10019  0889  0021               	movlb	1	; select bank1
 10020  088A  1434               	bsf	_u_SYS_STA^(0+128),0
 10021                           
 10022                           ;SYS.c: 42: TMR0=255-156;
 10023  088B  3063               	movlw	99
 10024  088C  0020               	movlb	0	; select bank0
 10025  088D  0095               	movwf	21	;volatile
 10026  088E  0008               	return
 10027  088F                     __end_of_SYSInt:	
 10028  007E                     btemp	set	126	;btemp
 10029  007E                     wtemp	set	126
 10030  007E                     wtemp0	set	126
 10031  0080                     wtemp1	set	128
 10032  0082                     wtemp2	set	130
 10033  0084                     wtemp3	set	132
 10034  0086                     wtemp4	set	134
 10035  0088                     wtemp5	set	136
 10036  007F                     wtemp6	set	127
 10037  007E                     ttemp	set	126
 10038  007E                     ttemp0	set	126
 10039  0081                     ttemp1	set	129
 10040  0084                     ttemp2	set	132
 10041  0087                     ttemp3	set	135
 10042  007F                     ttemp4	set	127
 10043  007E                     ltemp	set	126
 10044  007E                     ltemp0	set	126
 10045  0082                     ltemp1	set	130
 10046  0086                     ltemp2	set	134
 10047  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        55
    BSS         55
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     73      73
    BANK1            80      0      62
    BANK2            80     19      66
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10            8      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    RTXRcvPkt@dst	PTR unsigned char  size(1) Largest target is 11
		 -> pktRx(BANK1[11]), 

    RTXSndPkt@src	PTR unsigned char  size(1) Largest target is 11
		 -> pktTx(BANK1[11]), 

    NVMWrite@source	PTR unsigned char  size(1) Largest target is 5
		 -> pgm_cfg(BANK1[5]), 

    NVMRead@dest	PTR unsigned char  size(1) Largest target is 5
		 -> pgm_cfg(BANK1[5]), 

    CC1Write@src	PTR unsigned char  size(2) Largest target is 47
		 -> pktTx(BANK1[11]), cc1PaTable(BANK1[8]), cc1InitVal(BANK2[47]), 

    CC1Read@dst	PTR unsigned char  size(1) Largest target is 11
		 -> pktRx(BANK1[11]), RTXReadPkt@numRxByte(BANK0[1]), RTXSndPkt@numTxByte(BANK0[1]), RTXSndPkt@numRxByte(BANK0[1]), 
		 -> RTXSndPkt@sta(BANK0[1]), 

    SPIWrite@srcPtr	PTR unsigned char  size(2) Largest target is 47
		 -> pktTx(BANK1[11]), CC1Write@cc1Addr(BANK0[1]), CC1Read@cc1Addr(COMMON[1]), CC1Strobe@cc1Stb(COMMON[1]), 
		 -> cc1PaTable(BANK1[8]), cc1InitVal(BANK2[47]), 

    SPIRead@dstPtr	PTR unsigned char  size(1) Largest target is 11
		 -> pktRx(BANK1[11]), RTXReadPkt@numRxByte(BANK0[1]), RTXSndPkt@numTxByte(BANK0[1]), RTXSndPkt@numRxByte(BANK0[1]), 
		 -> RTXSndPkt@sta(BANK0[1]), 


Critical Paths under _main in COMMON

    _main->_CC1Init
    _main->_PGMInit
    _RTXAwake->_CC1Init
    _LEDFastFlash->_DLYDelay_ms
    _CC1Init->_CC1Write
    _RTXSndPkt->_CC1Read
    _CC1Write->_SPIWrite
    _ADCConv->___lwtoft
    ___ftsub->___ftadd
    ___ftadd->___ftpack
    ___ftmul->___lwtoft
    ___lwtoft->___ftpack
    ___lltoft->___ftpack
    ___ftdiv->___lwtoft
    _PGMSelLong->_LEDNormalFlash
    _PGMSelLong->_PGMWriteNvm
    _RTXReadPkt->_CC1Read
    _RTXRcvPkt->_CC1Read
    _CC1Read->_SPIWrite
    _LEDNormalFlash->_DLYDelay_ms
    _CC1Strobe->_SPIWrite
    _PGMReadNvm->_NVMRead
    _PGMCheckNvm->_PGMNvmReset
    _PGMNvmReset->_PGMWriteNvm
    _PGMWriteNvm->_NVMWrite

Critical Paths under _INTIsr in COMMON

    None.

Critical Paths under _main in BANK0

    _SYSTask->_PGMSelUp
    _RTXTick->_RTXSendData
    _RTXAwake->_RTXInit
    _RTXStartSendData->_ADCConv
    _RTXSendData->_RTXSndPkt
    _CC1Init->_CC1Write
    _RTXStartSendPgm->_ADCConv
    _RTXSendPgm->_RTXSndPkt
    _RTXSndPkt->_CC1Write
    _ADCConv->___ftdiv
    _sqrt->___ftmul
    ___ftsub->___ftadd
    ___ftmul->___lltoft
    ___ftdiv->_sqrt
    _RTXTask->_RTXReadPkt
    _PGMWriteNvm->_NVMWrite

Critical Paths under _INTIsr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTIsr in BANK1

    None.

Critical Paths under _main in BANK2

    _SYSTask->_ADCConv
    _RTXStartSendData->_ADCConv
    _RTXStartSendPgm->_ADCConv

Critical Paths under _INTIsr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTIsr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTIsr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTIsr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTIsr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTIsr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTIsr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTIsr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTIsr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTIsr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTIsr in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  161477
                                             71 BANK0      2     2      0
                            _ADCInit
                            _CC1Init
                            _DINInit
                            _DINTask
                             _INInit
                            _LEDInit
                            _NVMInit
                            _OUTInit
                            _PGMInit
                            _RTXInit
                            _RTXTask
                            _SPIInit
                            _SYSInit
                            _SYSTask
 ---------------------------------------------------------------------------------
 (1) _SYSTask                                              0     0      0  113699
                            _ADCConv
                            _DINTick
                          _PGMPgmOff
                         _PGMSelLong
                           _PGMSelUp
                            _PGMTick
                           _RTXAwake
                            _RTXTick
 ---------------------------------------------------------------------------------
 (2) _RTXTick                                              0     0      0   10315
                        _RTXSendData
                         _RTXSendPgm
 ---------------------------------------------------------------------------------
 (2) _RTXAwake                                             0     0      0   39301
                            _CC1Init
                        _DLYDelay_ms
                            _RTXInit
 ---------------------------------------------------------------------------------
 (3) _RTXInit                                              1     1      0   35228
                                             63 BANK0      1     1      0
                          _CC1Strobe
                   _RTXStartSendData
 ---------------------------------------------------------------------------------
 (4) _RTXStartSendData                                     0     0      0   34507
                            _ADCConv
                        _DLYDelay_ms
                        _RTXSendData
 ---------------------------------------------------------------------------------
 (3) _RTXSendData                                          7     7      0    5828
                                              8 BANK0      7     7      0
                       _LEDFastFlash
                          _RTXSndPkt
 ---------------------------------------------------------------------------------
 (4) _LEDFastFlash                                         3     3      0    1137
                                              7 COMMON     3     3      0
                        _DLYDelay_ms
 ---------------------------------------------------------------------------------
 (3) _CC1Init                                              2     2      0    3004
                                             11 COMMON     1     1      0
                                              2 BANK0      1     1      0
                          _CC1Strobe
                           _CC1Write
                        _DLYDelay_ms
 ---------------------------------------------------------------------------------
 (2) _PGMTick                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PGMSelUp                                             1     1      0   34251
                                             69 BANK0      1     1      0
                        _PGMWriteNvm
                    _RTXStartSendPgm
 ---------------------------------------------------------------------------------
 (3) _RTXStartSendPgm                                      0     0      0   33166
                            _ADCConv
                        _DLYDelay_ms
                         _RTXSendPgm
 ---------------------------------------------------------------------------------
 (3) _RTXSendPgm                                           1     1      0    4487
                                              8 BANK0      1     1      0
                          _PGMPgmOff
                          _RTXSndPkt
 ---------------------------------------------------------------------------------
 (4) _RTXSndPkt                                            6     5      1    4487
                                              2 BANK0      6     5      1
                            _CC1Read
                          _CC1Strobe
                           _CC1Write
 ---------------------------------------------------------------------------------
 (5) _CC1Write                                             6     3      3    1214
                                              7 COMMON     4     1      3
                                              0 BANK0      2     2      0
                           _SPIWrite
 ---------------------------------------------------------------------------------
 (5) _ADCConv                                             27    27      0   27610
                                             55 BANK0      8     8      0
                                              0 BANK2     19    19      0
                        _DLYDelay_ms
                            ___ftdiv
                            ___ftmul
                            ___lldiv
                           ___lltoft
                             ___lmul
                            ___lwdiv
                           ___lwtoft
                               _sqrt
 ---------------------------------------------------------------------------------
 (6) _sqrt                                                19    16      3   10233
                                             20 BANK0     19    16      3
                             ___ftge
                            ___ftmul
                            ___ftsub
 ---------------------------------------------------------------------------------
 (7) ___ftsub                                              6     0      6    4153
                                             10 BANK0      6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (8) ___ftadd                                             13     7      6    3903
                                              9 COMMON     3     3      0
                                              0 BANK0     10     4      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             16    10      6    4860
                                              4 BANK0     16    10      6
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftge                                               9     3      6     506
                                              1 COMMON     9     3      6
 ---------------------------------------------------------------------------------
 (6) ___lwtoft                                             4     1      3    2632
                                              9 COMMON     3     0      3
                                              0 BANK0      1     1      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              8     4      4     395
                                              1 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (6) ___lmul                                              12     4      8     290
                                              1 COMMON     8     0      8
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (6) ___lltoft                                             6     2      4    2780
                                              9 COMMON     2     2      0
                                              0 BANK0      4     0      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___lldiv                                             14     6      8     395
                                              1 COMMON     9     1      8
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    4022
                                             39 BANK0     16    10      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
                               _sqrt (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftpack                                             8     3      5    2524
                                              1 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (2) _PGMSelLong                                           1     1      0    2222
                                             10 COMMON     1     1      0
                     _LEDNormalFlash
                        _PGMWriteNvm
 ---------------------------------------------------------------------------------
 (2) _DINTick                                              1     1      0       0
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSInit                                              2     2      0      31
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _SPIInit                                              2     2      0      31
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _RTXTask                                              0     0      0    7350
                         _RTXReadPkt
 ---------------------------------------------------------------------------------
 (2) _RTXReadPkt                                           2     2      0    7350
                                             69 BANK0      2     2      0
                            _CC1Read
                          _CC1Strobe
                     _LEDNormalFlash
                          _PGMPgmOff
                        _PGMWriteNvm
                          _RTXRcvPkt
 ---------------------------------------------------------------------------------
 (3) _RTXRcvPkt                                            4     3      1    2260
                                              0 BANK0      4     3      1
                            _CC1Read
 ---------------------------------------------------------------------------------
 (5) _CC1Read                                              5     3      2    2079
                                              7 COMMON     5     3      2
                            _SPIRead
                           _SPIWrite
 ---------------------------------------------------------------------------------
 (6) _SPIRead                                              5     4      1     249
                                              1 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (4) _PGMPgmOff                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _LEDNormalFlash                                       3     3      0    1137
                                              7 COMMON     3     3      0
                        _DLYDelay_ms
 ---------------------------------------------------------------------------------
 (5) _DLYDelay_ms                                          6     4      2    1069
                                              1 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (5) _CC1Strobe                                            3     3      0     690
                                              7 COMMON     3     3      0
                           _SPIWrite
 ---------------------------------------------------------------------------------
 (6) _SPIWrite                                             6     3      3     622
                                              1 COMMON     6     3      3
 ---------------------------------------------------------------------------------
 (1) _PGMInit                                              1     1      0    1539
                                             11 COMMON     1     1      0
                        _PGMCheckNvm
                         _PGMReadNvm
 ---------------------------------------------------------------------------------
 (2) _PGMReadNvm                                           2     2      0     423
                                              8 COMMON     2     2      0
                            _NVMRead
 ---------------------------------------------------------------------------------
 (3) _NVMRead                                              7     3      4     423
                                              1 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) _PGMCheckNvm                                          0     0      0    1085
                        _PGMNvmReset
 ---------------------------------------------------------------------------------
 (3) _PGMNvmReset                                          1     1      0    1085
                                             10 COMMON     1     1      0
                        _PGMWriteNvm
 ---------------------------------------------------------------------------------
 (3) _PGMWriteNvm                                          2     2      0    1085
                                              8 COMMON     2     2      0
                           _NVMWrite
 ---------------------------------------------------------------------------------
 (4) _NVMWrite                                            76    72      4    1085
                                              1 COMMON     7     3      4
                                              0 BANK0     69    69      0
 ---------------------------------------------------------------------------------
 (1) _OUTInit                                              2     2      0      31
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _NVMInit                                              1     1      0      31
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LEDInit                                              1     1      0      31
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _INInit                                               2     2      0      31
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DINTask                                              1     1      0       0
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DINInit                                              1     1      0      31
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADCInit                                              2     2      0      31
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _INTIsr                                              1     1      0       0
                                              0 COMMON     1     1      0
                             _SYSInt
 ---------------------------------------------------------------------------------
 (11) _SYSInt                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCInit
   _CC1Init
     _CC1Strobe
       _SPIWrite
     _CC1Write
       _SPIWrite
     _DLYDelay_ms
   _DINInit
   _DINTask
   _INInit
   _LEDInit
   _NVMInit
   _OUTInit
   _PGMInit
     _PGMCheckNvm
       _PGMNvmReset
         _PGMWriteNvm
           _NVMWrite
     _PGMReadNvm
       _NVMRead
   _RTXInit
     _CC1Strobe
       _SPIWrite
     _RTXStartSendData
       _ADCConv
         _DLYDelay_ms
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _sqrt (ARG)
             ___ftge
             ___ftmul
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftsub
               ___ftadd
                 ___ftpack
         ___ftmul
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___lldiv
         ___lltoft
           ___ftpack
         ___lmul
         ___lwdiv
         ___lwtoft
           ___ftpack
         _sqrt
           ___ftge
           ___ftmul
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftsub
             ___ftadd
               ___ftpack
       _DLYDelay_ms
       _RTXSendData
         _LEDFastFlash
           _DLYDelay_ms
         _RTXSndPkt
           _CC1Read
             _SPIRead
             _SPIWrite
           _CC1Strobe
             _SPIWrite
           _CC1Write
             _SPIWrite
   _RTXTask
     _RTXReadPkt
       _CC1Read
         _SPIRead
         _SPIWrite
       _CC1Strobe
         _SPIWrite
       _LEDNormalFlash
         _DLYDelay_ms
       _PGMPgmOff
       _PGMWriteNvm
         _NVMWrite
       _RTXRcvPkt
         _CC1Read
           _SPIRead
           _SPIWrite
   _SPIInit
   _SYSInit
   _SYSTask
     _ADCConv
       _DLYDelay_ms
       ___ftdiv
         ___ftmul (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _sqrt (ARG)
           ___ftge
           ___ftmul
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftsub
             ___ftadd
               ___ftpack
       ___ftmul
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lldiv
       ___lltoft
         ___ftpack
       ___lmul
       ___lwdiv
       ___lwtoft
         ___ftpack
       _sqrt
         ___ftge
         ___ftmul
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftsub
           ___ftadd
             ___ftpack
     _DINTick
     _PGMPgmOff
     _PGMSelLong
       _LEDNormalFlash
         _DLYDelay_ms
       _PGMWriteNvm
         _NVMWrite
     _PGMSelUp
       _PGMWriteNvm
         _NVMWrite
       _RTXStartSendPgm
         _ADCConv
           _DLYDelay_ms
           ___ftdiv
             ___ftmul (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _sqrt (ARG)
               ___ftge
               ___ftmul
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftsub
                 ___ftadd
                   ___ftpack
           ___ftmul
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___lldiv
           ___lltoft
             ___ftpack
           ___lmul
           ___lwdiv
           ___lwtoft
             ___ftpack
           _sqrt
             ___ftge
             ___ftmul
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftsub
               ___ftadd
                 ___ftpack
         _DLYDelay_ms
         _RTXSendPgm
           _PGMPgmOff
           _RTXSndPkt
             _CC1Read
               _SPIRead
               _SPIWrite
             _CC1Strobe
               _SPIWrite
             _CC1Write
               _SPIWrite
     _PGMTick
     _RTXAwake
       _CC1Init
         _CC1Strobe
           _SPIWrite
         _CC1Write
           _SPIWrite
         _DLYDelay_ms
       _DLYDelay_ms
       _RTXInit
         _CC1Strobe
           _SPIWrite
         _RTXStartSendData
           _ADCConv
             _DLYDelay_ms
             ___ftdiv
               ___ftmul (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _sqrt (ARG)
                 ___ftge
                 ___ftmul
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftsub
                   ___ftadd
                     ___ftpack
             ___ftmul
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___lldiv
             ___lltoft
               ___ftpack
             ___lmul
             ___lwdiv
             ___lwtoft
               ___ftpack
             _sqrt
               ___ftge
               ___ftmul
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftsub
                 ___ftadd
                   ___ftpack
           _DLYDelay_ms
           _RTXSendData
             _LEDFastFlash
               _DLYDelay_ms
             _RTXSndPkt
               _CC1Read
                 _SPIRead
                 _SPIWrite
               _CC1Strobe
                 _SPIWrite
               _CC1Write
                 _SPIWrite
     _RTXTick
       _RTXSendData
         _LEDFastFlash
           _DLYDelay_ms
         _RTXSndPkt
           _CC1Read
             _SPIRead
             _SPIWrite
           _CC1Strobe
             _SPIWrite
           _CC1Write
             _SPIWrite
       _RTXSendPgm
         _PGMPgmOff
         _RTXSndPkt
           _CC1Read
             _SPIRead
             _SPIWrite
           _CC1Strobe
             _SPIWrite
           _CC1Write
             _SPIWrite

 _INTIsr (ROOT)
   _SYSInt

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     49      49       5       91.3%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      3E       7       77.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     13      42       9       82.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      D6      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10               8      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      D6      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed Oct 04 00:36:00 2017

       __size_of_CC1Strobe 0014                 __CFG_CP$ON 0000                         l40 0BCF  
                       l18 0AD2                         l60 0A3D              ?_LEDFastFlash 0070  
                       l64 0A58                         l69 0ADE                         l78 0A13  
             ?_DLYDelay_ms 0071               ___ftadd@exp1 007B               ___ftadd@exp2 007A  
             ___ftadd@sign 0079                        l200 089F                        l121 0C29  
                      l202 08A7                        l131 0152                        l300 0B26  
                      l124 005E                        l133 0154                        l302 0B25  
                      l126 0060                        l240 08B2                        l154 09B3  
                      l252 062F                        l180 0C88                        l245 0B70  
                      l262 0676                        l254 063A                        l255 065E  
                      l272 06D6                        l256 0649                        l522 0F55  
                      l267 06BD                        l259 066D                        l269 06C4  
                      l383 0981                        l607 0BA6                        l297 0922  
                      l479 0B5A                        l496 0E8D                        l686 0E3E  
                      l863 07D3                        l687 0E7F                        l864 07DB  
                      l856 07C0                        l688 0E80                        l887 04D7  
          __end_of_CC1Init 0C89            __end_of_CC1Read 0A00            __end_of_ADCConv 0438  
          __end_of_ADCInit 0C2A               __CFG_BORV$LO 0000                        wreg 0009  
               _RTXReadPkt 0D96            __end_of_DINInit 0923            __end_of_DINTask 0AB4  
          __end_of_DINTick 0B37               __CFG_LVP$OFF 0000                 _RTXSendPgm 0D5A  
         _RTXStartSendData 0904            __end_of_LEDInit 08A8               ___ftdiv@cntr 0051  
             ___ftdiv@sign 0056                       l1055 0557                       l1057 0590  
                     l4000 0D74                       l4020 0D91                       l4120 08BC  
                     l3402 0AE3                       l4130 0992                       l4026 0C5C  
                     l4060 0B5E                       l3412 0A18                       l4036 0C7F  
                     l4310 0AA9                       l4214 0AB6                       l4222 0ACD  
                     l3414 0A01                       l4046 0A1F                       l3406 0AD5  
                     l3422 0460                       l4232 0BCA                       l3432 0476  
                     l4136 0997                       l4160 0941                       l4400 0CB2  
                     l4314 0AAC                       l4306 0A9C                       l4226 0BA9  
                     l4146 09A9                       l3370 0796                       l3522 0D35  
                     l3450 04A3                       l3426 0467                       l4082 0B3A  
                     l4090 0B4E                       l4260 0C0B                       l4324 096E  
                     l4252 0A4D                       l3452 04AD                       l3444 0490  
                     l3604 055F                       l4084 0B3F                       l4270 0C21  
                     l4318 0AB0                       l4326 0972                       l4334 0979  
                     l4342 0B83                       l3374 079D                       l3526 0D4B  
                     l3550 0707                       l3462 04C9                       l3454 04B2  
                     l4256 0BFD                       l4360 0B9B                       l3376 07A7  
                     l3720 0E2F                       l3544 06F1                       l3472 04FB  
                     l3464 04D3                       l3456 04B6                       l4282 08A2  
                     l4290 08AD                       l4186 0DD0                       l3386 07D1  
                     l3378 07AC                       l3706 0DF6                       l3730 0BE6  
                     l3650 0CCD                       l3562 0742                       l3482 0516  
                     l3810 0159                       l3642 0EA7                       l3634 0A79  
                     l4196 0DE3                       l4364 0B9E                       l3388 07C5  
                     l3716 0E24                       l3708 0E04                       l3468 04E9  
                     l4294 0915                       l4286 08AA                       l3670 0F84  
                     l3646 0CC2                       l3574 075E                       l3566 074A  
                     l3830 01F3                       l3664 0F6E                       l3728 0BD4  
                     l3752 0D11                       l3744 0CF3                       l3592 0A61  
                     l4392 0CA9                       l4376 0C96                       l4298 091D  
                     l3922 06BF                       l3930 06D1                       l3914 069F  
                     l3746 0CFF                       l3578 0766                       l3834 01FD  
                     l3826 01AD                       l3818 01A0                       l4386 0CA2  
                     l3908 0699                       l3692 0FDE                       l3684 0FC5  
                     l3756 0D1A                       l3860 0280                       l3852 0252  
                     l3844 0245                       l3774 0065                       l3782 00AC  
                     l3950 0EFD                       l3864 02BC                       l3952 0F03  
                     l3794 00D8                       l3788 00B3                       l3998 0D6E  
             __CFG_WDTE$ON 0000          NVMWrite@bufTmpRow 0020                       u4105 0DF9  
                     u4035 0F96                       u3405 07CC                       u4045 0FA6  
                     u4125 0E05                       u5007 09C0                       u4055 0FC6  
                     u4135 0E19                       u4215 0D00                       _PIE1 0091  
                     _PIE2 0092                       u4065 0FD5                       u4145 0E25  
                     u4225 0D0A                       u4075 0FDF                       u4235 0D12  
                     u3445 07E2                       u3365 07A2                       u4165 0BDA  
                     u3385 07BB                       u3625 04A4                       u4345 01D4  
                     u4195 0CF6                       u3805 0723                       u3735 09B9  
                     u3655 04B7                       u3825 074B                       u3835 0751  
                     u3595 0491                       u3685 04CA                       u3925 057B  
                     u3865 0767                       _PIR1 0011                       _PIR2 0012  
                     u3875 076D                       u3795 0713                       u3985 0CCE  
                     u3995 0CD5                       u4987 0055                       u4997 0149  
                     _TMR0 0015                       _WPUB 020D            __end_of_PGMInit 0982  
          __end_of_PGMTick 0004               __CFG_WRT$OFF 0000              __CFG_FCMEN$ON 0000  
                     _batt 00A9                       _main 0E38           __end_of_CC1Write 0B14  
             ___ftpack@arg 0071            __end_of_NVMInit 08B3            __end_of_NVMRead 0B81  
             ___ftpack@exp 0074            __end_of_SPIInit 0A59            __end_of_SPIRead 0AF3  
                     fsr0h 0005                       fsr1h 0007                       fsr0l 0004  
                     indf0 0000                       indf1 0001                       fsr1l 0006  
                     btemp 007E                       _sqrt 052E            __end_of_OUTInit 0BD0  
            __CFG_BOREN$ON 0000                       ltemp 007E                       start 0014  
          __end_of_RTXInit 0B5B                       ttemp 007E          NVMWrite@latchAddr 0063  
          __end_of_RTXTask 0895            __end_of_RTXTick 0944                       wtemp 007E  
            __CFG_IESO$OFF 0000            __end_of_SYSInit 0BA7            __end_of_SYSTask 0CB9  
             ___ftmul@cntr 0032               ___ftmul@sign 0033               _ADCConv$1418 014F  
              ?_PGMReadNvm 0070              __CFG_LPBOR$ON 0000             ??_LEDFastFlash 0077  
              ?_PGMSelLong 0070                _RTXSendData 0EE1               SPIInit@state 0072  
                    ?_main 0070            __end_of___ftadd 052E            __end_of___ftdiv 1000  
          __end_of___lldiv 0E38                      ?_sqrt 0034            __end_of___ftmul 078E  
                    _T1CON 0018            __end_of___ftsub 0A77         __size_of_PGMPgmOff 0004  
                    _IOCBN 0395                      _IOCBP 0394            __end_of___lwdiv 0D1F  
                    _PMADR 0191                      _PMDAT 0193                      _TMR1H 0017  
                    _TMR1L 0016                      _PORTA 000C                      _PORTC 000E  
                    _TRISA 008C                      _TRISB 008D                      _TRISC 008E  
         __end_of_PGMSelUp 0999        ___lmul@multiplicand 0075              __CFG_PWRTE$ON 0000  
             ___lltoft@exp 007A                      _battV 00A0          __end_of_CC1Strobe 0958  
                    _errno 00AB                      _pktRx 00BB                      _pktTx 00C6  
            ___ftpack@sign 0075                      main@i 0068           __end_of_NVMWrite 06DA  
         __end_of_SPIWrite 0A1D                      ltemp0 007E                      ltemp1 0082  
                    ltemp2 0086                      ltemp3 0080           __end_of_RTXAwake 09E4  
                    ttemp0 007E                      ttemp1 0081                      ttemp2 0084  
                    ttemp3 0087                      ttemp4 007F                      sqrt@i 0040  
                    sqrt@q 0041                      sqrt@x 0044                      sqrt@y 0034  
                    sqrt@z 003D          LEDNormalFlash@num 0078                      status 0003  
                    wtemp0 007E                      wtemp1 0080                      wtemp2 0082  
                    wtemp3 0084                      wtemp4 0086                      wtemp5 0088  
                    wtemp6 007F               ?_PGMCheckNvm 0070   __size_of_RTXStartSendPgm 000F  
           __CFG_MCLRE$OFF 0000            __initialization 0016               DLYDelay_ms@i 0075  
             __end_of_main 0E8B         __size_of_RTXRcvPkt 000E         __size_of_RTXSndPkt 0056  
             __end_of_sqrt 061E                  ??_CC1Init 007B                  ??_CC1Read 0079  
                ??_ADCConv 0057                  ??_ADCInit 0071             CC1Strobe@e_stb 0078  
                   ??_main 0067                 _cc1PaTable 00D6                     ??_sqrt 0037  
             CC1Init@state 0022                  ??_DINInit 0071               NVMWrite@addr 0071  
                ??_DINTask 0071                  ??_DINTick 0071                 _cc1InitVal 0120  
                ??_LEDInit 0071               ?_PGMNvmReset 0070                  ??_PGMInit 007B  
                ??_PGMTick 0071                ?_RTXReadPkt 0070                     _ADCON0 009D  
                   _ADCON1 009E              SPIRead@dstPtr 0074                ?_RTXSendPgm 0070  
                ??_NVMInit 0071                  ??_NVMRead 0075                     _ADRESH 009C  
                   _ADRESL 009B                  ??_SPIInit 0071                  ??_SPIRead 0072  
           _LEDNormalFlash 0A1D                  ??_OUTInit 0071                     _ANSELA 018C  
                   _ANSELB 018D                     _ANSELC 018E           __end_of___ftpack 07F2  
      __size_of_PGMReadNvm 000F           __end_of___lltoft 0BFB                  ??_RTXInit 007C  
             ?_PGMWriteNvm 0070                     i1l3334 000D                  ??_RTXTask 007C  
                ??_RTXTick 007C        __size_of_PGMSelLong 0018                     _INTCON 000B  
                   _FVRCON 0117                  ??_SYSInit 0071           __end_of___lwtoft 096C  
                   _PMCON1 0195                     _PMCON2 0196                  ??_SYSTask 007C  
                   _INTIsr 0004                     _OSCCON 0099                     _INInit 0AB4  
                   _WDTCON 0097                     _SSPBUF 0211              LEDFastFlash@i 0079  
        __end_of_PGMPgmOff 0889                     _SYSInt 0889        RTXReadPkt@numRxByte 0066  
                   ___ftge 0D1F                     ___lmul 0CB9                  ??___ftadd 0026  
           __CFG_STVREN$ON 0000                  ??___ftdiv 004D                  ??___lldiv 0079  
                ??___ftmul 002A                  ??___ftsub 007C                  ??___lwdiv 0075  
    ___ftmul@f3_as_product 002F       __size_of_DLYDelay_ms 0019                  ?_CC1Write 0077  
   __end_of_LEDNormalFlash 0A3B                     sqrt@og 003A          __end_of_RTXRcvPkt 0800  
        __end_of_RTXSndPkt 0EE1       __end_of_LEDFastFlash 0A95    __end_of__initialization 0048  
               ___ftadd@f1 0020                 ___ftadd@f2 0023                 ___ftge@ff1 0071  
               ___ftge@ff2 0074                 ___ftdiv@f1 004A                 ___ftdiv@f2 0047  
               ___ftdiv@f3 0052                 ___ftmul@f1 0024                 ___ftmul@f2 0027  
               ___ftsub@f1 002D                 ___ftsub@f2 002A             __pcstackCOMMON 0070  
                ?_PGMSelUp 0070               __pidataBANK1 0895               __pidataBANK2 0C2A  
      __size_of_RTXReadPkt 004F   __end_of_RTXStartSendData 0913                 ___lltoft@c 0020  
          NVMWrite@rowAddr 0060          ??_RTXStartSendPgm 007C        __size_of_RTXSendPgm 003C  
                ?_NVMWrite 0071            CC1Strobe@cc1Stb 0079             ADCConv@maxCurr 0158  
               ___lwtoft@c 0079                  ?_SPIWrite 0071                 CC1Read@len 0078  
               CC1Read@dst 0077                  ?_RTXAwake 0070                 ??_CC1Write 007A  
             CC1Write@addr 0020             ADCConv@sumBatt 0156             ADCConv@sumCurr 0152  
          ?_LEDNormalFlash 0070                 __pbssBANK1 00A0                    ?_INTIsr 0070  
                  ?_INInit 0070            __CFG_VCAPEN$OFF 0000                    ?_SYSInt 0070  
                INInit@sta 0072       __size_of_PGMCheckNvm 000C                 __pmaintext 0E38  
               ??_PGMSelUp 0065                    ?___ftge 0071                    ?___lmul 0071  
             ??_PGMReadNvm 0078            CC1Write@cc1Addr 0021               ??_PGMSelLong 007A  
               __pintentry 0004               ?_RTXSendData 0070                    _CC1Init 0C59  
                  _CC1Read 09E4                    _ADCConv 004B                    _ADCInit 0BFB  
           ___lmul@product 0020          _u_in_sta_currTask 00B9                  ?___ftpack 0071  
               ??_NVMWrite 0075                 _cntSndData 00AF                  ?___lltoft 0020  
               ??_SPIWrite 0074                  ?___lwtoft 0079                    _DINInit 0913  
               ??_RTXAwake 007C                    _DINTick 0B14                    _DINTask 0A95  
             ADCInit@state 0072                    _LEDInit 089D         RTXSendData@valBatt 002C  
                  _PGMInit 096C                    _PGMTick 0003         RTXSendData@valTemp 0029  
     __size_of_PGMNvmReset 0010                    _SSPCON1 0215                    _SSPCON2 0216  
                  _NVMInit 08A8                    _NVMRead 0B5B                    _SPIInit 0A3B  
                  _SPIRead 0AD3                    _SSPSTAT 0214                    _OUTInit 0BA7  
                  _RTXInit 0B37                    _RTXTick 0933                    _RTXTask 088F  
       __end_of_PGMReadNvm 08F5                    _SYSInit 0B81          ADCConv@sumEavCurr 015D  
                  _SYSTask 0C89         __end_of_PGMSelLong 09B1                  _CC1Strobe 0944  
          __size_of_INTIsr 0010            __size_of_INInit 001F       __size_of_PGMWriteNvm 000F  
          __size_of_SYSInt 0006                  NVMWrite@i 0062                  NVMWrite@j 0064  
                SPIWrite@i 0076            __size_of___ftge 003B            __size_of___lmul 0032  
                  ___ftadd 0438               RTXInit@state 005F                    ___ftdiv 0F57  
                  ___lldiv 0DE5                    ___ftmul 06DA                    ___ftsub 0A59  
                  ___lwdiv 0CEB                 ??___ftpack 0076                 ??___lltoft 0079  
                  __ptext1 0C89                    __ptext2 0933                    __ptext3 09CA  
                  __ptext4 0B37                    __ptext5 0904                    __ptext6 0EE1  
                  __ptext7 0A77                    __ptext8 0C59                    __ptext9 0003  
                  _flg_slp 00B0                 ??___lwtoft 0020                    _pgm_cfg 00D1  
                  _pgm_flg 007C      __size_of_LEDFastFlash 001E                  _IOCBFbits 0396  
                  _rmsCurr 00A6               ??_RTXReadPkt 0065               ??_RTXSendPgm 0028  
                  clrloop0 08CC                    _rtx_flg 00B1               RTXRcvPkt@len 0020  
             RTXRcvPkt@dst 0023       end_of_initialization 0048                 _u_in_ev_up 00B8  
               ?_CC1Strobe 0070         RTXSndPkt@numRxByte 0024                    init_ram 08BF  
       RTXSndPkt@numTxByte 0026                    initloop 08C0               RTXSndPkt@len 0022  
             RTXSndPkt@src 0025               RTXSndPkt@sta 0027            ___lldiv@divisor 0071  
          ___lldiv@counter 0024                  _PGMPgmOff 0885                 _tmrDbncSel 00B2  
       __end_of_RTXReadPkt 0DE5                 DINInit@sta 0071               _LEDFastFlash 0A77  
       __end_of_RTXSendPgm 0D96                  _PORTBbits 000D                 _tmrLongSel 00AD  
         __CFG_FOSC$INTOSC 0000          __size_of_CC1Write 0021                NVMRead@addr 0071  
              NVMRead@dest 0073                  _RTXRcvPkt 07F2                  _RTXSndPkt 0E8B  
              ___ftdiv@exp 0055            _RTXStartSendPgm 08F5             __end_of_INTIsr 0014  
           __end_of_INInit 0AD3        _nvm_pgm_cfg_absaddr 3820             __end_of_SYSInt 088F  
              ___ftmul@exp 002E                 ?_PGMPgmOff 0070                 LEDInit@sta 0071  
           DLYDelay_ms@val 0071          ?_RTXStartSendData 0070             __end_of___ftge 0D5A  
           __end_of___lmul 0CEB          __size_of_PGMSelUp 0017              ??_DLYDelay_ms 0073  
       ??_RTXStartSendData 007C       __size_of_RTXSendData 0076           ??_LEDNormalFlash 0077  
             SYSInit@state 0072          __size_of_NVMWrite 00BC          __size_of_SPIWrite 001D  
      start_initialization 0016          __size_of_RTXAwake 001A                CC1Read@addr 007A  
              NVMWrite@len 0074                   ADCConv@i 0161                   ADCConv@j 015C  
                 ??_INTIsr 0070                   ??_INInit 0071                ??_CC1Strobe 0077  
               ?_RTXRcvPkt 0020                 ?_RTXSndPkt 0022                   ??_SYSInt 0070  
           CC1Read@cc1Addr 007B                   ??___ftge 0077                   ??___lmul 0079  
                 ?_CC1Init 0070                __pdataBANK1 00D6                   ?_CC1Read 0077  
              __pdataBANK2 0120                SPIWrite@len 0073                   ?_ADCConv 0070  
                 ?_ADCInit 0070                   ?_DINInit 0070                   ?_DINTask 0070  
                 ?_DINTick 0070          __size_of___ftpack 0064                __pbssBIGRAM 2328  
                 ?_LEDInit 0070          __size_of___lltoft 002B                __pbssCOMMON 007C  
                ___latbits 0003          __size_of___lwtoft 0014              __pcstackBANK0 0020  
            __pcstackBANK2 014F        __end_of_DLYDelay_ms 09CA                   ?_PGMInit 0070  
                 ?_PGMTick 0070    __end_of_RTXStartSendPgm 0904                   ?_NVMInit 0070  
                 ?_NVMRead 0071                   ?_SPIInit 0070                   ?_SPIRead 0071  
           NVMWrite@source 0073                   ?_OUTInit 0070               PGMInit@state 007B  
                 ?_RTXInit 0070                   ?_RTXTask 0070                   ?_RTXTick 0070  
              CC1Write@len 0079                   ?_SYSInit 0070                CC1Write@src 0077  
                 ?_SYSTask 0070              ??_PGMCheckNvm 007B        __p_nvm_pgm_cfg_text 3820  
         ___lwdiv@dividend 0073                ??_PGMPgmOff 0071                   ?___ftadd 0020  
                 ?___ftdiv 0047                   ?___lldiv 0071                   ?___ftmul 0024  
                 ?___ftsub 002A                   ?___lwdiv 0071                  _u_SYS_STA 00B4  
         _u_in_sta_tmpTask 00BA                   NVMRead@i 0077              ??_PGMNvmReset 007A  
                 SPIRead@i 0075                   _CC1Write 0AF3           ___lwdiv@quotient 0077  
            ??_PGMWriteNvm 0078                  _u_flg_din 00B5                ??_RTXRcvPkt 0021  
              ??_RTXSndPkt 0023                   _LATAbits 010C                   _LATCbits 010E  
                clear_ram0 08CB                   _PIR1bits 0011                   _PGMSelUp 0982  
      __end_of_PGMCheckNvm 08BF                  _tmrRcvPkt 00B3           __size_of_CC1Init 0030  
         __size_of_CC1Read 001C                _DLYDelay_ms 09B1                   _NVMWrite 061E  
         __size_of_ADCConv 03ED           __size_of_ADCInit 002F                 _ADCON0bits 009D  
                 _SPIWrite 0A00                 NVMInit@sta 0071                 NVMRead@len 0074  
          LEDFastFlash@num 0078                   _RTXAwake 09CA           __size_of_DINInit 0010  
         __size_of_DINTask 001F           __size_of_DINTick 0023           __size_of_LEDInit 000B  
               SPIRead@len 0071           __size_of_PGMInit 0016           ?_RTXStartSendPgm 0070  
         __size_of_PGMTick 0001          ___lmul@multiplier 0071        __end_of_PGMNvmReset 0933  
         __size_of_NVMInit 000B           __size_of_NVMRead 0026           __size_of_SPIInit 001E  
         __size_of_SPIRead 0020               _u_in_ev_down 00B6            LEDNormalFlash@i 0079  
             _u_in_ev_long 00B7           __size_of_OUTInit 0029           __size_of_RTXInit 0024  
         __size_of_RTXTask 0006           __size_of_RTXTick 0011           __size_of_SYSInit 0026  
         __size_of_SYSTask 0030                 OUTInit@sta 0072        __end_of_PGMWriteNvm 08E6  
         __size_of___ftadd 00F6           __size_of___ftdiv 00A9           __size_of___lldiv 0053  
         __size_of___ftmul 00B4           __size_of___ftsub 001E           __size_of___lwdiv 0034  
                 ___ftpack 078E                   ___lltoft 0BD0                   _adc_vals 2328  
                 ___lwtoft 0958            ___lwdiv@divisor 0071            ___lwdiv@counter 0076  
                 __ptext10 0982                   __ptext11 08F5                   __ptext20 0D1F  
                 __ptext12 0D5A                   __ptext21 0958                   __ptext13 0E8B  
                 __ptext30 0B81                   __ptext22 0CEB                   __ptext14 0AF3  
                 __ptext31 0A3B                   __ptext23 0CB9                   __ptext15 004B  
                 __ptext40 0944                   __ptext32 088F                   __ptext24 0BD0  
                 __ptext16 052E                   __ptext41 0A00                   __ptext33 0D96  
                 __ptext25 0DE5                   __ptext17 0A59                   __ptext50 08A8  
                 __ptext42 096C                   __ptext34 07F2                   __ptext26 0F57  
                 __ptext18 0438                   __ptext51 089D                   __ptext43 08E6  
                 __ptext35 09E4                   __ptext27 078E                   __ptext19 06DA  
                 __ptext52 0AB4                   __ptext44 0B5B                   __ptext36 0AD3  
                 __ptext28 0999                   __ptext53 0A95                   __ptext45 08B3  
                 __ptext37 0885                   __ptext29 0B14                   __ptext54 0913  
                 __ptext46 0923                   __ptext38 0A1D                   __ptext55 0BFB  
                 __ptext47 08D7                   __ptext39 09B1                   __ptext48 061E  
                 __ptext57 0889                   __ptext49 0BA7                _realRmsCurr 00A3  
__size_of_RTXStartSendData 000F        __end_of_nvm_pgm_cfg 3840              __size_of_main 0053  
              _PGMCheckNvm 08B3              __size_of_sqrt 00F0              ??_RTXSendData 0028  
              _PGMNvmReset 0923                 _INTCONbits 000B             SPIWrite@srcPtr 0071  
                 intlevel1 0000                _PGMWriteNvm 08D7                 _PMCON1bits 0195  
         ___lldiv@dividend 0075          __CFG_CLKOUTEN$OFF 0000                 _PGMReadNvm 08E6  
               _PGMSelLong 0999                 _OPTION_REG 0095        __end_of_RTXSendData 0F57  
         ___lldiv@quotient 0020                _nvm_pgm_cfg 3820    __size_of_LEDNormalFlash 001E  
               _SSPCONbits 0215  
