

Microchip Technology PIC LITE Macro Assembler V1.34 build -361300703 
                                                                                               Fri Apr 15 19:10:35 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	_nvm_pgm_cfg_text,global,class=CODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	inittext,global,class=CODE,delta=2
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text3,local,class=CODE,merge=1,delta=2
    21                           	psect	text4,local,class=CODE,merge=1,delta=2
    22                           	psect	text5,local,class=CODE,merge=1,delta=2
    23                           	psect	text6,local,class=CODE,merge=1,delta=2
    24                           	psect	text7,local,class=CODE,merge=1,delta=2
    25                           	psect	text8,local,class=CODE,merge=1,delta=2
    26                           	psect	text9,local,class=CODE,merge=1,delta=2
    27                           	psect	text10,local,class=CODE,merge=1,delta=2
    28                           	psect	text11,local,class=CODE,merge=1,delta=2
    29                           	psect	text12,local,class=CODE,merge=1,delta=2
    30                           	psect	text13,local,class=CODE,merge=1,delta=2
    31                           	psect	text14,local,class=CODE,merge=1,delta=2
    32                           	psect	text15,local,class=CODE,merge=1,delta=2
    33                           	psect	text16,local,class=CODE,merge=1,delta=2
    34                           	psect	text17,local,class=CODE,merge=1,delta=2
    35                           	psect	text18,local,class=CODE,merge=1,delta=2
    36                           	psect	text19,local,class=CODE,merge=1,delta=2
    37                           	psect	text20,local,class=CODE,merge=1,delta=2
    38                           	psect	text21,local,class=CODE,merge=1,delta=2
    39                           	psect	text22,local,class=CODE,merge=1,delta=2
    40                           	psect	text23,local,class=CODE,merge=1,delta=2
    41                           	psect	text24,local,class=CODE,merge=1,delta=2
    42                           	psect	text25,local,class=CODE,merge=1,delta=2
    43                           	psect	text26,local,class=CODE,merge=1,delta=2
    44                           	psect	text27,local,class=CODE,merge=1,delta=2
    45                           	psect	text28,local,class=CODE,merge=1,delta=2
    46                           	psect	text29,local,class=CODE,merge=1,delta=2
    47                           	psect	text30,local,class=CODE,merge=1,delta=2
    48                           	psect	text31,local,class=CODE,merge=1,delta=2
    49                           	psect	text32,local,class=CODE,merge=1,delta=2
    50                           	psect	text33,local,class=CODE,merge=1,delta=2
    51                           	psect	text34,local,class=CODE,merge=1,delta=2
    52                           	psect	text35,local,class=CODE,merge=1,delta=2
    53                           	psect	text36,local,class=CODE,merge=1,delta=2
    54                           	psect	text37,local,class=CODE,merge=1,delta=2
    55                           	psect	text38,local,class=CODE,merge=1,delta=2
    56                           	psect	text39,local,class=CODE,merge=1,delta=2
    57                           	psect	text40,local,class=CODE,merge=1,delta=2
    58                           	psect	text41,local,class=CODE,merge=1,delta=2
    59                           	psect	text42,local,class=CODE,merge=1,delta=2
    60                           	psect	text43,local,class=CODE,merge=1,delta=2
    61                           	psect	text44,local,class=CODE,merge=1,delta=2
    62                           	psect	text45,local,class=CODE,merge=1,delta=2
    63                           	psect	text46,local,class=CODE,merge=1,delta=2
    64                           	psect	text47,local,class=CODE,merge=1,delta=2
    65                           	psect	text48,local,class=CODE,merge=1,delta=2
    66                           	psect	text49,local,class=CODE,merge=1,delta=2
    67                           	psect	text50,local,class=CODE,merge=1,delta=2
    68                           	psect	text51,local,class=CODE,merge=1,delta=2
    69                           	psect	text52,local,class=CODE,merge=1,delta=2
    70                           	psect	text53,local,class=CODE,merge=1,delta=2
    71                           	psect	text54,local,class=CODE,merge=1,delta=2
    72                           	psect	text55,local,class=CODE,merge=1,delta=2
    73                           	psect	text56,local,class=CODE,merge=1,delta=2
    74                           	psect	intentry,global,class=CODE,delta=2
    75                           	psect	text58,local,class=CODE,merge=1,delta=2
    76                           	dabs	1,0x7E,2
    77  0000                     	;# 
    78  0001                     	;# 
    79  0002                     	;# 
    80  0003                     	;# 
    81  0004                     	;# 
    82  0005                     	;# 
    83  0006                     	;# 
    84  0007                     	;# 
    85  0008                     	;# 
    86  0009                     	;# 
    87  000A                     	;# 
    88  000B                     	;# 
    89  000C                     	;# 
    90  000D                     	;# 
    91  000E                     	;# 
    92  0010                     	;# 
    93  0011                     	;# 
    94  0012                     	;# 
    95  0015                     	;# 
    96  0016                     	;# 
    97  0016                     	;# 
    98  0017                     	;# 
    99  0018                     	;# 
   100  0019                     	;# 
   101  001A                     	;# 
   102  001B                     	;# 
   103  001C                     	;# 
   104  008C                     	;# 
   105  008D                     	;# 
   106  008E                     	;# 
   107  0090                     	;# 
   108  0091                     	;# 
   109  0092                     	;# 
   110  0095                     	;# 
   111  0096                     	;# 
   112  0097                     	;# 
   113  0099                     	;# 
   114  009A                     	;# 
   115  009B                     	;# 
   116  009B                     	;# 
   117  009C                     	;# 
   118  009D                     	;# 
   119  009E                     	;# 
   120  010C                     	;# 
   121  010D                     	;# 
   122  010E                     	;# 
   123  0116                     	;# 
   124  0117                     	;# 
   125  011D                     	;# 
   126  018C                     	;# 
   127  018D                     	;# 
   128  018E                     	;# 
   129  0191                     	;# 
   130  0191                     	;# 
   131  0192                     	;# 
   132  0193                     	;# 
   133  0193                     	;# 
   134  0194                     	;# 
   135  0195                     	;# 
   136  0196                     	;# 
   137  0197                     	;# 
   138  0199                     	;# 
   139  019A                     	;# 
   140  019B                     	;# 
   141  019B                     	;# 
   142  019B                     	;# 
   143  019B                     	;# 
   144  019C                     	;# 
   145  019C                     	;# 
   146  019D                     	;# 
   147  019E                     	;# 
   148  019F                     	;# 
   149  020D                     	;# 
   150  0210                     	;# 
   151  0211                     	;# 
   152  0211                     	;# 
   153  0212                     	;# 
   154  0212                     	;# 
   155  0213                     	;# 
   156  0213                     	;# 
   157  0214                     	;# 
   158  0214                     	;# 
   159  0215                     	;# 
   160  0215                     	;# 
   161  0215                     	;# 
   162  0216                     	;# 
   163  0216                     	;# 
   164  0217                     	;# 
   165  0217                     	;# 
   166  0291                     	;# 
   167  0291                     	;# 
   168  0292                     	;# 
   169  0293                     	;# 
   170  0298                     	;# 
   171  0298                     	;# 
   172  0299                     	;# 
   173  029A                     	;# 
   174  0394                     	;# 
   175  0395                     	;# 
   176  0396                     	;# 
   177  0FE4                     	;# 
   178  0FE5                     	;# 
   179  0FE6                     	;# 
   180  0FE7                     	;# 
   181  0FE8                     	;# 
   182  0FE9                     	;# 
   183  0FEA                     	;# 
   184  0FEB                     	;# 
   185  0FED                     	;# 
   186  0FEE                     	;# 
   187  0FEF                     	;# 
   188  0000                     	;# 
   189  0001                     	;# 
   190  0002                     	;# 
   191  0003                     	;# 
   192  0004                     	;# 
   193  0005                     	;# 
   194  0006                     	;# 
   195  0007                     	;# 
   196  0008                     	;# 
   197  0009                     	;# 
   198  000A                     	;# 
   199  000B                     	;# 
   200  000C                     	;# 
   201  000D                     	;# 
   202  000E                     	;# 
   203  0010                     	;# 
   204  0011                     	;# 
   205  0012                     	;# 
   206  0015                     	;# 
   207  0016                     	;# 
   208  0016                     	;# 
   209  0017                     	;# 
   210  0018                     	;# 
   211  0019                     	;# 
   212  001A                     	;# 
   213  001B                     	;# 
   214  001C                     	;# 
   215  008C                     	;# 
   216  008D                     	;# 
   217  008E                     	;# 
   218  0090                     	;# 
   219  0091                     	;# 
   220  0092                     	;# 
   221  0095                     	;# 
   222  0096                     	;# 
   223  0097                     	;# 
   224  0099                     	;# 
   225  009A                     	;# 
   226  009B                     	;# 
   227  009B                     	;# 
   228  009C                     	;# 
   229  009D                     	;# 
   230  009E                     	;# 
   231  010C                     	;# 
   232  010D                     	;# 
   233  010E                     	;# 
   234  0116                     	;# 
   235  0117                     	;# 
   236  011D                     	;# 
   237  018C                     	;# 
   238  018D                     	;# 
   239  018E                     	;# 
   240  0191                     	;# 
   241  0191                     	;# 
   242  0192                     	;# 
   243  0193                     	;# 
   244  0193                     	;# 
   245  0194                     	;# 
   246  0195                     	;# 
   247  0196                     	;# 
   248  0197                     	;# 
   249  0199                     	;# 
   250  019A                     	;# 
   251  019B                     	;# 
   252  019B                     	;# 
   253  019B                     	;# 
   254  019B                     	;# 
   255  019C                     	;# 
   256  019C                     	;# 
   257  019D                     	;# 
   258  019E                     	;# 
   259  019F                     	;# 
   260  020D                     	;# 
   261  0210                     	;# 
   262  0211                     	;# 
   263  0211                     	;# 
   264  0212                     	;# 
   265  0212                     	;# 
   266  0213                     	;# 
   267  0213                     	;# 
   268  0214                     	;# 
   269  0214                     	;# 
   270  0215                     	;# 
   271  0215                     	;# 
   272  0215                     	;# 
   273  0216                     	;# 
   274  0216                     	;# 
   275  0217                     	;# 
   276  0217                     	;# 
   277  0291                     	;# 
   278  0291                     	;# 
   279  0292                     	;# 
   280  0293                     	;# 
   281  0298                     	;# 
   282  0298                     	;# 
   283  0299                     	;# 
   284  029A                     	;# 
   285  0394                     	;# 
   286  0395                     	;# 
   287  0396                     	;# 
   288  0FE4                     	;# 
   289  0FE5                     	;# 
   290  0FE6                     	;# 
   291  0FE7                     	;# 
   292  0FE8                     	;# 
   293  0FE9                     	;# 
   294  0FEA                     	;# 
   295  0FEB                     	;# 
   296  0FED                     	;# 
   297  0FEE                     	;# 
   298  0FEF                     	;# 
   299  0000                     	;# 
   300  0001                     	;# 
   301  0002                     	;# 
   302  0003                     	;# 
   303  0004                     	;# 
   304  0005                     	;# 
   305  0006                     	;# 
   306  0007                     	;# 
   307  0008                     	;# 
   308  0009                     	;# 
   309  000A                     	;# 
   310  000B                     	;# 
   311  000C                     	;# 
   312  000D                     	;# 
   313  000E                     	;# 
   314  0010                     	;# 
   315  0011                     	;# 
   316  0012                     	;# 
   317  0015                     	;# 
   318  0016                     	;# 
   319  0016                     	;# 
   320  0017                     	;# 
   321  0018                     	;# 
   322  0019                     	;# 
   323  001A                     	;# 
   324  001B                     	;# 
   325  001C                     	;# 
   326  008C                     	;# 
   327  008D                     	;# 
   328  008E                     	;# 
   329  0090                     	;# 
   330  0091                     	;# 
   331  0092                     	;# 
   332  0095                     	;# 
   333  0096                     	;# 
   334  0097                     	;# 
   335  0099                     	;# 
   336  009A                     	;# 
   337  009B                     	;# 
   338  009B                     	;# 
   339  009C                     	;# 
   340  009D                     	;# 
   341  009E                     	;# 
   342  010C                     	;# 
   343  010D                     	;# 
   344  010E                     	;# 
   345  0116                     	;# 
   346  0117                     	;# 
   347  011D                     	;# 
   348  018C                     	;# 
   349  018D                     	;# 
   350  018E                     	;# 
   351  0191                     	;# 
   352  0191                     	;# 
   353  0192                     	;# 
   354  0193                     	;# 
   355  0193                     	;# 
   356  0194                     	;# 
   357  0195                     	;# 
   358  0196                     	;# 
   359  0197                     	;# 
   360  0199                     	;# 
   361  019A                     	;# 
   362  019B                     	;# 
   363  019B                     	;# 
   364  019B                     	;# 
   365  019B                     	;# 
   366  019C                     	;# 
   367  019C                     	;# 
   368  019D                     	;# 
   369  019E                     	;# 
   370  019F                     	;# 
   371  020D                     	;# 
   372  0210                     	;# 
   373  0211                     	;# 
   374  0211                     	;# 
   375  0212                     	;# 
   376  0212                     	;# 
   377  0213                     	;# 
   378  0213                     	;# 
   379  0214                     	;# 
   380  0214                     	;# 
   381  0215                     	;# 
   382  0215                     	;# 
   383  0215                     	;# 
   384  0216                     	;# 
   385  0216                     	;# 
   386  0217                     	;# 
   387  0217                     	;# 
   388  0291                     	;# 
   389  0291                     	;# 
   390  0292                     	;# 
   391  0293                     	;# 
   392  0298                     	;# 
   393  0298                     	;# 
   394  0299                     	;# 
   395  029A                     	;# 
   396  0394                     	;# 
   397  0395                     	;# 
   398  0396                     	;# 
   399  0FE4                     	;# 
   400  0FE5                     	;# 
   401  0FE6                     	;# 
   402  0FE7                     	;# 
   403  0FE8                     	;# 
   404  0FE9                     	;# 
   405  0FEA                     	;# 
   406  0FEB                     	;# 
   407  0FED                     	;# 
   408  0FEE                     	;# 
   409  0FEF                     	;# 
   410  0000                     	;# 
   411  0001                     	;# 
   412  0002                     	;# 
   413  0003                     	;# 
   414  0004                     	;# 
   415  0005                     	;# 
   416  0006                     	;# 
   417  0007                     	;# 
   418  0008                     	;# 
   419  0009                     	;# 
   420  000A                     	;# 
   421  000B                     	;# 
   422  000C                     	;# 
   423  000D                     	;# 
   424  000E                     	;# 
   425  0010                     	;# 
   426  0011                     	;# 
   427  0012                     	;# 
   428  0015                     	;# 
   429  0016                     	;# 
   430  0016                     	;# 
   431  0017                     	;# 
   432  0018                     	;# 
   433  0019                     	;# 
   434  001A                     	;# 
   435  001B                     	;# 
   436  001C                     	;# 
   437  008C                     	;# 
   438  008D                     	;# 
   439  008E                     	;# 
   440  0090                     	;# 
   441  0091                     	;# 
   442  0092                     	;# 
   443  0095                     	;# 
   444  0096                     	;# 
   445  0097                     	;# 
   446  0099                     	;# 
   447  009A                     	;# 
   448  009B                     	;# 
   449  009B                     	;# 
   450  009C                     	;# 
   451  009D                     	;# 
   452  009E                     	;# 
   453  010C                     	;# 
   454  010D                     	;# 
   455  010E                     	;# 
   456  0116                     	;# 
   457  0117                     	;# 
   458  011D                     	;# 
   459  018C                     	;# 
   460  018D                     	;# 
   461  018E                     	;# 
   462  0191                     	;# 
   463  0191                     	;# 
   464  0192                     	;# 
   465  0193                     	;# 
   466  0193                     	;# 
   467  0194                     	;# 
   468  0195                     	;# 
   469  0196                     	;# 
   470  0197                     	;# 
   471  0199                     	;# 
   472  019A                     	;# 
   473  019B                     	;# 
   474  019B                     	;# 
   475  019B                     	;# 
   476  019B                     	;# 
   477  019C                     	;# 
   478  019C                     	;# 
   479  019D                     	;# 
   480  019E                     	;# 
   481  019F                     	;# 
   482  020D                     	;# 
   483  0210                     	;# 
   484  0211                     	;# 
   485  0211                     	;# 
   486  0212                     	;# 
   487  0212                     	;# 
   488  0213                     	;# 
   489  0213                     	;# 
   490  0214                     	;# 
   491  0214                     	;# 
   492  0215                     	;# 
   493  0215                     	;# 
   494  0215                     	;# 
   495  0216                     	;# 
   496  0216                     	;# 
   497  0217                     	;# 
   498  0217                     	;# 
   499  0291                     	;# 
   500  0291                     	;# 
   501  0292                     	;# 
   502  0293                     	;# 
   503  0298                     	;# 
   504  0298                     	;# 
   505  0299                     	;# 
   506  029A                     	;# 
   507  0394                     	;# 
   508  0395                     	;# 
   509  0396                     	;# 
   510  0FE4                     	;# 
   511  0FE5                     	;# 
   512  0FE6                     	;# 
   513  0FE7                     	;# 
   514  0FE8                     	;# 
   515  0FE9                     	;# 
   516  0FEA                     	;# 
   517  0FEB                     	;# 
   518  0FED                     	;# 
   519  0FEE                     	;# 
   520  0FEF                     	;# 
   521  0000                     	;# 
   522  0001                     	;# 
   523  0002                     	;# 
   524  0003                     	;# 
   525  0004                     	;# 
   526  0005                     	;# 
   527  0006                     	;# 
   528  0007                     	;# 
   529  0008                     	;# 
   530  0009                     	;# 
   531  000A                     	;# 
   532  000B                     	;# 
   533  000C                     	;# 
   534  000D                     	;# 
   535  000E                     	;# 
   536  0010                     	;# 
   537  0011                     	;# 
   538  0012                     	;# 
   539  0015                     	;# 
   540  0016                     	;# 
   541  0016                     	;# 
   542  0017                     	;# 
   543  0018                     	;# 
   544  0019                     	;# 
   545  001A                     	;# 
   546  001B                     	;# 
   547  001C                     	;# 
   548  008C                     	;# 
   549  008D                     	;# 
   550  008E                     	;# 
   551  0090                     	;# 
   552  0091                     	;# 
   553  0092                     	;# 
   554  0095                     	;# 
   555  0096                     	;# 
   556  0097                     	;# 
   557  0099                     	;# 
   558  009A                     	;# 
   559  009B                     	;# 
   560  009B                     	;# 
   561  009C                     	;# 
   562  009D                     	;# 
   563  009E                     	;# 
   564  010C                     	;# 
   565  010D                     	;# 
   566  010E                     	;# 
   567  0116                     	;# 
   568  0117                     	;# 
   569  011D                     	;# 
   570  018C                     	;# 
   571  018D                     	;# 
   572  018E                     	;# 
   573  0191                     	;# 
   574  0191                     	;# 
   575  0192                     	;# 
   576  0193                     	;# 
   577  0193                     	;# 
   578  0194                     	;# 
   579  0195                     	;# 
   580  0196                     	;# 
   581  0197                     	;# 
   582  0199                     	;# 
   583  019A                     	;# 
   584  019B                     	;# 
   585  019B                     	;# 
   586  019B                     	;# 
   587  019B                     	;# 
   588  019C                     	;# 
   589  019C                     	;# 
   590  019D                     	;# 
   591  019E                     	;# 
   592  019F                     	;# 
   593  020D                     	;# 
   594  0210                     	;# 
   595  0211                     	;# 
   596  0211                     	;# 
   597  0212                     	;# 
   598  0212                     	;# 
   599  0213                     	;# 
   600  0213                     	;# 
   601  0214                     	;# 
   602  0214                     	;# 
   603  0215                     	;# 
   604  0215                     	;# 
   605  0215                     	;# 
   606  0216                     	;# 
   607  0216                     	;# 
   608  0217                     	;# 
   609  0217                     	;# 
   610  0291                     	;# 
   611  0291                     	;# 
   612  0292                     	;# 
   613  0293                     	;# 
   614  0298                     	;# 
   615  0298                     	;# 
   616  0299                     	;# 
   617  029A                     	;# 
   618  0394                     	;# 
   619  0395                     	;# 
   620  0396                     	;# 
   621  0FE4                     	;# 
   622  0FE5                     	;# 
   623  0FE6                     	;# 
   624  0FE7                     	;# 
   625  0FE8                     	;# 
   626  0FE9                     	;# 
   627  0FEA                     	;# 
   628  0FEB                     	;# 
   629  0FED                     	;# 
   630  0FEE                     	;# 
   631  0FEF                     	;# 
   632  0000                     	;# 
   633  0001                     	;# 
   634  0002                     	;# 
   635  0003                     	;# 
   636  0004                     	;# 
   637  0005                     	;# 
   638  0006                     	;# 
   639  0007                     	;# 
   640  0008                     	;# 
   641  0009                     	;# 
   642  000A                     	;# 
   643  000B                     	;# 
   644  000C                     	;# 
   645  000D                     	;# 
   646  000E                     	;# 
   647  0010                     	;# 
   648  0011                     	;# 
   649  0012                     	;# 
   650  0015                     	;# 
   651  0016                     	;# 
   652  0016                     	;# 
   653  0017                     	;# 
   654  0018                     	;# 
   655  0019                     	;# 
   656  001A                     	;# 
   657  001B                     	;# 
   658  001C                     	;# 
   659  008C                     	;# 
   660  008D                     	;# 
   661  008E                     	;# 
   662  0090                     	;# 
   663  0091                     	;# 
   664  0092                     	;# 
   665  0095                     	;# 
   666  0096                     	;# 
   667  0097                     	;# 
   668  0099                     	;# 
   669  009A                     	;# 
   670  009B                     	;# 
   671  009B                     	;# 
   672  009C                     	;# 
   673  009D                     	;# 
   674  009E                     	;# 
   675  010C                     	;# 
   676  010D                     	;# 
   677  010E                     	;# 
   678  0116                     	;# 
   679  0117                     	;# 
   680  011D                     	;# 
   681  018C                     	;# 
   682  018D                     	;# 
   683  018E                     	;# 
   684  0191                     	;# 
   685  0191                     	;# 
   686  0192                     	;# 
   687  0193                     	;# 
   688  0193                     	;# 
   689  0194                     	;# 
   690  0195                     	;# 
   691  0196                     	;# 
   692  0197                     	;# 
   693  0199                     	;# 
   694  019A                     	;# 
   695  019B                     	;# 
   696  019B                     	;# 
   697  019B                     	;# 
   698  019B                     	;# 
   699  019C                     	;# 
   700  019C                     	;# 
   701  019D                     	;# 
   702  019E                     	;# 
   703  019F                     	;# 
   704  020D                     	;# 
   705  0210                     	;# 
   706  0211                     	;# 
   707  0211                     	;# 
   708  0212                     	;# 
   709  0212                     	;# 
   710  0213                     	;# 
   711  0213                     	;# 
   712  0214                     	;# 
   713  0214                     	;# 
   714  0215                     	;# 
   715  0215                     	;# 
   716  0215                     	;# 
   717  0216                     	;# 
   718  0216                     	;# 
   719  0217                     	;# 
   720  0217                     	;# 
   721  0291                     	;# 
   722  0291                     	;# 
   723  0292                     	;# 
   724  0293                     	;# 
   725  0298                     	;# 
   726  0298                     	;# 
   727  0299                     	;# 
   728  029A                     	;# 
   729  0394                     	;# 
   730  0395                     	;# 
   731  0396                     	;# 
   732  0FE4                     	;# 
   733  0FE5                     	;# 
   734  0FE6                     	;# 
   735  0FE7                     	;# 
   736  0FE8                     	;# 
   737  0FE9                     	;# 
   738  0FEA                     	;# 
   739  0FEB                     	;# 
   740  0FED                     	;# 
   741  0FEE                     	;# 
   742  0FEF                     	;# 
   743  0000                     	;# 
   744  0001                     	;# 
   745  0002                     	;# 
   746  0003                     	;# 
   747  0004                     	;# 
   748  0005                     	;# 
   749  0006                     	;# 
   750  0007                     	;# 
   751  0008                     	;# 
   752  0009                     	;# 
   753  000A                     	;# 
   754  000B                     	;# 
   755  000C                     	;# 
   756  000D                     	;# 
   757  000E                     	;# 
   758  0010                     	;# 
   759  0011                     	;# 
   760  0012                     	;# 
   761  0015                     	;# 
   762  0016                     	;# 
   763  0016                     	;# 
   764  0017                     	;# 
   765  0018                     	;# 
   766  0019                     	;# 
   767  001A                     	;# 
   768  001B                     	;# 
   769  001C                     	;# 
   770  008C                     	;# 
   771  008D                     	;# 
   772  008E                     	;# 
   773  0090                     	;# 
   774  0091                     	;# 
   775  0092                     	;# 
   776  0095                     	;# 
   777  0096                     	;# 
   778  0097                     	;# 
   779  0099                     	;# 
   780  009A                     	;# 
   781  009B                     	;# 
   782  009B                     	;# 
   783  009C                     	;# 
   784  009D                     	;# 
   785  009E                     	;# 
   786  010C                     	;# 
   787  010D                     	;# 
   788  010E                     	;# 
   789  0116                     	;# 
   790  0117                     	;# 
   791  011D                     	;# 
   792  018C                     	;# 
   793  018D                     	;# 
   794  018E                     	;# 
   795  0191                     	;# 
   796  0191                     	;# 
   797  0192                     	;# 
   798  0193                     	;# 
   799  0193                     	;# 
   800  0194                     	;# 
   801  0195                     	;# 
   802  0196                     	;# 
   803  0197                     	;# 
   804  0199                     	;# 
   805  019A                     	;# 
   806  019B                     	;# 
   807  019B                     	;# 
   808  019B                     	;# 
   809  019B                     	;# 
   810  019C                     	;# 
   811  019C                     	;# 
   812  019D                     	;# 
   813  019E                     	;# 
   814  019F                     	;# 
   815  020D                     	;# 
   816  0210                     	;# 
   817  0211                     	;# 
   818  0211                     	;# 
   819  0212                     	;# 
   820  0212                     	;# 
   821  0213                     	;# 
   822  0213                     	;# 
   823  0214                     	;# 
   824  0214                     	;# 
   825  0215                     	;# 
   826  0215                     	;# 
   827  0215                     	;# 
   828  0216                     	;# 
   829  0216                     	;# 
   830  0217                     	;# 
   831  0217                     	;# 
   832  0291                     	;# 
   833  0291                     	;# 
   834  0292                     	;# 
   835  0293                     	;# 
   836  0298                     	;# 
   837  0298                     	;# 
   838  0299                     	;# 
   839  029A                     	;# 
   840  0394                     	;# 
   841  0395                     	;# 
   842  0396                     	;# 
   843  0FE4                     	;# 
   844  0FE5                     	;# 
   845  0FE6                     	;# 
   846  0FE7                     	;# 
   847  0FE8                     	;# 
   848  0FE9                     	;# 
   849  0FEA                     	;# 
   850  0FEB                     	;# 
   851  0FED                     	;# 
   852  0FEE                     	;# 
   853  0FEF                     	;# 
   854  0000                     	;# 
   855  0001                     	;# 
   856  0002                     	;# 
   857  0003                     	;# 
   858  0004                     	;# 
   859  0005                     	;# 
   860  0006                     	;# 
   861  0007                     	;# 
   862  0008                     	;# 
   863  0009                     	;# 
   864  000A                     	;# 
   865  000B                     	;# 
   866  000C                     	;# 
   867  000D                     	;# 
   868  000E                     	;# 
   869  0010                     	;# 
   870  0011                     	;# 
   871  0012                     	;# 
   872  0015                     	;# 
   873  0016                     	;# 
   874  0016                     	;# 
   875  0017                     	;# 
   876  0018                     	;# 
   877  0019                     	;# 
   878  001A                     	;# 
   879  001B                     	;# 
   880  001C                     	;# 
   881  008C                     	;# 
   882  008D                     	;# 
   883  008E                     	;# 
   884  0090                     	;# 
   885  0091                     	;# 
   886  0092                     	;# 
   887  0095                     	;# 
   888  0096                     	;# 
   889  0097                     	;# 
   890  0099                     	;# 
   891  009A                     	;# 
   892  009B                     	;# 
   893  009B                     	;# 
   894  009C                     	;# 
   895  009D                     	;# 
   896  009E                     	;# 
   897  010C                     	;# 
   898  010D                     	;# 
   899  010E                     	;# 
   900  0116                     	;# 
   901  0117                     	;# 
   902  011D                     	;# 
   903  018C                     	;# 
   904  018D                     	;# 
   905  018E                     	;# 
   906  0191                     	;# 
   907  0191                     	;# 
   908  0192                     	;# 
   909  0193                     	;# 
   910  0193                     	;# 
   911  0194                     	;# 
   912  0195                     	;# 
   913  0196                     	;# 
   914  0197                     	;# 
   915  0199                     	;# 
   916  019A                     	;# 
   917  019B                     	;# 
   918  019B                     	;# 
   919  019B                     	;# 
   920  019B                     	;# 
   921  019C                     	;# 
   922  019C                     	;# 
   923  019D                     	;# 
   924  019E                     	;# 
   925  019F                     	;# 
   926  020D                     	;# 
   927  0210                     	;# 
   928  0211                     	;# 
   929  0211                     	;# 
   930  0212                     	;# 
   931  0212                     	;# 
   932  0213                     	;# 
   933  0213                     	;# 
   934  0214                     	;# 
   935  0214                     	;# 
   936  0215                     	;# 
   937  0215                     	;# 
   938  0215                     	;# 
   939  0216                     	;# 
   940  0216                     	;# 
   941  0217                     	;# 
   942  0217                     	;# 
   943  0291                     	;# 
   944  0291                     	;# 
   945  0292                     	;# 
   946  0293                     	;# 
   947  0298                     	;# 
   948  0298                     	;# 
   949  0299                     	;# 
   950  029A                     	;# 
   951  0394                     	;# 
   952  0395                     	;# 
   953  0396                     	;# 
   954  0FE4                     	;# 
   955  0FE5                     	;# 
   956  0FE6                     	;# 
   957  0FE7                     	;# 
   958  0FE8                     	;# 
   959  0FE9                     	;# 
   960  0FEA                     	;# 
   961  0FEB                     	;# 
   962  0FED                     	;# 
   963  0FEE                     	;# 
   964  0FEF                     	;# 
   965  0000                     	;# 
   966  0001                     	;# 
   967  0002                     	;# 
   968  0003                     	;# 
   969  0004                     	;# 
   970  0005                     	;# 
   971  0006                     	;# 
   972  0007                     	;# 
   973  0008                     	;# 
   974  0009                     	;# 
   975  000A                     	;# 
   976  000B                     	;# 
   977  000C                     	;# 
   978  000D                     	;# 
   979  000E                     	;# 
   980  0010                     	;# 
   981  0011                     	;# 
   982  0012                     	;# 
   983  0015                     	;# 
   984  0016                     	;# 
   985  0016                     	;# 
   986  0017                     	;# 
   987  0018                     	;# 
   988  0019                     	;# 
   989  001A                     	;# 
   990  001B                     	;# 
   991  001C                     	;# 
   992  008C                     	;# 
   993  008D                     	;# 
   994  008E                     	;# 
   995  0090                     	;# 
   996  0091                     	;# 
   997  0092                     	;# 
   998  0095                     	;# 
   999  0096                     	;# 
  1000  0097                     	;# 
  1001  0099                     	;# 
  1002  009A                     	;# 
  1003  009B                     	;# 
  1004  009B                     	;# 
  1005  009C                     	;# 
  1006  009D                     	;# 
  1007  009E                     	;# 
  1008  010C                     	;# 
  1009  010D                     	;# 
  1010  010E                     	;# 
  1011  0116                     	;# 
  1012  0117                     	;# 
  1013  011D                     	;# 
  1014  018C                     	;# 
  1015  018D                     	;# 
  1016  018E                     	;# 
  1017  0191                     	;# 
  1018  0191                     	;# 
  1019  0192                     	;# 
  1020  0193                     	;# 
  1021  0193                     	;# 
  1022  0194                     	;# 
  1023  0195                     	;# 
  1024  0196                     	;# 
  1025  0197                     	;# 
  1026  0199                     	;# 
  1027  019A                     	;# 
  1028  019B                     	;# 
  1029  019B                     	;# 
  1030  019B                     	;# 
  1031  019B                     	;# 
  1032  019C                     	;# 
  1033  019C                     	;# 
  1034  019D                     	;# 
  1035  019E                     	;# 
  1036  019F                     	;# 
  1037  020D                     	;# 
  1038  0210                     	;# 
  1039  0211                     	;# 
  1040  0211                     	;# 
  1041  0212                     	;# 
  1042  0212                     	;# 
  1043  0213                     	;# 
  1044  0213                     	;# 
  1045  0214                     	;# 
  1046  0214                     	;# 
  1047  0215                     	;# 
  1048  0215                     	;# 
  1049  0215                     	;# 
  1050  0216                     	;# 
  1051  0216                     	;# 
  1052  0217                     	;# 
  1053  0217                     	;# 
  1054  0291                     	;# 
  1055  0291                     	;# 
  1056  0292                     	;# 
  1057  0293                     	;# 
  1058  0298                     	;# 
  1059  0298                     	;# 
  1060  0299                     	;# 
  1061  029A                     	;# 
  1062  0394                     	;# 
  1063  0395                     	;# 
  1064  0396                     	;# 
  1065  0FE4                     	;# 
  1066  0FE5                     	;# 
  1067  0FE6                     	;# 
  1068  0FE7                     	;# 
  1069  0FE8                     	;# 
  1070  0FE9                     	;# 
  1071  0FEA                     	;# 
  1072  0FEB                     	;# 
  1073  0FED                     	;# 
  1074  0FEE                     	;# 
  1075  0FEF                     	;# 
  1076  0000                     	;# 
  1077  0001                     	;# 
  1078  0002                     	;# 
  1079  0003                     	;# 
  1080  0004                     	;# 
  1081  0005                     	;# 
  1082  0006                     	;# 
  1083  0007                     	;# 
  1084  0008                     	;# 
  1085  0009                     	;# 
  1086  000A                     	;# 
  1087  000B                     	;# 
  1088  000C                     	;# 
  1089  000D                     	;# 
  1090  000E                     	;# 
  1091  0010                     	;# 
  1092  0011                     	;# 
  1093  0012                     	;# 
  1094  0015                     	;# 
  1095  0016                     	;# 
  1096  0016                     	;# 
  1097  0017                     	;# 
  1098  0018                     	;# 
  1099  0019                     	;# 
  1100  001A                     	;# 
  1101  001B                     	;# 
  1102  001C                     	;# 
  1103  008C                     	;# 
  1104  008D                     	;# 
  1105  008E                     	;# 
  1106  0090                     	;# 
  1107  0091                     	;# 
  1108  0092                     	;# 
  1109  0095                     	;# 
  1110  0096                     	;# 
  1111  0097                     	;# 
  1112  0099                     	;# 
  1113  009A                     	;# 
  1114  009B                     	;# 
  1115  009B                     	;# 
  1116  009C                     	;# 
  1117  009D                     	;# 
  1118  009E                     	;# 
  1119  010C                     	;# 
  1120  010D                     	;# 
  1121  010E                     	;# 
  1122  0116                     	;# 
  1123  0117                     	;# 
  1124  011D                     	;# 
  1125  018C                     	;# 
  1126  018D                     	;# 
  1127  018E                     	;# 
  1128  0191                     	;# 
  1129  0191                     	;# 
  1130  0192                     	;# 
  1131  0193                     	;# 
  1132  0193                     	;# 
  1133  0194                     	;# 
  1134  0195                     	;# 
  1135  0196                     	;# 
  1136  0197                     	;# 
  1137  0199                     	;# 
  1138  019A                     	;# 
  1139  019B                     	;# 
  1140  019B                     	;# 
  1141  019B                     	;# 
  1142  019B                     	;# 
  1143  019C                     	;# 
  1144  019C                     	;# 
  1145  019D                     	;# 
  1146  019E                     	;# 
  1147  019F                     	;# 
  1148  020D                     	;# 
  1149  0210                     	;# 
  1150  0211                     	;# 
  1151  0211                     	;# 
  1152  0212                     	;# 
  1153  0212                     	;# 
  1154  0213                     	;# 
  1155  0213                     	;# 
  1156  0214                     	;# 
  1157  0214                     	;# 
  1158  0215                     	;# 
  1159  0215                     	;# 
  1160  0215                     	;# 
  1161  0216                     	;# 
  1162  0216                     	;# 
  1163  0217                     	;# 
  1164  0217                     	;# 
  1165  0291                     	;# 
  1166  0291                     	;# 
  1167  0292                     	;# 
  1168  0293                     	;# 
  1169  0298                     	;# 
  1170  0298                     	;# 
  1171  0299                     	;# 
  1172  029A                     	;# 
  1173  0394                     	;# 
  1174  0395                     	;# 
  1175  0396                     	;# 
  1176  0FE4                     	;# 
  1177  0FE5                     	;# 
  1178  0FE6                     	;# 
  1179  0FE7                     	;# 
  1180  0FE8                     	;# 
  1181  0FE9                     	;# 
  1182  0FEA                     	;# 
  1183  0FEB                     	;# 
  1184  0FED                     	;# 
  1185  0FEE                     	;# 
  1186  0FEF                     	;# 
  1187  0000                     	;# 
  1188  0001                     	;# 
  1189  0002                     	;# 
  1190  0003                     	;# 
  1191  0004                     	;# 
  1192  0005                     	;# 
  1193  0006                     	;# 
  1194  0007                     	;# 
  1195  0008                     	;# 
  1196  0009                     	;# 
  1197  000A                     	;# 
  1198  000B                     	;# 
  1199  000C                     	;# 
  1200  000D                     	;# 
  1201  000E                     	;# 
  1202  0010                     	;# 
  1203  0011                     	;# 
  1204  0012                     	;# 
  1205  0015                     	;# 
  1206  0016                     	;# 
  1207  0016                     	;# 
  1208  0017                     	;# 
  1209  0018                     	;# 
  1210  0019                     	;# 
  1211  001A                     	;# 
  1212  001B                     	;# 
  1213  001C                     	;# 
  1214  008C                     	;# 
  1215  008D                     	;# 
  1216  008E                     	;# 
  1217  0090                     	;# 
  1218  0091                     	;# 
  1219  0092                     	;# 
  1220  0095                     	;# 
  1221  0096                     	;# 
  1222  0097                     	;# 
  1223  0099                     	;# 
  1224  009A                     	;# 
  1225  009B                     	;# 
  1226  009B                     	;# 
  1227  009C                     	;# 
  1228  009D                     	;# 
  1229  009E                     	;# 
  1230  010C                     	;# 
  1231  010D                     	;# 
  1232  010E                     	;# 
  1233  0116                     	;# 
  1234  0117                     	;# 
  1235  011D                     	;# 
  1236  018C                     	;# 
  1237  018D                     	;# 
  1238  018E                     	;# 
  1239  0191                     	;# 
  1240  0191                     	;# 
  1241  0192                     	;# 
  1242  0193                     	;# 
  1243  0193                     	;# 
  1244  0194                     	;# 
  1245  0195                     	;# 
  1246  0196                     	;# 
  1247  0197                     	;# 
  1248  0199                     	;# 
  1249  019A                     	;# 
  1250  019B                     	;# 
  1251  019B                     	;# 
  1252  019B                     	;# 
  1253  019B                     	;# 
  1254  019C                     	;# 
  1255  019C                     	;# 
  1256  019D                     	;# 
  1257  019E                     	;# 
  1258  019F                     	;# 
  1259  020D                     	;# 
  1260  0210                     	;# 
  1261  0211                     	;# 
  1262  0211                     	;# 
  1263  0212                     	;# 
  1264  0212                     	;# 
  1265  0213                     	;# 
  1266  0213                     	;# 
  1267  0214                     	;# 
  1268  0214                     	;# 
  1269  0215                     	;# 
  1270  0215                     	;# 
  1271  0215                     	;# 
  1272  0216                     	;# 
  1273  0216                     	;# 
  1274  0217                     	;# 
  1275  0217                     	;# 
  1276  0291                     	;# 
  1277  0291                     	;# 
  1278  0292                     	;# 
  1279  0293                     	;# 
  1280  0298                     	;# 
  1281  0298                     	;# 
  1282  0299                     	;# 
  1283  029A                     	;# 
  1284  0394                     	;# 
  1285  0395                     	;# 
  1286  0396                     	;# 
  1287  0FE4                     	;# 
  1288  0FE5                     	;# 
  1289  0FE6                     	;# 
  1290  0FE7                     	;# 
  1291  0FE8                     	;# 
  1292  0FE9                     	;# 
  1293  0FEA                     	;# 
  1294  0FEB                     	;# 
  1295  0FED                     	;# 
  1296  0FEE                     	;# 
  1297  0FEF                     	;# 
  1298  0000                     	;# 
  1299  0001                     	;# 
  1300  0002                     	;# 
  1301  0003                     	;# 
  1302  0004                     	;# 
  1303  0005                     	;# 
  1304  0006                     	;# 
  1305  0007                     	;# 
  1306  0008                     	;# 
  1307  0009                     	;# 
  1308  000A                     	;# 
  1309  000B                     	;# 
  1310  000C                     	;# 
  1311  000D                     	;# 
  1312  000E                     	;# 
  1313  0010                     	;# 
  1314  0011                     	;# 
  1315  0012                     	;# 
  1316  0015                     	;# 
  1317  0016                     	;# 
  1318  0016                     	;# 
  1319  0017                     	;# 
  1320  0018                     	;# 
  1321  0019                     	;# 
  1322  001A                     	;# 
  1323  001B                     	;# 
  1324  001C                     	;# 
  1325  008C                     	;# 
  1326  008D                     	;# 
  1327  008E                     	;# 
  1328  0090                     	;# 
  1329  0091                     	;# 
  1330  0092                     	;# 
  1331  0095                     	;# 
  1332  0096                     	;# 
  1333  0097                     	;# 
  1334  0099                     	;# 
  1335  009A                     	;# 
  1336  009B                     	;# 
  1337  009B                     	;# 
  1338  009C                     	;# 
  1339  009D                     	;# 
  1340  009E                     	;# 
  1341  010C                     	;# 
  1342  010D                     	;# 
  1343  010E                     	;# 
  1344  0116                     	;# 
  1345  0117                     	;# 
  1346  011D                     	;# 
  1347  018C                     	;# 
  1348  018D                     	;# 
  1349  018E                     	;# 
  1350  0191                     	;# 
  1351  0191                     	;# 
  1352  0192                     	;# 
  1353  0193                     	;# 
  1354  0193                     	;# 
  1355  0194                     	;# 
  1356  0195                     	;# 
  1357  0196                     	;# 
  1358  0197                     	;# 
  1359  0199                     	;# 
  1360  019A                     	;# 
  1361  019B                     	;# 
  1362  019B                     	;# 
  1363  019B                     	;# 
  1364  019B                     	;# 
  1365  019C                     	;# 
  1366  019C                     	;# 
  1367  019D                     	;# 
  1368  019E                     	;# 
  1369  019F                     	;# 
  1370  020D                     	;# 
  1371  0210                     	;# 
  1372  0211                     	;# 
  1373  0211                     	;# 
  1374  0212                     	;# 
  1375  0212                     	;# 
  1376  0213                     	;# 
  1377  0213                     	;# 
  1378  0214                     	;# 
  1379  0214                     	;# 
  1380  0215                     	;# 
  1381  0215                     	;# 
  1382  0215                     	;# 
  1383  0216                     	;# 
  1384  0216                     	;# 
  1385  0217                     	;# 
  1386  0217                     	;# 
  1387  0291                     	;# 
  1388  0291                     	;# 
  1389  0292                     	;# 
  1390  0293                     	;# 
  1391  0298                     	;# 
  1392  0298                     	;# 
  1393  0299                     	;# 
  1394  029A                     	;# 
  1395  0394                     	;# 
  1396  0395                     	;# 
  1397  0396                     	;# 
  1398  0FE4                     	;# 
  1399  0FE5                     	;# 
  1400  0FE6                     	;# 
  1401  0FE7                     	;# 
  1402  0FE8                     	;# 
  1403  0FE9                     	;# 
  1404  0FEA                     	;# 
  1405  0FEB                     	;# 
  1406  0FED                     	;# 
  1407  0FEE                     	;# 
  1408  0FEF                     	;# 
  1409  0000                     	;# 
  1410  0001                     	;# 
  1411  0002                     	;# 
  1412  0003                     	;# 
  1413  0004                     	;# 
  1414  0005                     	;# 
  1415  0006                     	;# 
  1416  0007                     	;# 
  1417  0008                     	;# 
  1418  0009                     	;# 
  1419  000A                     	;# 
  1420  000B                     	;# 
  1421  000C                     	;# 
  1422  000D                     	;# 
  1423  000E                     	;# 
  1424  0010                     	;# 
  1425  0011                     	;# 
  1426  0012                     	;# 
  1427  0015                     	;# 
  1428  0016                     	;# 
  1429  0016                     	;# 
  1430  0017                     	;# 
  1431  0018                     	;# 
  1432  0019                     	;# 
  1433  001A                     	;# 
  1434  001B                     	;# 
  1435  001C                     	;# 
  1436  008C                     	;# 
  1437  008D                     	;# 
  1438  008E                     	;# 
  1439  0090                     	;# 
  1440  0091                     	;# 
  1441  0092                     	;# 
  1442  0095                     	;# 
  1443  0096                     	;# 
  1444  0097                     	;# 
  1445  0099                     	;# 
  1446  009A                     	;# 
  1447  009B                     	;# 
  1448  009B                     	;# 
  1449  009C                     	;# 
  1450  009D                     	;# 
  1451  009E                     	;# 
  1452  010C                     	;# 
  1453  010D                     	;# 
  1454  010E                     	;# 
  1455  0116                     	;# 
  1456  0117                     	;# 
  1457  011D                     	;# 
  1458  018C                     	;# 
  1459  018D                     	;# 
  1460  018E                     	;# 
  1461  0191                     	;# 
  1462  0191                     	;# 
  1463  0192                     	;# 
  1464  0193                     	;# 
  1465  0193                     	;# 
  1466  0194                     	;# 
  1467  0195                     	;# 
  1468  0196                     	;# 
  1469  0197                     	;# 
  1470  0199                     	;# 
  1471  019A                     	;# 
  1472  019B                     	;# 
  1473  019B                     	;# 
  1474  019B                     	;# 
  1475  019B                     	;# 
  1476  019C                     	;# 
  1477  019C                     	;# 
  1478  019D                     	;# 
  1479  019E                     	;# 
  1480  019F                     	;# 
  1481  020D                     	;# 
  1482  0210                     	;# 
  1483  0211                     	;# 
  1484  0211                     	;# 
  1485  0212                     	;# 
  1486  0212                     	;# 
  1487  0213                     	;# 
  1488  0213                     	;# 
  1489  0214                     	;# 
  1490  0214                     	;# 
  1491  0215                     	;# 
  1492  0215                     	;# 
  1493  0215                     	;# 
  1494  0216                     	;# 
  1495  0216                     	;# 
  1496  0217                     	;# 
  1497  0217                     	;# 
  1498  0291                     	;# 
  1499  0291                     	;# 
  1500  0292                     	;# 
  1501  0293                     	;# 
  1502  0298                     	;# 
  1503  0298                     	;# 
  1504  0299                     	;# 
  1505  029A                     	;# 
  1506  0394                     	;# 
  1507  0395                     	;# 
  1508  0396                     	;# 
  1509  0FE4                     	;# 
  1510  0FE5                     	;# 
  1511  0FE6                     	;# 
  1512  0FE7                     	;# 
  1513  0FE8                     	;# 
  1514  0FE9                     	;# 
  1515  0FEA                     	;# 
  1516  0FEB                     	;# 
  1517  0FED                     	;# 
  1518  0FEE                     	;# 
  1519  0FEF                     	;# 
  1520  0000                     	;# 
  1521  0001                     	;# 
  1522  0002                     	;# 
  1523  0003                     	;# 
  1524  0004                     	;# 
  1525  0005                     	;# 
  1526  0006                     	;# 
  1527  0007                     	;# 
  1528  0008                     	;# 
  1529  0009                     	;# 
  1530  000A                     	;# 
  1531  000B                     	;# 
  1532  000C                     	;# 
  1533  000D                     	;# 
  1534  000E                     	;# 
  1535  0010                     	;# 
  1536  0011                     	;# 
  1537  0012                     	;# 
  1538  0015                     	;# 
  1539  0016                     	;# 
  1540  0016                     	;# 
  1541  0017                     	;# 
  1542  0018                     	;# 
  1543  0019                     	;# 
  1544  001A                     	;# 
  1545  001B                     	;# 
  1546  001C                     	;# 
  1547  008C                     	;# 
  1548  008D                     	;# 
  1549  008E                     	;# 
  1550  0090                     	;# 
  1551  0091                     	;# 
  1552  0092                     	;# 
  1553  0095                     	;# 
  1554  0096                     	;# 
  1555  0097                     	;# 
  1556  0099                     	;# 
  1557  009A                     	;# 
  1558  009B                     	;# 
  1559  009B                     	;# 
  1560  009C                     	;# 
  1561  009D                     	;# 
  1562  009E                     	;# 
  1563  010C                     	;# 
  1564  010D                     	;# 
  1565  010E                     	;# 
  1566  0116                     	;# 
  1567  0117                     	;# 
  1568  011D                     	;# 
  1569  018C                     	;# 
  1570  018D                     	;# 
  1571  018E                     	;# 
  1572  0191                     	;# 
  1573  0191                     	;# 
  1574  0192                     	;# 
  1575  0193                     	;# 
  1576  0193                     	;# 
  1577  0194                     	;# 
  1578  0195                     	;# 
  1579  0196                     	;# 
  1580  0197                     	;# 
  1581  0199                     	;# 
  1582  019A                     	;# 
  1583  019B                     	;# 
  1584  019B                     	;# 
  1585  019B                     	;# 
  1586  019B                     	;# 
  1587  019C                     	;# 
  1588  019C                     	;# 
  1589  019D                     	;# 
  1590  019E                     	;# 
  1591  019F                     	;# 
  1592  020D                     	;# 
  1593  0210                     	;# 
  1594  0211                     	;# 
  1595  0211                     	;# 
  1596  0212                     	;# 
  1597  0212                     	;# 
  1598  0213                     	;# 
  1599  0213                     	;# 
  1600  0214                     	;# 
  1601  0214                     	;# 
  1602  0215                     	;# 
  1603  0215                     	;# 
  1604  0215                     	;# 
  1605  0216                     	;# 
  1606  0216                     	;# 
  1607  0217                     	;# 
  1608  0217                     	;# 
  1609  0291                     	;# 
  1610  0291                     	;# 
  1611  0292                     	;# 
  1612  0293                     	;# 
  1613  0298                     	;# 
  1614  0298                     	;# 
  1615  0299                     	;# 
  1616  029A                     	;# 
  1617  0394                     	;# 
  1618  0395                     	;# 
  1619  0396                     	;# 
  1620  0FE4                     	;# 
  1621  0FE5                     	;# 
  1622  0FE6                     	;# 
  1623  0FE7                     	;# 
  1624  0FE8                     	;# 
  1625  0FE9                     	;# 
  1626  0FEA                     	;# 
  1627  0FEB                     	;# 
  1628  0FED                     	;# 
  1629  0FEE                     	;# 
  1630  0FEF                     	;# 
  1631                           
  1632                           	psect	idataBANK1
  1633  0AEC                     __pidataBANK1:	
  1634                           
  1635                           ;initializer for _cc1PaTable
  1636  0AEC  3403               	retlw	3
  1637  0AED  340F               	retlw	15
  1638  0AEE  341E               	retlw	30
  1639  0AEF  3427               	retlw	39
  1640  0AF0  3450               	retlw	80
  1641  0AF1  3481               	retlw	129
  1642  0AF2  34CB               	retlw	203
  1643  0AF3  34C2               	retlw	194
  1644                           
  1645                           	psect	idataBANK2
  1646  0E75                     __pidataBANK2:	
  1647                           
  1648                           ;initializer for _cc1InitVal
  1649  0E75  3447               	retlw	71
  1650  0E76  3446               	retlw	70
  1651  0E77  344E               	retlw	78
  1652  0E78  340B               	retlw	11
  1653  0E79  34D3               	retlw	211
  1654  0E7A  3491               	retlw	145
  1655  0E7B  340B               	retlw	11
  1656  0E7C  3408               	retlw	8
  1657  0E7D  3404               	retlw	4
  1658  0E7E  3400               	retlw	0
  1659  0E7F  3400               	retlw	0
  1660  0E80  3406               	retlw	6
  1661  0E81  3400               	retlw	0
  1662  0E82  3421               	retlw	33
  1663  0E83  3463               	retlw	99
  1664  0E84  3491               	retlw	145
  1665  0E85  34CA               	retlw	202
  1666  0E86  3483               	retlw	131
  1667  0E87  3402               	retlw	2
  1668  0E88  3402               	retlw	2
  1669  0E89  343B               	retlw	59
  1670  0E8A  3434               	retlw	52
  1671  0E8B  3407               	retlw	7
  1672  0E8C  343F               	retlw	63
  1673  0E8D  3408               	retlw	8
  1674  0E8E  3416               	retlw	22
  1675  0E8F  346C               	retlw	108
  1676  0E90  3403               	retlw	3
  1677  0E91  3440               	retlw	64
  1678  0E92  3491               	retlw	145
  1679  0E93  3487               	retlw	135
  1680  0E94  346B               	retlw	107
  1681  0E95  34FB               	retlw	251
  1682  0E96  3456               	retlw	86
  1683  0E97  3416               	retlw	22
  1684  0E98  34E9               	retlw	233
  1685  0E99  342A               	retlw	42
  1686  0E9A  3400               	retlw	0
  1687  0E9B  341F               	retlw	31
  1688  0E9C  3441               	retlw	65
  1689  0E9D  3400               	retlw	0
  1690  0E9E  3459               	retlw	89
  1691  0E9F  347F               	retlw	127
  1692  0EA0  343F               	retlw	63
  1693  0EA1  3481               	retlw	129
  1694  0EA2  3435               	retlw	53
  1695  0EA3  3409               	retlw	9
  1696  3820                     _nvm_pgm_cfg_absaddr	set	14368
  1697  3820                     _nvm_pgm_cfg_absaddr	set	14368
  1698                           
  1699                           	psect	_nvm_pgm_cfg_text
  1700  3820                     __p_nvm_pgm_cfg_text:	
  1701  3820                     _nvm_pgm_cfg:	
  1702  3820  345C               	retlw	92
  1703  3821  34C5               	retlw	197
  1704  3822  3400               	retlw	0
  1705  3823  3400               	retlw	0
  1706  3824  3400               	retlw	0
  1707  3825  3400               	retlw	0
  1708  3826  3400               	retlw	0
  1709  3827  3400               	retlw	0
  1710  3828  3400               	retlw	0
  1711  3829  3400               	retlw	0
  1712  382A  3400               	retlw	0
  1713  382B  3400               	retlw	0
  1714  382C  3400               	retlw	0
  1715  382D  3400               	retlw	0
  1716  382E  3400               	retlw	0
  1717  382F  3400               	retlw	0
  1718  3830  3400               	retlw	0
  1719  3831  3400               	retlw	0
  1720  3832  3400               	retlw	0
  1721  3833  3400               	retlw	0
  1722  3834  3400               	retlw	0
  1723  3835  3400               	retlw	0
  1724  3836  3400               	retlw	0
  1725  3837  3400               	retlw	0
  1726  3838  3400               	retlw	0
  1727  3839  3400               	retlw	0
  1728  383A  3400               	retlw	0
  1729  383B  3400               	retlw	0
  1730  383C  3400               	retlw	0
  1731  383D  3400               	retlw	0
  1732  383E  3400               	retlw	0
  1733  383F  3400               	retlw	0
  1734  3840                     __end_of_nvm_pgm_cfg:	
  1735  000B                     _INTCON	set	11
  1736  000B                     _INTCONbits	set	11
  1737  0011                     _PIR1	set	17
  1738  0011                     _PIR1bits	set	17
  1739  0012                     _PIR2	set	18
  1740  000C                     _PORTA	set	12
  1741  000D                     _PORTBbits	set	13
  1742  000E                     _PORTC	set	14
  1743  0018                     _T1CON	set	24
  1744  0015                     _TMR0	set	21
  1745  0017                     _TMR1H	set	23
  1746  0016                     _TMR1L	set	22
  1747  009D                     _ADCON0	set	157
  1748  009D                     _ADCON0bits	set	157
  1749  009E                     _ADCON1	set	158
  1750  009C                     _ADRESH	set	156
  1751  009B                     _ADRESL	set	155
  1752  0095                     _OPTION_REG	set	149
  1753  0099                     _OSCCON	set	153
  1754  0091                     _PIE1	set	145
  1755  0092                     _PIE2	set	146
  1756  008C                     _TRISA	set	140
  1757  008D                     _TRISB	set	141
  1758  008E                     _TRISC	set	142
  1759  0097                     _WDTCON	set	151
  1760  0117                     _FVRCON	set	279
  1761  010C                     _LATAbits	set	268
  1762  010E                     _LATCbits	set	270
  1763  0191                     _PMADR	set	401
  1764  0193                     _PMDAT	set	403
  1765  018C                     _ANSELA	set	396
  1766  018D                     _ANSELB	set	397
  1767  018E                     _ANSELC	set	398
  1768  0195                     _PMCON1	set	405
  1769  0195                     _PMCON1bits	set	405
  1770  0196                     _PMCON2	set	406
  1771  0211                     _SSPBUF	set	529
  1772  0215                     _SSPCON1	set	533
  1773  0216                     _SSPCON2	set	534
  1774  0215                     _SSPCONbits	set	533
  1775  0214                     _SSPSTAT	set	532
  1776  020D                     _WPUB	set	525
  1777  0396                     _IOCBFbits	set	918
  1778  0395                     _IOCBN	set	917
  1779  0394                     _IOCBP	set	916
  1780                           
  1781                           ; #config settings
  1782  0000                     
  1783                           	psect	cinit
  1784  0016                     start_initialization:	
  1785  0016                     __initialization:	
  1786                           
  1787                           ; Clear objects allocated to COMMON
  1788  0016  01FC               	clrf	__pbssCOMMON& (0+127)
  1789                           
  1790                           ; Clear objects allocated to BANK0
  1791  0017  3069               	movlw	low __pbssBANK0
  1792  0018  0084               	movwf	4
  1793  0019  3000               	movlw	high __pbssBANK0
  1794  001A  0085               	movwf	5
  1795  001B  3007               	movlw	7
  1796  001C  318A  22DE  3180   	fcall	clear_ram0
  1797                           
  1798                           ; Clear objects allocated to BANK1
  1799  001F  30A0               	movlw	low __pbssBANK1
  1800  0020  0084               	movwf	4
  1801  0021  3000               	movlw	high __pbssBANK1
  1802  0022  0085               	movwf	5
  1803  0023  302D               	movlw	45
  1804  0024  318A  22DE  3180   	fcall	clear_ram0
  1805                           
  1806                           ; Initialize objects allocated to BANK1
  1807  0027  30EC               	movlw	low __pidataBANK1
  1808  0028  0084               	movwf	4
  1809  0029  308A               	movlw	(high __pidataBANK1)| (0+128)
  1810  002A  0085               	movwf	5
  1811  002B  30CD               	movlw	low __pdataBANK1
  1812  002C  0086               	movwf	6
  1813  002D  3000               	movlw	high __pdataBANK1
  1814  002E  0087               	movwf	7
  1815  002F  3008               	movlw	8
  1816  0030  318A  22D8  3180   	fcall	init_ram
  1817                           
  1818                           ; Initialize objects allocated to BANK2
  1819  0033  3075               	movlw	low __pidataBANK2
  1820  0034  0084               	movwf	4
  1821  0035  308E               	movlw	(high __pidataBANK2)| (0+128)
  1822  0036  0085               	movwf	5
  1823  0037  3020               	movlw	low __pdataBANK2
  1824  0038  0086               	movwf	6
  1825  0039  3001               	movlw	high __pdataBANK2
  1826  003A  0087               	movwf	7
  1827  003B  302F               	movlw	47
  1828  003C  318A  22D8         	fcall	init_ram
  1829  003E                     end_of_initialization:	
  1830                           ;End of C runtime variable initialization code
  1831                           
  1832  003E                     __end_of__initialization:	
  1833  003E  0020               	movlb	0
  1834  003F  3187  2F8C         	ljmp	_main	;jump to C main() function
  1835                           
  1836                           	psect	bssCOMMON
  1837  007C                     __pbssCOMMON:	
  1838  007C                     _pgm_flg:	
  1839  007C                     	ds	1
  1840                           
  1841                           	psect	bssBANK0
  1842  0069                     __pbssBANK0:	
  1843  0069                     _adc_ch:	
  1844  0069                     	ds	1
  1845  006A                     _cntSndData:	
  1846  006A                     	ds	1
  1847  006B                     _flg_slp:	
  1848  006B                     	ds	1
  1849  006C                     _tmrRcvPkt:	
  1850  006C                     	ds	1
  1851  006D                     _u_flg_din:	
  1852  006D                     	ds	1
  1853  006E                     _u_in_sta_currTask:	
  1854  006E                     	ds	1
  1855  006F                     _u_in_sta_tmpTask:	
  1856  006F                     	ds	1
  1857                           
  1858                           	psect	bssBANK1
  1859  00A0                     __pbssBANK1:	
  1860  00A0                     _battV:	
  1861  00A0                     	ds	3
  1862  00A3                     _rmsCurr:	
  1863  00A3                     	ds	3
  1864  00A6                     _batt:	
  1865  00A6                     	ds	2
  1866  00A8                     _errno:	
  1867  00A8                     	ds	2
  1868  00AA                     _tmrLongSel:	
  1869  00AA                     	ds	2
  1870  00AC                     _rtx_flg:	
  1871  00AC                     	ds	1
  1872  00AD                     _tmrDbncSel:	
  1873  00AD                     	ds	1
  1874  00AE                     _u_SYS_STA:	
  1875  00AE                     	ds	1
  1876  00AF                     _u_in_ev_down:	
  1877  00AF                     	ds	1
  1878  00B0                     _u_in_ev_long:	
  1879  00B0                     	ds	1
  1880  00B1                     _u_in_ev_up:	
  1881  00B1                     	ds	1
  1882  00B2                     _pktRx:	
  1883  00B2                     	ds	11
  1884  00BD                     _pktTx:	
  1885  00BD                     	ds	11
  1886  00C8                     _pgm_cfg:	
  1887  00C8                     	ds	5
  1888                           
  1889                           	psect	dataBANK1
  1890  00CD                     __pdataBANK1:	
  1891  00CD                     _cc1PaTable:	
  1892  00CD                     	ds	8
  1893                           
  1894                           	psect	dataBANK2
  1895  0120                     __pdataBANK2:	
  1896  0120                     _cc1InitVal:	
  1897  0120                     	ds	47
  1898                           
  1899                           	psect	clrtext
  1900  0ADE                     clear_ram0:	
  1901                           ;	Called with FSR0 containing the base address, and
  1902                           ;	WREG with the size to clear
  1903                           
  1904  0ADE  0064               	clrwdt	;clear the watchdog before getting into this loop
  1905  0ADF                     clrloop0:	
  1906  0ADF  0180               	clrf	0	;clear RAM location pointed to by FSR
  1907  0AE0  3101               	addfsr 0,1
  1908  0AE1  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1909  0AE2  2ADF               	goto	clrloop0	;have we reached the end yet?
  1910  0AE3  3400               	retlw	0	;all done for this memory range, return
  1911                           
  1912                           	psect	inittext
  1913  0AD8                     init_ram:	
  1914  0AD8  00FE               	movwf	126
  1915  0AD9                     initloop:	
  1916  0AD9  0012               	moviw fsr0++
  1917  0ADA  001E               	movwi fsr1++
  1918  0ADB  0BFE               	decfsz	126,f
  1919  0ADC  2AD9               	goto	initloop
  1920  0ADD  3400               	retlw	0
  1921                           
  1922                           	psect	cstackCOMMON
  1923  0070                     __pcstackCOMMON:	
  1924  0070                     ?_CC1Strobe:	
  1925  0070                     ?_PGMReadNvm:	
  1926                           ; 0 bytes @ 0x0
  1927                           
  1928  0070                     ?_PGMCheckNvm:	
  1929                           ; 0 bytes @ 0x0
  1930                           
  1931  0070                     ?_PGMNvmReset:	
  1932                           ; 0 bytes @ 0x0
  1933                           
  1934  0070                     ?_RTXStartSendPgm:	
  1935                           ; 0 bytes @ 0x0
  1936                           
  1937  0070                     ?_RTXStartSendData:	
  1938                           ; 0 bytes @ 0x0
  1939                           
  1940  0070                     ?_RTXSendPgm:	
  1941                           ; 0 bytes @ 0x0
  1942                           
  1943  0070                     ?_RTXSendData:	
  1944                           ; 0 bytes @ 0x0
  1945                           
  1946  0070                     ?_RTXReadPkt:	
  1947                           ; 0 bytes @ 0x0
  1948                           
  1949  0070                     ?_INInit:	
  1950                           ; 0 bytes @ 0x0
  1951                           
  1952  0070                     ?_OUTInit:	
  1953                           ; 0 bytes @ 0x0
  1954                           
  1955  0070                     ?_SPIInit:	
  1956                           ; 0 bytes @ 0x0
  1957                           
  1958  0070                     ?_ADCInit:	
  1959                           ; 0 bytes @ 0x0
  1960                           
  1961  0070                     ?_ADCConv:	
  1962                           ; 0 bytes @ 0x0
  1963                           
  1964  0070                     ?_CC1Init:	
  1965                           ; 0 bytes @ 0x0
  1966                           
  1967  0070                     ?_CC1Sleep:	
  1968                           ; 0 bytes @ 0x0
  1969                           
  1970  0070                     ?_LEDInit:	
  1971                           ; 0 bytes @ 0x0
  1972                           
  1973  0070                     ?_LEDNormalFlash:	
  1974                           ; 0 bytes @ 0x0
  1975                           
  1976  0070                     ?_LEDFastFlash:	
  1977                           ; 0 bytes @ 0x0
  1978                           
  1979  0070                     ?_NVMInit:	
  1980                           ; 0 bytes @ 0x0
  1981                           
  1982  0070                     ?_DINInit:	
  1983                           ; 0 bytes @ 0x0
  1984                           
  1985  0070                     ?_DINTick:	
  1986                           ; 0 bytes @ 0x0
  1987                           
  1988  0070                     ?_DINTask:	
  1989                           ; 0 bytes @ 0x0
  1990                           
  1991  0070                     ?_SLPSleep:	
  1992                           ; 0 bytes @ 0x0
  1993                           
  1994  0070                     ?_PGMInit:	
  1995                           ; 0 bytes @ 0x0
  1996                           
  1997  0070                     ?_PGMTick:	
  1998                           ; 0 bytes @ 0x0
  1999                           
  2000  0070                     ?_PGMWriteNvm:	
  2001                           ; 0 bytes @ 0x0
  2002                           
  2003  0070                     ?_PGMPgmOff:	
  2004                           ; 0 bytes @ 0x0
  2005                           
  2006  0070                     ?_PGMSelUp:	
  2007                           ; 0 bytes @ 0x0
  2008                           
  2009  0070                     ?_PGMSelLong:	
  2010                           ; 0 bytes @ 0x0
  2011                           
  2012  0070                     ?_RTXInit:	
  2013                           ; 0 bytes @ 0x0
  2014                           
  2015  0070                     ?_RTXTick:	
  2016                           ; 0 bytes @ 0x0
  2017                           
  2018  0070                     ?_RTXTask:	
  2019                           ; 0 bytes @ 0x0
  2020                           
  2021  0070                     ?_RTXAwake:	
  2022                           ; 0 bytes @ 0x0
  2023                           
  2024  0070                     ?_SYSInit:	
  2025                           ; 0 bytes @ 0x0
  2026                           
  2027  0070                     ?_SYSInt:	
  2028                           ; 0 bytes @ 0x0
  2029                           
  2030  0070                     ??_SYSInt:	
  2031                           ; 0 bytes @ 0x0
  2032                           
  2033  0070                     ?_SYSTask:	
  2034                           ; 0 bytes @ 0x0
  2035                           
  2036  0070                     ?_INTIsr:	
  2037                           ; 0 bytes @ 0x0
  2038                           
  2039  0070                     ??_INTIsr:	
  2040                           ; 0 bytes @ 0x0
  2041                           
  2042  0070                     ?_main:	
  2043                           ; 0 bytes @ 0x0
  2044                           
  2045                           
  2046                           ; 0 bytes @ 0x0
  2047  0070                     	ds	1
  2048  0071                     ?_DLYDelay_ms:	
  2049  0071                     ??_INInit:	
  2050                           ; 0 bytes @ 0x1
  2051                           
  2052  0071                     ??_OUTInit:	
  2053                           ; 0 bytes @ 0x1
  2054                           
  2055  0071                     ??_SPIInit:	
  2056                           ; 0 bytes @ 0x1
  2057                           
  2058  0071                     ?_SPIRead:	
  2059                           ; 0 bytes @ 0x1
  2060                           
  2061  0071                     ?_SPIWrite:	
  2062                           ; 0 bytes @ 0x1
  2063                           
  2064  0071                     ??_ADCInit:	
  2065                           ; 0 bytes @ 0x1
  2066                           
  2067  0071                     ??_LEDInit:	
  2068                           ; 0 bytes @ 0x1
  2069                           
  2070  0071                     ??_NVMInit:	
  2071                           ; 0 bytes @ 0x1
  2072                           
  2073  0071                     ?_NVMRead:	
  2074                           ; 0 bytes @ 0x1
  2075                           
  2076  0071                     ?_NVMWrite:	
  2077                           ; 0 bytes @ 0x1
  2078                           
  2079  0071                     ??_DINInit:	
  2080                           ; 0 bytes @ 0x1
  2081                           
  2082  0071                     ??_DINTick:	
  2083                           ; 0 bytes @ 0x1
  2084                           
  2085  0071                     ??_DINTask:	
  2086                           ; 0 bytes @ 0x1
  2087                           
  2088  0071                     ??_PGMTick:	
  2089                           ; 0 bytes @ 0x1
  2090                           
  2091  0071                     ??_PGMPgmOff:	
  2092                           ; 0 bytes @ 0x1
  2093                           
  2094  0071                     ??_SYSInit:	
  2095                           ; 0 bytes @ 0x1
  2096                           
  2097  0071                     ?___ftge:	
  2098                           ; 0 bytes @ 0x1
  2099                           
  2100  0071                     ?___wmul:	
  2101                           ; 1 bit 
  2102                           
  2103  0071                     ?___lwdiv:	
  2104                           ; 2 bytes @ 0x1
  2105                           
  2106  0071                     ?___ftpack:	
  2107                           ; 2 bytes @ 0x1
  2108                           
  2109  0071                     SPIRead@len:	
  2110                           ; 3 bytes @ 0x1
  2111                           
  2112  0071                     LEDInit@sta:	
  2113                           ; 1 bytes @ 0x1
  2114                           
  2115  0071                     NVMInit@sta:	
  2116                           ; 1 bytes @ 0x1
  2117                           
  2118  0071                     DINInit@sta:	
  2119                           ; 1 bytes @ 0x1
  2120                           
  2121  0071                     SPIWrite@srcPtr:	
  2122                           ; 1 bytes @ 0x1
  2123                           
  2124  0071                     DLYDelay_ms@val:	
  2125                           ; 2 bytes @ 0x1
  2126                           
  2127  0071                     NVMRead@addr:	
  2128                           ; 2 bytes @ 0x1
  2129                           
  2130  0071                     NVMWrite@addr:	
  2131                           ; 2 bytes @ 0x1
  2132                           
  2133  0071                     ___wmul@multiplier:	
  2134                           ; 2 bytes @ 0x1
  2135                           
  2136  0071                     ___lwdiv@divisor:	
  2137                           ; 2 bytes @ 0x1
  2138                           
  2139  0071                     ___ftpack@arg:	
  2140                           ; 2 bytes @ 0x1
  2141                           
  2142  0071                     ___ftge@ff1:	
  2143                           ; 3 bytes @ 0x1
  2144                           
  2145                           
  2146                           ; 3 bytes @ 0x1
  2147  0071                     	ds	1
  2148  0072                     ??_SPIRead:	
  2149  0072                     INInit@sta:	
  2150                           ; 0 bytes @ 0x2
  2151                           
  2152  0072                     OUTInit@sta:	
  2153                           ; 1 bytes @ 0x2
  2154                           
  2155  0072                     SPIInit@state:	
  2156                           ; 1 bytes @ 0x2
  2157                           
  2158  0072                     ADCInit@state:	
  2159                           ; 1 bytes @ 0x2
  2160                           
  2161  0072                     SYSInit@state:	
  2162                           ; 1 bytes @ 0x2
  2163                           
  2164                           
  2165                           ; 1 bytes @ 0x2
  2166  0072                     	ds	1
  2167  0073                     ??_DLYDelay_ms:	
  2168  0073                     SPIWrite@len:	
  2169                           ; 0 bytes @ 0x3
  2170                           
  2171  0073                     NVMRead@dest:	
  2172                           ; 1 bytes @ 0x3
  2173                           
  2174  0073                     NVMWrite@source:	
  2175                           ; 1 bytes @ 0x3
  2176                           
  2177  0073                     ___wmul@multiplicand:	
  2178                           ; 1 bytes @ 0x3
  2179                           
  2180  0073                     ___lwdiv@dividend:	
  2181                           ; 2 bytes @ 0x3
  2182                           
  2183                           
  2184                           ; 2 bytes @ 0x3
  2185  0073                     	ds	1
  2186  0074                     ??_SPIWrite:	
  2187  0074                     SPIRead@dstPtr:	
  2188                           ; 0 bytes @ 0x4
  2189                           
  2190  0074                     NVMRead@len:	
  2191                           ; 1 bytes @ 0x4
  2192                           
  2193  0074                     NVMWrite@len:	
  2194                           ; 1 bytes @ 0x4
  2195                           
  2196  0074                     ___ftpack@exp:	
  2197                           ; 1 bytes @ 0x4
  2198                           
  2199  0074                     ___ftge@ff2:	
  2200                           ; 1 bytes @ 0x4
  2201                           
  2202                           
  2203                           ; 3 bytes @ 0x4
  2204  0074                     	ds	1
  2205  0075                     ??_NVMRead:	
  2206  0075                     ??_NVMWrite:	
  2207                           ; 0 bytes @ 0x5
  2208                           
  2209  0075                     ??___wmul:	
  2210                           ; 0 bytes @ 0x5
  2211                           
  2212  0075                     ??___lwdiv:	
  2213                           ; 0 bytes @ 0x5
  2214                           
  2215  0075                     SPIRead@i:	
  2216                           ; 0 bytes @ 0x5
  2217                           
  2218  0075                     ___ftpack@sign:	
  2219                           ; 1 bytes @ 0x5
  2220                           
  2221  0075                     DLYDelay_ms@i:	
  2222                           ; 1 bytes @ 0x5
  2223                           
  2224  0075                     ___wmul@product:	
  2225                           ; 2 bytes @ 0x5
  2226                           
  2227                           
  2228                           ; 2 bytes @ 0x5
  2229  0075                     	ds	1
  2230  0076                     ??___ftpack:	
  2231  0076                     SPIWrite@i:	
  2232                           ; 0 bytes @ 0x6
  2233                           
  2234  0076                     ___lwdiv@quotient:	
  2235                           ; 1 bytes @ 0x6
  2236                           
  2237                           
  2238                           ; 2 bytes @ 0x6
  2239  0076                     	ds	1
  2240  0077                     ??_CC1Strobe:	
  2241  0077                     ?_CC1Write:	
  2242                           ; 0 bytes @ 0x7
  2243                           
  2244  0077                     ?_CC1Read:	
  2245                           ; 0 bytes @ 0x7
  2246                           
  2247  0077                     ??_LEDNormalFlash:	
  2248                           ; 0 bytes @ 0x7
  2249                           
  2250  0077                     ??_LEDFastFlash:	
  2251                           ; 0 bytes @ 0x7
  2252                           
  2253  0077                     ??___ftge:	
  2254                           ; 0 bytes @ 0x7
  2255                           
  2256  0077                     CC1Read@dst:	
  2257                           ; 0 bytes @ 0x7
  2258                           
  2259  0077                     NVMRead@i:	
  2260                           ; 1 bytes @ 0x7
  2261                           
  2262  0077                     CC1Write@src:	
  2263                           ; 1 bytes @ 0x7
  2264                           
  2265                           
  2266                           ; 2 bytes @ 0x7
  2267  0077                     	ds	1
  2268  0078                     ??_PGMReadNvm:	
  2269  0078                     ??_PGMWriteNvm:	
  2270                           ; 0 bytes @ 0x8
  2271                           
  2272  0078                     CC1Strobe@e_stb:	
  2273                           ; 0 bytes @ 0x8
  2274                           
  2275  0078                     CC1Read@len:	
  2276                           ; 1 bytes @ 0x8
  2277                           
  2278  0078                     LEDNormalFlash@num:	
  2279                           ; 1 bytes @ 0x8
  2280                           
  2281  0078                     LEDFastFlash@num:	
  2282                           ; 1 bytes @ 0x8
  2283                           
  2284  0078                     ___lwdiv@counter:	
  2285                           ; 1 bytes @ 0x8
  2286                           
  2287                           
  2288                           ; 1 bytes @ 0x8
  2289  0078                     	ds	1
  2290  0079                     ??_CC1Read:	
  2291  0079                     ??___lltoft:	
  2292                           ; 0 bytes @ 0x9
  2293                           
  2294  0079                     ?___lwtoft:	
  2295                           ; 0 bytes @ 0x9
  2296                           
  2297  0079                     CC1Strobe@cc1Stb:	
  2298                           ; 3 bytes @ 0x9
  2299                           
  2300  0079                     CC1Write@len:	
  2301                           ; 1 bytes @ 0x9
  2302                           
  2303  0079                     LEDNormalFlash@i:	
  2304                           ; 1 bytes @ 0x9
  2305                           
  2306  0079                     LEDFastFlash@i:	
  2307                           ; 1 bytes @ 0x9
  2308                           
  2309  0079                     ___ftadd@sign:	
  2310                           ; 1 bytes @ 0x9
  2311                           
  2312  0079                     ___lwtoft@c:	
  2313                           ; 1 bytes @ 0x9
  2314                           
  2315                           
  2316                           ; 2 bytes @ 0x9
  2317  0079                     	ds	1
  2318  007A                     ??_CC1Write:	
  2319  007A                     ??_PGMNvmReset:	
  2320                           ; 0 bytes @ 0xA
  2321                           
  2322  007A                     ??_CC1Sleep:	
  2323                           ; 0 bytes @ 0xA
  2324                           
  2325  007A                     ??_SLPSleep:	
  2326                           ; 0 bytes @ 0xA
  2327                           
  2328  007A                     ??_PGMSelLong:	
  2329                           ; 0 bytes @ 0xA
  2330                           
  2331  007A                     CC1Read@addr:	
  2332                           ; 0 bytes @ 0xA
  2333                           
  2334  007A                     ___ftadd@exp2:	
  2335                           ; 1 bytes @ 0xA
  2336                           
  2337  007A                     ___lltoft@exp:	
  2338                           ; 1 bytes @ 0xA
  2339                           
  2340                           
  2341                           ; 1 bytes @ 0xA
  2342  007A                     	ds	1
  2343  007B                     ??_PGMCheckNvm:	
  2344  007B                     ??_CC1Init:	
  2345                           ; 0 bytes @ 0xB
  2346                           
  2347  007B                     ??_PGMInit:	
  2348                           ; 0 bytes @ 0xB
  2349                           
  2350  007B                     CC1Read@cc1Addr:	
  2351                           ; 0 bytes @ 0xB
  2352                           
  2353  007B                     PGMInit@state:	
  2354                           ; 1 bytes @ 0xB
  2355                           
  2356  007B                     ___ftadd@exp1:	
  2357                           ; 1 bytes @ 0xB
  2358                           
  2359                           
  2360                           ; 1 bytes @ 0xB
  2361  007B                     	ds	1
  2362  007C                     ??_RTXStartSendPgm:	
  2363  007C                     ??_RTXStartSendData:	
  2364                           ; 0 bytes @ 0xC
  2365                           
  2366  007C                     ??_RTXInit:	
  2367                           ; 0 bytes @ 0xC
  2368                           
  2369  007C                     ??_RTXTick:	
  2370                           ; 0 bytes @ 0xC
  2371                           
  2372  007C                     ??_RTXTask:	
  2373                           ; 0 bytes @ 0xC
  2374                           
  2375  007C                     ??_RTXAwake:	
  2376                           ; 0 bytes @ 0xC
  2377                           
  2378  007C                     ??_SYSTask:	
  2379                           ; 0 bytes @ 0xC
  2380                           
  2381  007C                     ??___ftsub:	
  2382                           ; 0 bytes @ 0xC
  2383                           
  2384                           
  2385                           	psect	cstackBANK0
  2386  0020                     __pcstackBANK0:	
  2387                           ; 0 bytes @ 0xC
  2388                           
  2389  0020                     ?_RTXRcvPkt:	
  2390  0020                     ??___lwtoft:	
  2391                           ; 0 bytes @ 0x0
  2392                           
  2393  0020                     ?___ftadd:	
  2394                           ; 0 bytes @ 0x0
  2395                           
  2396  0020                     ?___lltoft:	
  2397                           ; 3 bytes @ 0x0
  2398                           
  2399  0020                     CC1Write@addr:	
  2400                           ; 3 bytes @ 0x0
  2401                           
  2402  0020                     SLPSleep@IOCBNTmp:	
  2403                           ; 1 bytes @ 0x0
  2404                           
  2405  0020                     RTXRcvPkt@len:	
  2406                           ; 1 bytes @ 0x0
  2407                           
  2408  0020                     ___ftadd@f1:	
  2409                           ; 1 bytes @ 0x0
  2410                           
  2411  0020                     ___lltoft@c:	
  2412                           ; 3 bytes @ 0x0
  2413                           
  2414  0020                     NVMWrite@bufTmpRow:	
  2415                           ; 4 bytes @ 0x0
  2416                           
  2417                           
  2418                           ; 64 bytes @ 0x0
  2419  0020                     	ds	1
  2420  0021                     ??_RTXRcvPkt:	
  2421  0021                     CC1Write@cc1Addr:	
  2422                           ; 0 bytes @ 0x1
  2423                           
  2424  0021                     SLPSleep@INTCONTmp:	
  2425                           ; 1 bytes @ 0x1
  2426                           
  2427                           
  2428                           ; 1 bytes @ 0x1
  2429  0021                     	ds	1
  2430  0022                     ?_RTXSndPkt:	
  2431  0022                     CC1Init@state:	
  2432                           ; 0 bytes @ 0x2
  2433                           
  2434  0022                     SLPSleep@WPUBTmp:	
  2435                           ; 1 bytes @ 0x2
  2436                           
  2437  0022                     RTXSndPkt@len:	
  2438                           ; 1 bytes @ 0x2
  2439                           
  2440                           
  2441                           ; 1 bytes @ 0x2
  2442  0022                     	ds	1
  2443  0023                     ??_RTXSndPkt:	
  2444  0023                     SLPSleep@WDTCONTmp:	
  2445                           ; 0 bytes @ 0x3
  2446                           
  2447  0023                     RTXRcvPkt@dst:	
  2448                           ; 1 bytes @ 0x3
  2449                           
  2450  0023                     ___ftadd@f2:	
  2451                           ; 1 bytes @ 0x3
  2452                           
  2453                           
  2454                           ; 3 bytes @ 0x3
  2455  0023                     	ds	1
  2456  0024                     ?___ftmul:	
  2457  0024                     SLPSleep@OPTION_REGTmp:	
  2458                           ; 3 bytes @ 0x4
  2459                           
  2460  0024                     RTXSndPkt@numRxByte:	
  2461                           ; 1 bytes @ 0x4
  2462                           
  2463  0024                     ___ftmul@f1:	
  2464                           ; 1 bytes @ 0x4
  2465                           
  2466                           
  2467                           ; 3 bytes @ 0x4
  2468  0024                     	ds	1
  2469  0025                     SLPSleep@FVRCONTmp:	
  2470  0025                     RTXSndPkt@src:	
  2471                           ; 1 bytes @ 0x5
  2472                           
  2473                           
  2474                           ; 1 bytes @ 0x5
  2475  0025                     	ds	1
  2476  0026                     ??___ftadd:	
  2477  0026                     SLPSleep@ADCON0Tmp:	
  2478                           ; 0 bytes @ 0x6
  2479                           
  2480  0026                     RTXSndPkt@numTxByte:	
  2481                           ; 1 bytes @ 0x6
  2482                           
  2483                           
  2484                           ; 1 bytes @ 0x6
  2485  0026                     	ds	1
  2486  0027                     SLPSleep@TESTBATTtmp:	
  2487  0027                     RTXSndPkt@sta:	
  2488                           ; 1 bytes @ 0x7
  2489                           
  2490  0027                     ___ftmul@f2:	
  2491                           ; 1 bytes @ 0x7
  2492                           
  2493                           
  2494                           ; 3 bytes @ 0x7
  2495  0027                     	ds	1
  2496  0028                     ??_RTXSendPgm:	
  2497  0028                     ??_RTXSendData:	
  2498                           ; 0 bytes @ 0x8
  2499                           
  2500                           
  2501                           ; 0 bytes @ 0x8
  2502  0028                     	ds	1
  2503  0029                     RTXSendData@valTemp:	
  2504                           
  2505                           ; 3 bytes @ 0x9
  2506  0029                     	ds	1
  2507  002A                     ??___ftmul:	
  2508  002A                     ?___ftsub:	
  2509                           ; 0 bytes @ 0xA
  2510                           
  2511  002A                     ___ftsub@f2:	
  2512                           ; 3 bytes @ 0xA
  2513                           
  2514                           
  2515                           ; 3 bytes @ 0xA
  2516  002A                     	ds	2
  2517  002C                     RTXSendData@valBatt:	
  2518                           
  2519                           ; 3 bytes @ 0xC
  2520  002C                     	ds	1
  2521  002D                     ___ftsub@f1:	
  2522                           
  2523                           ; 3 bytes @ 0xD
  2524  002D                     	ds	1
  2525  002E                     ___ftmul@exp:	
  2526                           
  2527                           ; 1 bytes @ 0xE
  2528  002E                     	ds	1
  2529  002F                     ___ftmul@f3_as_product:	
  2530                           
  2531                           ; 3 bytes @ 0xF
  2532  002F                     	ds	3
  2533  0032                     ___ftmul@cntr:	
  2534                           
  2535                           ; 1 bytes @ 0x12
  2536  0032                     	ds	1
  2537  0033                     ___ftmul@sign:	
  2538                           
  2539                           ; 1 bytes @ 0x13
  2540  0033                     	ds	1
  2541  0034                     ?_sqrt:	
  2542  0034                     ?___ftdiv:	
  2543                           ; 3 bytes @ 0x14
  2544                           
  2545  0034                     ___ftdiv@f2:	
  2546                           ; 3 bytes @ 0x14
  2547                           
  2548  0034                     sqrt@y:	
  2549                           ; 3 bytes @ 0x14
  2550                           
  2551                           
  2552                           ; 3 bytes @ 0x14
  2553  0034                     	ds	3
  2554  0037                     ??_sqrt:	
  2555  0037                     ___ftdiv@f1:	
  2556                           ; 0 bytes @ 0x17
  2557                           
  2558                           
  2559                           ; 3 bytes @ 0x17
  2560  0037                     	ds	3
  2561  003A                     ??___ftdiv:	
  2562  003A                     sqrt@og:	
  2563                           ; 0 bytes @ 0x1A
  2564                           
  2565                           
  2566                           ; 3 bytes @ 0x1A
  2567  003A                     	ds	3
  2568  003D                     sqrt@z:	
  2569                           
  2570                           ; 3 bytes @ 0x1D
  2571  003D                     	ds	1
  2572  003E                     ___ftdiv@cntr:	
  2573                           
  2574                           ; 1 bytes @ 0x1E
  2575  003E                     	ds	1
  2576  003F                     ___ftdiv@f3:	
  2577                           
  2578                           ; 3 bytes @ 0x1F
  2579  003F                     	ds	1
  2580  0040                     sqrt@i:	
  2581                           
  2582                           ; 1 bytes @ 0x20
  2583  0040                     	ds	1
  2584  0041                     sqrt@q:	
  2585                           
  2586                           ; 3 bytes @ 0x21
  2587  0041                     	ds	1
  2588  0042                     ___ftdiv@exp:	
  2589                           
  2590                           ; 1 bytes @ 0x22
  2591  0042                     	ds	1
  2592  0043                     ___ftdiv@sign:	
  2593                           
  2594                           ; 1 bytes @ 0x23
  2595  0043                     	ds	1
  2596  0044                     sqrt@x:	
  2597                           
  2598                           ; 3 bytes @ 0x24
  2599  0044                     	ds	3
  2600  0047                     ??_ADCConv:	
  2601                           
  2602                           ; 0 bytes @ 0x27
  2603  0047                     	ds	14
  2604  0055                     _ADCConv$1419:	
  2605                           
  2606                           ; 3 bytes @ 0x35
  2607  0055                     	ds	3
  2608  0058                     ADCConv@sumCurr:	
  2609                           
  2610                           ; 4 bytes @ 0x38
  2611  0058                     	ds	4
  2612  005C                     ADCConv@sumBatt:	
  2613                           
  2614                           ; 2 bytes @ 0x3C
  2615  005C                     	ds	2
  2616  005E                     ADCConv@cntSum:	
  2617                           
  2618                           ; 1 bytes @ 0x3E
  2619  005E                     	ds	1
  2620  005F                     RTXInit@state:	
  2621                           
  2622                           ; 1 bytes @ 0x3F
  2623  005F                     	ds	1
  2624  0060                     NVMWrite@rowAddr:	
  2625                           
  2626                           ; 2 bytes @ 0x40
  2627  0060                     	ds	2
  2628  0062                     NVMWrite@i:	
  2629                           
  2630                           ; 1 bytes @ 0x42
  2631  0062                     	ds	1
  2632  0063                     NVMWrite@latchAddr:	
  2633                           
  2634                           ; 1 bytes @ 0x43
  2635  0063                     	ds	1
  2636  0064                     NVMWrite@j:	
  2637                           
  2638                           ; 1 bytes @ 0x44
  2639  0064                     	ds	1
  2640  0065                     ??_RTXReadPkt:	
  2641  0065                     ??_PGMSelUp:	
  2642                           ; 0 bytes @ 0x45
  2643                           
  2644                           
  2645                           ; 0 bytes @ 0x45
  2646  0065                     	ds	1
  2647  0066                     RTXReadPkt@numRxByte:	
  2648                           
  2649                           ; 1 bytes @ 0x46
  2650  0066                     	ds	1
  2651  0067                     ??_main:	
  2652                           
  2653                           ; 0 bytes @ 0x47
  2654  0067                     	ds	1
  2655  0068                     main@i:	
  2656                           
  2657                           ; 1 bytes @ 0x48
  2658  0068                     	ds	1
  2659                           
  2660                           	psect	maintext
  2661  078C                     __pmaintext:	
  2662 ;;
  2663 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2664 ;;
  2665 ;; *************** function _main *****************
  2666 ;; Defined at:
  2667 ;;		line 54 in file "Sensore.c"
  2668 ;; Parameters:    Size  Location     Type
  2669 ;;		None
  2670 ;; Auto vars:     Size  Location     Type
  2671 ;;  i               1   72[BANK0 ] unsigned char 
  2672 ;; Return value:  Size  Location     Type
  2673 ;;		None               void
  2674 ;; Registers used:
  2675 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2676 ;; Tracked objects:
  2677 ;;		On entry : B1F/0
  2678 ;;		On exit  : 0/0
  2679 ;;		Unchanged: 0/0
  2680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2681 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2682 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2683 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2684 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2685 ;;Total ram usage:        2 bytes
  2686 ;; Hardware stack levels required when called:   11
  2687 ;; This function calls:
  2688 ;;		_ADCInit
  2689 ;;		_CC1Init
  2690 ;;		_DINInit
  2691 ;;		_DINTask
  2692 ;;		_INInit
  2693 ;;		_LEDInit
  2694 ;;		_NVMInit
  2695 ;;		_OUTInit
  2696 ;;		_PGMInit
  2697 ;;		_RTXInit
  2698 ;;		_RTXTask
  2699 ;;		_SPIInit
  2700 ;;		_SYSInit
  2701 ;;		_SYSTask
  2702 ;; This function is called by:
  2703 ;;		Startup code after reset
  2704 ;; This function uses a non-reentrant model
  2705 ;;
  2706                           
  2707                           
  2708                           ;psect for function _main
  2709  078C                     _main:	
  2710                           
  2711                           ;Sensore.c: 56: unsigned char i;
  2712                           ;Sensore.c: 59: for(i=0;i<3;i++)
  2713                           
  2714                           ;incstack = 0
  2715                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2716  078C  0020               	movlb	0	; select bank0
  2717  078D  01E8               	clrf	main@i
  2718  078E  3003               	movlw	3
  2719  078F  0268               	subwf	main@i,w
  2720  0790  1803               	btfsc	3,0
  2721  0791  2FD3               	goto	l679
  2722  0792                     l678:	
  2723  0792  0064               	clrwdt	;# 
  2724                           
  2725                           ;Sensore.c: 63: SYSInit(i);
  2726  0793  0020               	movlb	0	; select bank0
  2727  0794  0868               	movf	main@i,w
  2728  0795  318D  25A5  3187   	fcall	_SYSInit
  2729                           
  2730                           ;Sensore.c: 64: INInit(i);
  2731  0798  0020               	movlb	0	; select bank0
  2732  0799  0868               	movf	main@i,w
  2733  079A  318D  251C  3187   	fcall	_INInit
  2734                           
  2735                           ;Sensore.c: 65: OUTInit(i);
  2736  079D  0020               	movlb	0	; select bank0
  2737  079E  0868               	movf	main@i,w
  2738  079F  318D  25CB  3187   	fcall	_OUTInit
  2739                           
  2740                           ;Sensore.c: 66: DINInit(i);
  2741  07A2  0020               	movlb	0	; select bank0
  2742  07A3  0868               	movf	main@i,w
  2743  07A4  318B  2370  3187   	fcall	_DINInit
  2744                           
  2745                           ;Sensore.c: 67: LEDInit(i);
  2746  07A7  0020               	movlb	0	; select bank0
  2747  07A8  0868               	movf	main@i,w
  2748  07A9  318A  22F4  3187   	fcall	_LEDInit
  2749                           
  2750                           ;Sensore.c: 68: SPIInit(i);
  2751  07AC  0020               	movlb	0	; select bank0
  2752  07AD  0868               	movf	main@i,w
  2753  07AE  318C  24C2  3187   	fcall	_SPIInit
  2754                           
  2755                           ;Sensore.c: 69: CC1Init(i);
  2756  07B1  0020               	movlb	0	; select bank0
  2757  07B2  0868               	movf	main@i,w
  2758  07B3  318E  26A4  3187   	fcall	_CC1Init
  2759                           
  2760                           ;Sensore.c: 70: NVMInit(i);
  2761  07B6  0020               	movlb	0	; select bank0
  2762  07B7  0868               	movf	main@i,w
  2763  07B8  318A  22FF  3187   	fcall	_NVMInit
  2764                           
  2765                           ;Sensore.c: 71: RTXInit(i);
  2766  07BB  0020               	movlb	0	; select bank0
  2767  07BC  0868               	movf	main@i,w
  2768  07BD  318D  255B  3187   	fcall	_RTXInit
  2769                           
  2770                           ;Sensore.c: 72: PGMInit(i);
  2771  07C0  0020               	movlb	0	; select bank0
  2772  07C1  0868               	movf	main@i,w
  2773  07C2  318B  23BA  3187   	fcall	_PGMInit
  2774                           
  2775                           ;Sensore.c: 73: ADCInit(i);
  2776  07C5  0020               	movlb	0	; select bank0
  2777  07C6  0868               	movf	main@i,w
  2778  07C7  318D  25F4  3187   	fcall	_ADCInit
  2779  07CA  3001               	movlw	1
  2780  07CB  0020               	movlb	0	; select bank0
  2781  07CC  00E7               	movwf	??_main
  2782  07CD  0867               	movf	??_main,w
  2783  07CE  07E8               	addwf	main@i,f
  2784  07CF  3003               	movlw	3
  2785  07D0  0268               	subwf	main@i,w
  2786  07D1  1C03               	skipc
  2787  07D2  2F92               	goto	l678
  2788  07D3                     l679:	
  2789                           
  2790                           ;Sensore.c: 74: }
  2791                           ;Sensore.c: 77: INTCONbits.GIE=1;
  2792  07D3  178B               	bsf	11,7	;volatile
  2793  07D4                     l680:	
  2794                           ;Sensore.c: 80: while(1)
  2795                           
  2796  07D4  0064               	clrwdt	;# 
  2797                           
  2798                           ;Sensore.c: 84: SYSTask();
  2799  07D5  318F  2708  3187   	fcall	_SYSTask
  2800                           
  2801                           ;Sensore.c: 85: DINTask();
  2802  07D8  318C  2486  3187   	fcall	_DINTask
  2803                           
  2804                           ;Sensore.c: 86: RTXTask();
  2805  07DB  318A  22D2  3187   	fcall	_RTXTask
  2806  07DE  2FD4               	goto	l680
  2807  07DF                     __end_of_main:	
  2808                           
  2809                           	psect	text1
  2810  0F08                     __ptext1:	
  2811 ;; *************** function _SYSTask *****************
  2812 ;; Defined at:
  2813 ;;		line 44 in file "SYS.c"
  2814 ;; Parameters:    Size  Location     Type
  2815 ;;		None
  2816 ;; Auto vars:     Size  Location     Type
  2817 ;;		None
  2818 ;; Return value:  Size  Location     Type
  2819 ;;		None               void
  2820 ;; Registers used:
  2821 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2822 ;; Tracked objects:
  2823 ;;		On entry : 0/0
  2824 ;;		On exit  : 0/0
  2825 ;;		Unchanged: 0/0
  2826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2827 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2828 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2829 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2830 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2831 ;;Total ram usage:        0 bytes
  2832 ;; Hardware stack levels used:    1
  2833 ;; Hardware stack levels required when called:   10
  2834 ;; This function calls:
  2835 ;;		_DINTick
  2836 ;;		_PGMPgmOff
  2837 ;;		_PGMSelLong
  2838 ;;		_PGMSelUp
  2839 ;;		_PGMTick
  2840 ;;		_RTXAwake
  2841 ;;		_RTXTick
  2842 ;;		_SLPSleep
  2843 ;; This function is called by:
  2844 ;;		_main
  2845 ;; This function uses a non-reentrant model
  2846 ;;
  2847                           
  2848                           
  2849                           ;psect for function _SYSTask
  2850  0F08                     _SYSTask:	
  2851                           
  2852                           ;SYS.c: 47: if(u_SYS_STA.TICK)
  2853                           
  2854                           ;incstack = 0
  2855                           ; Regs used in _SYSTask: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2856  0F08  0021               	movlb	1	; select bank1
  2857  0F09  1C2E               	btfss	_u_SYS_STA^(0+128),0
  2858  0F0A  2F15               	goto	l3862
  2859                           
  2860                           ;SYS.c: 48: {
  2861                           ;SYS.c: 50: u_SYS_STA.TICK=0;
  2862  0F0B  102E               	bcf	_u_SYS_STA^(0+128),0
  2863                           
  2864                           ;SYS.c: 53: RTXTick();
  2865  0F0C  318B  2381  318F   	fcall	_RTXTick
  2866                           
  2867                           ;SYS.c: 54: DINTick();
  2868  0F0F  318E  261F  318F   	fcall	_DINTick
  2869                           
  2870                           ;SYS.c: 55: PGMTick();
  2871  0F12  3180  2003  318F   	fcall	_PGMTick
  2872  0F15                     l3862:	
  2873                           
  2874                           ;SYS.c: 56: }
  2875                           ;SYS.c: 58: if(u_in_ev_down.sel)
  2876  0F15  0021               	movlb	1	; select bank1
  2877  0F16  182F               	btfsc	_u_in_ev_down^(0+128),0
  2878                           
  2879                           ;SYS.c: 59: {
  2880                           ;SYS.c: 61: u_in_ev_down.sel=0;
  2881  0F17  102F               	bcf	_u_in_ev_down^(0+128),0
  2882                           
  2883                           ;SYS.c: 62: }
  2884                           ;SYS.c: 63: if(u_in_ev_up.sel)
  2885  0F18  1C31               	btfss	_u_in_ev_up^(0+128),0
  2886  0F19  2F1E               	goto	l3870
  2887                           
  2888                           ;SYS.c: 64: {
  2889                           ;SYS.c: 66: u_in_ev_up.sel=0;
  2890  0F1A  1031               	bcf	_u_in_ev_up^(0+128),0
  2891                           
  2892                           ;SYS.c: 67: PGMSelUp();
  2893  0F1B  318B  23D0  318F   	fcall	_PGMSelUp
  2894  0F1E                     l3870:	
  2895                           
  2896                           ;SYS.c: 68: }
  2897                           ;SYS.c: 69: if(u_in_ev_long.sel)
  2898  0F1E  0021               	movlb	1	; select bank1
  2899  0F1F  1C30               	btfss	_u_in_ev_long^(0+128),0
  2900  0F20  2F25               	goto	l3876
  2901                           
  2902                           ;SYS.c: 70: {
  2903                           ;SYS.c: 72: u_in_ev_long.sel=0;
  2904  0F21  1030               	bcf	_u_in_ev_long^(0+128),0
  2905                           
  2906                           ;SYS.c: 73: PGMSelLong();
  2907  0F22  318B  23E7  318F   	fcall	_PGMSelLong
  2908  0F25                     l3876:	
  2909                           
  2910                           ;SYS.c: 74: }
  2911                           ;SYS.c: 77: if(flg_slp.goSleep)
  2912  0F25  0020               	movlb	0	; select bank0
  2913  0F26  1C6B               	btfss	_flg_slp,0
  2914  0F27  2F2E               	goto	l3882
  2915                           
  2916                           ;SYS.c: 78: {
  2917                           ;SYS.c: 80: flg_slp.goSleep=0;
  2918  0F28  106B               	bcf	_flg_slp,0
  2919                           
  2920                           ;SYS.c: 82: if(!(!PORTBbits.RB2))
  2921  0F29  1D0D               	btfss	13,2	;volatile
  2922  0F2A  2F2E               	goto	l3882
  2923                           
  2924                           ;SYS.c: 83: SLPSleep();
  2925  0F2B  3186  2668  318F   	fcall	_SLPSleep
  2926  0F2E                     l3882:	
  2927                           
  2928                           ;SYS.c: 84: }
  2929                           ;SYS.c: 87: if(rtx_flg.pgmDone)
  2930  0F2E  0021               	movlb	1	; select bank1
  2931  0F2F  1C2C               	btfss	_rtx_flg^(0+128),0
  2932  0F30  2F35               	goto	l3888
  2933                           
  2934                           ;SYS.c: 88: {
  2935                           ;SYS.c: 90: rtx_flg.pgmDone=0;
  2936  0F31  102C               	bcf	_rtx_flg^(0+128),0
  2937                           
  2938                           ;SYS.c: 92: PGMPgmOff();
  2939  0F32  318A  22C8  318F   	fcall	_PGMPgmOff
  2940  0F35                     l3888:	
  2941                           
  2942                           ;SYS.c: 93: }
  2943                           ;SYS.c: 96: if(flg_slp.exitSleep)
  2944  0F35  0020               	movlb	0	; select bank0
  2945  0F36  1CEB               	btfss	_flg_slp,1
  2946  0F37  0008               	return
  2947                           
  2948                           ;SYS.c: 97: {
  2949                           ;SYS.c: 99: flg_slp.exitSleep=0;
  2950  0F38  10EB               	bcf	_flg_slp,1
  2951                           
  2952                           ;SYS.c: 101: RTXAwake();
  2953  0F39  318C  2418         	fcall	_RTXAwake
  2954  0F3B  0008               	return
  2955  0F3C                     __end_of_SYSTask:	
  2956                           
  2957                           	psect	text2
  2958  0668                     __ptext2:	
  2959 ;; *************** function _SLPSleep *****************
  2960 ;; Defined at:
  2961 ;;		line 6 in file "SLP.c"
  2962 ;; Parameters:    Size  Location     Type
  2963 ;;		None
  2964 ;; Auto vars:     Size  Location     Type
  2965 ;;  TESTBATTtmp     1    7[BANK0 ] unsigned char 
  2966 ;;  ADCON0Tmp       1    6[BANK0 ] unsigned char 
  2967 ;;  FVRCONTmp       1    5[BANK0 ] unsigned char 
  2968 ;;  OPTION_REGTm    1    4[BANK0 ] unsigned char 
  2969 ;;  WDTCONTmp       1    3[BANK0 ] unsigned char 
  2970 ;;  WPUBTmp         1    2[BANK0 ] unsigned char 
  2971 ;;  INTCONTmp       1    1[BANK0 ] unsigned char 
  2972 ;;  IOCBNTmp        1    0[BANK0 ] unsigned char 
  2973 ;; Return value:  Size  Location     Type
  2974 ;;		None               void
  2975 ;; Registers used:
  2976 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2977 ;; Tracked objects:
  2978 ;;		On entry : 0/0
  2979 ;;		On exit  : 0/0
  2980 ;;		Unchanged: 0/0
  2981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2983 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2984 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2985 ;;      Totals:         1       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2986 ;;Total ram usage:        9 bytes
  2987 ;; Hardware stack levels used:    1
  2988 ;; Hardware stack levels required when called:    5
  2989 ;; This function calls:
  2990 ;;		_CC1Sleep
  2991 ;; This function is called by:
  2992 ;;		_SYSTask
  2993 ;; This function uses a non-reentrant model
  2994 ;;
  2995                           
  2996                           
  2997                           ;psect for function _SLPSleep
  2998  0668                     _SLPSleep:	
  2999                           
  3000                           ;SLP.c: 8: unsigned char IOCBNTmp,INTCONTmp,WPUBTmp,WDTCONTmp,OPTION_REGTmp,FVRCONTmp,AD
      +                          CON0Tmp,TESTBATTtmp;
  3001                           ;SLP.c: 10: CC1Sleep();
  3002                           
  3003                           ;incstack = 0
  3004                           ; Regs used in _SLPSleep: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3005  0668  318A  22E4  3186   	fcall	_CC1Sleep
  3006                           
  3007                           ;SLP.c: 12: WPUBTmp=WPUB;
  3008  066B  0024               	movlb	4	; select bank4
  3009  066C  080D               	movf	13,w	;volatile
  3010  066D  00FA               	movwf	??_SLPSleep
  3011  066E  087A               	movf	??_SLPSleep,w
  3012  066F  0020               	movlb	0	; select bank0
  3013  0670  00A2               	movwf	SLPSleep@WPUBTmp
  3014                           
  3015                           ;SLP.c: 13: WPUB=0b00000100;
  3016  0671  3004               	movlw	4
  3017  0672  0024               	movlb	4	; select bank4
  3018  0673  008D               	movwf	13	;volatile
  3019                           
  3020                           ;SLP.c: 15: ADCON0Tmp=ADCON0;
  3021  0674  0021               	movlb	1	; select bank1
  3022  0675  081D               	movf	29,w	;volatile
  3023  0676  00FA               	movwf	??_SLPSleep
  3024  0677  087A               	movf	??_SLPSleep,w
  3025  0678  0020               	movlb	0	; select bank0
  3026  0679  00A6               	movwf	SLPSleep@ADCON0Tmp
  3027                           
  3028                           ;SLP.c: 16: ADCON0=0b00000000;
  3029  067A  0021               	movlb	1	; select bank1
  3030  067B  019D               	clrf	29	;volatile
  3031                           
  3032                           ;SLP.c: 18: FVRCONTmp=FVRCON;
  3033  067C  0022               	movlb	2	; select bank2
  3034  067D  0817               	movf	23,w	;volatile
  3035  067E  00FA               	movwf	??_SLPSleep
  3036  067F  087A               	movf	??_SLPSleep,w
  3037  0680  0020               	movlb	0	; select bank0
  3038  0681  00A5               	movwf	SLPSleep@FVRCONTmp
  3039                           
  3040                           ;SLP.c: 19: FVRCON=0b00000000;
  3041  0682  0022               	movlb	2	; select bank2
  3042  0683  0197               	clrf	23	;volatile
  3043                           
  3044                           ;SLP.c: 21: IOCBNTmp=IOCBN;
  3045  0684  0027               	movlb	7	; select bank7
  3046  0685  0815               	movf	21,w	;volatile
  3047  0686  00FA               	movwf	??_SLPSleep
  3048  0687  087A               	movf	??_SLPSleep,w
  3049  0688  0020               	movlb	0	; select bank0
  3050  0689  00A0               	movwf	SLPSleep@IOCBNTmp
  3051                           
  3052                           ;SLP.c: 22: INTCONTmp=INTCON;
  3053  068A  080B               	movf	11,w	;volatile
  3054  068B  00FA               	movwf	??_SLPSleep
  3055  068C  087A               	movf	??_SLPSleep,w
  3056  068D  00A1               	movwf	SLPSleep@INTCONTmp
  3057                           
  3058                           ;SLP.c: 23: INTCON=0b10001000;
  3059  068E  3088               	movlw	136
  3060  068F  008B               	movwf	11	;volatile
  3061                           
  3062                           ;SLP.c: 24: IOCBN=0b00000100;
  3063  0690  3004               	movlw	4
  3064  0691  0027               	movlb	7	; select bank7
  3065  0692  0095               	movwf	21	;volatile
  3066                           
  3067                           ;SLP.c: 26: TESTBATTtmp=0;
  3068  0693  0020               	movlb	0	; select bank0
  3069  0694  01A7               	clrf	SLPSleep@TESTBATTtmp
  3070                           
  3071                           ;SLP.c: 27: if(LATAbits.LATA0)
  3072  0695  0022               	movlb	2	; select bank2
  3073  0696  1C0C               	btfss	12,0	;volatile
  3074  0697  2E9B               	goto	l3746
  3075                           
  3076                           ;SLP.c: 28: TESTBATTtmp=1;
  3077  0698  0020               	movlb	0	; select bank0
  3078  0699  01A7               	clrf	SLPSleep@TESTBATTtmp
  3079  069A  0AA7               	incf	SLPSleep@TESTBATTtmp,f
  3080  069B                     l3746:	
  3081                           
  3082                           ;SLP.c: 30: WDTCONTmp=WDTCON;
  3083  069B  0021               	movlb	1	; select bank1
  3084  069C  0817               	movf	23,w	;volatile
  3085  069D  00FA               	movwf	??_SLPSleep
  3086  069E  087A               	movf	??_SLPSleep,w
  3087  069F  0020               	movlb	0	; select bank0
  3088  06A0  00A3               	movwf	SLPSleep@WDTCONTmp
  3089                           
  3090                           ;SLP.c: 31: WDTCON=0b00100001;
  3091  06A1  3021               	movlw	33
  3092  06A2  0021               	movlb	1	; select bank1
  3093  06A3  0097               	movwf	23	;volatile
  3094                           
  3095                           ;SLP.c: 33: OPTION_REGTmp=OPTION_REG;
  3096  06A4  0815               	movf	21,w	;volatile
  3097  06A5  00FA               	movwf	??_SLPSleep
  3098  06A6  087A               	movf	??_SLPSleep,w
  3099  06A7  0020               	movlb	0	; select bank0
  3100  06A8  00A4               	movwf	SLPSleep@OPTION_REGTmp
  3101                           
  3102                           ;SLP.c: 34: OPTION_REG=0b00001010;
  3103  06A9  300A               	movlw	10
  3104  06AA  0021               	movlb	1	; select bank1
  3105  06AB  0095               	movwf	21	;volatile
  3106  06AC  0064               	clrwdt	;# 
  3107  06AD  0063               	sleep	;# 
  3108                           
  3109                           ;SLP.c: 39: IOCBN=IOCBNTmp;
  3110  06AE  0020               	movlb	0	; select bank0
  3111  06AF  0820               	movf	SLPSleep@IOCBNTmp,w
  3112  06B0  0027               	movlb	7	; select bank7
  3113  06B1  0095               	movwf	21	;volatile
  3114                           
  3115                           ;SLP.c: 40: INTCON=INTCONTmp;
  3116  06B2  0020               	movlb	0	; select bank0
  3117  06B3  0821               	movf	SLPSleep@INTCONTmp,w
  3118  06B4  008B               	movwf	11	;volatile
  3119                           
  3120                           ;SLP.c: 41: WPUB=WPUBTmp;
  3121  06B5  0822               	movf	SLPSleep@WPUBTmp,w
  3122  06B6  0024               	movlb	4	; select bank4
  3123  06B7  008D               	movwf	13	;volatile
  3124                           
  3125                           ;SLP.c: 42: ADCON0=ADCON0Tmp;
  3126  06B8  0020               	movlb	0	; select bank0
  3127  06B9  0826               	movf	SLPSleep@ADCON0Tmp,w
  3128  06BA  0021               	movlb	1	; select bank1
  3129  06BB  009D               	movwf	29	;volatile
  3130                           
  3131                           ;SLP.c: 43: FVRCON=FVRCONTmp;
  3132  06BC  0020               	movlb	0	; select bank0
  3133  06BD  0825               	movf	SLPSleep@FVRCONTmp,w
  3134  06BE  0022               	movlb	2	; select bank2
  3135  06BF  0097               	movwf	23	;volatile
  3136                           
  3137                           ;SLP.c: 44: LATAbits.LATA0=0;
  3138  06C0  100C               	bcf	12,0	;volatile
  3139                           
  3140                           ;SLP.c: 45: if(TESTBATTtmp)
  3141  06C1  0020               	movlb	0	; select bank0
  3142  06C2  0827               	movf	SLPSleep@TESTBATTtmp,w
  3143  06C3  1903               	btfsc	3,2
  3144  06C4  2EC7               	goto	l3754
  3145                           
  3146                           ;SLP.c: 46: LATAbits.LATA0=1;
  3147  06C5  0022               	movlb	2	; select bank2
  3148  06C6  140C               	bsf	12,0	;volatile
  3149  06C7                     l3754:	
  3150                           
  3151                           ;SLP.c: 47: WDTCON=WDTCONTmp;
  3152  06C7  0020               	movlb	0	; select bank0
  3153  06C8  0823               	movf	SLPSleep@WDTCONTmp,w
  3154  06C9  0021               	movlb	1	; select bank1
  3155  06CA  0097               	movwf	23	;volatile
  3156                           
  3157                           ;SLP.c: 48: OPTION_REG=OPTION_REGTmp;
  3158  06CB  0020               	movlb	0	; select bank0
  3159  06CC  0824               	movf	SLPSleep@OPTION_REGTmp,w
  3160  06CD  0021               	movlb	1	; select bank1
  3161  06CE  0095               	movwf	21	;volatile
  3162                           
  3163                           ;SLP.c: 50: flg_slp.exitSleep=1;
  3164  06CF  0020               	movlb	0	; select bank0
  3165  06D0  14EB               	bsf	_flg_slp,1
  3166  06D1  0008               	return
  3167  06D2                     __end_of_SLPSleep:	
  3168                           
  3169                           	psect	text3
  3170  0AE4                     __ptext3:	
  3171 ;; *************** function _CC1Sleep *****************
  3172 ;; Defined at:
  3173 ;;		line 152 in file "CC1.c"
  3174 ;; Parameters:    Size  Location     Type
  3175 ;;		None
  3176 ;; Auto vars:     Size  Location     Type
  3177 ;;		None
  3178 ;; Return value:  Size  Location     Type
  3179 ;;		None               void
  3180 ;; Registers used:
  3181 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3182 ;; Tracked objects:
  3183 ;;		On entry : 0/0
  3184 ;;		On exit  : 0/0
  3185 ;;		Unchanged: 0/0
  3186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3187 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3188 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3189 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3190 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3191 ;;Total ram usage:        0 bytes
  3192 ;; Hardware stack levels used:    1
  3193 ;; Hardware stack levels required when called:    4
  3194 ;; This function calls:
  3195 ;;		_CC1Strobe
  3196 ;; This function is called by:
  3197 ;;		_SLPSleep
  3198 ;; This function uses a non-reentrant model
  3199 ;;
  3200                           
  3201                           
  3202                           ;psect for function _CC1Sleep
  3203  0AE4                     _CC1Sleep:	
  3204                           
  3205                           ;CC1.c: 155: LATAbits.LATA5=0;
  3206                           
  3207                           ;incstack = 0
  3208                           ; Regs used in _CC1Sleep: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3209  0AE4  0022               	movlb	2	; select bank2
  3210  0AE5  128C               	bcf	12,5	;volatile
  3211                           
  3212                           ;CC1.c: 157: CC1Strobe(SWOR);
  3213  0AE6  3038               	movlw	56
  3214  0AE7  318B  2392         	fcall	_CC1Strobe
  3215                           
  3216                           ;CC1.c: 159: LATAbits.LATA5=1;
  3217  0AE9  0022               	movlb	2	; select bank2
  3218  0AEA  168C               	bsf	12,5	;volatile
  3219  0AEB  0008               	return
  3220  0AEC                     __end_of_CC1Sleep:	
  3221                           
  3222                           	psect	text4
  3223  0B81                     __ptext4:	
  3224 ;; *************** function _RTXTick *****************
  3225 ;; Defined at:
  3226 ;;		line 90 in file "RTX.c"
  3227 ;; Parameters:    Size  Location     Type
  3228 ;;		None
  3229 ;; Auto vars:     Size  Location     Type
  3230 ;;		None
  3231 ;; Return value:  Size  Location     Type
  3232 ;;		None               void
  3233 ;; Registers used:
  3234 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3235 ;; Tracked objects:
  3236 ;;		On entry : 0/0
  3237 ;;		On exit  : 0/0
  3238 ;;		Unchanged: 0/0
  3239 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3243 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3244 ;;Total ram usage:        0 bytes
  3245 ;; Hardware stack levels used:    1
  3246 ;; Hardware stack levels required when called:    6
  3247 ;; This function calls:
  3248 ;;		_RTXSendData
  3249 ;;		_RTXSendPgm
  3250 ;; This function is called by:
  3251 ;;		_SYSTask
  3252 ;; This function uses a non-reentrant model
  3253 ;;
  3254                           
  3255                           
  3256                           ;psect for function _RTXTick
  3257  0B81                     _RTXTick:	
  3258                           
  3259                           ;RTX.c: 93: if(tmrRcvPkt)
  3260                           
  3261                           ;incstack = 0
  3262                           ; Regs used in _RTXTick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3263  0B81  0020               	movlb	0	; select bank0
  3264  0B82  086C               	movf	_tmrRcvPkt,w
  3265  0B83  1903               	btfsc	3,2
  3266  0B84  0008               	return
  3267                           
  3268                           ;RTX.c: 94: {
  3269                           ;RTX.c: 95: tmrRcvPkt--;
  3270  0B85  3001               	movlw	1
  3271  0B86  02EC               	subwf	_tmrRcvPkt,f
  3272                           
  3273                           ;RTX.c: 96: if(!(tmrRcvPkt))
  3274  0B87  086C               	movf	_tmrRcvPkt,w
  3275  0B88  1D03               	btfss	3,2
  3276  0B89  0008               	return
  3277                           
  3278                           ;RTX.c: 97: {
  3279                           ;RTX.c: 98: if(pgm_flg.pgmonoff)
  3280  0B8A  1C7C               	btfss	_pgm_flg,0
  3281  0B8B  2B8F               	goto	l3796
  3282                           
  3283                           ;RTX.c: 99: RTXSendPgm();
  3284  0B8C  318F  273C         	fcall	_RTXSendPgm
  3285  0B8E  0008               	return
  3286  0B8F                     l3796:	
  3287                           
  3288                           ;RTX.c: 100: else
  3289                           ;RTX.c: 101: RTXSendData();
  3290  0B8F  3185  25F1         	fcall	_RTXSendData
  3291  0B91  0008               	return
  3292  0B92                     __end_of_RTXTick:	
  3293                           
  3294                           	psect	text5
  3295  0C18                     __ptext5:	
  3296 ;; *************** function _RTXAwake *****************
  3297 ;; Defined at:
  3298 ;;		line 113 in file "RTX.c"
  3299 ;; Parameters:    Size  Location     Type
  3300 ;;		None
  3301 ;; Auto vars:     Size  Location     Type
  3302 ;;		None
  3303 ;; Return value:  Size  Location     Type
  3304 ;;		None               void
  3305 ;; Registers used:
  3306 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3307 ;; Tracked objects:
  3308 ;;		On entry : 0/0
  3309 ;;		On exit  : 0/0
  3310 ;;		Unchanged: 0/0
  3311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3313 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3314 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3315 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3316 ;;Total ram usage:        0 bytes
  3317 ;; Hardware stack levels used:    1
  3318 ;; Hardware stack levels required when called:    9
  3319 ;; This function calls:
  3320 ;;		_CC1Init
  3321 ;;		_DLYDelay_ms
  3322 ;;		_RTXInit
  3323 ;; This function is called by:
  3324 ;;		_SYSTask
  3325 ;; This function uses a non-reentrant model
  3326 ;;
  3327                           
  3328                           
  3329                           ;psect for function _RTXAwake
  3330  0C18                     _RTXAwake:	
  3331                           
  3332                           ;RTX.c: 116: LATAbits.LATA5=0;
  3333                           
  3334                           ;incstack = 0
  3335                           ; Regs used in _RTXAwake: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3336  0C18  0022               	movlb	2	; select bank2
  3337  0C19  128C               	bcf	12,5	;volatile
  3338                           
  3339                           ;RTX.c: 117: DLYDelay_ms(1);
  3340  0C1A  3001               	movlw	1
  3341  0C1B  00F1               	movwf	DLYDelay_ms@val
  3342  0C1C  3000               	movlw	0
  3343  0C1D  00F2               	movwf	DLYDelay_ms@val+1
  3344  0C1E  318B  23FF  318C   	fcall	_DLYDelay_ms
  3345                           
  3346                           ;RTX.c: 118: LATAbits.LATA5=1;
  3347  0C21  0022               	movlb	2	; select bank2
  3348  0C22  168C               	bsf	12,5	;volatile
  3349                           
  3350                           ;RTX.c: 119: DLYDelay_ms(1);
  3351  0C23  3001               	movlw	1
  3352  0C24  00F1               	movwf	DLYDelay_ms@val
  3353  0C25  3000               	movlw	0
  3354  0C26  00F2               	movwf	DLYDelay_ms@val+1
  3355  0C27  318B  23FF  318C   	fcall	_DLYDelay_ms
  3356                           
  3357                           ;RTX.c: 122: CC1Init(2);
  3358  0C2A  3002               	movlw	2
  3359  0C2B  318E  26A4  318C   	fcall	_CC1Init
  3360                           
  3361                           ;RTX.c: 125: RTXInit(2);
  3362  0C2E  3002               	movlw	2
  3363  0C2F  318D  255B         	fcall	_RTXInit
  3364  0C31  0008               	return
  3365  0C32                     __end_of_RTXAwake:	
  3366                           
  3367                           	psect	text6
  3368  0D5B                     __ptext6:	
  3369 ;; *************** function _RTXInit *****************
  3370 ;; Defined at:
  3371 ;;		line 67 in file "RTX.c"
  3372 ;; Parameters:    Size  Location     Type
  3373 ;;  state           1    wreg     unsigned char 
  3374 ;; Auto vars:     Size  Location     Type
  3375 ;;  state           1   63[BANK0 ] unsigned char 
  3376 ;; Return value:  Size  Location     Type
  3377 ;;		None               void
  3378 ;; Registers used:
  3379 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3380 ;; Tracked objects:
  3381 ;;		On entry : 0/0
  3382 ;;		On exit  : 0/0
  3383 ;;		Unchanged: 0/0
  3384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3385 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3386 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3388 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3389 ;;Total ram usage:        1 bytes
  3390 ;; Hardware stack levels used:    1
  3391 ;; Hardware stack levels required when called:    8
  3392 ;; This function calls:
  3393 ;;		_CC1Strobe
  3394 ;;		_RTXStartSendData
  3395 ;; This function is called by:
  3396 ;;		_RTXAwake
  3397 ;;		_main
  3398 ;; This function uses a non-reentrant model
  3399 ;;
  3400                           
  3401                           
  3402                           ;psect for function _RTXInit
  3403  0D5B                     _RTXInit:	
  3404                           
  3405                           ;incstack = 0
  3406                           ; Regs used in _RTXInit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3407                           ;RTXInit@state stored from wreg
  3408  0D5B  0020               	movlb	0	; select bank0
  3409  0D5C  00DF               	movwf	RTXInit@state
  3410                           
  3411                           ;RTX.c: 69: switch(state)
  3412  0D5D  2D72               	goto	l3714
  3413  0D5E                     l3706:	
  3414                           ;RTX.c: 74: case 1:
  3415                           
  3416                           ;RTX.c: 73: break;
  3417                           
  3418                           ;RTX.c: 70: {
  3419                           ;RTX.c: 71: case 0:
  3420                           
  3421                           
  3422                           ;RTX.c: 76: tmrRcvPkt=0;
  3423  0D5E  01EC               	clrf	_tmrRcvPkt
  3424                           
  3425                           ;RTX.c: 77: cntSndData=0;
  3426  0D5F  01EA               	clrf	_cntSndData
  3427                           
  3428                           ;RTX.c: 78: rtx_flg.val=0;
  3429  0D60  0021               	movlb	1	; select bank1
  3430  0D61  01AC               	clrf	_rtx_flg^(0+128)
  3431                           
  3432                           ;RTX.c: 79: break;
  3433  0D62  0008               	return
  3434  0D63                     l3708:	
  3435                           ;RTX.c: 80: case 2:
  3436                           
  3437                           
  3438                           ;RTX.c: 82: CC1Strobe(SIDLE);
  3439  0D63  3036               	movlw	54
  3440  0D64  318B  2392  318D   	fcall	_CC1Strobe
  3441                           
  3442                           ;RTX.c: 83: CC1Strobe(SCAL);
  3443  0D67  3033               	movlw	51
  3444  0D68  318B  2392  318D   	fcall	_CC1Strobe
  3445                           
  3446                           ;RTX.c: 84: CC1Strobe(SRX);
  3447  0D6B  3034               	movlw	52
  3448  0D6C  318B  2392  318D   	fcall	_CC1Strobe
  3449                           
  3450                           ;RTX.c: 85: RTXStartSendData();
  3451  0D6F  318B  2351         	fcall	_RTXStartSendData
  3452                           
  3453                           ;RTX.c: 87: }
  3454                           
  3455                           ;RTX.c: 86: break;
  3456  0D71  0008               	return
  3457  0D72                     l3714:	
  3458  0D72  0020               	movlb	0	; select bank0
  3459  0D73  085F               	movf	RTXInit@state,w
  3460                           
  3461                           ; Switch size 1, requested type "space"
  3462                           ; Number of cases is 3, Range of values is 0 to 2
  3463                           ; switch strategies available:
  3464                           ; Name         Instructions Cycles
  3465                           ; simple_byte           10     6 (average)
  3466                           ; direct_byte           12     6 (fixed)
  3467                           ; jumptable            260     6 (fixed)
  3468                           ;	Chosen strategy is simple_byte
  3469  0D74  3A00               	xorlw	0	; case 0
  3470  0D75  1903               	skipnz
  3471  0D76  2D7E               	goto	l472
  3472  0D77  3A01               	xorlw	1	; case 1
  3473  0D78  1903               	skipnz
  3474  0D79  2D5E               	goto	l3706
  3475  0D7A  3A03               	xorlw	3	; case 2
  3476  0D7B  1903               	skipnz
  3477  0D7C  2D63               	goto	l3708
  3478  0D7D  2D7E               	goto	l472
  3479  0D7E                     l472:	
  3480  0D7E  0008               	return
  3481  0D7F                     __end_of_RTXInit:	
  3482                           
  3483                           	psect	text7
  3484  0B51                     __ptext7:	
  3485 ;; *************** function _RTXStartSendData *****************
  3486 ;; Defined at:
  3487 ;;		line 214 in file "RTX.c"
  3488 ;; Parameters:    Size  Location     Type
  3489 ;;		None
  3490 ;; Auto vars:     Size  Location     Type
  3491 ;;		None
  3492 ;; Return value:  Size  Location     Type
  3493 ;;		None               void
  3494 ;; Registers used:
  3495 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3496 ;; Tracked objects:
  3497 ;;		On entry : 0/0
  3498 ;;		On exit  : 0/0
  3499 ;;		Unchanged: 0/0
  3500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3502 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3504 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3505 ;;Total ram usage:        0 bytes
  3506 ;; Hardware stack levels used:    1
  3507 ;; Hardware stack levels required when called:    7
  3508 ;; This function calls:
  3509 ;;		_ADCConv
  3510 ;;		_DLYDelay_ms
  3511 ;;		_RTXSendData
  3512 ;; This function is called by:
  3513 ;;		_RTXInit
  3514 ;; This function uses a non-reentrant model
  3515 ;;
  3516                           
  3517                           
  3518                           ;psect for function _RTXStartSendData
  3519  0B51                     _RTXStartSendData:	
  3520                           
  3521                           ;RTX.c: 217: DLYDelay_ms(100);
  3522                           
  3523                           ;incstack = 0
  3524                           ; Regs used in _RTXStartSendData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3525  0B51  3064               	movlw	100
  3526  0B52  00F1               	movwf	DLYDelay_ms@val
  3527  0B53  3000               	movlw	0
  3528  0B54  00F2               	movwf	DLYDelay_ms@val+1
  3529  0B55  318B  23FF  318B   	fcall	_DLYDelay_ms
  3530                           
  3531                           ;RTX.c: 219: ADCConv();
  3532  0B58  3180  2041  318B   	fcall	_ADCConv
  3533                           
  3534                           ;RTX.c: 222: cntSndData=0;
  3535  0B5B  0020               	movlb	0	; select bank0
  3536  0B5C  01EA               	clrf	_cntSndData
  3537                           
  3538                           ;RTX.c: 224: RTXSendData();
  3539  0B5D  3185  25F1         	fcall	_RTXSendData
  3540  0B5F  0008               	return
  3541  0B60                     __end_of_RTXStartSendData:	
  3542                           
  3543                           	psect	text8
  3544  05F1                     __ptext8:	
  3545 ;; *************** function _RTXSendData *****************
  3546 ;; Defined at:
  3547 ;;		line 227 in file "RTX.c"
  3548 ;; Parameters:    Size  Location     Type
  3549 ;;		None
  3550 ;; Auto vars:     Size  Location     Type
  3551 ;;  valBatt         3   12[BANK0 ] struct _RTX_DATA
  3552 ;;  valTemp         3    9[BANK0 ] struct _RTX_DATA
  3553 ;; Return value:  Size  Location     Type
  3554 ;;		None               void
  3555 ;; Registers used:
  3556 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3557 ;; Tracked objects:
  3558 ;;		On entry : 0/0
  3559 ;;		On exit  : 0/0
  3560 ;;		Unchanged: 0/0
  3561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3563 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3564 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3565 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3566 ;;Total ram usage:        7 bytes
  3567 ;; Hardware stack levels used:    1
  3568 ;; Hardware stack levels required when called:    5
  3569 ;; This function calls:
  3570 ;;		_LEDFastFlash
  3571 ;;		_RTXSndPkt
  3572 ;; This function is called by:
  3573 ;;		_RTXTick
  3574 ;;		_RTXStartSendData
  3575 ;; This function uses a non-reentrant model
  3576 ;;
  3577                           
  3578                           
  3579                           ;psect for function _RTXSendData
  3580  05F1                     _RTXSendData:	
  3581                           
  3582                           ;RTX.c: 229: tu_RTX_DATA valTemp,valBatt;
  3583                           ;RTX.c: 231: if(!(pgm_flg.pgmonoff))
  3584                           
  3585                           ;incstack = 0
  3586                           ; Regs used in _RTXSendData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3587  05F1  187C               	btfsc	_pgm_flg,0
  3588  05F2  0008               	return
  3589                           
  3590                           ;RTX.c: 232: {
  3591                           ;RTX.c: 234: if(cntSndData<5 && pgm_cfg.menu.baseIdProg)
  3592  05F3  3005               	movlw	5
  3593  05F4  0020               	movlb	0	; select bank0
  3594  05F5  026A               	subwf	_cntSndData,w
  3595  05F6  1803               	skipnc
  3596  05F7  2E65               	goto	l515
  3597  05F8  0021               	movlb	1	; select bank1
  3598  05F9  1C4A               	btfss	(_pgm_cfg^(0+128)+2),0
  3599  05FA  2E65               	goto	l515
  3600                           
  3601                           ;RTX.c: 235: {
  3602                           ;RTX.c: 237: pktTx[ID_DEST]=pgm_cfg.baseId;
  3603  05FB  084C               	movf	(_pgm_cfg^(0+128)+4),w
  3604  05FC  0020               	movlb	0	; select bank0
  3605  05FD  00A8               	movwf	??_RTXSendData
  3606  05FE  0828               	movf	??_RTXSendData,w
  3607  05FF  0021               	movlb	1	; select bank1
  3608  0600  00BD               	movwf	_pktTx^(0+128)
  3609                           
  3610                           ;RTX.c: 238: pktTx[TYPE_DEST]=BASE;
  3611  0601  01BE               	clrf	(_pktTx^(0+128)+1)
  3612                           
  3613                           ;RTX.c: 239: pktTx[ID_SOURCE]=pgm_cfg.sensId;
  3614  0602  084B               	movf	(_pgm_cfg^(0+128)+3),w
  3615  0603  0020               	movlb	0	; select bank0
  3616  0604  00A8               	movwf	??_RTXSendData
  3617  0605  0828               	movf	??_RTXSendData,w
  3618  0606  0021               	movlb	1	; select bank1
  3619  0607  00BF               	movwf	(_pktTx^(0+128)+2)
  3620                           
  3621                           ;RTX.c: 241: if(PORTBbits.RB5)
  3622  0608  0020               	movlb	0	; select bank0
  3623  0609  1E8D               	btfss	13,5	;volatile
  3624  060A  2E0F               	goto	l3594
  3625                           
  3626                           ;RTX.c: 242: pktTx[TYPE_SOURCE]=SENS_CURRGEN;
  3627  060B  0021               	movlb	1	; select bank1
  3628  060C  01C0               	clrf	(_pktTx^(0+128)+3)
  3629  060D  0AC0               	incf	(_pktTx^(0+128)+3),f
  3630  060E  2E15               	goto	l3596
  3631  060F                     l3594:	
  3632                           
  3633                           ;RTX.c: 243: else
  3634                           ;RTX.c: 244: pktTx[TYPE_SOURCE]=SENS_CURRCON;
  3635  060F  3002               	movlw	2
  3636  0610  0020               	movlb	0	; select bank0
  3637  0611  00A8               	movwf	??_RTXSendData
  3638  0612  0828               	movf	??_RTXSendData,w
  3639  0613  0021               	movlb	1	; select bank1
  3640  0614  00C0               	movwf	(_pktTx^(0+128)+3)
  3641  0615                     l3596:	
  3642                           
  3643                           ;RTX.c: 245: pktTx[OP]=DAT;
  3644  0615  01C1               	clrf	(_pktTx^(0+128)+4)
  3645                           
  3646                           ;RTX.c: 246: valTemp.val=rmsCurr+0;
  3647  0616  0823               	movf	_rmsCurr^(0+128),w
  3648  0617  0020               	movlb	0	; select bank0
  3649  0618  00A9               	movwf	RTXSendData@valTemp
  3650  0619  0021               	movlb	1	; select bank1
  3651  061A  0824               	movf	(_rmsCurr+1)^(0+128),w
  3652  061B  0020               	movlb	0	; select bank0
  3653  061C  00AA               	movwf	RTXSendData@valTemp+1
  3654  061D  0021               	movlb	1	; select bank1
  3655  061E  0825               	movf	(_rmsCurr+2)^(0+128),w
  3656  061F  0020               	movlb	0	; select bank0
  3657  0620  00AB               	movwf	RTXSendData@valTemp+2
  3658                           
  3659                           ;RTX.c: 247: pktTx[VAL]=valTemp.val_byte[0];
  3660  0621  0829               	movf	RTXSendData@valTemp,w
  3661  0622  00A8               	movwf	??_RTXSendData
  3662  0623  0828               	movf	??_RTXSendData,w
  3663  0624  0021               	movlb	1	; select bank1
  3664  0625  00C2               	movwf	(_pktTx^(0+128)+5)
  3665                           
  3666                           ;RTX.c: 248: pktTx[VAL+1]=valTemp.val_byte[1];
  3667  0626  0020               	movlb	0	; select bank0
  3668  0627  082A               	movf	RTXSendData@valTemp+1,w
  3669  0628  00A8               	movwf	??_RTXSendData
  3670  0629  0828               	movf	??_RTXSendData,w
  3671  062A  0021               	movlb	1	; select bank1
  3672  062B  00C3               	movwf	(_pktTx^(0+128)+6)
  3673                           
  3674                           ;RTX.c: 249: pktTx[VAL+2]=valTemp.val_byte[2];
  3675  062C  0020               	movlb	0	; select bank0
  3676  062D  082B               	movf	RTXSendData@valTemp+2,w
  3677  062E  00A8               	movwf	??_RTXSendData
  3678  062F  0828               	movf	??_RTXSendData,w
  3679  0630  0021               	movlb	1	; select bank1
  3680  0631  00C4               	movwf	(_pktTx^(0+128)+7)
  3681                           
  3682                           ;RTX.c: 250: valBatt.val=battV;
  3683  0632  0820               	movf	_battV^(0+128),w
  3684  0633  0020               	movlb	0	; select bank0
  3685  0634  00AC               	movwf	RTXSendData@valBatt
  3686  0635  0021               	movlb	1	; select bank1
  3687  0636  0821               	movf	(_battV+1)^(0+128),w
  3688  0637  0020               	movlb	0	; select bank0
  3689  0638  00AD               	movwf	RTXSendData@valBatt+1
  3690  0639  0021               	movlb	1	; select bank1
  3691  063A  0822               	movf	(_battV+2)^(0+128),w
  3692  063B  0020               	movlb	0	; select bank0
  3693  063C  00AE               	movwf	RTXSendData@valBatt+2
  3694                           
  3695                           ;RTX.c: 251: pktTx[BAT]=valBatt.val_byte[0];
  3696  063D  082C               	movf	RTXSendData@valBatt,w
  3697  063E  00A8               	movwf	??_RTXSendData
  3698  063F  0828               	movf	??_RTXSendData,w
  3699  0640  0021               	movlb	1	; select bank1
  3700  0641  00C5               	movwf	(_pktTx^(0+128)+8)
  3701                           
  3702                           ;RTX.c: 252: pktTx[BAT+1]=valBatt.val_byte[1];
  3703  0642  0020               	movlb	0	; select bank0
  3704  0643  082D               	movf	RTXSendData@valBatt+1,w
  3705  0644  00A8               	movwf	??_RTXSendData
  3706  0645  0828               	movf	??_RTXSendData,w
  3707  0646  0021               	movlb	1	; select bank1
  3708  0647  00C6               	movwf	(_pktTx^(0+128)+9)
  3709                           
  3710                           ;RTX.c: 253: pktTx[BAT+2]=valBatt.val_byte[2];
  3711  0648  0020               	movlb	0	; select bank0
  3712  0649  082E               	movf	RTXSendData@valBatt+2,w
  3713  064A  00A8               	movwf	??_RTXSendData
  3714  064B  0828               	movf	??_RTXSendData,w
  3715  064C  0021               	movlb	1	; select bank1
  3716  064D  00C7               	movwf	(_pktTx^(0+128)+10)
  3717                           
  3718                           ;RTX.c: 256: RTXSndPkt(pktTx,0x0B);
  3719  064E  300B               	movlw	11
  3720  064F  0020               	movlb	0	; select bank0
  3721  0650  00A8               	movwf	??_RTXSendData
  3722  0651  0828               	movf	??_RTXSendData,w
  3723  0652  00A2               	movwf	RTXSndPkt@len
  3724  0653  30BD               	movlw	(low (_pktTx| 0))& (0+255)
  3725  0654  3187  2736  3185   	fcall	_RTXSndPkt
  3726                           
  3727                           ;RTX.c: 259: cntSndData++;
  3728  0657  3001               	movlw	1
  3729  0658  0020               	movlb	0	; select bank0
  3730  0659  00A8               	movwf	??_RTXSendData
  3731  065A  0828               	movf	??_RTXSendData,w
  3732  065B  07EA               	addwf	_cntSndData,f
  3733                           
  3734                           ;RTX.c: 262: LEDFastFlash(1);
  3735  065C  3001               	movlw	1
  3736  065D  318C  24FE         	fcall	_LEDFastFlash
  3737                           
  3738                           ;RTX.c: 265: tmrRcvPkt=100;
  3739  065F  3064               	movlw	100
  3740  0660  0020               	movlb	0	; select bank0
  3741  0661  00A8               	movwf	??_RTXSendData
  3742  0662  0828               	movf	??_RTXSendData,w
  3743  0663  00EC               	movwf	_tmrRcvPkt
  3744                           
  3745                           ;RTX.c: 266: }
  3746  0664  0008               	return
  3747  0665                     l515:	
  3748                           
  3749                           ;RTX.c: 267: else
  3750                           ;RTX.c: 268: flg_slp.goSleep=1;
  3751  0665  0020               	movlb	0	; select bank0
  3752  0666  146B               	bsf	_flg_slp,0
  3753  0667  0008               	return
  3754  0668                     __end_of_RTXSendData:	
  3755                           
  3756                           	psect	text9
  3757  0CFE                     __ptext9:	
  3758 ;; *************** function _LEDFastFlash *****************
  3759 ;; Defined at:
  3760 ;;		line 38 in file "LED.c"
  3761 ;; Parameters:    Size  Location     Type
  3762 ;;  num             1    wreg     unsigned char 
  3763 ;; Auto vars:     Size  Location     Type
  3764 ;;  num             1    8[COMMON] unsigned char 
  3765 ;;  i               1    9[COMMON] unsigned char 
  3766 ;; Return value:  Size  Location     Type
  3767 ;;		None               void
  3768 ;; Registers used:
  3769 ;;		wreg, status,2, status,0, pclath, cstack
  3770 ;; Tracked objects:
  3771 ;;		On entry : 0/0
  3772 ;;		On exit  : 0/0
  3773 ;;		Unchanged: 0/0
  3774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3776 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3777 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3778 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3779 ;;Total ram usage:        3 bytes
  3780 ;; Hardware stack levels used:    1
  3781 ;; Hardware stack levels required when called:    3
  3782 ;; This function calls:
  3783 ;;		_DLYDelay_ms
  3784 ;; This function is called by:
  3785 ;;		_RTXSendData
  3786 ;; This function uses a non-reentrant model
  3787 ;;
  3788                           
  3789                           
  3790                           ;psect for function _LEDFastFlash
  3791  0CFE                     _LEDFastFlash:	
  3792                           
  3793                           ;incstack = 0
  3794                           ; Regs used in _LEDFastFlash: [wreg+status,2+status,0+pclath+cstack]
  3795                           ;LEDFastFlash@num stored from wreg
  3796  0CFE  00F8               	movwf	LEDFastFlash@num
  3797                           
  3798                           ;LED.c: 40: unsigned char i;
  3799                           ;LED.c: 42: for(i=0;i<num;i++)
  3800  0CFF  01F9               	clrf	LEDFastFlash@i
  3801  0D00                     l3458:	
  3802  0D00  0878               	movf	LEDFastFlash@num,w
  3803  0D01  0279               	subwf	LEDFastFlash@i,w
  3804  0D02  1803               	btfsc	3,0
  3805  0D03  0008               	return
  3806  0D04  0064               	clrwdt	;# 
  3807                           
  3808                           ;LED.c: 45: LATCbits.LATC7=0;
  3809  0D05  0022               	movlb	2	; select bank2
  3810  0D06  138E               	bcf	14,7	;volatile
  3811                           
  3812                           ;LED.c: 46: DLYDelay_ms(5);
  3813  0D07  3005               	movlw	5
  3814  0D08  00F1               	movwf	DLYDelay_ms@val
  3815  0D09  3000               	movlw	0
  3816  0D0A  00F2               	movwf	DLYDelay_ms@val+1
  3817  0D0B  318B  23FF  318C   	fcall	_DLYDelay_ms
  3818                           
  3819                           ;LED.c: 47: LATCbits.LATC7=1;
  3820  0D0E  0022               	movlb	2	; select bank2
  3821  0D0F  178E               	bsf	14,7	;volatile
  3822                           
  3823                           ;LED.c: 48: DLYDelay_ms(5);
  3824  0D10  3005               	movlw	5
  3825  0D11  00F1               	movwf	DLYDelay_ms@val
  3826  0D12  3000               	movlw	0
  3827  0D13  00F2               	movwf	DLYDelay_ms@val+1
  3828  0D14  318B  23FF  318C   	fcall	_DLYDelay_ms
  3829  0D17  3001               	movlw	1
  3830  0D18  00F7               	movwf	??_LEDFastFlash
  3831  0D19  0877               	movf	??_LEDFastFlash,w
  3832  0D1A  07F9               	addwf	LEDFastFlash@i,f
  3833  0D1B  2D00               	goto	l3458
  3834  0D1C                     __end_of_LEDFastFlash:	
  3835                           
  3836                           	psect	text10
  3837  0EA4                     __ptext10:	
  3838 ;; *************** function _CC1Init *****************
  3839 ;; Defined at:
  3840 ;;		line 74 in file "CC1.c"
  3841 ;; Parameters:    Size  Location     Type
  3842 ;;  state           1    wreg     unsigned char 
  3843 ;; Auto vars:     Size  Location     Type
  3844 ;;  state           1    2[BANK0 ] unsigned char 
  3845 ;; Return value:  Size  Location     Type
  3846 ;;		None               void
  3847 ;; Registers used:
  3848 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3849 ;; Tracked objects:
  3850 ;;		On entry : 0/0
  3851 ;;		On exit  : 0/0
  3852 ;;		Unchanged: 0/0
  3853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3855 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3856 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3857 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3858 ;;Total ram usage:        2 bytes
  3859 ;; Hardware stack levels used:    1
  3860 ;; Hardware stack levels required when called:    4
  3861 ;; This function calls:
  3862 ;;		_CC1Strobe
  3863 ;;		_CC1Write
  3864 ;;		_DLYDelay_ms
  3865 ;; This function is called by:
  3866 ;;		_RTXAwake
  3867 ;;		_main
  3868 ;; This function uses a non-reentrant model
  3869 ;;
  3870                           
  3871                           
  3872                           ;psect for function _CC1Init
  3873  0EA4                     _CC1Init:	
  3874                           
  3875                           ;incstack = 0
  3876                           ; Regs used in _CC1Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3877                           ;CC1Init@state stored from wreg
  3878  0EA4  0020               	movlb	0	; select bank0
  3879  0EA5  00A2               	movwf	CC1Init@state
  3880                           
  3881                           ;CC1.c: 76: switch(state)
  3882  0EA6  2ECA               	goto	l3678
  3883  0EA7                     l3668:	
  3884                           ;CC1.c: 84: case 2:
  3885                           
  3886                           ;CC1.c: 83: break;
  3887                           
  3888                           ;CC1.c: 77: {
  3889                           ;CC1.c: 81: case 1:
  3890                           
  3891                           
  3892                           ;CC1.c: 87: CC1Strobe(SRES);
  3893  0EA7  3030               	movlw	48
  3894  0EA8  318B  2392  318E   	fcall	_CC1Strobe
  3895                           
  3896                           ;CC1.c: 89: DLYDelay_ms(5);
  3897  0EAB  3005               	movlw	5
  3898  0EAC  00F1               	movwf	DLYDelay_ms@val
  3899  0EAD  3000               	movlw	0
  3900  0EAE  00F2               	movwf	DLYDelay_ms@val+1
  3901  0EAF  318B  23FF  318E   	fcall	_DLYDelay_ms
  3902                           
  3903                           ;CC1.c: 91: CC1Write(0x00,cc1InitVal,0x2E);
  3904  0EB2  3020               	movlw	low _cc1InitVal
  3905  0EB3  00F7               	movwf	CC1Write@src
  3906  0EB4  3001               	movlw	high _cc1InitVal
  3907  0EB5  00F8               	movwf	CC1Write@src+1
  3908  0EB6  302E               	movlw	46
  3909  0EB7  00FB               	movwf	??_CC1Init
  3910  0EB8  087B               	movf	??_CC1Init,w
  3911  0EB9  00F9               	movwf	CC1Write@len
  3912  0EBA  3000               	movlw	0
  3913  0EBB  3187  27DF  318E   	fcall	_CC1Write
  3914                           
  3915                           ;CC1.c: 92: CC1Write(0x3E,cc1PaTable,8);
  3916  0EBE  30CD               	movlw	low _cc1PaTable
  3917  0EBF  00F7               	movwf	CC1Write@src
  3918  0EC0  3000               	movlw	high _cc1PaTable
  3919  0EC1  00F8               	movwf	CC1Write@src+1
  3920  0EC2  3008               	movlw	8
  3921  0EC3  00FB               	movwf	??_CC1Init
  3922  0EC4  087B               	movf	??_CC1Init,w
  3923  0EC5  00F9               	movwf	CC1Write@len
  3924  0EC6  303E               	movlw	62
  3925  0EC7  3187  27DF         	fcall	_CC1Write
  3926                           
  3927                           ;CC1.c: 98: }
  3928                           
  3929                           ;CC1.c: 97: break;
  3930  0EC9  0008               	return
  3931  0ECA                     l3678:	
  3932  0ECA  0020               	movlb	0	; select bank0
  3933  0ECB  0822               	movf	CC1Init@state,w
  3934                           
  3935                           ; Switch size 1, requested type "space"
  3936                           ; Number of cases is 2, Range of values is 1 to 2
  3937                           ; switch strategies available:
  3938                           ; Name         Instructions Cycles
  3939                           ; simple_byte            7     4 (average)
  3940                           ; direct_byte           13     9 (fixed)
  3941                           ; jumptable            263     9 (fixed)
  3942                           ;	Chosen strategy is simple_byte
  3943  0ECC  3A01               	xorlw	1	; case 1
  3944  0ECD  1903               	skipnz
  3945  0ECE  2ED3               	goto	l175
  3946  0ECF  3A03               	xorlw	3	; case 2
  3947  0ED0  1903               	skipnz
  3948  0ED1  2EA7               	goto	l3668
  3949  0ED2  2ED3               	goto	l175
  3950  0ED3                     l175:	
  3951  0ED3  0008               	return
  3952  0ED4                     __end_of_CC1Init:	
  3953                           
  3954                           	psect	text11
  3955  0003                     __ptext11:	
  3956 ;; *************** function _PGMTick *****************
  3957 ;; Defined at:
  3958 ;;		line 37 in file "PGM.c"
  3959 ;; Parameters:    Size  Location     Type
  3960 ;;		None
  3961 ;; Auto vars:     Size  Location     Type
  3962 ;;		None
  3963 ;; Return value:  Size  Location     Type
  3964 ;;		None               void
  3965 ;; Registers used:
  3966 ;;		None
  3967 ;; Tracked objects:
  3968 ;;		On entry : 0/0
  3969 ;;		On exit  : 0/0
  3970 ;;		Unchanged: 0/0
  3971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3973 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3974 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3975 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3976 ;;Total ram usage:        0 bytes
  3977 ;; Hardware stack levels used:    1
  3978 ;; Hardware stack levels required when called:    2
  3979 ;; This function calls:
  3980 ;;		Nothing
  3981 ;; This function is called by:
  3982 ;;		_SYSTask
  3983 ;; This function uses a non-reentrant model
  3984 ;;
  3985                           
  3986                           
  3987                           ;psect for function _PGMTick
  3988  0003                     _PGMTick:	
  3989                           
  3990                           ;incstack = 0
  3991                           ; Regs used in _PGMTick: []
  3992  0003  0008               	return
  3993  0004                     __end_of_PGMTick:	
  3994                           
  3995                           	psect	text12
  3996  0BD0                     __ptext12:	
  3997 ;; *************** function _PGMSelUp *****************
  3998 ;; Defined at:
  3999 ;;		line 79 in file "PGM.c"
  4000 ;; Parameters:    Size  Location     Type
  4001 ;;		None
  4002 ;; Auto vars:     Size  Location     Type
  4003 ;;		None
  4004 ;; Return value:  Size  Location     Type
  4005 ;;		None               void
  4006 ;; Registers used:
  4007 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4008 ;; Tracked objects:
  4009 ;;		On entry : 0/0
  4010 ;;		On exit  : 0/0
  4011 ;;		Unchanged: 0/0
  4012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4013 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4014 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4015 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4016 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4017 ;;Total ram usage:        1 bytes
  4018 ;; Hardware stack levels used:    1
  4019 ;; Hardware stack levels required when called:    8
  4020 ;; This function calls:
  4021 ;;		_PGMWriteNvm
  4022 ;;		_RTXStartSendPgm
  4023 ;; This function is called by:
  4024 ;;		_SYSTask
  4025 ;; This function uses a non-reentrant model
  4026 ;;
  4027                           
  4028                           
  4029                           ;psect for function _PGMSelUp
  4030  0BD0                     _PGMSelUp:	
  4031                           
  4032                           ;PGM.c: 82: if(!(pgm_flg.resetDone))
  4033                           
  4034                           ;incstack = 0
  4035                           ; Regs used in _PGMSelUp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4036  0BD0  18FC               	btfsc	_pgm_flg,1
  4037  0BD1  2BE5               	goto	l3772
  4038                           
  4039                           ;PGM.c: 83: {
  4040                           ;PGM.c: 85: if(pgm_cfg.sensId==0x00)
  4041  0BD2  0021               	movlb	1	; select bank1
  4042  0BD3  084B               	movf	(_pgm_cfg^(0+128)+3),w
  4043  0BD4  1D03               	btfss	3,2
  4044  0BD5  2BE0               	goto	l3766
  4045                           
  4046                           ;PGM.c: 86: {
  4047                           ;PGM.c: 88: pgm_cfg.sensId=TMR1L^TMR1H;
  4048  0BD6  0020               	movlb	0	; select bank0
  4049  0BD7  0816               	movf	22,w	;volatile
  4050  0BD8  0617               	xorwf	23,w	;volatile
  4051  0BD9  00E5               	movwf	??_PGMSelUp
  4052  0BDA  0865               	movf	??_PGMSelUp,w
  4053  0BDB  0021               	movlb	1	; select bank1
  4054  0BDC  00CB               	movwf	(_pgm_cfg^(0+128)+3)
  4055                           
  4056                           ;PGM.c: 90: PGMWriteNvm();
  4057  0BDD  318B  2324  318B   	fcall	_PGMWriteNvm
  4058  0BE0                     l3766:	
  4059                           
  4060                           ;PGM.c: 91: }
  4061                           ;PGM.c: 93: pgm_flg.pgmonoff=1;
  4062  0BE0  147C               	bsf	_pgm_flg,0
  4063                           
  4064                           ;PGM.c: 95: LATCbits.LATC7=0;
  4065  0BE1  0022               	movlb	2	; select bank2
  4066  0BE2  138E               	bcf	14,7	;volatile
  4067                           
  4068                           ;PGM.c: 97: RTXStartSendPgm();
  4069  0BE3  318B  2342         	fcall	_RTXStartSendPgm
  4070  0BE5                     l3772:	
  4071                           
  4072                           ;PGM.c: 98: }
  4073                           ;PGM.c: 100: pgm_flg.resetDone=0;
  4074  0BE5  10FC               	bcf	_pgm_flg,1
  4075  0BE6  0008               	return
  4076  0BE7                     __end_of_PGMSelUp:	
  4077                           
  4078                           	psect	text13
  4079  0B42                     __ptext13:	
  4080 ;; *************** function _RTXStartSendPgm *****************
  4081 ;; Defined at:
  4082 ;;		line 272 in file "RTX.c"
  4083 ;; Parameters:    Size  Location     Type
  4084 ;;		None
  4085 ;; Auto vars:     Size  Location     Type
  4086 ;;		None
  4087 ;; Return value:  Size  Location     Type
  4088 ;;		None               void
  4089 ;; Registers used:
  4090 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4091 ;; Tracked objects:
  4092 ;;		On entry : 0/0
  4093 ;;		On exit  : 0/0
  4094 ;;		Unchanged: 0/0
  4095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4097 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4099 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4100 ;;Total ram usage:        0 bytes
  4101 ;; Hardware stack levels used:    1
  4102 ;; Hardware stack levels required when called:    7
  4103 ;; This function calls:
  4104 ;;		_ADCConv
  4105 ;;		_DLYDelay_ms
  4106 ;;		_RTXSendPgm
  4107 ;; This function is called by:
  4108 ;;		_PGMSelUp
  4109 ;; This function uses a non-reentrant model
  4110 ;;
  4111                           
  4112                           
  4113                           ;psect for function _RTXStartSendPgm
  4114  0B42                     _RTXStartSendPgm:	
  4115                           
  4116                           ;RTX.c: 275: DLYDelay_ms(100);
  4117                           
  4118                           ;incstack = 0
  4119                           ; Regs used in _RTXStartSendPgm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4120  0B42  3064               	movlw	100
  4121  0B43  00F1               	movwf	DLYDelay_ms@val
  4122  0B44  3000               	movlw	0
  4123  0B45  00F2               	movwf	DLYDelay_ms@val+1
  4124  0B46  318B  23FF  318B   	fcall	_DLYDelay_ms
  4125                           
  4126                           ;RTX.c: 277: ADCConv();
  4127  0B49  3180  2041  318B   	fcall	_ADCConv
  4128                           
  4129                           ;RTX.c: 280: cntSndData=0;
  4130  0B4C  0020               	movlb	0	; select bank0
  4131  0B4D  01EA               	clrf	_cntSndData
  4132                           
  4133                           ;RTX.c: 282: RTXSendPgm();
  4134  0B4E  318F  273C         	fcall	_RTXSendPgm
  4135  0B50  0008               	return
  4136  0B51                     __end_of_RTXStartSendPgm:	
  4137                           
  4138                           	psect	text14
  4139  0F3C                     __ptext14:	
  4140 ;; *************** function _RTXSendPgm *****************
  4141 ;; Defined at:
  4142 ;;		line 285 in file "RTX.c"
  4143 ;; Parameters:    Size  Location     Type
  4144 ;;		None
  4145 ;; Auto vars:     Size  Location     Type
  4146 ;;		None
  4147 ;; Return value:  Size  Location     Type
  4148 ;;		None               void
  4149 ;; Registers used:
  4150 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4151 ;; Tracked objects:
  4152 ;;		On entry : 0/0
  4153 ;;		On exit  : 0/0
  4154 ;;		Unchanged: 0/0
  4155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4157 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4158 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4159 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4160 ;;Total ram usage:        1 bytes
  4161 ;; Hardware stack levels used:    1
  4162 ;; Hardware stack levels required when called:    5
  4163 ;; This function calls:
  4164 ;;		_PGMPgmOff
  4165 ;;		_RTXSndPkt
  4166 ;; This function is called by:
  4167 ;;		_RTXTick
  4168 ;;		_RTXStartSendPgm
  4169 ;; This function uses a non-reentrant model
  4170 ;;
  4171                           
  4172                           
  4173                           ;psect for function _RTXSendPgm
  4174  0F3C                     _RTXSendPgm:	
  4175                           
  4176                           ;RTX.c: 288: if(cntSndData<5)
  4177                           
  4178                           ;incstack = 0
  4179                           ; Regs used in _RTXSendPgm: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4180  0F3C  3005               	movlw	5
  4181  0F3D  0020               	movlb	0	; select bank0
  4182  0F3E  026A               	subwf	_cntSndData,w
  4183  0F3F  1803               	skipnc
  4184  0F40  2F71               	goto	l3662
  4185                           
  4186                           ;RTX.c: 289: {
  4187                           ;RTX.c: 291: pktTx[ID_DEST]=0x00;
  4188  0F41  0021               	movlb	1	; select bank1
  4189  0F42  01BD               	clrf	_pktTx^(0+128)
  4190                           
  4191                           ;RTX.c: 292: pktTx[TYPE_DEST]=BASE;
  4192  0F43  01BE               	clrf	(_pktTx^(0+128)+1)
  4193                           
  4194                           ;RTX.c: 293: pktTx[ID_SOURCE]=pgm_cfg.sensId;
  4195  0F44  084B               	movf	(_pgm_cfg^(0+128)+3),w
  4196  0F45  0020               	movlb	0	; select bank0
  4197  0F46  00A8               	movwf	??_RTXSendPgm
  4198  0F47  0828               	movf	??_RTXSendPgm,w
  4199  0F48  0021               	movlb	1	; select bank1
  4200  0F49  00BF               	movwf	(_pktTx^(0+128)+2)
  4201                           
  4202                           ;RTX.c: 295: if(PORTBbits.RB5)
  4203  0F4A  0020               	movlb	0	; select bank0
  4204  0F4B  1E8D               	btfss	13,5	;volatile
  4205  0F4C  2F51               	goto	l3640
  4206                           
  4207                           ;RTX.c: 296: pktTx[TYPE_SOURCE]=SENS_CURRGEN;
  4208  0F4D  0021               	movlb	1	; select bank1
  4209  0F4E  01C0               	clrf	(_pktTx^(0+128)+3)
  4210  0F4F  0AC0               	incf	(_pktTx^(0+128)+3),f
  4211  0F50  2F57               	goto	l3642
  4212  0F51                     l3640:	
  4213                           
  4214                           ;RTX.c: 297: else
  4215                           ;RTX.c: 298: pktTx[TYPE_SOURCE]=SENS_CURRCON;
  4216  0F51  3002               	movlw	2
  4217  0F52  0020               	movlb	0	; select bank0
  4218  0F53  00A8               	movwf	??_RTXSendPgm
  4219  0F54  0828               	movf	??_RTXSendPgm,w
  4220  0F55  0021               	movlb	1	; select bank1
  4221  0F56  00C0               	movwf	(_pktTx^(0+128)+3)
  4222  0F57                     l3642:	
  4223                           
  4224                           ;RTX.c: 299: pktTx[OP]=PGM;
  4225  0F57  01C1               	clrf	(_pktTx^(0+128)+4)
  4226  0F58  0AC1               	incf	(_pktTx^(0+128)+4),f
  4227                           
  4228                           ;RTX.c: 300: pktTx[VAL]=0x00;
  4229  0F59  01C2               	clrf	(_pktTx^(0+128)+5)
  4230                           
  4231                           ;RTX.c: 301: pktTx[VAL+1]=0x00;
  4232  0F5A  01C3               	clrf	(_pktTx^(0+128)+6)
  4233                           
  4234                           ;RTX.c: 302: pktTx[VAL+2]=0x00;
  4235  0F5B  01C4               	clrf	(_pktTx^(0+128)+7)
  4236                           
  4237                           ;RTX.c: 303: pktTx[BAT]=0x00;
  4238  0F5C  01C5               	clrf	(_pktTx^(0+128)+8)
  4239                           
  4240                           ;RTX.c: 304: pktTx[BAT+1]=0x00;
  4241  0F5D  01C6               	clrf	(_pktTx^(0+128)+9)
  4242                           
  4243                           ;RTX.c: 305: pktTx[BAT+2]=0x00;
  4244  0F5E  01C7               	clrf	(_pktTx^(0+128)+10)
  4245                           
  4246                           ;RTX.c: 308: RTXSndPkt(pktTx,0x0B);
  4247  0F5F  300B               	movlw	11
  4248  0F60  0020               	movlb	0	; select bank0
  4249  0F61  00A8               	movwf	??_RTXSendPgm
  4250  0F62  0828               	movf	??_RTXSendPgm,w
  4251  0F63  00A2               	movwf	RTXSndPkt@len
  4252  0F64  30BD               	movlw	(low (_pktTx| 0))& (0+255)
  4253  0F65  3187  2736         	fcall	_RTXSndPkt
  4254                           
  4255                           ;RTX.c: 311: cntSndData++;
  4256  0F67  3001               	movlw	1
  4257  0F68  0020               	movlb	0	; select bank0
  4258  0F69  00A8               	movwf	??_RTXSendPgm
  4259  0F6A  0828               	movf	??_RTXSendPgm,w
  4260  0F6B  07EA               	addwf	_cntSndData,f
  4261                           
  4262                           ;RTX.c: 314: tmrRcvPkt=100;
  4263  0F6C  3064               	movlw	100
  4264  0F6D  00A8               	movwf	??_RTXSendPgm
  4265  0F6E  0828               	movf	??_RTXSendPgm,w
  4266  0F6F  00EC               	movwf	_tmrRcvPkt
  4267                           
  4268                           ;RTX.c: 315: }
  4269  0F70  0008               	return
  4270  0F71                     l3662:	
  4271                           
  4272                           ;RTX.c: 316: else
  4273                           ;RTX.c: 317: {
  4274                           ;RTX.c: 319: PGMPgmOff();
  4275  0F71  318A  22C8         	fcall	_PGMPgmOff
  4276                           
  4277                           ;RTX.c: 321: flg_slp.goSleep=1;
  4278  0F73  0020               	movlb	0	; select bank0
  4279  0F74  146B               	bsf	_flg_slp,0
  4280  0F75  0008               	return
  4281  0F76                     __end_of_RTXSendPgm:	
  4282                           
  4283                           	psect	text15
  4284  0736                     __ptext15:	
  4285 ;; *************** function _RTXSndPkt *****************
  4286 ;; Defined at:
  4287 ;;		line 128 in file "RTX.c"
  4288 ;; Parameters:    Size  Location     Type
  4289 ;;  src             1    wreg     PTR unsigned char 
  4290 ;;		 -> pktTx(11), 
  4291 ;;  len             1    2[BANK0 ] unsigned char 
  4292 ;; Auto vars:     Size  Location     Type
  4293 ;;  src             1    5[BANK0 ] PTR unsigned char 
  4294 ;;		 -> pktTx(11), 
  4295 ;;  sta             1    7[BANK0 ] unsigned char 
  4296 ;;  numTxByte       1    6[BANK0 ] unsigned char 
  4297 ;;  numRxByte       1    4[BANK0 ] unsigned char 
  4298 ;; Return value:  Size  Location     Type
  4299 ;;		None               void
  4300 ;; Registers used:
  4301 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4302 ;; Tracked objects:
  4303 ;;		On entry : 0/0
  4304 ;;		On exit  : 0/0
  4305 ;;		Unchanged: 0/0
  4306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4307 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4308 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4309 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4310 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4311 ;;Total ram usage:        6 bytes
  4312 ;; Hardware stack levels used:    1
  4313 ;; Hardware stack levels required when called:    4
  4314 ;; This function calls:
  4315 ;;		_CC1Read
  4316 ;;		_CC1Strobe
  4317 ;;		_CC1Write
  4318 ;; This function is called by:
  4319 ;;		_RTXSendData
  4320 ;;		_RTXSendPgm
  4321 ;; This function uses a non-reentrant model
  4322 ;;
  4323                           
  4324                           
  4325                           ;psect for function _RTXSndPkt
  4326  0736                     _RTXSndPkt:	
  4327                           
  4328                           ;incstack = 0
  4329                           ; Regs used in _RTXSndPkt: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4330                           ;RTXSndPkt@src stored from wreg
  4331  0736  0020               	movlb	0	; select bank0
  4332  0737  00A5               	movwf	RTXSndPkt@src
  4333  0738                     l489:	
  4334                           ;RTX.c: 130: unsigned char sta,numRxByte,numTxByte;
  4335                           ;RTX.c: 133: do
  4336                           
  4337  0738  0064               	clrwdt	;# 
  4338                           
  4339                           ;RTX.c: 136: CC1Read(0x35,(&(sta)),1);
  4340  0739  3027               	movlw	(low (RTXSndPkt@sta| 0))& (0+255)
  4341  073A  0020               	movlb	0	; select bank0
  4342  073B  00A3               	movwf	??_RTXSndPkt
  4343  073C  0823               	movf	??_RTXSndPkt,w
  4344  073D  00F7               	movwf	CC1Read@dst
  4345  073E  01F8               	clrf	CC1Read@len
  4346  073F  0AF8               	incf	CC1Read@len,f
  4347  0740  3035               	movlw	53
  4348  0741  318C  244D  3187   	fcall	_CC1Read
  4349                           
  4350                           ;RTX.c: 137: }
  4351                           ;RTX.c: 138: while(!(((sta&0b00011111)==0x0D) || ((sta&0b00011111)==0x01)));
  4352  0744  301F               	movlw	31
  4353  0745  0020               	movlb	0	; select bank0
  4354  0746  0527               	andwf	RTXSndPkt@sta,w
  4355  0747  00A3               	movwf	??_RTXSndPkt
  4356  0748  300D               	movlw	13
  4357  0749  0623               	xorwf	??_RTXSndPkt,w
  4358  074A  1903               	btfsc	3,2
  4359  074B  2F52               	goto	l3466
  4360  074C  301F               	movlw	31
  4361  074D  0527               	andwf	RTXSndPkt@sta,w
  4362  074E  00A3               	movwf	??_RTXSndPkt
  4363  074F  0323               	decf	??_RTXSndPkt,w
  4364  0750  1D03               	btfss	3,2
  4365  0751  2F38               	goto	l489
  4366  0752                     l3466:	
  4367                           
  4368                           ;RTX.c: 140: CC1Strobe(SIDLE);
  4369  0752  3036               	movlw	54
  4370  0753  318B  2392  3187   	fcall	_CC1Strobe
  4371                           
  4372                           ;RTX.c: 141: CC1Read(0x3B,(&(numRxByte)),1);
  4373  0756  3024               	movlw	(low (RTXSndPkt@numRxByte| 0))& (0+255)
  4374  0757  0020               	movlb	0	; select bank0
  4375  0758  00A3               	movwf	??_RTXSndPkt
  4376  0759  0823               	movf	??_RTXSndPkt,w
  4377  075A  00F7               	movwf	CC1Read@dst
  4378  075B  01F8               	clrf	CC1Read@len
  4379  075C  0AF8               	incf	CC1Read@len,f
  4380  075D  303B               	movlw	59
  4381  075E  318C  244D  3187   	fcall	_CC1Read
  4382                           
  4383                           ;RTX.c: 142: CC1Read(0x3A,(&(numTxByte)),1);
  4384  0761  3026               	movlw	(low (RTXSndPkt@numTxByte| 0))& (0+255)
  4385  0762  0020               	movlb	0	; select bank0
  4386  0763  00A3               	movwf	??_RTXSndPkt
  4387  0764  0823               	movf	??_RTXSndPkt,w
  4388  0765  00F7               	movwf	CC1Read@dst
  4389  0766  01F8               	clrf	CC1Read@len
  4390  0767  0AF8               	incf	CC1Read@len,f
  4391  0768  303A               	movlw	58
  4392  0769  318C  244D  3187   	fcall	_CC1Read
  4393                           
  4394                           ;RTX.c: 144: CC1Strobe(SFTX);
  4395  076C  303B               	movlw	59
  4396  076D  318B  2392  3187   	fcall	_CC1Strobe
  4397                           
  4398                           ;RTX.c: 145: CC1Read(0x3A,(&(numTxByte)),1);
  4399  0770  3026               	movlw	(low (RTXSndPkt@numTxByte| 0))& (0+255)
  4400  0771  0020               	movlb	0	; select bank0
  4401  0772  00A3               	movwf	??_RTXSndPkt
  4402  0773  0823               	movf	??_RTXSndPkt,w
  4403  0774  00F7               	movwf	CC1Read@dst
  4404  0775  01F8               	clrf	CC1Read@len
  4405  0776  0AF8               	incf	CC1Read@len,f
  4406  0777  303A               	movlw	58
  4407  0778  318C  244D  3187   	fcall	_CC1Read
  4408                           
  4409                           ;RTX.c: 147: CC1Write(0x3F,src,len);
  4410  077B  0020               	movlb	0	; select bank0
  4411  077C  0825               	movf	RTXSndPkt@src,w
  4412  077D  00F7               	movwf	CC1Write@src
  4413  077E  3000               	movlw	0
  4414  077F  00F8               	movwf	CC1Write@src+1
  4415  0780  0822               	movf	RTXSndPkt@len,w
  4416  0781  00A3               	movwf	??_RTXSndPkt
  4417  0782  0823               	movf	??_RTXSndPkt,w
  4418  0783  00F9               	movwf	CC1Write@len
  4419  0784  303F               	movlw	63
  4420  0785  3187  27DF  3187   	fcall	_CC1Write
  4421                           
  4422                           ;RTX.c: 149: CC1Strobe(STX);
  4423  0788  3035               	movlw	53
  4424  0789  318B  2392         	fcall	_CC1Strobe
  4425  078B  0008               	return
  4426  078C                     __end_of_RTXSndPkt:	
  4427                           
  4428                           	psect	text16
  4429  07DF                     __ptext16:	
  4430 ;; *************** function _CC1Write *****************
  4431 ;; Defined at:
  4432 ;;		line 134 in file "CC1.c"
  4433 ;; Parameters:    Size  Location     Type
  4434 ;;  addr            1    wreg     unsigned char 
  4435 ;;  src             2    7[COMMON] PTR unsigned char 
  4436 ;;		 -> pktTx(11), cc1PaTable(8), cc1InitVal(47), 
  4437 ;;  len             1    9[COMMON] unsigned char 
  4438 ;; Auto vars:     Size  Location     Type
  4439 ;;  addr            1    0[BANK0 ] unsigned char 
  4440 ;;  cc1Addr         1    1[BANK0 ] unsigned char 
  4441 ;; Return value:  Size  Location     Type
  4442 ;;		None               void
  4443 ;; Registers used:
  4444 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4445 ;; Tracked objects:
  4446 ;;		On entry : 0/0
  4447 ;;		On exit  : 0/0
  4448 ;;		Unchanged: 0/0
  4449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4450 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4451 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4452 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4453 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4454 ;;Total ram usage:        6 bytes
  4455 ;; Hardware stack levels used:    1
  4456 ;; Hardware stack levels required when called:    3
  4457 ;; This function calls:
  4458 ;;		_SPIWrite
  4459 ;; This function is called by:
  4460 ;;		_CC1Init
  4461 ;;		_RTXSndPkt
  4462 ;; This function uses a non-reentrant model
  4463 ;;
  4464                           
  4465                           
  4466                           ;psect for function _CC1Write
  4467  07DF                     _CC1Write:	
  4468                           
  4469                           ;incstack = 0
  4470                           ; Regs used in _CC1Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4471                           ;CC1Write@addr stored from wreg
  4472  07DF  0020               	movlb	0	; select bank0
  4473  07E0  00A0               	movwf	CC1Write@addr
  4474                           
  4475                           ;CC1.c: 136: unsigned char cc1Addr;
  4476                           ;CC1.c: 139: LATAbits.LATA5=0;
  4477  07E1  0022               	movlb	2	; select bank2
  4478  07E2  128C               	bcf	12,5	;volatile
  4479                           
  4480                           ;CC1.c: 142: cc1Addr=((addr&0b00111111)|0b01000000);
  4481  07E3  0020               	movlb	0	; select bank0
  4482  07E4  0820               	movf	CC1Write@addr,w
  4483  07E5  393F               	andlw	63
  4484  07E6  3840               	iorlw	64
  4485  07E7  00FA               	movwf	??_CC1Write
  4486  07E8  087A               	movf	??_CC1Write,w
  4487  07E9  00A1               	movwf	CC1Write@cc1Addr
  4488                           
  4489                           ;CC1.c: 143: SPIWrite((&(cc1Addr)),1);
  4490  07EA  3021               	movlw	low CC1Write@cc1Addr
  4491  07EB  00F1               	movwf	SPIWrite@srcPtr
  4492  07EC  3000               	movlw	high CC1Write@cc1Addr
  4493  07ED  00F2               	movwf	SPIWrite@srcPtr+1
  4494  07EE  01F3               	clrf	SPIWrite@len
  4495  07EF  0AF3               	incf	SPIWrite@len,f
  4496  07F0  318C  2469  3187   	fcall	_SPIWrite
  4497                           
  4498                           ;CC1.c: 146: SPIWrite(src,len);
  4499  07F3  0877               	movf	CC1Write@src,w
  4500  07F4  00F1               	movwf	SPIWrite@srcPtr
  4501  07F5  0878               	movf	CC1Write@src+1,w
  4502  07F6  00F2               	movwf	SPIWrite@srcPtr+1
  4503  07F7  0879               	movf	CC1Write@len,w
  4504  07F8  00FA               	movwf	??_CC1Write
  4505  07F9  087A               	movf	??_CC1Write,w
  4506  07FA  00F3               	movwf	SPIWrite@len
  4507  07FB  318C  2469         	fcall	_SPIWrite
  4508                           
  4509                           ;CC1.c: 149: LATAbits.LATA5=1;
  4510  07FD  0022               	movlb	2	; select bank2
  4511  07FE  168C               	bsf	12,5	;volatile
  4512  07FF  0008               	return
  4513  0800                     __end_of_CC1Write:	
  4514                           
  4515                           	psect	text17
  4516  0041                     __ptext17:	
  4517 ;; *************** function _ADCConv *****************
  4518 ;; Defined at:
  4519 ;;		line 52 in file "ADC.c"
  4520 ;; Parameters:    Size  Location     Type
  4521 ;;		None
  4522 ;; Auto vars:     Size  Location     Type
  4523 ;;  sumCurr         4   56[BANK0 ] unsigned long 
  4524 ;;  sumBatt         2   60[BANK0 ] unsigned short 
  4525 ;;  cntSum          1   62[BANK0 ] unsigned char 
  4526 ;; Return value:  Size  Location     Type
  4527 ;;		None               void
  4528 ;; Registers used:
  4529 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4530 ;; Tracked objects:
  4531 ;;		On entry : 0/0
  4532 ;;		On exit  : 0/0
  4533 ;;		Unchanged: 0/0
  4534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4536 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4537 ;;      Temps:          0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4538 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4539 ;;Total ram usage:       24 bytes
  4540 ;; Hardware stack levels used:    1
  4541 ;; Hardware stack levels required when called:    6
  4542 ;; This function calls:
  4543 ;;		_DLYDelay_ms
  4544 ;;		___ftdiv
  4545 ;;		___ftmul
  4546 ;;		___lltoft
  4547 ;;		___lwdiv
  4548 ;;		___lwtoft
  4549 ;;		___wmul
  4550 ;;		_sqrt
  4551 ;; This function is called by:
  4552 ;;		_RTXStartSendData
  4553 ;;		_RTXStartSendPgm
  4554 ;; This function uses a non-reentrant model
  4555 ;;
  4556                           
  4557                           
  4558                           ;psect for function _ADCConv
  4559  0041                     _ADCConv:	
  4560                           
  4561                           ;ADC.c: 59: {
  4562                           ;ADC.c: 61: switch(adc_ch)
  4563                           
  4564                           ;incstack = 0
  4565                           ; Regs used in _ADCConv: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4566                           ;ADC.c: 54: unsigned char cntSum;
  4567                           ;ADC.c: 55: unsigned short sumBatt;
  4568                           ;ADC.c: 56: unsigned long sumCurr;
  4569                           ;ADC.c: 58: while(1)
  4570  0041  29CD               	goto	l3568
  4571  0042                     l124:	
  4572                           ;ADC.c: 62: {
  4573                           ;ADC.c: 63: case ADC_CH_OFF:
  4574                           
  4575                           
  4576                           ;ADC.c: 65: LATAbits.LATA0=1;
  4577  0042  0022               	movlb	2	; select bank2
  4578  0043  140C               	bsf	12,0	;volatile
  4579                           
  4580                           ;ADC.c: 67: sumBatt=0;
  4581  0044  0020               	movlb	0	; select bank0
  4582  0045  01DC               	clrf	ADCConv@sumBatt
  4583  0046  01DD               	clrf	ADCConv@sumBatt+1
  4584                           
  4585                           ;ADC.c: 69: cntSum=0;
  4586  0047  01DE               	clrf	ADCConv@cntSum
  4587                           
  4588                           ;ADC.c: 71: ADCON1=0b10000011;
  4589  0048  3083               	movlw	131
  4590  0049  0021               	movlb	1	; select bank1
  4591  004A  009E               	movwf	30	;volatile
  4592                           
  4593                           ;ADC.c: 72: ADCON0=0b00000101;
  4594  004B  3005               	movlw	5
  4595  004C  009D               	movwf	29	;volatile
  4596                           
  4597                           ;ADC.c: 73: adc_ch=ADC_CH_BATT;
  4598  004D  0020               	movlb	0	; select bank0
  4599  004E  01E9               	clrf	_adc_ch
  4600  004F  0AE9               	incf	_adc_ch,f
  4601                           
  4602                           ;ADC.c: 74: break;
  4603  0050  29D9               	goto	l3570
  4604  0051                     l3532:	
  4605                           ;ADC.c: 75: case ADC_CH_BATT:
  4606                           
  4607                           
  4608                           ;ADC.c: 77: if(cntSum==10)
  4609  0051  300A               	movlw	10
  4610  0052  065E               	xorwf	ADCConv@cntSum,w
  4611  0053  1D03               	btfss	3,2
  4612  0054  28C7               	goto	l3548
  4613                           
  4614                           ;ADC.c: 78: {
  4615                           ;ADC.c: 80: batt=sumBatt/10;
  4616  0055  300A               	movlw	10
  4617  0056  00F1               	movwf	___lwdiv@divisor
  4618  0057  3000               	movlw	0
  4619  0058  00F2               	movwf	___lwdiv@divisor+1
  4620  0059  085D               	movf	ADCConv@sumBatt+1,w
  4621  005A  00F4               	movwf	___lwdiv@dividend+1
  4622  005B  085C               	movf	ADCConv@sumBatt,w
  4623  005C  00F3               	movwf	___lwdiv@dividend
  4624  005D  318E  26D4  3180   	fcall	___lwdiv
  4625  0060  0872               	movf	?___lwdiv+1,w
  4626  0061  0021               	movlb	1	; select bank1
  4627  0062  00A7               	movwf	(_batt+1)^(0+128)
  4628  0063  0871               	movf	?___lwdiv,w
  4629  0064  00A6               	movwf	_batt^(0+128)
  4630                           
  4631                           ;ADC.c: 84: battV=batt*1.024/1024*11;
  4632  0065  3000               	movlw	0
  4633  0066  0020               	movlb	0	; select bank0
  4634  0067  00B4               	movwf	___ftdiv@f2
  4635  0068  3080               	movlw	128
  4636  0069  00B5               	movwf	___ftdiv@f2+1
  4637  006A  3044               	movlw	68
  4638  006B  00B6               	movwf	___ftdiv@f2+2
  4639  006C  3012               	movlw	18
  4640  006D  00A4               	movwf	___ftmul@f1
  4641  006E  3083               	movlw	131
  4642  006F  00A5               	movwf	___ftmul@f1+1
  4643  0070  303F               	movlw	63
  4644  0071  00A6               	movwf	___ftmul@f1+2
  4645  0072  0021               	movlb	1	; select bank1
  4646  0073  0827               	movf	(_batt+1)^(0+128),w
  4647  0074  00FA               	movwf	___lwtoft@c+1
  4648  0075  0826               	movf	_batt^(0+128),w
  4649  0076  00F9               	movwf	___lwtoft@c
  4650  0077  318B  23A6  3180   	fcall	___lwtoft
  4651  007A  0879               	movf	?___lwtoft,w
  4652  007B  0020               	movlb	0	; select bank0
  4653  007C  00A7               	movwf	___ftmul@f2
  4654  007D  087A               	movf	?___lwtoft+1,w
  4655  007E  00A8               	movwf	___ftmul@f2+1
  4656  007F  087B               	movf	?___lwtoft+2,w
  4657  0080  00A9               	movwf	___ftmul@f2+2
  4658  0081  3184  2494  3180   	fcall	___ftmul
  4659  0084  0020               	movlb	0	; select bank0
  4660  0085  0824               	movf	?___ftmul,w
  4661  0086  00B7               	movwf	___ftdiv@f1
  4662  0087  0825               	movf	?___ftmul+1,w
  4663  0088  00B8               	movwf	___ftdiv@f1+1
  4664  0089  0826               	movf	?___ftmul+2,w
  4665  008A  00B9               	movwf	___ftdiv@f1+2
  4666  008B  3185  2548  3180   	fcall	___ftdiv
  4667  008E  0020               	movlb	0	; select bank0
  4668  008F  0834               	movf	?___ftdiv,w
  4669  0090  00D5               	movwf	_ADCConv$1419
  4670  0091  0835               	movf	?___ftdiv+1,w
  4671  0092  00D6               	movwf	_ADCConv$1419+1
  4672  0093  0836               	movf	?___ftdiv+2,w
  4673  0094  00D7               	movwf	_ADCConv$1419+2
  4674                           
  4675                           ;ADC.c: 84: battV=batt*1.024/1024*11;
  4676  0095  3000               	movlw	0
  4677  0096  00A4               	movwf	___ftmul@f1
  4678  0097  3030               	movlw	48
  4679  0098  00A5               	movwf	___ftmul@f1+1
  4680  0099  3041               	movlw	65
  4681  009A  00A6               	movwf	___ftmul@f1+2
  4682  009B  0855               	movf	_ADCConv$1419,w
  4683  009C  00A7               	movwf	___ftmul@f2
  4684  009D  0856               	movf	_ADCConv$1419+1,w
  4685  009E  00A8               	movwf	___ftmul@f2+1
  4686  009F  0857               	movf	_ADCConv$1419+2,w
  4687  00A0  00A9               	movwf	___ftmul@f2+2
  4688  00A1  3184  2494  3180   	fcall	___ftmul
  4689  00A4  0020               	movlb	0	; select bank0
  4690  00A5  0824               	movf	?___ftmul,w
  4691  00A6  0021               	movlb	1	; select bank1
  4692  00A7  00A0               	movwf	_battV^(0+128)
  4693  00A8  0020               	movlb	0	; select bank0
  4694  00A9  0825               	movf	?___ftmul+1,w
  4695  00AA  0021               	movlb	1	; select bank1
  4696  00AB  00A1               	movwf	(_battV+1)^(0+128)
  4697  00AC  0020               	movlb	0	; select bank0
  4698  00AD  0826               	movf	?___ftmul+2,w
  4699  00AE  0021               	movlb	1	; select bank1
  4700  00AF  00A2               	movwf	(_battV+2)^(0+128)
  4701                           
  4702                           ;ADC.c: 86: sumCurr=0;
  4703  00B0  3000               	movlw	0
  4704  00B1  0020               	movlb	0	; select bank0
  4705  00B2  00DB               	movwf	ADCConv@sumCurr+3
  4706  00B3  3000               	movlw	0
  4707  00B4  00DA               	movwf	ADCConv@sumCurr+2
  4708  00B5  3000               	movlw	0
  4709  00B6  00D9               	movwf	ADCConv@sumCurr+1
  4710  00B7  3000               	movlw	0
  4711  00B8  00D8               	movwf	ADCConv@sumCurr
  4712                           
  4713                           ;ADC.c: 88: cntSum=0;
  4714  00B9  01DE               	clrf	ADCConv@cntSum
  4715                           
  4716                           ;ADC.c: 90: LATAbits.LATA0=0;
  4717  00BA  0022               	movlb	2	; select bank2
  4718  00BB  100C               	bcf	12,0	;volatile
  4719                           
  4720                           ;ADC.c: 92: ADCON1=0b10000011;
  4721  00BC  3083               	movlw	131
  4722  00BD  0021               	movlb	1	; select bank1
  4723  00BE  009E               	movwf	30	;volatile
  4724                           
  4725                           ;ADC.c: 93: ADCON0=0b00001001;
  4726  00BF  3009               	movlw	9
  4727  00C0  009D               	movwf	29	;volatile
  4728                           
  4729                           ;ADC.c: 94: adc_ch=ADC_CH_CURR;
  4730  00C1  3002               	movlw	2
  4731  00C2  0020               	movlb	0	; select bank0
  4732  00C3  00C7               	movwf	??_ADCConv
  4733  00C4  0847               	movf	??_ADCConv,w
  4734  00C5  00E9               	movwf	_adc_ch
  4735                           
  4736                           ;ADC.c: 95: }
  4737  00C6  29D9               	goto	l3570
  4738  00C7                     l3548:	
  4739                           
  4740                           ;ADC.c: 96: else
  4741                           ;ADC.c: 97: {
  4742                           ;ADC.c: 99: sumBatt+=(ADRESH<<8|ADRESL);
  4743  00C7  0021               	movlb	1	; select bank1
  4744  00C8  081B               	movf	27,w	;volatile
  4745  00C9  0020               	movlb	0	; select bank0
  4746  00CA  07DC               	addwf	ADCConv@sumBatt,f
  4747  00CB  0021               	movlb	1	; select bank1
  4748  00CC  081C               	movf	28,w	;volatile
  4749  00CD  0020               	movlb	0	; select bank0
  4750  00CE  3DDD               	addwfc	ADCConv@sumBatt+1,f
  4751  00CF  29C8               	goto	l3564
  4752  00D0                     l3552:	
  4753                           ;ADC.c: 104: case ADC_CH_CURR:
  4754                           
  4755                           ;ADC.c: 102: }
  4756                           ;ADC.c: 103: break;
  4757                           
  4758                           ;ADC.c: 101: cntSum++;
  4759                           
  4760                           
  4761                           ;ADC.c: 106: if(cntSum==20)
  4762  00D0  3014               	movlw	20
  4763  00D1  065E               	xorwf	ADCConv@cntSum,w
  4764  00D2  1D03               	btfss	3,2
  4765  00D3  298D               	goto	l3562
  4766                           
  4767                           ;ADC.c: 107: {
  4768                           ;ADC.c: 114: rmsCurr=sumCurr*(1.024*1.024)/(1024*1024);
  4769  00D4  3000               	movlw	0
  4770  00D5  00B4               	movwf	___ftdiv@f2
  4771  00D6  3000               	movlw	0
  4772  00D7  00B5               	movwf	___ftdiv@f2+1
  4773  00D8  3000               	movlw	0
  4774  00D9  00B6               	movwf	___ftdiv@f2+2
  4775  00DA  3038               	movlw	56
  4776  00DB  00A4               	movwf	___ftmul@f1
  4777  00DC  3086               	movlw	134
  4778  00DD  00A5               	movwf	___ftmul@f1+1
  4779  00DE  303F               	movlw	63
  4780  00DF  00A6               	movwf	___ftmul@f1+2
  4781  00E0  085B               	movf	ADCConv@sumCurr+3,w
  4782  00E1  00A3               	movwf	___lltoft@c+3
  4783  00E2  085A               	movf	ADCConv@sumCurr+2,w
  4784  00E3  00A2               	movwf	___lltoft@c+2
  4785  00E4  0859               	movf	ADCConv@sumCurr+1,w
  4786  00E5  00A1               	movwf	___lltoft@c+1
  4787  00E6  0858               	movf	ADCConv@sumCurr,w
  4788  00E7  00A0               	movwf	___lltoft@c
  4789  00E8  318E  264A  3180   	fcall	___lltoft
  4790  00EB  0020               	movlb	0	; select bank0
  4791  00EC  0820               	movf	?___lltoft,w
  4792  00ED  00A7               	movwf	___ftmul@f2
  4793  00EE  0821               	movf	?___lltoft+1,w
  4794  00EF  00A8               	movwf	___ftmul@f2+1
  4795  00F0  0822               	movf	?___lltoft+2,w
  4796  00F1  00A9               	movwf	___ftmul@f2+2
  4797  00F2  3184  2494  3180   	fcall	___ftmul
  4798  00F5  0020               	movlb	0	; select bank0
  4799  00F6  0824               	movf	?___ftmul,w
  4800  00F7  00B7               	movwf	___ftdiv@f1
  4801  00F8  0825               	movf	?___ftmul+1,w
  4802  00F9  00B8               	movwf	___ftdiv@f1+1
  4803  00FA  0826               	movf	?___ftmul+2,w
  4804  00FB  00B9               	movwf	___ftdiv@f1+2
  4805  00FC  3185  2548  3180   	fcall	___ftdiv
  4806  00FF  0020               	movlb	0	; select bank0
  4807  0100  0834               	movf	?___ftdiv,w
  4808  0101  0021               	movlb	1	; select bank1
  4809  0102  00A3               	movwf	_rmsCurr^(0+128)
  4810  0103  0020               	movlb	0	; select bank0
  4811  0104  0835               	movf	?___ftdiv+1,w
  4812  0105  0021               	movlb	1	; select bank1
  4813  0106  00A4               	movwf	(_rmsCurr+1)^(0+128)
  4814  0107  0020               	movlb	0	; select bank0
  4815  0108  0836               	movf	?___ftdiv+2,w
  4816  0109  0021               	movlb	1	; select bank1
  4817  010A  00A5               	movwf	(_rmsCurr+2)^(0+128)
  4818                           
  4819                           ;ADC.c: 115: rmsCurr/=(33*33);
  4820  010B  3020               	movlw	32
  4821  010C  0020               	movlb	0	; select bank0
  4822  010D  00B4               	movwf	___ftdiv@f2
  4823  010E  3088               	movlw	136
  4824  010F  00B5               	movwf	___ftdiv@f2+1
  4825  0110  3044               	movlw	68
  4826  0111  00B6               	movwf	___ftdiv@f2+2
  4827  0112  0021               	movlb	1	; select bank1
  4828  0113  0823               	movf	_rmsCurr^(0+128),w
  4829  0114  0020               	movlb	0	; select bank0
  4830  0115  00B7               	movwf	___ftdiv@f1
  4831  0116  0021               	movlb	1	; select bank1
  4832  0117  0824               	movf	(_rmsCurr+1)^(0+128),w
  4833  0118  0020               	movlb	0	; select bank0
  4834  0119  00B8               	movwf	___ftdiv@f1+1
  4835  011A  0021               	movlb	1	; select bank1
  4836  011B  0825               	movf	(_rmsCurr+2)^(0+128),w
  4837  011C  0020               	movlb	0	; select bank0
  4838  011D  00B9               	movwf	___ftdiv@f1+2
  4839  011E  3185  2548  3180   	fcall	___ftdiv
  4840  0121  0020               	movlb	0	; select bank0
  4841  0122  0834               	movf	?___ftdiv,w
  4842  0123  0021               	movlb	1	; select bank1
  4843  0124  00A3               	movwf	_rmsCurr^(0+128)
  4844  0125  0020               	movlb	0	; select bank0
  4845  0126  0835               	movf	?___ftdiv+1,w
  4846  0127  0021               	movlb	1	; select bank1
  4847  0128  00A4               	movwf	(_rmsCurr+1)^(0+128)
  4848  0129  0020               	movlb	0	; select bank0
  4849  012A  0836               	movf	?___ftdiv+2,w
  4850  012B  0021               	movlb	1	; select bank1
  4851  012C  00A5               	movwf	(_rmsCurr+2)^(0+128)
  4852                           
  4853                           ;ADC.c: 116: rmsCurr*=(2000*2000);
  4854  012D  3000               	movlw	0
  4855  012E  0020               	movlb	0	; select bank0
  4856  012F  00A4               	movwf	___ftmul@f1
  4857  0130  3010               	movlw	16
  4858  0131  00A5               	movwf	___ftmul@f1+1
  4859  0132  3045               	movlw	69
  4860  0133  00A6               	movwf	___ftmul@f1+2
  4861  0134  0021               	movlb	1	; select bank1
  4862  0135  0823               	movf	_rmsCurr^(0+128),w
  4863  0136  0020               	movlb	0	; select bank0
  4864  0137  00A7               	movwf	___ftmul@f2
  4865  0138  0021               	movlb	1	; select bank1
  4866  0139  0824               	movf	(_rmsCurr+1)^(0+128),w
  4867  013A  0020               	movlb	0	; select bank0
  4868  013B  00A8               	movwf	___ftmul@f2+1
  4869  013C  0021               	movlb	1	; select bank1
  4870  013D  0825               	movf	(_rmsCurr+2)^(0+128),w
  4871  013E  0020               	movlb	0	; select bank0
  4872  013F  00A9               	movwf	___ftmul@f2+2
  4873  0140  3184  2494  3180   	fcall	___ftmul
  4874  0143  0020               	movlb	0	; select bank0
  4875  0144  0824               	movf	?___ftmul,w
  4876  0145  0021               	movlb	1	; select bank1
  4877  0146  00A3               	movwf	_rmsCurr^(0+128)
  4878  0147  0020               	movlb	0	; select bank0
  4879  0148  0825               	movf	?___ftmul+1,w
  4880  0149  0021               	movlb	1	; select bank1
  4881  014A  00A4               	movwf	(_rmsCurr+1)^(0+128)
  4882  014B  0020               	movlb	0	; select bank0
  4883  014C  0826               	movf	?___ftmul+2,w
  4884  014D  0021               	movlb	1	; select bank1
  4885  014E  00A5               	movwf	(_rmsCurr+2)^(0+128)
  4886                           
  4887                           ;ADC.c: 117: rmsCurr/=20;
  4888  014F  3000               	movlw	0
  4889  0150  0020               	movlb	0	; select bank0
  4890  0151  00B4               	movwf	___ftdiv@f2
  4891  0152  30A0               	movlw	160
  4892  0153  00B5               	movwf	___ftdiv@f2+1
  4893  0154  3041               	movlw	65
  4894  0155  00B6               	movwf	___ftdiv@f2+2
  4895  0156  0021               	movlb	1	; select bank1
  4896  0157  0823               	movf	_rmsCurr^(0+128),w
  4897  0158  0020               	movlb	0	; select bank0
  4898  0159  00B7               	movwf	___ftdiv@f1
  4899  015A  0021               	movlb	1	; select bank1
  4900  015B  0824               	movf	(_rmsCurr+1)^(0+128),w
  4901  015C  0020               	movlb	0	; select bank0
  4902  015D  00B8               	movwf	___ftdiv@f1+1
  4903  015E  0021               	movlb	1	; select bank1
  4904  015F  0825               	movf	(_rmsCurr+2)^(0+128),w
  4905  0160  0020               	movlb	0	; select bank0
  4906  0161  00B9               	movwf	___ftdiv@f1+2
  4907  0162  3185  2548  3180   	fcall	___ftdiv
  4908  0165  0020               	movlb	0	; select bank0
  4909  0166  0834               	movf	?___ftdiv,w
  4910  0167  0021               	movlb	1	; select bank1
  4911  0168  00A3               	movwf	_rmsCurr^(0+128)
  4912  0169  0020               	movlb	0	; select bank0
  4913  016A  0835               	movf	?___ftdiv+1,w
  4914  016B  0021               	movlb	1	; select bank1
  4915  016C  00A4               	movwf	(_rmsCurr+1)^(0+128)
  4916  016D  0020               	movlb	0	; select bank0
  4917  016E  0836               	movf	?___ftdiv+2,w
  4918  016F  0021               	movlb	1	; select bank1
  4919  0170  00A5               	movwf	(_rmsCurr+2)^(0+128)
  4920                           
  4921                           ;ADC.c: 118: rmsCurr=sqrt(rmsCurr);
  4922  0171  0823               	movf	_rmsCurr^(0+128),w
  4923  0172  0020               	movlb	0	; select bank0
  4924  0173  00B4               	movwf	sqrt@y
  4925  0174  0021               	movlb	1	; select bank1
  4926  0175  0824               	movf	(_rmsCurr+1)^(0+128),w
  4927  0176  0020               	movlb	0	; select bank0
  4928  0177  00B5               	movwf	sqrt@y+1
  4929  0178  0021               	movlb	1	; select bank1
  4930  0179  0825               	movf	(_rmsCurr+2)^(0+128),w
  4931  017A  0020               	movlb	0	; select bank0
  4932  017B  00B6               	movwf	sqrt@y+2
  4933  017C  3182  22E8         	fcall	_sqrt
  4934  017E  0020               	movlb	0	; select bank0
  4935  017F  0834               	movf	?_sqrt,w
  4936  0180  0021               	movlb	1	; select bank1
  4937  0181  00A3               	movwf	_rmsCurr^(0+128)
  4938  0182  0020               	movlb	0	; select bank0
  4939  0183  0835               	movf	?_sqrt+1,w
  4940  0184  0021               	movlb	1	; select bank1
  4941  0185  00A4               	movwf	(_rmsCurr+1)^(0+128)
  4942  0186  0020               	movlb	0	; select bank0
  4943  0187  0836               	movf	?_sqrt+2,w
  4944  0188  0021               	movlb	1	; select bank1
  4945  0189  00A5               	movwf	(_rmsCurr+2)^(0+128)
  4946                           
  4947                           ;ADC.c: 120: adc_ch=ADC_CH_OFF;
  4948  018A  0020               	movlb	0	; select bank0
  4949  018B  01E9               	clrf	_adc_ch
  4950                           
  4951                           ;ADC.c: 121: return;
  4952  018C  0008               	return
  4953  018D                     l3562:	
  4954                           ;ADC.c: 122: }
  4955                           
  4956                           
  4957                           ;ADC.c: 123: else
  4958                           ;ADC.c: 124: {
  4959                           ;ADC.c: 126: sumCurr+=((ADRESH<<8|ADRESL)*(ADRESH<<8|ADRESL));
  4960  018D  0021               	movlb	1	; select bank1
  4961  018E  081B               	movf	27,w	;volatile
  4962  018F  0020               	movlb	0	; select bank0
  4963  0190  00C7               	movwf	??_ADCConv
  4964  0191  01C8               	clrf	??_ADCConv+1
  4965  0192  0021               	movlb	1	; select bank1
  4966  0193  081C               	movf	28,w	;volatile
  4967  0194  0020               	movlb	0	; select bank0
  4968  0195  00C9               	movwf	??_ADCConv+2
  4969  0196  01CA               	clrf	??_ADCConv+3
  4970  0197  0849               	movf	??_ADCConv+2,w
  4971  0198  00CA               	movwf	??_ADCConv+3
  4972  0199  01C9               	clrf	??_ADCConv+2
  4973  019A  0847               	movf	??_ADCConv,w
  4974  019B  0449               	iorwf	??_ADCConv+2,w
  4975  019C  00F1               	movwf	___wmul@multiplier
  4976  019D  0848               	movf	??_ADCConv+1,w
  4977  019E  044A               	iorwf	??_ADCConv+3,w
  4978  019F  00F2               	movwf	___wmul@multiplier+1
  4979  01A0  0021               	movlb	1	; select bank1
  4980  01A1  081B               	movf	27,w	;volatile
  4981  01A2  0020               	movlb	0	; select bank0
  4982  01A3  00CC               	movwf	??_ADCConv+5
  4983  01A4  01CD               	clrf	??_ADCConv+6
  4984  01A5  0021               	movlb	1	; select bank1
  4985  01A6  081C               	movf	28,w	;volatile
  4986  01A7  0020               	movlb	0	; select bank0
  4987  01A8  00CE               	movwf	??_ADCConv+7
  4988  01A9  01CF               	clrf	??_ADCConv+8
  4989  01AA  084E               	movf	??_ADCConv+7,w
  4990  01AB  00CF               	movwf	??_ADCConv+8
  4991  01AC  01CE               	clrf	??_ADCConv+7
  4992  01AD  084C               	movf	??_ADCConv+5,w
  4993  01AE  044E               	iorwf	??_ADCConv+7,w
  4994  01AF  00F3               	movwf	___wmul@multiplicand
  4995  01B0  084D               	movf	??_ADCConv+6,w
  4996  01B1  044F               	iorwf	??_ADCConv+8,w
  4997  01B2  00F4               	movwf	___wmul@multiplicand+1
  4998  01B3  318C  2432  3180   	fcall	___wmul
  4999  01B6  0871               	movf	?___wmul,w
  5000  01B7  0020               	movlb	0	; select bank0
  5001  01B8  00D1               	movwf	??_ADCConv+10
  5002  01B9  0872               	movf	?___wmul+1,w
  5003  01BA  00D2               	movwf	??_ADCConv+11
  5004  01BB  3000               	movlw	0
  5005  01BC  1BD2               	btfsc	??_ADCConv+11,7
  5006  01BD  30FF               	movlw	255
  5007  01BE  00D3               	movwf	??_ADCConv+12
  5008  01BF  00D4               	movwf	??_ADCConv+13
  5009  01C0  0851               	movf	??_ADCConv+10,w
  5010  01C1  07D8               	addwf	ADCConv@sumCurr,f
  5011  01C2  0852               	movf	??_ADCConv+11,w
  5012  01C3  3DD9               	addwfc	ADCConv@sumCurr+1,f
  5013  01C4  0853               	movf	??_ADCConv+12,w
  5014  01C5  3DDA               	addwfc	ADCConv@sumCurr+2,f
  5015  01C6  0854               	movf	??_ADCConv+13,w
  5016  01C7  3DDB               	addwfc	ADCConv@sumCurr+3,f
  5017  01C8                     l3564:	
  5018                           
  5019                           ;ADC.c: 128: cntSum++;
  5020  01C8  3001               	movlw	1
  5021  01C9  00C7               	movwf	??_ADCConv
  5022  01CA  0847               	movf	??_ADCConv,w
  5023  01CB  07DE               	addwf	ADCConv@cntSum,f
  5024                           
  5025                           ;ADC.c: 131: }
  5026                           
  5027                           ;ADC.c: 129: }
  5028                           ;ADC.c: 130: break;
  5029  01CC  29D9               	goto	l3570
  5030  01CD                     l3568:	
  5031  01CD  0020               	movlb	0	; select bank0
  5032  01CE  0869               	movf	_adc_ch,w
  5033                           
  5034                           ; Switch size 1, requested type "space"
  5035                           ; Number of cases is 3, Range of values is 0 to 2
  5036                           ; switch strategies available:
  5037                           ; Name         Instructions Cycles
  5038                           ; simple_byte           10     6 (average)
  5039                           ; direct_byte           12     6 (fixed)
  5040                           ; jumptable            260     6 (fixed)
  5041                           ;	Chosen strategy is simple_byte
  5042  01CF  3A00               	xorlw	0	; case 0
  5043  01D0  1903               	skipnz
  5044  01D1  2842               	goto	l124
  5045  01D2  3A01               	xorlw	1	; case 1
  5046  01D3  1903               	skipnz
  5047  01D4  2851               	goto	l3532
  5048  01D5  3A03               	xorlw	3	; case 2
  5049  01D6  1903               	skipnz
  5050  01D7  28D0               	goto	l3552
  5051  01D8  29D9               	goto	l3570
  5052  01D9                     l3570:	
  5053                           
  5054                           ;ADC.c: 133: _delay((unsigned long)((10)*(8000000/4000000.0)));
  5055  01D9  3006               	movlw	6
  5056  01DA  00C7               	movwf	??_ADCConv
  5057  01DB                     u4087:	
  5058  01DB  0BC7               	decfsz	??_ADCConv,f
  5059  01DC  29DB               	goto	u4087
  5060  01DD  0000               	nop
  5061                           
  5062                           ;ADC.c: 135: ADCON0bits.GO=1;
  5063  01DE  0021               	movlb	1	; select bank1
  5064  01DF  149D               	bsf	29,1	;volatile
  5065  01E0                     l133:	
  5066                           ;ADC.c: 137: while(ADCON0bits.GO)
  5067                           
  5068  01E0  0021               	movlb	1	; select bank1
  5069  01E1  1C9D               	btfss	29,1	;volatile
  5070  01E2  29E5               	goto	l3574
  5071  01E3  0064               	clrwdt	;# 
  5072  01E4  29E0               	goto	l133
  5073  01E5                     l3574:	
  5074                           
  5075                           ;ADC.c: 140: if(adc_ch==ADC_CH_CURR)
  5076  01E5  3002               	movlw	2
  5077  01E6  0020               	movlb	0	; select bank0
  5078  01E7  0669               	xorwf	_adc_ch,w
  5079  01E8  1D03               	btfss	3,2
  5080  01E9  29CD               	goto	l3568
  5081                           
  5082                           ;ADC.c: 141: DLYDelay_ms(8);
  5083  01EA  3008               	movlw	8
  5084  01EB  00F1               	movwf	DLYDelay_ms@val
  5085  01EC  3000               	movlw	0
  5086  01ED  00F2               	movwf	DLYDelay_ms@val+1
  5087  01EE  318B  23FF  3180   	fcall	_DLYDelay_ms
  5088  01F1  29CD               	goto	l3568
  5089  01F2                     __end_of_ADCConv:	
  5090                           
  5091                           	psect	text18
  5092  02E8                     __ptext18:	
  5093 ;; *************** function _sqrt *****************
  5094 ;; Defined at:
  5095 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\sqrt.c"
  5096 ;; Parameters:    Size  Location     Type
  5097 ;;  y               3   20[BANK0 ] unsigned char 
  5098 ;; Auto vars:     Size  Location     Type
  5099 ;;  x               3   36[BANK0 ] unsigned char 
  5100 ;;  q               3   33[BANK0 ] unsigned char 
  5101 ;;  z               3   29[BANK0 ] unsigned char 
  5102 ;;  og              3   26[BANK0 ] unsigned char 
  5103 ;;  i               1   32[BANK0 ] unsigned char 
  5104 ;; Return value:  Size  Location     Type
  5105 ;;                  3   20[BANK0 ] unsigned char 
  5106 ;; Registers used:
  5107 ;;		wreg, status,2, status,0, pclath, cstack
  5108 ;; Tracked objects:
  5109 ;;		On entry : 0/0
  5110 ;;		On exit  : 0/0
  5111 ;;		Unchanged: 0/0
  5112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5113 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5114 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5115 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5116 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5117 ;;Total ram usage:       19 bytes
  5118 ;; Hardware stack levels used:    1
  5119 ;; Hardware stack levels required when called:    5
  5120 ;; This function calls:
  5121 ;;		___ftge
  5122 ;;		___ftmul
  5123 ;;		___ftsub
  5124 ;; This function is called by:
  5125 ;;		_ADCConv
  5126 ;; This function uses a non-reentrant model
  5127 ;;
  5128                           
  5129                           
  5130                           ;psect for function _sqrt
  5131  02E8                     _sqrt:	
  5132                           
  5133                           ;incstack = 0
  5134                           ; Regs used in _sqrt: [wreg+status,2+status,0+pclath+cstack]
  5135  02E8  3000               	movlw	0
  5136  02E9  00F1               	movwf	___ftge@ff1
  5137  02EA  3000               	movlw	0
  5138  02EB  00F2               	movwf	___ftge@ff1+1
  5139  02EC  3000               	movlw	0
  5140  02ED  00F3               	movwf	___ftge@ff1+2
  5141  02EE  0020               	movlb	0	; select bank0
  5142  02EF  0834               	movf	sqrt@y,w
  5143  02F0  00F4               	movwf	___ftge@ff2
  5144  02F1  0835               	movf	sqrt@y+1,w
  5145  02F2  00F5               	movwf	___ftge@ff2+1
  5146  02F3  0836               	movf	sqrt@y+2,w
  5147  02F4  00F6               	movwf	___ftge@ff2+2
  5148  02F5  318F  2776  3182   	fcall	___ftge
  5149  02F8  1C03               	btfss	3,0
  5150  02F9  2B19               	goto	l3428
  5151  02FA  0020               	movlb	0	; select bank0
  5152  02FB  0834               	movf	sqrt@y,w
  5153  02FC  00F1               	movwf	___ftge@ff1
  5154  02FD  0835               	movf	sqrt@y+1,w
  5155  02FE  00F2               	movwf	___ftge@ff1+1
  5156  02FF  0836               	movf	sqrt@y+2,w
  5157  0300  00F3               	movwf	___ftge@ff1+2
  5158  0301  3000               	movlw	0
  5159  0302  00F4               	movwf	___ftge@ff2
  5160  0303  3000               	movlw	0
  5161  0304  00F5               	movwf	___ftge@ff2+1
  5162  0305  3000               	movlw	0
  5163  0306  00F6               	movwf	___ftge@ff2+2
  5164  0307  318F  2776  3182   	fcall	___ftge
  5165  030A  1803               	btfsc	3,0
  5166  030B  2B11               	goto	l1047
  5167  030C  3021               	movlw	33
  5168  030D  0021               	movlb	1	; select bank1
  5169  030E  00A8               	movwf	_errno^(0+128)
  5170  030F  3000               	movlw	0
  5171  0310  00A9               	movwf	(_errno^(0+128)+1)
  5172  0311                     l1047:	
  5173  0311  3000               	movlw	0
  5174  0312  0020               	movlb	0	; select bank0
  5175  0313  00B4               	movwf	?_sqrt
  5176  0314  3000               	movlw	0
  5177  0315  00B5               	movwf	?_sqrt+1
  5178  0316  3000               	movlw	0
  5179  0317  00B6               	movwf	?_sqrt+2
  5180  0318  0008               	return
  5181  0319                     l3428:	
  5182  0319  0020               	movlb	0	; select bank0
  5183  031A  0834               	movf	sqrt@y,w
  5184  031B  00BD               	movwf	sqrt@z
  5185  031C  0835               	movf	sqrt@y+1,w
  5186  031D  00BE               	movwf	sqrt@z+1
  5187  031E  0836               	movf	sqrt@y+2,w
  5188  031F  00BF               	movwf	sqrt@z+2
  5189  0320  0934               	comf	sqrt@y,w
  5190  0321  00B7               	movwf	??_sqrt
  5191  0322  0935               	comf	sqrt@y+1,w
  5192  0323  00B8               	movwf	??_sqrt+1
  5193  0324  0936               	comf	sqrt@y+2,w
  5194  0325  00B9               	movwf	??_sqrt+2
  5195  0326  0AB7               	incf	??_sqrt,f
  5196  0327  1903               	skipnz
  5197  0328  0AB8               	incf	??_sqrt+1,f
  5198  0329  1903               	skipnz
  5199  032A  0AB9               	incf	??_sqrt+2,f
  5200  032B  30C8               	movlw	200
  5201  032C  0737               	addwf	??_sqrt,w
  5202  032D  00C4               	movwf	sqrt@x
  5203  032E  306E               	movlw	110
  5204  032F  3D38               	addwfc	??_sqrt+1,w
  5205  0330  00C5               	movwf	sqrt@x+1
  5206  0331  30BE               	movlw	190
  5207  0332  3D39               	addwfc	??_sqrt+2,w
  5208  0333  00C6               	movwf	sqrt@x+2
  5209  0334  3001               	movlw	1
  5210  0335                     u3555:	
  5211  0335  36C6               	lsrf	sqrt@x+2,f
  5212  0336  0CC5               	rrf	sqrt@x+1,f
  5213  0337  0CC4               	rrf	sqrt@x,f
  5214  0338  0B89               	decfsz	9,f
  5215  0339  2B35               	goto	u3555
  5216  033A  3000               	movlw	0
  5217  033B  00B7               	movwf	??_sqrt
  5218  033C  3080               	movlw	128
  5219  033D  00B8               	movwf	??_sqrt+1
  5220  033E  3000               	movlw	0
  5221  033F  00B9               	movwf	??_sqrt+2
  5222  0340  0837               	movf	??_sqrt,w
  5223  0341  02BD               	subwf	sqrt@z,f
  5224  0342  0838               	movf	??_sqrt+1,w
  5225  0343  3BBE               	subwfb	sqrt@z+1,f
  5226  0344  0839               	movf	??_sqrt+2,w
  5227  0345  3BBF               	subwfb	sqrt@z+2,f
  5228  0346  3004               	movlw	4
  5229  0347  00B7               	movwf	??_sqrt
  5230  0348  0837               	movf	??_sqrt,w
  5231  0349  00C0               	movwf	sqrt@i
  5232  034A                     l1049:	
  5233  034A  0844               	movf	sqrt@x,w
  5234  034B  00BA               	movwf	sqrt@og
  5235  034C  0845               	movf	sqrt@x+1,w
  5236  034D  00BB               	movwf	sqrt@og+1
  5237  034E  0846               	movf	sqrt@x+2,w
  5238  034F  00BC               	movwf	sqrt@og+2
  5239  0350  083D               	movf	sqrt@z,w
  5240  0351  00A4               	movwf	___ftmul@f1
  5241  0352  083E               	movf	sqrt@z+1,w
  5242  0353  00A5               	movwf	___ftmul@f1+1
  5243  0354  083F               	movf	sqrt@z+2,w
  5244  0355  00A6               	movwf	___ftmul@f1+2
  5245  0356  0844               	movf	sqrt@x,w
  5246  0357  00A7               	movwf	___ftmul@f2
  5247  0358  0845               	movf	sqrt@x+1,w
  5248  0359  00A8               	movwf	___ftmul@f2+1
  5249  035A  0846               	movf	sqrt@x+2,w
  5250  035B  00A9               	movwf	___ftmul@f2+2
  5251  035C  3184  2494  3182   	fcall	___ftmul
  5252  035F  0020               	movlb	0	; select bank0
  5253  0360  0824               	movf	?___ftmul,w
  5254  0361  00C1               	movwf	sqrt@q
  5255  0362  0825               	movf	?___ftmul+1,w
  5256  0363  00C2               	movwf	sqrt@q+1
  5257  0364  0826               	movf	?___ftmul+2,w
  5258  0365  00C3               	movwf	sqrt@q+2
  5259  0366  0844               	movf	sqrt@x,w
  5260  0367  00A4               	movwf	___ftmul@f1
  5261  0368  0845               	movf	sqrt@x+1,w
  5262  0369  00A5               	movwf	___ftmul@f1+1
  5263  036A  0846               	movf	sqrt@x+2,w
  5264  036B  00A6               	movwf	___ftmul@f1+2
  5265  036C  0841               	movf	sqrt@q,w
  5266  036D  00A7               	movwf	___ftmul@f2
  5267  036E  0842               	movf	sqrt@q+1,w
  5268  036F  00A8               	movwf	___ftmul@f2+1
  5269  0370  0843               	movf	sqrt@q+2,w
  5270  0371  00A9               	movwf	___ftmul@f2+2
  5271  0372  3184  2494  3182   	fcall	___ftmul
  5272  0375  0020               	movlb	0	; select bank0
  5273  0376  0824               	movf	?___ftmul,w
  5274  0377  00C1               	movwf	sqrt@q
  5275  0378  0825               	movf	?___ftmul+1,w
  5276  0379  00C2               	movwf	sqrt@q+1
  5277  037A  0826               	movf	?___ftmul+2,w
  5278  037B  00C3               	movwf	sqrt@q+2
  5279  037C  0844               	movf	sqrt@x,w
  5280  037D  00A4               	movwf	___ftmul@f1
  5281  037E  0845               	movf	sqrt@x+1,w
  5282  037F  00A5               	movwf	___ftmul@f1+1
  5283  0380  0846               	movf	sqrt@x+2,w
  5284  0381  00A6               	movwf	___ftmul@f1+2
  5285  0382  0841               	movf	sqrt@q,w
  5286  0383  00A7               	movwf	___ftmul@f2
  5287  0384  0842               	movf	sqrt@q+1,w
  5288  0385  00A8               	movwf	___ftmul@f2+1
  5289  0386  0843               	movf	sqrt@q+2,w
  5290  0387  00A9               	movwf	___ftmul@f2+2
  5291  0388  3184  2494  3182   	fcall	___ftmul
  5292  038B  0020               	movlb	0	; select bank0
  5293  038C  0824               	movf	?___ftmul,w
  5294  038D  00C1               	movwf	sqrt@q
  5295  038E  0825               	movf	?___ftmul+1,w
  5296  038F  00C2               	movwf	sqrt@q+1
  5297  0390  0826               	movf	?___ftmul+2,w
  5298  0391  00C3               	movwf	sqrt@q+2
  5299  0392  3000               	movlw	0
  5300  0393  00A4               	movwf	___ftmul@f1
  5301  0394  30C0               	movlw	192
  5302  0395  00A5               	movwf	___ftmul@f1+1
  5303  0396  303F               	movlw	63
  5304  0397  00A6               	movwf	___ftmul@f1+2
  5305  0398  0844               	movf	sqrt@x,w
  5306  0399  00A7               	movwf	___ftmul@f2
  5307  039A  0845               	movf	sqrt@x+1,w
  5308  039B  00A8               	movwf	___ftmul@f2+1
  5309  039C  0846               	movf	sqrt@x+2,w
  5310  039D  00A9               	movwf	___ftmul@f2+2
  5311  039E  3184  2494  3182   	fcall	___ftmul
  5312  03A1  0020               	movlb	0	; select bank0
  5313  03A2  0824               	movf	?___ftmul,w
  5314  03A3  00C4               	movwf	sqrt@x
  5315  03A4  0825               	movf	?___ftmul+1,w
  5316  03A5  00C5               	movwf	sqrt@x+1
  5317  03A6  0826               	movf	?___ftmul+2,w
  5318  03A7  00C6               	movwf	sqrt@x+2
  5319  03A8  0841               	movf	sqrt@q,w
  5320  03A9  00AA               	movwf	___ftsub@f2
  5321  03AA  0842               	movf	sqrt@q+1,w
  5322  03AB  00AB               	movwf	___ftsub@f2+1
  5323  03AC  0843               	movf	sqrt@q+2,w
  5324  03AD  00AC               	movwf	___ftsub@f2+2
  5325  03AE  0844               	movf	sqrt@x,w
  5326  03AF  00AD               	movwf	___ftsub@f1
  5327  03B0  0845               	movf	sqrt@x+1,w
  5328  03B1  00AE               	movwf	___ftsub@f1+1
  5329  03B2  0846               	movf	sqrt@x+2,w
  5330  03B3  00AF               	movwf	___ftsub@f1+2
  5331  03B4  318C  24E0  3182   	fcall	___ftsub
  5332  03B7  0020               	movlb	0	; select bank0
  5333  03B8  082A               	movf	?___ftsub,w
  5334  03B9  00C4               	movwf	sqrt@x
  5335  03BA  082B               	movf	?___ftsub+1,w
  5336  03BB  00C5               	movwf	sqrt@x+1
  5337  03BC  082C               	movf	?___ftsub+2,w
  5338  03BD  00C6               	movwf	sqrt@x+2
  5339  03BE  3001               	movlw	1
  5340  03BF  02C0               	subwf	sqrt@i,f
  5341  03C0  1D03               	btfss	3,2
  5342  03C1  2B4A               	goto	l1049
  5343  03C2  0834               	movf	sqrt@y,w
  5344  03C3  00A4               	movwf	___ftmul@f1
  5345  03C4  0835               	movf	sqrt@y+1,w
  5346  03C5  00A5               	movwf	___ftmul@f1+1
  5347  03C6  0836               	movf	sqrt@y+2,w
  5348  03C7  00A6               	movwf	___ftmul@f1+2
  5349  03C8  0844               	movf	sqrt@x,w
  5350  03C9  00A7               	movwf	___ftmul@f2
  5351  03CA  0845               	movf	sqrt@x+1,w
  5352  03CB  00A8               	movwf	___ftmul@f2+1
  5353  03CC  0846               	movf	sqrt@x+2,w
  5354  03CD  00A9               	movwf	___ftmul@f2+2
  5355  03CE  3184  2494         	fcall	___ftmul
  5356  03D0  0020               	movlb	0	; select bank0
  5357  03D1  0824               	movf	?___ftmul,w
  5358  03D2  00B4               	movwf	?_sqrt
  5359  03D3  0825               	movf	?___ftmul+1,w
  5360  03D4  00B5               	movwf	?_sqrt+1
  5361  03D5  0826               	movf	?___ftmul+2,w
  5362  03D6  00B6               	movwf	?_sqrt+2
  5363  03D7  0008               	return
  5364  03D8                     __end_of_sqrt:	
  5365                           
  5366                           	psect	text19
  5367  0CE0                     __ptext19:	
  5368 ;; *************** function ___ftsub *****************
  5369 ;; Defined at:
  5370 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftsub.c"
  5371 ;; Parameters:    Size  Location     Type
  5372 ;;  f2              3   10[BANK0 ] float 
  5373 ;;  f1              3   13[BANK0 ] float 
  5374 ;; Auto vars:     Size  Location     Type
  5375 ;;		None
  5376 ;; Return value:  Size  Location     Type
  5377 ;;                  3   10[BANK0 ] float 
  5378 ;; Registers used:
  5379 ;;		wreg, status,2, status,0, pclath, cstack
  5380 ;; Tracked objects:
  5381 ;;		On entry : 0/0
  5382 ;;		On exit  : 0/0
  5383 ;;		Unchanged: 0/0
  5384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5385 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5386 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5387 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5388 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5389 ;;Total ram usage:        6 bytes
  5390 ;; Hardware stack levels used:    1
  5391 ;; Hardware stack levels required when called:    4
  5392 ;; This function calls:
  5393 ;;		___ftadd
  5394 ;; This function is called by:
  5395 ;;		_sqrt
  5396 ;; This function uses a non-reentrant model
  5397 ;;
  5398                           
  5399                           
  5400                           ;psect for function ___ftsub
  5401  0CE0                     ___ftsub:	
  5402                           
  5403                           ;incstack = 0
  5404                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  5405  0CE0  0020               	movlb	0	; select bank0
  5406  0CE1  082C               	movf	___ftsub@f2+2,w
  5407  0CE2  042B               	iorwf	___ftsub@f2+1,w
  5408  0CE3  042A               	iorwf	___ftsub@f2,w
  5409  0CE4  1903               	skipnz
  5410  0CE5  2CE8               	goto	l3416
  5411  0CE6  3080               	movlw	128
  5412  0CE7  06AC               	xorwf	___ftsub@f2+2,f
  5413  0CE8                     l3416:	
  5414  0CE8  082D               	movf	___ftsub@f1,w
  5415  0CE9  00A0               	movwf	___ftadd@f1
  5416  0CEA  082E               	movf	___ftsub@f1+1,w
  5417  0CEB  00A1               	movwf	___ftadd@f1+1
  5418  0CEC  082F               	movf	___ftsub@f1+2,w
  5419  0CED  00A2               	movwf	___ftadd@f1+2
  5420  0CEE  082A               	movf	___ftsub@f2,w
  5421  0CEF  00A3               	movwf	___ftadd@f2
  5422  0CF0  082B               	movf	___ftsub@f2+1,w
  5423  0CF1  00A4               	movwf	___ftadd@f2+1
  5424  0CF2  082C               	movf	___ftsub@f2+2,w
  5425  0CF3  00A5               	movwf	___ftadd@f2+2
  5426  0CF4  3181  21F2         	fcall	___ftadd
  5427  0CF6  0020               	movlb	0	; select bank0
  5428  0CF7  0820               	movf	?___ftadd,w
  5429  0CF8  00AA               	movwf	?___ftsub
  5430  0CF9  0821               	movf	?___ftadd+1,w
  5431  0CFA  00AB               	movwf	?___ftsub+1
  5432  0CFB  0822               	movf	?___ftadd+2,w
  5433  0CFC  00AC               	movwf	?___ftsub+2
  5434  0CFD  0008               	return
  5435  0CFE                     __end_of___ftsub:	
  5436                           
  5437                           	psect	text20
  5438  01F2                     __ptext20:	
  5439 ;; *************** function ___ftadd *****************
  5440 ;; Defined at:
  5441 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftadd.c"
  5442 ;; Parameters:    Size  Location     Type
  5443 ;;  f1              3    0[BANK0 ] float 
  5444 ;;  f2              3    3[BANK0 ] float 
  5445 ;; Auto vars:     Size  Location     Type
  5446 ;;  exp1            1   11[COMMON] unsigned char 
  5447 ;;  exp2            1   10[COMMON] unsigned char 
  5448 ;;  sign            1    9[COMMON] unsigned char 
  5449 ;; Return value:  Size  Location     Type
  5450 ;;                  3    0[BANK0 ] float 
  5451 ;; Registers used:
  5452 ;;		wreg, status,2, status,0, pclath, cstack
  5453 ;; Tracked objects:
  5454 ;;		On entry : 0/0
  5455 ;;		On exit  : 0/0
  5456 ;;		Unchanged: 0/0
  5457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5458 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5459 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5460 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5461 ;;      Totals:         3      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5462 ;;Total ram usage:       13 bytes
  5463 ;; Hardware stack levels used:    1
  5464 ;; Hardware stack levels required when called:    3
  5465 ;; This function calls:
  5466 ;;		___ftpack
  5467 ;; This function is called by:
  5468 ;;		___ftsub
  5469 ;; This function uses a non-reentrant model
  5470 ;;
  5471                           
  5472                           
  5473                           ;psect for function ___ftadd
  5474  01F2                     ___ftadd:	
  5475                           
  5476                           ;incstack = 0
  5477                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  5478  01F2  0020               	movlb	0	; select bank0
  5479  01F3  0820               	movf	___ftadd@f1,w
  5480  01F4  00A6               	movwf	??___ftadd
  5481  01F5  0821               	movf	___ftadd@f1+1,w
  5482  01F6  00A7               	movwf	??___ftadd+1
  5483  01F7  0822               	movf	___ftadd@f1+2,w
  5484  01F8  00A8               	movwf	??___ftadd+2
  5485  01F9  1003               	clrc
  5486  01FA  0D27               	rlf	??___ftadd+1,w
  5487  01FB  0D28               	rlf	??___ftadd+2,w
  5488  01FC  00A9               	movwf	??___ftadd+3
  5489  01FD  0829               	movf	??___ftadd+3,w
  5490  01FE  00FB               	movwf	___ftadd@exp1
  5491  01FF  0823               	movf	___ftadd@f2,w
  5492  0200  00A6               	movwf	??___ftadd
  5493  0201  0824               	movf	___ftadd@f2+1,w
  5494  0202  00A7               	movwf	??___ftadd+1
  5495  0203  0825               	movf	___ftadd@f2+2,w
  5496  0204  00A8               	movwf	??___ftadd+2
  5497  0205  1003               	clrc
  5498  0206  0D27               	rlf	??___ftadd+1,w
  5499  0207  0D28               	rlf	??___ftadd+2,w
  5500  0208  00A9               	movwf	??___ftadd+3
  5501  0209  0829               	movf	??___ftadd+3,w
  5502  020A  00FA               	movwf	___ftadd@exp2
  5503  020B  087B               	movf	___ftadd@exp1,w
  5504  020C  1903               	btfsc	3,2
  5505  020D  2A1A               	goto	l3266
  5506  020E  087A               	movf	___ftadd@exp2,w
  5507  020F  027B               	subwf	___ftadd@exp1,w
  5508  0210  1803               	skipnc
  5509  0211  2A21               	goto	l3270
  5510  0212  037B               	decf	___ftadd@exp1,w
  5511  0213  3AFF               	xorlw	255
  5512  0214  077A               	addwf	___ftadd@exp2,w
  5513  0215  00A6               	movwf	??___ftadd
  5514  0216  3019               	movlw	25
  5515  0217  0226               	subwf	??___ftadd,w
  5516  0218  1C03               	skipc
  5517  0219  2A21               	goto	l3270
  5518  021A                     l3266:	
  5519  021A  0823               	movf	___ftadd@f2,w
  5520  021B  00A0               	movwf	?___ftadd
  5521  021C  0824               	movf	___ftadd@f2+1,w
  5522  021D  00A1               	movwf	?___ftadd+1
  5523  021E  0825               	movf	___ftadd@f2+2,w
  5524  021F  00A2               	movwf	?___ftadd+2
  5525  0220  0008               	return
  5526  0221                     l3270:	
  5527  0221  087A               	movf	___ftadd@exp2,w
  5528  0222  1903               	btfsc	3,2
  5529  0223  0008               	return
  5530  0224  087B               	movf	___ftadd@exp1,w
  5531  0225  027A               	subwf	___ftadd@exp2,w
  5532  0226  1803               	skipnc
  5533  0227  2A30               	goto	l3276
  5534  0228  037A               	decf	___ftadd@exp2,w
  5535  0229  3AFF               	xorlw	255
  5536  022A  077B               	addwf	___ftadd@exp1,w
  5537  022B  00A6               	movwf	??___ftadd
  5538  022C  3019               	movlw	25
  5539  022D  0226               	subwf	??___ftadd,w
  5540  022E  1803               	btfsc	3,0
  5541  022F  0008               	return
  5542  0230                     l3276:	
  5543  0230  3006               	movlw	6
  5544  0231  00A6               	movwf	??___ftadd
  5545  0232  0826               	movf	??___ftadd,w
  5546  0233  00F9               	movwf	___ftadd@sign
  5547  0234  1BA2               	btfsc	___ftadd@f1+2,7
  5548  0235  17F9               	bsf	___ftadd@sign,7
  5549  0236  1BA5               	btfsc	___ftadd@f2+2,7
  5550  0237  1779               	bsf	___ftadd@sign,6
  5551  0238  17A1               	bsf	___ftadd@f1+1,7
  5552  0239  30FF               	movlw	255
  5553  023A  05A0               	andwf	___ftadd@f1,f
  5554  023B  30FF               	movlw	255
  5555  023C  05A1               	andwf	___ftadd@f1+1,f
  5556  023D  3000               	movlw	0
  5557  023E  05A2               	andwf	___ftadd@f1+2,f
  5558  023F  17A4               	bsf	___ftadd@f2+1,7
  5559  0240  30FF               	movlw	255
  5560  0241  05A3               	andwf	___ftadd@f2,f
  5561  0242  30FF               	movlw	255
  5562  0243  05A4               	andwf	___ftadd@f2+1,f
  5563  0244  3000               	movlw	0
  5564  0245  05A5               	andwf	___ftadd@f2+2,f
  5565  0246  087A               	movf	___ftadd@exp2,w
  5566  0247  027B               	subwf	___ftadd@exp1,w
  5567  0248  1803               	skipnc
  5568  0249  2A6C               	goto	l3298
  5569  024A                     l3288:	
  5570  024A  3001               	movlw	1
  5571  024B                     u3255:	
  5572  024B  35A3               	lslf	___ftadd@f2,f
  5573  024C  0DA4               	rlf	___ftadd@f2+1,f
  5574  024D  0DA5               	rlf	___ftadd@f2+2,f
  5575  024E  0B89               	decfsz	9,f
  5576  024F  2A4B               	goto	u3255
  5577  0250  3001               	movlw	1
  5578  0251  02FA               	subwf	___ftadd@exp2,f
  5579  0252  087A               	movf	___ftadd@exp2,w
  5580  0253  067B               	xorwf	___ftadd@exp1,w
  5581  0254  1903               	skipnz
  5582  0255  2A67               	goto	l3296
  5583  0256  3001               	movlw	1
  5584  0257  02F9               	subwf	___ftadd@sign,f
  5585  0258  0879               	movf	___ftadd@sign,w
  5586  0259  3907               	andlw	7
  5587  025A  1903               	btfsc	3,2
  5588  025B  2A67               	goto	l3296
  5589  025C  2A4A               	goto	l3288
  5590  025D                     l3294:	
  5591  025D  3001               	movlw	1
  5592  025E                     u3285:	
  5593  025E  36A2               	lsrf	___ftadd@f1+2,f
  5594  025F  0CA1               	rrf	___ftadd@f1+1,f
  5595  0260  0CA0               	rrf	___ftadd@f1,f
  5596  0261  0B89               	decfsz	9,f
  5597  0262  2A5E               	goto	u3285
  5598  0263  3001               	movlw	1
  5599  0264  00A6               	movwf	??___ftadd
  5600  0265  0826               	movf	??___ftadd,w
  5601  0266  07FB               	addwf	___ftadd@exp1,f
  5602  0267                     l3296:	
  5603  0267  087B               	movf	___ftadd@exp1,w
  5604  0268  067A               	xorwf	___ftadd@exp2,w
  5605  0269  1903               	btfsc	3,2
  5606  026A  2A91               	goto	l879
  5607  026B  2A5D               	goto	l3294
  5608  026C                     l3298:	
  5609  026C  087B               	movf	___ftadd@exp1,w
  5610  026D  027A               	subwf	___ftadd@exp2,w
  5611  026E  1803               	skipnc
  5612  026F  2A91               	goto	l879
  5613  0270                     l3300:	
  5614  0270  3001               	movlw	1
  5615  0271                     u3315:	
  5616  0271  35A0               	lslf	___ftadd@f1,f
  5617  0272  0DA1               	rlf	___ftadd@f1+1,f
  5618  0273  0DA2               	rlf	___ftadd@f1+2,f
  5619  0274  0B89               	decfsz	9,f
  5620  0275  2A71               	goto	u3315
  5621  0276  3001               	movlw	1
  5622  0277  02FB               	subwf	___ftadd@exp1,f
  5623  0278  087A               	movf	___ftadd@exp2,w
  5624  0279  067B               	xorwf	___ftadd@exp1,w
  5625  027A  1903               	skipnz
  5626  027B  2A8D               	goto	l3308
  5627  027C  3001               	movlw	1
  5628  027D  02F9               	subwf	___ftadd@sign,f
  5629  027E  0879               	movf	___ftadd@sign,w
  5630  027F  3907               	andlw	7
  5631  0280  1903               	btfsc	3,2
  5632  0281  2A8D               	goto	l3308
  5633  0282  2A70               	goto	l3300
  5634  0283                     l3306:	
  5635  0283  3001               	movlw	1
  5636  0284                     u3345:	
  5637  0284  36A5               	lsrf	___ftadd@f2+2,f
  5638  0285  0CA4               	rrf	___ftadd@f2+1,f
  5639  0286  0CA3               	rrf	___ftadd@f2,f
  5640  0287  0B89               	decfsz	9,f
  5641  0288  2A84               	goto	u3345
  5642  0289  3001               	movlw	1
  5643  028A  00A6               	movwf	??___ftadd
  5644  028B  0826               	movf	??___ftadd,w
  5645  028C  07FA               	addwf	___ftadd@exp2,f
  5646  028D                     l3308:	
  5647  028D  087B               	movf	___ftadd@exp1,w
  5648  028E  067A               	xorwf	___ftadd@exp2,w
  5649  028F  1D03               	skipz
  5650  0290  2A83               	goto	l3306
  5651  0291                     l879:	
  5652  0291  1FF9               	btfss	___ftadd@sign,7
  5653  0292  2AA3               	goto	l3312
  5654  0293  30FF               	movlw	255
  5655  0294  06A0               	xorwf	___ftadd@f1,f
  5656  0295  30FF               	movlw	255
  5657  0296  06A1               	xorwf	___ftadd@f1+1,f
  5658  0297  30FF               	movlw	255
  5659  0298  06A2               	xorwf	___ftadd@f1+2,f
  5660  0299  3001               	movlw	1
  5661  029A  07A0               	addwf	___ftadd@f1,f
  5662  029B  3000               	movlw	0
  5663  029C  1803               	skipnc
  5664  029D  3001               	movlw	1
  5665  029E  07A1               	addwf	___ftadd@f1+1,f
  5666  029F  3000               	movlw	0
  5667  02A0  1803               	skipnc
  5668  02A1  3001               	movlw	1
  5669  02A2  07A2               	addwf	___ftadd@f1+2,f
  5670  02A3                     l3312:	
  5671  02A3  1F79               	btfss	___ftadd@sign,6
  5672  02A4  2AB5               	goto	l3316
  5673  02A5  30FF               	movlw	255
  5674  02A6  06A3               	xorwf	___ftadd@f2,f
  5675  02A7  30FF               	movlw	255
  5676  02A8  06A4               	xorwf	___ftadd@f2+1,f
  5677  02A9  30FF               	movlw	255
  5678  02AA  06A5               	xorwf	___ftadd@f2+2,f
  5679  02AB  3001               	movlw	1
  5680  02AC  07A3               	addwf	___ftadd@f2,f
  5681  02AD  3000               	movlw	0
  5682  02AE  1803               	skipnc
  5683  02AF  3001               	movlw	1
  5684  02B0  07A4               	addwf	___ftadd@f2+1,f
  5685  02B1  3000               	movlw	0
  5686  02B2  1803               	skipnc
  5687  02B3  3001               	movlw	1
  5688  02B4  07A5               	addwf	___ftadd@f2+2,f
  5689  02B5                     l3316:	
  5690  02B5  01F9               	clrf	___ftadd@sign
  5691  02B6  0820               	movf	___ftadd@f1,w
  5692  02B7  07A3               	addwf	___ftadd@f2,f
  5693  02B8  0821               	movf	___ftadd@f1+1,w
  5694  02B9  3DA4               	addwfc	___ftadd@f2+1,f
  5695  02BA  0822               	movf	___ftadd@f1+2,w
  5696  02BB  3DA5               	addwfc	___ftadd@f2+2,f
  5697  02BC  1FA5               	btfss	___ftadd@f2+2,7
  5698  02BD  2AD0               	goto	l3326
  5699  02BE  30FF               	movlw	255
  5700  02BF  06A3               	xorwf	___ftadd@f2,f
  5701  02C0  30FF               	movlw	255
  5702  02C1  06A4               	xorwf	___ftadd@f2+1,f
  5703  02C2  30FF               	movlw	255
  5704  02C3  06A5               	xorwf	___ftadd@f2+2,f
  5705  02C4  3001               	movlw	1
  5706  02C5  07A3               	addwf	___ftadd@f2,f
  5707  02C6  3000               	movlw	0
  5708  02C7  1803               	skipnc
  5709  02C8  3001               	movlw	1
  5710  02C9  07A4               	addwf	___ftadd@f2+1,f
  5711  02CA  3000               	movlw	0
  5712  02CB  1803               	skipnc
  5713  02CC  3001               	movlw	1
  5714  02CD  07A5               	addwf	___ftadd@f2+2,f
  5715  02CE  01F9               	clrf	___ftadd@sign
  5716  02CF  0AF9               	incf	___ftadd@sign,f
  5717  02D0                     l3326:	
  5718  02D0  0823               	movf	___ftadd@f2,w
  5719  02D1  00F1               	movwf	___ftpack@arg
  5720  02D2  0824               	movf	___ftadd@f2+1,w
  5721  02D3  00F2               	movwf	___ftpack@arg+1
  5722  02D4  0825               	movf	___ftadd@f2+2,w
  5723  02D5  00F3               	movwf	___ftpack@arg+2
  5724  02D6  087B               	movf	___ftadd@exp1,w
  5725  02D7  00A6               	movwf	??___ftadd
  5726  02D8  0826               	movf	??___ftadd,w
  5727  02D9  00F4               	movwf	___ftpack@exp
  5728  02DA  0879               	movf	___ftadd@sign,w
  5729  02DB  00A7               	movwf	??___ftadd+1
  5730  02DC  0827               	movf	??___ftadd+1,w
  5731  02DD  00F5               	movwf	___ftpack@sign
  5732  02DE  3186  26D2         	fcall	___ftpack
  5733  02E0  0871               	movf	?___ftpack,w
  5734  02E1  0020               	movlb	0	; select bank0
  5735  02E2  00A0               	movwf	?___ftadd
  5736  02E3  0872               	movf	?___ftpack+1,w
  5737  02E4  00A1               	movwf	?___ftadd+1
  5738  02E5  0873               	movf	?___ftpack+2,w
  5739  02E6  00A2               	movwf	?___ftadd+2
  5740  02E7  0008               	return
  5741  02E8                     __end_of___ftadd:	
  5742                           
  5743                           	psect	text21
  5744  0494                     __ptext21:	
  5745 ;; *************** function ___ftmul *****************
  5746 ;; Defined at:
  5747 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  5748 ;; Parameters:    Size  Location     Type
  5749 ;;  f1              3    4[BANK0 ] float 
  5750 ;;  f2              3    7[BANK0 ] float 
  5751 ;; Auto vars:     Size  Location     Type
  5752 ;;  f3_as_produc    3   15[BANK0 ] unsigned um
  5753 ;;  sign            1   19[BANK0 ] unsigned char 
  5754 ;;  cntr            1   18[BANK0 ] unsigned char 
  5755 ;;  exp             1   14[BANK0 ] unsigned char 
  5756 ;; Return value:  Size  Location     Type
  5757 ;;                  3    4[BANK0 ] float 
  5758 ;; Registers used:
  5759 ;;		wreg, status,2, status,0, pclath, cstack
  5760 ;; Tracked objects:
  5761 ;;		On entry : 0/0
  5762 ;;		On exit  : 0/0
  5763 ;;		Unchanged: 0/0
  5764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5765 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5766 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5767 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5768 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5769 ;;Total ram usage:       16 bytes
  5770 ;; Hardware stack levels used:    1
  5771 ;; Hardware stack levels required when called:    3
  5772 ;; This function calls:
  5773 ;;		___ftpack
  5774 ;; This function is called by:
  5775 ;;		_ADCConv
  5776 ;;		_sqrt
  5777 ;; This function uses a non-reentrant model
  5778 ;;
  5779                           
  5780                           
  5781                           ;psect for function ___ftmul
  5782  0494                     ___ftmul:	
  5783                           
  5784                           ;incstack = 0
  5785                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  5786  0494  0020               	movlb	0	; select bank0
  5787  0495  0824               	movf	___ftmul@f1,w
  5788  0496  00AA               	movwf	??___ftmul
  5789  0497  0825               	movf	___ftmul@f1+1,w
  5790  0498  00AB               	movwf	??___ftmul+1
  5791  0499  0826               	movf	___ftmul@f1+2,w
  5792  049A  00AC               	movwf	??___ftmul+2
  5793  049B  1003               	clrc
  5794  049C  0D2B               	rlf	??___ftmul+1,w
  5795  049D  0D2C               	rlf	??___ftmul+2,w
  5796  049E  00AD               	movwf	??___ftmul+3
  5797  049F  082D               	movf	??___ftmul+3,w
  5798  04A0  00AE               	movwf	___ftmul@exp
  5799  04A1  082E               	movf	___ftmul@exp,w
  5800  04A2  1D03               	btfss	3,2
  5801  04A3  2CAB               	goto	l3368
  5802  04A4  3000               	movlw	0
  5803  04A5  00A4               	movwf	?___ftmul
  5804  04A6  3000               	movlw	0
  5805  04A7  00A5               	movwf	?___ftmul+1
  5806  04A8  3000               	movlw	0
  5807  04A9  00A6               	movwf	?___ftmul+2
  5808  04AA  0008               	return
  5809  04AB                     l3368:	
  5810  04AB  0827               	movf	___ftmul@f2,w
  5811  04AC  00AA               	movwf	??___ftmul
  5812  04AD  0828               	movf	___ftmul@f2+1,w
  5813  04AE  00AB               	movwf	??___ftmul+1
  5814  04AF  0829               	movf	___ftmul@f2+2,w
  5815  04B0  00AC               	movwf	??___ftmul+2
  5816  04B1  1003               	clrc
  5817  04B2  0D2B               	rlf	??___ftmul+1,w
  5818  04B3  0D2C               	rlf	??___ftmul+2,w
  5819  04B4  00AD               	movwf	??___ftmul+3
  5820  04B5  082D               	movf	??___ftmul+3,w
  5821  04B6  00B3               	movwf	___ftmul@sign
  5822  04B7  0833               	movf	___ftmul@sign,w
  5823  04B8  1D03               	btfss	3,2
  5824  04B9  2CC1               	goto	l3374
  5825  04BA  3000               	movlw	0
  5826  04BB  00A4               	movwf	?___ftmul
  5827  04BC  3000               	movlw	0
  5828  04BD  00A5               	movwf	?___ftmul+1
  5829  04BE  3000               	movlw	0
  5830  04BF  00A6               	movwf	?___ftmul+2
  5831  04C0  0008               	return
  5832  04C1                     l3374:	
  5833  04C1  0833               	movf	___ftmul@sign,w
  5834  04C2  3E7B               	addlw	123
  5835  04C3  00AA               	movwf	??___ftmul
  5836  04C4  082A               	movf	??___ftmul,w
  5837  04C5  07AE               	addwf	___ftmul@exp,f
  5838  04C6  0824               	movf	___ftmul@f1,w
  5839  04C7  00AA               	movwf	??___ftmul
  5840  04C8  0825               	movf	___ftmul@f1+1,w
  5841  04C9  00AB               	movwf	??___ftmul+1
  5842  04CA  0826               	movf	___ftmul@f1+2,w
  5843  04CB  00AC               	movwf	??___ftmul+2
  5844  04CC  3010               	movlw	16
  5845  04CD                     u3425:	
  5846  04CD  36AC               	lsrf	??___ftmul+2,f
  5847  04CE  0CAB               	rrf	??___ftmul+1,f
  5848  04CF  0CAA               	rrf	??___ftmul,f
  5849  04D0  0B89               	decfsz	9,f
  5850  04D1  2CCD               	goto	u3425
  5851  04D2  082A               	movf	??___ftmul,w
  5852  04D3  00AD               	movwf	??___ftmul+3
  5853  04D4  082D               	movf	??___ftmul+3,w
  5854  04D5  00B3               	movwf	___ftmul@sign
  5855  04D6  0827               	movf	___ftmul@f2,w
  5856  04D7  00AA               	movwf	??___ftmul
  5857  04D8  0828               	movf	___ftmul@f2+1,w
  5858  04D9  00AB               	movwf	??___ftmul+1
  5859  04DA  0829               	movf	___ftmul@f2+2,w
  5860  04DB  00AC               	movwf	??___ftmul+2
  5861  04DC  3010               	movlw	16
  5862  04DD                     u3435:	
  5863  04DD  36AC               	lsrf	??___ftmul+2,f
  5864  04DE  0CAB               	rrf	??___ftmul+1,f
  5865  04DF  0CAA               	rrf	??___ftmul,f
  5866  04E0  0B89               	decfsz	9,f
  5867  04E1  2CDD               	goto	u3435
  5868  04E2  082A               	movf	??___ftmul,w
  5869  04E3  00AD               	movwf	??___ftmul+3
  5870  04E4  082D               	movf	??___ftmul+3,w
  5871  04E5  06B3               	xorwf	___ftmul@sign,f
  5872  04E6  3080               	movlw	128
  5873  04E7  00AA               	movwf	??___ftmul
  5874  04E8  082A               	movf	??___ftmul,w
  5875  04E9  05B3               	andwf	___ftmul@sign,f
  5876  04EA  17A5               	bsf	___ftmul@f1+1,7
  5877  04EB  17A8               	bsf	___ftmul@f2+1,7
  5878  04EC  30FF               	movlw	255
  5879  04ED  05A7               	andwf	___ftmul@f2,f
  5880  04EE  30FF               	movlw	255
  5881  04EF  05A8               	andwf	___ftmul@f2+1,f
  5882  04F0  3000               	movlw	0
  5883  04F1  05A9               	andwf	___ftmul@f2+2,f
  5884  04F2  3000               	movlw	0
  5885  04F3  00AF               	movwf	___ftmul@f3_as_product
  5886  04F4  3000               	movlw	0
  5887  04F5  00B0               	movwf	___ftmul@f3_as_product+1
  5888  04F6  3000               	movlw	0
  5889  04F7  00B1               	movwf	___ftmul@f3_as_product+2
  5890  04F8  3007               	movlw	7
  5891  04F9  00AA               	movwf	??___ftmul
  5892  04FA  082A               	movf	??___ftmul,w
  5893  04FB  00B2               	movwf	___ftmul@cntr
  5894  04FC                     l3386:	
  5895  04FC  1C24               	btfss	___ftmul@f1,0
  5896  04FD  2D04               	goto	l3390
  5897  04FE  0827               	movf	___ftmul@f2,w
  5898  04FF  07AF               	addwf	___ftmul@f3_as_product,f
  5899  0500  0828               	movf	___ftmul@f2+1,w
  5900  0501  3DB0               	addwfc	___ftmul@f3_as_product+1,f
  5901  0502  0829               	movf	___ftmul@f2+2,w
  5902  0503  3DB1               	addwfc	___ftmul@f3_as_product+2,f
  5903  0504                     l3390:	
  5904  0504  3001               	movlw	1
  5905  0505                     u3455:	
  5906  0505  36A6               	lsrf	___ftmul@f1+2,f
  5907  0506  0CA5               	rrf	___ftmul@f1+1,f
  5908  0507  0CA4               	rrf	___ftmul@f1,f
  5909  0508  0B89               	decfsz	9,f
  5910  0509  2D05               	goto	u3455
  5911  050A  3001               	movlw	1
  5912  050B                     u3465:	
  5913  050B  35A7               	lslf	___ftmul@f2,f
  5914  050C  0DA8               	rlf	___ftmul@f2+1,f
  5915  050D  0DA9               	rlf	___ftmul@f2+2,f
  5916  050E  0B89               	decfsz	9,f
  5917  050F  2D0B               	goto	u3465
  5918  0510  3001               	movlw	1
  5919  0511  02B2               	subwf	___ftmul@cntr,f
  5920  0512  1D03               	btfss	3,2
  5921  0513  2CFC               	goto	l3386
  5922  0514  3009               	movlw	9
  5923  0515  00AA               	movwf	??___ftmul
  5924  0516  082A               	movf	??___ftmul,w
  5925  0517  00B2               	movwf	___ftmul@cntr
  5926  0518                     l3398:	
  5927  0518  1C24               	btfss	___ftmul@f1,0
  5928  0519  2D20               	goto	l3402
  5929  051A  0827               	movf	___ftmul@f2,w
  5930  051B  07AF               	addwf	___ftmul@f3_as_product,f
  5931  051C  0828               	movf	___ftmul@f2+1,w
  5932  051D  3DB0               	addwfc	___ftmul@f3_as_product+1,f
  5933  051E  0829               	movf	___ftmul@f2+2,w
  5934  051F  3DB1               	addwfc	___ftmul@f3_as_product+2,f
  5935  0520                     l3402:	
  5936  0520  3001               	movlw	1
  5937  0521                     u3495:	
  5938  0521  36A6               	lsrf	___ftmul@f1+2,f
  5939  0522  0CA5               	rrf	___ftmul@f1+1,f
  5940  0523  0CA4               	rrf	___ftmul@f1,f
  5941  0524  0B89               	decfsz	9,f
  5942  0525  2D21               	goto	u3495
  5943  0526  3001               	movlw	1
  5944  0527                     u3505:	
  5945  0527  36B1               	lsrf	___ftmul@f3_as_product+2,f
  5946  0528  0CB0               	rrf	___ftmul@f3_as_product+1,f
  5947  0529  0CAF               	rrf	___ftmul@f3_as_product,f
  5948  052A  0B89               	decfsz	9,f
  5949  052B  2D27               	goto	u3505
  5950  052C  3001               	movlw	1
  5951  052D  02B2               	subwf	___ftmul@cntr,f
  5952  052E  1D03               	btfss	3,2
  5953  052F  2D18               	goto	l3398
  5954  0530  082F               	movf	___ftmul@f3_as_product,w
  5955  0531  00F1               	movwf	___ftpack@arg
  5956  0532  0830               	movf	___ftmul@f3_as_product+1,w
  5957  0533  00F2               	movwf	___ftpack@arg+1
  5958  0534  0831               	movf	___ftmul@f3_as_product+2,w
  5959  0535  00F3               	movwf	___ftpack@arg+2
  5960  0536  082E               	movf	___ftmul@exp,w
  5961  0537  00AA               	movwf	??___ftmul
  5962  0538  082A               	movf	??___ftmul,w
  5963  0539  00F4               	movwf	___ftpack@exp
  5964  053A  0833               	movf	___ftmul@sign,w
  5965  053B  00AB               	movwf	??___ftmul+1
  5966  053C  082B               	movf	??___ftmul+1,w
  5967  053D  00F5               	movwf	___ftpack@sign
  5968  053E  3186  26D2         	fcall	___ftpack
  5969  0540  0871               	movf	?___ftpack,w
  5970  0541  0020               	movlb	0	; select bank0
  5971  0542  00A4               	movwf	?___ftmul
  5972  0543  0872               	movf	?___ftpack+1,w
  5973  0544  00A5               	movwf	?___ftmul+1
  5974  0545  0873               	movf	?___ftpack+2,w
  5975  0546  00A6               	movwf	?___ftmul+2
  5976  0547  0008               	return
  5977  0548                     __end_of___ftmul:	
  5978                           
  5979                           	psect	text22
  5980  0F76                     __ptext22:	
  5981 ;; *************** function ___ftge *****************
  5982 ;; Defined at:
  5983 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
  5984 ;; Parameters:    Size  Location     Type
  5985 ;;  ff1             3    1[COMMON] float 
  5986 ;;  ff2             3    4[COMMON] float 
  5987 ;; Auto vars:     Size  Location     Type
  5988 ;;		None
  5989 ;; Return value:  Size  Location     Type
  5990 ;;		None               void
  5991 ;; Registers used:
  5992 ;;		wreg, status,2, status,0
  5993 ;; Tracked objects:
  5994 ;;		On entry : 0/0
  5995 ;;		On exit  : 0/0
  5996 ;;		Unchanged: 0/0
  5997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5998 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6000 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6001 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6002 ;;Total ram usage:        9 bytes
  6003 ;; Hardware stack levels used:    1
  6004 ;; Hardware stack levels required when called:    2
  6005 ;; This function calls:
  6006 ;;		Nothing
  6007 ;; This function is called by:
  6008 ;;		_sqrt
  6009 ;; This function uses a non-reentrant model
  6010 ;;
  6011                           
  6012                           
  6013                           ;psect for function ___ftge
  6014  0F76                     ___ftge:	
  6015                           
  6016                           ;incstack = 0
  6017                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  6018  0F76  1FF3               	btfss	___ftge@ff1+2,7
  6019  0F77  2F8C               	goto	l2310
  6020  0F78  0971               	comf	___ftge@ff1,w
  6021  0F79  00F7               	movwf	??___ftge
  6022  0F7A  0972               	comf	___ftge@ff1+1,w
  6023  0F7B  00F8               	movwf	??___ftge+1
  6024  0F7C  0973               	comf	___ftge@ff1+2,w
  6025  0F7D  00F9               	movwf	??___ftge+2
  6026  0F7E  0AF7               	incf	??___ftge,f
  6027  0F7F  1903               	skipnz
  6028  0F80  0AF8               	incf	??___ftge+1,f
  6029  0F81  1903               	skipnz
  6030  0F82  0AF9               	incf	??___ftge+2,f
  6031  0F83  3000               	movlw	0
  6032  0F84  0777               	addwf	??___ftge,w
  6033  0F85  00F1               	movwf	___ftge@ff1
  6034  0F86  3000               	movlw	0
  6035  0F87  3D78               	addwfc	??___ftge+1,w
  6036  0F88  00F2               	movwf	___ftge@ff1+1
  6037  0F89  3080               	movlw	128
  6038  0F8A  3D79               	addwfc	??___ftge+2,w
  6039  0F8B  00F3               	movwf	___ftge@ff1+2
  6040  0F8C                     l2310:	
  6041  0F8C  1FF6               	btfss	___ftge@ff2+2,7
  6042  0F8D  2FA2               	goto	l2314
  6043  0F8E  0974               	comf	___ftge@ff2,w
  6044  0F8F  00F7               	movwf	??___ftge
  6045  0F90  0975               	comf	___ftge@ff2+1,w
  6046  0F91  00F8               	movwf	??___ftge+1
  6047  0F92  0976               	comf	___ftge@ff2+2,w
  6048  0F93  00F9               	movwf	??___ftge+2
  6049  0F94  0AF7               	incf	??___ftge,f
  6050  0F95  1903               	skipnz
  6051  0F96  0AF8               	incf	??___ftge+1,f
  6052  0F97  1903               	skipnz
  6053  0F98  0AF9               	incf	??___ftge+2,f
  6054  0F99  3000               	movlw	0
  6055  0F9A  0777               	addwf	??___ftge,w
  6056  0F9B  00F4               	movwf	___ftge@ff2
  6057  0F9C  3000               	movlw	0
  6058  0F9D  3D78               	addwfc	??___ftge+1,w
  6059  0F9E  00F5               	movwf	___ftge@ff2+1
  6060  0F9F  3080               	movlw	128
  6061  0FA0  3D79               	addwfc	??___ftge+2,w
  6062  0FA1  00F6               	movwf	___ftge@ff2+2
  6063  0FA2                     l2314:	
  6064  0FA2  3080               	movlw	128
  6065  0FA3  06F3               	xorwf	___ftge@ff1+2,f
  6066  0FA4  3080               	movlw	128
  6067  0FA5  06F6               	xorwf	___ftge@ff2+2,f
  6068  0FA6  0876               	movf	___ftge@ff2+2,w
  6069  0FA7  0273               	subwf	___ftge@ff1+2,w
  6070  0FA8  1D03               	skipz
  6071  0FA9  0008               	return
  6072  0FAA  0875               	movf	___ftge@ff2+1,w
  6073  0FAB  0272               	subwf	___ftge@ff1+1,w
  6074  0FAC  1D03               	skipz
  6075  0FAD  0008               	return
  6076  0FAE  0874               	movf	___ftge@ff2,w
  6077  0FAF  0271               	subwf	___ftge@ff1,w
  6078  0FB0  0008               	return
  6079  0FB1                     __end_of___ftge:	
  6080                           
  6081                           	psect	text23
  6082  0C32                     __ptext23:	
  6083 ;; *************** function ___wmul *****************
  6084 ;; Defined at:
  6085 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  6086 ;; Parameters:    Size  Location     Type
  6087 ;;  multiplier      2    1[COMMON] unsigned int 
  6088 ;;  multiplicand    2    3[COMMON] unsigned int 
  6089 ;; Auto vars:     Size  Location     Type
  6090 ;;  product         2    5[COMMON] unsigned int 
  6091 ;; Return value:  Size  Location     Type
  6092 ;;                  2    1[COMMON] unsigned int 
  6093 ;; Registers used:
  6094 ;;		wreg, status,2, status,0
  6095 ;; Tracked objects:
  6096 ;;		On entry : 0/0
  6097 ;;		On exit  : 0/0
  6098 ;;		Unchanged: 0/0
  6099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6100 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6101 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6102 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6103 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6104 ;;Total ram usage:        6 bytes
  6105 ;; Hardware stack levels used:    1
  6106 ;; Hardware stack levels required when called:    2
  6107 ;; This function calls:
  6108 ;;		Nothing
  6109 ;; This function is called by:
  6110 ;;		_ADCConv
  6111 ;; This function uses a non-reentrant model
  6112 ;;
  6113                           
  6114                           
  6115                           ;psect for function ___wmul
  6116  0C32                     ___wmul:	
  6117                           
  6118                           ;incstack = 0
  6119                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6120  0C32  01F5               	clrf	___wmul@product
  6121  0C33  01F6               	clrf	___wmul@product+1
  6122  0C34                     l2434:	
  6123  0C34  1C71               	btfss	___wmul@multiplier,0
  6124  0C35  2C3A               	goto	l687
  6125  0C36  0873               	movf	___wmul@multiplicand,w
  6126  0C37  07F5               	addwf	___wmul@product,f
  6127  0C38  0874               	movf	___wmul@multiplicand+1,w
  6128  0C39  3DF6               	addwfc	___wmul@product+1,f
  6129  0C3A                     l687:	
  6130  0C3A  3001               	movlw	1
  6131  0C3B                     u2155:	
  6132  0C3B  35F3               	lslf	___wmul@multiplicand,f
  6133  0C3C  0DF4               	rlf	___wmul@multiplicand+1,f
  6134  0C3D  0B89               	decfsz	9,f
  6135  0C3E  2C3B               	goto	u2155
  6136  0C3F  3001               	movlw	1
  6137  0C40                     u2165:	
  6138  0C40  36F2               	lsrf	___wmul@multiplier+1,f
  6139  0C41  0CF1               	rrf	___wmul@multiplier,f
  6140  0C42  0B89               	decfsz	9,f
  6141  0C43  2C40               	goto	u2165
  6142  0C44  0871               	movf	___wmul@multiplier,w
  6143  0C45  0472               	iorwf	___wmul@multiplier+1,w
  6144  0C46  1D03               	btfss	3,2
  6145  0C47  2C34               	goto	l2434
  6146  0C48  0876               	movf	___wmul@product+1,w
  6147  0C49  00F2               	movwf	?___wmul+1
  6148  0C4A  0875               	movf	___wmul@product,w
  6149  0C4B  00F1               	movwf	?___wmul
  6150  0C4C  0008               	return
  6151  0C4D                     __end_of___wmul:	
  6152                           
  6153                           	psect	text24
  6154  0BA6                     __ptext24:	
  6155 ;; *************** function ___lwtoft *****************
  6156 ;; Defined at:
  6157 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwtoft.c"
  6158 ;; Parameters:    Size  Location     Type
  6159 ;;  c               2    9[COMMON] unsigned int 
  6160 ;; Auto vars:     Size  Location     Type
  6161 ;;		None
  6162 ;; Return value:  Size  Location     Type
  6163 ;;                  3    9[COMMON] float 
  6164 ;; Registers used:
  6165 ;;		wreg, status,2, status,0, pclath, cstack
  6166 ;; Tracked objects:
  6167 ;;		On entry : 0/0
  6168 ;;		On exit  : 0/0
  6169 ;;		Unchanged: 0/0
  6170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6171 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6172 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6173 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6174 ;;      Totals:         3       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6175 ;;Total ram usage:        4 bytes
  6176 ;; Hardware stack levels used:    1
  6177 ;; Hardware stack levels required when called:    3
  6178 ;; This function calls:
  6179 ;;		___ftpack
  6180 ;; This function is called by:
  6181 ;;		_ADCConv
  6182 ;; This function uses a non-reentrant model
  6183 ;;
  6184                           
  6185                           
  6186                           ;psect for function ___lwtoft
  6187  0BA6                     ___lwtoft:	
  6188                           
  6189                           ;incstack = 0
  6190                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  6191  0BA6  0879               	movf	___lwtoft@c,w
  6192  0BA7  00F1               	movwf	___ftpack@arg
  6193  0BA8  087A               	movf	___lwtoft@c+1,w
  6194  0BA9  00F2               	movwf	___ftpack@arg+1
  6195  0BAA  01F3               	clrf	___ftpack@arg+2
  6196  0BAB  308E               	movlw	142
  6197  0BAC  0020               	movlb	0	; select bank0
  6198  0BAD  00A0               	movwf	??___lwtoft
  6199  0BAE  0820               	movf	??___lwtoft,w
  6200  0BAF  00F4               	movwf	___ftpack@exp
  6201  0BB0  01F5               	clrf	___ftpack@sign
  6202  0BB1  3186  26D2         	fcall	___ftpack
  6203  0BB3  0871               	movf	?___ftpack,w
  6204  0BB4  00F9               	movwf	?___lwtoft
  6205  0BB5  0872               	movf	?___ftpack+1,w
  6206  0BB6  00FA               	movwf	?___lwtoft+1
  6207  0BB7  0873               	movf	?___ftpack+2,w
  6208  0BB8  00FB               	movwf	?___lwtoft+2
  6209  0BB9  0008               	return
  6210  0BBA                     __end_of___lwtoft:	
  6211                           
  6212                           	psect	text25
  6213  0ED4                     __ptext25:	
  6214 ;; *************** function ___lwdiv *****************
  6215 ;; Defined at:
  6216 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  6217 ;; Parameters:    Size  Location     Type
  6218 ;;  divisor         2    1[COMMON] unsigned int 
  6219 ;;  dividend        2    3[COMMON] unsigned int 
  6220 ;; Auto vars:     Size  Location     Type
  6221 ;;  quotient        2    6[COMMON] unsigned int 
  6222 ;;  counter         1    8[COMMON] unsigned char 
  6223 ;; Return value:  Size  Location     Type
  6224 ;;                  2    1[COMMON] unsigned int 
  6225 ;; Registers used:
  6226 ;;		wreg, status,2, status,0
  6227 ;; Tracked objects:
  6228 ;;		On entry : 0/0
  6229 ;;		On exit  : 0/0
  6230 ;;		Unchanged: 0/0
  6231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6232 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6233 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6234 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6235 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6236 ;;Total ram usage:        8 bytes
  6237 ;; Hardware stack levels used:    1
  6238 ;; Hardware stack levels required when called:    2
  6239 ;; This function calls:
  6240 ;;		Nothing
  6241 ;; This function is called by:
  6242 ;;		_ADCConv
  6243 ;; This function uses a non-reentrant model
  6244 ;;
  6245                           
  6246                           
  6247                           ;psect for function ___lwdiv
  6248  0ED4                     ___lwdiv:	
  6249                           
  6250                           ;incstack = 0
  6251                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6252  0ED4  01F6               	clrf	___lwdiv@quotient
  6253  0ED5  01F7               	clrf	___lwdiv@quotient+1
  6254  0ED6  0871               	movf	___lwdiv@divisor,w
  6255  0ED7  0472               	iorwf	___lwdiv@divisor+1,w
  6256  0ED8  1903               	btfsc	3,2
  6257  0ED9  2F03               	goto	l2520
  6258  0EDA  01F8               	clrf	___lwdiv@counter
  6259  0EDB  0AF8               	incf	___lwdiv@counter,f
  6260  0EDC                     l2508:	
  6261  0EDC  1BF2               	btfsc	___lwdiv@divisor+1,7
  6262  0EDD  2EE8               	goto	l2510
  6263  0EDE  3001               	movlw	1
  6264  0EDF                     u2295:	
  6265  0EDF  35F1               	lslf	___lwdiv@divisor,f
  6266  0EE0  0DF2               	rlf	___lwdiv@divisor+1,f
  6267  0EE1  0B89               	decfsz	9,f
  6268  0EE2  2EDF               	goto	u2295
  6269  0EE3  3001               	movlw	1
  6270  0EE4  00F5               	movwf	??___lwdiv
  6271  0EE5  0875               	movf	??___lwdiv,w
  6272  0EE6  07F8               	addwf	___lwdiv@counter,f
  6273  0EE7  2EDC               	goto	l2508
  6274  0EE8                     l2510:	
  6275  0EE8  3001               	movlw	1
  6276  0EE9                     u2315:	
  6277  0EE9  35F6               	lslf	___lwdiv@quotient,f
  6278  0EEA  0DF7               	rlf	___lwdiv@quotient+1,f
  6279  0EEB  0B89               	decfsz	9,f
  6280  0EEC  2EE9               	goto	u2315
  6281  0EED  0872               	movf	___lwdiv@divisor+1,w
  6282  0EEE  0274               	subwf	___lwdiv@dividend+1,w
  6283  0EEF  1D03               	skipz
  6284  0EF0  2EF3               	goto	u2325
  6285  0EF1  0871               	movf	___lwdiv@divisor,w
  6286  0EF2  0273               	subwf	___lwdiv@dividend,w
  6287  0EF3                     u2325:	
  6288  0EF3  1C03               	skipc
  6289  0EF4  2EFA               	goto	l2516
  6290  0EF5  0871               	movf	___lwdiv@divisor,w
  6291  0EF6  02F3               	subwf	___lwdiv@dividend,f
  6292  0EF7  0872               	movf	___lwdiv@divisor+1,w
  6293  0EF8  3BF4               	subwfb	___lwdiv@dividend+1,f
  6294  0EF9  1476               	bsf	___lwdiv@quotient,0
  6295  0EFA                     l2516:	
  6296  0EFA  3001               	movlw	1
  6297  0EFB                     u2335:	
  6298  0EFB  36F2               	lsrf	___lwdiv@divisor+1,f
  6299  0EFC  0CF1               	rrf	___lwdiv@divisor,f
  6300  0EFD  0B89               	decfsz	9,f
  6301  0EFE  2EFB               	goto	u2335
  6302  0EFF  3001               	movlw	1
  6303  0F00  02F8               	subwf	___lwdiv@counter,f
  6304  0F01  1D03               	btfss	3,2
  6305  0F02  2EE8               	goto	l2510
  6306  0F03                     l2520:	
  6307  0F03  0877               	movf	___lwdiv@quotient+1,w
  6308  0F04  00F2               	movwf	?___lwdiv+1
  6309  0F05  0876               	movf	___lwdiv@quotient,w
  6310  0F06  00F1               	movwf	?___lwdiv
  6311  0F07  0008               	return
  6312  0F08                     __end_of___lwdiv:	
  6313                           
  6314                           	psect	text26
  6315  0E4A                     __ptext26:	
  6316 ;; *************** function ___lltoft *****************
  6317 ;; Defined at:
  6318 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lltoft.c"
  6319 ;; Parameters:    Size  Location     Type
  6320 ;;  c               4    0[BANK0 ] unsigned long 
  6321 ;; Auto vars:     Size  Location     Type
  6322 ;;  exp             1   10[COMMON] unsigned char 
  6323 ;; Return value:  Size  Location     Type
  6324 ;;                  3    0[BANK0 ] float 
  6325 ;; Registers used:
  6326 ;;		wreg, status,2, status,0, pclath, cstack
  6327 ;; Tracked objects:
  6328 ;;		On entry : 0/0
  6329 ;;		On exit  : 0/0
  6330 ;;		Unchanged: 0/0
  6331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6332 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6333 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6334 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6335 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6336 ;;Total ram usage:        6 bytes
  6337 ;; Hardware stack levels used:    1
  6338 ;; Hardware stack levels required when called:    3
  6339 ;; This function calls:
  6340 ;;		___ftpack
  6341 ;; This function is called by:
  6342 ;;		_ADCConv
  6343 ;; This function uses a non-reentrant model
  6344 ;;
  6345                           
  6346                           
  6347                           ;psect for function ___lltoft
  6348  0E4A                     ___lltoft:	
  6349                           
  6350                           ;incstack = 0
  6351                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  6352  0E4A  308E               	movlw	142
  6353  0E4B  00F9               	movwf	??___lltoft
  6354  0E4C  0879               	movf	??___lltoft,w
  6355  0E4D  00FA               	movwf	___lltoft@exp
  6356  0E4E                     l3514:	
  6357  0E4E  30FF               	movlw	255
  6358  0E4F  0020               	movlb	0	; select bank0
  6359  0E50  0523               	andwf	___lltoft@c+3,w
  6360  0E51  1903               	btfsc	3,2
  6361  0E52  2E60               	goto	l3516
  6362  0E53  3001               	movlw	1
  6363  0E54                     u3685:	
  6364  0E54  0020               	movlb	0	; select bank0
  6365  0E55  36A3               	lsrf	___lltoft@c+3,f
  6366  0E56  0CA2               	rrf	___lltoft@c+2,f
  6367  0E57  0CA1               	rrf	___lltoft@c+1,f
  6368  0E58  0CA0               	rrf	___lltoft@c,f
  6369  0E59  0B89               	decfsz	9,f
  6370  0E5A  2E54               	goto	u3685
  6371  0E5B  3001               	movlw	1
  6372  0E5C  00F9               	movwf	??___lltoft
  6373  0E5D  0879               	movf	??___lltoft,w
  6374  0E5E  07FA               	addwf	___lltoft@exp,f
  6375  0E5F  2E4E               	goto	l3514
  6376  0E60                     l3516:	
  6377  0E60  0820               	movf	___lltoft@c,w
  6378  0E61  00F1               	movwf	___ftpack@arg
  6379  0E62  0821               	movf	___lltoft@c+1,w
  6380  0E63  00F2               	movwf	___ftpack@arg+1
  6381  0E64  0822               	movf	___lltoft@c+2,w
  6382  0E65  00F3               	movwf	___ftpack@arg+2
  6383  0E66  087A               	movf	___lltoft@exp,w
  6384  0E67  00F9               	movwf	??___lltoft
  6385  0E68  0879               	movf	??___lltoft,w
  6386  0E69  00F4               	movwf	___ftpack@exp
  6387  0E6A  01F5               	clrf	___ftpack@sign
  6388  0E6B  3186  26D2         	fcall	___ftpack
  6389  0E6D  0871               	movf	?___ftpack,w
  6390  0E6E  0020               	movlb	0	; select bank0
  6391  0E6F  00A0               	movwf	?___lltoft
  6392  0E70  0872               	movf	?___ftpack+1,w
  6393  0E71  00A1               	movwf	?___lltoft+1
  6394  0E72  0873               	movf	?___ftpack+2,w
  6395  0E73  00A2               	movwf	?___lltoft+2
  6396  0E74  0008               	return
  6397  0E75                     __end_of___lltoft:	
  6398                           
  6399                           	psect	text27
  6400  0548                     __ptext27:	
  6401 ;; *************** function ___ftdiv *****************
  6402 ;; Defined at:
  6403 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  6404 ;; Parameters:    Size  Location     Type
  6405 ;;  f2              3   20[BANK0 ] float 
  6406 ;;  f1              3   23[BANK0 ] float 
  6407 ;; Auto vars:     Size  Location     Type
  6408 ;;  f3              3   31[BANK0 ] float 
  6409 ;;  sign            1   35[BANK0 ] unsigned char 
  6410 ;;  exp             1   34[BANK0 ] unsigned char 
  6411 ;;  cntr            1   30[BANK0 ] unsigned char 
  6412 ;; Return value:  Size  Location     Type
  6413 ;;                  3   20[BANK0 ] float 
  6414 ;; Registers used:
  6415 ;;		wreg, status,2, status,0, pclath, cstack
  6416 ;; Tracked objects:
  6417 ;;		On entry : 0/0
  6418 ;;		On exit  : 0/0
  6419 ;;		Unchanged: 0/0
  6420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6421 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6422 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6423 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6424 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6425 ;;Total ram usage:       16 bytes
  6426 ;; Hardware stack levels used:    1
  6427 ;; Hardware stack levels required when called:    3
  6428 ;; This function calls:
  6429 ;;		___ftpack
  6430 ;; This function is called by:
  6431 ;;		_ADCConv
  6432 ;; This function uses a non-reentrant model
  6433 ;;
  6434                           
  6435                           
  6436                           ;psect for function ___ftdiv
  6437  0548                     ___ftdiv:	
  6438                           
  6439                           ;incstack = 0
  6440                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  6441  0548  0020               	movlb	0	; select bank0
  6442  0549  0837               	movf	___ftdiv@f1,w
  6443  054A  00BA               	movwf	??___ftdiv
  6444  054B  0838               	movf	___ftdiv@f1+1,w
  6445  054C  00BB               	movwf	??___ftdiv+1
  6446  054D  0839               	movf	___ftdiv@f1+2,w
  6447  054E  00BC               	movwf	??___ftdiv+2
  6448  054F  1003               	clrc
  6449  0550  0D3B               	rlf	??___ftdiv+1,w
  6450  0551  0D3C               	rlf	??___ftdiv+2,w
  6451  0552  00BD               	movwf	??___ftdiv+3
  6452  0553  083D               	movf	??___ftdiv+3,w
  6453  0554  00C2               	movwf	___ftdiv@exp
  6454  0555  0842               	movf	___ftdiv@exp,w
  6455  0556  1D03               	btfss	3,2
  6456  0557  2D5F               	goto	l3474
  6457  0558  3000               	movlw	0
  6458  0559  00B4               	movwf	?___ftdiv
  6459  055A  3000               	movlw	0
  6460  055B  00B5               	movwf	?___ftdiv+1
  6461  055C  3000               	movlw	0
  6462  055D  00B6               	movwf	?___ftdiv+2
  6463  055E  0008               	return
  6464  055F                     l3474:	
  6465  055F  0834               	movf	___ftdiv@f2,w
  6466  0560  00BA               	movwf	??___ftdiv
  6467  0561  0835               	movf	___ftdiv@f2+1,w
  6468  0562  00BB               	movwf	??___ftdiv+1
  6469  0563  0836               	movf	___ftdiv@f2+2,w
  6470  0564  00BC               	movwf	??___ftdiv+2
  6471  0565  1003               	clrc
  6472  0566  0D3B               	rlf	??___ftdiv+1,w
  6473  0567  0D3C               	rlf	??___ftdiv+2,w
  6474  0568  00BD               	movwf	??___ftdiv+3
  6475  0569  083D               	movf	??___ftdiv+3,w
  6476  056A  00C3               	movwf	___ftdiv@sign
  6477  056B  0843               	movf	___ftdiv@sign,w
  6478  056C  1D03               	btfss	3,2
  6479  056D  2D75               	goto	l3480
  6480  056E  3000               	movlw	0
  6481  056F  00B4               	movwf	?___ftdiv
  6482  0570  3000               	movlw	0
  6483  0571  00B5               	movwf	?___ftdiv+1
  6484  0572  3000               	movlw	0
  6485  0573  00B6               	movwf	?___ftdiv+2
  6486  0574  0008               	return
  6487  0575                     l3480:	
  6488  0575  3000               	movlw	0
  6489  0576  00BF               	movwf	___ftdiv@f3
  6490  0577  3000               	movlw	0
  6491  0578  00C0               	movwf	___ftdiv@f3+1
  6492  0579  3000               	movlw	0
  6493  057A  00C1               	movwf	___ftdiv@f3+2
  6494  057B  3089               	movlw	137
  6495  057C  0743               	addwf	___ftdiv@sign,w
  6496  057D  00BA               	movwf	??___ftdiv
  6497  057E  083A               	movf	??___ftdiv,w
  6498  057F  02C2               	subwf	___ftdiv@exp,f
  6499  0580  0837               	movf	___ftdiv@f1,w
  6500  0581  00BA               	movwf	??___ftdiv
  6501  0582  0838               	movf	___ftdiv@f1+1,w
  6502  0583  00BB               	movwf	??___ftdiv+1
  6503  0584  0839               	movf	___ftdiv@f1+2,w
  6504  0585  00BC               	movwf	??___ftdiv+2
  6505  0586  3010               	movlw	16
  6506  0587                     u3625:	
  6507  0587  36BC               	lsrf	??___ftdiv+2,f
  6508  0588  0CBB               	rrf	??___ftdiv+1,f
  6509  0589  0CBA               	rrf	??___ftdiv,f
  6510  058A  0B89               	decfsz	9,f
  6511  058B  2D87               	goto	u3625
  6512  058C  083A               	movf	??___ftdiv,w
  6513  058D  00BD               	movwf	??___ftdiv+3
  6514  058E  083D               	movf	??___ftdiv+3,w
  6515  058F  00C3               	movwf	___ftdiv@sign
  6516  0590  0834               	movf	___ftdiv@f2,w
  6517  0591  00BA               	movwf	??___ftdiv
  6518  0592  0835               	movf	___ftdiv@f2+1,w
  6519  0593  00BB               	movwf	??___ftdiv+1
  6520  0594  0836               	movf	___ftdiv@f2+2,w
  6521  0595  00BC               	movwf	??___ftdiv+2
  6522  0596  3010               	movlw	16
  6523  0597                     u3635:	
  6524  0597  36BC               	lsrf	??___ftdiv+2,f
  6525  0598  0CBB               	rrf	??___ftdiv+1,f
  6526  0599  0CBA               	rrf	??___ftdiv,f
  6527  059A  0B89               	decfsz	9,f
  6528  059B  2D97               	goto	u3635
  6529  059C  083A               	movf	??___ftdiv,w
  6530  059D  00BD               	movwf	??___ftdiv+3
  6531  059E  083D               	movf	??___ftdiv+3,w
  6532  059F  06C3               	xorwf	___ftdiv@sign,f
  6533  05A0  3080               	movlw	128
  6534  05A1  00BA               	movwf	??___ftdiv
  6535  05A2  083A               	movf	??___ftdiv,w
  6536  05A3  05C3               	andwf	___ftdiv@sign,f
  6537  05A4  17B8               	bsf	___ftdiv@f1+1,7
  6538  05A5  30FF               	movlw	255
  6539  05A6  05B7               	andwf	___ftdiv@f1,f
  6540  05A7  30FF               	movlw	255
  6541  05A8  05B8               	andwf	___ftdiv@f1+1,f
  6542  05A9  3000               	movlw	0
  6543  05AA  05B9               	andwf	___ftdiv@f1+2,f
  6544  05AB  17B5               	bsf	___ftdiv@f2+1,7
  6545  05AC  30FF               	movlw	255
  6546  05AD  05B4               	andwf	___ftdiv@f2,f
  6547  05AE  30FF               	movlw	255
  6548  05AF  05B5               	andwf	___ftdiv@f2+1,f
  6549  05B0  3000               	movlw	0
  6550  05B1  05B6               	andwf	___ftdiv@f2+2,f
  6551  05B2  3018               	movlw	24
  6552  05B3  00BA               	movwf	??___ftdiv
  6553  05B4  083A               	movf	??___ftdiv,w
  6554  05B5  00BE               	movwf	___ftdiv@cntr
  6555  05B6                     l3494:	
  6556  05B6  3001               	movlw	1
  6557  05B7                     u3645:	
  6558  05B7  35BF               	lslf	___ftdiv@f3,f
  6559  05B8  0DC0               	rlf	___ftdiv@f3+1,f
  6560  05B9  0DC1               	rlf	___ftdiv@f3+2,f
  6561  05BA  0B89               	decfsz	9,f
  6562  05BB  2DB7               	goto	u3645
  6563  05BC  0836               	movf	___ftdiv@f2+2,w
  6564  05BD  0239               	subwf	___ftdiv@f1+2,w
  6565  05BE  1D03               	skipz
  6566  05BF  2DC6               	goto	u3655
  6567  05C0  0835               	movf	___ftdiv@f2+1,w
  6568  05C1  0238               	subwf	___ftdiv@f1+1,w
  6569  05C2  1D03               	skipz
  6570  05C3  2DC6               	goto	u3655
  6571  05C4  0834               	movf	___ftdiv@f2,w
  6572  05C5  0237               	subwf	___ftdiv@f1,w
  6573  05C6                     u3655:	
  6574  05C6  1C03               	skipc
  6575  05C7  2DCF               	goto	l3502
  6576  05C8  0834               	movf	___ftdiv@f2,w
  6577  05C9  02B7               	subwf	___ftdiv@f1,f
  6578  05CA  0835               	movf	___ftdiv@f2+1,w
  6579  05CB  3BB8               	subwfb	___ftdiv@f1+1,f
  6580  05CC  0836               	movf	___ftdiv@f2+2,w
  6581  05CD  3BB9               	subwfb	___ftdiv@f1+2,f
  6582  05CE  143F               	bsf	___ftdiv@f3,0
  6583  05CF                     l3502:	
  6584  05CF  3001               	movlw	1
  6585  05D0                     u3665:	
  6586  05D0  35B7               	lslf	___ftdiv@f1,f
  6587  05D1  0DB8               	rlf	___ftdiv@f1+1,f
  6588  05D2  0DB9               	rlf	___ftdiv@f1+2,f
  6589  05D3  0B89               	decfsz	9,f
  6590  05D4  2DD0               	goto	u3665
  6591  05D5  3001               	movlw	1
  6592  05D6  02BE               	subwf	___ftdiv@cntr,f
  6593  05D7  1D03               	btfss	3,2
  6594  05D8  2DB6               	goto	l3494
  6595  05D9  083F               	movf	___ftdiv@f3,w
  6596  05DA  00F1               	movwf	___ftpack@arg
  6597  05DB  0840               	movf	___ftdiv@f3+1,w
  6598  05DC  00F2               	movwf	___ftpack@arg+1
  6599  05DD  0841               	movf	___ftdiv@f3+2,w
  6600  05DE  00F3               	movwf	___ftpack@arg+2
  6601  05DF  0842               	movf	___ftdiv@exp,w
  6602  05E0  00BA               	movwf	??___ftdiv
  6603  05E1  083A               	movf	??___ftdiv,w
  6604  05E2  00F4               	movwf	___ftpack@exp
  6605  05E3  0843               	movf	___ftdiv@sign,w
  6606  05E4  00BB               	movwf	??___ftdiv+1
  6607  05E5  083B               	movf	??___ftdiv+1,w
  6608  05E6  00F5               	movwf	___ftpack@sign
  6609  05E7  3186  26D2         	fcall	___ftpack
  6610  05E9  0871               	movf	?___ftpack,w
  6611  05EA  0020               	movlb	0	; select bank0
  6612  05EB  00B4               	movwf	?___ftdiv
  6613  05EC  0872               	movf	?___ftpack+1,w
  6614  05ED  00B5               	movwf	?___ftdiv+1
  6615  05EE  0873               	movf	?___ftpack+2,w
  6616  05EF  00B6               	movwf	?___ftdiv+2
  6617  05F0  0008               	return
  6618  05F1                     __end_of___ftdiv:	
  6619                           
  6620                           	psect	text28
  6621  06D2                     __ptext28:	
  6622 ;; *************** function ___ftpack *****************
  6623 ;; Defined at:
  6624 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  6625 ;; Parameters:    Size  Location     Type
  6626 ;;  arg             3    1[COMMON] unsigned um
  6627 ;;  exp             1    4[COMMON] unsigned char 
  6628 ;;  sign            1    5[COMMON] unsigned char 
  6629 ;; Auto vars:     Size  Location     Type
  6630 ;;		None
  6631 ;; Return value:  Size  Location     Type
  6632 ;;                  3    1[COMMON] float 
  6633 ;; Registers used:
  6634 ;;		wreg, status,2, status,0
  6635 ;; Tracked objects:
  6636 ;;		On entry : 0/0
  6637 ;;		On exit  : 0/0
  6638 ;;		Unchanged: 0/0
  6639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6640 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6641 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6642 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6643 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6644 ;;Total ram usage:        8 bytes
  6645 ;; Hardware stack levels used:    1
  6646 ;; Hardware stack levels required when called:    2
  6647 ;; This function calls:
  6648 ;;		Nothing
  6649 ;; This function is called by:
  6650 ;;		___ftadd
  6651 ;;		___ftdiv
  6652 ;;		___ftmul
  6653 ;;		___lltoft
  6654 ;;		___lwtoft
  6655 ;; This function uses a non-reentrant model
  6656 ;;
  6657                           
  6658                           
  6659                           ;psect for function ___ftpack
  6660  06D2                     ___ftpack:	
  6661                           
  6662                           ;incstack = 0
  6663                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  6664  06D2  0874               	movf	___ftpack@exp,w
  6665  06D3  1903               	btfsc	3,2
  6666  06D4  2EDA               	goto	l3214
  6667  06D5  0873               	movf	___ftpack@arg+2,w
  6668  06D6  0472               	iorwf	___ftpack@arg+1,w
  6669  06D7  0471               	iorwf	___ftpack@arg,w
  6670  06D8  1D03               	skipz
  6671  06D9  2EEB               	goto	l3220
  6672  06DA                     l3214:	
  6673  06DA  3000               	movlw	0
  6674  06DB  00F1               	movwf	?___ftpack
  6675  06DC  3000               	movlw	0
  6676  06DD  00F2               	movwf	?___ftpack+1
  6677  06DE  3000               	movlw	0
  6678  06DF  00F3               	movwf	?___ftpack+2
  6679  06E0  0008               	return
  6680  06E1                     l3218:	
  6681  06E1  3001               	movlw	1
  6682  06E2  00F6               	movwf	??___ftpack
  6683  06E3  0876               	movf	??___ftpack,w
  6684  06E4  07F4               	addwf	___ftpack@exp,f
  6685  06E5  3001               	movlw	1
  6686  06E6                     u3025:	
  6687  06E6  36F3               	lsrf	___ftpack@arg+2,f
  6688  06E7  0CF2               	rrf	___ftpack@arg+1,f
  6689  06E8  0CF1               	rrf	___ftpack@arg,f
  6690  06E9  0B89               	decfsz	9,f
  6691  06EA  2EE6               	goto	u3025
  6692  06EB                     l3220:	
  6693  06EB  30FE               	movlw	254
  6694  06EC  0573               	andwf	___ftpack@arg+2,w
  6695  06ED  1903               	btfsc	3,2
  6696  06EE  2F04               	goto	l848
  6697  06EF  2EE1               	goto	l3218
  6698  06F0                     l3222:	
  6699  06F0  3001               	movlw	1
  6700  06F1  00F6               	movwf	??___ftpack
  6701  06F2  0876               	movf	??___ftpack,w
  6702  06F3  07F4               	addwf	___ftpack@exp,f
  6703  06F4  3001               	movlw	1
  6704  06F5  07F1               	addwf	___ftpack@arg,f
  6705  06F6  3000               	movlw	0
  6706  06F7  1803               	skipnc
  6707  06F8  3001               	movlw	1
  6708  06F9  07F2               	addwf	___ftpack@arg+1,f
  6709  06FA  3000               	movlw	0
  6710  06FB  1803               	skipnc
  6711  06FC  3001               	movlw	1
  6712  06FD  07F3               	addwf	___ftpack@arg+2,f
  6713  06FE  3001               	movlw	1
  6714  06FF                     u3045:	
  6715  06FF  36F3               	lsrf	___ftpack@arg+2,f
  6716  0700  0CF2               	rrf	___ftpack@arg+1,f
  6717  0701  0CF1               	rrf	___ftpack@arg,f
  6718  0702  0B89               	decfsz	9,f
  6719  0703  2EFF               	goto	u3045
  6720  0704                     l848:	
  6721  0704  30FF               	movlw	255
  6722  0705  0573               	andwf	___ftpack@arg+2,w
  6723  0706  1903               	btfsc	3,2
  6724  0707  2F15               	goto	l3230
  6725  0708  2EF0               	goto	l3222
  6726  0709                     l3232:	
  6727  0709  3002               	movlw	2
  6728  070A  0274               	subwf	___ftpack@exp,w
  6729  070B  1C03               	btfss	3,0
  6730  070C  2F17               	goto	l855
  6731  070D  3001               	movlw	1
  6732  070E  02F4               	subwf	___ftpack@exp,f
  6733  070F  3001               	movlw	1
  6734  0710                     u3065:	
  6735  0710  35F1               	lslf	___ftpack@arg,f
  6736  0711  0DF2               	rlf	___ftpack@arg+1,f
  6737  0712  0DF3               	rlf	___ftpack@arg+2,f
  6738  0713  0B89               	decfsz	9,f
  6739  0714  2F10               	goto	u3065
  6740  0715                     l3230:	
  6741  0715  1FF2               	btfss	___ftpack@arg+1,7
  6742  0716  2F09               	goto	l3232
  6743  0717                     l855:	
  6744  0717  1874               	btfsc	___ftpack@exp,0
  6745  0718  2F1F               	goto	l856
  6746  0719  30FF               	movlw	255
  6747  071A  05F1               	andwf	___ftpack@arg,f
  6748  071B  307F               	movlw	127
  6749  071C  05F2               	andwf	___ftpack@arg+1,f
  6750  071D  30FF               	movlw	255
  6751  071E  05F3               	andwf	___ftpack@arg+2,f
  6752  071F                     l856:	
  6753  071F  1003               	clrc
  6754  0720  0CF4               	rrf	___ftpack@exp,f
  6755  0721  0874               	movf	___ftpack@exp,w
  6756  0722  00F6               	movwf	??___ftpack
  6757  0723  01F7               	clrf	??___ftpack+1
  6758  0724  01F8               	clrf	??___ftpack+2
  6759  0725  3010               	movlw	16
  6760  0726                     u3105:	
  6761  0726  35F6               	lslf	??___ftpack,f
  6762  0727  0DF7               	rlf	??___ftpack+1,f
  6763  0728  0DF8               	rlf	??___ftpack+2,f
  6764  0729  0B89               	decfsz	9,f
  6765  072A  2F26               	goto	u3105
  6766  072B  0876               	movf	??___ftpack,w
  6767  072C  04F1               	iorwf	___ftpack@arg,f
  6768  072D  0877               	movf	??___ftpack+1,w
  6769  072E  04F2               	iorwf	___ftpack@arg+1,f
  6770  072F  0878               	movf	??___ftpack+2,w
  6771  0730  04F3               	iorwf	___ftpack@arg+2,f
  6772  0731  0875               	movf	___ftpack@sign,w
  6773  0732  1903               	btfsc	3,2
  6774  0733  0008               	return
  6775  0734  17F3               	bsf	___ftpack@arg+2,7
  6776  0735  0008               	return
  6777  0736                     __end_of___ftpack:	
  6778                           
  6779                           	psect	text29
  6780  0BE7                     __ptext29:	
  6781 ;; *************** function _PGMSelLong *****************
  6782 ;; Defined at:
  6783 ;;		line 103 in file "PGM.c"
  6784 ;; Parameters:    Size  Location     Type
  6785 ;;		None
  6786 ;; Auto vars:     Size  Location     Type
  6787 ;;		None
  6788 ;; Return value:  Size  Location     Type
  6789 ;;		None               void
  6790 ;; Registers used:
  6791 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6792 ;; Tracked objects:
  6793 ;;		On entry : 0/0
  6794 ;;		On exit  : 0/0
  6795 ;;		Unchanged: 0/0
  6796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6797 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6798 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6799 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6800 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6801 ;;Total ram usage:        1 bytes
  6802 ;; Hardware stack levels used:    1
  6803 ;; Hardware stack levels required when called:    4
  6804 ;; This function calls:
  6805 ;;		_LEDNormalFlash
  6806 ;;		_PGMWriteNvm
  6807 ;; This function is called by:
  6808 ;;		_SYSTask
  6809 ;; This function uses a non-reentrant model
  6810 ;;
  6811                           
  6812                           
  6813                           ;psect for function _PGMSelLong
  6814  0BE7                     _PGMSelLong:	
  6815                           
  6816                           ;PGM.c: 106: pgm_cfg.menu.val=0x00;
  6817                           
  6818                           ;incstack = 0
  6819                           ; Regs used in _PGMSelLong: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6820  0BE7  0021               	movlb	1	; select bank1
  6821  0BE8  01CA               	clrf	(_pgm_cfg^(0+128)+2)
  6822                           
  6823                           ;PGM.c: 108: pgm_cfg.sensId=TMR1L^TMR1H;
  6824  0BE9  0020               	movlb	0	; select bank0
  6825  0BEA  0816               	movf	22,w	;volatile
  6826  0BEB  0617               	xorwf	23,w	;volatile
  6827  0BEC  00FA               	movwf	??_PGMSelLong
  6828  0BED  087A               	movf	??_PGMSelLong,w
  6829  0BEE  0021               	movlb	1	; select bank1
  6830  0BEF  00CB               	movwf	(_pgm_cfg^(0+128)+3)
  6831                           
  6832                           ;PGM.c: 109: if(pgm_cfg.sensId==0x00)
  6833  0BF0  084B               	movf	(_pgm_cfg^(0+128)+3),w
  6834  0BF1  1D03               	btfss	3,2
  6835  0BF2  2BF7               	goto	l3782
  6836                           
  6837                           ;PGM.c: 110: pgm_cfg.sensId++;
  6838  0BF3  3001               	movlw	1
  6839  0BF4  00FA               	movwf	??_PGMSelLong
  6840  0BF5  087A               	movf	??_PGMSelLong,w
  6841  0BF6  07CB               	addwf	(_pgm_cfg^(0+128)+3),f
  6842  0BF7                     l3782:	
  6843                           
  6844                           ;PGM.c: 112: PGMWriteNvm();
  6845  0BF7  318B  2324  318B   	fcall	_PGMWriteNvm
  6846                           
  6847                           ;PGM.c: 114: LEDNormalFlash(3);
  6848  0BFA  3003               	movlw	3
  6849  0BFB  318C  24A4         	fcall	_LEDNormalFlash
  6850                           
  6851                           ;PGM.c: 116: pgm_flg.resetDone=1;
  6852  0BFD  14FC               	bsf	_pgm_flg,1
  6853  0BFE  0008               	return
  6854  0BFF                     __end_of_PGMSelLong:	
  6855                           
  6856                           	psect	text30
  6857  0E1F                     __ptext30:	
  6858 ;; *************** function _DINTick *****************
  6859 ;; Defined at:
  6860 ;;		line 46 in file "DIN.c"
  6861 ;; Parameters:    Size  Location     Type
  6862 ;;		None
  6863 ;; Auto vars:     Size  Location     Type
  6864 ;;		None
  6865 ;; Return value:  Size  Location     Type
  6866 ;;		None               void
  6867 ;; Registers used:
  6868 ;;		wreg, status,2, status,0
  6869 ;; Tracked objects:
  6870 ;;		On entry : 0/0
  6871 ;;		On exit  : 0/0
  6872 ;;		Unchanged: 0/0
  6873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6874 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6875 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6876 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6877 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6878 ;;Total ram usage:        1 bytes
  6879 ;; Hardware stack levels used:    1
  6880 ;; Hardware stack levels required when called:    2
  6881 ;; This function calls:
  6882 ;;		Nothing
  6883 ;; This function is called by:
  6884 ;;		_SYSTask
  6885 ;; This function uses a non-reentrant model
  6886 ;;
  6887                           
  6888                           
  6889                           ;psect for function _DINTick
  6890  0E1F                     _DINTick:	
  6891                           
  6892                           ;DIN.c: 50: if(u_flg_din.tmrDbncSel)
  6893                           
  6894                           ;incstack = 0
  6895                           ; Regs used in _DINTick: [wreg+status,2+status,0]
  6896  0E1F  0020               	movlb	0	; select bank0
  6897  0E20  1C6D               	btfss	_u_flg_din,0
  6898  0E21  2E37               	goto	l295
  6899                           
  6900                           ;DIN.c: 51: {
  6901                           ;DIN.c: 52: tmrDbncSel++;
  6902  0E22  3001               	movlw	1
  6903  0E23  00F1               	movwf	??_DINTick
  6904  0E24  0871               	movf	??_DINTick,w
  6905  0E25  0021               	movlb	1	; select bank1
  6906  0E26  07AD               	addwf	_tmrDbncSel^(0+128),f
  6907                           
  6908                           ;DIN.c: 53: if(tmrDbncSel>5)
  6909  0E27  3006               	movlw	6
  6910  0E28  022D               	subwf	_tmrDbncSel^(0+128),w
  6911  0E29  1C03               	skipc
  6912  0E2A  2E37               	goto	l295
  6913                           
  6914                           ;DIN.c: 54: {
  6915                           ;DIN.c: 55: u_flg_din.tmrDbncSel=0;
  6916  0E2B  0020               	movlb	0	; select bank0
  6917  0E2C  106D               	bcf	_u_flg_din,0
  6918                           
  6919                           ;DIN.c: 56: tmrDbncSel=0;
  6920  0E2D  0021               	movlb	1	; select bank1
  6921  0E2E  01AD               	clrf	_tmrDbncSel^(0+128)
  6922                           
  6923                           ;DIN.c: 58: if(u_in_sta_currTask.sel)
  6924  0E2F  0020               	movlb	0	; select bank0
  6925  0E30  1C6E               	btfss	_u_in_sta_currTask,0
  6926  0E31  2E35               	goto	l297
  6927                           
  6928                           ;DIN.c: 59: u_in_ev_down.sel=1;
  6929  0E32  0021               	movlb	1	; select bank1
  6930  0E33  142F               	bsf	_u_in_ev_down^(0+128),0
  6931  0E34  2E37               	goto	l295
  6932  0E35                     l297:	
  6933                           
  6934                           ;DIN.c: 60: else
  6935                           ;DIN.c: 61: u_in_ev_up.sel=1;
  6936  0E35  0021               	movlb	1	; select bank1
  6937  0E36  1431               	bsf	_u_in_ev_up^(0+128),0
  6938  0E37                     l295:	
  6939                           
  6940                           ;DIN.c: 62: }
  6941                           ;DIN.c: 63: }
  6942                           ;DIN.c: 66: if(u_flg_din.tmrLongSel)
  6943  0E37  0020               	movlb	0	; select bank0
  6944  0E38  1CED               	btfss	_u_flg_din,1
  6945  0E39  0008               	return
  6946                           
  6947                           ;DIN.c: 67: {
  6948                           ;DIN.c: 68: tmrLongSel++;
  6949  0E3A  3001               	movlw	1
  6950  0E3B  0021               	movlb	1	; select bank1
  6951  0E3C  07AA               	addwf	_tmrLongSel^(0+128),f
  6952  0E3D  3000               	movlw	0
  6953  0E3E  3DAB               	addwfc	(_tmrLongSel+1)^(0+128),f
  6954                           
  6955                           ;DIN.c: 69: if(tmrLongSel>200)
  6956  0E3F  3000               	movlw	0
  6957  0E40  022B               	subwf	(_tmrLongSel+1)^(0+128),w
  6958  0E41  30C9               	movlw	201
  6959  0E42  1903               	skipnz
  6960  0E43  022A               	subwf	_tmrLongSel^(0+128),w
  6961  0E44  1C03               	skipc
  6962  0E45  0008               	return
  6963                           
  6964                           ;DIN.c: 70: {
  6965                           ;DIN.c: 72: tmrLongSel=0;
  6966  0E46  01AA               	clrf	_tmrLongSel^(0+128)
  6967  0E47  01AB               	clrf	(_tmrLongSel+1)^(0+128)
  6968                           
  6969                           ;DIN.c: 74: u_in_ev_long.sel=1;
  6970  0E48  1430               	bsf	_u_in_ev_long^(0+128),0
  6971  0E49  0008               	return
  6972  0E4A                     __end_of_DINTick:	
  6973                           
  6974                           	psect	text31
  6975  0DA5                     __ptext31:	
  6976 ;; *************** function _SYSInit *****************
  6977 ;; Defined at:
  6978 ;;		line 17 in file "SYS.c"
  6979 ;; Parameters:    Size  Location     Type
  6980 ;;  state           1    wreg     unsigned char 
  6981 ;; Auto vars:     Size  Location     Type
  6982 ;;  state           1    2[COMMON] unsigned char 
  6983 ;; Return value:  Size  Location     Type
  6984 ;;		None               void
  6985 ;; Registers used:
  6986 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6987 ;; Tracked objects:
  6988 ;;		On entry : 0/0
  6989 ;;		On exit  : 0/0
  6990 ;;		Unchanged: 0/0
  6991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6993 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6994 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6995 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6996 ;;Total ram usage:        2 bytes
  6997 ;; Hardware stack levels used:    1
  6998 ;; Hardware stack levels required when called:    2
  6999 ;; This function calls:
  7000 ;;		Nothing
  7001 ;; This function is called by:
  7002 ;;		_main
  7003 ;; This function uses a non-reentrant model
  7004 ;;
  7005                           
  7006                           
  7007                           ;psect for function _SYSInit
  7008  0DA5                     _SYSInit:	
  7009                           
  7010                           ;incstack = 0
  7011                           ; Regs used in _SYSInit: [wreg-fsr0h+status,2+status,0]
  7012                           ;SYSInit@state stored from wreg
  7013  0DA5  00F2               	movwf	SYSInit@state
  7014                           
  7015                           ;SYS.c: 19: switch(state)
  7016  0DA6  2DC2               	goto	l3118
  7017  0DA7                     l3096:	
  7018                           ;SYS.c: 20: {
  7019                           ;SYS.c: 21: case 0:
  7020                           
  7021                           
  7022                           ;SYS.c: 23: OPTION_REG=0b00000110; OSCCON=0b01110011; WDTCON=0b00001001; IOCBP=0b0000000
      +                          0; IOCBN=0b00000000; TMR0=255-156; INTCON|=0b00100000; INTCON&=0b11111011; PIR1=0b000000
      +                          00; PIR2=0b00000000; PIE1=0b00000000; PIE2=0b00000000;
  7023  0DA7  3006               	movlw	6
  7024  0DA8  0021               	movlb	1	; select bank1
  7025  0DA9  0095               	movwf	21	;volatile
  7026  0DAA  3073               	movlw	115
  7027  0DAB  0099               	movwf	25	;volatile
  7028  0DAC  3009               	movlw	9
  7029  0DAD  0097               	movwf	23	;volatile
  7030  0DAE  0027               	movlb	7	; select bank7
  7031  0DAF  0194               	clrf	20	;volatile
  7032  0DB0  0195               	clrf	21	;volatile
  7033  0DB1  3063               	movlw	99
  7034  0DB2  0020               	movlb	0	; select bank0
  7035  0DB3  0095               	movwf	21	;volatile
  7036  0DB4  168B               	bsf	11,5	;volatile
  7037  0DB5  30FB               	movlw	251
  7038  0DB6  00F1               	movwf	??_SYSInit
  7039  0DB7  0871               	movf	??_SYSInit,w
  7040  0DB8  058B               	andwf	11,f	;volatile
  7041  0DB9  0191               	clrf	17	;volatile
  7042  0DBA  0192               	clrf	18	;volatile
  7043  0DBB  0021               	movlb	1	; select bank1
  7044  0DBC  0191               	clrf	17	;volatile
  7045  0DBD  0192               	clrf	18	;volatile
  7046                           
  7047                           ;SYS.c: 24: break;
  7048  0DBE  0008               	return
  7049  0DBF                     l3114:	
  7050                           ;SYS.c: 25: case 1:
  7051                           
  7052                           
  7053                           ;SYS.c: 27: u_SYS_STA.VAL=0;
  7054  0DBF  0021               	movlb	1	; select bank1
  7055  0DC0  01AE               	clrf	_u_SYS_STA^(0+128)
  7056                           
  7057                           ;SYS.c: 32: }
  7058                           
  7059                           ;SYS.c: 28: break;
  7060  0DC1  0008               	return
  7061  0DC2                     l3118:	
  7062  0DC2  0872               	movf	SYSInit@state,w
  7063                           
  7064                           ; Switch size 1, requested type "space"
  7065                           ; Number of cases is 2, Range of values is 0 to 1
  7066                           ; switch strategies available:
  7067                           ; Name         Instructions Cycles
  7068                           ; simple_byte            7     4 (average)
  7069                           ; direct_byte           10     6 (fixed)
  7070                           ; jumptable            260     6 (fixed)
  7071                           ;	Chosen strategy is simple_byte
  7072  0DC3  3A00               	xorlw	0	; case 0
  7073  0DC4  1903               	skipnz
  7074  0DC5  2DA7               	goto	l3096
  7075  0DC6  3A01               	xorlw	1	; case 1
  7076  0DC7  1903               	skipnz
  7077  0DC8  2DBF               	goto	l3114
  7078  0DC9  2DCA               	goto	l600
  7079  0DCA                     l600:	
  7080  0DCA  0008               	return
  7081  0DCB                     __end_of_SYSInit:	
  7082                           
  7083                           	psect	text32
  7084  0CC2                     __ptext32:	
  7085 ;; *************** function _SPIInit *****************
  7086 ;; Defined at:
  7087 ;;		line 8 in file "SPI.c"
  7088 ;; Parameters:    Size  Location     Type
  7089 ;;  state           1    wreg     unsigned char 
  7090 ;; Auto vars:     Size  Location     Type
  7091 ;;  state           1    2[COMMON] unsigned char 
  7092 ;; Return value:  Size  Location     Type
  7093 ;;		None               void
  7094 ;; Registers used:
  7095 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7096 ;; Tracked objects:
  7097 ;;		On entry : 0/0
  7098 ;;		On exit  : 0/0
  7099 ;;		Unchanged: 0/0
  7100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7102 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7103 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7104 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7105 ;;Total ram usage:        2 bytes
  7106 ;; Hardware stack levels used:    1
  7107 ;; Hardware stack levels required when called:    2
  7108 ;; This function calls:
  7109 ;;		Nothing
  7110 ;; This function is called by:
  7111 ;;		_main
  7112 ;; This function uses a non-reentrant model
  7113 ;;
  7114                           
  7115                           
  7116                           ;psect for function _SPIInit
  7117  0CC2                     _SPIInit:	
  7118                           
  7119                           ;incstack = 0
  7120                           ; Regs used in _SPIInit: [wreg-fsr0h+status,2+status,0]
  7121                           ;SPIInit@state stored from wreg
  7122  0CC2  00F2               	movwf	SPIInit@state
  7123                           
  7124                           ;SPI.c: 10: switch(state)
  7125  0CC3  2CD4               	goto	l3014
  7126  0CC4                     l60:	
  7127                           ;SPI.c: 11: {
  7128                           ;SPI.c: 12: case 0:
  7129                           
  7130                           
  7131                           ;SPI.c: 14: TRISC|=0b00010000; TRISC&=0b11010111; SSPCONbits.SSPEN=0; SSPBUF=0x00; SSPCO
      +                          N1=0b00000001; SSPCON2=0b00000000; SSPSTAT=0b01000000; SSPCONbits.SSPEN=1;
  7132  0CC4  0021               	movlb	1	; select bank1
  7133  0CC5  160E               	bsf	14,4	;volatile
  7134  0CC6  30D7               	movlw	215
  7135  0CC7  00F1               	movwf	??_SPIInit
  7136  0CC8  0871               	movf	??_SPIInit,w
  7137  0CC9  058E               	andwf	14,f	;volatile
  7138  0CCA  0024               	movlb	4	; select bank4
  7139  0CCB  1295               	bcf	21,5	;volatile
  7140  0CCC  0191               	clrf	17	;volatile
  7141  0CCD  3001               	movlw	1
  7142  0CCE  0095               	movwf	21	;volatile
  7143  0CCF  0196               	clrf	22	;volatile
  7144  0CD0  3040               	movlw	64
  7145  0CD1  0094               	movwf	20	;volatile
  7146  0CD2  1695               	bsf	21,5	;volatile
  7147                           
  7148                           ;SPI.c: 22: }
  7149                           
  7150                           ;SPI.c: 21: break;
  7151                           
  7152                           ;SPI.c: 19: case 2:
  7153                           
  7154                           ;SPI.c: 18: break;
  7155                           
  7156                           ;SPI.c: 16: case 1:
  7157                           
  7158                           ;SPI.c: 15: break;
  7159  0CD3  0008               	return
  7160  0CD4                     l3014:	
  7161  0CD4  0872               	movf	SPIInit@state,w
  7162                           
  7163                           ; Switch size 1, requested type "space"
  7164                           ; Number of cases is 3, Range of values is 0 to 2
  7165                           ; switch strategies available:
  7166                           ; Name         Instructions Cycles
  7167                           ; simple_byte           10     6 (average)
  7168                           ; direct_byte           12     6 (fixed)
  7169                           ; jumptable            260     6 (fixed)
  7170                           ;	Chosen strategy is simple_byte
  7171  0CD5  3A00               	xorlw	0	; case 0
  7172  0CD6  1903               	skipnz
  7173  0CD7  2CC4               	goto	l60
  7174  0CD8  3A01               	xorlw	1	; case 1
  7175  0CD9  1903               	skipnz
  7176  0CDA  2CDF               	goto	l64
  7177  0CDB  3A03               	xorlw	3	; case 2
  7178  0CDC  1903               	skipnz
  7179  0CDD  2CDF               	goto	l64
  7180  0CDE  2CDF               	goto	l64
  7181  0CDF                     l64:	
  7182  0CDF  0008               	return
  7183  0CE0                     __end_of_SPIInit:	
  7184                           
  7185                           	psect	text33
  7186  0AD2                     __ptext33:	
  7187 ;; *************** function _RTXTask *****************
  7188 ;; Defined at:
  7189 ;;		line 106 in file "RTX.c"
  7190 ;; Parameters:    Size  Location     Type
  7191 ;;		None
  7192 ;; Auto vars:     Size  Location     Type
  7193 ;;		None
  7194 ;; Return value:  Size  Location     Type
  7195 ;;		None               void
  7196 ;; Registers used:
  7197 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7198 ;; Tracked objects:
  7199 ;;		On entry : 0/0
  7200 ;;		On exit  : 0/0
  7201 ;;		Unchanged: 0/0
  7202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7204 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7206 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7207 ;;Total ram usage:        0 bytes
  7208 ;; Hardware stack levels used:    1
  7209 ;; Hardware stack levels required when called:    6
  7210 ;; This function calls:
  7211 ;;		_RTXReadPkt
  7212 ;; This function is called by:
  7213 ;;		_main
  7214 ;; This function uses a non-reentrant model
  7215 ;;
  7216                           
  7217                           
  7218                           ;psect for function _RTXTask
  7219  0AD2                     _RTXTask:	
  7220                           
  7221                           ;RTX.c: 109: if(!(PORTBbits.RB0))
  7222                           
  7223                           ;incstack = 0
  7224                           ; Regs used in _RTXTask: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7225  0AD2  0020               	movlb	0	; select bank0
  7226  0AD3  180D               	btfsc	13,0	;volatile
  7227  0AD4  0008               	return
  7228                           
  7229                           ;RTX.c: 110: RTXReadPkt();
  7230  0AD5  318F  27B1         	fcall	_RTXReadPkt
  7231  0AD7  0008               	return
  7232  0AD8                     __end_of_RTXTask:	
  7233                           
  7234                           	psect	text34
  7235  0FB1                     __ptext34:	
  7236 ;; *************** function _RTXReadPkt *****************
  7237 ;; Defined at:
  7238 ;;		line 158 in file "RTX.c"
  7239 ;; Parameters:    Size  Location     Type
  7240 ;;		None
  7241 ;; Auto vars:     Size  Location     Type
  7242 ;;  numRxByte       1   70[BANK0 ] unsigned char 
  7243 ;; Return value:  Size  Location     Type
  7244 ;;		None               void
  7245 ;; Registers used:
  7246 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7247 ;; Tracked objects:
  7248 ;;		On entry : 0/0
  7249 ;;		On exit  : 0/0
  7250 ;;		Unchanged: 0/0
  7251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7253 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7254 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7255 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7256 ;;Total ram usage:        2 bytes
  7257 ;; Hardware stack levels used:    1
  7258 ;; Hardware stack levels required when called:    5
  7259 ;; This function calls:
  7260 ;;		_CC1Read
  7261 ;;		_CC1Strobe
  7262 ;;		_LEDNormalFlash
  7263 ;;		_PGMPgmOff
  7264 ;;		_PGMWriteNvm
  7265 ;;		_RTXRcvPkt
  7266 ;; This function is called by:
  7267 ;;		_RTXTask
  7268 ;; This function uses a non-reentrant model
  7269 ;;
  7270                           
  7271                           
  7272                           ;psect for function _RTXReadPkt
  7273  0FB1                     _RTXReadPkt:	
  7274                           
  7275                           ;RTX.c: 160: unsigned char numRxByte;
  7276                           ;RTX.c: 163: CC1Read(0x3B,(&(numRxByte)),1);
  7277                           
  7278                           ;incstack = 0
  7279                           ; Regs used in _RTXReadPkt: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7280  0FB1  3066               	movlw	(low (RTXReadPkt@numRxByte| 0))& (0+255)
  7281  0FB2  0020               	movlb	0	; select bank0
  7282  0FB3  00E5               	movwf	??_RTXReadPkt
  7283  0FB4  0865               	movf	??_RTXReadPkt,w
  7284  0FB5  00F7               	movwf	CC1Read@dst
  7285  0FB6  01F8               	clrf	CC1Read@len
  7286  0FB7  0AF8               	incf	CC1Read@len,f
  7287  0FB8  303B               	movlw	59
  7288  0FB9  318C  244D  318F   	fcall	_CC1Read
  7289                           
  7290                           ;RTX.c: 164: while(numRxByte>=0x0B)
  7291  0FBC  300B               	movlw	11
  7292  0FBD  0020               	movlb	0	; select bank0
  7293  0FBE  0266               	subwf	RTXReadPkt@numRxByte,w
  7294  0FBF  1C03               	btfss	3,0
  7295  0FC0  0008               	return
  7296  0FC1  0064               	clrwdt	;# 
  7297                           
  7298                           ;RTX.c: 168: RTXRcvPkt(pktRx,0x0B);
  7299  0FC2  300B               	movlw	11
  7300  0FC3  0020               	movlb	0	; select bank0
  7301  0FC4  00E5               	movwf	??_RTXReadPkt
  7302  0FC5  0865               	movf	??_RTXReadPkt,w
  7303  0FC6  00A0               	movwf	RTXRcvPkt@len
  7304  0FC7  30B2               	movlw	(low (_pktRx| 0))& (0+255)
  7305  0FC8  318B  2316  318F   	fcall	_RTXRcvPkt
  7306                           
  7307                           ;RTX.c: 170: if(pgm_flg.pgmonoff)
  7308  0FCB  1C7C               	btfss	_pgm_flg,0
  7309  0FCC  2FEB               	goto	l3822
  7310                           
  7311                           ;RTX.c: 171: {
  7312                           ;RTX.c: 173: if(pktRx[OP]==rPGM)
  7313  0FCD  3081               	movlw	129
  7314  0FCE  0021               	movlb	1	; select bank1
  7315  0FCF  0636               	xorwf	(_pktRx^(0+128)+4),w
  7316  0FD0  1D03               	btfss	3,2
  7317  0FD1  2FB1               	goto	_RTXReadPkt
  7318                           
  7319                           ;RTX.c: 174: {
  7320                           ;RTX.c: 175: if(pktRx[ID_DEST]==pgm_cfg.sensId)
  7321  0FD2  084B               	movf	(_pgm_cfg^(0+128)+3),w
  7322  0FD3  0632               	xorwf	_pktRx^(0+128),w
  7323  0FD4  1D03               	skipz
  7324  0FD5  2FB1               	goto	_RTXReadPkt
  7325                           
  7326                           ;RTX.c: 176: {
  7327                           ;RTX.c: 178: pgm_cfg.baseId=pktRx[ID_SOURCE];
  7328  0FD6  0834               	movf	(_pktRx^(0+128)+2),w
  7329  0FD7  0020               	movlb	0	; select bank0
  7330  0FD8  00E5               	movwf	??_RTXReadPkt
  7331  0FD9  0865               	movf	??_RTXReadPkt,w
  7332  0FDA  0021               	movlb	1	; select bank1
  7333  0FDB  00CC               	movwf	(_pgm_cfg^(0+128)+4)
  7334                           
  7335                           ;RTX.c: 180: pgm_cfg.menu.baseIdProg=1;
  7336  0FDC  144A               	bsf	(_pgm_cfg^(0+128)+2),0
  7337                           
  7338                           ;RTX.c: 181: PGMWriteNvm();
  7339  0FDD  318B  2324  318F   	fcall	_PGMWriteNvm
  7340                           
  7341                           ;RTX.c: 183: PGMPgmOff();
  7342  0FE0  318A  22C8  318F   	fcall	_PGMPgmOff
  7343                           
  7344                           ;RTX.c: 185: tmrRcvPkt=0;
  7345  0FE3  0020               	movlb	0	; select bank0
  7346  0FE4  01EC               	clrf	_tmrRcvPkt
  7347                           
  7348                           ;RTX.c: 187: LEDNormalFlash(3);
  7349  0FE5  3003               	movlw	3
  7350  0FE6  318C  24A4  318F   	fcall	_LEDNormalFlash
  7351                           
  7352                           ;RTX.c: 189: flg_slp.goSleep=1;
  7353  0FE9  0020               	movlb	0	; select bank0
  7354  0FEA  2FFE               	goto	l3832
  7355  0FEB                     l3822:	
  7356                           ;RTX.c: 190: }
  7357                           ;RTX.c: 191: }
  7358                           ;RTX.c: 192: }
  7359                           
  7360                           
  7361                           ;RTX.c: 193: else
  7362                           ;RTX.c: 194: {
  7363                           ;RTX.c: 196: if(pktRx[OP]==rDAT)
  7364  0FEB  3080               	movlw	128
  7365  0FEC  0021               	movlb	1	; select bank1
  7366  0FED  0636               	xorwf	(_pktRx^(0+128)+4),w
  7367  0FEE  1D03               	btfss	3,2
  7368  0FEF  2FB1               	goto	_RTXReadPkt
  7369                           
  7370                           ;RTX.c: 197: {
  7371                           ;RTX.c: 198: if((pktRx[ID_DEST]==pgm_cfg.sensId) && (pktRx[ID_SOURCE]==pgm_cfg.baseId))
  7372  0FF0  084B               	movf	(_pgm_cfg^(0+128)+3),w
  7373  0FF1  0632               	xorwf	_pktRx^(0+128),w
  7374  0FF2  1D03               	skipz
  7375  0FF3  2FB1               	goto	_RTXReadPkt
  7376  0FF4  084C               	movf	(_pgm_cfg^(0+128)+4),w
  7377  0FF5  0634               	xorwf	(_pktRx^(0+128)+2),w
  7378  0FF6  1D03               	skipz
  7379  0FF7  2FB1               	goto	_RTXReadPkt
  7380                           
  7381                           ;RTX.c: 199: {
  7382                           ;RTX.c: 201: CC1Strobe(SIDLE);
  7383  0FF8  3036               	movlw	54
  7384  0FF9  318B  2392  318F   	fcall	_CC1Strobe
  7385                           
  7386                           ;RTX.c: 203: tmrRcvPkt=0;
  7387  0FFC  0020               	movlb	0	; select bank0
  7388  0FFD  01EC               	clrf	_tmrRcvPkt
  7389  0FFE                     l3832:	
  7390                           
  7391                           ;RTX.c: 205: flg_slp.goSleep=1;
  7392  0FFE  146B               	bsf	_flg_slp,0
  7393  0FFF  2FB1               	goto	_RTXReadPkt
  7394  1000                     __end_of_RTXReadPkt:	
  7395                           ;RTX.c: 206: }
  7396                           ;RTX.c: 207: }
  7397                           ;RTX.c: 208: }
  7398                           ;RTX.c: 210: CC1Read(0x3B,(&(numRxByte)),1);
  7399                           
  7400                           
  7401                           	psect	text35
  7402  0B16                     __ptext35:	
  7403 ;; *************** function _RTXRcvPkt *****************
  7404 ;; Defined at:
  7405 ;;		line 152 in file "RTX.c"
  7406 ;; Parameters:    Size  Location     Type
  7407 ;;  dst             1    wreg     PTR unsigned char 
  7408 ;;		 -> pktRx(11), 
  7409 ;;  len             1    0[BANK0 ] unsigned char 
  7410 ;; Auto vars:     Size  Location     Type
  7411 ;;  dst             1    3[BANK0 ] PTR unsigned char 
  7412 ;;		 -> pktRx(11), 
  7413 ;; Return value:  Size  Location     Type
  7414 ;;		None               void
  7415 ;; Registers used:
  7416 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7417 ;; Tracked objects:
  7418 ;;		On entry : 0/0
  7419 ;;		On exit  : 0/0
  7420 ;;		Unchanged: 0/0
  7421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7422 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7423 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7424 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7425 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7426 ;;Total ram usage:        4 bytes
  7427 ;; Hardware stack levels used:    1
  7428 ;; Hardware stack levels required when called:    4
  7429 ;; This function calls:
  7430 ;;		_CC1Read
  7431 ;; This function is called by:
  7432 ;;		_RTXReadPkt
  7433 ;; This function uses a non-reentrant model
  7434 ;;
  7435                           
  7436                           
  7437                           ;psect for function _RTXRcvPkt
  7438  0B16                     _RTXRcvPkt:	
  7439                           
  7440                           ;incstack = 0
  7441                           ; Regs used in _RTXRcvPkt: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7442                           ;RTXRcvPkt@dst stored from wreg
  7443  0B16  0020               	movlb	0	; select bank0
  7444  0B17  00A3               	movwf	RTXRcvPkt@dst
  7445                           
  7446                           ;RTX.c: 155: CC1Read(0x3F,dst,len);
  7447  0B18  0823               	movf	RTXRcvPkt@dst,w
  7448  0B19  00A1               	movwf	??_RTXRcvPkt
  7449  0B1A  0821               	movf	??_RTXRcvPkt,w
  7450  0B1B  00F7               	movwf	CC1Read@dst
  7451  0B1C  0820               	movf	RTXRcvPkt@len,w
  7452  0B1D  00A2               	movwf	??_RTXRcvPkt+1
  7453  0B1E  0822               	movf	??_RTXRcvPkt+1,w
  7454  0B1F  00F8               	movwf	CC1Read@len
  7455  0B20  303F               	movlw	63
  7456  0B21  318C  244D         	fcall	_CC1Read
  7457  0B23  0008               	return
  7458  0B24                     __end_of_RTXRcvPkt:	
  7459                           
  7460                           	psect	text36
  7461  0C4D                     __ptext36:	
  7462 ;; *************** function _CC1Read *****************
  7463 ;; Defined at:
  7464 ;;		line 116 in file "CC1.c"
  7465 ;; Parameters:    Size  Location     Type
  7466 ;;  addr            1    wreg     unsigned char 
  7467 ;;  dst             1    7[COMMON] PTR unsigned char 
  7468 ;;		 -> pktRx(11), RTXReadPkt@numRxByte(1), RTXSndPkt@numTxByte(1), RTXSndPkt@numRxByte(1), 
  7469 ;;		 -> RTXSndPkt@sta(1), 
  7470 ;;  len             1    8[COMMON] unsigned char 
  7471 ;; Auto vars:     Size  Location     Type
  7472 ;;  addr            1   10[COMMON] unsigned char 
  7473 ;;  cc1Addr         1   11[COMMON] unsigned char 
  7474 ;; Return value:  Size  Location     Type
  7475 ;;		None               void
  7476 ;; Registers used:
  7477 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7478 ;; Tracked objects:
  7479 ;;		On entry : 0/0
  7480 ;;		On exit  : 0/0
  7481 ;;		Unchanged: 0/0
  7482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7483 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7484 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7485 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7486 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7487 ;;Total ram usage:        5 bytes
  7488 ;; Hardware stack levels used:    1
  7489 ;; Hardware stack levels required when called:    3
  7490 ;; This function calls:
  7491 ;;		_SPIRead
  7492 ;;		_SPIWrite
  7493 ;; This function is called by:
  7494 ;;		_RTXSndPkt
  7495 ;;		_RTXRcvPkt
  7496 ;;		_RTXReadPkt
  7497 ;; This function uses a non-reentrant model
  7498 ;;
  7499                           
  7500                           
  7501                           ;psect for function _CC1Read
  7502  0C4D                     _CC1Read:	
  7503                           
  7504                           ;incstack = 0
  7505                           ; Regs used in _CC1Read: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7506                           ;CC1Read@addr stored from wreg
  7507  0C4D  00FA               	movwf	CC1Read@addr
  7508                           
  7509                           ;CC1.c: 118: unsigned char cc1Addr;
  7510                           ;CC1.c: 121: LATAbits.LATA5=0;
  7511  0C4E  0022               	movlb	2	; select bank2
  7512  0C4F  128C               	bcf	12,5	;volatile
  7513                           
  7514                           ;CC1.c: 124: cc1Addr=((addr&0b00111111)|0b11000000);
  7515  0C50  087A               	movf	CC1Read@addr,w
  7516  0C51  393F               	andlw	63
  7517  0C52  38C0               	iorlw	192
  7518  0C53  00F9               	movwf	??_CC1Read
  7519  0C54  0879               	movf	??_CC1Read,w
  7520  0C55  00FB               	movwf	CC1Read@cc1Addr
  7521                           
  7522                           ;CC1.c: 125: SPIWrite((&(cc1Addr)),1);
  7523  0C56  307B               	movlw	low CC1Read@cc1Addr
  7524  0C57  00F1               	movwf	SPIWrite@srcPtr
  7525  0C58  3000               	movlw	high CC1Read@cc1Addr
  7526  0C59  00F2               	movwf	SPIWrite@srcPtr+1
  7527  0C5A  01F3               	clrf	SPIWrite@len
  7528  0C5B  0AF3               	incf	SPIWrite@len,f
  7529  0C5C  318C  2469  318C   	fcall	_SPIWrite
  7530                           
  7531                           ;CC1.c: 128: SPIRead(dst,len);
  7532  0C5F  0878               	movf	CC1Read@len,w
  7533  0C60  00F9               	movwf	??_CC1Read
  7534  0C61  0879               	movf	??_CC1Read,w
  7535  0C62  00F1               	movwf	SPIRead@len
  7536  0C63  0877               	movf	CC1Read@dst,w
  7537  0C64  318D  253B         	fcall	_SPIRead
  7538                           
  7539                           ;CC1.c: 131: LATAbits.LATA5=1;
  7540  0C66  0022               	movlb	2	; select bank2
  7541  0C67  168C               	bsf	12,5	;volatile
  7542  0C68  0008               	return
  7543  0C69                     __end_of_CC1Read:	
  7544                           
  7545                           	psect	text37
  7546  0D3B                     __ptext37:	
  7547 ;; *************** function _SPIRead *****************
  7548 ;; Defined at:
  7549 ;;		line 25 in file "SPI.c"
  7550 ;; Parameters:    Size  Location     Type
  7551 ;;  dstPtr          1    wreg     PTR unsigned char 
  7552 ;;		 -> pktRx(11), RTXReadPkt@numRxByte(1), RTXSndPkt@numTxByte(1), RTXSndPkt@numRxByte(1), 
  7553 ;;		 -> RTXSndPkt@sta(1), 
  7554 ;;  len             1    1[COMMON] unsigned char 
  7555 ;; Auto vars:     Size  Location     Type
  7556 ;;  dstPtr          1    4[COMMON] PTR unsigned char 
  7557 ;;		 -> pktRx(11), RTXReadPkt@numRxByte(1), RTXSndPkt@numTxByte(1), RTXSndPkt@numRxByte(1), 
  7558 ;;		 -> RTXSndPkt@sta(1), 
  7559 ;;  i               1    5[COMMON] unsigned char 
  7560 ;; Return value:  Size  Location     Type
  7561 ;;		None               void
  7562 ;; Registers used:
  7563 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7564 ;; Tracked objects:
  7565 ;;		On entry : 0/0
  7566 ;;		On exit  : 0/0
  7567 ;;		Unchanged: 0/0
  7568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7569 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7570 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7571 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7572 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7573 ;;Total ram usage:        5 bytes
  7574 ;; Hardware stack levels used:    1
  7575 ;; Hardware stack levels required when called:    2
  7576 ;; This function calls:
  7577 ;;		Nothing
  7578 ;; This function is called by:
  7579 ;;		_CC1Read
  7580 ;; This function uses a non-reentrant model
  7581 ;;
  7582                           
  7583                           
  7584                           ;psect for function _SPIRead
  7585  0D3B                     _SPIRead:	
  7586                           
  7587                           ;incstack = 0
  7588                           ; Regs used in _SPIRead: [wreg+fsr1l+fsr1h+status,2+status,0]
  7589                           ;SPIRead@dstPtr stored from wreg
  7590  0D3B  00F4               	movwf	SPIRead@dstPtr
  7591                           
  7592                           ;SPI.c: 27: unsigned char i;
  7593                           ;SPI.c: 29: for(i=0;i<len;i++)
  7594  0D3C  01F5               	clrf	SPIRead@i
  7595  0D3D                     l3250:	
  7596  0D3D  0871               	movf	SPIRead@len,w
  7597  0D3E  0275               	subwf	SPIRead@i,w
  7598  0D3F  1803               	btfsc	3,0
  7599  0D40  0008               	return
  7600                           
  7601                           ;SPI.c: 30: {
  7602                           ;SPI.c: 31: PIR1bits.SSPIF=0;
  7603  0D41  0020               	movlb	0	; select bank0
  7604  0D42  1191               	bcf	17,3	;volatile
  7605                           
  7606                           ;SPI.c: 32: SSPBUF=0xFF;
  7607  0D43  30FF               	movlw	255
  7608  0D44  0024               	movlb	4	; select bank4
  7609  0D45  0091               	movwf	17	;volatile
  7610  0D46                     l69:	
  7611                           ;SPI.c: 33: while(!(PIR1bits.SSPIF))
  7612                           
  7613  0D46  0020               	movlb	0	; select bank0
  7614  0D47  1991               	btfsc	17,3	;volatile
  7615  0D48  2D4B               	goto	l3246
  7616                           
  7617                           ;SPI.c: 34: __nop();
  7618  0D49  0000               	nop
  7619  0D4A  2D46               	goto	l69
  7620  0D4B                     l3246:	
  7621                           
  7622                           ;SPI.c: 35: (*(dstPtr+i))=SSPBUF;
  7623  0D4B  0024               	movlb	4	; select bank4
  7624  0D4C  0811               	movf	17,w	;volatile
  7625  0D4D  00F2               	movwf	??_SPIRead
  7626  0D4E  0875               	movf	SPIRead@i,w
  7627  0D4F  0774               	addwf	SPIRead@dstPtr,w
  7628  0D50  00F3               	movwf	??_SPIRead+1
  7629  0D51  0873               	movf	??_SPIRead+1,w
  7630  0D52  0086               	movwf	6
  7631  0D53  0187               	clrf	7
  7632  0D54  0872               	movf	??_SPIRead,w
  7633  0D55  0081               	movwf	1
  7634  0D56  3001               	movlw	1
  7635  0D57  00F2               	movwf	??_SPIRead
  7636  0D58  0872               	movf	??_SPIRead,w
  7637  0D59  07F5               	addwf	SPIRead@i,f
  7638  0D5A  2D3D               	goto	l3250
  7639  0D5B                     __end_of_SPIRead:	
  7640                           
  7641                           	psect	text38
  7642  0AC8                     __ptext38:	
  7643 ;; *************** function _PGMPgmOff *****************
  7644 ;; Defined at:
  7645 ;;		line 71 in file "PGM.c"
  7646 ;; Parameters:    Size  Location     Type
  7647 ;;		None
  7648 ;; Auto vars:     Size  Location     Type
  7649 ;;		None
  7650 ;; Return value:  Size  Location     Type
  7651 ;;		None               void
  7652 ;; Registers used:
  7653 ;;		None
  7654 ;; Tracked objects:
  7655 ;;		On entry : 0/0
  7656 ;;		On exit  : 0/0
  7657 ;;		Unchanged: 0/0
  7658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7660 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7661 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7662 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7663 ;;Total ram usage:        0 bytes
  7664 ;; Hardware stack levels used:    1
  7665 ;; Hardware stack levels required when called:    2
  7666 ;; This function calls:
  7667 ;;		Nothing
  7668 ;; This function is called by:
  7669 ;;		_RTXReadPkt
  7670 ;;		_RTXSendPgm
  7671 ;;		_SYSTask
  7672 ;; This function uses a non-reentrant model
  7673 ;;
  7674                           
  7675                           
  7676                           ;psect for function _PGMPgmOff
  7677  0AC8                     _PGMPgmOff:	
  7678                           
  7679                           ;PGM.c: 74: LATCbits.LATC7=1;
  7680                           
  7681                           ;incstack = 0
  7682                           ; Regs used in _PGMPgmOff: []
  7683  0AC8  0022               	movlb	2	; select bank2
  7684  0AC9  178E               	bsf	14,7	;volatile
  7685                           
  7686                           ;PGM.c: 76: pgm_flg.pgmonoff=0;
  7687  0ACA  107C               	bcf	_pgm_flg,0
  7688  0ACB  0008               	return
  7689  0ACC                     __end_of_PGMPgmOff:	
  7690                           
  7691                           	psect	text39
  7692  0CA4                     __ptext39:	
  7693 ;; *************** function _LEDNormalFlash *****************
  7694 ;; Defined at:
  7695 ;;		line 24 in file "LED.c"
  7696 ;; Parameters:    Size  Location     Type
  7697 ;;  num             1    wreg     unsigned char 
  7698 ;; Auto vars:     Size  Location     Type
  7699 ;;  num             1    8[COMMON] unsigned char 
  7700 ;;  i               1    9[COMMON] unsigned char 
  7701 ;; Return value:  Size  Location     Type
  7702 ;;		None               void
  7703 ;; Registers used:
  7704 ;;		wreg, status,2, status,0, pclath, cstack
  7705 ;; Tracked objects:
  7706 ;;		On entry : 0/0
  7707 ;;		On exit  : 0/0
  7708 ;;		Unchanged: 0/0
  7709 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7710 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7711 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7712 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7713 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7714 ;;Total ram usage:        3 bytes
  7715 ;; Hardware stack levels used:    1
  7716 ;; Hardware stack levels required when called:    3
  7717 ;; This function calls:
  7718 ;;		_DLYDelay_ms
  7719 ;; This function is called by:
  7720 ;;		_PGMSelLong
  7721 ;;		_RTXReadPkt
  7722 ;; This function uses a non-reentrant model
  7723 ;;
  7724                           
  7725                           
  7726                           ;psect for function _LEDNormalFlash
  7727  0CA4                     _LEDNormalFlash:	
  7728                           
  7729                           ;incstack = 0
  7730                           ; Regs used in _LEDNormalFlash: [wreg+status,2+status,0+pclath+cstack]
  7731                           ;LEDNormalFlash@num stored from wreg
  7732  0CA4  00F8               	movwf	LEDNormalFlash@num
  7733                           
  7734                           ;LED.c: 26: unsigned char i;
  7735                           ;LED.c: 28: for(i=0;i<num;i++)
  7736  0CA5  01F9               	clrf	LEDNormalFlash@i
  7737  0CA6                     l3694:	
  7738  0CA6  0878               	movf	LEDNormalFlash@num,w
  7739  0CA7  0279               	subwf	LEDNormalFlash@i,w
  7740  0CA8  1803               	btfsc	3,0
  7741  0CA9  0008               	return
  7742  0CAA  0064               	clrwdt	;# 
  7743                           
  7744                           ;LED.c: 31: LATCbits.LATC7=0;
  7745  0CAB  0022               	movlb	2	; select bank2
  7746  0CAC  138E               	bcf	14,7	;volatile
  7747                           
  7748                           ;LED.c: 32: DLYDelay_ms(200);
  7749  0CAD  30C8               	movlw	200
  7750  0CAE  00F1               	movwf	DLYDelay_ms@val
  7751  0CAF  3000               	movlw	0
  7752  0CB0  00F2               	movwf	DLYDelay_ms@val+1
  7753  0CB1  318B  23FF  318C   	fcall	_DLYDelay_ms
  7754                           
  7755                           ;LED.c: 33: LATCbits.LATC7=1;
  7756  0CB4  0022               	movlb	2	; select bank2
  7757  0CB5  178E               	bsf	14,7	;volatile
  7758                           
  7759                           ;LED.c: 34: DLYDelay_ms(200);
  7760  0CB6  30C8               	movlw	200
  7761  0CB7  00F1               	movwf	DLYDelay_ms@val
  7762  0CB8  3000               	movlw	0
  7763  0CB9  00F2               	movwf	DLYDelay_ms@val+1
  7764  0CBA  318B  23FF  318C   	fcall	_DLYDelay_ms
  7765  0CBD  3001               	movlw	1
  7766  0CBE  00F7               	movwf	??_LEDNormalFlash
  7767  0CBF  0877               	movf	??_LEDNormalFlash,w
  7768  0CC0  07F9               	addwf	LEDNormalFlash@i,f
  7769  0CC1  2CA6               	goto	l3694
  7770  0CC2                     __end_of_LEDNormalFlash:	
  7771                           
  7772                           	psect	text40
  7773  0BFF                     __ptext40:	
  7774 ;; *************** function _DLYDelay_ms *****************
  7775 ;; Defined at:
  7776 ;;		line 17 in file "DLY.c"
  7777 ;; Parameters:    Size  Location     Type
  7778 ;;  val             2    1[COMMON] unsigned short 
  7779 ;; Auto vars:     Size  Location     Type
  7780 ;;  i               2    5[COMMON] unsigned short 
  7781 ;; Return value:  Size  Location     Type
  7782 ;;		None               void
  7783 ;; Registers used:
  7784 ;;		wreg, status,2
  7785 ;; Tracked objects:
  7786 ;;		On entry : 0/0
  7787 ;;		On exit  : 0/0
  7788 ;;		Unchanged: 0/0
  7789 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7790 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7791 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7792 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7793 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7794 ;;Total ram usage:        6 bytes
  7795 ;; Hardware stack levels used:    1
  7796 ;; Hardware stack levels required when called:    2
  7797 ;; This function calls:
  7798 ;;		Nothing
  7799 ;; This function is called by:
  7800 ;;		_ADCConv
  7801 ;;		_CC1Init
  7802 ;;		_LEDNormalFlash
  7803 ;;		_LEDFastFlash
  7804 ;;		_RTXAwake
  7805 ;;		_RTXStartSendData
  7806 ;;		_RTXStartSendPgm
  7807 ;;		_LEDVFastFlash
  7808 ;; This function uses a non-reentrant model
  7809 ;;
  7810                           
  7811                           
  7812                           ;psect for function _DLYDelay_ms
  7813  0BFF                     _DLYDelay_ms:	
  7814                           
  7815                           ;DLY.c: 19: unsigned short i;
  7816                           ;DLY.c: 21: for(i=0;i<val;i++)
  7817                           
  7818                           ;incstack = 0
  7819                           ; Regs used in _DLYDelay_ms: [wreg+status,2]
  7820  0BFF  01F5               	clrf	DLYDelay_ms@i
  7821  0C00  01F6               	clrf	DLYDelay_ms@i+1
  7822  0C01                     l149:	
  7823  0C01  0872               	movf	DLYDelay_ms@val+1,w
  7824  0C02  0276               	subwf	DLYDelay_ms@i+1,w
  7825  0C03  1D03               	skipz
  7826  0C04  2C07               	goto	u3395
  7827  0C05  0871               	movf	DLYDelay_ms@val,w
  7828  0C06  0275               	subwf	DLYDelay_ms@i,w
  7829  0C07                     u3395:	
  7830  0C07  1803               	btfsc	3,0
  7831  0C08  0008               	return
  7832  0C09  0064               	clrwdt	;# 
  7833                           
  7834                           ;DLY.c: 24: _delay((unsigned long)((1)*(8000000/4000.0)));
  7835  0C0A  3003               	movlw	3
  7836  0C0B  00F4               	movwf	??_DLYDelay_ms+1
  7837  0C0C  3097               	movlw	151
  7838  0C0D  00F3               	movwf	??_DLYDelay_ms
  7839  0C0E                     u4097:	
  7840  0C0E  0BF3               	decfsz	??_DLYDelay_ms,f
  7841  0C0F  2C0E               	goto	u4097
  7842  0C10  0BF4               	decfsz	??_DLYDelay_ms+1,f
  7843  0C11  2C0E               	goto	u4097
  7844  0C12  3200               	nop2
  7845  0C13  3001               	movlw	1
  7846  0C14  07F5               	addwf	DLYDelay_ms@i,f
  7847  0C15  3000               	movlw	0
  7848  0C16  3DF6               	addwfc	DLYDelay_ms@i+1,f
  7849  0C17  2C01               	goto	l149
  7850  0C18                     __end_of_DLYDelay_ms:	
  7851                           
  7852                           	psect	text41
  7853  0B92                     __ptext41:	
  7854 ;; *************** function _CC1Strobe *****************
  7855 ;; Defined at:
  7856 ;;		line 101 in file "CC1.c"
  7857 ;; Parameters:    Size  Location     Type
  7858 ;;  e_stb           1    wreg     enum E1836
  7859 ;; Auto vars:     Size  Location     Type
  7860 ;;  e_stb           1    8[COMMON] enum E1836
  7861 ;;  cc1Stb          1    9[COMMON] unsigned char 
  7862 ;; Return value:  Size  Location     Type
  7863 ;;		None               void
  7864 ;; Registers used:
  7865 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7866 ;; Tracked objects:
  7867 ;;		On entry : 0/0
  7868 ;;		On exit  : 0/0
  7869 ;;		Unchanged: 0/0
  7870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7871 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7872 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7873 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7874 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7875 ;;Total ram usage:        3 bytes
  7876 ;; Hardware stack levels used:    1
  7877 ;; Hardware stack levels required when called:    3
  7878 ;; This function calls:
  7879 ;;		_SPIWrite
  7880 ;; This function is called by:
  7881 ;;		_CC1Init
  7882 ;;		_CC1Sleep
  7883 ;;		_RTXInit
  7884 ;;		_RTXSndPkt
  7885 ;;		_RTXReadPkt
  7886 ;; This function uses a non-reentrant model
  7887 ;;
  7888                           
  7889                           
  7890                           ;psect for function _CC1Strobe
  7891  0B92                     _CC1Strobe:	
  7892                           
  7893                           ;incstack = 0
  7894                           ; Regs used in _CC1Strobe: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7895                           ;CC1Strobe@e_stb stored from wreg
  7896  0B92  00F8               	movwf	CC1Strobe@e_stb
  7897                           
  7898                           ;CC1.c: 103: unsigned char cc1Stb;
  7899                           ;CC1.c: 106: LATAbits.LATA5=0;
  7900  0B93  0022               	movlb	2	; select bank2
  7901  0B94  128C               	bcf	12,5	;volatile
  7902                           
  7903                           ;CC1.c: 109: cc1Stb=((e_stb&0b00111111)|0b10000000);
  7904  0B95  0878               	movf	CC1Strobe@e_stb,w
  7905  0B96  393F               	andlw	63
  7906  0B97  3880               	iorlw	128
  7907  0B98  00F7               	movwf	??_CC1Strobe
  7908  0B99  0877               	movf	??_CC1Strobe,w
  7909  0B9A  00F9               	movwf	CC1Strobe@cc1Stb
  7910                           
  7911                           ;CC1.c: 110: SPIWrite((&(cc1Stb)),1);
  7912  0B9B  3079               	movlw	low CC1Strobe@cc1Stb
  7913  0B9C  00F1               	movwf	SPIWrite@srcPtr
  7914  0B9D  3000               	movlw	high CC1Strobe@cc1Stb
  7915  0B9E  00F2               	movwf	SPIWrite@srcPtr+1
  7916  0B9F  01F3               	clrf	SPIWrite@len
  7917  0BA0  0AF3               	incf	SPIWrite@len,f
  7918  0BA1  318C  2469         	fcall	_SPIWrite
  7919                           
  7920                           ;CC1.c: 113: LATAbits.LATA5=1;
  7921  0BA3  0022               	movlb	2	; select bank2
  7922  0BA4  168C               	bsf	12,5	;volatile
  7923  0BA5  0008               	return
  7924  0BA6                     __end_of_CC1Strobe:	
  7925                           
  7926                           	psect	text42
  7927  0C69                     __ptext42:	
  7928 ;; *************** function _SPIWrite *****************
  7929 ;; Defined at:
  7930 ;;		line 39 in file "SPI.c"
  7931 ;; Parameters:    Size  Location     Type
  7932 ;;  srcPtr          2    1[COMMON] PTR unsigned char 
  7933 ;;		 -> pktTx(11), CC1Write@cc1Addr(1), CC1Read@cc1Addr(1), CC1Strobe@cc1Stb(1), 
  7934 ;;		 -> cc1PaTable(8), cc1InitVal(47), 
  7935 ;;  len             1    3[COMMON] unsigned char 
  7936 ;; Auto vars:     Size  Location     Type
  7937 ;;  i               1    6[COMMON] unsigned char 
  7938 ;; Return value:  Size  Location     Type
  7939 ;;		None               void
  7940 ;; Registers used:
  7941 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7942 ;; Tracked objects:
  7943 ;;		On entry : 0/0
  7944 ;;		On exit  : 0/0
  7945 ;;		Unchanged: 0/0
  7946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7947 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7948 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7949 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7950 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7951 ;;Total ram usage:        6 bytes
  7952 ;; Hardware stack levels used:    1
  7953 ;; Hardware stack levels required when called:    2
  7954 ;; This function calls:
  7955 ;;		Nothing
  7956 ;; This function is called by:
  7957 ;;		_CC1Strobe
  7958 ;;		_CC1Read
  7959 ;;		_CC1Write
  7960 ;; This function uses a non-reentrant model
  7961 ;;
  7962                           
  7963                           
  7964                           ;psect for function _SPIWrite
  7965  0C69                     _SPIWrite:	
  7966                           
  7967                           ;SPI.c: 41: unsigned char i;
  7968                           ;SPI.c: 43: for(i=0;i<len;i++)
  7969                           
  7970                           ;incstack = 0
  7971                           ; Regs used in _SPIWrite: [wreg+fsr1l+fsr1h+status,2+status,0]
  7972  0C69  01F6               	clrf	SPIWrite@i
  7973  0C6A                     l3258:	
  7974  0C6A  0873               	movf	SPIWrite@len,w
  7975  0C6B  0276               	subwf	SPIWrite@i,w
  7976  0C6C  1803               	btfsc	3,0
  7977  0C6D  0008               	return
  7978                           
  7979                           ;SPI.c: 44: {
  7980                           ;SPI.c: 45: PIR1bits.SSPIF=0;
  7981  0C6E  0020               	movlb	0	; select bank0
  7982  0C6F  1191               	bcf	17,3	;volatile
  7983                           
  7984                           ;SPI.c: 46: SSPBUF=(*(srcPtr+i));
  7985  0C70  0876               	movf	SPIWrite@i,w
  7986  0C71  00F4               	movwf	??_SPIWrite
  7987  0C72  01F5               	clrf	??_SPIWrite+1
  7988  0C73  0874               	movf	??_SPIWrite,w
  7989  0C74  0771               	addwf	SPIWrite@srcPtr,w
  7990  0C75  0086               	movwf	6
  7991  0C76  0875               	movf	??_SPIWrite+1,w
  7992  0C77  3D72               	addwfc	SPIWrite@srcPtr+1,w
  7993  0C78  0087               	movwf	7
  7994  0C79  0801               	movf	1,w
  7995  0C7A  0024               	movlb	4	; select bank4
  7996  0C7B  0091               	movwf	17	;volatile
  7997  0C7C                     l78:	
  7998                           ;SPI.c: 47: while(!(PIR1bits.SSPIF))
  7999                           
  8000  0C7C  0020               	movlb	0	; select bank0
  8001  0C7D  1991               	btfsc	17,3	;volatile
  8002  0C7E  2C81               	goto	l3256
  8003                           
  8004                           ;SPI.c: 48: __nop();
  8005  0C7F  0000               	nop
  8006  0C80  2C7C               	goto	l78
  8007  0C81                     l3256:	
  8008  0C81  3001               	movlw	1
  8009  0C82  00F4               	movwf	??_SPIWrite
  8010  0C83  0874               	movf	??_SPIWrite,w
  8011  0C84  07F6               	addwf	SPIWrite@i,f
  8012  0C85  2C6A               	goto	l3258
  8013  0C86                     __end_of_SPIWrite:	
  8014                           
  8015                           	psect	text43
  8016  0BBA                     __ptext43:	
  8017 ;; *************** function _PGMInit *****************
  8018 ;; Defined at:
  8019 ;;		line 17 in file "PGM.c"
  8020 ;; Parameters:    Size  Location     Type
  8021 ;;  state           1    wreg     unsigned char 
  8022 ;; Auto vars:     Size  Location     Type
  8023 ;;  state           1   11[COMMON] unsigned char 
  8024 ;; Return value:  Size  Location     Type
  8025 ;;		None               void
  8026 ;; Registers used:
  8027 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8028 ;; Tracked objects:
  8029 ;;		On entry : 0/0
  8030 ;;		On exit  : 0/0
  8031 ;;		Unchanged: 0/0
  8032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8034 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8036 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8037 ;;Total ram usage:        1 bytes
  8038 ;; Hardware stack levels used:    1
  8039 ;; Hardware stack levels required when called:    6
  8040 ;; This function calls:
  8041 ;;		_PGMCheckNvm
  8042 ;;		_PGMReadNvm
  8043 ;; This function is called by:
  8044 ;;		_main
  8045 ;; This function uses a non-reentrant model
  8046 ;;
  8047                           
  8048                           
  8049                           ;psect for function _PGMInit
  8050  0BBA                     _PGMInit:	
  8051                           
  8052                           ;incstack = 0
  8053                           ; Regs used in _PGMInit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8054                           ;PGMInit@state stored from wreg
  8055  0BBA  00FB               	movwf	PGMInit@state
  8056                           
  8057                           ;PGM.c: 19: switch(state)
  8058  0BBB  2BC7               	goto	l3088
  8059  0BBC                     l3078:	
  8060                           ;PGM.c: 20: {
  8061                           ;PGM.c: 21: case 0:
  8062                           
  8063                           
  8064                           ;PGM.c: 23: T1CON=0b00000001;
  8065  0BBC  3001               	movlw	1
  8066  0BBD  0020               	movlb	0	; select bank0
  8067  0BBE  0098               	movwf	24	;volatile
  8068                           
  8069                           ;PGM.c: 24: break;
  8070  0BBF  0008               	return
  8071  0BC0                     l3080:	
  8072                           ;PGM.c: 25: case 1:
  8073                           
  8074                           
  8075                           ;PGM.c: 27: pgm_flg.val=0;
  8076  0BC0  01FC               	clrf	_pgm_flg
  8077                           
  8078                           ;PGM.c: 28: PGMReadNvm();
  8079  0BC1  318B  2333  318B   	fcall	_PGMReadNvm
  8080                           
  8081                           ;PGM.c: 29: PGMCheckNvm();
  8082  0BC4  318B  230A         	fcall	_PGMCheckNvm
  8083                           
  8084                           ;PGM.c: 34: }
  8085                           
  8086                           ;PGM.c: 30: break;
  8087  0BC6  0008               	return
  8088  0BC7                     l3088:	
  8089  0BC7  087B               	movf	PGMInit@state,w
  8090                           
  8091                           ; Switch size 1, requested type "space"
  8092                           ; Number of cases is 2, Range of values is 0 to 1
  8093                           ; switch strategies available:
  8094                           ; Name         Instructions Cycles
  8095                           ; simple_byte            7     4 (average)
  8096                           ; direct_byte           10     6 (fixed)
  8097                           ; jumptable            260     6 (fixed)
  8098                           ;	Chosen strategy is simple_byte
  8099  0BC8  3A00               	xorlw	0	; case 0
  8100  0BC9  1903               	skipnz
  8101  0BCA  2BBC               	goto	l3078
  8102  0BCB  3A01               	xorlw	1	; case 1
  8103  0BCC  1903               	skipnz
  8104  0BCD  2BC0               	goto	l3080
  8105  0BCE  2BCF               	goto	l378
  8106  0BCF                     l378:	
  8107  0BCF  0008               	return
  8108  0BD0                     __end_of_PGMInit:	
  8109                           
  8110                           	psect	text44
  8111  0B33                     __ptext44:	
  8112 ;; *************** function _PGMReadNvm *****************
  8113 ;; Defined at:
  8114 ;;		line 41 in file "PGM.c"
  8115 ;; Parameters:    Size  Location     Type
  8116 ;;		None
  8117 ;; Auto vars:     Size  Location     Type
  8118 ;;		None
  8119 ;; Return value:  Size  Location     Type
  8120 ;;		None               void
  8121 ;; Registers used:
  8122 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8123 ;; Tracked objects:
  8124 ;;		On entry : 0/0
  8125 ;;		On exit  : 0/0
  8126 ;;		Unchanged: 0/0
  8127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8129 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8130 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8131 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8132 ;;Total ram usage:        2 bytes
  8133 ;; Hardware stack levels used:    1
  8134 ;; Hardware stack levels required when called:    3
  8135 ;; This function calls:
  8136 ;;		_NVMRead
  8137 ;; This function is called by:
  8138 ;;		_PGMInit
  8139 ;; This function uses a non-reentrant model
  8140 ;;
  8141                           
  8142                           
  8143                           ;psect for function _PGMReadNvm
  8144  0B33                     _PGMReadNvm:	
  8145                           
  8146                           ;PGM.c: 43: NVMRead((unsigned short)(&(nvm_pgm_cfg)),(char *)(&(pgm_cfg)),sizeof(ts_PGM_
      +                          CFG));
  8147                           
  8148                           ;incstack = 0
  8149                           ; Regs used in _PGMReadNvm: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8150  0B33  3020               	movlw	32
  8151  0B34  00F1               	movwf	NVMRead@addr
  8152  0B35  3038               	movlw	56
  8153  0B36  00F2               	movwf	NVMRead@addr+1
  8154  0B37  30C8               	movlw	(low (_pgm_cfg| 0))& (0+255)
  8155  0B38  00F8               	movwf	??_PGMReadNvm
  8156  0B39  0878               	movf	??_PGMReadNvm,w
  8157  0B3A  00F3               	movwf	NVMRead@dest
  8158  0B3B  3005               	movlw	5
  8159  0B3C  00F9               	movwf	??_PGMReadNvm+1
  8160  0B3D  0879               	movf	??_PGMReadNvm+1,w
  8161  0B3E  00F4               	movwf	NVMRead@len
  8162  0B3F  318D  257F         	fcall	_NVMRead
  8163  0B41  0008               	return
  8164  0B42                     __end_of_PGMReadNvm:	
  8165                           
  8166                           	psect	text45
  8167  0D7F                     __ptext45:	
  8168 ;; *************** function _NVMRead *****************
  8169 ;; Defined at:
  8170 ;;		line 23 in file "NVM.c"
  8171 ;; Parameters:    Size  Location     Type
  8172 ;;  addr            2    1[COMMON] unsigned short 
  8173 ;;  dest            1    3[COMMON] PTR unsigned char 
  8174 ;;		 -> pgm_cfg(5), 
  8175 ;;  len             1    4[COMMON] unsigned char 
  8176 ;; Auto vars:     Size  Location     Type
  8177 ;;  i               1    7[COMMON] unsigned char 
  8178 ;; Return value:  Size  Location     Type
  8179 ;;		None               void
  8180 ;; Registers used:
  8181 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8182 ;; Tracked objects:
  8183 ;;		On entry : 0/0
  8184 ;;		On exit  : 0/0
  8185 ;;		Unchanged: 0/0
  8186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8187 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8188 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8189 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8190 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8191 ;;Total ram usage:        7 bytes
  8192 ;; Hardware stack levels used:    1
  8193 ;; Hardware stack levels required when called:    2
  8194 ;; This function calls:
  8195 ;;		Nothing
  8196 ;; This function is called by:
  8197 ;;		_PGMReadNvm
  8198 ;; This function uses a non-reentrant model
  8199 ;;
  8200                           
  8201                           
  8202                           ;psect for function _NVMRead
  8203  0D7F                     _NVMRead:	
  8204                           
  8205                           ;NVM.c: 25: unsigned char i;
  8206                           ;NVM.c: 27: PMCON1bits.CFGS=0;
  8207                           
  8208                           ;incstack = 0
  8209                           ; Regs used in _NVMRead: [wreg+fsr1l+fsr1h+status,2+status,0]
  8210  0D7F  0023               	movlb	3	; select bank3
  8211  0D80  1315               	bcf	21,6	;volatile
  8212                           
  8213                           ;NVM.c: 28: for(i=0;i<len;i++)
  8214  0D81  01F7               	clrf	NVMRead@i
  8215  0D82                     l2782:	
  8216  0D82  0874               	movf	NVMRead@len,w
  8217  0D83  0277               	subwf	NVMRead@i,w
  8218  0D84  1803               	btfsc	3,0
  8219  0D85  0008               	return
  8220  0D86  0064               	clrwdt	;# 
  8221                           
  8222                           ;NVM.c: 31: PMADR=(addr+i);
  8223  0D87  0877               	movf	NVMRead@i,w
  8224  0D88  0771               	addwf	NVMRead@addr,w
  8225  0D89  00F5               	movwf	??_NVMRead
  8226  0D8A  0872               	movf	NVMRead@addr+1,w
  8227  0D8B  1803               	skipnc
  8228  0D8C  0A72               	incf	NVMRead@addr+1,w
  8229  0D8D  00F6               	movwf	??_NVMRead+1
  8230  0D8E  0875               	movf	??_NVMRead,w
  8231  0D8F  0023               	movlb	3	; select bank3
  8232  0D90  0091               	movwf	17	;volatile
  8233  0D91  0876               	movf	??_NVMRead+1,w
  8234  0D92  0092               	movwf	18	;volatile
  8235                           
  8236                           ;NVM.c: 32: PMCON1bits.RD=1;
  8237  0D93  1415               	bsf	21,0	;volatile
  8238  0D94                     l240:	
  8239                           ;NVM.c: 33: while(PMCON1bits.RD);
  8240                           
  8241  0D94  1815               	btfsc	21,0	;volatile
  8242  0D95  2D94               	goto	l240
  8243                           
  8244                           ;NVM.c: 34: (*(dest+i))=PMDAT;
  8245  0D96  0813               	movf	19,w	;volatile
  8246  0D97  00F5               	movwf	??_NVMRead
  8247  0D98  0877               	movf	NVMRead@i,w
  8248  0D99  0773               	addwf	NVMRead@dest,w
  8249  0D9A  00F6               	movwf	??_NVMRead+1
  8250  0D9B  0876               	movf	??_NVMRead+1,w
  8251  0D9C  0086               	movwf	6
  8252  0D9D  0187               	clrf	7
  8253  0D9E  0875               	movf	??_NVMRead,w
  8254  0D9F  0081               	movwf	1
  8255  0DA0  3001               	movlw	1
  8256  0DA1  00F5               	movwf	??_NVMRead
  8257  0DA2  0875               	movf	??_NVMRead,w
  8258  0DA3  07F7               	addwf	NVMRead@i,f
  8259  0DA4  2D82               	goto	l2782
  8260  0DA5                     __end_of_NVMRead:	
  8261                           
  8262                           	psect	text46
  8263  0B0A                     __ptext46:	
  8264 ;; *************** function _PGMCheckNvm *****************
  8265 ;; Defined at:
  8266 ;;		line 51 in file "PGM.c"
  8267 ;; Parameters:    Size  Location     Type
  8268 ;;		None
  8269 ;; Auto vars:     Size  Location     Type
  8270 ;;		None
  8271 ;; Return value:  Size  Location     Type
  8272 ;;		None               void
  8273 ;; Registers used:
  8274 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8275 ;; Tracked objects:
  8276 ;;		On entry : 0/0
  8277 ;;		On exit  : 0/0
  8278 ;;		Unchanged: 0/0
  8279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8281 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8283 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8284 ;;Total ram usage:        0 bytes
  8285 ;; Hardware stack levels used:    1
  8286 ;; Hardware stack levels required when called:    5
  8287 ;; This function calls:
  8288 ;;		_PGMNvmReset
  8289 ;; This function is called by:
  8290 ;;		_PGMInit
  8291 ;; This function uses a non-reentrant model
  8292 ;;
  8293                           
  8294                           
  8295                           ;psect for function _PGMCheckNvm
  8296  0B0A                     _PGMCheckNvm:	
  8297                           
  8298                           ;PGM.c: 53: if(pgm_cfg.valChk1!=0x5C || pgm_cfg.valChk2!=0xC5)
  8299                           
  8300                           ;incstack = 0
  8301                           ; Regs used in _PGMCheckNvm: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8302  0B0A  305C               	movlw	92
  8303  0B0B  0021               	movlb	1	; select bank1
  8304  0B0C  0648               	xorwf	_pgm_cfg^(0+128),w
  8305  0B0D  1D03               	btfss	3,2
  8306  0B0E  2B13               	goto	l2882
  8307  0B0F  30C5               	movlw	197
  8308  0B10  0649               	xorwf	(_pgm_cfg^(0+128)+1),w
  8309  0B11  1903               	btfsc	3,2
  8310  0B12  0008               	return
  8311  0B13                     l2882:	
  8312                           
  8313                           ;PGM.c: 54: PGMNvmReset();
  8314  0B13  318B  2360         	fcall	_PGMNvmReset
  8315  0B15  0008               	return
  8316  0B16                     __end_of_PGMCheckNvm:	
  8317                           
  8318                           	psect	text47
  8319  0B60                     __ptext47:	
  8320 ;; *************** function _PGMNvmReset *****************
  8321 ;; Defined at:
  8322 ;;		line 57 in file "PGM.c"
  8323 ;; Parameters:    Size  Location     Type
  8324 ;;		None
  8325 ;; Auto vars:     Size  Location     Type
  8326 ;;		None
  8327 ;; Return value:  Size  Location     Type
  8328 ;;		None               void
  8329 ;; Registers used:
  8330 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8331 ;; Tracked objects:
  8332 ;;		On entry : 0/0
  8333 ;;		On exit  : 0/0
  8334 ;;		Unchanged: 0/0
  8335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8336 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8337 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8338 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8339 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8340 ;;Total ram usage:        1 bytes
  8341 ;; Hardware stack levels used:    1
  8342 ;; Hardware stack levels required when called:    4
  8343 ;; This function calls:
  8344 ;;		_PGMWriteNvm
  8345 ;; This function is called by:
  8346 ;;		_PGMCheckNvm
  8347 ;; This function uses a non-reentrant model
  8348 ;;
  8349                           
  8350                           
  8351                           ;psect for function _PGMNvmReset
  8352  0B60                     _PGMNvmReset:	
  8353                           
  8354                           ;PGM.c: 60: pgm_cfg.valChk1=0x5C;
  8355                           
  8356                           ;incstack = 0
  8357                           ; Regs used in _PGMNvmReset: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8358  0B60  305C               	movlw	92
  8359  0B61  00FA               	movwf	??_PGMNvmReset
  8360  0B62  087A               	movf	??_PGMNvmReset,w
  8361  0B63  0021               	movlb	1	; select bank1
  8362  0B64  00C8               	movwf	_pgm_cfg^(0+128)
  8363                           
  8364                           ;PGM.c: 61: pgm_cfg.valChk2=0xC5;
  8365  0B65  30C5               	movlw	197
  8366  0B66  00FA               	movwf	??_PGMNvmReset
  8367  0B67  087A               	movf	??_PGMNvmReset,w
  8368  0B68  00C9               	movwf	(_pgm_cfg^(0+128)+1)
  8369                           
  8370                           ;PGM.c: 62: pgm_cfg.menu.val=0x00;
  8371  0B69  01CA               	clrf	(_pgm_cfg^(0+128)+2)
  8372                           
  8373                           ;PGM.c: 63: pgm_cfg.sensId=0x00;
  8374  0B6A  01CB               	clrf	(_pgm_cfg^(0+128)+3)
  8375                           
  8376                           ;PGM.c: 64: pgm_cfg.baseId=0x00;
  8377  0B6B  01CC               	clrf	(_pgm_cfg^(0+128)+4)
  8378                           
  8379                           ;PGM.c: 66: PGMWriteNvm();
  8380  0B6C  318B  2324         	fcall	_PGMWriteNvm
  8381  0B6E  0001               	reset	;# 
  8382  0B6F  0008               	return
  8383  0B70                     __end_of_PGMNvmReset:	
  8384                           
  8385                           	psect	text48
  8386  0B24                     __ptext48:	
  8387 ;; *************** function _PGMWriteNvm *****************
  8388 ;; Defined at:
  8389 ;;		line 46 in file "PGM.c"
  8390 ;; Parameters:    Size  Location     Type
  8391 ;;		None
  8392 ;; Auto vars:     Size  Location     Type
  8393 ;;		None
  8394 ;; Return value:  Size  Location     Type
  8395 ;;		None               void
  8396 ;; Registers used:
  8397 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8398 ;; Tracked objects:
  8399 ;;		On entry : 0/0
  8400 ;;		On exit  : 0/0
  8401 ;;		Unchanged: 0/0
  8402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8404 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8405 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8406 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8407 ;;Total ram usage:        2 bytes
  8408 ;; Hardware stack levels used:    1
  8409 ;; Hardware stack levels required when called:    3
  8410 ;; This function calls:
  8411 ;;		_NVMWrite
  8412 ;; This function is called by:
  8413 ;;		_PGMNvmReset
  8414 ;;		_PGMSelUp
  8415 ;;		_PGMSelLong
  8416 ;;		_RTXReadPkt
  8417 ;; This function uses a non-reentrant model
  8418 ;;
  8419                           
  8420                           
  8421                           ;psect for function _PGMWriteNvm
  8422  0B24                     _PGMWriteNvm:	
  8423                           
  8424                           ;PGM.c: 48: NVMWrite((unsigned short)(&(nvm_pgm_cfg)),(char *)(&(pgm_cfg)),sizeof(ts_PGM
      +                          _CFG));
  8425                           
  8426                           ;incstack = 0
  8427                           ; Regs used in _PGMWriteNvm: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8428  0B24  3020               	movlw	32
  8429  0B25  00F1               	movwf	NVMWrite@addr
  8430  0B26  3038               	movlw	56
  8431  0B27  00F2               	movwf	NVMWrite@addr+1
  8432  0B28  30C8               	movlw	(low (_pgm_cfg| 0))& (0+255)
  8433  0B29  00F8               	movwf	??_PGMWriteNvm
  8434  0B2A  0878               	movf	??_PGMWriteNvm,w
  8435  0B2B  00F3               	movwf	NVMWrite@source
  8436  0B2C  3005               	movlw	5
  8437  0B2D  00F9               	movwf	??_PGMWriteNvm+1
  8438  0B2E  0879               	movf	??_PGMWriteNvm+1,w
  8439  0B2F  00F4               	movwf	NVMWrite@len
  8440  0B30  3183  23D8         	fcall	_NVMWrite
  8441  0B32  0008               	return
  8442  0B33                     __end_of_PGMWriteNvm:	
  8443                           
  8444                           	psect	text49
  8445  03D8                     __ptext49:	
  8446 ;; *************** function _NVMWrite *****************
  8447 ;; Defined at:
  8448 ;;		line 38 in file "NVM.c"
  8449 ;; Parameters:    Size  Location     Type
  8450 ;;  addr            2    1[COMMON] unsigned short 
  8451 ;;  source          1    3[COMMON] PTR unsigned char 
  8452 ;;		 -> pgm_cfg(5), 
  8453 ;;  len             1    4[COMMON] unsigned char 
  8454 ;; Auto vars:     Size  Location     Type
  8455 ;;  bufTmpRow      64    0[BANK0 ] unsigned short [32]
  8456 ;;  rowAddr         2   64[BANK0 ] unsigned short 
  8457 ;;  j               1   68[BANK0 ] unsigned char 
  8458 ;;  latchAddr       1   67[BANK0 ] unsigned char 
  8459 ;;  i               1   66[BANK0 ] unsigned char 
  8460 ;; Return value:  Size  Location     Type
  8461 ;;		None               void
  8462 ;; Registers used:
  8463 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8464 ;; Tracked objects:
  8465 ;;		On entry : 0/0
  8466 ;;		On exit  : 0/0
  8467 ;;		Unchanged: 0/0
  8468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8469 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8470 ;;      Locals:         0      69       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8471 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8472 ;;      Totals:         7      69       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8473 ;;Total ram usage:       76 bytes
  8474 ;; Hardware stack levels used:    1
  8475 ;; Hardware stack levels required when called:    2
  8476 ;; This function calls:
  8477 ;;		Nothing
  8478 ;; This function is called by:
  8479 ;;		_PGMWriteNvm
  8480 ;; This function uses a non-reentrant model
  8481 ;;
  8482                           
  8483                           
  8484                           ;psect for function _NVMWrite
  8485  03D8                     _NVMWrite:	
  8486                           
  8487                           ;NVM.c: 40: unsigned char i,j,latchAddr;
  8488                           ;NVM.c: 41: unsigned short rowAddr,bufTmpRow[0x20];
  8489                           ;NVM.c: 43: INTCONbits.GIE=0;
  8490                           
  8491                           ;incstack = 0
  8492                           ; Regs used in _NVMWrite: [wreg+fsr1l+fsr1h+status,2+status,0]
  8493  03D8  138B               	bcf	11,7	;volatile
  8494                           
  8495                           ;NVM.c: 44: PMCON1bits.WREN=1;
  8496  03D9  0023               	movlb	3	; select bank3
  8497  03DA  1515               	bsf	21,2	;volatile
  8498                           
  8499                           ;NVM.c: 45: PMCON1bits.CFGS=0;
  8500  03DB  1315               	bcf	21,6	;volatile
  8501                           
  8502                           ;NVM.c: 48: i=0;
  8503  03DC  0020               	movlb	0	; select bank0
  8504  03DD  01E2               	clrf	NVMWrite@i
  8505                           
  8506                           ;NVM.c: 50: rowAddr=(addr&(~(0x001F)));
  8507  03DE  30E0               	movlw	224
  8508  03DF  0571               	andwf	NVMWrite@addr,w
  8509  03E0  00E0               	movwf	NVMWrite@rowAddr
  8510  03E1  30FF               	movlw	255
  8511  03E2  0572               	andwf	NVMWrite@addr+1,w
  8512  03E3  00E1               	movwf	NVMWrite@rowAddr+1
  8513                           
  8514                           ;NVM.c: 51: latchAddr=(addr&0x001F);
  8515  03E4  0871               	movf	NVMWrite@addr,w
  8516  03E5  391F               	andlw	31
  8517  03E6  00F5               	movwf	??_NVMWrite
  8518  03E7  0875               	movf	??_NVMWrite,w
  8519  03E8  00E3               	movwf	NVMWrite@latchAddr
  8520  03E9                     l247:	
  8521                           ;NVM.c: 52: while(i<len)
  8522                           
  8523  03E9  0874               	movf	NVMWrite@len,w
  8524  03EA  0262               	subwf	NVMWrite@i,w
  8525  03EB  1803               	btfsc	3,0
  8526  03EC  2C90               	goto	l267
  8527  03ED  0064               	clrwdt	;# 
  8528                           
  8529                           ;NVM.c: 57: for(j=0;j<sizeof(bufTmpRow)/sizeof(unsigned short);j++)
  8530  03EE  0020               	movlb	0	; select bank0
  8531  03EF  01E4               	clrf	NVMWrite@j
  8532  03F0  3020               	movlw	32
  8533  03F1  0264               	subwf	NVMWrite@j,w
  8534  03F2  1803               	btfsc	3,0
  8535  03F3  2C18               	goto	l250
  8536  03F4                     l249:	
  8537  03F4  0064               	clrwdt	;# 
  8538                           
  8539                           ;NVM.c: 60: PMADR=(rowAddr+j);
  8540  03F5  0020               	movlb	0	; select bank0
  8541  03F6  0864               	movf	NVMWrite@j,w
  8542  03F7  0760               	addwf	NVMWrite@rowAddr,w
  8543  03F8  00F5               	movwf	??_NVMWrite
  8544  03F9  0861               	movf	NVMWrite@rowAddr+1,w
  8545  03FA  1803               	skipnc
  8546  03FB  0A61               	incf	NVMWrite@rowAddr+1,w
  8547  03FC  00F6               	movwf	??_NVMWrite+1
  8548  03FD  0875               	movf	??_NVMWrite,w
  8549  03FE  0023               	movlb	3	; select bank3
  8550  03FF  0091               	movwf	17	;volatile
  8551  0400  0876               	movf	??_NVMWrite+1,w
  8552  0401  0092               	movwf	18	;volatile
  8553                           
  8554                           ;NVM.c: 61: PMCON1bits.RD=1;
  8555  0402  1415               	bsf	21,0	;volatile
  8556  0403                     l251:	
  8557                           ;NVM.c: 62: while(PMCON1bits.RD);
  8558                           
  8559  0403  1815               	btfsc	21,0	;volatile
  8560  0404  2C03               	goto	l251
  8561                           
  8562                           ;NVM.c: 63: bufTmpRow[j]=PMDAT;
  8563  0405  0020               	movlb	0	; select bank0
  8564  0406  3564               	lslf	NVMWrite@j,w
  8565  0407  3E20               	addlw	(low (NVMWrite@bufTmpRow| 0))& (0+255)
  8566  0408  0086               	movwf	6
  8567  0409  0187               	clrf	7
  8568  040A  0023               	movlb	3	; select bank3
  8569  040B  0813               	movf	19,w	;volatile
  8570  040C  3FC0               	movwi [0]fsr1
  8571  040D  0814               	movf	20,w	;volatile
  8572  040E  3FC1               	movwi [1]fsr1
  8573  040F  3001               	movlw	1
  8574  0410  00F5               	movwf	??_NVMWrite
  8575  0411  0875               	movf	??_NVMWrite,w
  8576  0412  0020               	movlb	0	; select bank0
  8577  0413  07E4               	addwf	NVMWrite@j,f
  8578  0414  3020               	movlw	32
  8579  0415  0264               	subwf	NVMWrite@j,w
  8580  0416  1C03               	skipc
  8581  0417  2BF4               	goto	l249
  8582  0418                     l250:	
  8583                           
  8584                           ;NVM.c: 64: }
  8585                           ;NVM.c: 67: PMCON1bits.FREE=1;
  8586  0418  0023               	movlb	3	; select bank3
  8587  0419  1615               	bsf	21,4	;volatile
  8588                           
  8589                           ;NVM.c: 68: PMADR=rowAddr;
  8590  041A  0020               	movlb	0	; select bank0
  8591  041B  0861               	movf	NVMWrite@rowAddr+1,w
  8592  041C  0023               	movlb	3	; select bank3
  8593  041D  0092               	movwf	18	;volatile
  8594  041E  0020               	movlb	0	; select bank0
  8595  041F  0860               	movf	NVMWrite@rowAddr,w
  8596  0420  0023               	movlb	3	; select bank3
  8597  0421  0091               	movwf	17	;volatile
  8598                           
  8599                           ;NVM.c: 69: PMCON2=0x55;
  8600  0422  3055               	movlw	85
  8601  0423  0096               	movwf	22	;volsfr
  8602                           
  8603                           ;NVM.c: 70: PMCON2=0xAA;
  8604  0424  30AA               	movlw	170
  8605  0425  0096               	movwf	22	;volsfr
  8606                           
  8607                           ;NVM.c: 71: PMCON1bits.WR=1;
  8608  0426  1495               	bsf	21,1	;volatile
  8609  0427                     l254:	
  8610                           ;NVM.c: 72: while(PMCON1bits.WR);
  8611                           
  8612  0427  1895               	btfsc	21,1	;volatile
  8613  0428  2C27               	goto	l254
  8614                           
  8615                           ;NVM.c: 73: __nop();
  8616  0429  0000               	nop
  8617                           
  8618                           ;NVM.c: 74: __nop();
  8619  042A  0000               	nop
  8620                           
  8621                           ;NVM.c: 77: for(;latchAddr<sizeof(bufTmpRow)/sizeof(unsigned short);latchAddr++)
  8622  042B  3020               	movlw	32
  8623  042C  0020               	movlb	0	; select bank0
  8624  042D  0263               	subwf	NVMWrite@latchAddr,w
  8625  042E  1803               	btfsc	3,0
  8626  042F  2C53               	goto	l2624
  8627  0430                     l257:	
  8628  0430  0064               	clrwdt	;# 
  8629                           
  8630                           ;NVM.c: 81: if(i>=len)
  8631  0431  0874               	movf	NVMWrite@len,w
  8632  0432  0020               	movlb	0	; select bank0
  8633  0433  0262               	subwf	NVMWrite@i,w
  8634  0434  1803               	btfsc	3,0
  8635  0435  2C53               	goto	l2624
  8636                           
  8637                           ;NVM.c: 84: bufTmpRow[latchAddr]=(*(source+i));
  8638                           
  8639                           ;NVM.c: 82: break;
  8640  0436  0862               	movf	NVMWrite@i,w
  8641  0437  0773               	addwf	NVMWrite@source,w
  8642  0438  00F5               	movwf	??_NVMWrite
  8643  0439  0875               	movf	??_NVMWrite,w
  8644  043A  0086               	movwf	6
  8645  043B  0187               	clrf	7
  8646  043C  0801               	movf	1,w
  8647  043D  00F6               	movwf	??_NVMWrite+1
  8648  043E  01F7               	clrf	??_NVMWrite+2
  8649  043F  3563               	lslf	NVMWrite@latchAddr,w
  8650  0440  3E20               	addlw	(low (NVMWrite@bufTmpRow| 0))& (0+255)
  8651  0441  0086               	movwf	6
  8652  0442  0187               	clrf	7
  8653  0443  0876               	movf	??_NVMWrite+1,w
  8654  0444  3FC0               	movwi [0]fsr1
  8655  0445  0877               	movf	??_NVMWrite+2,w
  8656  0446  3FC1               	movwi [1]fsr1
  8657                           
  8658                           ;NVM.c: 85: i++;
  8659  0447  3001               	movlw	1
  8660  0448  00F5               	movwf	??_NVMWrite
  8661  0449  0875               	movf	??_NVMWrite,w
  8662  044A  07E2               	addwf	NVMWrite@i,f
  8663  044B  3001               	movlw	1
  8664  044C  00F5               	movwf	??_NVMWrite
  8665  044D  0875               	movf	??_NVMWrite,w
  8666  044E  07E3               	addwf	NVMWrite@latchAddr,f
  8667  044F  3020               	movlw	32
  8668  0450  0263               	subwf	NVMWrite@latchAddr,w
  8669  0451  1C03               	skipc
  8670  0452  2C30               	goto	l257
  8671  0453                     l2624:	
  8672                           
  8673                           ;NVM.c: 86: }
  8674                           ;NVM.c: 88: latchAddr=0;
  8675  0453  01E3               	clrf	NVMWrite@latchAddr
  8676                           
  8677                           ;NVM.c: 91: for(j=0;j<sizeof(bufTmpRow)/sizeof(unsigned short);j++)
  8678  0454  01E4               	clrf	NVMWrite@j
  8679  0455  3020               	movlw	32
  8680  0456  0264               	subwf	NVMWrite@j,w
  8681  0457  1803               	btfsc	3,0
  8682  0458  2C8B               	goto	l2646
  8683  0459                     l2630:	
  8684                           
  8685                           ;NVM.c: 92: {
  8686                           ;NVM.c: 94: PMADR=(rowAddr+j);
  8687  0459  0864               	movf	NVMWrite@j,w
  8688  045A  0760               	addwf	NVMWrite@rowAddr,w
  8689  045B  00F5               	movwf	??_NVMWrite
  8690  045C  0861               	movf	NVMWrite@rowAddr+1,w
  8691  045D  1803               	skipnc
  8692  045E  0A61               	incf	NVMWrite@rowAddr+1,w
  8693  045F  00F6               	movwf	??_NVMWrite+1
  8694  0460  0875               	movf	??_NVMWrite,w
  8695  0461  0023               	movlb	3	; select bank3
  8696  0462  0091               	movwf	17	;volatile
  8697  0463  0876               	movf	??_NVMWrite+1,w
  8698  0464  0092               	movwf	18	;volatile
  8699                           
  8700                           ;NVM.c: 95: PMDAT=bufTmpRow[j];
  8701  0465  0020               	movlb	0	; select bank0
  8702  0466  3564               	lslf	NVMWrite@j,w
  8703  0467  3E20               	addlw	(low (NVMWrite@bufTmpRow| 0))& (0+255)
  8704  0468  0086               	movwf	6
  8705  0469  0187               	clrf	7
  8706  046A  3F40               	moviw [0]fsr1
  8707  046B  0023               	movlb	3	; select bank3
  8708  046C  0093               	movwf	19	;volatile
  8709  046D  3F41               	moviw [1]fsr1
  8710  046E  0094               	movwf	20	;volatile
  8711                           
  8712                           ;NVM.c: 97: if(j==(sizeof(bufTmpRow)/sizeof(unsigned short)-1))
  8713  046F  301F               	movlw	31
  8714  0470  0020               	movlb	0	; select bank0
  8715  0471  0664               	xorwf	NVMWrite@j,w
  8716  0472  1D03               	btfss	3,2
  8717  0473  2C77               	goto	l262
  8718                           
  8719                           ;NVM.c: 98: PMCON1bits.LWLO=0;
  8720  0474  0023               	movlb	3	; select bank3
  8721  0475  1295               	bcf	21,5	;volatile
  8722  0476  2C79               	goto	l2638
  8723  0477                     l262:	
  8724                           
  8725                           ;NVM.c: 99: else
  8726                           ;NVM.c: 100: PMCON1bits.LWLO=1;
  8727  0477  0023               	movlb	3	; select bank3
  8728  0478  1695               	bsf	21,5	;volatile
  8729  0479                     l2638:	
  8730                           
  8731                           ;NVM.c: 101: PMCON2=0x55;
  8732  0479  3055               	movlw	85
  8733  047A  0096               	movwf	22	;volsfr
  8734                           
  8735                           ;NVM.c: 102: PMCON2=0xAA;
  8736  047B  30AA               	movlw	170
  8737  047C  0096               	movwf	22	;volsfr
  8738                           
  8739                           ;NVM.c: 103: PMCON1bits.WR=1;
  8740  047D  1495               	bsf	21,1	;volatile
  8741  047E                     l264:	
  8742                           ;NVM.c: 104: while(PMCON1bits.WR);
  8743                           
  8744  047E  1895               	btfsc	21,1	;volatile
  8745  047F  2C7E               	goto	l264
  8746                           
  8747                           ;NVM.c: 105: __nop();
  8748  0480  0000               	nop
  8749                           
  8750                           ;NVM.c: 106: __nop();
  8751  0481  0000               	nop
  8752  0482  3001               	movlw	1
  8753  0483  00F5               	movwf	??_NVMWrite
  8754  0484  0875               	movf	??_NVMWrite,w
  8755  0485  0020               	movlb	0	; select bank0
  8756  0486  07E4               	addwf	NVMWrite@j,f
  8757  0487  3020               	movlw	32
  8758  0488  0264               	subwf	NVMWrite@j,w
  8759  0489  1C03               	skipc
  8760  048A  2C59               	goto	l2630
  8761  048B                     l2646:	
  8762                           
  8763                           ;NVM.c: 107: }
  8764                           ;NVM.c: 109: rowAddr+=0x0020;
  8765  048B  3020               	movlw	32
  8766  048C  07E0               	addwf	NVMWrite@rowAddr,f
  8767  048D  3000               	movlw	0
  8768  048E  3DE1               	addwfc	NVMWrite@rowAddr+1,f
  8769  048F  2BE9               	goto	l247
  8770  0490                     l267:	
  8771                           
  8772                           ;NVM.c: 110: }
  8773                           ;NVM.c: 112: INTCONbits.GIE=1;
  8774  0490  178B               	bsf	11,7	;volatile
  8775                           
  8776                           ;NVM.c: 113: PMCON1bits.WREN=0;
  8777  0491  0023               	movlb	3	; select bank3
  8778  0492  1115               	bcf	21,2	;volatile
  8779  0493  0008               	return
  8780  0494                     __end_of_NVMWrite:	
  8781                           
  8782                           	psect	text50
  8783  0DCB                     __ptext50:	
  8784 ;; *************** function _OUTInit *****************
  8785 ;; Defined at:
  8786 ;;		line 6 in file "OUT.c"
  8787 ;; Parameters:    Size  Location     Type
  8788 ;;  sta             1    wreg     unsigned char 
  8789 ;; Auto vars:     Size  Location     Type
  8790 ;;  sta             1    2[COMMON] unsigned char 
  8791 ;; Return value:  Size  Location     Type
  8792 ;;		None               void
  8793 ;; Registers used:
  8794 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8795 ;; Tracked objects:
  8796 ;;		On entry : 0/0
  8797 ;;		On exit  : 0/0
  8798 ;;		Unchanged: 0/0
  8799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8800 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8801 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8802 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8803 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8804 ;;Total ram usage:        2 bytes
  8805 ;; Hardware stack levels used:    1
  8806 ;; Hardware stack levels required when called:    2
  8807 ;; This function calls:
  8808 ;;		Nothing
  8809 ;; This function is called by:
  8810 ;;		_main
  8811 ;; This function uses a non-reentrant model
  8812 ;;
  8813                           
  8814                           
  8815                           ;psect for function _OUTInit
  8816  0DCB                     _OUTInit:	
  8817                           
  8818                           ;incstack = 0
  8819                           ; Regs used in _OUTInit: [wreg-fsr0h+status,2+status,0]
  8820                           ;OUTInit@sta stored from wreg
  8821  0DCB  00F2               	movwf	OUTInit@sta
  8822                           
  8823                           ;OUT.c: 8: switch(sta)
  8824  0DCC  2DEE               	goto	l2994
  8825  0DCD                     l2988:	
  8826                           ;OUT.c: 9: {
  8827                           ;OUT.c: 10: case 0:
  8828                           
  8829                           
  8830                           ;OUT.c: 12: TRISA&=0b00000110; TRISB&=0b00100111; TRISC&=0b00010000; ANSELA&=0b00000110;
      +                           ANSELB&=0b00100111; ANSELC&=0b00010000; PORTA&=0b11111110; PORTC|=0b10000000;
  8831  0DCD  3006               	movlw	6
  8832  0DCE  00F1               	movwf	??_OUTInit
  8833  0DCF  0871               	movf	??_OUTInit,w
  8834  0DD0  0021               	movlb	1	; select bank1
  8835  0DD1  058C               	andwf	12,f	;volatile
  8836  0DD2  3027               	movlw	39
  8837  0DD3  00F1               	movwf	??_OUTInit
  8838  0DD4  0871               	movf	??_OUTInit,w
  8839  0DD5  058D               	andwf	13,f	;volatile
  8840  0DD6  3010               	movlw	16
  8841  0DD7  00F1               	movwf	??_OUTInit
  8842  0DD8  0871               	movf	??_OUTInit,w
  8843  0DD9  058E               	andwf	14,f	;volatile
  8844  0DDA  3006               	movlw	6
  8845  0DDB  00F1               	movwf	??_OUTInit
  8846  0DDC  0871               	movf	??_OUTInit,w
  8847  0DDD  0023               	movlb	3	; select bank3
  8848  0DDE  058C               	andwf	12,f	;volatile
  8849  0DDF  3027               	movlw	39
  8850  0DE0  00F1               	movwf	??_OUTInit
  8851  0DE1  0871               	movf	??_OUTInit,w
  8852  0DE2  058D               	andwf	13,f	;volatile
  8853  0DE3  3010               	movlw	16
  8854  0DE4  00F1               	movwf	??_OUTInit
  8855  0DE5  0871               	movf	??_OUTInit,w
  8856  0DE6  058E               	andwf	14,f	;volatile
  8857  0DE7  30FE               	movlw	254
  8858  0DE8  00F1               	movwf	??_OUTInit
  8859  0DE9  0871               	movf	??_OUTInit,w
  8860  0DEA  0020               	movlb	0	; select bank0
  8861  0DEB  058C               	andwf	12,f	;volatile
  8862  0DEC  178E               	bsf	14,7	;volatile
  8863                           
  8864                           ;OUT.c: 20: }
  8865                           
  8866                           ;OUT.c: 13: break;
  8867  0DED  0008               	return
  8868  0DEE                     l2994:	
  8869  0DEE  0872               	movf	OUTInit@sta,w
  8870                           
  8871                           ; Switch size 1, requested type "space"
  8872                           ; Number of cases is 1, Range of values is 0 to 0
  8873                           ; switch strategies available:
  8874                           ; Name         Instructions Cycles
  8875                           ; simple_byte            4     3 (average)
  8876                           ; direct_byte            8     6 (fixed)
  8877                           ; jumptable            260     6 (fixed)
  8878                           ;	Chosen strategy is simple_byte
  8879  0DEF  3A00               	xorlw	0	; case 0
  8880  0DF0  1903               	skipnz
  8881  0DF1  2DCD               	goto	l2988
  8882  0DF2  2DF3               	goto	l40
  8883  0DF3                     l40:	
  8884  0DF3  0008               	return
  8885  0DF4                     __end_of_OUTInit:	
  8886                           
  8887                           	psect	text51
  8888  0AFF                     __ptext51:	
  8889 ;; *************** function _NVMInit *****************
  8890 ;; Defined at:
  8891 ;;		line 6 in file "NVM.c"
  8892 ;; Parameters:    Size  Location     Type
  8893 ;;  sta             1    wreg     unsigned char 
  8894 ;; Auto vars:     Size  Location     Type
  8895 ;;  sta             1    1[COMMON] unsigned char 
  8896 ;; Return value:  Size  Location     Type
  8897 ;;		None               void
  8898 ;; Registers used:
  8899 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8900 ;; Tracked objects:
  8901 ;;		On entry : 0/0
  8902 ;;		On exit  : 0/0
  8903 ;;		Unchanged: 0/0
  8904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8906 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8908 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8909 ;;Total ram usage:        1 bytes
  8910 ;; Hardware stack levels used:    1
  8911 ;; Hardware stack levels required when called:    2
  8912 ;; This function calls:
  8913 ;;		Nothing
  8914 ;; This function is called by:
  8915 ;;		_main
  8916 ;; This function uses a non-reentrant model
  8917 ;;
  8918                           
  8919                           
  8920                           ;psect for function _NVMInit
  8921  0AFF                     _NVMInit:	
  8922                           
  8923                           ;incstack = 0
  8924                           ; Regs used in _NVMInit: [wreg-fsr0h+status,2+status,0]
  8925                           ;NVMInit@sta stored from wreg
  8926  0AFF  00F1               	movwf	NVMInit@sta
  8927                           
  8928                           ;NVM.c: 8: switch(sta)
  8929  0B00  2B04               	goto	l3044
  8930  0B01                     l3040:	
  8931                           ;NVM.c: 9: {
  8932                           ;NVM.c: 10: case 0:
  8933                           
  8934                           
  8935                           ;NVM.c: 12: PMCON1=0b00000000;
  8936  0B01  0023               	movlb	3	; select bank3
  8937  0B02  0195               	clrf	21	;volatile
  8938                           
  8939                           ;NVM.c: 20: }
  8940                           
  8941                           ;NVM.c: 13: break;
  8942  0B03  0008               	return
  8943  0B04                     l3044:	
  8944  0B04  0871               	movf	NVMInit@sta,w
  8945                           
  8946                           ; Switch size 1, requested type "space"
  8947                           ; Number of cases is 1, Range of values is 0 to 0
  8948                           ; switch strategies available:
  8949                           ; Name         Instructions Cycles
  8950                           ; simple_byte            4     3 (average)
  8951                           ; direct_byte            8     6 (fixed)
  8952                           ; jumptable            260     6 (fixed)
  8953                           ;	Chosen strategy is simple_byte
  8954  0B05  3A00               	xorlw	0	; case 0
  8955  0B06  1903               	skipnz
  8956  0B07  2B01               	goto	l3040
  8957  0B08  2B09               	goto	l235
  8958  0B09                     l235:	
  8959  0B09  0008               	return
  8960  0B0A                     __end_of_NVMInit:	
  8961                           
  8962                           	psect	text52
  8963  0AF4                     __ptext52:	
  8964 ;; *************** function _LEDInit *****************
  8965 ;; Defined at:
  8966 ;;		line 7 in file "LED.c"
  8967 ;; Parameters:    Size  Location     Type
  8968 ;;  sta             1    wreg     unsigned char 
  8969 ;; Auto vars:     Size  Location     Type
  8970 ;;  sta             1    1[COMMON] unsigned char 
  8971 ;; Return value:  Size  Location     Type
  8972 ;;		None               void
  8973 ;; Registers used:
  8974 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8975 ;; Tracked objects:
  8976 ;;		On entry : 0/0
  8977 ;;		On exit  : 0/0
  8978 ;;		Unchanged: 0/0
  8979 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8981 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8983 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8984 ;;Total ram usage:        1 bytes
  8985 ;; Hardware stack levels used:    1
  8986 ;; Hardware stack levels required when called:    2
  8987 ;; This function calls:
  8988 ;;		Nothing
  8989 ;; This function is called by:
  8990 ;;		_main
  8991 ;; This function uses a non-reentrant model
  8992 ;;
  8993                           
  8994                           
  8995                           ;psect for function _LEDInit
  8996  0AF4                     _LEDInit:	
  8997                           
  8998                           ;incstack = 0
  8999                           ; Regs used in _LEDInit: [wreg-fsr0h+status,2+status,0]
  9000                           ;LEDInit@sta stored from wreg
  9001  0AF4  00F1               	movwf	LEDInit@sta
  9002                           
  9003                           ;LED.c: 9: switch(sta)
  9004  0AF5  2AF9               	goto	l3036
  9005  0AF6                     l195:	
  9006                           ;LED.c: 10: {
  9007                           ;LED.c: 17: case 2:
  9008                           
  9009                           
  9010                           ;LED.c: 19: LATCbits.LATC7=1;
  9011  0AF6  0022               	movlb	2	; select bank2
  9012  0AF7  178E               	bsf	14,7	;volatile
  9013                           
  9014                           ;LED.c: 21: }
  9015                           
  9016                           ;LED.c: 20: break;
  9017  0AF8  0008               	return
  9018  0AF9                     l3036:	
  9019  0AF9  0871               	movf	LEDInit@sta,w
  9020                           
  9021                           ; Switch size 1, requested type "space"
  9022                           ; Number of cases is 1, Range of values is 2 to 2
  9023                           ; switch strategies available:
  9024                           ; Name         Instructions Cycles
  9025                           ; simple_byte            4     3 (average)
  9026                           ; direct_byte           11     9 (fixed)
  9027                           ; jumptable            263     9 (fixed)
  9028                           ;	Chosen strategy is simple_byte
  9029  0AFA  3A02               	xorlw	2	; case 2
  9030  0AFB  1903               	skipnz
  9031  0AFC  2AF6               	goto	l195
  9032  0AFD  2AFE               	goto	l197
  9033  0AFE                     l197:	
  9034  0AFE  0008               	return
  9035  0AFF                     __end_of_LEDInit:	
  9036                           
  9037                           	psect	text53
  9038  0D1C                     __ptext53:	
  9039 ;; *************** function _INInit *****************
  9040 ;; Defined at:
  9041 ;;		line 6 in file "IN.c"
  9042 ;; Parameters:    Size  Location     Type
  9043 ;;  sta             1    wreg     unsigned char 
  9044 ;; Auto vars:     Size  Location     Type
  9045 ;;  sta             1    2[COMMON] unsigned char 
  9046 ;; Return value:  Size  Location     Type
  9047 ;;		None               void
  9048 ;; Registers used:
  9049 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9050 ;; Tracked objects:
  9051 ;;		On entry : 0/0
  9052 ;;		On exit  : 0/0
  9053 ;;		Unchanged: 0/0
  9054 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9056 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9057 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9058 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9059 ;;Total ram usage:        2 bytes
  9060 ;; Hardware stack levels used:    1
  9061 ;; Hardware stack levels required when called:    2
  9062 ;; This function calls:
  9063 ;;		Nothing
  9064 ;; This function is called by:
  9065 ;;		_main
  9066 ;; This function uses a non-reentrant model
  9067 ;;
  9068                           
  9069                           
  9070                           ;psect for function _INInit
  9071  0D1C                     _INInit:	
  9072                           
  9073                           ;incstack = 0
  9074                           ; Regs used in _INInit: [wreg-fsr0h+status,2+status,0]
  9075                           ;INInit@sta stored from wreg
  9076  0D1C  00F2               	movwf	INInit@sta
  9077                           
  9078                           ;IN.c: 8: switch(sta)
  9079  0D1D  2D35               	goto	l2984
  9080  0D1E                     l2976:	
  9081                           ;IN.c: 9: {
  9082                           ;IN.c: 10: case 0:
  9083                           
  9084                           
  9085                           ;IN.c: 12: TRISA|=0b00000110; TRISB|=0b00100111; TRISC|=0b00010000; ANSELB&=0b11011000; 
      +                          ANSELC&=0b11101111; WPUB=0b00100111;
  9086  0D1E  3006               	movlw	6
  9087  0D1F  00F1               	movwf	??_INInit
  9088  0D20  0871               	movf	??_INInit,w
  9089  0D21  0021               	movlb	1	; select bank1
  9090  0D22  048C               	iorwf	12,f	;volatile
  9091  0D23  3027               	movlw	39
  9092  0D24  00F1               	movwf	??_INInit
  9093  0D25  0871               	movf	??_INInit,w
  9094  0D26  048D               	iorwf	13,f	;volatile
  9095  0D27  160E               	bsf	14,4	;volatile
  9096  0D28  30D8               	movlw	216
  9097  0D29  00F1               	movwf	??_INInit
  9098  0D2A  0871               	movf	??_INInit,w
  9099  0D2B  0023               	movlb	3	; select bank3
  9100  0D2C  058D               	andwf	13,f	;volatile
  9101  0D2D  30EF               	movlw	239
  9102  0D2E  00F1               	movwf	??_INInit
  9103  0D2F  0871               	movf	??_INInit,w
  9104  0D30  058E               	andwf	14,f	;volatile
  9105  0D31  3027               	movlw	39
  9106  0D32  0024               	movlb	4	; select bank4
  9107  0D33  008D               	movwf	13	;volatile
  9108                           
  9109                           ;IN.c: 20: }
  9110                           
  9111                           ;IN.c: 13: break;
  9112  0D34  0008               	return
  9113  0D35                     l2984:	
  9114  0D35  0872               	movf	INInit@sta,w
  9115                           
  9116                           ; Switch size 1, requested type "space"
  9117                           ; Number of cases is 1, Range of values is 0 to 0
  9118                           ; switch strategies available:
  9119                           ; Name         Instructions Cycles
  9120                           ; simple_byte            4     3 (average)
  9121                           ; direct_byte            8     6 (fixed)
  9122                           ; jumptable            260     6 (fixed)
  9123                           ;	Chosen strategy is simple_byte
  9124  0D36  3A00               	xorlw	0	; case 0
  9125  0D37  1903               	skipnz
  9126  0D38  2D1E               	goto	l2976
  9127  0D39  2D3A               	goto	l18
  9128  0D3A                     l18:	
  9129  0D3A  0008               	return
  9130  0D3B                     __end_of_INInit:	
  9131                           
  9132                           	psect	text54
  9133  0C86                     __ptext54:	
  9134 ;; *************** function _DINTask *****************
  9135 ;; Defined at:
  9136 ;;		line 79 in file "DIN.c"
  9137 ;; Parameters:    Size  Location     Type
  9138 ;;		None
  9139 ;; Auto vars:     Size  Location     Type
  9140 ;;		None
  9141 ;; Return value:  Size  Location     Type
  9142 ;;		None               void
  9143 ;; Registers used:
  9144 ;;		wreg, status,2, status,0
  9145 ;; Tracked objects:
  9146 ;;		On entry : 0/0
  9147 ;;		On exit  : 0/0
  9148 ;;		Unchanged: 0/0
  9149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9151 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9152 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9153 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9154 ;;Total ram usage:        1 bytes
  9155 ;; Hardware stack levels used:    1
  9156 ;; Hardware stack levels required when called:    2
  9157 ;; This function calls:
  9158 ;;		Nothing
  9159 ;; This function is called by:
  9160 ;;		_main
  9161 ;; This function uses a non-reentrant model
  9162 ;;
  9163                           
  9164                           
  9165                           ;psect for function _DINTask
  9166  0C86                     _DINTask:	
  9167                           
  9168                           ;DIN.c: 81: u_in_sta_tmpTask.val=0;
  9169                           
  9170                           ;incstack = 0
  9171                           ; Regs used in _DINTask: [wreg+status,2+status,0]
  9172  0C86  0020               	movlb	0	; select bank0
  9173  0C87  01EF               	clrf	_u_in_sta_tmpTask
  9174                           
  9175                           ;DIN.c: 82: if(!PORTBbits.RB2)
  9176  0C88  1D0D               	btfss	13,2	;volatile
  9177                           
  9178                           ;DIN.c: 83: u_in_sta_tmpTask.sel=1;
  9179  0C89  146F               	bsf	_u_in_sta_tmpTask,0
  9180                           
  9181                           ;DIN.c: 86: if(u_in_sta_currTask.sel!=u_in_sta_tmpTask.sel)
  9182  0C8A  086F               	movf	_u_in_sta_tmpTask,w
  9183  0C8B  3901               	andlw	1
  9184  0C8C  00F1               	movwf	??_DINTask
  9185  0C8D  086E               	movf	_u_in_sta_currTask,w
  9186  0C8E  3901               	andlw	1
  9187  0C8F  0671               	xorwf	??_DINTask,w
  9188  0C90  1903               	skipnz
  9189  0C91  2C9A               	goto	l3068
  9190                           
  9191                           ;DIN.c: 87: {
  9192                           ;DIN.c: 88: u_in_sta_currTask.sel=u_in_sta_tmpTask.sel;
  9193  0C92  106E               	bcf	_u_in_sta_currTask,0
  9194  0C93  1C6F               	btfss	_u_in_sta_tmpTask,0
  9195  0C94  2C96               	goto	l3064
  9196  0C95  146E               	bsf	_u_in_sta_currTask,0
  9197  0C96                     l3064:	
  9198                           
  9199                           ;DIN.c: 89: tmrDbncSel=0;
  9200  0C96  0021               	movlb	1	; select bank1
  9201  0C97  01AD               	clrf	_tmrDbncSel^(0+128)
  9202                           
  9203                           ;DIN.c: 90: u_flg_din.tmrDbncSel=1;
  9204  0C98  0020               	movlb	0	; select bank0
  9205  0C99  146D               	bsf	_u_flg_din,0
  9206  0C9A                     l3068:	
  9207                           
  9208                           ;DIN.c: 91: }
  9209                           ;DIN.c: 94: if(u_in_sta_currTask.sel)
  9210  0C9A  1C6E               	btfss	_u_in_sta_currTask,0
  9211  0C9B  2C9E               	goto	l3072
  9212                           
  9213                           ;DIN.c: 95: u_flg_din.tmrLongSel=1;
  9214  0C9C  14ED               	bsf	_u_flg_din,1
  9215  0C9D  0008               	return
  9216  0C9E                     l3072:	
  9217                           
  9218                           ;DIN.c: 96: else
  9219                           ;DIN.c: 97: {
  9220                           ;DIN.c: 98: tmrLongSel=0;
  9221  0C9E  0021               	movlb	1	; select bank1
  9222  0C9F  01AA               	clrf	_tmrLongSel^(0+128)
  9223  0CA0  01AB               	clrf	(_tmrLongSel+1)^(0+128)
  9224                           
  9225                           ;DIN.c: 99: u_flg_din.tmrLongSel=0;
  9226  0CA1  0020               	movlb	0	; select bank0
  9227  0CA2  10ED               	bcf	_u_flg_din,1
  9228  0CA3  0008               	return
  9229  0CA4                     __end_of_DINTask:	
  9230                           
  9231                           	psect	text55
  9232  0B70                     __ptext55:	
  9233 ;; *************** function _DINInit *****************
  9234 ;; Defined at:
  9235 ;;		line 24 in file "DIN.c"
  9236 ;; Parameters:    Size  Location     Type
  9237 ;;  sta             1    wreg     unsigned char 
  9238 ;; Auto vars:     Size  Location     Type
  9239 ;;  sta             1    1[COMMON] unsigned char 
  9240 ;; Return value:  Size  Location     Type
  9241 ;;		None               void
  9242 ;; Registers used:
  9243 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9244 ;; Tracked objects:
  9245 ;;		On entry : 0/0
  9246 ;;		On exit  : 0/0
  9247 ;;		Unchanged: 0/0
  9248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9250 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9252 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9253 ;;Total ram usage:        1 bytes
  9254 ;; Hardware stack levels used:    1
  9255 ;; Hardware stack levels required when called:    2
  9256 ;; This function calls:
  9257 ;;		Nothing
  9258 ;; This function is called by:
  9259 ;;		_main
  9260 ;; This function uses a non-reentrant model
  9261 ;;
  9262                           
  9263                           
  9264                           ;psect for function _DINInit
  9265  0B70                     _DINInit:	
  9266                           
  9267                           ;incstack = 0
  9268                           ; Regs used in _DINInit: [wreg-fsr0h+status,2+status,0]
  9269                           ;DINInit@sta stored from wreg
  9270  0B70  00F1               	movwf	DINInit@sta
  9271                           
  9272                           ;DIN.c: 26: switch(sta)
  9273  0B71  2B7B               	goto	l3052
  9274  0B72                     l3048:	
  9275                           ;DIN.c: 27: {
  9276                           ;DIN.c: 31: case 1:
  9277                           
  9278                           
  9279                           ;DIN.c: 33: u_flg_din.val=0;
  9280  0B72  0020               	movlb	0	; select bank0
  9281  0B73  01ED               	clrf	_u_flg_din
  9282                           
  9283                           ;DIN.c: 34: u_in_sta_currTask.val=0;
  9284  0B74  01EE               	clrf	_u_in_sta_currTask
  9285                           
  9286                           ;DIN.c: 35: u_in_sta_tmpTask.val=0;
  9287  0B75  01EF               	clrf	_u_in_sta_tmpTask
  9288                           
  9289                           ;DIN.c: 36: u_in_ev_up.val=0;
  9290  0B76  0021               	movlb	1	; select bank1
  9291  0B77  01B1               	clrf	_u_in_ev_up^(0+128)
  9292                           
  9293                           ;DIN.c: 37: u_in_ev_down.val=0;
  9294  0B78  01AF               	clrf	_u_in_ev_down^(0+128)
  9295                           
  9296                           ;DIN.c: 38: u_in_ev_long.val=0;
  9297  0B79  01B0               	clrf	_u_in_ev_long^(0+128)
  9298                           
  9299                           ;DIN.c: 43: }
  9300                           
  9301                           ;DIN.c: 39: break;
  9302  0B7A  0008               	return
  9303  0B7B                     l3052:	
  9304  0B7B  0871               	movf	DINInit@sta,w
  9305                           
  9306                           ; Switch size 1, requested type "space"
  9307                           ; Number of cases is 1, Range of values is 1 to 1
  9308                           ; switch strategies available:
  9309                           ; Name         Instructions Cycles
  9310                           ; simple_byte            4     3 (average)
  9311                           ; direct_byte           11     9 (fixed)
  9312                           ; jumptable            263     9 (fixed)
  9313                           ;	Chosen strategy is simple_byte
  9314  0B7C  3A01               	xorlw	1	; case 1
  9315  0B7D  1903               	skipnz
  9316  0B7E  2B72               	goto	l3048
  9317  0B7F  2B80               	goto	l292
  9318  0B80                     l292:	
  9319  0B80  0008               	return
  9320  0B81                     __end_of_DINInit:	
  9321                           
  9322                           	psect	text56
  9323  0DF4                     __ptext56:	
  9324 ;; *************** function _ADCInit *****************
  9325 ;; Defined at:
  9326 ;;		line 31 in file "ADC.c"
  9327 ;; Parameters:    Size  Location     Type
  9328 ;;  state           1    wreg     unsigned char 
  9329 ;; Auto vars:     Size  Location     Type
  9330 ;;  state           1    2[COMMON] unsigned char 
  9331 ;; Return value:  Size  Location     Type
  9332 ;;		None               void
  9333 ;; Registers used:
  9334 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9335 ;; Tracked objects:
  9336 ;;		On entry : 0/0
  9337 ;;		On exit  : 0/0
  9338 ;;		Unchanged: 0/0
  9339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9341 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9342 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9343 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9344 ;;Total ram usage:        2 bytes
  9345 ;; Hardware stack levels used:    1
  9346 ;; Hardware stack levels required when called:    2
  9347 ;; This function calls:
  9348 ;;		Nothing
  9349 ;; This function is called by:
  9350 ;;		_main
  9351 ;; This function uses a non-reentrant model
  9352 ;;
  9353                           
  9354                           
  9355                           ;psect for function _ADCInit
  9356  0DF4                     _ADCInit:	
  9357                           
  9358                           ;incstack = 0
  9359                           ; Regs used in _ADCInit: [wreg-fsr0h+status,2+status,0]
  9360                           ;ADCInit@state stored from wreg
  9361  0DF4  00F2               	movwf	ADCInit@state
  9362                           
  9363                           ;ADC.c: 33: switch(state)
  9364  0DF5  2E16               	goto	l3030
  9365  0DF6                     l3018:	
  9366                           ;ADC.c: 34: {
  9367                           ;ADC.c: 35: case 0:
  9368                           
  9369                           
  9370                           ;ADC.c: 37: ADCON0=0b00000101; ADCON1=0b10000011; FVRCON=0b10000001; ANSELA|=0b00000110;
      +                          ;
  9371  0DF6  3005               	movlw	5
  9372  0DF7  0021               	movlb	1	; select bank1
  9373  0DF8  009D               	movwf	29	;volatile
  9374  0DF9  3083               	movlw	131
  9375  0DFA  009E               	movwf	30	;volatile
  9376  0DFB  3081               	movlw	129
  9377  0DFC  0022               	movlb	2	; select bank2
  9378  0DFD  0097               	movwf	23	;volatile
  9379  0DFE  3006               	movlw	6
  9380  0DFF  00F1               	movwf	??_ADCInit
  9381  0E00  0871               	movf	??_ADCInit,w
  9382  0E01  0023               	movlb	3	; select bank3
  9383  0E02  048C               	iorwf	12,f	;volatile
  9384                           
  9385                           ;ADC.c: 38: break;
  9386  0E03  0008               	return
  9387  0E04                     l3022:	
  9388                           ;ADC.c: 39: case 1:
  9389                           
  9390                           
  9391                           ;ADC.c: 41: adc_ch=ADC_CH_OFF;
  9392  0E04  0020               	movlb	0	; select bank0
  9393  0E05  01E9               	clrf	_adc_ch
  9394                           
  9395                           ;ADC.c: 42: batt=0;
  9396  0E06  0021               	movlb	1	; select bank1
  9397  0E07  01A6               	clrf	_batt^(0+128)
  9398  0E08  01A7               	clrf	(_batt+1)^(0+128)
  9399                           
  9400                           ;ADC.c: 43: battV=0;
  9401  0E09  3000               	movlw	0
  9402  0E0A  00A0               	movwf	_battV^(0+128)
  9403  0E0B  3000               	movlw	0
  9404  0E0C  00A1               	movwf	(_battV+1)^(0+128)
  9405  0E0D  3000               	movlw	0
  9406  0E0E  00A2               	movwf	(_battV+2)^(0+128)
  9407                           
  9408                           ;ADC.c: 44: rmsCurr=0;
  9409  0E0F  3000               	movlw	0
  9410  0E10  00A3               	movwf	_rmsCurr^(0+128)
  9411  0E11  3000               	movlw	0
  9412  0E12  00A4               	movwf	(_rmsCurr+1)^(0+128)
  9413  0E13  3000               	movlw	0
  9414  0E14  00A5               	movwf	(_rmsCurr+2)^(0+128)
  9415                           
  9416                           ;ADC.c: 49: }
  9417                           
  9418                           ;ADC.c: 45: break;
  9419  0E15  0008               	return
  9420  0E16                     l3030:	
  9421  0E16  0872               	movf	ADCInit@state,w
  9422                           
  9423                           ; Switch size 1, requested type "space"
  9424                           ; Number of cases is 2, Range of values is 0 to 1
  9425                           ; switch strategies available:
  9426                           ; Name         Instructions Cycles
  9427                           ; simple_byte            7     4 (average)
  9428                           ; direct_byte           10     6 (fixed)
  9429                           ; jumptable            260     6 (fixed)
  9430                           ;	Chosen strategy is simple_byte
  9431  0E17  3A00               	xorlw	0	; case 0
  9432  0E18  1903               	skipnz
  9433  0E19  2DF6               	goto	l3018
  9434  0E1A  3A01               	xorlw	1	; case 1
  9435  0E1B  1903               	skipnz
  9436  0E1C  2E04               	goto	l3022
  9437  0E1D  2E1E               	goto	l119
  9438  0E1E                     l119:	
  9439  0E1E  0008               	return
  9440  0E1F                     __end_of_ADCInit:	
  9441                           
  9442                           	psect	intentry
  9443  0004                     __pintentry:	
  9444 ;; *************** function _INTIsr *****************
  9445 ;; Defined at:
  9446 ;;		line 37 in file "Sensore.c"
  9447 ;; Parameters:    Size  Location     Type
  9448 ;;		None
  9449 ;; Auto vars:     Size  Location     Type
  9450 ;;		None
  9451 ;; Return value:  Size  Location     Type
  9452 ;;		None               void
  9453 ;; Registers used:
  9454 ;;		wreg, status,2, status,0, pclath, cstack
  9455 ;; Tracked objects:
  9456 ;;		On entry : 0/0
  9457 ;;		On exit  : 0/0
  9458 ;;		Unchanged: 0/0
  9459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9461 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9462 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9463 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9464 ;;Total ram usage:        1 bytes
  9465 ;; Hardware stack levels used:    1
  9466 ;; Hardware stack levels required when called:    1
  9467 ;; This function calls:
  9468 ;;		_SYSInt
  9469 ;; This function is called by:
  9470 ;;		Interrupt level 1
  9471 ;; This function uses a non-reentrant model
  9472 ;;
  9473                           
  9474  0004                     _INTIsr:	
  9475                           
  9476                           ;incstack = 0
  9477                           ; Regs used in _INTIsr: [wreg+status,2+status,0+pclath+cstack]
  9478  0004  3180               	pagesel	$
  9479  0005  0020               	movlb	0	; select bank0
  9480  0006  087F               	movf	127,w
  9481  0007  00F0               	movwf	??_INTIsr
  9482                           
  9483                           ;Sensore.c: 40: if(INTCONbits.TMR0IF)
  9484  0008  1D0B               	btfss	11,2	;volatile
  9485  0009  280D               	goto	i1l3182
  9486                           
  9487                           ;Sensore.c: 41: {
  9488                           ;Sensore.c: 43: INTCONbits.TMR0IF=0;
  9489  000A  110B               	bcf	11,2	;volatile
  9490                           
  9491                           ;Sensore.c: 46: SYSInt();
  9492  000B  318A  22CC         	fcall	_SYSInt
  9493  000D                     i1l3182:	
  9494                           
  9495                           ;Sensore.c: 47: }
  9496                           ;Sensore.c: 50: if(IOCBFbits.IOCBF2)
  9497  000D  0027               	movlb	7	; select bank7
  9498  000E  1916               	btfsc	22,2	;volatile
  9499                           
  9500                           ;Sensore.c: 51: IOCBFbits.IOCBF2=0;
  9501  000F  1116               	bcf	22,2	;volatile
  9502  0010  0870               	movf	??_INTIsr,w
  9503  0011  0020               	movlb	0	; select bank0
  9504  0012  00FF               	movwf	127
  9505  0013  0009               	retfie
  9506  0014                     __end_of_INTIsr:	
  9507                           
  9508                           	psect	text58
  9509  0ACC                     __ptext58:	
  9510 ;; *************** function _SYSInt *****************
  9511 ;; Defined at:
  9512 ;;		line 35 in file "SYS.c"
  9513 ;; Parameters:    Size  Location     Type
  9514 ;;		None
  9515 ;; Auto vars:     Size  Location     Type
  9516 ;;		None
  9517 ;; Return value:  Size  Location     Type
  9518 ;;		None               void
  9519 ;; Registers used:
  9520 ;;		wreg
  9521 ;; Tracked objects:
  9522 ;;		On entry : 0/0
  9523 ;;		On exit  : 0/0
  9524 ;;		Unchanged: 0/0
  9525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9527 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9528 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9529 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9530 ;;Total ram usage:        0 bytes
  9531 ;; Hardware stack levels used:    1
  9532 ;; This function calls:
  9533 ;;		Nothing
  9534 ;; This function is called by:
  9535 ;;		_INTIsr
  9536 ;; This function uses a non-reentrant model
  9537 ;;
  9538                           
  9539                           
  9540                           ;psect for function _SYSInt
  9541  0ACC                     _SYSInt:	
  9542                           
  9543                           ;SYS.c: 38: u_SYS_STA.TICK=1;
  9544                           
  9545                           ;incstack = 0
  9546                           ; Regs used in _SYSInt: [wreg]
  9547  0ACC  0021               	movlb	1	; select bank1
  9548  0ACD  142E               	bsf	_u_SYS_STA^(0+128),0
  9549                           
  9550                           ;SYS.c: 41: TMR0=255-156;
  9551  0ACE  3063               	movlw	99
  9552  0ACF  0020               	movlb	0	; select bank0
  9553  0AD0  0095               	movwf	21	;volatile
  9554  0AD1  0008               	return
  9555  0AD2                     __end_of_SYSInt:	
  9556  007E                     btemp	set	126	;btemp
  9557  007E                     wtemp	set	126
  9558  007E                     wtemp0	set	126
  9559  0080                     wtemp1	set	128
  9560  0082                     wtemp2	set	130
  9561  0084                     wtemp3	set	132
  9562  0086                     wtemp4	set	134
  9563  0088                     wtemp5	set	136
  9564  007F                     wtemp6	set	127
  9565  007E                     ttemp	set	126
  9566  007E                     ttemp0	set	126
  9567  0081                     ttemp1	set	129
  9568  0084                     ttemp2	set	132
  9569  0087                     ttemp3	set	135
  9570  007F                     ttemp4	set	127
  9571  007E                     ltemp	set	126
  9572  007E                     ltemp0	set	126
  9573  0082                     ltemp1	set	130
  9574  0086                     ltemp2	set	134
  9575  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        55
    BSS         53
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     73      80
    BANK1            80      0      53
    BANK2            80      0      47
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    RTXRcvPkt@dst	PTR unsigned char  size(1) Largest target is 11
		 -> pktRx(BANK1[11]), 

    RTXSndPkt@src	PTR unsigned char  size(1) Largest target is 11
		 -> pktTx(BANK1[11]), 

    NVMWrite@source	PTR unsigned char  size(1) Largest target is 5
		 -> pgm_cfg(BANK1[5]), 

    NVMRead@dest	PTR unsigned char  size(1) Largest target is 5
		 -> pgm_cfg(BANK1[5]), 

    CC1Write@src	PTR unsigned char  size(2) Largest target is 47
		 -> pktTx(BANK1[11]), cc1PaTable(BANK1[8]), cc1InitVal(BANK2[47]), 

    CC1Read@dst	PTR unsigned char  size(1) Largest target is 11
		 -> pktRx(BANK1[11]), RTXReadPkt@numRxByte(BANK0[1]), RTXSndPkt@numTxByte(BANK0[1]), RTXSndPkt@numRxByte(BANK0[1]), 
		 -> RTXSndPkt@sta(BANK0[1]), 

    SPIWrite@srcPtr	PTR unsigned char  size(2) Largest target is 47
		 -> pktTx(BANK1[11]), CC1Write@cc1Addr(BANK0[1]), CC1Read@cc1Addr(COMMON[1]), CC1Strobe@cc1Stb(COMMON[1]), 
		 -> cc1PaTable(BANK1[8]), cc1InitVal(BANK2[47]), 

    SPIRead@dstPtr	PTR unsigned char  size(1) Largest target is 11
		 -> pktRx(BANK1[11]), RTXReadPkt@numRxByte(BANK0[1]), RTXSndPkt@numTxByte(BANK0[1]), RTXSndPkt@numRxByte(BANK0[1]), 
		 -> RTXSndPkt@sta(BANK0[1]), 


Critical Paths under _main in COMMON

    _main->_CC1Init
    _main->_PGMInit
    _CC1Sleep->_CC1Strobe
    _RTXAwake->_CC1Init
    _LEDFastFlash->_DLYDelay_ms
    _CC1Init->_CC1Write
    _RTXSndPkt->_CC1Read
    _CC1Write->_SPIWrite
    _ADCConv->___lwtoft
    ___ftsub->___ftadd
    ___ftadd->___ftpack
    ___ftmul->___lwtoft
    ___lwtoft->___ftpack
    ___lltoft->___ftpack
    ___ftdiv->___lwtoft
    _PGMSelLong->_LEDNormalFlash
    _PGMSelLong->_PGMWriteNvm
    _RTXReadPkt->_CC1Read
    _RTXRcvPkt->_CC1Read
    _CC1Read->_SPIWrite
    _LEDNormalFlash->_DLYDelay_ms
    _CC1Strobe->_SPIWrite
    _PGMReadNvm->_NVMRead
    _PGMCheckNvm->_PGMNvmReset
    _PGMNvmReset->_PGMWriteNvm
    _PGMWriteNvm->_NVMWrite

Critical Paths under _INTIsr in COMMON

    None.

Critical Paths under _main in BANK0

    _SYSTask->_PGMSelUp
    _RTXTick->_RTXSendData
    _RTXAwake->_RTXInit
    _RTXStartSendData->_ADCConv
    _RTXSendData->_RTXSndPkt
    _CC1Init->_CC1Write
    _RTXStartSendPgm->_ADCConv
    _RTXSendPgm->_RTXSndPkt
    _RTXSndPkt->_CC1Write
    _ADCConv->_sqrt
    _sqrt->___ftmul
    ___ftsub->___ftadd
    ___ftmul->___lltoft
    ___ftdiv->___ftmul
    _RTXTask->_RTXReadPkt
    _PGMWriteNvm->_NVMWrite

Critical Paths under _INTIsr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTIsr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTIsr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTIsr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTIsr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTIsr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTIsr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTIsr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTIsr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTIsr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTIsr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTIsr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTIsr in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  123428
                                             71 BANK0      2     2      0
                            _ADCInit
                            _CC1Init
                            _DINInit
                            _DINTask
                             _INInit
                            _LEDInit
                            _NVMInit
                            _OUTInit
                            _PGMInit
                            _RTXInit
                            _RTXTask
                            _SPIInit
                            _SYSInit
                            _SYSTask
 ---------------------------------------------------------------------------------
 (1) _SYSTask                                              0     0      0   79799
                            _DINTick
                          _PGMPgmOff
                         _PGMSelLong
                           _PGMSelUp
                            _PGMTick
                           _RTXAwake
                            _RTXTick
                           _SLPSleep
 ---------------------------------------------------------------------------------
 (2) _SLPSleep                                             9     9      0     965
                                             10 COMMON     1     1      0
                                              0 BANK0      8     8      0
                           _CC1Sleep
 ---------------------------------------------------------------------------------
 (3) _CC1Sleep                                             0     0      0     690
                          _CC1Strobe
 ---------------------------------------------------------------------------------
 (2) _RTXTick                                              0     0      0   10238
                        _RTXSendData
                         _RTXSendPgm
 ---------------------------------------------------------------------------------
 (2) _RTXAwake                                             0     0      0   35940
                            _CC1Init
                        _DLYDelay_ms
                            _RTXInit
 ---------------------------------------------------------------------------------
 (3) _RTXInit                                              1     1      0   32021
                                             63 BANK0      1     1      0
                          _CC1Strobe
                   _RTXStartSendData
 ---------------------------------------------------------------------------------
 (4) _RTXStartSendData                                     0     0      0   31300
                            _ADCConv
                        _DLYDelay_ms
                        _RTXSendData
 ---------------------------------------------------------------------------------
 (3) _RTXSendData                                          7     7      0    5751
                                              8 BANK0      7     7      0
                       _LEDFastFlash
                          _RTXSndPkt
 ---------------------------------------------------------------------------------
 (4) _LEDFastFlash                                         3     3      0    1060
                                              7 COMMON     3     3      0
                        _DLYDelay_ms
 ---------------------------------------------------------------------------------
 (3) _CC1Init                                              2     2      0    2927
                                             11 COMMON     1     1      0
                                              2 BANK0      1     1      0
                          _CC1Strobe
                           _CC1Write
                        _DLYDelay_ms
 ---------------------------------------------------------------------------------
 (2) _PGMTick                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PGMSelUp                                             1     1      0   30816
                                             69 BANK0      1     1      0
                        _PGMWriteNvm
                    _RTXStartSendPgm
 ---------------------------------------------------------------------------------
 (3) _RTXStartSendPgm                                      0     0      0   30036
                            _ADCConv
                        _DLYDelay_ms
                         _RTXSendPgm
 ---------------------------------------------------------------------------------
 (3) _RTXSendPgm                                           1     1      0    4487
                                              8 BANK0      1     1      0
                          _PGMPgmOff
                          _RTXSndPkt
 ---------------------------------------------------------------------------------
 (4) _RTXSndPkt                                            6     5      1    4487
                                              2 BANK0      6     5      1
                            _CC1Read
                          _CC1Strobe
                           _CC1Write
 ---------------------------------------------------------------------------------
 (5) _CC1Write                                             6     3      3    1214
                                              7 COMMON     4     1      3
                                              0 BANK0      2     2      0
                           _SPIWrite
 ---------------------------------------------------------------------------------
 (5) _ADCConv                                             24    24      0   24557
                                             39 BANK0     24    24      0
                        _DLYDelay_ms
                            ___ftdiv
                            ___ftmul
                           ___lltoft
                            ___lwdiv
                           ___lwtoft
                             ___wmul
                               _sqrt
 ---------------------------------------------------------------------------------
 (6) _sqrt                                                19    16      3    9580
                                             20 BANK0     19    16      3
                             ___ftge
                            ___ftmul
                            ___ftsub
 ---------------------------------------------------------------------------------
 (7) ___ftsub                                              6     0      6    4153
                                             10 BANK0      6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (8) ___ftadd                                             13     7      6    3903
                                              9 COMMON     3     3      0
                                              0 BANK0     10     4      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             16    10      6    4398
                                              4 BANK0     16    10      6
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftge                                               9     3      6     392
                                              1 COMMON     9     3      6
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4     220
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___lwtoft                                             4     1      3    2632
                                              9 COMMON     3     0      3
                                              0 BANK0      1     1      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              8     4      4     290
                                              1 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (6) ___lltoft                                             6     2      4    2703
                                              9 COMMON     2     2      0
                                              0 BANK0      4     0      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    3560
                                             20 BANK0     16    10      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftpack                                             8     3      5    2524
                                              1 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (2) _PGMSelLong                                           1     1      0    1840
                                             10 COMMON     1     1      0
                     _LEDNormalFlash
                        _PGMWriteNvm
 ---------------------------------------------------------------------------------
 (2) _DINTick                                              1     1      0       0
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSInit                                              2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _SPIInit                                              2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _RTXTask                                              0     0      0    6968
                         _RTXReadPkt
 ---------------------------------------------------------------------------------
 (2) _RTXReadPkt                                           2     2      0    6968
                                             69 BANK0      2     2      0
                            _CC1Read
                          _CC1Strobe
                     _LEDNormalFlash
                          _PGMPgmOff
                        _PGMWriteNvm
                          _RTXRcvPkt
 ---------------------------------------------------------------------------------
 (3) _RTXRcvPkt                                            4     3      1    2260
                                              0 BANK0      4     3      1
                            _CC1Read
 ---------------------------------------------------------------------------------
 (5) _CC1Read                                              5     3      2    2079
                                              7 COMMON     5     3      2
                            _SPIRead
                           _SPIWrite
 ---------------------------------------------------------------------------------
 (6) _SPIRead                                              5     4      1     249
                                              1 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (4) _PGMPgmOff                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _LEDNormalFlash                                       3     3      0    1060
                                              7 COMMON     3     3      0
                        _DLYDelay_ms
 ---------------------------------------------------------------------------------
 (5) _DLYDelay_ms                                          6     4      2     992
                                              1 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (4) _CC1Strobe                                            3     3      0     690
                                              7 COMMON     3     3      0
                           _SPIWrite
 ---------------------------------------------------------------------------------
 (5) _SPIWrite                                             6     3      3     622
                                              1 COMMON     6     3      3
 ---------------------------------------------------------------------------------
 (1) _PGMInit                                              1     1      0    1128
                                             11 COMMON     1     1      0
                        _PGMCheckNvm
                         _PGMReadNvm
 ---------------------------------------------------------------------------------
 (2) _PGMReadNvm                                           2     2      0     326
                                              8 COMMON     2     2      0
                            _NVMRead
 ---------------------------------------------------------------------------------
 (3) _NVMRead                                              7     3      4     326
                                              1 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) _PGMCheckNvm                                          0     0      0     780
                        _PGMNvmReset
 ---------------------------------------------------------------------------------
 (3) _PGMNvmReset                                          1     1      0     780
                                             10 COMMON     1     1      0
                        _PGMWriteNvm
 ---------------------------------------------------------------------------------
 (3) _PGMWriteNvm                                          2     2      0     780
                                              8 COMMON     2     2      0
                           _NVMWrite
 ---------------------------------------------------------------------------------
 (4) _NVMWrite                                            76    72      4     780
                                              1 COMMON     7     3      4
                                              0 BANK0     69    69      0
 ---------------------------------------------------------------------------------
 (1) _OUTInit                                              2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _NVMInit                                              1     1      0      22
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LEDInit                                              1     1      0      22
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _INInit                                               2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DINTask                                              1     1      0       0
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DINInit                                              1     1      0      22
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADCInit                                              2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _INTIsr                                              1     1      0       0
                                              0 COMMON     1     1      0
                             _SYSInt
 ---------------------------------------------------------------------------------
 (11) _SYSInt                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCInit
   _CC1Init
     _CC1Strobe
       _SPIWrite
     _CC1Write
       _SPIWrite
     _DLYDelay_ms
   _DINInit
   _DINTask
   _INInit
   _LEDInit
   _NVMInit
   _OUTInit
   _PGMInit
     _PGMCheckNvm
       _PGMNvmReset
         _PGMWriteNvm
           _NVMWrite
     _PGMReadNvm
       _NVMRead
   _RTXInit
     _CC1Strobe
       _SPIWrite
     _RTXStartSendData
       _ADCConv
         _DLYDelay_ms
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___lltoft
           ___ftpack
         ___lwdiv
         ___lwtoft
           ___ftpack
         ___wmul
         _sqrt
           ___ftge
           ___ftmul
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftsub
             ___ftadd
               ___ftpack
       _DLYDelay_ms
       _RTXSendData
         _LEDFastFlash
           _DLYDelay_ms
         _RTXSndPkt
           _CC1Read
             _SPIRead
             _SPIWrite
           _CC1Strobe
             _SPIWrite
           _CC1Write
             _SPIWrite
   _RTXTask
     _RTXReadPkt
       _CC1Read
         _SPIRead
         _SPIWrite
       _CC1Strobe
         _SPIWrite
       _LEDNormalFlash
         _DLYDelay_ms
       _PGMPgmOff
       _PGMWriteNvm
         _NVMWrite
       _RTXRcvPkt
         _CC1Read
           _SPIRead
           _SPIWrite
   _SPIInit
   _SYSInit
   _SYSTask
     _DINTick
     _PGMPgmOff
     _PGMSelLong
       _LEDNormalFlash
         _DLYDelay_ms
       _PGMWriteNvm
         _NVMWrite
     _PGMSelUp
       _PGMWriteNvm
         _NVMWrite
       _RTXStartSendPgm
         _ADCConv
           _DLYDelay_ms
           ___ftdiv
             ___ftmul (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___lltoft
             ___ftpack
           ___lwdiv
           ___lwtoft
             ___ftpack
           ___wmul
           _sqrt
             ___ftge
             ___ftmul
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftsub
               ___ftadd
                 ___ftpack
         _DLYDelay_ms
         _RTXSendPgm
           _PGMPgmOff
           _RTXSndPkt
             _CC1Read
               _SPIRead
               _SPIWrite
             _CC1Strobe
               _SPIWrite
             _CC1Write
               _SPIWrite
     _PGMTick
     _RTXAwake
       _CC1Init
         _CC1Strobe
           _SPIWrite
         _CC1Write
           _SPIWrite
         _DLYDelay_ms
       _DLYDelay_ms
       _RTXInit
         _CC1Strobe
           _SPIWrite
         _RTXStartSendData
           _ADCConv
             _DLYDelay_ms
             ___ftdiv
               ___ftmul (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___lltoft
               ___ftpack
             ___lwdiv
             ___lwtoft
               ___ftpack
             ___wmul
             _sqrt
               ___ftge
               ___ftmul
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftsub
                 ___ftadd
                   ___ftpack
           _DLYDelay_ms
           _RTXSendData
             _LEDFastFlash
               _DLYDelay_ms
             _RTXSndPkt
               _CC1Read
                 _SPIRead
                 _SPIWrite
               _CC1Strobe
                 _SPIWrite
               _CC1Write
                 _SPIWrite
     _RTXTick
       _RTXSendData
         _LEDFastFlash
           _DLYDelay_ms
         _RTXSndPkt
           _CC1Read
             _SPIRead
             _SPIWrite
           _CC1Strobe
             _SPIWrite
           _CC1Write
             _SPIWrite
       _RTXSendPgm
         _PGMPgmOff
         _RTXSndPkt
           _CC1Read
             _SPIRead
             _SPIWrite
           _CC1Strobe
             _SPIWrite
           _CC1Write
             _SPIWrite
     _SLPSleep
       _CC1Sleep
         _CC1Strobe
           _SPIWrite

 _INTIsr (ROOT)
   _SYSInt

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     49      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      35       7       66.3%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      2F       9       58.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      C1      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      C1      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Fri Apr 15 19:10:35 2016

       __size_of_CC1Strobe 0014                 __CFG_CP$ON 0000            SLPSleep@WPUBTmp 0022  
                       l40 0DF3                         l18 0D3A                         l60 0CC4  
            ?_LEDFastFlash 0070                         l64 0CDF                         l69 0D46  
                       l78 0C7C        ___wmul@multiplicand 0073               ?_DLYDelay_ms 0071  
             ___ftadd@exp1 007B               ___ftadd@exp2 007A               ___ftadd@sign 0079  
                      l124 0042                        l133 01E0                        l119 0E1E  
                      l240 0D94                        l250 0418                        l235 0B09  
                      l251 0403                        l149 0C01                        l262 0477  
                      l254 0427                        l247 03E9                        l175 0ED3  
                      l264 047E                        l600 0DCA                        l257 0430  
                      l249 03F4                        l195 0AF6                        l267 0490  
                      l515 0665                        l292 0B80                        l197 0AFE  
                      l295 0E37                        l472 0D7E                        l297 0E35  
                      l378 0BCF                        l680 07D4                        l489 0738  
                      l678 0792                        l855 0717                        l687 0C3A  
                      l679 07D3                        l856 071F                        l848 0704  
                      l879 0291            __end_of_CC1Init 0ED4            __end_of_CC1Read 0C69  
          __end_of_ADCConv 01F2            __end_of_ADCInit 0E1F               __CFG_BORV$LO 0000  
                      wreg 0009                 _RTXReadPkt 0FB1            __end_of_DINInit 0B81  
          __end_of_DINTask 0CA4            __end_of_DINTick 0E4A               __CFG_LVP$OFF 0000  
               _RTXSendPgm 0F3C           _RTXStartSendData 0B51            __end_of_LEDInit 0AFF  
             ___ftdiv@cntr 003E               ___ftdiv@sign 0043                       l1047 0311  
                     l1049 034A                       l3022 0E04                       l3030 0E16  
                     l3014 0CD4                       l2310 0F8C                       l3040 0B01  
                     l3018 0DF6                       l3114 0DBF                       l2314 0FA2  
                     l3052 0B7B                       l3036 0AF9                       l3044 0B04  
                     l3220 06EB                       l3300 0270                       l3118 0DC2  
                     l3230 0715                       l3222 06F0                       l3214 06DA  
                     l2510 0EE8                       l3048 0B72                       l3072 0C9E  
                     l3064 0C96                       l3080 0BC0                       l3232 0709  
                     l2520 0F03                       l3312 02A3                       l3250 0D3D  
                     l3218 06E1                       l2434 0C34                       l3402 0520  
                     l3306 0283                       l3068 0C9A                       l2516 0EFA  
                     l2508 0EDC                       l3316 02B5                       l3308 028D  
                     l2630 0459                       l3078 0BBC                       l3246 0D4B  
                     l3502 05CF                       l3326 02D0                       l3270 0221  
                     l2624 0453                       l3088 0BC7                       l3256 0C81  
                     l3096 0DA7                       l3416 0CE8                       l3258 0C6A  
                     l3514 0E4E                       l3266 021A                       l3516 0E60  
                     l3276 0230                       l3428 0319                       l3532 0051  
                     l2638 0479                       l2646 048B                       l3390 0504  
                     l3374 04C1                       l3294 025D                       l3480 0575  
                     l3368 04AB                       l3296 0267                       l3288 024A  
                     l3552 00D0                       l3640 0F51                       l3474 055F  
                     l3386 04FC                       l3298 026C                       l3562 018D  
                     l3570 01D9                       l3466 0752                       l3642 0F57  
                     l3458 0D00                       l3706 0D5E                       l3714 0D72  
                     l3564 01C8                       l3548 00C7                       l3708 0D63  
                     l2782 0D82                       l3822 0FEB                       l3494 05B6  
                     l3398 0518                       l3574 01E5                       l3662 0F71  
                     l3832 0FFE                       l3568 01CD                       l2882 0B13  
                     l3594 060F                       l3754 06C7                       l3746 069B  
                     l3772 0BE5                       l3668 0EA7                       l3596 0615  
                     l3694 0CA6                       l3782 0BF7                       l3766 0BE0  
                     l3678 0ECA                       l3870 0F1E                       l3862 0F15  
                     l2976 0D1E                       l2984 0D35                       l2994 0DEE  
                     l3882 0F2E                       l2988 0DCD                       l3796 0B8F  
                     l3876 0F25                       l3888 0F35               __CFG_WDTE$ON 0000  
        NVMWrite@bufTmpRow 0020                       u3105 0726                       u3025 06E6  
                     u2315 0EE9                       u2155 0C3B                       u3045 06FF  
                     u2325 0EF3                       u2165 0C40                       u2335 0EFB  
                     u3065 0710                       u3315 0271                       u2295 0EDF  
                     u3255 024B                       _PIE1 0091                       _PIE2 0092  
                     u3505 0527                       u3425 04CD                       u3345 0284  
                     u3435 04DD                       u3285 025E                       u3455 0505  
                     u4087 01DB                       u4097 0C0E                       u3625 0587  
                     u3465 050B                       u3395 0C07                       u3635 0597  
                     u3555 0335                       u3645 05B7                       u3655 05C6  
                     u3495 0521                       u3665 05D0                       u3685 0E54  
                     _PIR1 0011                       _PIR2 0012                       _TMR0 0015  
                     _WPUB 020D            __end_of_PGMInit 0BD0            __end_of_PGMTick 0004  
             __CFG_WRT$OFF 0000              __CFG_FCMEN$ON 0000           __end_of_CC1Sleep 0AEC  
                     _batt 00A6                       _main 078C           __end_of_CC1Write 0800  
             ___ftpack@arg 0071            __end_of_NVMInit 0B0A            __end_of_NVMRead 0DA5  
             ___ftpack@exp 0074            __end_of_SPIInit 0CE0            __end_of_SPIRead 0D5B  
                     fsr0h 0005                       fsr1h 0007                       fsr0l 0004  
                     indf0 0000                       indf1 0001                       fsr1l 0006  
                     btemp 007E                       _sqrt 02E8            __end_of_OUTInit 0DF4  
            __CFG_BOREN$ON 0000                       ltemp 007E                       start 0014  
          __end_of_RTXInit 0D7F                       ttemp 007E          NVMWrite@latchAddr 0063  
          __end_of_RTXTask 0AD8            __end_of_RTXTick 0B92                       wtemp 007E  
            __CFG_IESO$OFF 0000            __end_of_SYSInit 0DCB            __end_of_SYSTask 0F3C  
             ___ftmul@cntr 0032               ___ftmul@sign 0033               _ADCConv$1419 0055  
              ?_PGMReadNvm 0070              __CFG_LPBOR$ON 0000             ??_LEDFastFlash 0077  
              ?_PGMSelLong 0070                _RTXSendData 05F1               SPIInit@state 0072  
                    ?_main 0070            __end_of___ftadd 02E8            __end_of___ftdiv 05F1  
                    ?_sqrt 0034            __end_of___ftmul 0548                      _T1CON 0018  
          __end_of___ftsub 0CFE         __size_of_PGMPgmOff 0004                      _IOCBN 0395  
                    _IOCBP 0394            __end_of___lwdiv 0F08                      _PMADR 0191  
                    _PMDAT 0193                      _TMR1H 0017                      _TMR1L 0016  
                    _PORTA 000C                      _PORTC 000E                      _TRISA 008C  
                    _TRISB 008D                      _TRISC 008E           __end_of_PGMSelUp 0BE7  
            __CFG_PWRTE$ON 0000               ___lltoft@exp 007A                      _battV 00A0  
        __end_of_CC1Strobe 0BA6                      _errno 00A8                      _pktRx 00B2  
                    _pktTx 00BD              ___ftpack@sign 0075                      main@i 0068  
         __end_of_SLPSleep 06D2           __end_of_NVMWrite 0494           __end_of_SPIWrite 0C86  
                    ltemp0 007E                      ltemp1 0082                      ltemp2 0086  
                    ltemp3 0080           __end_of_RTXAwake 0C32                      ttemp0 007E  
                    ttemp1 0081                      ttemp2 0084                      ttemp3 0087  
                    ttemp4 007F                      sqrt@i 0040                      sqrt@q 0041  
                    sqrt@x 0044                      sqrt@y 0034                      sqrt@z 003D  
        LEDNormalFlash@num 0078                      status 0003                      wtemp0 007E  
                    wtemp1 0080                      wtemp2 0082                      wtemp3 0084  
                    wtemp4 0086                      wtemp5 0088                      wtemp6 007F  
             ?_PGMCheckNvm 0070   __size_of_RTXStartSendPgm 000F             __CFG_MCLRE$OFF 0000  
          __initialization 0016               DLYDelay_ms@i 0075               __end_of_main 07DF  
       __size_of_RTXRcvPkt 000E         __size_of_RTXSndPkt 0056               __end_of_sqrt 03D8  
                ??_CC1Init 007B                  ??_CC1Read 0079                  ??_ADCConv 0047  
                ??_ADCInit 0071             CC1Strobe@e_stb 0078                     ??_main 0067  
               _cc1PaTable 00CD                     ??_sqrt 0037               CC1Init@state 0022  
                ??_DINInit 0071               NVMWrite@addr 0071                  ??_DINTask 0071  
                ??_DINTick 0071                 _cc1InitVal 0120                  ??_LEDInit 0071  
             ?_PGMNvmReset 0070                  ??_PGMInit 007B                  ??_PGMTick 0071  
              ?_RTXReadPkt 0070                     _ADCON0 009D                     _ADCON1 009E  
            SPIRead@dstPtr 0074                ?_RTXSendPgm 0070                  ??_NVMInit 0071  
                ??_NVMRead 0075                     _ADRESH 009C                     _ADRESL 009B  
                ??_SPIInit 0071                  ??_SPIRead 0072             _LEDNormalFlash 0CA4  
                ??_OUTInit 0071                     _ANSELA 018C                     _ANSELB 018D  
                   _ANSELC 018E           __end_of___ftpack 0736        __size_of_PGMReadNvm 000F  
         __end_of___lltoft 0E75                  ??_RTXInit 007C               ?_PGMWriteNvm 0070  
                   i1l3182 000D                  ??_RTXTask 007C                  ??_RTXTick 007C  
      __size_of_PGMSelLong 0018                     _INTCON 000B                     _FVRCON 0117  
                ??_SYSInit 0071           __end_of___lwtoft 0BBA                     _PMCON1 0195  
                   _PMCON2 0196                  ??_SYSTask 007C                     _INTIsr 0004  
                   _OSCCON 0099                     _INInit 0D1C                     _WDTCON 0097  
                   _SSPBUF 0211              LEDFastFlash@i 0079          __end_of_PGMPgmOff 0ACC  
                   _SYSInt 0ACC        RTXReadPkt@numRxByte 0066                     ___ftge 0F76  
                   _adc_ch 0069                     ___wmul 0C32                  ??___ftadd 0026  
           __CFG_STVREN$ON 0000                  ??___ftdiv 003A                  ??___ftmul 002A  
                ??___ftsub 007C                  ??___lwdiv 0075      ___ftmul@f3_as_product 002F  
                ?_CC1Sleep 0070       __size_of_DLYDelay_ms 0019                  ?_CC1Write 0077  
   __end_of_LEDNormalFlash 0CC2                     sqrt@og 003A          __end_of_RTXRcvPkt 0B24  
        __end_of_RTXSndPkt 078C       __end_of_LEDFastFlash 0D1C    __end_of__initialization 003E  
               ___ftadd@f1 0020                 ___ftadd@f2 0023                 ___ftge@ff1 0071  
               ___ftge@ff2 0074                 ___ftdiv@f1 0037                 ___ftdiv@f2 0034  
               ___ftdiv@f3 003F                 ___ftmul@f1 0024                 ___ftmul@f2 0027  
               ___ftsub@f1 002D                 ___ftsub@f2 002A             __pcstackCOMMON 0070  
                ?_PGMSelUp 0070               __pidataBANK1 0AEC               __pidataBANK2 0E75  
      __size_of_RTXReadPkt 004F   __end_of_RTXStartSendData 0B60                 ___lltoft@c 0020  
          NVMWrite@rowAddr 0060          ??_RTXStartSendPgm 007C        __size_of_RTXSendPgm 003A  
                ?_SLPSleep 0070                  ?_NVMWrite 0071            CC1Strobe@cc1Stb 0079  
               ___lwtoft@c 0079                  ?_SPIWrite 0071                 CC1Read@len 0078  
               CC1Read@dst 0077                 ??_CC1Sleep 007A                  ?_RTXAwake 0070  
               ??_CC1Write 007A               CC1Write@addr 0020             ADCConv@sumBatt 005C  
           ADCConv@sumCurr 0058            ?_LEDNormalFlash 0070                 __pbssBANK0 0069  
               __pbssBANK1 00A0                    ?_INTIsr 0070                    ?_INInit 0070  
          __CFG_VCAPEN$OFF 0000                    ?_SYSInt 0070                  INInit@sta 0072  
     __size_of_PGMCheckNvm 000C                 __pmaintext 078C                 ??_PGMSelUp 0065  
                  ?___ftge 0071               ??_PGMReadNvm 0078            CC1Write@cc1Addr 0021  
                  ?___wmul 0071               ??_PGMSelLong 007A                 __pintentry 0004  
             ?_RTXSendData 0070                    _CC1Init 0EA4                    _CC1Read 0C4D  
                  _ADCConv 0041                    _ADCInit 0DF4          _u_in_sta_currTask 006E  
                ?___ftpack 0071                 ??_SLPSleep 007A                 ??_NVMWrite 0075  
               _cntSndData 006A                  ?___lltoft 0020                 ??_SPIWrite 0074  
                ?___lwtoft 0079                    _DINInit 0B70                 ??_RTXAwake 007C  
                  _DINTick 0E1F                    _DINTask 0C86               ADCInit@state 0072  
                  _LEDInit 0AF4         RTXSendData@valBatt 002C                    _PGMInit 0BBA  
                  _PGMTick 0003         RTXSendData@valTemp 0029       __size_of_PGMNvmReset 0010  
                  _SSPCON1 0215                    _SSPCON2 0216                    _NVMInit 0AFF  
                  _NVMRead 0D7F                    _SPIInit 0CC2                    _SPIRead 0D3B  
                  _SSPSTAT 0214                    _OUTInit 0DCB                    _RTXInit 0D5B  
                  _RTXTick 0B81                    _RTXTask 0AD2         __end_of_PGMReadNvm 0B42  
                  _SYSInit 0DA5                    _SYSTask 0F08         __end_of_PGMSelLong 0BFF  
                _CC1Strobe 0B92            __size_of_INTIsr 0010            __size_of_INInit 001F  
     __size_of_PGMWriteNvm 000F            __size_of_SYSInt 0006                  NVMWrite@i 0062  
                NVMWrite@j 0064                  SPIWrite@i 0076            __size_of___ftge 003B  
                  ___ftadd 01F2               RTXInit@state 005F                    ___ftdiv 0548  
          __size_of___wmul 001B                    ___ftmul 0494                    ___ftsub 0CE0  
                  ___lwdiv 0ED4                 ??___ftpack 0076                 ??___lltoft 0079  
                  __ptext1 0F08                    __ptext2 0668                    __ptext3 0AE4  
                  __ptext4 0B81                    __ptext5 0C18                    __ptext6 0D5B  
                  __ptext7 0B51                    __ptext8 05F1                    __ptext9 0CFE  
                  _flg_slp 006B                 ??___lwtoft 0020                    _pgm_cfg 00C8  
                  _pgm_flg 007C      __size_of_LEDFastFlash 001E                  _IOCBFbits 0396  
                  _rmsCurr 00A3               ??_RTXReadPkt 0065               ??_RTXSendPgm 0028  
                  clrloop0 0ADF                    _rtx_flg 00AC               RTXRcvPkt@len 0020  
             RTXRcvPkt@dst 0023       end_of_initialization 003E                 _u_in_ev_up 00B1  
               ?_CC1Strobe 0070         RTXSndPkt@numRxByte 0024                    init_ram 0AD8  
       RTXSndPkt@numTxByte 0026                    initloop 0AD9               RTXSndPkt@len 0022  
             RTXSndPkt@src 0025               RTXSndPkt@sta 0027                  _PGMPgmOff 0AC8  
               _tmrDbncSel 00AD         __end_of_RTXReadPkt 1000                 DINInit@sta 0071  
             _LEDFastFlash 0CFE         __end_of_RTXSendPgm 0F76                  _PORTBbits 000D  
               _tmrLongSel 00AA           __CFG_FOSC$INTOSC 0000          __size_of_CC1Sleep 0008  
        __size_of_CC1Write 0021                NVMRead@addr 0071                NVMRead@dest 0073  
                _RTXRcvPkt 0B16                  _RTXSndPkt 0736                ___ftdiv@exp 0042  
          _RTXStartSendPgm 0B42             __end_of_INTIsr 0014             __end_of_INInit 0D3B  
      _nvm_pgm_cfg_absaddr 3820             __end_of_SYSInt 0AD2                ___ftmul@exp 002E  
               ?_PGMPgmOff 0070                 LEDInit@sta 0071             DLYDelay_ms@val 0071  
        ?_RTXStartSendData 0070             __end_of___ftge 0FB1          __size_of_PGMSelUp 0017  
           __end_of___wmul 0C4D              ??_DLYDelay_ms 0073         ??_RTXStartSendData 007C  
     __size_of_RTXSendData 0077           ??_LEDNormalFlash 0077               SYSInit@state 0072  
        __size_of_SLPSleep 006A          __size_of_NVMWrite 00BC          __size_of_SPIWrite 001D  
      start_initialization 0016          __size_of_RTXAwake 001A                CC1Read@addr 007A  
              NVMWrite@len 0074                   ??_INTIsr 0070                   ??_INInit 0071  
              ??_CC1Strobe 0077                 ?_RTXRcvPkt 0020                 ?_RTXSndPkt 0022  
                 ??_SYSInt 0070             CC1Read@cc1Addr 007B                   ??___ftge 0077  
                 ??___wmul 0075                   ?_CC1Init 0070                __pdataBANK1 00CD  
                 ?_CC1Read 0077                __pdataBANK2 0120                SPIWrite@len 0073  
                 ?_ADCConv 0070                   ?_ADCInit 0070                   ?_DINInit 0070  
                 ?_DINTask 0070                   ?_DINTick 0070          __size_of___ftpack 0064  
                 ?_LEDInit 0070          __size_of___lltoft 002B                __pbssCOMMON 007C  
                ___latbits 0003          __size_of___lwtoft 0014              __pcstackBANK0 0020  
      __end_of_DLYDelay_ms 0C18                   ?_PGMInit 0070                   ?_PGMTick 0070  
  __end_of_RTXStartSendPgm 0B51                   ?_NVMInit 0070                   ?_NVMRead 0071  
                 ?_SPIInit 0070              ADCConv@cntSum 005E                   ?_SPIRead 0071  
           NVMWrite@source 0073                   ?_OUTInit 0070               PGMInit@state 007B  
                 ?_RTXInit 0070                   ?_RTXTask 0070                   ?_RTXTick 0070  
              CC1Write@len 0079                   ?_SYSInit 0070                CC1Write@src 0077  
                 ?_SYSTask 0070              ??_PGMCheckNvm 007B        __p_nvm_pgm_cfg_text 3820  
         ___lwdiv@dividend 0073                ??_PGMPgmOff 0071                   ?___ftadd 0020  
                 ?___ftdiv 0034                   ?___ftmul 0024                   ?___ftsub 002A  
                 ?___lwdiv 0071                  _u_SYS_STA 00AE           _u_in_sta_tmpTask 006F  
                 NVMRead@i 0077                   _CC1Sleep 0AE4              ??_PGMNvmReset 007A  
                 SPIRead@i 0075                   _CC1Write 07DF           ___lwdiv@quotient 0076  
            ??_PGMWriteNvm 0078                  _u_flg_din 006D                ??_RTXRcvPkt 0021  
              ??_RTXSndPkt 0023             ___wmul@product 0075                   _LATAbits 010C  
                 _LATCbits 010E                  clear_ram0 0ADE                   _PIR1bits 0011  
                 _PGMSelUp 0BD0        __end_of_PGMCheckNvm 0B16      SLPSleep@OPTION_REGTmp 0024  
                _tmrRcvPkt 006C           __size_of_CC1Init 0030           __size_of_CC1Read 001C  
                 _SLPSleep 0668                _DLYDelay_ms 0BFF                   _NVMWrite 03D8  
         __size_of_ADCConv 01B1           __size_of_ADCInit 002B                 _ADCON0bits 009D  
                 _SPIWrite 0C69          ___wmul@multiplier 0071                 NVMInit@sta 0071  
               NVMRead@len 0074            LEDFastFlash@num 0078                   _RTXAwake 0C18  
         __size_of_DINInit 0011           __size_of_DINTask 001E           __size_of_DINTick 002B  
         __size_of_LEDInit 000B                 SPIRead@len 0071           __size_of_PGMInit 0016  
         ?_RTXStartSendPgm 0070           __size_of_PGMTick 0001        __end_of_PGMNvmReset 0B70  
         __size_of_NVMInit 000B           __size_of_NVMRead 0026           __size_of_SPIInit 001E  
         __size_of_SPIRead 0020               _u_in_ev_down 00AF            LEDNormalFlash@i 0079  
             _u_in_ev_long 00B0           __size_of_OUTInit 0029           __size_of_RTXInit 0024  
         __size_of_RTXTask 0006           __size_of_RTXTick 0011           __size_of_SYSInit 0026  
         __size_of_SYSTask 0034                 OUTInit@sta 0072        __end_of_PGMWriteNvm 0B33  
         __size_of___ftadd 00F6           __size_of___ftdiv 00A9           __size_of___ftmul 00B4  
         __size_of___ftsub 001E           __size_of___lwdiv 0034                   ___ftpack 06D2  
                 ___lltoft 0E4A                   ___lwtoft 0BA6            ___lwdiv@divisor 0071  
          ___lwdiv@counter 0078                   __ptext10 0EA4                   __ptext11 0003  
                 __ptext20 01F2                   __ptext12 0BD0                   __ptext21 0494  
                 __ptext13 0B42                   __ptext30 0E1F                   __ptext22 0F76  
                 __ptext14 0F3C                   __ptext31 0DA5                   __ptext23 0C32  
                 __ptext15 0736                   __ptext40 0BFF                   __ptext32 0CC2  
                 __ptext24 0BA6                   __ptext16 07DF                   __ptext41 0B92  
                 __ptext33 0AD2                   __ptext25 0ED4                   __ptext17 0041  
                 __ptext50 0DCB                   __ptext42 0C69                   __ptext34 0FB1  
                 __ptext26 0E4A                   __ptext18 02E8                   __ptext51 0AFF  
                 __ptext43 0BBA                   __ptext35 0B16                   __ptext27 0548  
                 __ptext19 0CE0                   __ptext52 0AF4                   __ptext44 0B33  
                 __ptext36 0C4D                   __ptext28 06D2                   __ptext53 0D1C  
                 __ptext45 0D7F                   __ptext37 0D3B                   __ptext29 0BE7  
                 __ptext54 0C86                   __ptext46 0B0A                   __ptext38 0AC8  
                 __ptext55 0B70                   __ptext47 0B60                   __ptext39 0CA4  
                 __ptext56 0DF4                   __ptext48 0B24                   __ptext49 03D8  
                 __ptext58 0ACC  __size_of_RTXStartSendData 000F        __end_of_nvm_pgm_cfg 3840  
            __size_of_main 0053                _PGMCheckNvm 0B0A              __size_of_sqrt 00F0  
            ??_RTXSendData 0028          SLPSleep@ADCON0Tmp 0026                _PGMNvmReset 0B60  
               _INTCONbits 000B             SPIWrite@srcPtr 0071                   intlevel1 0000  
              _PGMWriteNvm 0B24                 _PMCON1bits 0195          __CFG_CLKOUTEN$OFF 0000  
      SLPSleep@TESTBATTtmp 0027                 _PGMReadNvm 0B33                 _PGMSelLong 0BE7  
        SLPSleep@INTCONTmp 0021          SLPSleep@FVRCONTmp 0025                 _OPTION_REG 0095  
      __end_of_RTXSendData 0668                _nvm_pgm_cfg 3820           SLPSleep@IOCBNTmp 0020  
  __size_of_LEDNormalFlash 001E          SLPSleep@WDTCONTmp 0023                 _SSPCONbits 0215  
