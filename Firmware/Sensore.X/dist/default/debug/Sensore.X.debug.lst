

Microchip Technology PIC LITE Macro Assembler V1.34 build -361300703 
                                                                                               Wed Oct 04 23:57:53 2017

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	_nvm_pgm_cfg_text,global,class=CODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	inittext,global,class=CODE,delta=2
    14                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text3,local,class=CODE,merge=1,delta=2
    21                           	psect	text4,local,class=CODE,merge=1,delta=2
    22                           	psect	text5,local,class=CODE,merge=1,delta=2
    23                           	psect	text6,local,class=CODE,merge=1,delta=2
    24                           	psect	text7,local,class=CODE,merge=1,delta=2
    25                           	psect	text8,local,class=CODE,merge=1,delta=2
    26                           	psect	text9,local,class=CODE,merge=1,delta=2
    27                           	psect	text10,local,class=CODE,merge=1,delta=2
    28                           	psect	text11,local,class=CODE,merge=1,delta=2
    29                           	psect	text12,local,class=CODE,merge=1,delta=2
    30                           	psect	text13,local,class=CODE,merge=1,delta=2
    31                           	psect	text14,local,class=CODE,merge=1,delta=2
    32                           	psect	text15,local,class=CODE,merge=1,delta=2
    33                           	psect	text16,local,class=CODE,merge=1,delta=2
    34                           	psect	text17,local,class=CODE,merge=1,delta=2
    35                           	psect	text18,local,class=CODE,merge=1,delta=2
    36                           	psect	text19,local,class=CODE,merge=1,delta=2
    37                           	psect	text20,local,class=CODE,merge=1,delta=2
    38                           	psect	text21,local,class=CODE,merge=1,delta=2
    39                           	psect	text22,local,class=CODE,merge=1,delta=2
    40                           	psect	text23,local,class=CODE,merge=1,delta=2
    41                           	psect	text24,local,class=CODE,merge=1,delta=2
    42                           	psect	text25,local,class=CODE,merge=1,delta=2
    43                           	psect	text26,local,class=CODE,merge=1,delta=2
    44                           	psect	text27,local,class=CODE,merge=1,delta=2
    45                           	psect	text28,local,class=CODE,merge=1,delta=2
    46                           	psect	text29,local,class=CODE,merge=1,delta=2
    47                           	psect	text30,local,class=CODE,merge=1,delta=2
    48                           	psect	text31,local,class=CODE,merge=1,delta=2
    49                           	psect	text32,local,class=CODE,merge=1,delta=2
    50                           	psect	text33,local,class=CODE,merge=1,delta=2
    51                           	psect	text34,local,class=CODE,merge=1,delta=2
    52                           	psect	text35,local,class=CODE,merge=1,delta=2
    53                           	psect	text36,local,class=CODE,merge=1,delta=2
    54                           	psect	text37,local,class=CODE,merge=1,delta=2
    55                           	psect	text38,local,class=CODE,merge=1,delta=2
    56                           	psect	text39,local,class=CODE,merge=1,delta=2
    57                           	psect	text40,local,class=CODE,merge=1,delta=2
    58                           	psect	text41,local,class=CODE,merge=1,delta=2
    59                           	psect	text42,local,class=CODE,merge=1,delta=2
    60                           	psect	text43,local,class=CODE,merge=1,delta=2
    61                           	psect	text44,local,class=CODE,merge=1,delta=2
    62                           	psect	text45,local,class=CODE,merge=1,delta=2
    63                           	psect	text46,local,class=CODE,merge=1,delta=2
    64                           	psect	text47,local,class=CODE,merge=1,delta=2
    65                           	psect	text48,local,class=CODE,merge=1,delta=2
    66                           	psect	text49,local,class=CODE,merge=1,delta=2
    67                           	psect	text50,local,class=CODE,merge=1,delta=2
    68                           	psect	text51,local,class=CODE,merge=1,delta=2
    69                           	psect	text52,local,class=CODE,merge=1,delta=2
    70                           	psect	text53,local,class=CODE,merge=1,delta=2
    71                           	psect	text54,local,class=CODE,merge=1,delta=2
    72                           	psect	text55,local,class=CODE,merge=1,delta=2
    73                           	psect	intentry,global,class=CODE,delta=2
    74                           	psect	text57,local,class=CODE,merge=1,delta=2
    75                           	dabs	1,0x620,48
    76                           	dabs	1,0x5A0,80
    77                           	dabs	1,0x528,72
    78                           	dabs	1,0x2328,0,_adc_vals
    79                           	dabs	1,0x7E,2
    80  0000                     	;# 
    81  0001                     	;# 
    82  0002                     	;# 
    83  0003                     	;# 
    84  0004                     	;# 
    85  0005                     	;# 
    86  0006                     	;# 
    87  0007                     	;# 
    88  0008                     	;# 
    89  0009                     	;# 
    90  000A                     	;# 
    91  000B                     	;# 
    92  000C                     	;# 
    93  000D                     	;# 
    94  000E                     	;# 
    95  0010                     	;# 
    96  0011                     	;# 
    97  0012                     	;# 
    98  0015                     	;# 
    99  0016                     	;# 
   100  0016                     	;# 
   101  0017                     	;# 
   102  0018                     	;# 
   103  0019                     	;# 
   104  001A                     	;# 
   105  001B                     	;# 
   106  001C                     	;# 
   107  008C                     	;# 
   108  008D                     	;# 
   109  008E                     	;# 
   110  0090                     	;# 
   111  0091                     	;# 
   112  0092                     	;# 
   113  0095                     	;# 
   114  0096                     	;# 
   115  0097                     	;# 
   116  0099                     	;# 
   117  009A                     	;# 
   118  009B                     	;# 
   119  009B                     	;# 
   120  009C                     	;# 
   121  009D                     	;# 
   122  009E                     	;# 
   123  010C                     	;# 
   124  010D                     	;# 
   125  010E                     	;# 
   126  0116                     	;# 
   127  0117                     	;# 
   128  011D                     	;# 
   129  018C                     	;# 
   130  018D                     	;# 
   131  018E                     	;# 
   132  0191                     	;# 
   133  0191                     	;# 
   134  0192                     	;# 
   135  0193                     	;# 
   136  0193                     	;# 
   137  0194                     	;# 
   138  0195                     	;# 
   139  0196                     	;# 
   140  0197                     	;# 
   141  0199                     	;# 
   142  019A                     	;# 
   143  019B                     	;# 
   144  019B                     	;# 
   145  019B                     	;# 
   146  019B                     	;# 
   147  019C                     	;# 
   148  019C                     	;# 
   149  019D                     	;# 
   150  019E                     	;# 
   151  019F                     	;# 
   152  020D                     	;# 
   153  0210                     	;# 
   154  0211                     	;# 
   155  0211                     	;# 
   156  0212                     	;# 
   157  0212                     	;# 
   158  0213                     	;# 
   159  0213                     	;# 
   160  0214                     	;# 
   161  0214                     	;# 
   162  0215                     	;# 
   163  0215                     	;# 
   164  0215                     	;# 
   165  0216                     	;# 
   166  0216                     	;# 
   167  0217                     	;# 
   168  0217                     	;# 
   169  0291                     	;# 
   170  0291                     	;# 
   171  0292                     	;# 
   172  0293                     	;# 
   173  0298                     	;# 
   174  0298                     	;# 
   175  0299                     	;# 
   176  029A                     	;# 
   177  0394                     	;# 
   178  0395                     	;# 
   179  0396                     	;# 
   180  0FE4                     	;# 
   181  0FE5                     	;# 
   182  0FE6                     	;# 
   183  0FE7                     	;# 
   184  0FE8                     	;# 
   185  0FE9                     	;# 
   186  0FEA                     	;# 
   187  0FEB                     	;# 
   188  0FED                     	;# 
   189  0FEE                     	;# 
   190  0FEF                     	;# 
   191  0000                     	;# 
   192  0001                     	;# 
   193  0002                     	;# 
   194  0003                     	;# 
   195  0004                     	;# 
   196  0005                     	;# 
   197  0006                     	;# 
   198  0007                     	;# 
   199  0008                     	;# 
   200  0009                     	;# 
   201  000A                     	;# 
   202  000B                     	;# 
   203  000C                     	;# 
   204  000D                     	;# 
   205  000E                     	;# 
   206  0010                     	;# 
   207  0011                     	;# 
   208  0012                     	;# 
   209  0015                     	;# 
   210  0016                     	;# 
   211  0016                     	;# 
   212  0017                     	;# 
   213  0018                     	;# 
   214  0019                     	;# 
   215  001A                     	;# 
   216  001B                     	;# 
   217  001C                     	;# 
   218  008C                     	;# 
   219  008D                     	;# 
   220  008E                     	;# 
   221  0090                     	;# 
   222  0091                     	;# 
   223  0092                     	;# 
   224  0095                     	;# 
   225  0096                     	;# 
   226  0097                     	;# 
   227  0099                     	;# 
   228  009A                     	;# 
   229  009B                     	;# 
   230  009B                     	;# 
   231  009C                     	;# 
   232  009D                     	;# 
   233  009E                     	;# 
   234  010C                     	;# 
   235  010D                     	;# 
   236  010E                     	;# 
   237  0116                     	;# 
   238  0117                     	;# 
   239  011D                     	;# 
   240  018C                     	;# 
   241  018D                     	;# 
   242  018E                     	;# 
   243  0191                     	;# 
   244  0191                     	;# 
   245  0192                     	;# 
   246  0193                     	;# 
   247  0193                     	;# 
   248  0194                     	;# 
   249  0195                     	;# 
   250  0196                     	;# 
   251  0197                     	;# 
   252  0199                     	;# 
   253  019A                     	;# 
   254  019B                     	;# 
   255  019B                     	;# 
   256  019B                     	;# 
   257  019B                     	;# 
   258  019C                     	;# 
   259  019C                     	;# 
   260  019D                     	;# 
   261  019E                     	;# 
   262  019F                     	;# 
   263  020D                     	;# 
   264  0210                     	;# 
   265  0211                     	;# 
   266  0211                     	;# 
   267  0212                     	;# 
   268  0212                     	;# 
   269  0213                     	;# 
   270  0213                     	;# 
   271  0214                     	;# 
   272  0214                     	;# 
   273  0215                     	;# 
   274  0215                     	;# 
   275  0215                     	;# 
   276  0216                     	;# 
   277  0216                     	;# 
   278  0217                     	;# 
   279  0217                     	;# 
   280  0291                     	;# 
   281  0291                     	;# 
   282  0292                     	;# 
   283  0293                     	;# 
   284  0298                     	;# 
   285  0298                     	;# 
   286  0299                     	;# 
   287  029A                     	;# 
   288  0394                     	;# 
   289  0395                     	;# 
   290  0396                     	;# 
   291  0FE4                     	;# 
   292  0FE5                     	;# 
   293  0FE6                     	;# 
   294  0FE7                     	;# 
   295  0FE8                     	;# 
   296  0FE9                     	;# 
   297  0FEA                     	;# 
   298  0FEB                     	;# 
   299  0FED                     	;# 
   300  0FEE                     	;# 
   301  0FEF                     	;# 
   302  0000                     	;# 
   303  0001                     	;# 
   304  0002                     	;# 
   305  0003                     	;# 
   306  0004                     	;# 
   307  0005                     	;# 
   308  0006                     	;# 
   309  0007                     	;# 
   310  0008                     	;# 
   311  0009                     	;# 
   312  000A                     	;# 
   313  000B                     	;# 
   314  000C                     	;# 
   315  000D                     	;# 
   316  000E                     	;# 
   317  0010                     	;# 
   318  0011                     	;# 
   319  0012                     	;# 
   320  0015                     	;# 
   321  0016                     	;# 
   322  0016                     	;# 
   323  0017                     	;# 
   324  0018                     	;# 
   325  0019                     	;# 
   326  001A                     	;# 
   327  001B                     	;# 
   328  001C                     	;# 
   329  008C                     	;# 
   330  008D                     	;# 
   331  008E                     	;# 
   332  0090                     	;# 
   333  0091                     	;# 
   334  0092                     	;# 
   335  0095                     	;# 
   336  0096                     	;# 
   337  0097                     	;# 
   338  0099                     	;# 
   339  009A                     	;# 
   340  009B                     	;# 
   341  009B                     	;# 
   342  009C                     	;# 
   343  009D                     	;# 
   344  009E                     	;# 
   345  010C                     	;# 
   346  010D                     	;# 
   347  010E                     	;# 
   348  0116                     	;# 
   349  0117                     	;# 
   350  011D                     	;# 
   351  018C                     	;# 
   352  018D                     	;# 
   353  018E                     	;# 
   354  0191                     	;# 
   355  0191                     	;# 
   356  0192                     	;# 
   357  0193                     	;# 
   358  0193                     	;# 
   359  0194                     	;# 
   360  0195                     	;# 
   361  0196                     	;# 
   362  0197                     	;# 
   363  0199                     	;# 
   364  019A                     	;# 
   365  019B                     	;# 
   366  019B                     	;# 
   367  019B                     	;# 
   368  019B                     	;# 
   369  019C                     	;# 
   370  019C                     	;# 
   371  019D                     	;# 
   372  019E                     	;# 
   373  019F                     	;# 
   374  020D                     	;# 
   375  0210                     	;# 
   376  0211                     	;# 
   377  0211                     	;# 
   378  0212                     	;# 
   379  0212                     	;# 
   380  0213                     	;# 
   381  0213                     	;# 
   382  0214                     	;# 
   383  0214                     	;# 
   384  0215                     	;# 
   385  0215                     	;# 
   386  0215                     	;# 
   387  0216                     	;# 
   388  0216                     	;# 
   389  0217                     	;# 
   390  0217                     	;# 
   391  0291                     	;# 
   392  0291                     	;# 
   393  0292                     	;# 
   394  0293                     	;# 
   395  0298                     	;# 
   396  0298                     	;# 
   397  0299                     	;# 
   398  029A                     	;# 
   399  0394                     	;# 
   400  0395                     	;# 
   401  0396                     	;# 
   402  0FE4                     	;# 
   403  0FE5                     	;# 
   404  0FE6                     	;# 
   405  0FE7                     	;# 
   406  0FE8                     	;# 
   407  0FE9                     	;# 
   408  0FEA                     	;# 
   409  0FEB                     	;# 
   410  0FED                     	;# 
   411  0FEE                     	;# 
   412  0FEF                     	;# 
   413  0000                     	;# 
   414  0001                     	;# 
   415  0002                     	;# 
   416  0003                     	;# 
   417  0004                     	;# 
   418  0005                     	;# 
   419  0006                     	;# 
   420  0007                     	;# 
   421  0008                     	;# 
   422  0009                     	;# 
   423  000A                     	;# 
   424  000B                     	;# 
   425  000C                     	;# 
   426  000D                     	;# 
   427  000E                     	;# 
   428  0010                     	;# 
   429  0011                     	;# 
   430  0012                     	;# 
   431  0015                     	;# 
   432  0016                     	;# 
   433  0016                     	;# 
   434  0017                     	;# 
   435  0018                     	;# 
   436  0019                     	;# 
   437  001A                     	;# 
   438  001B                     	;# 
   439  001C                     	;# 
   440  008C                     	;# 
   441  008D                     	;# 
   442  008E                     	;# 
   443  0090                     	;# 
   444  0091                     	;# 
   445  0092                     	;# 
   446  0095                     	;# 
   447  0096                     	;# 
   448  0097                     	;# 
   449  0099                     	;# 
   450  009A                     	;# 
   451  009B                     	;# 
   452  009B                     	;# 
   453  009C                     	;# 
   454  009D                     	;# 
   455  009E                     	;# 
   456  010C                     	;# 
   457  010D                     	;# 
   458  010E                     	;# 
   459  0116                     	;# 
   460  0117                     	;# 
   461  011D                     	;# 
   462  018C                     	;# 
   463  018D                     	;# 
   464  018E                     	;# 
   465  0191                     	;# 
   466  0191                     	;# 
   467  0192                     	;# 
   468  0193                     	;# 
   469  0193                     	;# 
   470  0194                     	;# 
   471  0195                     	;# 
   472  0196                     	;# 
   473  0197                     	;# 
   474  0199                     	;# 
   475  019A                     	;# 
   476  019B                     	;# 
   477  019B                     	;# 
   478  019B                     	;# 
   479  019B                     	;# 
   480  019C                     	;# 
   481  019C                     	;# 
   482  019D                     	;# 
   483  019E                     	;# 
   484  019F                     	;# 
   485  020D                     	;# 
   486  0210                     	;# 
   487  0211                     	;# 
   488  0211                     	;# 
   489  0212                     	;# 
   490  0212                     	;# 
   491  0213                     	;# 
   492  0213                     	;# 
   493  0214                     	;# 
   494  0214                     	;# 
   495  0215                     	;# 
   496  0215                     	;# 
   497  0215                     	;# 
   498  0216                     	;# 
   499  0216                     	;# 
   500  0217                     	;# 
   501  0217                     	;# 
   502  0291                     	;# 
   503  0291                     	;# 
   504  0292                     	;# 
   505  0293                     	;# 
   506  0298                     	;# 
   507  0298                     	;# 
   508  0299                     	;# 
   509  029A                     	;# 
   510  0394                     	;# 
   511  0395                     	;# 
   512  0396                     	;# 
   513  0FE4                     	;# 
   514  0FE5                     	;# 
   515  0FE6                     	;# 
   516  0FE7                     	;# 
   517  0FE8                     	;# 
   518  0FE9                     	;# 
   519  0FEA                     	;# 
   520  0FEB                     	;# 
   521  0FED                     	;# 
   522  0FEE                     	;# 
   523  0FEF                     	;# 
   524  0000                     	;# 
   525  0001                     	;# 
   526  0002                     	;# 
   527  0003                     	;# 
   528  0004                     	;# 
   529  0005                     	;# 
   530  0006                     	;# 
   531  0007                     	;# 
   532  0008                     	;# 
   533  0009                     	;# 
   534  000A                     	;# 
   535  000B                     	;# 
   536  000C                     	;# 
   537  000D                     	;# 
   538  000E                     	;# 
   539  0010                     	;# 
   540  0011                     	;# 
   541  0012                     	;# 
   542  0015                     	;# 
   543  0016                     	;# 
   544  0016                     	;# 
   545  0017                     	;# 
   546  0018                     	;# 
   547  0019                     	;# 
   548  001A                     	;# 
   549  001B                     	;# 
   550  001C                     	;# 
   551  008C                     	;# 
   552  008D                     	;# 
   553  008E                     	;# 
   554  0090                     	;# 
   555  0091                     	;# 
   556  0092                     	;# 
   557  0095                     	;# 
   558  0096                     	;# 
   559  0097                     	;# 
   560  0099                     	;# 
   561  009A                     	;# 
   562  009B                     	;# 
   563  009B                     	;# 
   564  009C                     	;# 
   565  009D                     	;# 
   566  009E                     	;# 
   567  010C                     	;# 
   568  010D                     	;# 
   569  010E                     	;# 
   570  0116                     	;# 
   571  0117                     	;# 
   572  011D                     	;# 
   573  018C                     	;# 
   574  018D                     	;# 
   575  018E                     	;# 
   576  0191                     	;# 
   577  0191                     	;# 
   578  0192                     	;# 
   579  0193                     	;# 
   580  0193                     	;# 
   581  0194                     	;# 
   582  0195                     	;# 
   583  0196                     	;# 
   584  0197                     	;# 
   585  0199                     	;# 
   586  019A                     	;# 
   587  019B                     	;# 
   588  019B                     	;# 
   589  019B                     	;# 
   590  019B                     	;# 
   591  019C                     	;# 
   592  019C                     	;# 
   593  019D                     	;# 
   594  019E                     	;# 
   595  019F                     	;# 
   596  020D                     	;# 
   597  0210                     	;# 
   598  0211                     	;# 
   599  0211                     	;# 
   600  0212                     	;# 
   601  0212                     	;# 
   602  0213                     	;# 
   603  0213                     	;# 
   604  0214                     	;# 
   605  0214                     	;# 
   606  0215                     	;# 
   607  0215                     	;# 
   608  0215                     	;# 
   609  0216                     	;# 
   610  0216                     	;# 
   611  0217                     	;# 
   612  0217                     	;# 
   613  0291                     	;# 
   614  0291                     	;# 
   615  0292                     	;# 
   616  0293                     	;# 
   617  0298                     	;# 
   618  0298                     	;# 
   619  0299                     	;# 
   620  029A                     	;# 
   621  0394                     	;# 
   622  0395                     	;# 
   623  0396                     	;# 
   624  0FE4                     	;# 
   625  0FE5                     	;# 
   626  0FE6                     	;# 
   627  0FE7                     	;# 
   628  0FE8                     	;# 
   629  0FE9                     	;# 
   630  0FEA                     	;# 
   631  0FEB                     	;# 
   632  0FED                     	;# 
   633  0FEE                     	;# 
   634  0FEF                     	;# 
   635  0000                     	;# 
   636  0001                     	;# 
   637  0002                     	;# 
   638  0003                     	;# 
   639  0004                     	;# 
   640  0005                     	;# 
   641  0006                     	;# 
   642  0007                     	;# 
   643  0008                     	;# 
   644  0009                     	;# 
   645  000A                     	;# 
   646  000B                     	;# 
   647  000C                     	;# 
   648  000D                     	;# 
   649  000E                     	;# 
   650  0010                     	;# 
   651  0011                     	;# 
   652  0012                     	;# 
   653  0015                     	;# 
   654  0016                     	;# 
   655  0016                     	;# 
   656  0017                     	;# 
   657  0018                     	;# 
   658  0019                     	;# 
   659  001A                     	;# 
   660  001B                     	;# 
   661  001C                     	;# 
   662  008C                     	;# 
   663  008D                     	;# 
   664  008E                     	;# 
   665  0090                     	;# 
   666  0091                     	;# 
   667  0092                     	;# 
   668  0095                     	;# 
   669  0096                     	;# 
   670  0097                     	;# 
   671  0099                     	;# 
   672  009A                     	;# 
   673  009B                     	;# 
   674  009B                     	;# 
   675  009C                     	;# 
   676  009D                     	;# 
   677  009E                     	;# 
   678  010C                     	;# 
   679  010D                     	;# 
   680  010E                     	;# 
   681  0116                     	;# 
   682  0117                     	;# 
   683  011D                     	;# 
   684  018C                     	;# 
   685  018D                     	;# 
   686  018E                     	;# 
   687  0191                     	;# 
   688  0191                     	;# 
   689  0192                     	;# 
   690  0193                     	;# 
   691  0193                     	;# 
   692  0194                     	;# 
   693  0195                     	;# 
   694  0196                     	;# 
   695  0197                     	;# 
   696  0199                     	;# 
   697  019A                     	;# 
   698  019B                     	;# 
   699  019B                     	;# 
   700  019B                     	;# 
   701  019B                     	;# 
   702  019C                     	;# 
   703  019C                     	;# 
   704  019D                     	;# 
   705  019E                     	;# 
   706  019F                     	;# 
   707  020D                     	;# 
   708  0210                     	;# 
   709  0211                     	;# 
   710  0211                     	;# 
   711  0212                     	;# 
   712  0212                     	;# 
   713  0213                     	;# 
   714  0213                     	;# 
   715  0214                     	;# 
   716  0214                     	;# 
   717  0215                     	;# 
   718  0215                     	;# 
   719  0215                     	;# 
   720  0216                     	;# 
   721  0216                     	;# 
   722  0217                     	;# 
   723  0217                     	;# 
   724  0291                     	;# 
   725  0291                     	;# 
   726  0292                     	;# 
   727  0293                     	;# 
   728  0298                     	;# 
   729  0298                     	;# 
   730  0299                     	;# 
   731  029A                     	;# 
   732  0394                     	;# 
   733  0395                     	;# 
   734  0396                     	;# 
   735  0FE4                     	;# 
   736  0FE5                     	;# 
   737  0FE6                     	;# 
   738  0FE7                     	;# 
   739  0FE8                     	;# 
   740  0FE9                     	;# 
   741  0FEA                     	;# 
   742  0FEB                     	;# 
   743  0FED                     	;# 
   744  0FEE                     	;# 
   745  0FEF                     	;# 
   746  0000                     	;# 
   747  0001                     	;# 
   748  0002                     	;# 
   749  0003                     	;# 
   750  0004                     	;# 
   751  0005                     	;# 
   752  0006                     	;# 
   753  0007                     	;# 
   754  0008                     	;# 
   755  0009                     	;# 
   756  000A                     	;# 
   757  000B                     	;# 
   758  000C                     	;# 
   759  000D                     	;# 
   760  000E                     	;# 
   761  0010                     	;# 
   762  0011                     	;# 
   763  0012                     	;# 
   764  0015                     	;# 
   765  0016                     	;# 
   766  0016                     	;# 
   767  0017                     	;# 
   768  0018                     	;# 
   769  0019                     	;# 
   770  001A                     	;# 
   771  001B                     	;# 
   772  001C                     	;# 
   773  008C                     	;# 
   774  008D                     	;# 
   775  008E                     	;# 
   776  0090                     	;# 
   777  0091                     	;# 
   778  0092                     	;# 
   779  0095                     	;# 
   780  0096                     	;# 
   781  0097                     	;# 
   782  0099                     	;# 
   783  009A                     	;# 
   784  009B                     	;# 
   785  009B                     	;# 
   786  009C                     	;# 
   787  009D                     	;# 
   788  009E                     	;# 
   789  010C                     	;# 
   790  010D                     	;# 
   791  010E                     	;# 
   792  0116                     	;# 
   793  0117                     	;# 
   794  011D                     	;# 
   795  018C                     	;# 
   796  018D                     	;# 
   797  018E                     	;# 
   798  0191                     	;# 
   799  0191                     	;# 
   800  0192                     	;# 
   801  0193                     	;# 
   802  0193                     	;# 
   803  0194                     	;# 
   804  0195                     	;# 
   805  0196                     	;# 
   806  0197                     	;# 
   807  0199                     	;# 
   808  019A                     	;# 
   809  019B                     	;# 
   810  019B                     	;# 
   811  019B                     	;# 
   812  019B                     	;# 
   813  019C                     	;# 
   814  019C                     	;# 
   815  019D                     	;# 
   816  019E                     	;# 
   817  019F                     	;# 
   818  020D                     	;# 
   819  0210                     	;# 
   820  0211                     	;# 
   821  0211                     	;# 
   822  0212                     	;# 
   823  0212                     	;# 
   824  0213                     	;# 
   825  0213                     	;# 
   826  0214                     	;# 
   827  0214                     	;# 
   828  0215                     	;# 
   829  0215                     	;# 
   830  0215                     	;# 
   831  0216                     	;# 
   832  0216                     	;# 
   833  0217                     	;# 
   834  0217                     	;# 
   835  0291                     	;# 
   836  0291                     	;# 
   837  0292                     	;# 
   838  0293                     	;# 
   839  0298                     	;# 
   840  0298                     	;# 
   841  0299                     	;# 
   842  029A                     	;# 
   843  0394                     	;# 
   844  0395                     	;# 
   845  0396                     	;# 
   846  0FE4                     	;# 
   847  0FE5                     	;# 
   848  0FE6                     	;# 
   849  0FE7                     	;# 
   850  0FE8                     	;# 
   851  0FE9                     	;# 
   852  0FEA                     	;# 
   853  0FEB                     	;# 
   854  0FED                     	;# 
   855  0FEE                     	;# 
   856  0FEF                     	;# 
   857  0000                     	;# 
   858  0001                     	;# 
   859  0002                     	;# 
   860  0003                     	;# 
   861  0004                     	;# 
   862  0005                     	;# 
   863  0006                     	;# 
   864  0007                     	;# 
   865  0008                     	;# 
   866  0009                     	;# 
   867  000A                     	;# 
   868  000B                     	;# 
   869  000C                     	;# 
   870  000D                     	;# 
   871  000E                     	;# 
   872  0010                     	;# 
   873  0011                     	;# 
   874  0012                     	;# 
   875  0015                     	;# 
   876  0016                     	;# 
   877  0016                     	;# 
   878  0017                     	;# 
   879  0018                     	;# 
   880  0019                     	;# 
   881  001A                     	;# 
   882  001B                     	;# 
   883  001C                     	;# 
   884  008C                     	;# 
   885  008D                     	;# 
   886  008E                     	;# 
   887  0090                     	;# 
   888  0091                     	;# 
   889  0092                     	;# 
   890  0095                     	;# 
   891  0096                     	;# 
   892  0097                     	;# 
   893  0099                     	;# 
   894  009A                     	;# 
   895  009B                     	;# 
   896  009B                     	;# 
   897  009C                     	;# 
   898  009D                     	;# 
   899  009E                     	;# 
   900  010C                     	;# 
   901  010D                     	;# 
   902  010E                     	;# 
   903  0116                     	;# 
   904  0117                     	;# 
   905  011D                     	;# 
   906  018C                     	;# 
   907  018D                     	;# 
   908  018E                     	;# 
   909  0191                     	;# 
   910  0191                     	;# 
   911  0192                     	;# 
   912  0193                     	;# 
   913  0193                     	;# 
   914  0194                     	;# 
   915  0195                     	;# 
   916  0196                     	;# 
   917  0197                     	;# 
   918  0199                     	;# 
   919  019A                     	;# 
   920  019B                     	;# 
   921  019B                     	;# 
   922  019B                     	;# 
   923  019B                     	;# 
   924  019C                     	;# 
   925  019C                     	;# 
   926  019D                     	;# 
   927  019E                     	;# 
   928  019F                     	;# 
   929  020D                     	;# 
   930  0210                     	;# 
   931  0211                     	;# 
   932  0211                     	;# 
   933  0212                     	;# 
   934  0212                     	;# 
   935  0213                     	;# 
   936  0213                     	;# 
   937  0214                     	;# 
   938  0214                     	;# 
   939  0215                     	;# 
   940  0215                     	;# 
   941  0215                     	;# 
   942  0216                     	;# 
   943  0216                     	;# 
   944  0217                     	;# 
   945  0217                     	;# 
   946  0291                     	;# 
   947  0291                     	;# 
   948  0292                     	;# 
   949  0293                     	;# 
   950  0298                     	;# 
   951  0298                     	;# 
   952  0299                     	;# 
   953  029A                     	;# 
   954  0394                     	;# 
   955  0395                     	;# 
   956  0396                     	;# 
   957  0FE4                     	;# 
   958  0FE5                     	;# 
   959  0FE6                     	;# 
   960  0FE7                     	;# 
   961  0FE8                     	;# 
   962  0FE9                     	;# 
   963  0FEA                     	;# 
   964  0FEB                     	;# 
   965  0FED                     	;# 
   966  0FEE                     	;# 
   967  0FEF                     	;# 
   968  0000                     	;# 
   969  0001                     	;# 
   970  0002                     	;# 
   971  0003                     	;# 
   972  0004                     	;# 
   973  0005                     	;# 
   974  0006                     	;# 
   975  0007                     	;# 
   976  0008                     	;# 
   977  0009                     	;# 
   978  000A                     	;# 
   979  000B                     	;# 
   980  000C                     	;# 
   981  000D                     	;# 
   982  000E                     	;# 
   983  0010                     	;# 
   984  0011                     	;# 
   985  0012                     	;# 
   986  0015                     	;# 
   987  0016                     	;# 
   988  0016                     	;# 
   989  0017                     	;# 
   990  0018                     	;# 
   991  0019                     	;# 
   992  001A                     	;# 
   993  001B                     	;# 
   994  001C                     	;# 
   995  008C                     	;# 
   996  008D                     	;# 
   997  008E                     	;# 
   998  0090                     	;# 
   999  0091                     	;# 
  1000  0092                     	;# 
  1001  0095                     	;# 
  1002  0096                     	;# 
  1003  0097                     	;# 
  1004  0099                     	;# 
  1005  009A                     	;# 
  1006  009B                     	;# 
  1007  009B                     	;# 
  1008  009C                     	;# 
  1009  009D                     	;# 
  1010  009E                     	;# 
  1011  010C                     	;# 
  1012  010D                     	;# 
  1013  010E                     	;# 
  1014  0116                     	;# 
  1015  0117                     	;# 
  1016  011D                     	;# 
  1017  018C                     	;# 
  1018  018D                     	;# 
  1019  018E                     	;# 
  1020  0191                     	;# 
  1021  0191                     	;# 
  1022  0192                     	;# 
  1023  0193                     	;# 
  1024  0193                     	;# 
  1025  0194                     	;# 
  1026  0195                     	;# 
  1027  0196                     	;# 
  1028  0197                     	;# 
  1029  0199                     	;# 
  1030  019A                     	;# 
  1031  019B                     	;# 
  1032  019B                     	;# 
  1033  019B                     	;# 
  1034  019B                     	;# 
  1035  019C                     	;# 
  1036  019C                     	;# 
  1037  019D                     	;# 
  1038  019E                     	;# 
  1039  019F                     	;# 
  1040  020D                     	;# 
  1041  0210                     	;# 
  1042  0211                     	;# 
  1043  0211                     	;# 
  1044  0212                     	;# 
  1045  0212                     	;# 
  1046  0213                     	;# 
  1047  0213                     	;# 
  1048  0214                     	;# 
  1049  0214                     	;# 
  1050  0215                     	;# 
  1051  0215                     	;# 
  1052  0215                     	;# 
  1053  0216                     	;# 
  1054  0216                     	;# 
  1055  0217                     	;# 
  1056  0217                     	;# 
  1057  0291                     	;# 
  1058  0291                     	;# 
  1059  0292                     	;# 
  1060  0293                     	;# 
  1061  0298                     	;# 
  1062  0298                     	;# 
  1063  0299                     	;# 
  1064  029A                     	;# 
  1065  0394                     	;# 
  1066  0395                     	;# 
  1067  0396                     	;# 
  1068  0FE4                     	;# 
  1069  0FE5                     	;# 
  1070  0FE6                     	;# 
  1071  0FE7                     	;# 
  1072  0FE8                     	;# 
  1073  0FE9                     	;# 
  1074  0FEA                     	;# 
  1075  0FEB                     	;# 
  1076  0FED                     	;# 
  1077  0FEE                     	;# 
  1078  0FEF                     	;# 
  1079  0000                     	;# 
  1080  0001                     	;# 
  1081  0002                     	;# 
  1082  0003                     	;# 
  1083  0004                     	;# 
  1084  0005                     	;# 
  1085  0006                     	;# 
  1086  0007                     	;# 
  1087  0008                     	;# 
  1088  0009                     	;# 
  1089  000A                     	;# 
  1090  000B                     	;# 
  1091  000C                     	;# 
  1092  000D                     	;# 
  1093  000E                     	;# 
  1094  0010                     	;# 
  1095  0011                     	;# 
  1096  0012                     	;# 
  1097  0015                     	;# 
  1098  0016                     	;# 
  1099  0016                     	;# 
  1100  0017                     	;# 
  1101  0018                     	;# 
  1102  0019                     	;# 
  1103  001A                     	;# 
  1104  001B                     	;# 
  1105  001C                     	;# 
  1106  008C                     	;# 
  1107  008D                     	;# 
  1108  008E                     	;# 
  1109  0090                     	;# 
  1110  0091                     	;# 
  1111  0092                     	;# 
  1112  0095                     	;# 
  1113  0096                     	;# 
  1114  0097                     	;# 
  1115  0099                     	;# 
  1116  009A                     	;# 
  1117  009B                     	;# 
  1118  009B                     	;# 
  1119  009C                     	;# 
  1120  009D                     	;# 
  1121  009E                     	;# 
  1122  010C                     	;# 
  1123  010D                     	;# 
  1124  010E                     	;# 
  1125  0116                     	;# 
  1126  0117                     	;# 
  1127  011D                     	;# 
  1128  018C                     	;# 
  1129  018D                     	;# 
  1130  018E                     	;# 
  1131  0191                     	;# 
  1132  0191                     	;# 
  1133  0192                     	;# 
  1134  0193                     	;# 
  1135  0193                     	;# 
  1136  0194                     	;# 
  1137  0195                     	;# 
  1138  0196                     	;# 
  1139  0197                     	;# 
  1140  0199                     	;# 
  1141  019A                     	;# 
  1142  019B                     	;# 
  1143  019B                     	;# 
  1144  019B                     	;# 
  1145  019B                     	;# 
  1146  019C                     	;# 
  1147  019C                     	;# 
  1148  019D                     	;# 
  1149  019E                     	;# 
  1150  019F                     	;# 
  1151  020D                     	;# 
  1152  0210                     	;# 
  1153  0211                     	;# 
  1154  0211                     	;# 
  1155  0212                     	;# 
  1156  0212                     	;# 
  1157  0213                     	;# 
  1158  0213                     	;# 
  1159  0214                     	;# 
  1160  0214                     	;# 
  1161  0215                     	;# 
  1162  0215                     	;# 
  1163  0215                     	;# 
  1164  0216                     	;# 
  1165  0216                     	;# 
  1166  0217                     	;# 
  1167  0217                     	;# 
  1168  0291                     	;# 
  1169  0291                     	;# 
  1170  0292                     	;# 
  1171  0293                     	;# 
  1172  0298                     	;# 
  1173  0298                     	;# 
  1174  0299                     	;# 
  1175  029A                     	;# 
  1176  0394                     	;# 
  1177  0395                     	;# 
  1178  0396                     	;# 
  1179  0FE4                     	;# 
  1180  0FE5                     	;# 
  1181  0FE6                     	;# 
  1182  0FE7                     	;# 
  1183  0FE8                     	;# 
  1184  0FE9                     	;# 
  1185  0FEA                     	;# 
  1186  0FEB                     	;# 
  1187  0FED                     	;# 
  1188  0FEE                     	;# 
  1189  0FEF                     	;# 
  1190  0000                     	;# 
  1191  0001                     	;# 
  1192  0002                     	;# 
  1193  0003                     	;# 
  1194  0004                     	;# 
  1195  0005                     	;# 
  1196  0006                     	;# 
  1197  0007                     	;# 
  1198  0008                     	;# 
  1199  0009                     	;# 
  1200  000A                     	;# 
  1201  000B                     	;# 
  1202  000C                     	;# 
  1203  000D                     	;# 
  1204  000E                     	;# 
  1205  0010                     	;# 
  1206  0011                     	;# 
  1207  0012                     	;# 
  1208  0015                     	;# 
  1209  0016                     	;# 
  1210  0016                     	;# 
  1211  0017                     	;# 
  1212  0018                     	;# 
  1213  0019                     	;# 
  1214  001A                     	;# 
  1215  001B                     	;# 
  1216  001C                     	;# 
  1217  008C                     	;# 
  1218  008D                     	;# 
  1219  008E                     	;# 
  1220  0090                     	;# 
  1221  0091                     	;# 
  1222  0092                     	;# 
  1223  0095                     	;# 
  1224  0096                     	;# 
  1225  0097                     	;# 
  1226  0099                     	;# 
  1227  009A                     	;# 
  1228  009B                     	;# 
  1229  009B                     	;# 
  1230  009C                     	;# 
  1231  009D                     	;# 
  1232  009E                     	;# 
  1233  010C                     	;# 
  1234  010D                     	;# 
  1235  010E                     	;# 
  1236  0116                     	;# 
  1237  0117                     	;# 
  1238  011D                     	;# 
  1239  018C                     	;# 
  1240  018D                     	;# 
  1241  018E                     	;# 
  1242  0191                     	;# 
  1243  0191                     	;# 
  1244  0192                     	;# 
  1245  0193                     	;# 
  1246  0193                     	;# 
  1247  0194                     	;# 
  1248  0195                     	;# 
  1249  0196                     	;# 
  1250  0197                     	;# 
  1251  0199                     	;# 
  1252  019A                     	;# 
  1253  019B                     	;# 
  1254  019B                     	;# 
  1255  019B                     	;# 
  1256  019B                     	;# 
  1257  019C                     	;# 
  1258  019C                     	;# 
  1259  019D                     	;# 
  1260  019E                     	;# 
  1261  019F                     	;# 
  1262  020D                     	;# 
  1263  0210                     	;# 
  1264  0211                     	;# 
  1265  0211                     	;# 
  1266  0212                     	;# 
  1267  0212                     	;# 
  1268  0213                     	;# 
  1269  0213                     	;# 
  1270  0214                     	;# 
  1271  0214                     	;# 
  1272  0215                     	;# 
  1273  0215                     	;# 
  1274  0215                     	;# 
  1275  0216                     	;# 
  1276  0216                     	;# 
  1277  0217                     	;# 
  1278  0217                     	;# 
  1279  0291                     	;# 
  1280  0291                     	;# 
  1281  0292                     	;# 
  1282  0293                     	;# 
  1283  0298                     	;# 
  1284  0298                     	;# 
  1285  0299                     	;# 
  1286  029A                     	;# 
  1287  0394                     	;# 
  1288  0395                     	;# 
  1289  0396                     	;# 
  1290  0FE4                     	;# 
  1291  0FE5                     	;# 
  1292  0FE6                     	;# 
  1293  0FE7                     	;# 
  1294  0FE8                     	;# 
  1295  0FE9                     	;# 
  1296  0FEA                     	;# 
  1297  0FEB                     	;# 
  1298  0FED                     	;# 
  1299  0FEE                     	;# 
  1300  0FEF                     	;# 
  1301  0000                     	;# 
  1302  0001                     	;# 
  1303  0002                     	;# 
  1304  0003                     	;# 
  1305  0004                     	;# 
  1306  0005                     	;# 
  1307  0006                     	;# 
  1308  0007                     	;# 
  1309  0008                     	;# 
  1310  0009                     	;# 
  1311  000A                     	;# 
  1312  000B                     	;# 
  1313  000C                     	;# 
  1314  000D                     	;# 
  1315  000E                     	;# 
  1316  0010                     	;# 
  1317  0011                     	;# 
  1318  0012                     	;# 
  1319  0015                     	;# 
  1320  0016                     	;# 
  1321  0016                     	;# 
  1322  0017                     	;# 
  1323  0018                     	;# 
  1324  0019                     	;# 
  1325  001A                     	;# 
  1326  001B                     	;# 
  1327  001C                     	;# 
  1328  008C                     	;# 
  1329  008D                     	;# 
  1330  008E                     	;# 
  1331  0090                     	;# 
  1332  0091                     	;# 
  1333  0092                     	;# 
  1334  0095                     	;# 
  1335  0096                     	;# 
  1336  0097                     	;# 
  1337  0099                     	;# 
  1338  009A                     	;# 
  1339  009B                     	;# 
  1340  009B                     	;# 
  1341  009C                     	;# 
  1342  009D                     	;# 
  1343  009E                     	;# 
  1344  010C                     	;# 
  1345  010D                     	;# 
  1346  010E                     	;# 
  1347  0116                     	;# 
  1348  0117                     	;# 
  1349  011D                     	;# 
  1350  018C                     	;# 
  1351  018D                     	;# 
  1352  018E                     	;# 
  1353  0191                     	;# 
  1354  0191                     	;# 
  1355  0192                     	;# 
  1356  0193                     	;# 
  1357  0193                     	;# 
  1358  0194                     	;# 
  1359  0195                     	;# 
  1360  0196                     	;# 
  1361  0197                     	;# 
  1362  0199                     	;# 
  1363  019A                     	;# 
  1364  019B                     	;# 
  1365  019B                     	;# 
  1366  019B                     	;# 
  1367  019B                     	;# 
  1368  019C                     	;# 
  1369  019C                     	;# 
  1370  019D                     	;# 
  1371  019E                     	;# 
  1372  019F                     	;# 
  1373  020D                     	;# 
  1374  0210                     	;# 
  1375  0211                     	;# 
  1376  0211                     	;# 
  1377  0212                     	;# 
  1378  0212                     	;# 
  1379  0213                     	;# 
  1380  0213                     	;# 
  1381  0214                     	;# 
  1382  0214                     	;# 
  1383  0215                     	;# 
  1384  0215                     	;# 
  1385  0215                     	;# 
  1386  0216                     	;# 
  1387  0216                     	;# 
  1388  0217                     	;# 
  1389  0217                     	;# 
  1390  0291                     	;# 
  1391  0291                     	;# 
  1392  0292                     	;# 
  1393  0293                     	;# 
  1394  0298                     	;# 
  1395  0298                     	;# 
  1396  0299                     	;# 
  1397  029A                     	;# 
  1398  0394                     	;# 
  1399  0395                     	;# 
  1400  0396                     	;# 
  1401  0FE4                     	;# 
  1402  0FE5                     	;# 
  1403  0FE6                     	;# 
  1404  0FE7                     	;# 
  1405  0FE8                     	;# 
  1406  0FE9                     	;# 
  1407  0FEA                     	;# 
  1408  0FEB                     	;# 
  1409  0FED                     	;# 
  1410  0FEE                     	;# 
  1411  0FEF                     	;# 
  1412  0000                     	;# 
  1413  0001                     	;# 
  1414  0002                     	;# 
  1415  0003                     	;# 
  1416  0004                     	;# 
  1417  0005                     	;# 
  1418  0006                     	;# 
  1419  0007                     	;# 
  1420  0008                     	;# 
  1421  0009                     	;# 
  1422  000A                     	;# 
  1423  000B                     	;# 
  1424  000C                     	;# 
  1425  000D                     	;# 
  1426  000E                     	;# 
  1427  0010                     	;# 
  1428  0011                     	;# 
  1429  0012                     	;# 
  1430  0015                     	;# 
  1431  0016                     	;# 
  1432  0016                     	;# 
  1433  0017                     	;# 
  1434  0018                     	;# 
  1435  0019                     	;# 
  1436  001A                     	;# 
  1437  001B                     	;# 
  1438  001C                     	;# 
  1439  008C                     	;# 
  1440  008D                     	;# 
  1441  008E                     	;# 
  1442  0090                     	;# 
  1443  0091                     	;# 
  1444  0092                     	;# 
  1445  0095                     	;# 
  1446  0096                     	;# 
  1447  0097                     	;# 
  1448  0099                     	;# 
  1449  009A                     	;# 
  1450  009B                     	;# 
  1451  009B                     	;# 
  1452  009C                     	;# 
  1453  009D                     	;# 
  1454  009E                     	;# 
  1455  010C                     	;# 
  1456  010D                     	;# 
  1457  010E                     	;# 
  1458  0116                     	;# 
  1459  0117                     	;# 
  1460  011D                     	;# 
  1461  018C                     	;# 
  1462  018D                     	;# 
  1463  018E                     	;# 
  1464  0191                     	;# 
  1465  0191                     	;# 
  1466  0192                     	;# 
  1467  0193                     	;# 
  1468  0193                     	;# 
  1469  0194                     	;# 
  1470  0195                     	;# 
  1471  0196                     	;# 
  1472  0197                     	;# 
  1473  0199                     	;# 
  1474  019A                     	;# 
  1475  019B                     	;# 
  1476  019B                     	;# 
  1477  019B                     	;# 
  1478  019B                     	;# 
  1479  019C                     	;# 
  1480  019C                     	;# 
  1481  019D                     	;# 
  1482  019E                     	;# 
  1483  019F                     	;# 
  1484  020D                     	;# 
  1485  0210                     	;# 
  1486  0211                     	;# 
  1487  0211                     	;# 
  1488  0212                     	;# 
  1489  0212                     	;# 
  1490  0213                     	;# 
  1491  0213                     	;# 
  1492  0214                     	;# 
  1493  0214                     	;# 
  1494  0215                     	;# 
  1495  0215                     	;# 
  1496  0215                     	;# 
  1497  0216                     	;# 
  1498  0216                     	;# 
  1499  0217                     	;# 
  1500  0217                     	;# 
  1501  0291                     	;# 
  1502  0291                     	;# 
  1503  0292                     	;# 
  1504  0293                     	;# 
  1505  0298                     	;# 
  1506  0298                     	;# 
  1507  0299                     	;# 
  1508  029A                     	;# 
  1509  0394                     	;# 
  1510  0395                     	;# 
  1511  0396                     	;# 
  1512  0FE4                     	;# 
  1513  0FE5                     	;# 
  1514  0FE6                     	;# 
  1515  0FE7                     	;# 
  1516  0FE8                     	;# 
  1517  0FE9                     	;# 
  1518  0FEA                     	;# 
  1519  0FEB                     	;# 
  1520  0FED                     	;# 
  1521  0FEE                     	;# 
  1522  0FEF                     	;# 
  1523  0000                     	;# 
  1524  0001                     	;# 
  1525  0002                     	;# 
  1526  0003                     	;# 
  1527  0004                     	;# 
  1528  0005                     	;# 
  1529  0006                     	;# 
  1530  0007                     	;# 
  1531  0008                     	;# 
  1532  0009                     	;# 
  1533  000A                     	;# 
  1534  000B                     	;# 
  1535  000C                     	;# 
  1536  000D                     	;# 
  1537  000E                     	;# 
  1538  0010                     	;# 
  1539  0011                     	;# 
  1540  0012                     	;# 
  1541  0015                     	;# 
  1542  0016                     	;# 
  1543  0016                     	;# 
  1544  0017                     	;# 
  1545  0018                     	;# 
  1546  0019                     	;# 
  1547  001A                     	;# 
  1548  001B                     	;# 
  1549  001C                     	;# 
  1550  008C                     	;# 
  1551  008D                     	;# 
  1552  008E                     	;# 
  1553  0090                     	;# 
  1554  0091                     	;# 
  1555  0092                     	;# 
  1556  0095                     	;# 
  1557  0096                     	;# 
  1558  0097                     	;# 
  1559  0099                     	;# 
  1560  009A                     	;# 
  1561  009B                     	;# 
  1562  009B                     	;# 
  1563  009C                     	;# 
  1564  009D                     	;# 
  1565  009E                     	;# 
  1566  010C                     	;# 
  1567  010D                     	;# 
  1568  010E                     	;# 
  1569  0116                     	;# 
  1570  0117                     	;# 
  1571  011D                     	;# 
  1572  018C                     	;# 
  1573  018D                     	;# 
  1574  018E                     	;# 
  1575  0191                     	;# 
  1576  0191                     	;# 
  1577  0192                     	;# 
  1578  0193                     	;# 
  1579  0193                     	;# 
  1580  0194                     	;# 
  1581  0195                     	;# 
  1582  0196                     	;# 
  1583  0197                     	;# 
  1584  0199                     	;# 
  1585  019A                     	;# 
  1586  019B                     	;# 
  1587  019B                     	;# 
  1588  019B                     	;# 
  1589  019B                     	;# 
  1590  019C                     	;# 
  1591  019C                     	;# 
  1592  019D                     	;# 
  1593  019E                     	;# 
  1594  019F                     	;# 
  1595  020D                     	;# 
  1596  0210                     	;# 
  1597  0211                     	;# 
  1598  0211                     	;# 
  1599  0212                     	;# 
  1600  0212                     	;# 
  1601  0213                     	;# 
  1602  0213                     	;# 
  1603  0214                     	;# 
  1604  0214                     	;# 
  1605  0215                     	;# 
  1606  0215                     	;# 
  1607  0215                     	;# 
  1608  0216                     	;# 
  1609  0216                     	;# 
  1610  0217                     	;# 
  1611  0217                     	;# 
  1612  0291                     	;# 
  1613  0291                     	;# 
  1614  0292                     	;# 
  1615  0293                     	;# 
  1616  0298                     	;# 
  1617  0298                     	;# 
  1618  0299                     	;# 
  1619  029A                     	;# 
  1620  0394                     	;# 
  1621  0395                     	;# 
  1622  0396                     	;# 
  1623  0FE4                     	;# 
  1624  0FE5                     	;# 
  1625  0FE6                     	;# 
  1626  0FE7                     	;# 
  1627  0FE8                     	;# 
  1628  0FE9                     	;# 
  1629  0FEA                     	;# 
  1630  0FEB                     	;# 
  1631  0FED                     	;# 
  1632  0FEE                     	;# 
  1633  0FEF                     	;_adc_vals
  1634                           
  1635                           	psect	idataBANK1
  1636  07F8                     __pidataBANK1:	
  1637                           
  1638                           ;initializer for _cc1PaTable
  1639  07F8  3403               	retlw	3
  1640  07F9  340F               	retlw	15
  1641  07FA  341E               	retlw	30
  1642  07FB  3427               	retlw	39
  1643  07FC  3450               	retlw	80
  1644  07FD  3481               	retlw	129
  1645  07FE  34CB               	retlw	203
  1646  07FF  34C2               	retlw	194
  1647                           
  1648                           	psect	idataBANK2
  1649  0C2A                     __pidataBANK2:	
  1650                           
  1651                           ;initializer for _cc1InitVal
  1652  0C2A  3447               	retlw	71
  1653  0C2B  3446               	retlw	70
  1654  0C2C  344E               	retlw	78
  1655  0C2D  340B               	retlw	11
  1656  0C2E  34D3               	retlw	211
  1657  0C2F  3491               	retlw	145
  1658  0C30  340B               	retlw	11
  1659  0C31  3408               	retlw	8
  1660  0C32  3404               	retlw	4
  1661  0C33  3400               	retlw	0
  1662  0C34  3400               	retlw	0
  1663  0C35  3406               	retlw	6
  1664  0C36  3400               	retlw	0
  1665  0C37  3421               	retlw	33
  1666  0C38  3463               	retlw	99
  1667  0C39  3491               	retlw	145
  1668  0C3A  34CA               	retlw	202
  1669  0C3B  3483               	retlw	131
  1670  0C3C  3402               	retlw	2
  1671  0C3D  3402               	retlw	2
  1672  0C3E  343B               	retlw	59
  1673  0C3F  3434               	retlw	52
  1674  0C40  3407               	retlw	7
  1675  0C41  343F               	retlw	63
  1676  0C42  3408               	retlw	8
  1677  0C43  3416               	retlw	22
  1678  0C44  346C               	retlw	108
  1679  0C45  3403               	retlw	3
  1680  0C46  3440               	retlw	64
  1681  0C47  3491               	retlw	145
  1682  0C48  3487               	retlw	135
  1683  0C49  346B               	retlw	107
  1684  0C4A  34FB               	retlw	251
  1685  0C4B  3456               	retlw	86
  1686  0C4C  3416               	retlw	22
  1687  0C4D  34E9               	retlw	233
  1688  0C4E  342A               	retlw	42
  1689  0C4F  3400               	retlw	0
  1690  0C50  341F               	retlw	31
  1691  0C51  3441               	retlw	65
  1692  0C52  3400               	retlw	0
  1693  0C53  3459               	retlw	89
  1694  0C54  347F               	retlw	127
  1695  0C55  343F               	retlw	63
  1696  0C56  3481               	retlw	129
  1697  0C57  3435               	retlw	53
  1698  0C58  3409               	retlw	9
  1699  3820                     _nvm_pgm_cfg_absaddr	set	14368
  1700  3820                     _nvm_pgm_cfg_absaddr	set	14368
  1701                           
  1702                           	psect	_nvm_pgm_cfg_text
  1703  3820                     __p_nvm_pgm_cfg_text:	
  1704  3820                     _nvm_pgm_cfg:	
  1705  3820  345C               	retlw	92
  1706  3821  34C5               	retlw	197
  1707  3822  3400               	retlw	0
  1708  3823  3400               	retlw	0
  1709  3824  3400               	retlw	0
  1710  3825  3400               	retlw	0
  1711  3826  3400               	retlw	0
  1712  3827  3400               	retlw	0
  1713  3828  3400               	retlw	0
  1714  3829  3400               	retlw	0
  1715  382A  3400               	retlw	0
  1716  382B  3400               	retlw	0
  1717  382C  3400               	retlw	0
  1718  382D  3400               	retlw	0
  1719  382E  3400               	retlw	0
  1720  382F  3400               	retlw	0
  1721  3830  3400               	retlw	0
  1722  3831  3400               	retlw	0
  1723  3832  3400               	retlw	0
  1724  3833  3400               	retlw	0
  1725  3834  3400               	retlw	0
  1726  3835  3400               	retlw	0
  1727  3836  3400               	retlw	0
  1728  3837  3400               	retlw	0
  1729  3838  3400               	retlw	0
  1730  3839  3400               	retlw	0
  1731  383A  3400               	retlw	0
  1732  383B  3400               	retlw	0
  1733  383C  3400               	retlw	0
  1734  383D  3400               	retlw	0
  1735  383E  3400               	retlw	0
  1736  383F  3400               	retlw	0
  1737  3840                     __end_of_nvm_pgm_cfg:	
  1738  000B                     _INTCON	set	11
  1739  000B                     _INTCONbits	set	11
  1740  0011                     _PIR1	set	17
  1741  0011                     _PIR1bits	set	17
  1742  0012                     _PIR2	set	18
  1743  000C                     _PORTA	set	12
  1744  000D                     _PORTBbits	set	13
  1745  000E                     _PORTC	set	14
  1746  0018                     _T1CON	set	24
  1747  0015                     _TMR0	set	21
  1748  0017                     _TMR1H	set	23
  1749  0016                     _TMR1L	set	22
  1750  009D                     _ADCON0	set	157
  1751  009D                     _ADCON0bits	set	157
  1752  009E                     _ADCON1	set	158
  1753  009C                     _ADRESH	set	156
  1754  009B                     _ADRESL	set	155
  1755  0095                     _OPTION_REG	set	149
  1756  0099                     _OSCCON	set	153
  1757  0091                     _PIE1	set	145
  1758  0092                     _PIE2	set	146
  1759  008C                     _TRISA	set	140
  1760  008D                     _TRISB	set	141
  1761  008E                     _TRISC	set	142
  1762  0097                     _WDTCON	set	151
  1763  0117                     _FVRCON	set	279
  1764  010C                     _LATAbits	set	268
  1765  010E                     _LATCbits	set	270
  1766  0191                     _PMADR	set	401
  1767  0193                     _PMDAT	set	403
  1768  018C                     _ANSELA	set	396
  1769  018D                     _ANSELB	set	397
  1770  018E                     _ANSELC	set	398
  1771  0195                     _PMCON1	set	405
  1772  0195                     _PMCON1bits	set	405
  1773  0196                     _PMCON2	set	406
  1774  0211                     _SSPBUF	set	529
  1775  0215                     _SSPCON1	set	533
  1776  0216                     _SSPCON2	set	534
  1777  0215                     _SSPCONbits	set	533
  1778  0214                     _SSPSTAT	set	532
  1779  020D                     _WPUB	set	525
  1780  0396                     _IOCBFbits	set	918
  1781  0395                     _IOCBN	set	917
  1782  0394                     _IOCBP	set	916
  1783                           
  1784                           ; #config settings
  1785  0000                     
  1786                           	psect	cinit
  1787  0016                     start_initialization:	
  1788  0016                     __initialization:		;BIGRAM
  1789                           
  1790                           ; Clear objects allocated to BIGRAM
  1791  0016  3028               	movlw	low (0+9000)
  1792  0017  0084               	movwf	4
  1793  0018  3023               	movlw	high (0+9000)
  1794  0019  0085               	movwf	5
  1795  001A  30C8               	movlw	200
  1796  001B  00FE               	movwf	btemp
  1797  001C  3000               	movlw	0
  1798  001D  00FF               	movwf	btemp+1
  1799  001E  3188  20BD  3180   	fcall	clear_ram0
  1800                           
  1801                           ; Clear objects allocated to COMMON
  1802  0021  01FC               	clrf	__pbssCOMMON& (0+127)
  1803                           
  1804                           ; Clear objects allocated to BANK1
  1805  0022  30A0               	movlw	low __pbssBANK1
  1806  0023  0084               	movwf	4
  1807  0024  3000               	movlw	high __pbssBANK1
  1808  0025  0085               	movwf	5
  1809  0026  3036               	movlw	54
  1810  0027  00FE               	movwf	btemp
  1811  0028  3000               	movlw	0
  1812  0029  00FF               	movwf	btemp+1
  1813  002A  3188  20BD  3180   	fcall	clear_ram0
  1814                           
  1815                           ; Initialize objects allocated to BANK1
  1816  002D  30F8               	movlw	low __pidataBANK1
  1817  002E  0084               	movwf	4
  1818  002F  3087               	movlw	(high __pidataBANK1)| (0+128)
  1819  0030  0085               	movwf	5
  1820  0031  30D6               	movlw	low __pdataBANK1
  1821  0032  0086               	movwf	6
  1822  0033  3000               	movlw	high __pdataBANK1
  1823  0034  0087               	movwf	7
  1824  0035  3000               	movlw	0
  1825  0036  00FF               	movwf	btemp+1
  1826  0037  3008               	movlw	8
  1827  0038  3188  20B1  3180   	fcall	init_ram
  1828                           
  1829                           ; Initialize objects allocated to BANK2
  1830  003B  302A               	movlw	low __pidataBANK2
  1831  003C  0084               	movwf	4
  1832  003D  308C               	movlw	(high __pidataBANK2)| (0+128)
  1833  003E  0085               	movwf	5
  1834  003F  3020               	movlw	low __pdataBANK2
  1835  0040  0086               	movwf	6
  1836  0041  3001               	movlw	high __pdataBANK2
  1837  0042  0087               	movwf	7
  1838  0043  3000               	movlw	0
  1839  0044  00FF               	movwf	btemp+1
  1840  0045  302F               	movlw	47
  1841  0046  3188  20B1         	fcall	init_ram
  1842  0048                     end_of_initialization:	
  1843                           ;End of C runtime variable initialization code
  1844                           
  1845  0048                     __end_of__initialization:	
  1846  0048  0020               	movlb	0
  1847  0049  318E  2E38         	ljmp	_main	;jump to C main() function
  1848                           
  1849                           	psect	bssCOMMON
  1850  007C                     __pbssCOMMON:	
  1851  007C                     _pgm_flg:	
  1852  007C                     	ds	1
  1853                           
  1854                           	psect	bssBANK1
  1855  00A0                     __pbssBANK1:	
  1856  00A0                     _battV:	
  1857  00A0                     	ds	3
  1858  00A3                     _realRmsCurr:	
  1859  00A3                     	ds	3
  1860  00A6                     _rmsCurr:	
  1861  00A6                     	ds	3
  1862  00A9                     _batt:	
  1863  00A9                     	ds	2
  1864  00AB                     _errno:	
  1865  00AB                     	ds	2
  1866  00AD                     _tmrLongSel:	
  1867  00AD                     	ds	2
  1868  00AF                     _cntSndData:	
  1869  00AF                     	ds	1
  1870  00B0                     _flg_slp:	
  1871  00B0                     	ds	1
  1872  00B1                     _rtx_flg:	
  1873  00B1                     	ds	1
  1874  00B2                     _tmrDbncSel:	
  1875  00B2                     	ds	1
  1876  00B3                     _tmrRcvPkt:	
  1877  00B3                     	ds	1
  1878  00B4                     _u_SYS_STA:	
  1879  00B4                     	ds	1
  1880  00B5                     _u_flg_din:	
  1881  00B5                     	ds	1
  1882  00B6                     _u_in_ev_down:	
  1883  00B6                     	ds	1
  1884  00B7                     _u_in_ev_long:	
  1885  00B7                     	ds	1
  1886  00B8                     _u_in_ev_up:	
  1887  00B8                     	ds	1
  1888  00B9                     _u_in_sta_currTask:	
  1889  00B9                     	ds	1
  1890  00BA                     _u_in_sta_tmpTask:	
  1891  00BA                     	ds	1
  1892  00BB                     _pktRx:	
  1893  00BB                     	ds	11
  1894  00C6                     _pktTx:	
  1895  00C6                     	ds	11
  1896  00D1                     _pgm_cfg:	
  1897  00D1                     	ds	5
  1898                           
  1899                           	psect	dataBANK1
  1900  00D6                     __pdataBANK1:	
  1901  00D6                     _cc1PaTable:	
  1902  00D6                     	ds	8
  1903                           
  1904                           	psect	dataBANK2
  1905  0120                     __pdataBANK2:	
  1906  0120                     _cc1InitVal:	
  1907  0120                     	ds	47
  1908                           
  1909                           	psect	clrtext
  1910  08BD                     clear_ram0:	
  1911                           ;	Called with FSR0 containing the base address, and
  1912                           ;	btemp/btemp+1 has the size to clear
  1913                           
  1914  08BD  0064               	clrwdt	;clear the watchdog before getting into this loop
  1915  08BE                     clrloop0:	
  1916  08BE  0180               	clrf	0	;clear RAM location pointed to by FSR
  1917  08BF  3101               	addfsr 0,1
  1918  08C0  3001               	movlw	1
  1919  08C1  02FE               	subwf	126,f
  1920  08C2  3000               	movlw	0
  1921  08C3  3BFF               	subwfb	127,f
  1922  08C4  087F               	movf	127,w
  1923  08C5  047E               	iorwf	126,w
  1924  08C6  1903               	btfsc	3,2
  1925  08C7  3400               	retlw	0	;all done for this memory range, return
  1926  08C8  28BE               	goto	clrloop0	;have we reached the end yet?
  1927                           
  1928                           	psect	inittext
  1929  08B1                     init_ram:	
  1930  08B1  00FE               	movwf	126
  1931  08B2                     initloop:	
  1932  08B2  0012               	moviw fsr0++
  1933  08B3  001E               	movwi fsr1++
  1934  08B4  3001               	movlw	1
  1935  08B5  02FE               	subwf	126,f
  1936  08B6  3000               	movlw	0
  1937  08B7  3BFF               	subwfb	127,f
  1938  08B8  087F               	movf	127,w
  1939  08B9  047E               	iorwf	126,w
  1940  08BA  1903               	btfsc	3,2
  1941  08BB  3400               	retlw	0
  1942  08BC  28B2               	goto	initloop
  1943                           
  1944                           	psect	cstackBANK2
  1945  014F                     __pcstackBANK2:	
  1946  014F                     _ADCConv$1418:	
  1947                           
  1948                           ; 3 bytes @ 0x0
  1949  014F                     	ds	3
  1950  0152                     ADCConv@sumCurr:	
  1951                           
  1952                           ; 4 bytes @ 0x3
  1953  0152                     	ds	4
  1954  0156                     ADCConv@sumBatt:	
  1955                           
  1956                           ; 2 bytes @ 0x7
  1957  0156                     	ds	2
  1958  0158                     ADCConv@maxCurr:	
  1959                           
  1960                           ; 4 bytes @ 0x9
  1961  0158                     	ds	4
  1962  015C                     ADCConv@j:	
  1963                           
  1964                           ; 1 bytes @ 0xD
  1965  015C                     	ds	1
  1966  015D                     ADCConv@sumEavCurr:	
  1967                           
  1968                           ; 4 bytes @ 0xE
  1969  015D                     	ds	4
  1970  0161                     ADCConv@i:	
  1971                           
  1972                           ; 1 bytes @ 0x12
  1973  0161                     	ds	1
  1974                           
  1975                           	psect	cstackCOMMON
  1976  0070                     __pcstackCOMMON:	
  1977  0070                     ?_CC1Strobe:	
  1978  0070                     ?_PGMReadNvm:	
  1979                           ; 0 bytes @ 0x0
  1980                           
  1981  0070                     ?_PGMCheckNvm:	
  1982                           ; 0 bytes @ 0x0
  1983                           
  1984  0070                     ?_PGMNvmReset:	
  1985                           ; 0 bytes @ 0x0
  1986                           
  1987  0070                     ?_RTXStartSendPgm:	
  1988                           ; 0 bytes @ 0x0
  1989                           
  1990  0070                     ?_RTXStartSendData:	
  1991                           ; 0 bytes @ 0x0
  1992                           
  1993  0070                     ?_RTXSendPgm:	
  1994                           ; 0 bytes @ 0x0
  1995                           
  1996  0070                     ?_RTXSendData:	
  1997                           ; 0 bytes @ 0x0
  1998                           
  1999  0070                     ?_RTXReadPkt:	
  2000                           ; 0 bytes @ 0x0
  2001                           
  2002  0070                     ?_INInit:	
  2003                           ; 0 bytes @ 0x0
  2004                           
  2005  0070                     ?_OUTInit:	
  2006                           ; 0 bytes @ 0x0
  2007                           
  2008  0070                     ?_SPIInit:	
  2009                           ; 0 bytes @ 0x0
  2010                           
  2011  0070                     ?_ADCInit:	
  2012                           ; 0 bytes @ 0x0
  2013                           
  2014  0070                     ?_ADCConv:	
  2015                           ; 0 bytes @ 0x0
  2016                           
  2017  0070                     ?_CC1Init:	
  2018                           ; 0 bytes @ 0x0
  2019                           
  2020  0070                     ?_LEDInit:	
  2021                           ; 0 bytes @ 0x0
  2022                           
  2023  0070                     ?_LEDNormalFlash:	
  2024                           ; 0 bytes @ 0x0
  2025                           
  2026  0070                     ?_LEDFastFlash:	
  2027                           ; 0 bytes @ 0x0
  2028                           
  2029  0070                     ?_NVMInit:	
  2030                           ; 0 bytes @ 0x0
  2031                           
  2032  0070                     ?_DINInit:	
  2033                           ; 0 bytes @ 0x0
  2034                           
  2035  0070                     ?_DINTick:	
  2036                           ; 0 bytes @ 0x0
  2037                           
  2038  0070                     ?_DINTask:	
  2039                           ; 0 bytes @ 0x0
  2040                           
  2041  0070                     ?_PGMInit:	
  2042                           ; 0 bytes @ 0x0
  2043                           
  2044  0070                     ?_PGMTick:	
  2045                           ; 0 bytes @ 0x0
  2046                           
  2047  0070                     ?_PGMWriteNvm:	
  2048                           ; 0 bytes @ 0x0
  2049                           
  2050  0070                     ?_PGMPgmOff:	
  2051                           ; 0 bytes @ 0x0
  2052                           
  2053  0070                     ?_PGMSelUp:	
  2054                           ; 0 bytes @ 0x0
  2055                           
  2056  0070                     ?_PGMSelLong:	
  2057                           ; 0 bytes @ 0x0
  2058                           
  2059  0070                     ?_RTXInit:	
  2060                           ; 0 bytes @ 0x0
  2061                           
  2062  0070                     ?_RTXTick:	
  2063                           ; 0 bytes @ 0x0
  2064                           
  2065  0070                     ?_RTXTask:	
  2066                           ; 0 bytes @ 0x0
  2067                           
  2068  0070                     ?_RTXAwake:	
  2069                           ; 0 bytes @ 0x0
  2070                           
  2071  0070                     ?_SYSInit:	
  2072                           ; 0 bytes @ 0x0
  2073                           
  2074  0070                     ?_SYSInt:	
  2075                           ; 0 bytes @ 0x0
  2076                           
  2077  0070                     ??_SYSInt:	
  2078                           ; 0 bytes @ 0x0
  2079                           
  2080  0070                     ?_SYSTask:	
  2081                           ; 0 bytes @ 0x0
  2082                           
  2083  0070                     ?_INTIsr:	
  2084                           ; 0 bytes @ 0x0
  2085                           
  2086  0070                     ??_INTIsr:	
  2087                           ; 0 bytes @ 0x0
  2088                           
  2089  0070                     ?_main:	
  2090                           ; 0 bytes @ 0x0
  2091                           
  2092                           
  2093                           ; 0 bytes @ 0x0
  2094  0070                     	ds	1
  2095  0071                     ?_DLYDelay_ms:	
  2096  0071                     ??_INInit:	
  2097                           ; 0 bytes @ 0x1
  2098                           
  2099  0071                     ??_OUTInit:	
  2100                           ; 0 bytes @ 0x1
  2101                           
  2102  0071                     ??_SPIInit:	
  2103                           ; 0 bytes @ 0x1
  2104                           
  2105  0071                     ?_SPIRead:	
  2106                           ; 0 bytes @ 0x1
  2107                           
  2108  0071                     ?_SPIWrite:	
  2109                           ; 0 bytes @ 0x1
  2110                           
  2111  0071                     ??_ADCInit:	
  2112                           ; 0 bytes @ 0x1
  2113                           
  2114  0071                     ??_LEDInit:	
  2115                           ; 0 bytes @ 0x1
  2116                           
  2117  0071                     ??_NVMInit:	
  2118                           ; 0 bytes @ 0x1
  2119                           
  2120  0071                     ?_NVMRead:	
  2121                           ; 0 bytes @ 0x1
  2122                           
  2123  0071                     ?_NVMWrite:	
  2124                           ; 0 bytes @ 0x1
  2125                           
  2126  0071                     ??_DINInit:	
  2127                           ; 0 bytes @ 0x1
  2128                           
  2129  0071                     ??_DINTick:	
  2130                           ; 0 bytes @ 0x1
  2131                           
  2132  0071                     ??_DINTask:	
  2133                           ; 0 bytes @ 0x1
  2134                           
  2135  0071                     ??_PGMTick:	
  2136                           ; 0 bytes @ 0x1
  2137                           
  2138  0071                     ??_PGMPgmOff:	
  2139                           ; 0 bytes @ 0x1
  2140                           
  2141  0071                     ??_SYSInit:	
  2142                           ; 0 bytes @ 0x1
  2143                           
  2144  0071                     ?___ftge:	
  2145                           ; 0 bytes @ 0x1
  2146                           
  2147  0071                     ?___lwdiv:	
  2148                           ; 1 bit 
  2149                           
  2150  0071                     ?___ftpack:	
  2151                           ; 2 bytes @ 0x1
  2152                           
  2153  0071                     ?___lmul:	
  2154                           ; 3 bytes @ 0x1
  2155                           
  2156  0071                     ?___lldiv:	
  2157                           ; 4 bytes @ 0x1
  2158                           
  2159  0071                     SPIRead@len:	
  2160                           ; 4 bytes @ 0x1
  2161                           
  2162  0071                     LEDInit@sta:	
  2163                           ; 1 bytes @ 0x1
  2164                           
  2165  0071                     NVMInit@sta:	
  2166                           ; 1 bytes @ 0x1
  2167                           
  2168  0071                     DINInit@sta:	
  2169                           ; 1 bytes @ 0x1
  2170                           
  2171  0071                     SPIWrite@srcPtr:	
  2172                           ; 1 bytes @ 0x1
  2173                           
  2174  0071                     DLYDelay_ms@val:	
  2175                           ; 2 bytes @ 0x1
  2176                           
  2177  0071                     NVMRead@addr:	
  2178                           ; 2 bytes @ 0x1
  2179                           
  2180  0071                     NVMWrite@addr:	
  2181                           ; 2 bytes @ 0x1
  2182                           
  2183  0071                     ___lwdiv@divisor:	
  2184                           ; 2 bytes @ 0x1
  2185                           
  2186  0071                     ___ftpack@arg:	
  2187                           ; 2 bytes @ 0x1
  2188                           
  2189  0071                     ___ftge@ff1:	
  2190                           ; 3 bytes @ 0x1
  2191                           
  2192  0071                     ___lmul@multiplier:	
  2193                           ; 3 bytes @ 0x1
  2194                           
  2195  0071                     ___lldiv@divisor:	
  2196                           ; 4 bytes @ 0x1
  2197                           
  2198                           
  2199                           ; 4 bytes @ 0x1
  2200  0071                     	ds	1
  2201  0072                     ??_SPIRead:	
  2202  0072                     INInit@sta:	
  2203                           ; 0 bytes @ 0x2
  2204                           
  2205  0072                     OUTInit@sta:	
  2206                           ; 1 bytes @ 0x2
  2207                           
  2208  0072                     SPIInit@state:	
  2209                           ; 1 bytes @ 0x2
  2210                           
  2211  0072                     ADCInit@state:	
  2212                           ; 1 bytes @ 0x2
  2213                           
  2214  0072                     SYSInit@state:	
  2215                           ; 1 bytes @ 0x2
  2216                           
  2217                           
  2218                           ; 1 bytes @ 0x2
  2219  0072                     	ds	1
  2220  0073                     ??_DLYDelay_ms:	
  2221  0073                     SPIWrite@len:	
  2222                           ; 0 bytes @ 0x3
  2223                           
  2224  0073                     NVMRead@dest:	
  2225                           ; 1 bytes @ 0x3
  2226                           
  2227  0073                     NVMWrite@source:	
  2228                           ; 1 bytes @ 0x3
  2229                           
  2230  0073                     ___lwdiv@dividend:	
  2231                           ; 1 bytes @ 0x3
  2232                           
  2233                           
  2234                           ; 2 bytes @ 0x3
  2235  0073                     	ds	1
  2236  0074                     ??_SPIWrite:	
  2237  0074                     SPIRead@dstPtr:	
  2238                           ; 0 bytes @ 0x4
  2239                           
  2240  0074                     NVMRead@len:	
  2241                           ; 1 bytes @ 0x4
  2242                           
  2243  0074                     NVMWrite@len:	
  2244                           ; 1 bytes @ 0x4
  2245                           
  2246  0074                     ___ftpack@exp:	
  2247                           ; 1 bytes @ 0x4
  2248                           
  2249  0074                     ___ftge@ff2:	
  2250                           ; 1 bytes @ 0x4
  2251                           
  2252                           
  2253                           ; 3 bytes @ 0x4
  2254  0074                     	ds	1
  2255  0075                     ??_NVMRead:	
  2256  0075                     ??_NVMWrite:	
  2257                           ; 0 bytes @ 0x5
  2258                           
  2259  0075                     ??___lwdiv:	
  2260                           ; 0 bytes @ 0x5
  2261                           
  2262  0075                     SPIRead@i:	
  2263                           ; 0 bytes @ 0x5
  2264                           
  2265  0075                     ___ftpack@sign:	
  2266                           ; 1 bytes @ 0x5
  2267                           
  2268  0075                     DLYDelay_ms@i:	
  2269                           ; 1 bytes @ 0x5
  2270                           
  2271  0075                     ___lmul@multiplicand:	
  2272                           ; 2 bytes @ 0x5
  2273                           
  2274  0075                     ___lldiv@dividend:	
  2275                           ; 4 bytes @ 0x5
  2276                           
  2277                           
  2278                           ; 4 bytes @ 0x5
  2279  0075                     	ds	1
  2280  0076                     ??___ftpack:	
  2281  0076                     SPIWrite@i:	
  2282                           ; 0 bytes @ 0x6
  2283                           
  2284  0076                     ___lwdiv@counter:	
  2285                           ; 1 bytes @ 0x6
  2286                           
  2287                           
  2288                           ; 1 bytes @ 0x6
  2289  0076                     	ds	1
  2290  0077                     ??_CC1Strobe:	
  2291  0077                     ?_CC1Write:	
  2292                           ; 0 bytes @ 0x7
  2293                           
  2294  0077                     ?_CC1Read:	
  2295                           ; 0 bytes @ 0x7
  2296                           
  2297  0077                     ??_LEDNormalFlash:	
  2298                           ; 0 bytes @ 0x7
  2299                           
  2300  0077                     ??_LEDFastFlash:	
  2301                           ; 0 bytes @ 0x7
  2302                           
  2303  0077                     ??___ftge:	
  2304                           ; 0 bytes @ 0x7
  2305                           
  2306  0077                     CC1Read@dst:	
  2307                           ; 0 bytes @ 0x7
  2308                           
  2309  0077                     NVMRead@i:	
  2310                           ; 1 bytes @ 0x7
  2311                           
  2312  0077                     CC1Write@src:	
  2313                           ; 1 bytes @ 0x7
  2314                           
  2315  0077                     ___lwdiv@quotient:	
  2316                           ; 2 bytes @ 0x7
  2317                           
  2318                           
  2319                           ; 2 bytes @ 0x7
  2320  0077                     	ds	1
  2321  0078                     ??_PGMReadNvm:	
  2322  0078                     ??_PGMWriteNvm:	
  2323                           ; 0 bytes @ 0x8
  2324                           
  2325  0078                     CC1Strobe@e_stb:	
  2326                           ; 0 bytes @ 0x8
  2327                           
  2328  0078                     CC1Read@len:	
  2329                           ; 1 bytes @ 0x8
  2330                           
  2331  0078                     LEDNormalFlash@num:	
  2332                           ; 1 bytes @ 0x8
  2333                           
  2334  0078                     LEDFastFlash@num:	
  2335                           ; 1 bytes @ 0x8
  2336                           
  2337                           
  2338                           ; 1 bytes @ 0x8
  2339  0078                     	ds	1
  2340  0079                     ??_CC1Read:	
  2341  0079                     ??___lmul:	
  2342                           ; 0 bytes @ 0x9
  2343                           
  2344  0079                     ??___lldiv:	
  2345                           ; 0 bytes @ 0x9
  2346                           
  2347  0079                     ??___lltoft:	
  2348                           ; 0 bytes @ 0x9
  2349                           
  2350  0079                     ?___lwtoft:	
  2351                           ; 0 bytes @ 0x9
  2352                           
  2353  0079                     CC1Strobe@cc1Stb:	
  2354                           ; 3 bytes @ 0x9
  2355                           
  2356  0079                     CC1Write@len:	
  2357                           ; 1 bytes @ 0x9
  2358                           
  2359  0079                     LEDNormalFlash@i:	
  2360                           ; 1 bytes @ 0x9
  2361                           
  2362  0079                     LEDFastFlash@i:	
  2363                           ; 1 bytes @ 0x9
  2364                           
  2365  0079                     ___ftadd@sign:	
  2366                           ; 1 bytes @ 0x9
  2367                           
  2368  0079                     ___lwtoft@c:	
  2369                           ; 1 bytes @ 0x9
  2370                           
  2371                           
  2372                           ; 2 bytes @ 0x9
  2373  0079                     	ds	1
  2374  007A                     ??_CC1Write:	
  2375  007A                     ??_PGMNvmReset:	
  2376                           ; 0 bytes @ 0xA
  2377                           
  2378  007A                     ??_PGMSelLong:	
  2379                           ; 0 bytes @ 0xA
  2380                           
  2381  007A                     CC1Read@addr:	
  2382                           ; 0 bytes @ 0xA
  2383                           
  2384  007A                     ___ftadd@exp2:	
  2385                           ; 1 bytes @ 0xA
  2386                           
  2387  007A                     ___lltoft@exp:	
  2388                           ; 1 bytes @ 0xA
  2389                           
  2390                           
  2391                           ; 1 bytes @ 0xA
  2392  007A                     	ds	1
  2393  007B                     ??_PGMCheckNvm:	
  2394  007B                     ??_CC1Init:	
  2395                           ; 0 bytes @ 0xB
  2396                           
  2397  007B                     ??_PGMInit:	
  2398                           ; 0 bytes @ 0xB
  2399                           
  2400  007B                     CC1Read@cc1Addr:	
  2401                           ; 0 bytes @ 0xB
  2402                           
  2403  007B                     PGMInit@state:	
  2404                           ; 1 bytes @ 0xB
  2405                           
  2406  007B                     ___ftadd@exp1:	
  2407                           ; 1 bytes @ 0xB
  2408                           
  2409                           
  2410                           ; 1 bytes @ 0xB
  2411  007B                     	ds	1
  2412  007C                     ??_RTXStartSendPgm:	
  2413  007C                     ??_RTXStartSendData:	
  2414                           ; 0 bytes @ 0xC
  2415                           
  2416  007C                     ??_RTXInit:	
  2417                           ; 0 bytes @ 0xC
  2418                           
  2419  007C                     ??_RTXTick:	
  2420                           ; 0 bytes @ 0xC
  2421                           
  2422  007C                     ??_RTXTask:	
  2423                           ; 0 bytes @ 0xC
  2424                           
  2425  007C                     ??_RTXAwake:	
  2426                           ; 0 bytes @ 0xC
  2427                           
  2428  007C                     ??_SYSTask:	
  2429                           ; 0 bytes @ 0xC
  2430                           
  2431  007C                     ??___ftsub:	
  2432                           ; 0 bytes @ 0xC
  2433                           
  2434                           
  2435                           	psect	cstackBANK0
  2436  0020                     __pcstackBANK0:	
  2437                           ; 0 bytes @ 0xC
  2438                           
  2439  0020                     ?_RTXRcvPkt:	
  2440  0020                     ??___lwtoft:	
  2441                           ; 0 bytes @ 0x0
  2442                           
  2443  0020                     ?___ftadd:	
  2444                           ; 0 bytes @ 0x0
  2445                           
  2446  0020                     ?___lltoft:	
  2447                           ; 3 bytes @ 0x0
  2448                           
  2449  0020                     CC1Write@addr:	
  2450                           ; 3 bytes @ 0x0
  2451                           
  2452  0020                     RTXRcvPkt@len:	
  2453                           ; 1 bytes @ 0x0
  2454                           
  2455  0020                     ___ftadd@f1:	
  2456                           ; 1 bytes @ 0x0
  2457                           
  2458  0020                     ___lmul@product:	
  2459                           ; 3 bytes @ 0x0
  2460                           
  2461  0020                     ___lldiv@quotient:	
  2462                           ; 4 bytes @ 0x0
  2463                           
  2464  0020                     ___lltoft@c:	
  2465                           ; 4 bytes @ 0x0
  2466                           
  2467  0020                     NVMWrite@bufTmpRow:	
  2468                           ; 4 bytes @ 0x0
  2469                           
  2470                           
  2471                           ; 64 bytes @ 0x0
  2472  0020                     	ds	1
  2473  0021                     ??_RTXRcvPkt:	
  2474  0021                     CC1Write@cc1Addr:	
  2475                           ; 0 bytes @ 0x1
  2476                           
  2477                           
  2478                           ; 1 bytes @ 0x1
  2479  0021                     	ds	1
  2480  0022                     ?_RTXSndPkt:	
  2481  0022                     CC1Init@state:	
  2482                           ; 0 bytes @ 0x2
  2483                           
  2484  0022                     RTXSndPkt@len:	
  2485                           ; 1 bytes @ 0x2
  2486                           
  2487                           
  2488                           ; 1 bytes @ 0x2
  2489  0022                     	ds	1
  2490  0023                     ??_RTXSndPkt:	
  2491  0023                     RTXRcvPkt@dst:	
  2492                           ; 0 bytes @ 0x3
  2493                           
  2494  0023                     ___ftadd@f2:	
  2495                           ; 1 bytes @ 0x3
  2496                           
  2497                           
  2498                           ; 3 bytes @ 0x3
  2499  0023                     	ds	1
  2500  0024                     ?___ftmul:	
  2501  0024                     RTXSndPkt@numRxByte:	
  2502                           ; 3 bytes @ 0x4
  2503                           
  2504  0024                     ___lldiv@counter:	
  2505                           ; 1 bytes @ 0x4
  2506                           
  2507  0024                     ___ftmul@f1:	
  2508                           ; 1 bytes @ 0x4
  2509                           
  2510                           
  2511                           ; 3 bytes @ 0x4
  2512  0024                     	ds	1
  2513  0025                     RTXSndPkt@src:	
  2514                           
  2515                           ; 1 bytes @ 0x5
  2516  0025                     	ds	1
  2517  0026                     ??___ftadd:	
  2518  0026                     RTXSndPkt@numTxByte:	
  2519                           ; 0 bytes @ 0x6
  2520                           
  2521                           
  2522                           ; 1 bytes @ 0x6
  2523  0026                     	ds	1
  2524  0027                     RTXSndPkt@sta:	
  2525  0027                     ___ftmul@f2:	
  2526                           ; 1 bytes @ 0x7
  2527                           
  2528                           
  2529                           ; 3 bytes @ 0x7
  2530  0027                     	ds	1
  2531  0028                     ??_RTXSendPgm:	
  2532  0028                     ??_RTXSendData:	
  2533                           ; 0 bytes @ 0x8
  2534                           
  2535                           
  2536                           ; 0 bytes @ 0x8
  2537  0028                     	ds	1
  2538  0029                     RTXSendData@valTemp:	
  2539                           
  2540                           ; 3 bytes @ 0x9
  2541  0029                     	ds	1
  2542  002A                     ??___ftmul:	
  2543  002A                     ?___ftsub:	
  2544                           ; 0 bytes @ 0xA
  2545                           
  2546  002A                     ___ftsub@f2:	
  2547                           ; 3 bytes @ 0xA
  2548                           
  2549                           
  2550                           ; 3 bytes @ 0xA
  2551  002A                     	ds	2
  2552  002C                     RTXSendData@valBatt:	
  2553                           
  2554                           ; 3 bytes @ 0xC
  2555  002C                     	ds	1
  2556  002D                     ___ftsub@f1:	
  2557                           
  2558                           ; 3 bytes @ 0xD
  2559  002D                     	ds	1
  2560  002E                     ___ftmul@exp:	
  2561                           
  2562                           ; 1 bytes @ 0xE
  2563  002E                     	ds	1
  2564  002F                     ___ftmul@f3_as_product:	
  2565                           
  2566                           ; 3 bytes @ 0xF
  2567  002F                     	ds	3
  2568  0032                     ___ftmul@cntr:	
  2569                           
  2570                           ; 1 bytes @ 0x12
  2571  0032                     	ds	1
  2572  0033                     ___ftmul@sign:	
  2573                           
  2574                           ; 1 bytes @ 0x13
  2575  0033                     	ds	1
  2576  0034                     ?_sqrt:	
  2577  0034                     sqrt@y:	
  2578                           ; 3 bytes @ 0x14
  2579                           
  2580                           
  2581                           ; 3 bytes @ 0x14
  2582  0034                     	ds	3
  2583  0037                     ??_sqrt:	
  2584                           
  2585                           ; 0 bytes @ 0x17
  2586  0037                     	ds	3
  2587  003A                     sqrt@og:	
  2588                           
  2589                           ; 3 bytes @ 0x1A
  2590  003A                     	ds	3
  2591  003D                     sqrt@z:	
  2592                           
  2593                           ; 3 bytes @ 0x1D
  2594  003D                     	ds	3
  2595  0040                     sqrt@i:	
  2596                           
  2597                           ; 1 bytes @ 0x20
  2598  0040                     	ds	1
  2599  0041                     sqrt@q:	
  2600                           
  2601                           ; 3 bytes @ 0x21
  2602  0041                     	ds	3
  2603  0044                     sqrt@x:	
  2604                           
  2605                           ; 3 bytes @ 0x24
  2606  0044                     	ds	3
  2607  0047                     ?___ftdiv:	
  2608  0047                     ___ftdiv@f2:	
  2609                           ; 3 bytes @ 0x27
  2610                           
  2611                           
  2612                           ; 3 bytes @ 0x27
  2613  0047                     	ds	3
  2614  004A                     ___ftdiv@f1:	
  2615                           
  2616                           ; 3 bytes @ 0x2A
  2617  004A                     	ds	3
  2618  004D                     ??___ftdiv:	
  2619                           
  2620                           ; 0 bytes @ 0x2D
  2621  004D                     	ds	4
  2622  0051                     ___ftdiv@cntr:	
  2623                           
  2624                           ; 1 bytes @ 0x31
  2625  0051                     	ds	1
  2626  0052                     ___ftdiv@f3:	
  2627                           
  2628                           ; 3 bytes @ 0x32
  2629  0052                     	ds	3
  2630  0055                     ___ftdiv@exp:	
  2631                           
  2632                           ; 1 bytes @ 0x35
  2633  0055                     	ds	1
  2634  0056                     ___ftdiv@sign:	
  2635                           
  2636                           ; 1 bytes @ 0x36
  2637  0056                     	ds	1
  2638  0057                     ??_ADCConv:	
  2639                           
  2640                           ; 0 bytes @ 0x37
  2641  0057                     	ds	8
  2642  005F                     RTXInit@state:	
  2643                           
  2644                           ; 1 bytes @ 0x3F
  2645  005F                     	ds	1
  2646  0060                     NVMWrite@rowAddr:	
  2647                           
  2648                           ; 2 bytes @ 0x40
  2649  0060                     	ds	2
  2650  0062                     NVMWrite@i:	
  2651                           
  2652                           ; 1 bytes @ 0x42
  2653  0062                     	ds	1
  2654  0063                     NVMWrite@latchAddr:	
  2655                           
  2656                           ; 1 bytes @ 0x43
  2657  0063                     	ds	1
  2658  0064                     NVMWrite@j:	
  2659                           
  2660                           ; 1 bytes @ 0x44
  2661  0064                     	ds	1
  2662  0065                     ??_RTXReadPkt:	
  2663  0065                     ??_PGMSelUp:	
  2664                           ; 0 bytes @ 0x45
  2665                           
  2666                           
  2667                           ; 0 bytes @ 0x45
  2668  0065                     	ds	1
  2669  0066                     RTXReadPkt@numRxByte:	
  2670                           
  2671                           ; 1 bytes @ 0x46
  2672  0066                     	ds	1
  2673  0067                     ??_main:	
  2674                           
  2675                           ; 0 bytes @ 0x47
  2676  0067                     	ds	1
  2677  0068                     main@i:	
  2678                           
  2679                           ; 1 bytes @ 0x48
  2680  0068                     	ds	1
  2681                           
  2682                           	psect	maintext
  2683  0E38                     __pmaintext:	
  2684 ;;
  2685 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2686 ;;
  2687 ;; *************** function _main *****************
  2688 ;; Defined at:
  2689 ;;		line 54 in file "Sensore.c"
  2690 ;; Parameters:    Size  Location     Type
  2691 ;;		None
  2692 ;; Auto vars:     Size  Location     Type
  2693 ;;  i               1   72[BANK0 ] unsigned char 
  2694 ;; Return value:  Size  Location     Type
  2695 ;;		None               void
  2696 ;; Registers used:
  2697 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2698 ;; Tracked objects:
  2699 ;;		On entry : B1F/0
  2700 ;;		On exit  : 0/0
  2701 ;;		Unchanged: 0/0
  2702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2704 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2705 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2706 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2707 ;;Total ram usage:        2 bytes
  2708 ;; Hardware stack levels required when called:   11
  2709 ;; This function calls:
  2710 ;;		_ADCInit
  2711 ;;		_CC1Init
  2712 ;;		_DINInit
  2713 ;;		_DINTask
  2714 ;;		_INInit
  2715 ;;		_LEDInit
  2716 ;;		_NVMInit
  2717 ;;		_OUTInit
  2718 ;;		_PGMInit
  2719 ;;		_RTXInit
  2720 ;;		_RTXTask
  2721 ;;		_SPIInit
  2722 ;;		_SYSInit
  2723 ;;		_SYSTask
  2724 ;; This function is called by:
  2725 ;;		Startup code after reset
  2726 ;; This function uses a non-reentrant model
  2727 ;;
  2728                           
  2729                           
  2730                           ;psect for function _main
  2731  0E38                     _main:	
  2732                           
  2733                           ;Sensore.c: 56: unsigned char i;
  2734                           ;Sensore.c: 59: for(i=0;i<3;i++)
  2735                           
  2736                           ;incstack = 0
  2737                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2738  0E38  0020               	movlb	0	; select bank0
  2739  0E39  01E8               	clrf	main@i
  2740  0E3A  3003               	movlw	3
  2741  0E3B  0268               	subwf	main@i,w
  2742  0E3C  1803               	btfsc	3,0
  2743  0E3D  2E7F               	goto	l687
  2744  0E3E                     l686:	
  2745  0E3E  0064               	clrwdt	;# 
  2746                           
  2747                           ;Sensore.c: 63: SYSInit(i);
  2748  0E3F  0020               	movlb	0	; select bank0
  2749  0E40  0868               	movf	main@i,w
  2750  0E41  318B  2381  318E   	fcall	_SYSInit
  2751                           
  2752                           ;Sensore.c: 64: INInit(i);
  2753  0E44  0020               	movlb	0	; select bank0
  2754  0E45  0868               	movf	main@i,w
  2755  0E46  318A  22B4  318E   	fcall	_INInit
  2756                           
  2757                           ;Sensore.c: 65: OUTInit(i);
  2758  0E49  0020               	movlb	0	; select bank0
  2759  0E4A  0868               	movf	main@i,w
  2760  0E4B  318B  23A7  318E   	fcall	_OUTInit
  2761                           
  2762                           ;Sensore.c: 66: DINInit(i);
  2763  0E4E  0020               	movlb	0	; select bank0
  2764  0E4F  0868               	movf	main@i,w
  2765  0E50  3189  2113  318E   	fcall	_DINInit
  2766                           
  2767                           ;Sensore.c: 67: LEDInit(i);
  2768  0E53  0020               	movlb	0	; select bank0
  2769  0E54  0868               	movf	main@i,w
  2770  0E55  3188  208F  318E   	fcall	_LEDInit
  2771                           
  2772                           ;Sensore.c: 68: SPIInit(i);
  2773  0E58  0020               	movlb	0	; select bank0
  2774  0E59  0868               	movf	main@i,w
  2775  0E5A  318A  223B  318E   	fcall	_SPIInit
  2776                           
  2777                           ;Sensore.c: 69: CC1Init(i);
  2778  0E5D  0020               	movlb	0	; select bank0
  2779  0E5E  0868               	movf	main@i,w
  2780  0E5F  318C  2459  318E   	fcall	_CC1Init
  2781                           
  2782                           ;Sensore.c: 70: NVMInit(i);
  2783  0E62  0020               	movlb	0	; select bank0
  2784  0E63  0868               	movf	main@i,w
  2785  0E64  3188  209A  318E   	fcall	_NVMInit
  2786                           
  2787                           ;Sensore.c: 71: RTXInit(i);
  2788  0E67  0020               	movlb	0	; select bank0
  2789  0E68  0868               	movf	main@i,w
  2790  0E69  318B  2337  318E   	fcall	_RTXInit
  2791                           
  2792                           ;Sensore.c: 72: PGMInit(i);
  2793  0E6C  0020               	movlb	0	; select bank0
  2794  0E6D  0868               	movf	main@i,w
  2795  0E6E  3189  216C  318E   	fcall	_PGMInit
  2796                           
  2797                           ;Sensore.c: 73: ADCInit(i);
  2798  0E71  0020               	movlb	0	; select bank0
  2799  0E72  0868               	movf	main@i,w
  2800  0E73  318B  23FB  318E   	fcall	_ADCInit
  2801  0E76  3001               	movlw	1
  2802  0E77  0020               	movlb	0	; select bank0
  2803  0E78  00E7               	movwf	??_main
  2804  0E79  0867               	movf	??_main,w
  2805  0E7A  07E8               	addwf	main@i,f
  2806  0E7B  3003               	movlw	3
  2807  0E7C  0268               	subwf	main@i,w
  2808  0E7D  1C03               	skipc
  2809  0E7E  2E3E               	goto	l686
  2810  0E7F                     l687:	
  2811                           
  2812                           ;Sensore.c: 74: }
  2813                           ;Sensore.c: 77: INTCONbits.GIE=1;
  2814  0E7F  178B               	bsf	11,7	;volatile
  2815  0E80                     l688:	
  2816                           ;Sensore.c: 80: while(1)
  2817                           
  2818  0E80  0064               	clrwdt	;# 
  2819                           
  2820                           ;Sensore.c: 84: SYSTask();
  2821  0E81  318C  2489  318E   	fcall	_SYSTask
  2822                           
  2823                           ;Sensore.c: 85: DINTask();
  2824  0E84  318A  2295  318E   	fcall	_DINTask
  2825                           
  2826                           ;Sensore.c: 86: RTXTask();
  2827  0E87  3188  2089  318E   	fcall	_RTXTask
  2828  0E8A  2E80               	goto	l688
  2829  0E8B                     __end_of_main:	
  2830                           
  2831                           	psect	text1
  2832  0C89                     __ptext1:	
  2833 ;; *************** function _SYSTask *****************
  2834 ;; Defined at:
  2835 ;;		line 45 in file "SYS.c"
  2836 ;; Parameters:    Size  Location     Type
  2837 ;;		None
  2838 ;; Auto vars:     Size  Location     Type
  2839 ;;		None
  2840 ;; Return value:  Size  Location     Type
  2841 ;;		None               void
  2842 ;; Registers used:
  2843 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2844 ;; Tracked objects:
  2845 ;;		On entry : 0/0
  2846 ;;		On exit  : 0/0
  2847 ;;		Unchanged: 0/0
  2848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2850 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2851 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2852 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2853 ;;Total ram usage:        0 bytes
  2854 ;; Hardware stack levels used:    1
  2855 ;; Hardware stack levels required when called:   10
  2856 ;; This function calls:
  2857 ;;		_ADCConv
  2858 ;;		_DINTick
  2859 ;;		_PGMPgmOff
  2860 ;;		_PGMSelLong
  2861 ;;		_PGMSelUp
  2862 ;;		_PGMTick
  2863 ;;		_RTXAwake
  2864 ;;		_RTXTick
  2865 ;; This function is called by:
  2866 ;;		_main
  2867 ;; This function uses a non-reentrant model
  2868 ;;
  2869                           
  2870                           
  2871                           ;psect for function _SYSTask
  2872  0C89                     _SYSTask:	
  2873                           
  2874                           ;SYS.c: 48: if(u_SYS_STA.TICK)
  2875                           
  2876                           ;incstack = 0
  2877                           ; Regs used in _SYSTask: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2878  0C89  0021               	movlb	1	; select bank1
  2879  0C8A  1C34               	btfss	_u_SYS_STA^(0+128),0
  2880  0C8B  2C96               	goto	l4376
  2881                           
  2882                           ;SYS.c: 49: {
  2883                           ;SYS.c: 51: u_SYS_STA.TICK=0;
  2884  0C8C  1034               	bcf	_u_SYS_STA^(0+128),0
  2885                           
  2886                           ;SYS.c: 54: RTXTick();
  2887  0C8D  3189  2133  318C   	fcall	_RTXTick
  2888                           
  2889                           ;SYS.c: 55: DINTick();
  2890  0C90  318B  2314  318C   	fcall	_DINTick
  2891                           
  2892                           ;SYS.c: 56: PGMTick();
  2893  0C93  3180  2003  318C   	fcall	_PGMTick
  2894  0C96                     l4376:	
  2895                           
  2896                           ;SYS.c: 57: }
  2897                           ;SYS.c: 59: ADCConv();
  2898  0C96  3180  204B  318C   	fcall	_ADCConv
  2899                           
  2900                           ;SYS.c: 61: if(u_in_ev_down.sel)
  2901  0C99  0021               	movlb	1	; select bank1
  2902  0C9A  1836               	btfsc	_u_in_ev_down^(0+128),0
  2903                           
  2904                           ;SYS.c: 62: {
  2905                           ;SYS.c: 64: u_in_ev_down.sel=0;
  2906  0C9B  1036               	bcf	_u_in_ev_down^(0+128),0
  2907                           
  2908                           ;SYS.c: 65: }
  2909                           ;SYS.c: 66: if(u_in_ev_up.sel)
  2910  0C9C  1C38               	btfss	_u_in_ev_up^(0+128),0
  2911  0C9D  2CA2               	goto	l4386
  2912                           
  2913                           ;SYS.c: 67: {
  2914                           ;SYS.c: 69: u_in_ev_up.sel=0;
  2915  0C9E  1038               	bcf	_u_in_ev_up^(0+128),0
  2916                           
  2917                           ;SYS.c: 70: PGMSelUp();
  2918  0C9F  3189  2182  318C   	fcall	_PGMSelUp
  2919  0CA2                     l4386:	
  2920                           
  2921                           ;SYS.c: 71: }
  2922                           ;SYS.c: 72: if(u_in_ev_long.sel)
  2923  0CA2  0021               	movlb	1	; select bank1
  2924  0CA3  1C37               	btfss	_u_in_ev_long^(0+128),0
  2925  0CA4  2CA9               	goto	l4392
  2926                           
  2927                           ;SYS.c: 73: {
  2928                           ;SYS.c: 75: u_in_ev_long.sel=0;
  2929  0CA5  1037               	bcf	_u_in_ev_long^(0+128),0
  2930                           
  2931                           ;SYS.c: 76: PGMSelLong();
  2932  0CA6  3189  2199  318C   	fcall	_PGMSelLong
  2933  0CA9                     l4392:	
  2934                           
  2935                           ;SYS.c: 77: }
  2936                           ;SYS.c: 80: if(flg_slp.goSleep)
  2937  0CA9  0021               	movlb	1	; select bank1
  2938  0CAA  1830               	btfsc	_flg_slp^(0+128),0
  2939                           
  2940                           ;SYS.c: 81: {
  2941                           ;SYS.c: 83: flg_slp.goSleep=0;
  2942  0CAB  1030               	bcf	_flg_slp^(0+128),0
  2943                           
  2944                           ;SYS.c: 87: }
  2945                           ;SYS.c: 90: if(rtx_flg.pgmDone)
  2946  0CAC  1C31               	btfss	_rtx_flg^(0+128),0
  2947  0CAD  2CB2               	goto	l4400
  2948                           
  2949                           ;SYS.c: 91: {
  2950                           ;SYS.c: 93: rtx_flg.pgmDone=0;
  2951  0CAE  1031               	bcf	_rtx_flg^(0+128),0
  2952                           
  2953                           ;SYS.c: 95: PGMPgmOff();
  2954  0CAF  3188  207F  318C   	fcall	_PGMPgmOff
  2955  0CB2                     l4400:	
  2956                           
  2957                           ;SYS.c: 96: }
  2958                           ;SYS.c: 99: if(flg_slp.exitSleep)
  2959  0CB2  0021               	movlb	1	; select bank1
  2960  0CB3  1CB0               	btfss	_flg_slp^(0+128),1
  2961  0CB4  0008               	return
  2962                           
  2963                           ;SYS.c: 100: {
  2964                           ;SYS.c: 102: flg_slp.exitSleep=0;
  2965  0CB5  10B0               	bcf	_flg_slp^(0+128),1
  2966                           
  2967                           ;SYS.c: 104: RTXAwake();
  2968  0CB6  3189  21CA         	fcall	_RTXAwake
  2969  0CB8  0008               	return
  2970  0CB9                     __end_of_SYSTask:	
  2971                           
  2972                           	psect	text2
  2973  0933                     __ptext2:	
  2974 ;; *************** function _RTXTick *****************
  2975 ;; Defined at:
  2976 ;;		line 90 in file "RTX.c"
  2977 ;; Parameters:    Size  Location     Type
  2978 ;;		None
  2979 ;; Auto vars:     Size  Location     Type
  2980 ;;		None
  2981 ;; Return value:  Size  Location     Type
  2982 ;;		None               void
  2983 ;; Registers used:
  2984 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2985 ;; Tracked objects:
  2986 ;;		On entry : 0/0
  2987 ;;		On exit  : 0/0
  2988 ;;		Unchanged: 0/0
  2989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2990 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2991 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2993 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2994 ;;Total ram usage:        0 bytes
  2995 ;; Hardware stack levels used:    1
  2996 ;; Hardware stack levels required when called:    6
  2997 ;; This function calls:
  2998 ;;		_RTXSendData
  2999 ;;		_RTXSendPgm
  3000 ;; This function is called by:
  3001 ;;		_SYSTask
  3002 ;; This function uses a non-reentrant model
  3003 ;;
  3004                           
  3005                           
  3006                           ;psect for function _RTXTick
  3007  0933                     _RTXTick:	
  3008                           
  3009                           ;RTX.c: 93: if(tmrRcvPkt)
  3010                           
  3011                           ;incstack = 0
  3012                           ; Regs used in _RTXTick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3013  0933  0021               	movlb	1	; select bank1
  3014  0934  0833               	movf	_tmrRcvPkt^(0+128),w
  3015  0935  1903               	btfsc	3,2
  3016  0936  0008               	return
  3017                           
  3018                           ;RTX.c: 94: {
  3019                           ;RTX.c: 95: tmrRcvPkt--;
  3020  0937  3001               	movlw	1
  3021  0938  02B3               	subwf	_tmrRcvPkt^(0+128),f
  3022                           
  3023                           ;RTX.c: 96: if(!(tmrRcvPkt))
  3024  0939  0833               	movf	_tmrRcvPkt^(0+128),w
  3025  093A  1D03               	btfss	3,2
  3026  093B  0008               	return
  3027                           
  3028                           ;RTX.c: 97: {
  3029                           ;RTX.c: 98: if(pgm_flg.pgmonoff)
  3030  093C  1C7C               	btfss	_pgm_flg,0
  3031  093D  2941               	goto	l4160
  3032                           
  3033                           ;RTX.c: 99: RTXSendPgm();
  3034  093E  318D  255A         	fcall	_RTXSendPgm
  3035  0940  0008               	return
  3036  0941                     l4160:	
  3037                           
  3038                           ;RTX.c: 100: else
  3039                           ;RTX.c: 101: RTXSendData();
  3040  0941  318E  26E1         	fcall	_RTXSendData
  3041  0943  0008               	return
  3042  0944                     __end_of_RTXTick:	
  3043                           
  3044                           	psect	text3
  3045  09CA                     __ptext3:	
  3046 ;; *************** function _RTXAwake *****************
  3047 ;; Defined at:
  3048 ;;		line 113 in file "RTX.c"
  3049 ;; Parameters:    Size  Location     Type
  3050 ;;		None
  3051 ;; Auto vars:     Size  Location     Type
  3052 ;;		None
  3053 ;; Return value:  Size  Location     Type
  3054 ;;		None               void
  3055 ;; Registers used:
  3056 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3057 ;; Tracked objects:
  3058 ;;		On entry : 0/0
  3059 ;;		On exit  : 0/0
  3060 ;;		Unchanged: 0/0
  3061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3065 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3066 ;;Total ram usage:        0 bytes
  3067 ;; Hardware stack levels used:    1
  3068 ;; Hardware stack levels required when called:    9
  3069 ;; This function calls:
  3070 ;;		_CC1Init
  3071 ;;		_DLYDelay_ms
  3072 ;;		_RTXInit
  3073 ;; This function is called by:
  3074 ;;		_SYSTask
  3075 ;; This function uses a non-reentrant model
  3076 ;;
  3077                           
  3078                           
  3079                           ;psect for function _RTXAwake
  3080  09CA                     _RTXAwake:	
  3081                           
  3082                           ;RTX.c: 116: LATAbits.LATA5=0;
  3083                           
  3084                           ;incstack = 0
  3085                           ; Regs used in _RTXAwake: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3086  09CA  0022               	movlb	2	; select bank2
  3087  09CB  128C               	bcf	12,5	;volatile
  3088                           
  3089                           ;RTX.c: 117: DLYDelay_ms(1);
  3090  09CC  3001               	movlw	1
  3091  09CD  00F1               	movwf	DLYDelay_ms@val
  3092  09CE  3000               	movlw	0
  3093  09CF  00F2               	movwf	DLYDelay_ms@val+1
  3094  09D0  3189  21B1  3189   	fcall	_DLYDelay_ms
  3095                           
  3096                           ;RTX.c: 118: LATAbits.LATA5=1;
  3097  09D3  0022               	movlb	2	; select bank2
  3098  09D4  168C               	bsf	12,5	;volatile
  3099                           
  3100                           ;RTX.c: 119: DLYDelay_ms(1);
  3101  09D5  3001               	movlw	1
  3102  09D6  00F1               	movwf	DLYDelay_ms@val
  3103  09D7  3000               	movlw	0
  3104  09D8  00F2               	movwf	DLYDelay_ms@val+1
  3105  09D9  3189  21B1  3189   	fcall	_DLYDelay_ms
  3106                           
  3107                           ;RTX.c: 122: CC1Init(2);
  3108  09DC  3002               	movlw	2
  3109  09DD  318C  2459  3189   	fcall	_CC1Init
  3110                           
  3111                           ;RTX.c: 125: RTXInit(2);
  3112  09E0  3002               	movlw	2
  3113  09E1  318B  2337         	fcall	_RTXInit
  3114  09E3  0008               	return
  3115  09E4                     __end_of_RTXAwake:	
  3116                           
  3117                           	psect	text4
  3118  0B37                     __ptext4:	
  3119 ;; *************** function _RTXInit *****************
  3120 ;; Defined at:
  3121 ;;		line 67 in file "RTX.c"
  3122 ;; Parameters:    Size  Location     Type
  3123 ;;  state           1    wreg     unsigned char 
  3124 ;; Auto vars:     Size  Location     Type
  3125 ;;  state           1   63[BANK0 ] unsigned char 
  3126 ;; Return value:  Size  Location     Type
  3127 ;;		None               void
  3128 ;; Registers used:
  3129 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3130 ;; Tracked objects:
  3131 ;;		On entry : 0/0
  3132 ;;		On exit  : 0/0
  3133 ;;		Unchanged: 0/0
  3134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3136 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3138 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3139 ;;Total ram usage:        1 bytes
  3140 ;; Hardware stack levels used:    1
  3141 ;; Hardware stack levels required when called:    8
  3142 ;; This function calls:
  3143 ;;		_CC1Strobe
  3144 ;;		_RTXStartSendData
  3145 ;; This function is called by:
  3146 ;;		_RTXAwake
  3147 ;;		_main
  3148 ;; This function uses a non-reentrant model
  3149 ;;
  3150                           
  3151                           
  3152                           ;psect for function _RTXInit
  3153  0B37                     _RTXInit:	
  3154                           
  3155                           ;incstack = 0
  3156                           ; Regs used in _RTXInit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3157                           ;RTXInit@state stored from wreg
  3158  0B37  0020               	movlb	0	; select bank0
  3159  0B38  00DF               	movwf	RTXInit@state
  3160                           
  3161                           ;RTX.c: 69: switch(state)
  3162  0B39  2B4E               	goto	l4090
  3163  0B3A                     l4082:	
  3164                           ;RTX.c: 74: case 1:
  3165                           
  3166                           ;RTX.c: 73: break;
  3167                           
  3168                           ;RTX.c: 70: {
  3169                           ;RTX.c: 71: case 0:
  3170                           
  3171                           
  3172                           ;RTX.c: 76: tmrRcvPkt=0;
  3173  0B3A  0021               	movlb	1	; select bank1
  3174  0B3B  01B3               	clrf	_tmrRcvPkt^(0+128)
  3175                           
  3176                           ;RTX.c: 77: cntSndData=0;
  3177  0B3C  01AF               	clrf	_cntSndData^(0+128)
  3178                           
  3179                           ;RTX.c: 78: rtx_flg.val=0;
  3180  0B3D  01B1               	clrf	_rtx_flg^(0+128)
  3181                           
  3182                           ;RTX.c: 79: break;
  3183  0B3E  0008               	return
  3184  0B3F                     l4084:	
  3185                           ;RTX.c: 80: case 2:
  3186                           
  3187                           
  3188                           ;RTX.c: 82: CC1Strobe(SIDLE);
  3189  0B3F  3036               	movlw	54
  3190  0B40  3189  2144  318B   	fcall	_CC1Strobe
  3191                           
  3192                           ;RTX.c: 83: CC1Strobe(SCAL);
  3193  0B43  3033               	movlw	51
  3194  0B44  3189  2144  318B   	fcall	_CC1Strobe
  3195                           
  3196                           ;RTX.c: 84: CC1Strobe(SRX);
  3197  0B47  3034               	movlw	52
  3198  0B48  3189  2144  318B   	fcall	_CC1Strobe
  3199                           
  3200                           ;RTX.c: 85: RTXStartSendData();
  3201  0B4B  3189  2104         	fcall	_RTXStartSendData
  3202                           
  3203                           ;RTX.c: 87: }
  3204                           
  3205                           ;RTX.c: 86: break;
  3206  0B4D  0008               	return
  3207  0B4E                     l4090:	
  3208  0B4E  0020               	movlb	0	; select bank0
  3209  0B4F  085F               	movf	RTXInit@state,w
  3210                           
  3211                           ; Switch size 1, requested type "space"
  3212                           ; Number of cases is 3, Range of values is 0 to 2
  3213                           ; switch strategies available:
  3214                           ; Name         Instructions Cycles
  3215                           ; simple_byte           10     6 (average)
  3216                           ; direct_byte           12     6 (fixed)
  3217                           ; jumptable            260     6 (fixed)
  3218                           ;	Chosen strategy is simple_byte
  3219  0B50  3A00               	xorlw	0	; case 0
  3220  0B51  1903               	skipnz
  3221  0B52  2B5A               	goto	l479
  3222  0B53  3A01               	xorlw	1	; case 1
  3223  0B54  1903               	skipnz
  3224  0B55  2B3A               	goto	l4082
  3225  0B56  3A03               	xorlw	3	; case 2
  3226  0B57  1903               	skipnz
  3227  0B58  2B3F               	goto	l4084
  3228  0B59  2B5A               	goto	l479
  3229  0B5A                     l479:	
  3230  0B5A  0008               	return
  3231  0B5B                     __end_of_RTXInit:	
  3232                           
  3233                           	psect	text5
  3234  0904                     __ptext5:	
  3235 ;; *************** function _RTXStartSendData *****************
  3236 ;; Defined at:
  3237 ;;		line 214 in file "RTX.c"
  3238 ;; Parameters:    Size  Location     Type
  3239 ;;		None
  3240 ;; Auto vars:     Size  Location     Type
  3241 ;;		None
  3242 ;; Return value:  Size  Location     Type
  3243 ;;		None               void
  3244 ;; Registers used:
  3245 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3246 ;; Tracked objects:
  3247 ;;		On entry : 0/0
  3248 ;;		On exit  : 0/0
  3249 ;;		Unchanged: 0/0
  3250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3252 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3253 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3254 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3255 ;;Total ram usage:        0 bytes
  3256 ;; Hardware stack levels used:    1
  3257 ;; Hardware stack levels required when called:    7
  3258 ;; This function calls:
  3259 ;;		_ADCConv
  3260 ;;		_DLYDelay_ms
  3261 ;;		_RTXSendData
  3262 ;; This function is called by:
  3263 ;;		_RTXInit
  3264 ;; This function uses a non-reentrant model
  3265 ;;
  3266                           
  3267                           
  3268                           ;psect for function _RTXStartSendData
  3269  0904                     _RTXStartSendData:	
  3270                           
  3271                           ;RTX.c: 217: DLYDelay_ms(100);
  3272                           
  3273                           ;incstack = 0
  3274                           ; Regs used in _RTXStartSendData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3275  0904  3064               	movlw	100
  3276  0905  00F1               	movwf	DLYDelay_ms@val
  3277  0906  3000               	movlw	0
  3278  0907  00F2               	movwf	DLYDelay_ms@val+1
  3279  0908  3189  21B1  3189   	fcall	_DLYDelay_ms
  3280                           
  3281                           ;RTX.c: 219: ADCConv();
  3282  090B  3180  204B  3189   	fcall	_ADCConv
  3283                           
  3284                           ;RTX.c: 222: cntSndData=0;
  3285  090E  0021               	movlb	1	; select bank1
  3286  090F  01AF               	clrf	_cntSndData^(0+128)
  3287                           
  3288                           ;RTX.c: 224: RTXSendData();
  3289  0910  318E  26E1         	fcall	_RTXSendData
  3290  0912  0008               	return
  3291  0913                     __end_of_RTXStartSendData:	
  3292                           
  3293                           	psect	text6
  3294  0EE1                     __ptext6:	
  3295 ;; *************** function _RTXSendData *****************
  3296 ;; Defined at:
  3297 ;;		line 227 in file "RTX.c"
  3298 ;; Parameters:    Size  Location     Type
  3299 ;;		None
  3300 ;; Auto vars:     Size  Location     Type
  3301 ;;  valBatt         3   12[BANK0 ] struct _RTX_DATA
  3302 ;;  valTemp         3    9[BANK0 ] struct _RTX_DATA
  3303 ;; Return value:  Size  Location     Type
  3304 ;;		None               void
  3305 ;; Registers used:
  3306 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3307 ;; Tracked objects:
  3308 ;;		On entry : 0/0
  3309 ;;		On exit  : 0/0
  3310 ;;		Unchanged: 0/0
  3311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3313 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3314 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3315 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3316 ;;Total ram usage:        7 bytes
  3317 ;; Hardware stack levels used:    1
  3318 ;; Hardware stack levels required when called:    5
  3319 ;; This function calls:
  3320 ;;		_LEDFastFlash
  3321 ;;		_RTXSndPkt
  3322 ;; This function is called by:
  3323 ;;		_RTXTick
  3324 ;;		_RTXStartSendData
  3325 ;; This function uses a non-reentrant model
  3326 ;;
  3327                           
  3328                           
  3329                           ;psect for function _RTXSendData
  3330  0EE1                     _RTXSendData:	
  3331                           
  3332                           ;RTX.c: 229: tu_RTX_DATA valTemp,valBatt;
  3333                           ;RTX.c: 231: if(!(pgm_flg.pgmonoff))
  3334                           
  3335                           ;incstack = 0
  3336                           ; Regs used in _RTXSendData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3337  0EE1  187C               	btfsc	_pgm_flg,0
  3338  0EE2  0008               	return
  3339                           
  3340                           ;RTX.c: 232: {
  3341                           ;RTX.c: 234: if(cntSndData<5 && pgm_cfg.menu.baseIdProg)
  3342  0EE3  3005               	movlw	5
  3343  0EE4  0021               	movlb	1	; select bank1
  3344  0EE5  022F               	subwf	_cntSndData^(0+128),w
  3345  0EE6  1C03               	btfss	3,0
  3346  0EE7  1C53               	btfss	(_pgm_cfg^(0+128)+2),0
  3347  0EE8  2F55               	goto	l522
  3348                           
  3349                           ;RTX.c: 235: {
  3350                           ;RTX.c: 237: pktTx[ID_DEST]=pgm_cfg.baseId;
  3351  0EE9  0855               	movf	(_pgm_cfg^(0+128)+4),w
  3352  0EEA  0020               	movlb	0	; select bank0
  3353  0EEB  00A8               	movwf	??_RTXSendData
  3354  0EEC  0828               	movf	??_RTXSendData,w
  3355  0EED  0021               	movlb	1	; select bank1
  3356  0EEE  00C6               	movwf	_pktTx^(0+128)
  3357                           
  3358                           ;RTX.c: 238: pktTx[TYPE_DEST]=BASE;
  3359  0EEF  01C7               	clrf	(_pktTx^(0+128)+1)
  3360                           
  3361                           ;RTX.c: 239: pktTx[ID_SOURCE]=pgm_cfg.sensId;
  3362  0EF0  0854               	movf	(_pgm_cfg^(0+128)+3),w
  3363  0EF1  0020               	movlb	0	; select bank0
  3364  0EF2  00A8               	movwf	??_RTXSendData
  3365  0EF3  0828               	movf	??_RTXSendData,w
  3366  0EF4  0021               	movlb	1	; select bank1
  3367  0EF5  00C8               	movwf	(_pktTx^(0+128)+2)
  3368                           
  3369                           ;RTX.c: 241: if(PORTBbits.RB5)
  3370  0EF6  0020               	movlb	0	; select bank0
  3371  0EF7  1E8D               	btfss	13,5	;volatile
  3372  0EF8  2EFD               	goto	l3950
  3373                           
  3374                           ;RTX.c: 242: pktTx[TYPE_SOURCE]=SENS_CURRGEN;
  3375  0EF9  0021               	movlb	1	; select bank1
  3376  0EFA  01C9               	clrf	(_pktTx^(0+128)+3)
  3377  0EFB  0AC9               	incf	(_pktTx^(0+128)+3),f
  3378  0EFC  2F03               	goto	l3952
  3379  0EFD                     l3950:	
  3380                           
  3381                           ;RTX.c: 243: else
  3382                           ;RTX.c: 244: pktTx[TYPE_SOURCE]=SENS_CURRCON;
  3383  0EFD  3002               	movlw	2
  3384  0EFE  0020               	movlb	0	; select bank0
  3385  0EFF  00A8               	movwf	??_RTXSendData
  3386  0F00  0828               	movf	??_RTXSendData,w
  3387  0F01  0021               	movlb	1	; select bank1
  3388  0F02  00C9               	movwf	(_pktTx^(0+128)+3)
  3389  0F03                     l3952:	
  3390                           
  3391                           ;RTX.c: 245: pktTx[OP]=DAT;
  3392  0F03  01CA               	clrf	(_pktTx^(0+128)+4)
  3393                           
  3394                           ;RTX.c: 246: valTemp.val=rmsCurr+0;
  3395  0F04  0826               	movf	_rmsCurr^(0+128),w
  3396  0F05  0020               	movlb	0	; select bank0
  3397  0F06  00A9               	movwf	RTXSendData@valTemp
  3398  0F07  0021               	movlb	1	; select bank1
  3399  0F08  0827               	movf	(_rmsCurr+1)^(0+128),w
  3400  0F09  0020               	movlb	0	; select bank0
  3401  0F0A  00AA               	movwf	RTXSendData@valTemp+1
  3402  0F0B  0021               	movlb	1	; select bank1
  3403  0F0C  0828               	movf	(_rmsCurr+2)^(0+128),w
  3404  0F0D  0020               	movlb	0	; select bank0
  3405  0F0E  00AB               	movwf	RTXSendData@valTemp+2
  3406                           
  3407                           ;RTX.c: 247: pktTx[VAL]=valTemp.val_byte[0];
  3408  0F0F  0829               	movf	RTXSendData@valTemp,w
  3409  0F10  00A8               	movwf	??_RTXSendData
  3410  0F11  0828               	movf	??_RTXSendData,w
  3411  0F12  0021               	movlb	1	; select bank1
  3412  0F13  00CB               	movwf	(_pktTx^(0+128)+5)
  3413                           
  3414                           ;RTX.c: 248: pktTx[VAL+1]=valTemp.val_byte[1];
  3415  0F14  0020               	movlb	0	; select bank0
  3416  0F15  082A               	movf	RTXSendData@valTemp+1,w
  3417  0F16  00A8               	movwf	??_RTXSendData
  3418  0F17  0828               	movf	??_RTXSendData,w
  3419  0F18  0021               	movlb	1	; select bank1
  3420  0F19  00CC               	movwf	(_pktTx^(0+128)+6)
  3421                           
  3422                           ;RTX.c: 249: pktTx[VAL+2]=valTemp.val_byte[2];
  3423  0F1A  0020               	movlb	0	; select bank0
  3424  0F1B  082B               	movf	RTXSendData@valTemp+2,w
  3425  0F1C  00A8               	movwf	??_RTXSendData
  3426  0F1D  0828               	movf	??_RTXSendData,w
  3427  0F1E  0021               	movlb	1	; select bank1
  3428  0F1F  00CD               	movwf	(_pktTx^(0+128)+7)
  3429                           
  3430                           ;RTX.c: 250: valBatt.val=battV;
  3431  0F20  0820               	movf	_battV^(0+128),w
  3432  0F21  0020               	movlb	0	; select bank0
  3433  0F22  00AC               	movwf	RTXSendData@valBatt
  3434  0F23  0021               	movlb	1	; select bank1
  3435  0F24  0821               	movf	(_battV+1)^(0+128),w
  3436  0F25  0020               	movlb	0	; select bank0
  3437  0F26  00AD               	movwf	RTXSendData@valBatt+1
  3438  0F27  0021               	movlb	1	; select bank1
  3439  0F28  0822               	movf	(_battV+2)^(0+128),w
  3440  0F29  0020               	movlb	0	; select bank0
  3441  0F2A  00AE               	movwf	RTXSendData@valBatt+2
  3442                           
  3443                           ;RTX.c: 251: pktTx[BAT]=valBatt.val_byte[0];
  3444  0F2B  082C               	movf	RTXSendData@valBatt,w
  3445  0F2C  00A8               	movwf	??_RTXSendData
  3446  0F2D  0828               	movf	??_RTXSendData,w
  3447  0F2E  0021               	movlb	1	; select bank1
  3448  0F2F  00CE               	movwf	(_pktTx^(0+128)+8)
  3449                           
  3450                           ;RTX.c: 252: pktTx[BAT+1]=valBatt.val_byte[1];
  3451  0F30  0020               	movlb	0	; select bank0
  3452  0F31  082D               	movf	RTXSendData@valBatt+1,w
  3453  0F32  00A8               	movwf	??_RTXSendData
  3454  0F33  0828               	movf	??_RTXSendData,w
  3455  0F34  0021               	movlb	1	; select bank1
  3456  0F35  00CF               	movwf	(_pktTx^(0+128)+9)
  3457                           
  3458                           ;RTX.c: 253: pktTx[BAT+2]=valBatt.val_byte[2];
  3459  0F36  0020               	movlb	0	; select bank0
  3460  0F37  082E               	movf	RTXSendData@valBatt+2,w
  3461  0F38  00A8               	movwf	??_RTXSendData
  3462  0F39  0828               	movf	??_RTXSendData,w
  3463  0F3A  0021               	movlb	1	; select bank1
  3464  0F3B  00D0               	movwf	(_pktTx^(0+128)+10)
  3465                           
  3466                           ;RTX.c: 256: RTXSndPkt(pktTx,0x0B);
  3467  0F3C  300B               	movlw	11
  3468  0F3D  0020               	movlb	0	; select bank0
  3469  0F3E  00A8               	movwf	??_RTXSendData
  3470  0F3F  0828               	movf	??_RTXSendData,w
  3471  0F40  00A2               	movwf	RTXSndPkt@len
  3472  0F41  30C6               	movlw	(low (_pktTx| 0))& (0+255)
  3473  0F42  318E  268B  318E   	fcall	_RTXSndPkt
  3474                           
  3475                           ;RTX.c: 259: cntSndData++;
  3476  0F45  3001               	movlw	1
  3477  0F46  0020               	movlb	0	; select bank0
  3478  0F47  00A8               	movwf	??_RTXSendData
  3479  0F48  0828               	movf	??_RTXSendData,w
  3480  0F49  0021               	movlb	1	; select bank1
  3481  0F4A  07AF               	addwf	_cntSndData^(0+128),f
  3482                           
  3483                           ;RTX.c: 262: LEDFastFlash(1);
  3484  0F4B  3001               	movlw	1
  3485  0F4C  318A  2277         	fcall	_LEDFastFlash
  3486                           
  3487                           ;RTX.c: 265: tmrRcvPkt=100;
  3488  0F4E  3064               	movlw	100
  3489  0F4F  0020               	movlb	0	; select bank0
  3490  0F50  00A8               	movwf	??_RTXSendData
  3491  0F51  0828               	movf	??_RTXSendData,w
  3492  0F52  0021               	movlb	1	; select bank1
  3493  0F53  00B3               	movwf	_tmrRcvPkt^(0+128)
  3494                           
  3495                           ;RTX.c: 266: }
  3496  0F54  0008               	return
  3497  0F55                     l522:	
  3498                           
  3499                           ;RTX.c: 267: else
  3500                           ;RTX.c: 268: flg_slp.goSleep=1;
  3501  0F55  1430               	bsf	_flg_slp^(0+128),0
  3502  0F56  0008               	return
  3503  0F57                     __end_of_RTXSendData:	
  3504                           
  3505                           	psect	text7
  3506  0A77                     __ptext7:	
  3507 ;; *************** function _LEDFastFlash *****************
  3508 ;; Defined at:
  3509 ;;		line 38 in file "LED.c"
  3510 ;; Parameters:    Size  Location     Type
  3511 ;;  num             1    wreg     unsigned char 
  3512 ;; Auto vars:     Size  Location     Type
  3513 ;;  num             1    8[COMMON] unsigned char 
  3514 ;;  i               1    9[COMMON] unsigned char 
  3515 ;; Return value:  Size  Location     Type
  3516 ;;		None               void
  3517 ;; Registers used:
  3518 ;;		wreg, status,2, status,0, pclath, cstack
  3519 ;; Tracked objects:
  3520 ;;		On entry : 0/0
  3521 ;;		On exit  : 0/0
  3522 ;;		Unchanged: 0/0
  3523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3524 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3525 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3526 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3527 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3528 ;;Total ram usage:        3 bytes
  3529 ;; Hardware stack levels used:    1
  3530 ;; Hardware stack levels required when called:    3
  3531 ;; This function calls:
  3532 ;;		_DLYDelay_ms
  3533 ;; This function is called by:
  3534 ;;		_RTXSendData
  3535 ;; This function uses a non-reentrant model
  3536 ;;
  3537                           
  3538                           
  3539                           ;psect for function _LEDFastFlash
  3540  0A77                     _LEDFastFlash:	
  3541                           
  3542                           ;incstack = 0
  3543                           ; Regs used in _LEDFastFlash: [wreg+status,2+status,0+pclath+cstack]
  3544                           ;LEDFastFlash@num stored from wreg
  3545  0A77  00F8               	movwf	LEDFastFlash@num
  3546                           
  3547                           ;LED.c: 40: unsigned char i;
  3548                           ;LED.c: 42: for(i=0;i<num;i++)
  3549  0A78  01F9               	clrf	LEDFastFlash@i
  3550  0A79                     l3634:	
  3551  0A79  0878               	movf	LEDFastFlash@num,w
  3552  0A7A  0279               	subwf	LEDFastFlash@i,w
  3553  0A7B  1803               	btfsc	3,0
  3554  0A7C  0008               	return
  3555  0A7D  0064               	clrwdt	;# 
  3556                           
  3557                           ;LED.c: 45: LATCbits.LATC7=0;
  3558  0A7E  0022               	movlb	2	; select bank2
  3559  0A7F  138E               	bcf	14,7	;volatile
  3560                           
  3561                           ;LED.c: 46: DLYDelay_ms(5);
  3562  0A80  3005               	movlw	5
  3563  0A81  00F1               	movwf	DLYDelay_ms@val
  3564  0A82  3000               	movlw	0
  3565  0A83  00F2               	movwf	DLYDelay_ms@val+1
  3566  0A84  3189  21B1  318A   	fcall	_DLYDelay_ms
  3567                           
  3568                           ;LED.c: 47: LATCbits.LATC7=1;
  3569  0A87  0022               	movlb	2	; select bank2
  3570  0A88  178E               	bsf	14,7	;volatile
  3571                           
  3572                           ;LED.c: 48: DLYDelay_ms(5);
  3573  0A89  3005               	movlw	5
  3574  0A8A  00F1               	movwf	DLYDelay_ms@val
  3575  0A8B  3000               	movlw	0
  3576  0A8C  00F2               	movwf	DLYDelay_ms@val+1
  3577  0A8D  3189  21B1  318A   	fcall	_DLYDelay_ms
  3578  0A90  3001               	movlw	1
  3579  0A91  00F7               	movwf	??_LEDFastFlash
  3580  0A92  0877               	movf	??_LEDFastFlash,w
  3581  0A93  07F9               	addwf	LEDFastFlash@i,f
  3582  0A94  2A79               	goto	l3634
  3583  0A95                     __end_of_LEDFastFlash:	
  3584                           
  3585                           	psect	text8
  3586  0C59                     __ptext8:	
  3587 ;; *************** function _CC1Init *****************
  3588 ;; Defined at:
  3589 ;;		line 74 in file "CC1.c"
  3590 ;; Parameters:    Size  Location     Type
  3591 ;;  state           1    wreg     unsigned char 
  3592 ;; Auto vars:     Size  Location     Type
  3593 ;;  state           1    2[BANK0 ] unsigned char 
  3594 ;; Return value:  Size  Location     Type
  3595 ;;		None               void
  3596 ;; Registers used:
  3597 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3598 ;; Tracked objects:
  3599 ;;		On entry : 0/0
  3600 ;;		On exit  : 0/0
  3601 ;;		Unchanged: 0/0
  3602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3604 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3605 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3606 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3607 ;;Total ram usage:        2 bytes
  3608 ;; Hardware stack levels used:    1
  3609 ;; Hardware stack levels required when called:    4
  3610 ;; This function calls:
  3611 ;;		_CC1Strobe
  3612 ;;		_CC1Write
  3613 ;;		_DLYDelay_ms
  3614 ;; This function is called by:
  3615 ;;		_RTXAwake
  3616 ;;		_main
  3617 ;; This function uses a non-reentrant model
  3618 ;;
  3619                           
  3620                           
  3621                           ;psect for function _CC1Init
  3622  0C59                     _CC1Init:	
  3623                           
  3624                           ;incstack = 0
  3625                           ; Regs used in _CC1Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3626                           ;CC1Init@state stored from wreg
  3627  0C59  0020               	movlb	0	; select bank0
  3628  0C5A  00A2               	movwf	CC1Init@state
  3629                           
  3630                           ;CC1.c: 76: switch(state)
  3631  0C5B  2C7F               	goto	l4036
  3632  0C5C                     l4026:	
  3633                           ;CC1.c: 84: case 2:
  3634                           
  3635                           ;CC1.c: 83: break;
  3636                           
  3637                           ;CC1.c: 77: {
  3638                           ;CC1.c: 81: case 1:
  3639                           
  3640                           
  3641                           ;CC1.c: 87: CC1Strobe(SRES);
  3642  0C5C  3030               	movlw	48
  3643  0C5D  3189  2144  318C   	fcall	_CC1Strobe
  3644                           
  3645                           ;CC1.c: 89: DLYDelay_ms(5);
  3646  0C60  3005               	movlw	5
  3647  0C61  00F1               	movwf	DLYDelay_ms@val
  3648  0C62  3000               	movlw	0
  3649  0C63  00F2               	movwf	DLYDelay_ms@val+1
  3650  0C64  3189  21B1  318C   	fcall	_DLYDelay_ms
  3651                           
  3652                           ;CC1.c: 91: CC1Write(0x00,cc1InitVal,0x2E);
  3653  0C67  3020               	movlw	low _cc1InitVal
  3654  0C68  00F7               	movwf	CC1Write@src
  3655  0C69  3001               	movlw	high _cc1InitVal
  3656  0C6A  00F8               	movwf	CC1Write@src+1
  3657  0C6B  302E               	movlw	46
  3658  0C6C  00FB               	movwf	??_CC1Init
  3659  0C6D  087B               	movf	??_CC1Init,w
  3660  0C6E  00F9               	movwf	CC1Write@len
  3661  0C6F  3000               	movlw	0
  3662  0C70  318A  22F3  318C   	fcall	_CC1Write
  3663                           
  3664                           ;CC1.c: 92: CC1Write(0x3E,cc1PaTable,8);
  3665  0C73  30D6               	movlw	low _cc1PaTable
  3666  0C74  00F7               	movwf	CC1Write@src
  3667  0C75  3000               	movlw	high _cc1PaTable
  3668  0C76  00F8               	movwf	CC1Write@src+1
  3669  0C77  3008               	movlw	8
  3670  0C78  00FB               	movwf	??_CC1Init
  3671  0C79  087B               	movf	??_CC1Init,w
  3672  0C7A  00F9               	movwf	CC1Write@len
  3673  0C7B  303E               	movlw	62
  3674  0C7C  318A  22F3         	fcall	_CC1Write
  3675                           
  3676                           ;CC1.c: 98: }
  3677                           
  3678                           ;CC1.c: 97: break;
  3679  0C7E  0008               	return
  3680  0C7F                     l4036:	
  3681  0C7F  0020               	movlb	0	; select bank0
  3682  0C80  0822               	movf	CC1Init@state,w
  3683                           
  3684                           ; Switch size 1, requested type "space"
  3685                           ; Number of cases is 2, Range of values is 1 to 2
  3686                           ; switch strategies available:
  3687                           ; Name         Instructions Cycles
  3688                           ; simple_byte            7     4 (average)
  3689                           ; direct_byte           13     9 (fixed)
  3690                           ; jumptable            263     9 (fixed)
  3691                           ;	Chosen strategy is simple_byte
  3692  0C81  3A01               	xorlw	1	; case 1
  3693  0C82  1903               	skipnz
  3694  0C83  2C88               	goto	l180
  3695  0C84  3A03               	xorlw	3	; case 2
  3696  0C85  1903               	skipnz
  3697  0C86  2C5C               	goto	l4026
  3698  0C87  2C88               	goto	l180
  3699  0C88                     l180:	
  3700  0C88  0008               	return
  3701  0C89                     __end_of_CC1Init:	
  3702                           
  3703                           	psect	text9
  3704  0003                     __ptext9:	
  3705 ;; *************** function _PGMTick *****************
  3706 ;; Defined at:
  3707 ;;		line 37 in file "PGM.c"
  3708 ;; Parameters:    Size  Location     Type
  3709 ;;		None
  3710 ;; Auto vars:     Size  Location     Type
  3711 ;;		None
  3712 ;; Return value:  Size  Location     Type
  3713 ;;		None               void
  3714 ;; Registers used:
  3715 ;;		None
  3716 ;; Tracked objects:
  3717 ;;		On entry : 0/0
  3718 ;;		On exit  : 0/0
  3719 ;;		Unchanged: 0/0
  3720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3722 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3724 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3725 ;;Total ram usage:        0 bytes
  3726 ;; Hardware stack levels used:    1
  3727 ;; Hardware stack levels required when called:    2
  3728 ;; This function calls:
  3729 ;;		Nothing
  3730 ;; This function is called by:
  3731 ;;		_SYSTask
  3732 ;; This function uses a non-reentrant model
  3733 ;;
  3734                           
  3735                           
  3736                           ;psect for function _PGMTick
  3737  0003                     _PGMTick:	
  3738                           
  3739                           ;incstack = 0
  3740                           ; Regs used in _PGMTick: []
  3741  0003  0008               	return
  3742  0004                     __end_of_PGMTick:	
  3743                           
  3744                           	psect	text10
  3745  0982                     __ptext10:	
  3746 ;; *************** function _PGMSelUp *****************
  3747 ;; Defined at:
  3748 ;;		line 79 in file "PGM.c"
  3749 ;; Parameters:    Size  Location     Type
  3750 ;;		None
  3751 ;; Auto vars:     Size  Location     Type
  3752 ;;		None
  3753 ;; Return value:  Size  Location     Type
  3754 ;;		None               void
  3755 ;; Registers used:
  3756 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3757 ;; Tracked objects:
  3758 ;;		On entry : 0/0
  3759 ;;		On exit  : 0/0
  3760 ;;		Unchanged: 0/0
  3761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3763 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3764 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3765 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3766 ;;Total ram usage:        1 bytes
  3767 ;; Hardware stack levels used:    1
  3768 ;; Hardware stack levels required when called:    8
  3769 ;; This function calls:
  3770 ;;		_PGMWriteNvm
  3771 ;;		_RTXStartSendPgm
  3772 ;; This function is called by:
  3773 ;;		_SYSTask
  3774 ;; This function uses a non-reentrant model
  3775 ;;
  3776                           
  3777                           
  3778                           ;psect for function _PGMSelUp
  3779  0982                     _PGMSelUp:	
  3780                           
  3781                           ;PGM.c: 82: if(!(pgm_flg.resetDone))
  3782                           
  3783                           ;incstack = 0
  3784                           ; Regs used in _PGMSelUp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3785  0982  18FC               	btfsc	_pgm_flg,1
  3786  0983  2997               	goto	l4136
  3787                           
  3788                           ;PGM.c: 83: {
  3789                           ;PGM.c: 85: if(pgm_cfg.sensId==0x00)
  3790  0984  0021               	movlb	1	; select bank1
  3791  0985  0854               	movf	(_pgm_cfg^(0+128)+3),w
  3792  0986  1D03               	btfss	3,2
  3793  0987  2992               	goto	l4130
  3794                           
  3795                           ;PGM.c: 86: {
  3796                           ;PGM.c: 88: pgm_cfg.sensId=TMR1L^TMR1H;
  3797  0988  0020               	movlb	0	; select bank0
  3798  0989  0816               	movf	22,w	;volatile
  3799  098A  0617               	xorwf	23,w	;volatile
  3800  098B  00E5               	movwf	??_PGMSelUp
  3801  098C  0865               	movf	??_PGMSelUp,w
  3802  098D  0021               	movlb	1	; select bank1
  3803  098E  00D4               	movwf	(_pgm_cfg^(0+128)+3)
  3804                           
  3805                           ;PGM.c: 90: PGMWriteNvm();
  3806  098F  3188  20D7  3189   	fcall	_PGMWriteNvm
  3807  0992                     l4130:	
  3808                           
  3809                           ;PGM.c: 91: }
  3810                           ;PGM.c: 93: pgm_flg.pgmonoff=1;
  3811  0992  147C               	bsf	_pgm_flg,0
  3812                           
  3813                           ;PGM.c: 95: LATCbits.LATC7=0;
  3814  0993  0022               	movlb	2	; select bank2
  3815  0994  138E               	bcf	14,7	;volatile
  3816                           
  3817                           ;PGM.c: 97: RTXStartSendPgm();
  3818  0995  3188  20F5         	fcall	_RTXStartSendPgm
  3819  0997                     l4136:	
  3820                           
  3821                           ;PGM.c: 98: }
  3822                           ;PGM.c: 100: pgm_flg.resetDone=0;
  3823  0997  10FC               	bcf	_pgm_flg,1
  3824  0998  0008               	return
  3825  0999                     __end_of_PGMSelUp:	
  3826                           
  3827                           	psect	text11
  3828  08F5                     __ptext11:	
  3829 ;; *************** function _RTXStartSendPgm *****************
  3830 ;; Defined at:
  3831 ;;		line 272 in file "RTX.c"
  3832 ;; Parameters:    Size  Location     Type
  3833 ;;		None
  3834 ;; Auto vars:     Size  Location     Type
  3835 ;;		None
  3836 ;; Return value:  Size  Location     Type
  3837 ;;		None               void
  3838 ;; Registers used:
  3839 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3840 ;; Tracked objects:
  3841 ;;		On entry : 0/0
  3842 ;;		On exit  : 0/0
  3843 ;;		Unchanged: 0/0
  3844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3848 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3849 ;;Total ram usage:        0 bytes
  3850 ;; Hardware stack levels used:    1
  3851 ;; Hardware stack levels required when called:    7
  3852 ;; This function calls:
  3853 ;;		_ADCConv
  3854 ;;		_DLYDelay_ms
  3855 ;;		_RTXSendPgm
  3856 ;; This function is called by:
  3857 ;;		_PGMSelUp
  3858 ;; This function uses a non-reentrant model
  3859 ;;
  3860                           
  3861                           
  3862                           ;psect for function _RTXStartSendPgm
  3863  08F5                     _RTXStartSendPgm:	
  3864                           
  3865                           ;RTX.c: 275: DLYDelay_ms(100);
  3866                           
  3867                           ;incstack = 0
  3868                           ; Regs used in _RTXStartSendPgm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3869  08F5  3064               	movlw	100
  3870  08F6  00F1               	movwf	DLYDelay_ms@val
  3871  08F7  3000               	movlw	0
  3872  08F8  00F2               	movwf	DLYDelay_ms@val+1
  3873  08F9  3189  21B1  3188   	fcall	_DLYDelay_ms
  3874                           
  3875                           ;RTX.c: 277: ADCConv();
  3876  08FC  3180  204B  3188   	fcall	_ADCConv
  3877                           
  3878                           ;RTX.c: 280: cntSndData=0;
  3879  08FF  0021               	movlb	1	; select bank1
  3880  0900  01AF               	clrf	_cntSndData^(0+128)
  3881                           
  3882                           ;RTX.c: 282: RTXSendPgm();
  3883  0901  318D  255A         	fcall	_RTXSendPgm
  3884  0903  0008               	return
  3885  0904                     __end_of_RTXStartSendPgm:	
  3886                           
  3887                           	psect	text12
  3888  0D5A                     __ptext12:	
  3889 ;; *************** function _RTXSendPgm *****************
  3890 ;; Defined at:
  3891 ;;		line 285 in file "RTX.c"
  3892 ;; Parameters:    Size  Location     Type
  3893 ;;		None
  3894 ;; Auto vars:     Size  Location     Type
  3895 ;;		None
  3896 ;; Return value:  Size  Location     Type
  3897 ;;		None               void
  3898 ;; Registers used:
  3899 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3900 ;; Tracked objects:
  3901 ;;		On entry : 0/0
  3902 ;;		On exit  : 0/0
  3903 ;;		Unchanged: 0/0
  3904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3906 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3907 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3908 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3909 ;;Total ram usage:        1 bytes
  3910 ;; Hardware stack levels used:    1
  3911 ;; Hardware stack levels required when called:    5
  3912 ;; This function calls:
  3913 ;;		_PGMPgmOff
  3914 ;;		_RTXSndPkt
  3915 ;; This function is called by:
  3916 ;;		_RTXTick
  3917 ;;		_RTXStartSendPgm
  3918 ;; This function uses a non-reentrant model
  3919 ;;
  3920                           
  3921                           
  3922                           ;psect for function _RTXSendPgm
  3923  0D5A                     _RTXSendPgm:	
  3924                           
  3925                           ;RTX.c: 288: if(cntSndData<5)
  3926                           
  3927                           ;incstack = 0
  3928                           ; Regs used in _RTXSendPgm: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3929  0D5A  3005               	movlw	5
  3930  0D5B  0021               	movlb	1	; select bank1
  3931  0D5C  022F               	subwf	_cntSndData^(0+128),w
  3932  0D5D  1803               	skipnc
  3933  0D5E  2D91               	goto	l4020
  3934                           
  3935                           ;RTX.c: 289: {
  3936                           ;RTX.c: 291: pktTx[ID_DEST]=0x00;
  3937  0D5F  01C6               	clrf	_pktTx^(0+128)
  3938                           
  3939                           ;RTX.c: 292: pktTx[TYPE_DEST]=BASE;
  3940  0D60  01C7               	clrf	(_pktTx^(0+128)+1)
  3941                           
  3942                           ;RTX.c: 293: pktTx[ID_SOURCE]=pgm_cfg.sensId;
  3943  0D61  0854               	movf	(_pgm_cfg^(0+128)+3),w
  3944  0D62  0020               	movlb	0	; select bank0
  3945  0D63  00A8               	movwf	??_RTXSendPgm
  3946  0D64  0828               	movf	??_RTXSendPgm,w
  3947  0D65  0021               	movlb	1	; select bank1
  3948  0D66  00C8               	movwf	(_pktTx^(0+128)+2)
  3949                           
  3950                           ;RTX.c: 295: if(PORTBbits.RB5)
  3951  0D67  0020               	movlb	0	; select bank0
  3952  0D68  1E8D               	btfss	13,5	;volatile
  3953  0D69  2D6E               	goto	l3998
  3954                           
  3955                           ;RTX.c: 296: pktTx[TYPE_SOURCE]=SENS_CURRGEN;
  3956  0D6A  0021               	movlb	1	; select bank1
  3957  0D6B  01C9               	clrf	(_pktTx^(0+128)+3)
  3958  0D6C  0AC9               	incf	(_pktTx^(0+128)+3),f
  3959  0D6D  2D74               	goto	l4000
  3960  0D6E                     l3998:	
  3961                           
  3962                           ;RTX.c: 297: else
  3963                           ;RTX.c: 298: pktTx[TYPE_SOURCE]=SENS_CURRCON;
  3964  0D6E  3002               	movlw	2
  3965  0D6F  0020               	movlb	0	; select bank0
  3966  0D70  00A8               	movwf	??_RTXSendPgm
  3967  0D71  0828               	movf	??_RTXSendPgm,w
  3968  0D72  0021               	movlb	1	; select bank1
  3969  0D73  00C9               	movwf	(_pktTx^(0+128)+3)
  3970  0D74                     l4000:	
  3971                           
  3972                           ;RTX.c: 299: pktTx[OP]=PGM;
  3973  0D74  01CA               	clrf	(_pktTx^(0+128)+4)
  3974  0D75  0ACA               	incf	(_pktTx^(0+128)+4),f
  3975                           
  3976                           ;RTX.c: 300: pktTx[VAL]=0x00;
  3977  0D76  01CB               	clrf	(_pktTx^(0+128)+5)
  3978                           
  3979                           ;RTX.c: 301: pktTx[VAL+1]=0x00;
  3980  0D77  01CC               	clrf	(_pktTx^(0+128)+6)
  3981                           
  3982                           ;RTX.c: 302: pktTx[VAL+2]=0x00;
  3983  0D78  01CD               	clrf	(_pktTx^(0+128)+7)
  3984                           
  3985                           ;RTX.c: 303: pktTx[BAT]=0x00;
  3986  0D79  01CE               	clrf	(_pktTx^(0+128)+8)
  3987                           
  3988                           ;RTX.c: 304: pktTx[BAT+1]=0x00;
  3989  0D7A  01CF               	clrf	(_pktTx^(0+128)+9)
  3990                           
  3991                           ;RTX.c: 305: pktTx[BAT+2]=0x00;
  3992  0D7B  01D0               	clrf	(_pktTx^(0+128)+10)
  3993                           
  3994                           ;RTX.c: 308: RTXSndPkt(pktTx,0x0B);
  3995  0D7C  300B               	movlw	11
  3996  0D7D  0020               	movlb	0	; select bank0
  3997  0D7E  00A8               	movwf	??_RTXSendPgm
  3998  0D7F  0828               	movf	??_RTXSendPgm,w
  3999  0D80  00A2               	movwf	RTXSndPkt@len
  4000  0D81  30C6               	movlw	(low (_pktTx| 0))& (0+255)
  4001  0D82  318E  268B         	fcall	_RTXSndPkt
  4002                           
  4003                           ;RTX.c: 311: cntSndData++;
  4004  0D84  3001               	movlw	1
  4005  0D85  0020               	movlb	0	; select bank0
  4006  0D86  00A8               	movwf	??_RTXSendPgm
  4007  0D87  0828               	movf	??_RTXSendPgm,w
  4008  0D88  0021               	movlb	1	; select bank1
  4009  0D89  07AF               	addwf	_cntSndData^(0+128),f
  4010                           
  4011                           ;RTX.c: 314: tmrRcvPkt=100;
  4012  0D8A  3064               	movlw	100
  4013  0D8B  0020               	movlb	0	; select bank0
  4014  0D8C  00A8               	movwf	??_RTXSendPgm
  4015  0D8D  0828               	movf	??_RTXSendPgm,w
  4016  0D8E  0021               	movlb	1	; select bank1
  4017  0D8F  00B3               	movwf	_tmrRcvPkt^(0+128)
  4018                           
  4019                           ;RTX.c: 315: }
  4020  0D90  0008               	return
  4021  0D91                     l4020:	
  4022                           
  4023                           ;RTX.c: 316: else
  4024                           ;RTX.c: 317: {
  4025                           ;RTX.c: 319: PGMPgmOff();
  4026  0D91  3188  207F         	fcall	_PGMPgmOff
  4027                           
  4028                           ;RTX.c: 321: flg_slp.goSleep=1;
  4029  0D93  0021               	movlb	1	; select bank1
  4030  0D94  1430               	bsf	_flg_slp^(0+128),0
  4031  0D95  0008               	return
  4032  0D96                     __end_of_RTXSendPgm:	
  4033                           
  4034                           	psect	text13
  4035  0E8B                     __ptext13:	
  4036 ;; *************** function _RTXSndPkt *****************
  4037 ;; Defined at:
  4038 ;;		line 128 in file "RTX.c"
  4039 ;; Parameters:    Size  Location     Type
  4040 ;;  src             1    wreg     PTR unsigned char 
  4041 ;;		 -> pktTx(11), 
  4042 ;;  len             1    2[BANK0 ] unsigned char 
  4043 ;; Auto vars:     Size  Location     Type
  4044 ;;  src             1    5[BANK0 ] PTR unsigned char 
  4045 ;;		 -> pktTx(11), 
  4046 ;;  sta             1    7[BANK0 ] unsigned char 
  4047 ;;  numTxByte       1    6[BANK0 ] unsigned char 
  4048 ;;  numRxByte       1    4[BANK0 ] unsigned char 
  4049 ;; Return value:  Size  Location     Type
  4050 ;;		None               void
  4051 ;; Registers used:
  4052 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4053 ;; Tracked objects:
  4054 ;;		On entry : 0/0
  4055 ;;		On exit  : 0/0
  4056 ;;		Unchanged: 0/0
  4057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4058 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4059 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4060 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4061 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4062 ;;Total ram usage:        6 bytes
  4063 ;; Hardware stack levels used:    1
  4064 ;; Hardware stack levels required when called:    4
  4065 ;; This function calls:
  4066 ;;		_CC1Read
  4067 ;;		_CC1Strobe
  4068 ;;		_CC1Write
  4069 ;; This function is called by:
  4070 ;;		_RTXSendData
  4071 ;;		_RTXSendPgm
  4072 ;; This function uses a non-reentrant model
  4073 ;;
  4074                           
  4075                           
  4076                           ;psect for function _RTXSndPkt
  4077  0E8B                     _RTXSndPkt:	
  4078                           
  4079                           ;incstack = 0
  4080                           ; Regs used in _RTXSndPkt: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4081                           ;RTXSndPkt@src stored from wreg
  4082  0E8B  0020               	movlb	0	; select bank0
  4083  0E8C  00A5               	movwf	RTXSndPkt@src
  4084  0E8D                     l496:	
  4085                           ;RTX.c: 130: unsigned char sta,numRxByte,numTxByte;
  4086                           ;RTX.c: 133: do
  4087                           
  4088  0E8D  0064               	clrwdt	;# 
  4089                           
  4090                           ;RTX.c: 136: CC1Read(0x35,(&(sta)),1);
  4091  0E8E  3027               	movlw	(low (RTXSndPkt@sta| 0))& (0+255)
  4092  0E8F  0020               	movlb	0	; select bank0
  4093  0E90  00A3               	movwf	??_RTXSndPkt
  4094  0E91  0823               	movf	??_RTXSndPkt,w
  4095  0E92  00F7               	movwf	CC1Read@dst
  4096  0E93  01F8               	clrf	CC1Read@len
  4097  0E94  0AF8               	incf	CC1Read@len,f
  4098  0E95  3035               	movlw	53
  4099  0E96  3189  21E4  318E   	fcall	_CC1Read
  4100                           
  4101                           ;RTX.c: 137: }
  4102                           ;RTX.c: 138: while(!(((sta&0b00011111)==0x0D) || ((sta&0b00011111)==0x01)));
  4103  0E99  301F               	movlw	31
  4104  0E9A  0020               	movlb	0	; select bank0
  4105  0E9B  0527               	andwf	RTXSndPkt@sta,w
  4106  0E9C  00A3               	movwf	??_RTXSndPkt
  4107  0E9D  300D               	movlw	13
  4108  0E9E  0623               	xorwf	??_RTXSndPkt,w
  4109  0E9F  1903               	btfsc	3,2
  4110  0EA0  2EA7               	goto	l3642
  4111  0EA1  301F               	movlw	31
  4112  0EA2  0527               	andwf	RTXSndPkt@sta,w
  4113  0EA3  00A3               	movwf	??_RTXSndPkt
  4114  0EA4  0323               	decf	??_RTXSndPkt,w
  4115  0EA5  1D03               	btfss	3,2
  4116  0EA6  2E8D               	goto	l496
  4117  0EA7                     l3642:	
  4118                           
  4119                           ;RTX.c: 140: CC1Strobe(SIDLE);
  4120  0EA7  3036               	movlw	54
  4121  0EA8  3189  2144  318E   	fcall	_CC1Strobe
  4122                           
  4123                           ;RTX.c: 141: CC1Read(0x3B,(&(numRxByte)),1);
  4124  0EAB  3024               	movlw	(low (RTXSndPkt@numRxByte| 0))& (0+255)
  4125  0EAC  0020               	movlb	0	; select bank0
  4126  0EAD  00A3               	movwf	??_RTXSndPkt
  4127  0EAE  0823               	movf	??_RTXSndPkt,w
  4128  0EAF  00F7               	movwf	CC1Read@dst
  4129  0EB0  01F8               	clrf	CC1Read@len
  4130  0EB1  0AF8               	incf	CC1Read@len,f
  4131  0EB2  303B               	movlw	59
  4132  0EB3  3189  21E4  318E   	fcall	_CC1Read
  4133                           
  4134                           ;RTX.c: 142: CC1Read(0x3A,(&(numTxByte)),1);
  4135  0EB6  3026               	movlw	(low (RTXSndPkt@numTxByte| 0))& (0+255)
  4136  0EB7  0020               	movlb	0	; select bank0
  4137  0EB8  00A3               	movwf	??_RTXSndPkt
  4138  0EB9  0823               	movf	??_RTXSndPkt,w
  4139  0EBA  00F7               	movwf	CC1Read@dst
  4140  0EBB  01F8               	clrf	CC1Read@len
  4141  0EBC  0AF8               	incf	CC1Read@len,f
  4142  0EBD  303A               	movlw	58
  4143  0EBE  3189  21E4  318E   	fcall	_CC1Read
  4144                           
  4145                           ;RTX.c: 144: CC1Strobe(SFTX);
  4146  0EC1  303B               	movlw	59
  4147  0EC2  3189  2144  318E   	fcall	_CC1Strobe
  4148                           
  4149                           ;RTX.c: 145: CC1Read(0x3A,(&(numTxByte)),1);
  4150  0EC5  3026               	movlw	(low (RTXSndPkt@numTxByte| 0))& (0+255)
  4151  0EC6  0020               	movlb	0	; select bank0
  4152  0EC7  00A3               	movwf	??_RTXSndPkt
  4153  0EC8  0823               	movf	??_RTXSndPkt,w
  4154  0EC9  00F7               	movwf	CC1Read@dst
  4155  0ECA  01F8               	clrf	CC1Read@len
  4156  0ECB  0AF8               	incf	CC1Read@len,f
  4157  0ECC  303A               	movlw	58
  4158  0ECD  3189  21E4  318E   	fcall	_CC1Read
  4159                           
  4160                           ;RTX.c: 147: CC1Write(0x3F,src,len);
  4161  0ED0  0020               	movlb	0	; select bank0
  4162  0ED1  0825               	movf	RTXSndPkt@src,w
  4163  0ED2  00F7               	movwf	CC1Write@src
  4164  0ED3  3000               	movlw	0
  4165  0ED4  00F8               	movwf	CC1Write@src+1
  4166  0ED5  0822               	movf	RTXSndPkt@len,w
  4167  0ED6  00A3               	movwf	??_RTXSndPkt
  4168  0ED7  0823               	movf	??_RTXSndPkt,w
  4169  0ED8  00F9               	movwf	CC1Write@len
  4170  0ED9  303F               	movlw	63
  4171  0EDA  318A  22F3  318E   	fcall	_CC1Write
  4172                           
  4173                           ;RTX.c: 149: CC1Strobe(STX);
  4174  0EDD  3035               	movlw	53
  4175  0EDE  3189  2144         	fcall	_CC1Strobe
  4176  0EE0  0008               	return
  4177  0EE1                     __end_of_RTXSndPkt:	
  4178                           
  4179                           	psect	text14
  4180  0AF3                     __ptext14:	
  4181 ;; *************** function _CC1Write *****************
  4182 ;; Defined at:
  4183 ;;		line 134 in file "CC1.c"
  4184 ;; Parameters:    Size  Location     Type
  4185 ;;  addr            1    wreg     unsigned char 
  4186 ;;  src             2    7[COMMON] PTR unsigned char 
  4187 ;;		 -> pktTx(11), cc1PaTable(8), cc1InitVal(47), 
  4188 ;;  len             1    9[COMMON] unsigned char 
  4189 ;; Auto vars:     Size  Location     Type
  4190 ;;  addr            1    0[BANK0 ] unsigned char 
  4191 ;;  cc1Addr         1    1[BANK0 ] unsigned char 
  4192 ;; Return value:  Size  Location     Type
  4193 ;;		None               void
  4194 ;; Registers used:
  4195 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4196 ;; Tracked objects:
  4197 ;;		On entry : 0/0
  4198 ;;		On exit  : 0/0
  4199 ;;		Unchanged: 0/0
  4200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4201 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4202 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4203 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4204 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4205 ;;Total ram usage:        6 bytes
  4206 ;; Hardware stack levels used:    1
  4207 ;; Hardware stack levels required when called:    3
  4208 ;; This function calls:
  4209 ;;		_SPIWrite
  4210 ;; This function is called by:
  4211 ;;		_CC1Init
  4212 ;;		_RTXSndPkt
  4213 ;; This function uses a non-reentrant model
  4214 ;;
  4215                           
  4216                           
  4217                           ;psect for function _CC1Write
  4218  0AF3                     _CC1Write:	
  4219                           
  4220                           ;incstack = 0
  4221                           ; Regs used in _CC1Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4222                           ;CC1Write@addr stored from wreg
  4223  0AF3  0020               	movlb	0	; select bank0
  4224  0AF4  00A0               	movwf	CC1Write@addr
  4225                           
  4226                           ;CC1.c: 136: unsigned char cc1Addr;
  4227                           ;CC1.c: 139: LATAbits.LATA5=0;
  4228  0AF5  0022               	movlb	2	; select bank2
  4229  0AF6  128C               	bcf	12,5	;volatile
  4230                           
  4231                           ;CC1.c: 142: cc1Addr=((addr&0b00111111)|0b01000000);
  4232  0AF7  0020               	movlb	0	; select bank0
  4233  0AF8  0820               	movf	CC1Write@addr,w
  4234  0AF9  393F               	andlw	63
  4235  0AFA  3840               	iorlw	64
  4236  0AFB  00FA               	movwf	??_CC1Write
  4237  0AFC  087A               	movf	??_CC1Write,w
  4238  0AFD  00A1               	movwf	CC1Write@cc1Addr
  4239                           
  4240                           ;CC1.c: 143: SPIWrite((&(cc1Addr)),1);
  4241  0AFE  3021               	movlw	low CC1Write@cc1Addr
  4242  0AFF  00F1               	movwf	SPIWrite@srcPtr
  4243  0B00  3000               	movlw	high CC1Write@cc1Addr
  4244  0B01  00F2               	movwf	SPIWrite@srcPtr+1
  4245  0B02  01F3               	clrf	SPIWrite@len
  4246  0B03  0AF3               	incf	SPIWrite@len,f
  4247  0B04  318A  2200  318A   	fcall	_SPIWrite
  4248                           
  4249                           ;CC1.c: 146: SPIWrite(src,len);
  4250  0B07  0877               	movf	CC1Write@src,w
  4251  0B08  00F1               	movwf	SPIWrite@srcPtr
  4252  0B09  0878               	movf	CC1Write@src+1,w
  4253  0B0A  00F2               	movwf	SPIWrite@srcPtr+1
  4254  0B0B  0879               	movf	CC1Write@len,w
  4255  0B0C  00FA               	movwf	??_CC1Write
  4256  0B0D  087A               	movf	??_CC1Write,w
  4257  0B0E  00F3               	movwf	SPIWrite@len
  4258  0B0F  318A  2200         	fcall	_SPIWrite
  4259                           
  4260                           ;CC1.c: 149: LATAbits.LATA5=1;
  4261  0B11  0022               	movlb	2	; select bank2
  4262  0B12  168C               	bsf	12,5	;volatile
  4263  0B13  0008               	return
  4264  0B14                     __end_of_CC1Write:	
  4265                           
  4266                           	psect	text15
  4267  004B                     __ptext15:	
  4268 ;; *************** function _ADCConv *****************
  4269 ;; Defined at:
  4270 ;;		line 94 in file "ADC.c"
  4271 ;; Parameters:    Size  Location     Type
  4272 ;;		None
  4273 ;; Auto vars:     Size  Location     Type
  4274 ;;  sumEavCurr      4   14[BANK2 ] unsigned long 
  4275 ;;  maxCurr         4    9[BANK2 ] unsigned long 
  4276 ;;  sumCurr         4    3[BANK2 ] unsigned long 
  4277 ;;  sumBatt         2    7[BANK2 ] unsigned short 
  4278 ;;  i               1   18[BANK2 ] unsigned char 
  4279 ;;  j               1   13[BANK2 ] unsigned char 
  4280 ;; Return value:  Size  Location     Type
  4281 ;;		None               void
  4282 ;; Registers used:
  4283 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4284 ;; Tracked objects:
  4285 ;;		On entry : 0/0
  4286 ;;		On exit  : 0/0
  4287 ;;		Unchanged: 0/0
  4288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4290 ;;      Locals:         0       0       0      19       0       0       0       0       0       0       0       0       
      +0       0
  4291 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4292 ;;      Totals:         0       8       0      19       0       0       0       0       0       0       0       0       
      +0       0
  4293 ;;Total ram usage:       27 bytes
  4294 ;; Hardware stack levels used:    1
  4295 ;; Hardware stack levels required when called:    6
  4296 ;; This function calls:
  4297 ;;		_DLYDelay_ms
  4298 ;;		___ftdiv
  4299 ;;		___ftmul
  4300 ;;		___lldiv
  4301 ;;		___lltoft
  4302 ;;		___lmul
  4303 ;;		___lwdiv
  4304 ;;		___lwtoft
  4305 ;;		_sqrt
  4306 ;; This function is called by:
  4307 ;;		_RTXStartSendData
  4308 ;;		_RTXStartSendPgm
  4309 ;;		_SYSTask
  4310 ;; This function uses a non-reentrant model
  4311 ;;
  4312                           
  4313                           
  4314                           ;psect for function _ADCConv
  4315  004B                     _ADCConv:	
  4316                           
  4317                           ;ADC.c: 96: unsigned char i,j;
  4318                           ;ADC.c: 97: unsigned short sumBatt;
  4319                           ;ADC.c: 98: unsigned long sumCurr;
  4320                           ;ADC.c: 99: unsigned long sumEavCurr;
  4321                           ;ADC.c: 100: unsigned long maxCurr;
  4322                           ;ADC.c: 104: LATAbits.LATA0=1;
  4323                           
  4324                           ;incstack = 0
  4325                           ; Regs used in _ADCConv: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4326  004B  0022               	movlb	2	; select bank2
  4327  004C  140C               	bsf	12,0	;volatile
  4328                           
  4329                           ;ADC.c: 106: ADCON1=0b10010011;
  4330  004D  3093               	movlw	147
  4331  004E  0021               	movlb	1	; select bank1
  4332  004F  009E               	movwf	30	;volatile
  4333                           
  4334                           ;ADC.c: 107: ADCON0=0b00000101;
  4335  0050  3005               	movlw	5
  4336  0051  009D               	movwf	29	;volatile
  4337                           
  4338                           ;ADC.c: 109: _delay((unsigned long)((10)*(8000000/4000000.0)));
  4339  0052  3006               	movlw	6
  4340  0053  0020               	movlb	0	; select bank0
  4341  0054  00D7               	movwf	??_ADCConv
  4342  0055                     u4987:	
  4343  0055  0BD7               	decfsz	??_ADCConv,f
  4344  0056  2855               	goto	u4987
  4345  0057  0000               	nop
  4346                           
  4347                           ;ADC.c: 110: for(i=0;i<(10);i++)
  4348  0058  0022               	movlb	2	; select bank2
  4349  0059  01E1               	clrf	ADCConv@i^(0+256)
  4350  005A  300A               	movlw	10
  4351  005B  0261               	subwf	ADCConv@i^(0+256),w
  4352  005C  1803               	btfsc	3,0
  4353  005D  28AC               	goto	l3782
  4354  005E                     l124:	
  4355                           
  4356                           ;ADC.c: 111: {
  4357                           ;ADC.c: 113: ADCON0bits.GO=1;
  4358  005E  0021               	movlb	1	; select bank1
  4359  005F  149D               	bsf	29,1	;volatile
  4360  0060                     l126:	
  4361                           ;ADC.c: 115: while(ADCON0bits.GO)
  4362                           
  4363  0060  0021               	movlb	1	; select bank1
  4364  0061  1C9D               	btfss	29,1	;volatile
  4365  0062  2865               	goto	l3774
  4366  0063  0064               	clrwdt	;# 
  4367  0064  2860               	goto	l126
  4368  0065                     l3774:	
  4369                           
  4370                           ;ADC.c: 118: adc_vals[i].lVal=ADRESL;
  4371  0065  0022               	movlb	2	; select bank2
  4372  0066  0861               	movf	ADCConv@i^(0+256),w
  4373  0067  0020               	movlb	0	; select bank0
  4374  0068  00D7               	movwf	??_ADCConv
  4375  0069  01D8               	clrf	??_ADCConv+1
  4376  006A  35D7               	lslf	??_ADCConv,f
  4377  006B  0DD8               	rlf	??_ADCConv+1,f
  4378  006C  3028               	movlw	40
  4379  006D  00D9               	movwf	??_ADCConv+2
  4380  006E  3023               	movlw	35
  4381  006F  00DA               	movwf	??_ADCConv+3
  4382  0070  0857               	movf	??_ADCConv,w
  4383  0071  0759               	addwf	??_ADCConv+2,w
  4384  0072  00DB               	movwf	??_ADCConv+4
  4385  0073  0858               	movf	??_ADCConv+1,w
  4386  0074  3D5A               	addwfc	??_ADCConv+3,w
  4387  0075  00DC               	movwf	??_ADCConv+5
  4388  0076  085B               	movf	??_ADCConv+4,w
  4389  0077  0086               	movwf	6
  4390  0078  085C               	movf	??_ADCConv+5,w
  4391  0079  0087               	movwf	7
  4392  007A  0021               	movlb	1	; select bank1
  4393  007B  081B               	movf	27,w	;volatile
  4394  007C  0081               	movwf	1
  4395                           
  4396                           ;ADC.c: 119: adc_vals[i].hVal=ADRESH;
  4397  007D  0022               	movlb	2	; select bank2
  4398  007E  0861               	movf	ADCConv@i^(0+256),w
  4399  007F  0020               	movlb	0	; select bank0
  4400  0080  00D7               	movwf	??_ADCConv
  4401  0081  01D8               	clrf	??_ADCConv+1
  4402  0082  35D7               	lslf	??_ADCConv,f
  4403  0083  0DD8               	rlf	??_ADCConv+1,f
  4404  0084  0857               	movf	??_ADCConv,w
  4405  0085  3E01               	addlw	1
  4406  0086  00D9               	movwf	??_ADCConv+2
  4407  0087  3000               	movlw	0
  4408  0088  3D58               	addwfc	??_ADCConv+1,w
  4409  0089  00DA               	movwf	??_ADCConv+3
  4410  008A  3028               	movlw	40
  4411  008B  00DB               	movwf	??_ADCConv+4
  4412  008C  3023               	movlw	35
  4413  008D  00DC               	movwf	??_ADCConv+5
  4414  008E  0859               	movf	??_ADCConv+2,w
  4415  008F  075B               	addwf	??_ADCConv+4,w
  4416  0090  00DD               	movwf	??_ADCConv+6
  4417  0091  085A               	movf	??_ADCConv+3,w
  4418  0092  3D5C               	addwfc	??_ADCConv+5,w
  4419  0093  00DE               	movwf	??_ADCConv+7
  4420  0094  085D               	movf	??_ADCConv+6,w
  4421  0095  0086               	movwf	6
  4422  0096  085E               	movf	??_ADCConv+7,w
  4423  0097  0087               	movwf	7
  4424  0098  0021               	movlb	1	; select bank1
  4425  0099  081C               	movf	28,w	;volatile
  4426  009A  0081               	movwf	1
  4427                           
  4428                           ;ADC.c: 121: DLYDelay_ms((20));
  4429  009B  3014               	movlw	20
  4430  009C  00F1               	movwf	DLYDelay_ms@val
  4431  009D  3000               	movlw	0
  4432  009E  00F2               	movwf	DLYDelay_ms@val+1
  4433  009F  3189  21B1  3180   	fcall	_DLYDelay_ms
  4434  00A2  3001               	movlw	1
  4435  00A3  0020               	movlb	0	; select bank0
  4436  00A4  00D7               	movwf	??_ADCConv
  4437  00A5  0857               	movf	??_ADCConv,w
  4438  00A6  0022               	movlb	2	; select bank2
  4439  00A7  07E1               	addwf	ADCConv@i^(0+256),f
  4440  00A8  300A               	movlw	10
  4441  00A9  0261               	subwf	ADCConv@i^(0+256),w
  4442  00AA  1C03               	skipc
  4443  00AB  285E               	goto	l124
  4444  00AC                     l3782:	
  4445                           
  4446                           ;ADC.c: 122: }
  4447                           ;ADC.c: 124: sumBatt=0;
  4448  00AC  01D6               	clrf	ADCConv@sumBatt^(0+256)
  4449  00AD  01D7               	clrf	(ADCConv@sumBatt+1)^(0+256)
  4450                           
  4451                           ;ADC.c: 125: for(i=0;i<(10);i++)
  4452  00AE  01E1               	clrf	ADCConv@i^(0+256)
  4453  00AF  300A               	movlw	10
  4454  00B0  0261               	subwf	ADCConv@i^(0+256),w
  4455  00B1  1803               	btfsc	3,0
  4456  00B2  28DA               	goto	l3794
  4457  00B3                     l129:	
  4458  00B3  0064               	clrwdt	;# 
  4459                           
  4460                           ;ADC.c: 128: sumBatt+=adc_vals[i].val;
  4461  00B4  0022               	movlb	2	; select bank2
  4462  00B5  0861               	movf	ADCConv@i^(0+256),w
  4463  00B6  0020               	movlb	0	; select bank0
  4464  00B7  00D7               	movwf	??_ADCConv
  4465  00B8  01D8               	clrf	??_ADCConv+1
  4466  00B9  35D7               	lslf	??_ADCConv,f
  4467  00BA  0DD8               	rlf	??_ADCConv+1,f
  4468  00BB  3028               	movlw	40
  4469  00BC  00D9               	movwf	??_ADCConv+2
  4470  00BD  3023               	movlw	35
  4471  00BE  00DA               	movwf	??_ADCConv+3
  4472  00BF  0857               	movf	??_ADCConv,w
  4473  00C0  0759               	addwf	??_ADCConv+2,w
  4474  00C1  0086               	movwf	6
  4475  00C2  0858               	movf	??_ADCConv+1,w
  4476  00C3  3D5A               	addwfc	??_ADCConv+3,w
  4477  00C4  0087               	movwf	7
  4478  00C5  3F40               	moviw [0]fsr1
  4479  00C6  00DB               	movwf	??_ADCConv+4
  4480  00C7  3F41               	moviw [1]fsr1
  4481  00C8  00DC               	movwf	??_ADCConv+5
  4482  00C9  085B               	movf	??_ADCConv+4,w
  4483  00CA  0022               	movlb	2	; select bank2
  4484  00CB  07D6               	addwf	ADCConv@sumBatt^(0+256),f
  4485  00CC  0020               	movlb	0	; select bank0
  4486  00CD  085C               	movf	??_ADCConv+5,w
  4487  00CE  0022               	movlb	2	; select bank2
  4488  00CF  3DD7               	addwfc	(ADCConv@sumBatt+1)^(0+256),f
  4489  00D0  3001               	movlw	1
  4490  00D1  0020               	movlb	0	; select bank0
  4491  00D2  00D7               	movwf	??_ADCConv
  4492  00D3  0857               	movf	??_ADCConv,w
  4493  00D4  0022               	movlb	2	; select bank2
  4494  00D5  07E1               	addwf	ADCConv@i^(0+256),f
  4495  00D6  300A               	movlw	10
  4496  00D7  0261               	subwf	ADCConv@i^(0+256),w
  4497  00D8  1C03               	skipc
  4498  00D9  28B3               	goto	l129
  4499  00DA                     l3794:	
  4500                           
  4501                           ;ADC.c: 129: }
  4502                           ;ADC.c: 130: batt=sumBatt/(10);
  4503  00DA  300A               	movlw	10
  4504  00DB  00F1               	movwf	___lwdiv@divisor
  4505  00DC  3000               	movlw	0
  4506  00DD  00F2               	movwf	___lwdiv@divisor+1
  4507  00DE  0857               	movf	(ADCConv@sumBatt+1)^(0+256),w
  4508  00DF  00F4               	movwf	___lwdiv@dividend+1
  4509  00E0  0856               	movf	ADCConv@sumBatt^(0+256),w
  4510  00E1  00F3               	movwf	___lwdiv@dividend
  4511  00E2  318C  24EB  3180   	fcall	___lwdiv
  4512  00E5  0872               	movf	?___lwdiv+1,w
  4513  00E6  0021               	movlb	1	; select bank1
  4514  00E7  00AA               	movwf	(_batt+1)^(0+128)
  4515  00E8  0871               	movf	?___lwdiv,w
  4516  00E9  00A9               	movwf	_batt^(0+128)
  4517                           
  4518                           ;ADC.c: 134: battV=batt*1.024/1024*11;
  4519  00EA  3000               	movlw	0
  4520  00EB  0020               	movlb	0	; select bank0
  4521  00EC  00C7               	movwf	___ftdiv@f2
  4522  00ED  3080               	movlw	128
  4523  00EE  00C8               	movwf	___ftdiv@f2+1
  4524  00EF  3044               	movlw	68
  4525  00F0  00C9               	movwf	___ftdiv@f2+2
  4526  00F1  3012               	movlw	18
  4527  00F2  00A4               	movwf	___ftmul@f1
  4528  00F3  3083               	movlw	131
  4529  00F4  00A5               	movwf	___ftmul@f1+1
  4530  00F5  303F               	movlw	63
  4531  00F6  00A6               	movwf	___ftmul@f1+2
  4532  00F7  0021               	movlb	1	; select bank1
  4533  00F8  082A               	movf	(_batt+1)^(0+128),w
  4534  00F9  00FA               	movwf	___lwtoft@c+1
  4535  00FA  0829               	movf	_batt^(0+128),w
  4536  00FB  00F9               	movwf	___lwtoft@c
  4537  00FC  3189  2158  3180   	fcall	___lwtoft
  4538  00FF  0879               	movf	?___lwtoft,w
  4539  0100  0020               	movlb	0	; select bank0
  4540  0101  00A7               	movwf	___ftmul@f2
  4541  0102  087A               	movf	?___lwtoft+1,w
  4542  0103  00A8               	movwf	___ftmul@f2+1
  4543  0104  087B               	movf	?___lwtoft+2,w
  4544  0105  00A9               	movwf	___ftmul@f2+2
  4545  0106  3186  26E0  3180   	fcall	___ftmul
  4546  0109  0020               	movlb	0	; select bank0
  4547  010A  0824               	movf	?___ftmul,w
  4548  010B  00CA               	movwf	___ftdiv@f1
  4549  010C  0825               	movf	?___ftmul+1,w
  4550  010D  00CB               	movwf	___ftdiv@f1+1
  4551  010E  0826               	movf	?___ftmul+2,w
  4552  010F  00CC               	movwf	___ftdiv@f1+2
  4553  0110  318F  2757  3180   	fcall	___ftdiv
  4554  0113  0020               	movlb	0	; select bank0
  4555  0114  0847               	movf	?___ftdiv,w
  4556  0115  0022               	movlb	2	; select bank2
  4557  0116  00CF               	movwf	_ADCConv$1418^(0+256)
  4558  0117  0020               	movlb	0	; select bank0
  4559  0118  0848               	movf	?___ftdiv+1,w
  4560  0119  0022               	movlb	2	; select bank2
  4561  011A  00D0               	movwf	(_ADCConv$1418+1)^(0+256)
  4562  011B  0020               	movlb	0	; select bank0
  4563  011C  0849               	movf	?___ftdiv+2,w
  4564  011D  0022               	movlb	2	; select bank2
  4565  011E  00D1               	movwf	(_ADCConv$1418+2)^(0+256)
  4566                           
  4567                           ;ADC.c: 134: battV=batt*1.024/1024*11;
  4568  011F  3000               	movlw	0
  4569  0120  0020               	movlb	0	; select bank0
  4570  0121  00A4               	movwf	___ftmul@f1
  4571  0122  3030               	movlw	48
  4572  0123  00A5               	movwf	___ftmul@f1+1
  4573  0124  3041               	movlw	65
  4574  0125  00A6               	movwf	___ftmul@f1+2
  4575  0126  0022               	movlb	2	; select bank2
  4576  0127  084F               	movf	_ADCConv$1418^(0+256),w
  4577  0128  0020               	movlb	0	; select bank0
  4578  0129  00A7               	movwf	___ftmul@f2
  4579  012A  0022               	movlb	2	; select bank2
  4580  012B  0850               	movf	(_ADCConv$1418+1)^(0+256),w
  4581  012C  0020               	movlb	0	; select bank0
  4582  012D  00A8               	movwf	___ftmul@f2+1
  4583  012E  0022               	movlb	2	; select bank2
  4584  012F  0851               	movf	(_ADCConv$1418+2)^(0+256),w
  4585  0130  0020               	movlb	0	; select bank0
  4586  0131  00A9               	movwf	___ftmul@f2+2
  4587  0132  3186  26E0  3180   	fcall	___ftmul
  4588  0135  0020               	movlb	0	; select bank0
  4589  0136  0824               	movf	?___ftmul,w
  4590  0137  0021               	movlb	1	; select bank1
  4591  0138  00A0               	movwf	_battV^(0+128)
  4592  0139  0020               	movlb	0	; select bank0
  4593  013A  0825               	movf	?___ftmul+1,w
  4594  013B  0021               	movlb	1	; select bank1
  4595  013C  00A1               	movwf	(_battV+1)^(0+128)
  4596  013D  0020               	movlb	0	; select bank0
  4597  013E  0826               	movf	?___ftmul+2,w
  4598  013F  0021               	movlb	1	; select bank1
  4599  0140  00A2               	movwf	(_battV+2)^(0+128)
  4600                           
  4601                           ;ADC.c: 136: LATAbits.LATA0=0;
  4602  0141  0022               	movlb	2	; select bank2
  4603  0142  100C               	bcf	12,0	;volatile
  4604                           
  4605                           ;ADC.c: 140: ADCON1=0b10010011;
  4606  0143  3093               	movlw	147
  4607  0144  0021               	movlb	1	; select bank1
  4608  0145  009E               	movwf	30	;volatile
  4609                           
  4610                           ;ADC.c: 141: ADCON0=0b00001001;
  4611  0146  3009               	movlw	9
  4612  0147  009D               	movwf	29	;volatile
  4613                           
  4614                           ;ADC.c: 143: _delay((unsigned long)((10)*(8000000/4000000.0)));
  4615  0148  3006               	movlw	6
  4616  0149  0020               	movlb	0	; select bank0
  4617  014A  00D7               	movwf	??_ADCConv
  4618  014B                     u4997:	
  4619  014B  0BD7               	decfsz	??_ADCConv,f
  4620  014C  294B               	goto	u4997
  4621  014D  0000               	nop
  4622                           
  4623                           ;ADC.c: 144: for(i=0;i<(100);i++)
  4624  014E  0022               	movlb	2	; select bank2
  4625  014F  01E1               	clrf	ADCConv@i^(0+256)
  4626  0150  3064               	movlw	100
  4627  0151  0261               	subwf	ADCConv@i^(0+256),w
  4628  0152  1803               	btfsc	3,0
  4629  0153  29A2               	goto	l3818
  4630  0154                     l131:	
  4631  0154  0064               	clrwdt	;# 
  4632                           
  4633                           ;ADC.c: 148: ADCON0bits.GO=1;
  4634  0155  0021               	movlb	1	; select bank1
  4635  0156  149D               	bsf	29,1	;volatile
  4636  0157                     l133:	
  4637                           ;ADC.c: 150: while(ADCON0bits.GO)
  4638                           
  4639  0157  0021               	movlb	1	; select bank1
  4640  0158  1C9D               	btfss	29,1	;volatile
  4641  0159  295C               	goto	l3810
  4642  015A  0064               	clrwdt	;# 
  4643  015B  2957               	goto	l133
  4644  015C                     l3810:	
  4645                           
  4646                           ;ADC.c: 153: adc_vals[i].lVal=ADRESL;
  4647  015C  0022               	movlb	2	; select bank2
  4648  015D  0861               	movf	ADCConv@i^(0+256),w
  4649  015E  0020               	movlb	0	; select bank0
  4650  015F  00D7               	movwf	??_ADCConv
  4651  0160  01D8               	clrf	??_ADCConv+1
  4652  0161  35D7               	lslf	??_ADCConv,f
  4653  0162  0DD8               	rlf	??_ADCConv+1,f
  4654  0163  3028               	movlw	40
  4655  0164  00D9               	movwf	??_ADCConv+2
  4656  0165  3023               	movlw	35
  4657  0166  00DA               	movwf	??_ADCConv+3
  4658  0167  0857               	movf	??_ADCConv,w
  4659  0168  0759               	addwf	??_ADCConv+2,w
  4660  0169  00DB               	movwf	??_ADCConv+4
  4661  016A  0858               	movf	??_ADCConv+1,w
  4662  016B  3D5A               	addwfc	??_ADCConv+3,w
  4663  016C  00DC               	movwf	??_ADCConv+5
  4664  016D  085B               	movf	??_ADCConv+4,w
  4665  016E  0086               	movwf	6
  4666  016F  085C               	movf	??_ADCConv+5,w
  4667  0170  0087               	movwf	7
  4668  0171  0021               	movlb	1	; select bank1
  4669  0172  081B               	movf	27,w	;volatile
  4670  0173  0081               	movwf	1
  4671                           
  4672                           ;ADC.c: 154: adc_vals[i].hVal=ADRESH;
  4673  0174  0022               	movlb	2	; select bank2
  4674  0175  0861               	movf	ADCConv@i^(0+256),w
  4675  0176  0020               	movlb	0	; select bank0
  4676  0177  00D7               	movwf	??_ADCConv
  4677  0178  01D8               	clrf	??_ADCConv+1
  4678  0179  35D7               	lslf	??_ADCConv,f
  4679  017A  0DD8               	rlf	??_ADCConv+1,f
  4680  017B  0857               	movf	??_ADCConv,w
  4681  017C  3E01               	addlw	1
  4682  017D  00D9               	movwf	??_ADCConv+2
  4683  017E  3000               	movlw	0
  4684  017F  3D58               	addwfc	??_ADCConv+1,w
  4685  0180  00DA               	movwf	??_ADCConv+3
  4686  0181  3028               	movlw	40
  4687  0182  00DB               	movwf	??_ADCConv+4
  4688  0183  3023               	movlw	35
  4689  0184  00DC               	movwf	??_ADCConv+5
  4690  0185  0859               	movf	??_ADCConv+2,w
  4691  0186  075B               	addwf	??_ADCConv+4,w
  4692  0187  00DD               	movwf	??_ADCConv+6
  4693  0188  085A               	movf	??_ADCConv+3,w
  4694  0189  3D5C               	addwfc	??_ADCConv+5,w
  4695  018A  00DE               	movwf	??_ADCConv+7
  4696  018B  085D               	movf	??_ADCConv+6,w
  4697  018C  0086               	movwf	6
  4698  018D  085E               	movf	??_ADCConv+7,w
  4699  018E  0087               	movwf	7
  4700  018F  0021               	movlb	1	; select bank1
  4701  0190  081C               	movf	28,w	;volatile
  4702  0191  0081               	movwf	1
  4703                           
  4704                           ;ADC.c: 156: _delay((unsigned long)(((200-17))*(8000000/4000000.0)));
  4705  0192  3079               	movlw	121
  4706  0193  0020               	movlb	0	; select bank0
  4707  0194  00D7               	movwf	??_ADCConv
  4708  0195                     u5007:	
  4709  0195  0BD7               	decfsz	??_ADCConv,f
  4710  0196  2995               	goto	u5007
  4711  0197  3200               	nop2	;nop
  4712  0198  3001               	movlw	1
  4713  0199  0020               	movlb	0	; select bank0
  4714  019A  00D7               	movwf	??_ADCConv
  4715  019B  0857               	movf	??_ADCConv,w
  4716  019C  0022               	movlb	2	; select bank2
  4717  019D  07E1               	addwf	ADCConv@i^(0+256),f
  4718  019E  3064               	movlw	100
  4719  019F  0261               	subwf	ADCConv@i^(0+256),w
  4720  01A0  1C03               	skipc
  4721  01A1  2954               	goto	l131
  4722  01A2                     l3818:	
  4723                           
  4724                           ;ADC.c: 157: }
  4725                           ;ADC.c: 159: maxCurr=0;
  4726  01A2  3000               	movlw	0
  4727  01A3  00DB               	movwf	(ADCConv@maxCurr+3)^(0+256)
  4728  01A4  3000               	movlw	0
  4729  01A5  00DA               	movwf	(ADCConv@maxCurr+2)^(0+256)
  4730  01A6  3000               	movlw	0
  4731  01A7  00D9               	movwf	(ADCConv@maxCurr+1)^(0+256)
  4732  01A8  3000               	movlw	0
  4733  01A9  00D8               	movwf	ADCConv@maxCurr^(0+256)
  4734                           
  4735                           ;ADC.c: 160: for(i=0;i<(100);i++)
  4736  01AA  01E1               	clrf	ADCConv@i^(0+256)
  4737  01AB  3064               	movlw	100
  4738  01AC  0261               	subwf	ADCConv@i^(0+256),w
  4739  01AD  1803               	btfsc	3,0
  4740  01AE  2A01               	goto	l3834
  4741  01AF                     l136:	
  4742  01AF  0064               	clrwdt	;# 
  4743                           
  4744                           ;ADC.c: 163: if(adc_vals[i].val>maxCurr)
  4745  01B0  0022               	movlb	2	; select bank2
  4746  01B1  0861               	movf	ADCConv@i^(0+256),w
  4747  01B2  0020               	movlb	0	; select bank0
  4748  01B3  00D7               	movwf	??_ADCConv
  4749  01B4  01D8               	clrf	??_ADCConv+1
  4750  01B5  35D7               	lslf	??_ADCConv,f
  4751  01B6  0DD8               	rlf	??_ADCConv+1,f
  4752  01B7  3028               	movlw	40
  4753  01B8  0757               	addwf	??_ADCConv,w
  4754  01B9  0084               	movwf	4
  4755  01BA  3023               	movlw	35
  4756  01BB  3D58               	addwfc	??_ADCConv+1,w
  4757  01BC  0085               	movwf	5
  4758  01BD  3F00               	moviw [0]fsr0
  4759  01BE  00D9               	movwf	??_ADCConv+2
  4760  01BF  3F01               	moviw [1]fsr0
  4761  01C0  00DA               	movwf	??_ADCConv+3
  4762  01C1  01DB               	clrf	??_ADCConv+4
  4763  01C2  01DC               	clrf	??_ADCConv+5
  4764  01C3  085C               	movf	??_ADCConv+5,w
  4765  01C4  0022               	movlb	2	; select bank2
  4766  01C5  025B               	subwf	(ADCConv@maxCurr+3)^(0+256),w
  4767  01C6  1D03               	skipz
  4768  01C7  29D8               	goto	u4345
  4769  01C8  0020               	movlb	0	; select bank0
  4770  01C9  085B               	movf	??_ADCConv+4,w
  4771  01CA  0022               	movlb	2	; select bank2
  4772  01CB  025A               	subwf	(ADCConv@maxCurr+2)^(0+256),w
  4773  01CC  1D03               	skipz
  4774  01CD  29D8               	goto	u4345
  4775  01CE  0020               	movlb	0	; select bank0
  4776  01CF  085A               	movf	??_ADCConv+3,w
  4777  01D0  0022               	movlb	2	; select bank2
  4778  01D1  0259               	subwf	(ADCConv@maxCurr+1)^(0+256),w
  4779  01D2  1D03               	skipz
  4780  01D3  29D8               	goto	u4345
  4781  01D4  0020               	movlb	0	; select bank0
  4782  01D5  0859               	movf	??_ADCConv+2,w
  4783  01D6  0022               	movlb	2	; select bank2
  4784  01D7  0258               	subwf	ADCConv@maxCurr^(0+256),w
  4785  01D8                     u4345:	
  4786  01D8  1803               	skipnc
  4787  01D9  29F7               	goto	l3830
  4788                           
  4789                           ;ADC.c: 164: maxCurr=adc_vals[i].val;
  4790  01DA  0861               	movf	ADCConv@i^(0+256),w
  4791  01DB  0020               	movlb	0	; select bank0
  4792  01DC  00D7               	movwf	??_ADCConv
  4793  01DD  01D8               	clrf	??_ADCConv+1
  4794  01DE  35D7               	lslf	??_ADCConv,f
  4795  01DF  0DD8               	rlf	??_ADCConv+1,f
  4796  01E0  3028               	movlw	40
  4797  01E1  00D9               	movwf	??_ADCConv+2
  4798  01E2  3023               	movlw	35
  4799  01E3  00DA               	movwf	??_ADCConv+3
  4800  01E4  0857               	movf	??_ADCConv,w
  4801  01E5  0759               	addwf	??_ADCConv+2,w
  4802  01E6  0086               	movwf	6
  4803  01E7  0858               	movf	??_ADCConv+1,w
  4804  01E8  3D5A               	addwfc	??_ADCConv+3,w
  4805  01E9  0087               	movwf	7
  4806  01EA  3F40               	moviw [0]fsr1
  4807  01EB  00DB               	movwf	??_ADCConv+4
  4808  01EC  3F41               	moviw [1]fsr1
  4809  01ED  00DC               	movwf	??_ADCConv+5
  4810  01EE  085B               	movf	??_ADCConv+4,w
  4811  01EF  0022               	movlb	2	; select bank2
  4812  01F0  00D8               	movwf	ADCConv@maxCurr^(0+256)
  4813  01F1  0020               	movlb	0	; select bank0
  4814  01F2  085C               	movf	??_ADCConv+5,w
  4815  01F3  0022               	movlb	2	; select bank2
  4816  01F4  00D9               	movwf	(ADCConv@maxCurr^(0+256)+1)
  4817  01F5  01DA               	clrf	(ADCConv@maxCurr^(0+256)+2)
  4818  01F6  01DB               	clrf	(ADCConv@maxCurr^(0+256)+3)
  4819  01F7                     l3830:	
  4820  01F7  3001               	movlw	1
  4821  01F8  0020               	movlb	0	; select bank0
  4822  01F9  00D7               	movwf	??_ADCConv
  4823  01FA  0857               	movf	??_ADCConv,w
  4824  01FB  0022               	movlb	2	; select bank2
  4825  01FC  07E1               	addwf	ADCConv@i^(0+256),f
  4826  01FD  3064               	movlw	100
  4827  01FE  0261               	subwf	ADCConv@i^(0+256),w
  4828  01FF  1C03               	skipc
  4829  0200  29AF               	goto	l136
  4830  0201                     l3834:	
  4831                           
  4832                           ;ADC.c: 165: }
  4833                           ;ADC.c: 167: rmsCurr=(float)maxCurr/sqrt(2);
  4834  0201  3000               	movlw	0
  4835  0202  0020               	movlb	0	; select bank0
  4836  0203  00B4               	movwf	sqrt@y
  4837  0204  3000               	movlw	0
  4838  0205  00B5               	movwf	sqrt@y+1
  4839  0206  3040               	movlw	64
  4840  0207  00B6               	movwf	sqrt@y+2
  4841  0208  3185  2534  3180   	fcall	_sqrt
  4842  020B  0020               	movlb	0	; select bank0
  4843  020C  0834               	movf	?_sqrt,w
  4844  020D  00C7               	movwf	___ftdiv@f2
  4845  020E  0835               	movf	?_sqrt+1,w
  4846  020F  00C8               	movwf	___ftdiv@f2+1
  4847  0210  0836               	movf	?_sqrt+2,w
  4848  0211  00C9               	movwf	___ftdiv@f2+2
  4849  0212  0022               	movlb	2	; select bank2
  4850  0213  085B               	movf	(ADCConv@maxCurr+3)^(0+256),w
  4851  0214  0020               	movlb	0	; select bank0
  4852  0215  00A3               	movwf	___lltoft@c+3
  4853  0216  0022               	movlb	2	; select bank2
  4854  0217  085A               	movf	(ADCConv@maxCurr+2)^(0+256),w
  4855  0218  0020               	movlb	0	; select bank0
  4856  0219  00A2               	movwf	___lltoft@c+2
  4857  021A  0022               	movlb	2	; select bank2
  4858  021B  0859               	movf	(ADCConv@maxCurr+1)^(0+256),w
  4859  021C  0020               	movlb	0	; select bank0
  4860  021D  00A1               	movwf	___lltoft@c+1
  4861  021E  0022               	movlb	2	; select bank2
  4862  021F  0858               	movf	ADCConv@maxCurr^(0+256),w
  4863  0220  0020               	movlb	0	; select bank0
  4864  0221  00A0               	movwf	___lltoft@c
  4865  0222  318B  23D0  3180   	fcall	___lltoft
  4866  0225  0020               	movlb	0	; select bank0
  4867  0226  0820               	movf	?___lltoft,w
  4868  0227  00CA               	movwf	___ftdiv@f1
  4869  0228  0821               	movf	?___lltoft+1,w
  4870  0229  00CB               	movwf	___ftdiv@f1+1
  4871  022A  0822               	movf	?___lltoft+2,w
  4872  022B  00CC               	movwf	___ftdiv@f1+2
  4873  022C  318F  2757  3180   	fcall	___ftdiv
  4874  022F  0020               	movlb	0	; select bank0
  4875  0230  0847               	movf	?___ftdiv,w
  4876  0231  0021               	movlb	1	; select bank1
  4877  0232  00A6               	movwf	_rmsCurr^(0+128)
  4878  0233  0020               	movlb	0	; select bank0
  4879  0234  0848               	movf	?___ftdiv+1,w
  4880  0235  0021               	movlb	1	; select bank1
  4881  0236  00A7               	movwf	(_rmsCurr+1)^(0+128)
  4882  0237  0020               	movlb	0	; select bank0
  4883  0238  0849               	movf	?___ftdiv+2,w
  4884  0239  0021               	movlb	1	; select bank1
  4885  023A  00A8               	movwf	(_rmsCurr+2)^(0+128)
  4886                           
  4887                           ;ADC.c: 170: sumCurr=0;
  4888  023B  3000               	movlw	0
  4889  023C  0022               	movlb	2	; select bank2
  4890  023D  00D5               	movwf	(ADCConv@sumCurr+3)^(0+256)
  4891  023E  3000               	movlw	0
  4892  023F  00D4               	movwf	(ADCConv@sumCurr+2)^(0+256)
  4893  0240  3000               	movlw	0
  4894  0241  00D3               	movwf	(ADCConv@sumCurr+1)^(0+256)
  4895  0242  3000               	movlw	0
  4896  0243  00D2               	movwf	ADCConv@sumCurr^(0+256)
  4897                           
  4898                           ;ADC.c: 171: for(i=0;i<(100);)
  4899  0244  01E1               	clrf	ADCConv@i^(0+256)
  4900  0245  3064               	movlw	100
  4901  0246  0261               	subwf	ADCConv@i^(0+256),w
  4902  0247  1803               	btfsc	3,0
  4903  0248  2AC2               	goto	l3864
  4904  0249                     l3844:	
  4905                           
  4906                           ;ADC.c: 172: {
  4907                           ;ADC.c: 179: sumEavCurr=0;
  4908  0249  3000               	movlw	0
  4909  024A  00E0               	movwf	(ADCConv@sumEavCurr+3)^(0+256)
  4910  024B  3000               	movlw	0
  4911  024C  00DF               	movwf	(ADCConv@sumEavCurr+2)^(0+256)
  4912  024D  3000               	movlw	0
  4913  024E  00DE               	movwf	(ADCConv@sumEavCurr+1)^(0+256)
  4914  024F  3000               	movlw	0
  4915  0250  00DD               	movwf	ADCConv@sumEavCurr^(0+256)
  4916                           
  4917                           ;ADC.c: 180: for(j=0;j<((100)/(20));j++,i++)
  4918  0251  01DC               	clrf	ADCConv@j^(0+256)
  4919  0252  3005               	movlw	5
  4920  0253  025C               	subwf	ADCConv@j^(0+256),w
  4921  0254  1803               	btfsc	3,0
  4922  0255  2A86               	goto	l3860
  4923  0256                     l141:	
  4924  0256  0064               	clrwdt	;# 
  4925                           
  4926                           ;ADC.c: 183: sumEavCurr+=adc_vals[i].val;
  4927  0257  0022               	movlb	2	; select bank2
  4928  0258  0861               	movf	ADCConv@i^(0+256),w
  4929  0259  0020               	movlb	0	; select bank0
  4930  025A  00D7               	movwf	??_ADCConv
  4931  025B  01D8               	clrf	??_ADCConv+1
  4932  025C  35D7               	lslf	??_ADCConv,f
  4933  025D  0DD8               	rlf	??_ADCConv+1,f
  4934  025E  3028               	movlw	40
  4935  025F  00D9               	movwf	??_ADCConv+2
  4936  0260  3023               	movlw	35
  4937  0261  00DA               	movwf	??_ADCConv+3
  4938  0262  0857               	movf	??_ADCConv,w
  4939  0263  0759               	addwf	??_ADCConv+2,w
  4940  0264  0086               	movwf	6
  4941  0265  0858               	movf	??_ADCConv+1,w
  4942  0266  3D5A               	addwfc	??_ADCConv+3,w
  4943  0267  0087               	movwf	7
  4944  0268  3F40               	moviw [0]fsr1
  4945  0269  00DB               	movwf	??_ADCConv+4
  4946  026A  3F41               	moviw [1]fsr1
  4947  026B  00DC               	movwf	??_ADCConv+5
  4948  026C  085B               	movf	??_ADCConv+4,w
  4949  026D  0022               	movlb	2	; select bank2
  4950  026E  07DD               	addwf	ADCConv@sumEavCurr^(0+256),f
  4951  026F  0020               	movlb	0	; select bank0
  4952  0270  085C               	movf	??_ADCConv+5,w
  4953  0271  0022               	movlb	2	; select bank2
  4954  0272  3DDE               	addwfc	(ADCConv@sumEavCurr+1)^(0+256),f
  4955  0273  3000               	movlw	0
  4956  0274  3DDF               	addwfc	(ADCConv@sumEavCurr+2)^(0+256),f
  4957  0275  3DE0               	addwfc	(ADCConv@sumEavCurr+3)^(0+256),f
  4958  0276  3001               	movlw	1
  4959  0277  0020               	movlb	0	; select bank0
  4960  0278  00D7               	movwf	??_ADCConv
  4961  0279  0857               	movf	??_ADCConv,w
  4962  027A  0022               	movlb	2	; select bank2
  4963  027B  07DC               	addwf	ADCConv@j^(0+256),f
  4964  027C  3001               	movlw	1
  4965  027D  0020               	movlb	0	; select bank0
  4966  027E  00D7               	movwf	??_ADCConv
  4967  027F  0857               	movf	??_ADCConv,w
  4968  0280  0022               	movlb	2	; select bank2
  4969  0281  07E1               	addwf	ADCConv@i^(0+256),f
  4970  0282  3005               	movlw	5
  4971  0283  025C               	subwf	ADCConv@j^(0+256),w
  4972  0284  1C03               	skipc
  4973  0285  2A56               	goto	l141
  4974  0286                     l3860:	
  4975                           
  4976                           ;ADC.c: 184: }
  4977                           ;ADC.c: 185: sumEavCurr/=((100)/(20));
  4978  0286  3000               	movlw	0
  4979  0287  00F4               	movwf	___lldiv@divisor+3
  4980  0288  3000               	movlw	0
  4981  0289  00F3               	movwf	___lldiv@divisor+2
  4982  028A  3000               	movlw	0
  4983  028B  00F2               	movwf	___lldiv@divisor+1
  4984  028C  3005               	movlw	5
  4985  028D  00F1               	movwf	___lldiv@divisor
  4986  028E  0860               	movf	(ADCConv@sumEavCurr+3)^(0+256),w
  4987  028F  00F8               	movwf	___lldiv@dividend+3
  4988  0290  085F               	movf	(ADCConv@sumEavCurr+2)^(0+256),w
  4989  0291  00F7               	movwf	___lldiv@dividend+2
  4990  0292  085E               	movf	(ADCConv@sumEavCurr+1)^(0+256),w
  4991  0293  00F6               	movwf	___lldiv@dividend+1
  4992  0294  085D               	movf	ADCConv@sumEavCurr^(0+256),w
  4993  0295  00F5               	movwf	___lldiv@dividend
  4994  0296  318D  25E5  3180   	fcall	___lldiv
  4995  0299  0874               	movf	?___lldiv+3,w
  4996  029A  0022               	movlb	2	; select bank2
  4997  029B  00E0               	movwf	(ADCConv@sumEavCurr+3)^(0+256)
  4998  029C  0873               	movf	?___lldiv+2,w
  4999  029D  00DF               	movwf	(ADCConv@sumEavCurr+2)^(0+256)
  5000  029E  0872               	movf	?___lldiv+1,w
  5001  029F  00DE               	movwf	(ADCConv@sumEavCurr+1)^(0+256)
  5002  02A0  0871               	movf	?___lldiv,w
  5003  02A1  00DD               	movwf	ADCConv@sumEavCurr^(0+256)
  5004                           
  5005                           ;ADC.c: 186: sumCurr+=sumEavCurr*sumEavCurr;
  5006  02A2  0860               	movf	(ADCConv@sumEavCurr+3)^(0+256),w
  5007  02A3  00F4               	movwf	___lmul@multiplier+3
  5008  02A4  085F               	movf	(ADCConv@sumEavCurr+2)^(0+256),w
  5009  02A5  00F3               	movwf	___lmul@multiplier+2
  5010  02A6  085E               	movf	(ADCConv@sumEavCurr+1)^(0+256),w
  5011  02A7  00F2               	movwf	___lmul@multiplier+1
  5012  02A8  085D               	movf	ADCConv@sumEavCurr^(0+256),w
  5013  02A9  00F1               	movwf	___lmul@multiplier
  5014  02AA  0860               	movf	(ADCConv@sumEavCurr+3)^(0+256),w
  5015  02AB  00F8               	movwf	___lmul@multiplicand+3
  5016  02AC  085F               	movf	(ADCConv@sumEavCurr+2)^(0+256),w
  5017  02AD  00F7               	movwf	___lmul@multiplicand+2
  5018  02AE  085E               	movf	(ADCConv@sumEavCurr+1)^(0+256),w
  5019  02AF  00F6               	movwf	___lmul@multiplicand+1
  5020  02B0  085D               	movf	ADCConv@sumEavCurr^(0+256),w
  5021  02B1  00F5               	movwf	___lmul@multiplicand
  5022  02B2  318C  24B9  3180   	fcall	___lmul
  5023  02B5  0871               	movf	?___lmul,w
  5024  02B6  0022               	movlb	2	; select bank2
  5025  02B7  07D2               	addwf	ADCConv@sumCurr^(0+256),f
  5026  02B8  0872               	movf	?___lmul+1,w
  5027  02B9  3DD3               	addwfc	(ADCConv@sumCurr+1)^(0+256),f
  5028  02BA  0873               	movf	?___lmul+2,w
  5029  02BB  3DD4               	addwfc	(ADCConv@sumCurr+2)^(0+256),f
  5030  02BC  0874               	movf	?___lmul+3,w
  5031  02BD  3DD5               	addwfc	(ADCConv@sumCurr+3)^(0+256),f
  5032  02BE  3064               	movlw	100
  5033  02BF  0261               	subwf	ADCConv@i^(0+256),w
  5034  02C0  1C03               	skipc
  5035  02C1  2A49               	goto	l3844
  5036  02C2                     l3864:	
  5037                           
  5038                           ;ADC.c: 187: }
  5039                           ;ADC.c: 194: realRmsCurr=(float)sumCurr*2;
  5040  02C2  3000               	movlw	0
  5041  02C3  0020               	movlb	0	; select bank0
  5042  02C4  00A4               	movwf	___ftmul@f1
  5043  02C5  3000               	movlw	0
  5044  02C6  00A5               	movwf	___ftmul@f1+1
  5045  02C7  3040               	movlw	64
  5046  02C8  00A6               	movwf	___ftmul@f1+2
  5047  02C9  0022               	movlb	2	; select bank2
  5048  02CA  0855               	movf	(ADCConv@sumCurr+3)^(0+256),w
  5049  02CB  0020               	movlb	0	; select bank0
  5050  02CC  00A3               	movwf	___lltoft@c+3
  5051  02CD  0022               	movlb	2	; select bank2
  5052  02CE  0854               	movf	(ADCConv@sumCurr+2)^(0+256),w
  5053  02CF  0020               	movlb	0	; select bank0
  5054  02D0  00A2               	movwf	___lltoft@c+2
  5055  02D1  0022               	movlb	2	; select bank2
  5056  02D2  0853               	movf	(ADCConv@sumCurr+1)^(0+256),w
  5057  02D3  0020               	movlb	0	; select bank0
  5058  02D4  00A1               	movwf	___lltoft@c+1
  5059  02D5  0022               	movlb	2	; select bank2
  5060  02D6  0852               	movf	ADCConv@sumCurr^(0+256),w
  5061  02D7  0020               	movlb	0	; select bank0
  5062  02D8  00A0               	movwf	___lltoft@c
  5063  02D9  318B  23D0  3180   	fcall	___lltoft
  5064  02DC  0020               	movlb	0	; select bank0
  5065  02DD  0820               	movf	?___lltoft,w
  5066  02DE  00A7               	movwf	___ftmul@f2
  5067  02DF  0821               	movf	?___lltoft+1,w
  5068  02E0  00A8               	movwf	___ftmul@f2+1
  5069  02E1  0822               	movf	?___lltoft+2,w
  5070  02E2  00A9               	movwf	___ftmul@f2+2
  5071  02E3  3186  26E0  3180   	fcall	___ftmul
  5072  02E6  0020               	movlb	0	; select bank0
  5073  02E7  0824               	movf	?___ftmul,w
  5074  02E8  0021               	movlb	1	; select bank1
  5075  02E9  00A3               	movwf	_realRmsCurr^(0+128)
  5076  02EA  0020               	movlb	0	; select bank0
  5077  02EB  0825               	movf	?___ftmul+1,w
  5078  02EC  0021               	movlb	1	; select bank1
  5079  02ED  00A4               	movwf	(_realRmsCurr+1)^(0+128)
  5080  02EE  0020               	movlb	0	; select bank0
  5081  02EF  0826               	movf	?___ftmul+2,w
  5082  02F0  0021               	movlb	1	; select bank1
  5083  02F1  00A5               	movwf	(_realRmsCurr+2)^(0+128)
  5084                           
  5085                           ;ADC.c: 195: realRmsCurr*=(float)1.024;
  5086  02F2  3012               	movlw	18
  5087  02F3  0020               	movlb	0	; select bank0
  5088  02F4  00A4               	movwf	___ftmul@f1
  5089  02F5  3083               	movlw	131
  5090  02F6  00A5               	movwf	___ftmul@f1+1
  5091  02F7  303F               	movlw	63
  5092  02F8  00A6               	movwf	___ftmul@f1+2
  5093  02F9  0021               	movlb	1	; select bank1
  5094  02FA  0823               	movf	_realRmsCurr^(0+128),w
  5095  02FB  0020               	movlb	0	; select bank0
  5096  02FC  00A7               	movwf	___ftmul@f2
  5097  02FD  0021               	movlb	1	; select bank1
  5098  02FE  0824               	movf	(_realRmsCurr+1)^(0+128),w
  5099  02FF  0020               	movlb	0	; select bank0
  5100  0300  00A8               	movwf	___ftmul@f2+1
  5101  0301  0021               	movlb	1	; select bank1
  5102  0302  0825               	movf	(_realRmsCurr+2)^(0+128),w
  5103  0303  0020               	movlb	0	; select bank0
  5104  0304  00A9               	movwf	___ftmul@f2+2
  5105  0305  3186  26E0  3180   	fcall	___ftmul
  5106  0308  0020               	movlb	0	; select bank0
  5107  0309  0824               	movf	?___ftmul,w
  5108  030A  0021               	movlb	1	; select bank1
  5109  030B  00A3               	movwf	_realRmsCurr^(0+128)
  5110  030C  0020               	movlb	0	; select bank0
  5111  030D  0825               	movf	?___ftmul+1,w
  5112  030E  0021               	movlb	1	; select bank1
  5113  030F  00A4               	movwf	(_realRmsCurr+1)^(0+128)
  5114  0310  0020               	movlb	0	; select bank0
  5115  0311  0826               	movf	?___ftmul+2,w
  5116  0312  0021               	movlb	1	; select bank1
  5117  0313  00A5               	movwf	(_realRmsCurr+2)^(0+128)
  5118                           
  5119                           ;ADC.c: 196: realRmsCurr*=(float)1.024;
  5120  0314  3012               	movlw	18
  5121  0315  0020               	movlb	0	; select bank0
  5122  0316  00A4               	movwf	___ftmul@f1
  5123  0317  3083               	movlw	131
  5124  0318  00A5               	movwf	___ftmul@f1+1
  5125  0319  303F               	movlw	63
  5126  031A  00A6               	movwf	___ftmul@f1+2
  5127  031B  0021               	movlb	1	; select bank1
  5128  031C  0823               	movf	_realRmsCurr^(0+128),w
  5129  031D  0020               	movlb	0	; select bank0
  5130  031E  00A7               	movwf	___ftmul@f2
  5131  031F  0021               	movlb	1	; select bank1
  5132  0320  0824               	movf	(_realRmsCurr+1)^(0+128),w
  5133  0321  0020               	movlb	0	; select bank0
  5134  0322  00A8               	movwf	___ftmul@f2+1
  5135  0323  0021               	movlb	1	; select bank1
  5136  0324  0825               	movf	(_realRmsCurr+2)^(0+128),w
  5137  0325  0020               	movlb	0	; select bank0
  5138  0326  00A9               	movwf	___ftmul@f2+2
  5139  0327  3186  26E0  3180   	fcall	___ftmul
  5140  032A  0020               	movlb	0	; select bank0
  5141  032B  0824               	movf	?___ftmul,w
  5142  032C  0021               	movlb	1	; select bank1
  5143  032D  00A3               	movwf	_realRmsCurr^(0+128)
  5144  032E  0020               	movlb	0	; select bank0
  5145  032F  0825               	movf	?___ftmul+1,w
  5146  0330  0021               	movlb	1	; select bank1
  5147  0331  00A4               	movwf	(_realRmsCurr+1)^(0+128)
  5148  0332  0020               	movlb	0	; select bank0
  5149  0333  0826               	movf	?___ftmul+2,w
  5150  0334  0021               	movlb	1	; select bank1
  5151  0335  00A5               	movwf	(_realRmsCurr+2)^(0+128)
  5152                           
  5153                           ;ADC.c: 197: realRmsCurr*=(float)2000;
  5154  0336  3000               	movlw	0
  5155  0337  0020               	movlb	0	; select bank0
  5156  0338  00A4               	movwf	___ftmul@f1
  5157  0339  30FA               	movlw	250
  5158  033A  00A5               	movwf	___ftmul@f1+1
  5159  033B  3044               	movlw	68
  5160  033C  00A6               	movwf	___ftmul@f1+2
  5161  033D  0021               	movlb	1	; select bank1
  5162  033E  0823               	movf	_realRmsCurr^(0+128),w
  5163  033F  0020               	movlb	0	; select bank0
  5164  0340  00A7               	movwf	___ftmul@f2
  5165  0341  0021               	movlb	1	; select bank1
  5166  0342  0824               	movf	(_realRmsCurr+1)^(0+128),w
  5167  0343  0020               	movlb	0	; select bank0
  5168  0344  00A8               	movwf	___ftmul@f2+1
  5169  0345  0021               	movlb	1	; select bank1
  5170  0346  0825               	movf	(_realRmsCurr+2)^(0+128),w
  5171  0347  0020               	movlb	0	; select bank0
  5172  0348  00A9               	movwf	___ftmul@f2+2
  5173  0349  3186  26E0  3180   	fcall	___ftmul
  5174  034C  0020               	movlb	0	; select bank0
  5175  034D  0824               	movf	?___ftmul,w
  5176  034E  0021               	movlb	1	; select bank1
  5177  034F  00A3               	movwf	_realRmsCurr^(0+128)
  5178  0350  0020               	movlb	0	; select bank0
  5179  0351  0825               	movf	?___ftmul+1,w
  5180  0352  0021               	movlb	1	; select bank1
  5181  0353  00A4               	movwf	(_realRmsCurr+1)^(0+128)
  5182  0354  0020               	movlb	0	; select bank0
  5183  0355  0826               	movf	?___ftmul+2,w
  5184  0356  0021               	movlb	1	; select bank1
  5185  0357  00A5               	movwf	(_realRmsCurr+2)^(0+128)
  5186                           
  5187                           ;ADC.c: 198: realRmsCurr*=(float)2000;
  5188  0358  3000               	movlw	0
  5189  0359  0020               	movlb	0	; select bank0
  5190  035A  00A4               	movwf	___ftmul@f1
  5191  035B  30FA               	movlw	250
  5192  035C  00A5               	movwf	___ftmul@f1+1
  5193  035D  3044               	movlw	68
  5194  035E  00A6               	movwf	___ftmul@f1+2
  5195  035F  0021               	movlb	1	; select bank1
  5196  0360  0823               	movf	_realRmsCurr^(0+128),w
  5197  0361  0020               	movlb	0	; select bank0
  5198  0362  00A7               	movwf	___ftmul@f2
  5199  0363  0021               	movlb	1	; select bank1
  5200  0364  0824               	movf	(_realRmsCurr+1)^(0+128),w
  5201  0365  0020               	movlb	0	; select bank0
  5202  0366  00A8               	movwf	___ftmul@f2+1
  5203  0367  0021               	movlb	1	; select bank1
  5204  0368  0825               	movf	(_realRmsCurr+2)^(0+128),w
  5205  0369  0020               	movlb	0	; select bank0
  5206  036A  00A9               	movwf	___ftmul@f2+2
  5207  036B  3186  26E0  3180   	fcall	___ftmul
  5208  036E  0020               	movlb	0	; select bank0
  5209  036F  0824               	movf	?___ftmul,w
  5210  0370  0021               	movlb	1	; select bank1
  5211  0371  00A3               	movwf	_realRmsCurr^(0+128)
  5212  0372  0020               	movlb	0	; select bank0
  5213  0373  0825               	movf	?___ftmul+1,w
  5214  0374  0021               	movlb	1	; select bank1
  5215  0375  00A4               	movwf	(_realRmsCurr+1)^(0+128)
  5216  0376  0020               	movlb	0	; select bank0
  5217  0377  0826               	movf	?___ftmul+2,w
  5218  0378  0021               	movlb	1	; select bank1
  5219  0379  00A5               	movwf	(_realRmsCurr+2)^(0+128)
  5220                           
  5221                           ;ADC.c: 199: realRmsCurr/=(float)1024;
  5222  037A  3000               	movlw	0
  5223  037B  0020               	movlb	0	; select bank0
  5224  037C  00C7               	movwf	___ftdiv@f2
  5225  037D  3080               	movlw	128
  5226  037E  00C8               	movwf	___ftdiv@f2+1
  5227  037F  3044               	movlw	68
  5228  0380  00C9               	movwf	___ftdiv@f2+2
  5229  0381  0021               	movlb	1	; select bank1
  5230  0382  0823               	movf	_realRmsCurr^(0+128),w
  5231  0383  0020               	movlb	0	; select bank0
  5232  0384  00CA               	movwf	___ftdiv@f1
  5233  0385  0021               	movlb	1	; select bank1
  5234  0386  0824               	movf	(_realRmsCurr+1)^(0+128),w
  5235  0387  0020               	movlb	0	; select bank0
  5236  0388  00CB               	movwf	___ftdiv@f1+1
  5237  0389  0021               	movlb	1	; select bank1
  5238  038A  0825               	movf	(_realRmsCurr+2)^(0+128),w
  5239  038B  0020               	movlb	0	; select bank0
  5240  038C  00CC               	movwf	___ftdiv@f1+2
  5241  038D  318F  2757  3180   	fcall	___ftdiv
  5242  0390  0020               	movlb	0	; select bank0
  5243  0391  0847               	movf	?___ftdiv,w
  5244  0392  0021               	movlb	1	; select bank1
  5245  0393  00A3               	movwf	_realRmsCurr^(0+128)
  5246  0394  0020               	movlb	0	; select bank0
  5247  0395  0848               	movf	?___ftdiv+1,w
  5248  0396  0021               	movlb	1	; select bank1
  5249  0397  00A4               	movwf	(_realRmsCurr+1)^(0+128)
  5250  0398  0020               	movlb	0	; select bank0
  5251  0399  0849               	movf	?___ftdiv+2,w
  5252  039A  0021               	movlb	1	; select bank1
  5253  039B  00A5               	movwf	(_realRmsCurr+2)^(0+128)
  5254                           
  5255                           ;ADC.c: 200: realRmsCurr/=(float)1024;
  5256  039C  3000               	movlw	0
  5257  039D  0020               	movlb	0	; select bank0
  5258  039E  00C7               	movwf	___ftdiv@f2
  5259  039F  3080               	movlw	128
  5260  03A0  00C8               	movwf	___ftdiv@f2+1
  5261  03A1  3044               	movlw	68
  5262  03A2  00C9               	movwf	___ftdiv@f2+2
  5263  03A3  0021               	movlb	1	; select bank1
  5264  03A4  0823               	movf	_realRmsCurr^(0+128),w
  5265  03A5  0020               	movlb	0	; select bank0
  5266  03A6  00CA               	movwf	___ftdiv@f1
  5267  03A7  0021               	movlb	1	; select bank1
  5268  03A8  0824               	movf	(_realRmsCurr+1)^(0+128),w
  5269  03A9  0020               	movlb	0	; select bank0
  5270  03AA  00CB               	movwf	___ftdiv@f1+1
  5271  03AB  0021               	movlb	1	; select bank1
  5272  03AC  0825               	movf	(_realRmsCurr+2)^(0+128),w
  5273  03AD  0020               	movlb	0	; select bank0
  5274  03AE  00CC               	movwf	___ftdiv@f1+2
  5275  03AF  318F  2757  3180   	fcall	___ftdiv
  5276  03B2  0020               	movlb	0	; select bank0
  5277  03B3  0847               	movf	?___ftdiv,w
  5278  03B4  0021               	movlb	1	; select bank1
  5279  03B5  00A3               	movwf	_realRmsCurr^(0+128)
  5280  03B6  0020               	movlb	0	; select bank0
  5281  03B7  0848               	movf	?___ftdiv+1,w
  5282  03B8  0021               	movlb	1	; select bank1
  5283  03B9  00A4               	movwf	(_realRmsCurr+1)^(0+128)
  5284  03BA  0020               	movlb	0	; select bank0
  5285  03BB  0849               	movf	?___ftdiv+2,w
  5286  03BC  0021               	movlb	1	; select bank1
  5287  03BD  00A5               	movwf	(_realRmsCurr+2)^(0+128)
  5288                           
  5289                           ;ADC.c: 201: realRmsCurr/=(float)33.2;
  5290  03BE  30CD               	movlw	205
  5291  03BF  0020               	movlb	0	; select bank0
  5292  03C0  00C7               	movwf	___ftdiv@f2
  5293  03C1  3004               	movlw	4
  5294  03C2  00C8               	movwf	___ftdiv@f2+1
  5295  03C3  3042               	movlw	66
  5296  03C4  00C9               	movwf	___ftdiv@f2+2
  5297  03C5  0021               	movlb	1	; select bank1
  5298  03C6  0823               	movf	_realRmsCurr^(0+128),w
  5299  03C7  0020               	movlb	0	; select bank0
  5300  03C8  00CA               	movwf	___ftdiv@f1
  5301  03C9  0021               	movlb	1	; select bank1
  5302  03CA  0824               	movf	(_realRmsCurr+1)^(0+128),w
  5303  03CB  0020               	movlb	0	; select bank0
  5304  03CC  00CB               	movwf	___ftdiv@f1+1
  5305  03CD  0021               	movlb	1	; select bank1
  5306  03CE  0825               	movf	(_realRmsCurr+2)^(0+128),w
  5307  03CF  0020               	movlb	0	; select bank0
  5308  03D0  00CC               	movwf	___ftdiv@f1+2
  5309  03D1  318F  2757  3180   	fcall	___ftdiv
  5310  03D4  0020               	movlb	0	; select bank0
  5311  03D5  0847               	movf	?___ftdiv,w
  5312  03D6  0021               	movlb	1	; select bank1
  5313  03D7  00A3               	movwf	_realRmsCurr^(0+128)
  5314  03D8  0020               	movlb	0	; select bank0
  5315  03D9  0848               	movf	?___ftdiv+1,w
  5316  03DA  0021               	movlb	1	; select bank1
  5317  03DB  00A4               	movwf	(_realRmsCurr+1)^(0+128)
  5318  03DC  0020               	movlb	0	; select bank0
  5319  03DD  0849               	movf	?___ftdiv+2,w
  5320  03DE  0021               	movlb	1	; select bank1
  5321  03DF  00A5               	movwf	(_realRmsCurr+2)^(0+128)
  5322                           
  5323                           ;ADC.c: 202: realRmsCurr/=(float)33.2;
  5324  03E0  30CD               	movlw	205
  5325  03E1  0020               	movlb	0	; select bank0
  5326  03E2  00C7               	movwf	___ftdiv@f2
  5327  03E3  3004               	movlw	4
  5328  03E4  00C8               	movwf	___ftdiv@f2+1
  5329  03E5  3042               	movlw	66
  5330  03E6  00C9               	movwf	___ftdiv@f2+2
  5331  03E7  0021               	movlb	1	; select bank1
  5332  03E8  0823               	movf	_realRmsCurr^(0+128),w
  5333  03E9  0020               	movlb	0	; select bank0
  5334  03EA  00CA               	movwf	___ftdiv@f1
  5335  03EB  0021               	movlb	1	; select bank1
  5336  03EC  0824               	movf	(_realRmsCurr+1)^(0+128),w
  5337  03ED  0020               	movlb	0	; select bank0
  5338  03EE  00CB               	movwf	___ftdiv@f1+1
  5339  03EF  0021               	movlb	1	; select bank1
  5340  03F0  0825               	movf	(_realRmsCurr+2)^(0+128),w
  5341  03F1  0020               	movlb	0	; select bank0
  5342  03F2  00CC               	movwf	___ftdiv@f1+2
  5343  03F3  318F  2757  3180   	fcall	___ftdiv
  5344  03F6  0020               	movlb	0	; select bank0
  5345  03F7  0847               	movf	?___ftdiv,w
  5346  03F8  0021               	movlb	1	; select bank1
  5347  03F9  00A3               	movwf	_realRmsCurr^(0+128)
  5348  03FA  0020               	movlb	0	; select bank0
  5349  03FB  0848               	movf	?___ftdiv+1,w
  5350  03FC  0021               	movlb	1	; select bank1
  5351  03FD  00A4               	movwf	(_realRmsCurr+1)^(0+128)
  5352  03FE  0020               	movlb	0	; select bank0
  5353  03FF  0849               	movf	?___ftdiv+2,w
  5354  0400  0021               	movlb	1	; select bank1
  5355  0401  00A5               	movwf	(_realRmsCurr+2)^(0+128)
  5356                           
  5357                           ;ADC.c: 203: realRmsCurr/=(float)(20);
  5358  0402  3000               	movlw	0
  5359  0403  0020               	movlb	0	; select bank0
  5360  0404  00C7               	movwf	___ftdiv@f2
  5361  0405  30A0               	movlw	160
  5362  0406  00C8               	movwf	___ftdiv@f2+1
  5363  0407  3041               	movlw	65
  5364  0408  00C9               	movwf	___ftdiv@f2+2
  5365  0409  0021               	movlb	1	; select bank1
  5366  040A  0823               	movf	_realRmsCurr^(0+128),w
  5367  040B  0020               	movlb	0	; select bank0
  5368  040C  00CA               	movwf	___ftdiv@f1
  5369  040D  0021               	movlb	1	; select bank1
  5370  040E  0824               	movf	(_realRmsCurr+1)^(0+128),w
  5371  040F  0020               	movlb	0	; select bank0
  5372  0410  00CB               	movwf	___ftdiv@f1+1
  5373  0411  0021               	movlb	1	; select bank1
  5374  0412  0825               	movf	(_realRmsCurr+2)^(0+128),w
  5375  0413  0020               	movlb	0	; select bank0
  5376  0414  00CC               	movwf	___ftdiv@f1+2
  5377  0415  318F  2757  3180   	fcall	___ftdiv
  5378  0418  0020               	movlb	0	; select bank0
  5379  0419  0847               	movf	?___ftdiv,w
  5380  041A  0021               	movlb	1	; select bank1
  5381  041B  00A3               	movwf	_realRmsCurr^(0+128)
  5382  041C  0020               	movlb	0	; select bank0
  5383  041D  0848               	movf	?___ftdiv+1,w
  5384  041E  0021               	movlb	1	; select bank1
  5385  041F  00A4               	movwf	(_realRmsCurr+1)^(0+128)
  5386  0420  0020               	movlb	0	; select bank0
  5387  0421  0849               	movf	?___ftdiv+2,w
  5388  0422  0021               	movlb	1	; select bank1
  5389  0423  00A5               	movwf	(_realRmsCurr+2)^(0+128)
  5390                           
  5391                           ;ADC.c: 204: realRmsCurr=sqrt(realRmsCurr);
  5392  0424  0823               	movf	_realRmsCurr^(0+128),w
  5393  0425  0020               	movlb	0	; select bank0
  5394  0426  00B4               	movwf	sqrt@y
  5395  0427  0021               	movlb	1	; select bank1
  5396  0428  0824               	movf	(_realRmsCurr+1)^(0+128),w
  5397  0429  0020               	movlb	0	; select bank0
  5398  042A  00B5               	movwf	sqrt@y+1
  5399  042B  0021               	movlb	1	; select bank1
  5400  042C  0825               	movf	(_realRmsCurr+2)^(0+128),w
  5401  042D  0020               	movlb	0	; select bank0
  5402  042E  00B6               	movwf	sqrt@y+2
  5403  042F  3185  2534         	fcall	_sqrt
  5404  0431  0020               	movlb	0	; select bank0
  5405  0432  0834               	movf	?_sqrt,w
  5406  0433  0021               	movlb	1	; select bank1
  5407  0434  00A3               	movwf	_realRmsCurr^(0+128)
  5408  0435  0020               	movlb	0	; select bank0
  5409  0436  0835               	movf	?_sqrt+1,w
  5410  0437  0021               	movlb	1	; select bank1
  5411  0438  00A4               	movwf	(_realRmsCurr+1)^(0+128)
  5412  0439  0020               	movlb	0	; select bank0
  5413  043A  0836               	movf	?_sqrt+2,w
  5414  043B  0021               	movlb	1	; select bank1
  5415  043C  00A5               	movwf	(_realRmsCurr+2)^(0+128)
  5416  043D  0008               	return
  5417  043E                     __end_of_ADCConv:	
  5418                           
  5419                           	psect	text16
  5420  0534                     __ptext16:	
  5421 ;; *************** function _sqrt *****************
  5422 ;; Defined at:
  5423 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\sqrt.c"
  5424 ;; Parameters:    Size  Location     Type
  5425 ;;  y               3   20[BANK0 ] unsigned char 
  5426 ;; Auto vars:     Size  Location     Type
  5427 ;;  x               3   36[BANK0 ] unsigned char 
  5428 ;;  q               3   33[BANK0 ] unsigned char 
  5429 ;;  z               3   29[BANK0 ] unsigned char 
  5430 ;;  og              3   26[BANK0 ] unsigned char 
  5431 ;;  i               1   32[BANK0 ] unsigned char 
  5432 ;; Return value:  Size  Location     Type
  5433 ;;                  3   20[BANK0 ] unsigned char 
  5434 ;; Registers used:
  5435 ;;		wreg, status,2, status,0, pclath, cstack
  5436 ;; Tracked objects:
  5437 ;;		On entry : 0/0
  5438 ;;		On exit  : 0/0
  5439 ;;		Unchanged: 0/0
  5440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5441 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5442 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5443 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5444 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5445 ;;Total ram usage:       19 bytes
  5446 ;; Hardware stack levels used:    1
  5447 ;; Hardware stack levels required when called:    5
  5448 ;; This function calls:
  5449 ;;		___ftge
  5450 ;;		___ftmul
  5451 ;;		___ftsub
  5452 ;; This function is called by:
  5453 ;;		_ADCConv
  5454 ;; This function uses a non-reentrant model
  5455 ;;
  5456                           
  5457                           
  5458                           ;psect for function _sqrt
  5459  0534                     _sqrt:	
  5460                           
  5461                           ;incstack = 0
  5462                           ; Regs used in _sqrt: [wreg+status,2+status,0+pclath+cstack]
  5463  0534  3000               	movlw	0
  5464  0535  00F1               	movwf	___ftge@ff1
  5465  0536  3000               	movlw	0
  5466  0537  00F2               	movwf	___ftge@ff1+1
  5467  0538  3000               	movlw	0
  5468  0539  00F3               	movwf	___ftge@ff1+2
  5469  053A  0020               	movlb	0	; select bank0
  5470  053B  0834               	movf	sqrt@y,w
  5471  053C  00F4               	movwf	___ftge@ff2
  5472  053D  0835               	movf	sqrt@y+1,w
  5473  053E  00F5               	movwf	___ftge@ff2+1
  5474  053F  0836               	movf	sqrt@y+2,w
  5475  0540  00F6               	movwf	___ftge@ff2+2
  5476  0541  318D  251F  3185   	fcall	___ftge
  5477  0544  1C03               	btfss	3,0
  5478  0545  2D65               	goto	l3604
  5479  0546  0020               	movlb	0	; select bank0
  5480  0547  0834               	movf	sqrt@y,w
  5481  0548  00F1               	movwf	___ftge@ff1
  5482  0549  0835               	movf	sqrt@y+1,w
  5483  054A  00F2               	movwf	___ftge@ff1+1
  5484  054B  0836               	movf	sqrt@y+2,w
  5485  054C  00F3               	movwf	___ftge@ff1+2
  5486  054D  3000               	movlw	0
  5487  054E  00F4               	movwf	___ftge@ff2
  5488  054F  3000               	movlw	0
  5489  0550  00F5               	movwf	___ftge@ff2+1
  5490  0551  3000               	movlw	0
  5491  0552  00F6               	movwf	___ftge@ff2+2
  5492  0553  318D  251F  3185   	fcall	___ftge
  5493  0556  1803               	btfsc	3,0
  5494  0557  2D5D               	goto	l1055
  5495  0558  3021               	movlw	33
  5496  0559  0021               	movlb	1	; select bank1
  5497  055A  00AB               	movwf	_errno^(0+128)
  5498  055B  3000               	movlw	0
  5499  055C  00AC               	movwf	(_errno^(0+128)+1)
  5500  055D                     l1055:	
  5501  055D  3000               	movlw	0
  5502  055E  0020               	movlb	0	; select bank0
  5503  055F  00B4               	movwf	?_sqrt
  5504  0560  3000               	movlw	0
  5505  0561  00B5               	movwf	?_sqrt+1
  5506  0562  3000               	movlw	0
  5507  0563  00B6               	movwf	?_sqrt+2
  5508  0564  0008               	return
  5509  0565                     l3604:	
  5510  0565  0020               	movlb	0	; select bank0
  5511  0566  0834               	movf	sqrt@y,w
  5512  0567  00BD               	movwf	sqrt@z
  5513  0568  0835               	movf	sqrt@y+1,w
  5514  0569  00BE               	movwf	sqrt@z+1
  5515  056A  0836               	movf	sqrt@y+2,w
  5516  056B  00BF               	movwf	sqrt@z+2
  5517  056C  0934               	comf	sqrt@y,w
  5518  056D  00B7               	movwf	??_sqrt
  5519  056E  0935               	comf	sqrt@y+1,w
  5520  056F  00B8               	movwf	??_sqrt+1
  5521  0570  0936               	comf	sqrt@y+2,w
  5522  0571  00B9               	movwf	??_sqrt+2
  5523  0572  0AB7               	incf	??_sqrt,f
  5524  0573  1903               	skipnz
  5525  0574  0AB8               	incf	??_sqrt+1,f
  5526  0575  1903               	skipnz
  5527  0576  0AB9               	incf	??_sqrt+2,f
  5528  0577  30C8               	movlw	200
  5529  0578  0737               	addwf	??_sqrt,w
  5530  0579  00C4               	movwf	sqrt@x
  5531  057A  306E               	movlw	110
  5532  057B  3D38               	addwfc	??_sqrt+1,w
  5533  057C  00C5               	movwf	sqrt@x+1
  5534  057D  30BE               	movlw	190
  5535  057E  3D39               	addwfc	??_sqrt+2,w
  5536  057F  00C6               	movwf	sqrt@x+2
  5537  0580  3001               	movlw	1
  5538  0581                     u3925:	
  5539  0581  36C6               	lsrf	sqrt@x+2,f
  5540  0582  0CC5               	rrf	sqrt@x+1,f
  5541  0583  0CC4               	rrf	sqrt@x,f
  5542  0584  0B89               	decfsz	9,f
  5543  0585  2D81               	goto	u3925
  5544  0586  3000               	movlw	0
  5545  0587  00B7               	movwf	??_sqrt
  5546  0588  3080               	movlw	128
  5547  0589  00B8               	movwf	??_sqrt+1
  5548  058A  3000               	movlw	0
  5549  058B  00B9               	movwf	??_sqrt+2
  5550  058C  0837               	movf	??_sqrt,w
  5551  058D  02BD               	subwf	sqrt@z,f
  5552  058E  0838               	movf	??_sqrt+1,w
  5553  058F  3BBE               	subwfb	sqrt@z+1,f
  5554  0590  0839               	movf	??_sqrt+2,w
  5555  0591  3BBF               	subwfb	sqrt@z+2,f
  5556  0592  3004               	movlw	4
  5557  0593  00B7               	movwf	??_sqrt
  5558  0594  0837               	movf	??_sqrt,w
  5559  0595  00C0               	movwf	sqrt@i
  5560  0596                     l1057:	
  5561  0596  0844               	movf	sqrt@x,w
  5562  0597  00BA               	movwf	sqrt@og
  5563  0598  0845               	movf	sqrt@x+1,w
  5564  0599  00BB               	movwf	sqrt@og+1
  5565  059A  0846               	movf	sqrt@x+2,w
  5566  059B  00BC               	movwf	sqrt@og+2
  5567  059C  083D               	movf	sqrt@z,w
  5568  059D  00A4               	movwf	___ftmul@f1
  5569  059E  083E               	movf	sqrt@z+1,w
  5570  059F  00A5               	movwf	___ftmul@f1+1
  5571  05A0  083F               	movf	sqrt@z+2,w
  5572  05A1  00A6               	movwf	___ftmul@f1+2
  5573  05A2  0844               	movf	sqrt@x,w
  5574  05A3  00A7               	movwf	___ftmul@f2
  5575  05A4  0845               	movf	sqrt@x+1,w
  5576  05A5  00A8               	movwf	___ftmul@f2+1
  5577  05A6  0846               	movf	sqrt@x+2,w
  5578  05A7  00A9               	movwf	___ftmul@f2+2
  5579  05A8  3186  26E0  3185   	fcall	___ftmul
  5580  05AB  0020               	movlb	0	; select bank0
  5581  05AC  0824               	movf	?___ftmul,w
  5582  05AD  00C1               	movwf	sqrt@q
  5583  05AE  0825               	movf	?___ftmul+1,w
  5584  05AF  00C2               	movwf	sqrt@q+1
  5585  05B0  0826               	movf	?___ftmul+2,w
  5586  05B1  00C3               	movwf	sqrt@q+2
  5587  05B2  0844               	movf	sqrt@x,w
  5588  05B3  00A4               	movwf	___ftmul@f1
  5589  05B4  0845               	movf	sqrt@x+1,w
  5590  05B5  00A5               	movwf	___ftmul@f1+1
  5591  05B6  0846               	movf	sqrt@x+2,w
  5592  05B7  00A6               	movwf	___ftmul@f1+2
  5593  05B8  0841               	movf	sqrt@q,w
  5594  05B9  00A7               	movwf	___ftmul@f2
  5595  05BA  0842               	movf	sqrt@q+1,w
  5596  05BB  00A8               	movwf	___ftmul@f2+1
  5597  05BC  0843               	movf	sqrt@q+2,w
  5598  05BD  00A9               	movwf	___ftmul@f2+2
  5599  05BE  3186  26E0  3185   	fcall	___ftmul
  5600  05C1  0020               	movlb	0	; select bank0
  5601  05C2  0824               	movf	?___ftmul,w
  5602  05C3  00C1               	movwf	sqrt@q
  5603  05C4  0825               	movf	?___ftmul+1,w
  5604  05C5  00C2               	movwf	sqrt@q+1
  5605  05C6  0826               	movf	?___ftmul+2,w
  5606  05C7  00C3               	movwf	sqrt@q+2
  5607  05C8  0844               	movf	sqrt@x,w
  5608  05C9  00A4               	movwf	___ftmul@f1
  5609  05CA  0845               	movf	sqrt@x+1,w
  5610  05CB  00A5               	movwf	___ftmul@f1+1
  5611  05CC  0846               	movf	sqrt@x+2,w
  5612  05CD  00A6               	movwf	___ftmul@f1+2
  5613  05CE  0841               	movf	sqrt@q,w
  5614  05CF  00A7               	movwf	___ftmul@f2
  5615  05D0  0842               	movf	sqrt@q+1,w
  5616  05D1  00A8               	movwf	___ftmul@f2+1
  5617  05D2  0843               	movf	sqrt@q+2,w
  5618  05D3  00A9               	movwf	___ftmul@f2+2
  5619  05D4  3186  26E0  3185   	fcall	___ftmul
  5620  05D7  0020               	movlb	0	; select bank0
  5621  05D8  0824               	movf	?___ftmul,w
  5622  05D9  00C1               	movwf	sqrt@q
  5623  05DA  0825               	movf	?___ftmul+1,w
  5624  05DB  00C2               	movwf	sqrt@q+1
  5625  05DC  0826               	movf	?___ftmul+2,w
  5626  05DD  00C3               	movwf	sqrt@q+2
  5627  05DE  3000               	movlw	0
  5628  05DF  00A4               	movwf	___ftmul@f1
  5629  05E0  30C0               	movlw	192
  5630  05E1  00A5               	movwf	___ftmul@f1+1
  5631  05E2  303F               	movlw	63
  5632  05E3  00A6               	movwf	___ftmul@f1+2
  5633  05E4  0844               	movf	sqrt@x,w
  5634  05E5  00A7               	movwf	___ftmul@f2
  5635  05E6  0845               	movf	sqrt@x+1,w
  5636  05E7  00A8               	movwf	___ftmul@f2+1
  5637  05E8  0846               	movf	sqrt@x+2,w
  5638  05E9  00A9               	movwf	___ftmul@f2+2
  5639  05EA  3186  26E0  3185   	fcall	___ftmul
  5640  05ED  0020               	movlb	0	; select bank0
  5641  05EE  0824               	movf	?___ftmul,w
  5642  05EF  00C4               	movwf	sqrt@x
  5643  05F0  0825               	movf	?___ftmul+1,w
  5644  05F1  00C5               	movwf	sqrt@x+1
  5645  05F2  0826               	movf	?___ftmul+2,w
  5646  05F3  00C6               	movwf	sqrt@x+2
  5647  05F4  0841               	movf	sqrt@q,w
  5648  05F5  00AA               	movwf	___ftsub@f2
  5649  05F6  0842               	movf	sqrt@q+1,w
  5650  05F7  00AB               	movwf	___ftsub@f2+1
  5651  05F8  0843               	movf	sqrt@q+2,w
  5652  05F9  00AC               	movwf	___ftsub@f2+2
  5653  05FA  0844               	movf	sqrt@x,w
  5654  05FB  00AD               	movwf	___ftsub@f1
  5655  05FC  0845               	movf	sqrt@x+1,w
  5656  05FD  00AE               	movwf	___ftsub@f1+1
  5657  05FE  0846               	movf	sqrt@x+2,w
  5658  05FF  00AF               	movwf	___ftsub@f1+2
  5659  0600  318A  2259  3185   	fcall	___ftsub
  5660  0603  0020               	movlb	0	; select bank0
  5661  0604  082A               	movf	?___ftsub,w
  5662  0605  00C4               	movwf	sqrt@x
  5663  0606  082B               	movf	?___ftsub+1,w
  5664  0607  00C5               	movwf	sqrt@x+1
  5665  0608  082C               	movf	?___ftsub+2,w
  5666  0609  00C6               	movwf	sqrt@x+2
  5667  060A  3001               	movlw	1
  5668  060B  02C0               	subwf	sqrt@i,f
  5669  060C  1D03               	btfss	3,2
  5670  060D  2D96               	goto	l1057
  5671  060E  0834               	movf	sqrt@y,w
  5672  060F  00A4               	movwf	___ftmul@f1
  5673  0610  0835               	movf	sqrt@y+1,w
  5674  0611  00A5               	movwf	___ftmul@f1+1
  5675  0612  0836               	movf	sqrt@y+2,w
  5676  0613  00A6               	movwf	___ftmul@f1+2
  5677  0614  0844               	movf	sqrt@x,w
  5678  0615  00A7               	movwf	___ftmul@f2
  5679  0616  0845               	movf	sqrt@x+1,w
  5680  0617  00A8               	movwf	___ftmul@f2+1
  5681  0618  0846               	movf	sqrt@x+2,w
  5682  0619  00A9               	movwf	___ftmul@f2+2
  5683  061A  3186  26E0         	fcall	___ftmul
  5684  061C  0020               	movlb	0	; select bank0
  5685  061D  0824               	movf	?___ftmul,w
  5686  061E  00B4               	movwf	?_sqrt
  5687  061F  0825               	movf	?___ftmul+1,w
  5688  0620  00B5               	movwf	?_sqrt+1
  5689  0621  0826               	movf	?___ftmul+2,w
  5690  0622  00B6               	movwf	?_sqrt+2
  5691  0623  0008               	return
  5692  0624                     __end_of_sqrt:	
  5693                           
  5694                           	psect	text17
  5695  0A59                     __ptext17:	
  5696 ;; *************** function ___ftsub *****************
  5697 ;; Defined at:
  5698 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftsub.c"
  5699 ;; Parameters:    Size  Location     Type
  5700 ;;  f2              3   10[BANK0 ] float 
  5701 ;;  f1              3   13[BANK0 ] float 
  5702 ;; Auto vars:     Size  Location     Type
  5703 ;;		None
  5704 ;; Return value:  Size  Location     Type
  5705 ;;                  3   10[BANK0 ] float 
  5706 ;; Registers used:
  5707 ;;		wreg, status,2, status,0, pclath, cstack
  5708 ;; Tracked objects:
  5709 ;;		On entry : 0/0
  5710 ;;		On exit  : 0/0
  5711 ;;		Unchanged: 0/0
  5712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5713 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5714 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5716 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5717 ;;Total ram usage:        6 bytes
  5718 ;; Hardware stack levels used:    1
  5719 ;; Hardware stack levels required when called:    4
  5720 ;; This function calls:
  5721 ;;		___ftadd
  5722 ;; This function is called by:
  5723 ;;		_sqrt
  5724 ;; This function uses a non-reentrant model
  5725 ;;
  5726                           
  5727                           
  5728                           ;psect for function ___ftsub
  5729  0A59                     ___ftsub:	
  5730                           
  5731                           ;incstack = 0
  5732                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  5733  0A59  0020               	movlb	0	; select bank0
  5734  0A5A  082C               	movf	___ftsub@f2+2,w
  5735  0A5B  042B               	iorwf	___ftsub@f2+1,w
  5736  0A5C  042A               	iorwf	___ftsub@f2,w
  5737  0A5D  1903               	skipnz
  5738  0A5E  2A61               	goto	l3592
  5739  0A5F  3080               	movlw	128
  5740  0A60  06AC               	xorwf	___ftsub@f2+2,f
  5741  0A61                     l3592:	
  5742  0A61  082D               	movf	___ftsub@f1,w
  5743  0A62  00A0               	movwf	___ftadd@f1
  5744  0A63  082E               	movf	___ftsub@f1+1,w
  5745  0A64  00A1               	movwf	___ftadd@f1+1
  5746  0A65  082F               	movf	___ftsub@f1+2,w
  5747  0A66  00A2               	movwf	___ftadd@f1+2
  5748  0A67  082A               	movf	___ftsub@f2,w
  5749  0A68  00A3               	movwf	___ftadd@f2
  5750  0A69  082B               	movf	___ftsub@f2+1,w
  5751  0A6A  00A4               	movwf	___ftadd@f2+1
  5752  0A6B  082C               	movf	___ftsub@f2+2,w
  5753  0A6C  00A5               	movwf	___ftadd@f2+2
  5754  0A6D  3184  243E         	fcall	___ftadd
  5755  0A6F  0020               	movlb	0	; select bank0
  5756  0A70  0820               	movf	?___ftadd,w
  5757  0A71  00AA               	movwf	?___ftsub
  5758  0A72  0821               	movf	?___ftadd+1,w
  5759  0A73  00AB               	movwf	?___ftsub+1
  5760  0A74  0822               	movf	?___ftadd+2,w
  5761  0A75  00AC               	movwf	?___ftsub+2
  5762  0A76  0008               	return
  5763  0A77                     __end_of___ftsub:	
  5764                           
  5765                           	psect	text18
  5766  043E                     __ptext18:	
  5767 ;; *************** function ___ftadd *****************
  5768 ;; Defined at:
  5769 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftadd.c"
  5770 ;; Parameters:    Size  Location     Type
  5771 ;;  f1              3    0[BANK0 ] float 
  5772 ;;  f2              3    3[BANK0 ] float 
  5773 ;; Auto vars:     Size  Location     Type
  5774 ;;  exp1            1   11[COMMON] unsigned char 
  5775 ;;  exp2            1   10[COMMON] unsigned char 
  5776 ;;  sign            1    9[COMMON] unsigned char 
  5777 ;; Return value:  Size  Location     Type
  5778 ;;                  3    0[BANK0 ] float 
  5779 ;; Registers used:
  5780 ;;		wreg, status,2, status,0, pclath, cstack
  5781 ;; Tracked objects:
  5782 ;;		On entry : 0/0
  5783 ;;		On exit  : 0/0
  5784 ;;		Unchanged: 0/0
  5785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5786 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5787 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5788 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5789 ;;      Totals:         3      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5790 ;;Total ram usage:       13 bytes
  5791 ;; Hardware stack levels used:    1
  5792 ;; Hardware stack levels required when called:    3
  5793 ;; This function calls:
  5794 ;;		___ftpack
  5795 ;; This function is called by:
  5796 ;;		___ftsub
  5797 ;; This function uses a non-reentrant model
  5798 ;;
  5799                           
  5800                           
  5801                           ;psect for function ___ftadd
  5802  043E                     ___ftadd:	
  5803                           
  5804                           ;incstack = 0
  5805                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  5806  043E  0020               	movlb	0	; select bank0
  5807  043F  0820               	movf	___ftadd@f1,w
  5808  0440  00A6               	movwf	??___ftadd
  5809  0441  0821               	movf	___ftadd@f1+1,w
  5810  0442  00A7               	movwf	??___ftadd+1
  5811  0443  0822               	movf	___ftadd@f1+2,w
  5812  0444  00A8               	movwf	??___ftadd+2
  5813  0445  1003               	clrc
  5814  0446  0D27               	rlf	??___ftadd+1,w
  5815  0447  0D28               	rlf	??___ftadd+2,w
  5816  0448  00A9               	movwf	??___ftadd+3
  5817  0449  0829               	movf	??___ftadd+3,w
  5818  044A  00FB               	movwf	___ftadd@exp1
  5819  044B  0823               	movf	___ftadd@f2,w
  5820  044C  00A6               	movwf	??___ftadd
  5821  044D  0824               	movf	___ftadd@f2+1,w
  5822  044E  00A7               	movwf	??___ftadd+1
  5823  044F  0825               	movf	___ftadd@f2+2,w
  5824  0450  00A8               	movwf	??___ftadd+2
  5825  0451  1003               	clrc
  5826  0452  0D27               	rlf	??___ftadd+1,w
  5827  0453  0D28               	rlf	??___ftadd+2,w
  5828  0454  00A9               	movwf	??___ftadd+3
  5829  0455  0829               	movf	??___ftadd+3,w
  5830  0456  00FA               	movwf	___ftadd@exp2
  5831  0457  087B               	movf	___ftadd@exp1,w
  5832  0458  1903               	btfsc	3,2
  5833  0459  2C66               	goto	l3422
  5834  045A  087A               	movf	___ftadd@exp2,w
  5835  045B  027B               	subwf	___ftadd@exp1,w
  5836  045C  1803               	skipnc
  5837  045D  2C6D               	goto	l3426
  5838  045E  037B               	decf	___ftadd@exp1,w
  5839  045F  3AFF               	xorlw	255
  5840  0460  077A               	addwf	___ftadd@exp2,w
  5841  0461  00A6               	movwf	??___ftadd
  5842  0462  3019               	movlw	25
  5843  0463  0226               	subwf	??___ftadd,w
  5844  0464  1C03               	skipc
  5845  0465  2C6D               	goto	l3426
  5846  0466                     l3422:	
  5847  0466  0823               	movf	___ftadd@f2,w
  5848  0467  00A0               	movwf	?___ftadd
  5849  0468  0824               	movf	___ftadd@f2+1,w
  5850  0469  00A1               	movwf	?___ftadd+1
  5851  046A  0825               	movf	___ftadd@f2+2,w
  5852  046B  00A2               	movwf	?___ftadd+2
  5853  046C  0008               	return
  5854  046D                     l3426:	
  5855  046D  087A               	movf	___ftadd@exp2,w
  5856  046E  1903               	btfsc	3,2
  5857  046F  0008               	return
  5858  0470  087B               	movf	___ftadd@exp1,w
  5859  0471  027A               	subwf	___ftadd@exp2,w
  5860  0472  1803               	skipnc
  5861  0473  2C7C               	goto	l3432
  5862  0474  037A               	decf	___ftadd@exp2,w
  5863  0475  3AFF               	xorlw	255
  5864  0476  077B               	addwf	___ftadd@exp1,w
  5865  0477  00A6               	movwf	??___ftadd
  5866  0478  3019               	movlw	25
  5867  0479  0226               	subwf	??___ftadd,w
  5868  047A  1803               	btfsc	3,0
  5869  047B  0008               	return
  5870  047C                     l3432:	
  5871  047C  3006               	movlw	6
  5872  047D  00A6               	movwf	??___ftadd
  5873  047E  0826               	movf	??___ftadd,w
  5874  047F  00F9               	movwf	___ftadd@sign
  5875  0480  1BA2               	btfsc	___ftadd@f1+2,7
  5876  0481  17F9               	bsf	___ftadd@sign,7
  5877  0482  1BA5               	btfsc	___ftadd@f2+2,7
  5878  0483  1779               	bsf	___ftadd@sign,6
  5879  0484  17A1               	bsf	___ftadd@f1+1,7
  5880  0485  30FF               	movlw	255
  5881  0486  05A0               	andwf	___ftadd@f1,f
  5882  0487  30FF               	movlw	255
  5883  0488  05A1               	andwf	___ftadd@f1+1,f
  5884  0489  3000               	movlw	0
  5885  048A  05A2               	andwf	___ftadd@f1+2,f
  5886  048B  17A4               	bsf	___ftadd@f2+1,7
  5887  048C  30FF               	movlw	255
  5888  048D  05A3               	andwf	___ftadd@f2,f
  5889  048E  30FF               	movlw	255
  5890  048F  05A4               	andwf	___ftadd@f2+1,f
  5891  0490  3000               	movlw	0
  5892  0491  05A5               	andwf	___ftadd@f2+2,f
  5893  0492  087A               	movf	___ftadd@exp2,w
  5894  0493  027B               	subwf	___ftadd@exp1,w
  5895  0494  1803               	skipnc
  5896  0495  2CB8               	goto	l3454
  5897  0496                     l3444:	
  5898  0496  3001               	movlw	1
  5899  0497                     u3595:	
  5900  0497  35A3               	lslf	___ftadd@f2,f
  5901  0498  0DA4               	rlf	___ftadd@f2+1,f
  5902  0499  0DA5               	rlf	___ftadd@f2+2,f
  5903  049A  0B89               	decfsz	9,f
  5904  049B  2C97               	goto	u3595
  5905  049C  3001               	movlw	1
  5906  049D  02FA               	subwf	___ftadd@exp2,f
  5907  049E  087A               	movf	___ftadd@exp2,w
  5908  049F  067B               	xorwf	___ftadd@exp1,w
  5909  04A0  1903               	skipnz
  5910  04A1  2CB3               	goto	l3452
  5911  04A2  3001               	movlw	1
  5912  04A3  02F9               	subwf	___ftadd@sign,f
  5913  04A4  0879               	movf	___ftadd@sign,w
  5914  04A5  3907               	andlw	7
  5915  04A6  1903               	btfsc	3,2
  5916  04A7  2CB3               	goto	l3452
  5917  04A8  2C96               	goto	l3444
  5918  04A9                     l3450:	
  5919  04A9  3001               	movlw	1
  5920  04AA                     u3625:	
  5921  04AA  36A2               	lsrf	___ftadd@f1+2,f
  5922  04AB  0CA1               	rrf	___ftadd@f1+1,f
  5923  04AC  0CA0               	rrf	___ftadd@f1,f
  5924  04AD  0B89               	decfsz	9,f
  5925  04AE  2CAA               	goto	u3625
  5926  04AF  3001               	movlw	1
  5927  04B0  00A6               	movwf	??___ftadd
  5928  04B1  0826               	movf	??___ftadd,w
  5929  04B2  07FB               	addwf	___ftadd@exp1,f
  5930  04B3                     l3452:	
  5931  04B3  087B               	movf	___ftadd@exp1,w
  5932  04B4  067A               	xorwf	___ftadd@exp2,w
  5933  04B5  1903               	btfsc	3,2
  5934  04B6  2CDD               	goto	l887
  5935  04B7  2CA9               	goto	l3450
  5936  04B8                     l3454:	
  5937  04B8  087B               	movf	___ftadd@exp1,w
  5938  04B9  027A               	subwf	___ftadd@exp2,w
  5939  04BA  1803               	skipnc
  5940  04BB  2CDD               	goto	l887
  5941  04BC                     l3456:	
  5942  04BC  3001               	movlw	1
  5943  04BD                     u3655:	
  5944  04BD  35A0               	lslf	___ftadd@f1,f
  5945  04BE  0DA1               	rlf	___ftadd@f1+1,f
  5946  04BF  0DA2               	rlf	___ftadd@f1+2,f
  5947  04C0  0B89               	decfsz	9,f
  5948  04C1  2CBD               	goto	u3655
  5949  04C2  3001               	movlw	1
  5950  04C3  02FB               	subwf	___ftadd@exp1,f
  5951  04C4  087A               	movf	___ftadd@exp2,w
  5952  04C5  067B               	xorwf	___ftadd@exp1,w
  5953  04C6  1903               	skipnz
  5954  04C7  2CD9               	goto	l3464
  5955  04C8  3001               	movlw	1
  5956  04C9  02F9               	subwf	___ftadd@sign,f
  5957  04CA  0879               	movf	___ftadd@sign,w
  5958  04CB  3907               	andlw	7
  5959  04CC  1903               	btfsc	3,2
  5960  04CD  2CD9               	goto	l3464
  5961  04CE  2CBC               	goto	l3456
  5962  04CF                     l3462:	
  5963  04CF  3001               	movlw	1
  5964  04D0                     u3685:	
  5965  04D0  36A5               	lsrf	___ftadd@f2+2,f
  5966  04D1  0CA4               	rrf	___ftadd@f2+1,f
  5967  04D2  0CA3               	rrf	___ftadd@f2,f
  5968  04D3  0B89               	decfsz	9,f
  5969  04D4  2CD0               	goto	u3685
  5970  04D5  3001               	movlw	1
  5971  04D6  00A6               	movwf	??___ftadd
  5972  04D7  0826               	movf	??___ftadd,w
  5973  04D8  07FA               	addwf	___ftadd@exp2,f
  5974  04D9                     l3464:	
  5975  04D9  087B               	movf	___ftadd@exp1,w
  5976  04DA  067A               	xorwf	___ftadd@exp2,w
  5977  04DB  1D03               	skipz
  5978  04DC  2CCF               	goto	l3462
  5979  04DD                     l887:	
  5980  04DD  1FF9               	btfss	___ftadd@sign,7
  5981  04DE  2CEF               	goto	l3468
  5982  04DF  30FF               	movlw	255
  5983  04E0  06A0               	xorwf	___ftadd@f1,f
  5984  04E1  30FF               	movlw	255
  5985  04E2  06A1               	xorwf	___ftadd@f1+1,f
  5986  04E3  30FF               	movlw	255
  5987  04E4  06A2               	xorwf	___ftadd@f1+2,f
  5988  04E5  3001               	movlw	1
  5989  04E6  07A0               	addwf	___ftadd@f1,f
  5990  04E7  3000               	movlw	0
  5991  04E8  1803               	skipnc
  5992  04E9  3001               	movlw	1
  5993  04EA  07A1               	addwf	___ftadd@f1+1,f
  5994  04EB  3000               	movlw	0
  5995  04EC  1803               	skipnc
  5996  04ED  3001               	movlw	1
  5997  04EE  07A2               	addwf	___ftadd@f1+2,f
  5998  04EF                     l3468:	
  5999  04EF  1F79               	btfss	___ftadd@sign,6
  6000  04F0  2D01               	goto	l3472
  6001  04F1  30FF               	movlw	255
  6002  04F2  06A3               	xorwf	___ftadd@f2,f
  6003  04F3  30FF               	movlw	255
  6004  04F4  06A4               	xorwf	___ftadd@f2+1,f
  6005  04F5  30FF               	movlw	255
  6006  04F6  06A5               	xorwf	___ftadd@f2+2,f
  6007  04F7  3001               	movlw	1
  6008  04F8  07A3               	addwf	___ftadd@f2,f
  6009  04F9  3000               	movlw	0
  6010  04FA  1803               	skipnc
  6011  04FB  3001               	movlw	1
  6012  04FC  07A4               	addwf	___ftadd@f2+1,f
  6013  04FD  3000               	movlw	0
  6014  04FE  1803               	skipnc
  6015  04FF  3001               	movlw	1
  6016  0500  07A5               	addwf	___ftadd@f2+2,f
  6017  0501                     l3472:	
  6018  0501  01F9               	clrf	___ftadd@sign
  6019  0502  0820               	movf	___ftadd@f1,w
  6020  0503  07A3               	addwf	___ftadd@f2,f
  6021  0504  0821               	movf	___ftadd@f1+1,w
  6022  0505  3DA4               	addwfc	___ftadd@f2+1,f
  6023  0506  0822               	movf	___ftadd@f1+2,w
  6024  0507  3DA5               	addwfc	___ftadd@f2+2,f
  6025  0508  1FA5               	btfss	___ftadd@f2+2,7
  6026  0509  2D1C               	goto	l3482
  6027  050A  30FF               	movlw	255
  6028  050B  06A3               	xorwf	___ftadd@f2,f
  6029  050C  30FF               	movlw	255
  6030  050D  06A4               	xorwf	___ftadd@f2+1,f
  6031  050E  30FF               	movlw	255
  6032  050F  06A5               	xorwf	___ftadd@f2+2,f
  6033  0510  3001               	movlw	1
  6034  0511  07A3               	addwf	___ftadd@f2,f
  6035  0512  3000               	movlw	0
  6036  0513  1803               	skipnc
  6037  0514  3001               	movlw	1
  6038  0515  07A4               	addwf	___ftadd@f2+1,f
  6039  0516  3000               	movlw	0
  6040  0517  1803               	skipnc
  6041  0518  3001               	movlw	1
  6042  0519  07A5               	addwf	___ftadd@f2+2,f
  6043  051A  01F9               	clrf	___ftadd@sign
  6044  051B  0AF9               	incf	___ftadd@sign,f
  6045  051C                     l3482:	
  6046  051C  0823               	movf	___ftadd@f2,w
  6047  051D  00F1               	movwf	___ftpack@arg
  6048  051E  0824               	movf	___ftadd@f2+1,w
  6049  051F  00F2               	movwf	___ftpack@arg+1
  6050  0520  0825               	movf	___ftadd@f2+2,w
  6051  0521  00F3               	movwf	___ftpack@arg+2
  6052  0522  087B               	movf	___ftadd@exp1,w
  6053  0523  00A6               	movwf	??___ftadd
  6054  0524  0826               	movf	??___ftadd,w
  6055  0525  00F4               	movwf	___ftpack@exp
  6056  0526  0879               	movf	___ftadd@sign,w
  6057  0527  00A7               	movwf	??___ftadd+1
  6058  0528  0827               	movf	??___ftadd+1,w
  6059  0529  00F5               	movwf	___ftpack@sign
  6060  052A  3187  2794         	fcall	___ftpack
  6061  052C  0871               	movf	?___ftpack,w
  6062  052D  0020               	movlb	0	; select bank0
  6063  052E  00A0               	movwf	?___ftadd
  6064  052F  0872               	movf	?___ftpack+1,w
  6065  0530  00A1               	movwf	?___ftadd+1
  6066  0531  0873               	movf	?___ftpack+2,w
  6067  0532  00A2               	movwf	?___ftadd+2
  6068  0533  0008               	return
  6069  0534                     __end_of___ftadd:	
  6070                           
  6071                           	psect	text19
  6072  06E0                     __ptext19:	
  6073 ;; *************** function ___ftmul *****************
  6074 ;; Defined at:
  6075 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  6076 ;; Parameters:    Size  Location     Type
  6077 ;;  f1              3    4[BANK0 ] float 
  6078 ;;  f2              3    7[BANK0 ] float 
  6079 ;; Auto vars:     Size  Location     Type
  6080 ;;  f3_as_produc    3   15[BANK0 ] unsigned um
  6081 ;;  sign            1   19[BANK0 ] unsigned char 
  6082 ;;  cntr            1   18[BANK0 ] unsigned char 
  6083 ;;  exp             1   14[BANK0 ] unsigned char 
  6084 ;; Return value:  Size  Location     Type
  6085 ;;                  3    4[BANK0 ] float 
  6086 ;; Registers used:
  6087 ;;		wreg, status,2, status,0, pclath, cstack
  6088 ;; Tracked objects:
  6089 ;;		On entry : 0/0
  6090 ;;		On exit  : 0/0
  6091 ;;		Unchanged: 0/0
  6092 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6093 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6094 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6095 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6096 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6097 ;;Total ram usage:       16 bytes
  6098 ;; Hardware stack levels used:    1
  6099 ;; Hardware stack levels required when called:    3
  6100 ;; This function calls:
  6101 ;;		___ftpack
  6102 ;; This function is called by:
  6103 ;;		_ADCConv
  6104 ;;		_sqrt
  6105 ;; This function uses a non-reentrant model
  6106 ;;
  6107                           
  6108                           
  6109                           ;psect for function ___ftmul
  6110  06E0                     ___ftmul:	
  6111                           
  6112                           ;incstack = 0
  6113                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  6114  06E0  0020               	movlb	0	; select bank0
  6115  06E1  0824               	movf	___ftmul@f1,w
  6116  06E2  00AA               	movwf	??___ftmul
  6117  06E3  0825               	movf	___ftmul@f1+1,w
  6118  06E4  00AB               	movwf	??___ftmul+1
  6119  06E5  0826               	movf	___ftmul@f1+2,w
  6120  06E6  00AC               	movwf	??___ftmul+2
  6121  06E7  1003               	clrc
  6122  06E8  0D2B               	rlf	??___ftmul+1,w
  6123  06E9  0D2C               	rlf	??___ftmul+2,w
  6124  06EA  00AD               	movwf	??___ftmul+3
  6125  06EB  082D               	movf	??___ftmul+3,w
  6126  06EC  00AE               	movwf	___ftmul@exp
  6127  06ED  082E               	movf	___ftmul@exp,w
  6128  06EE  1D03               	btfss	3,2
  6129  06EF  2EF7               	goto	l3544
  6130  06F0  3000               	movlw	0
  6131  06F1  00A4               	movwf	?___ftmul
  6132  06F2  3000               	movlw	0
  6133  06F3  00A5               	movwf	?___ftmul+1
  6134  06F4  3000               	movlw	0
  6135  06F5  00A6               	movwf	?___ftmul+2
  6136  06F6  0008               	return
  6137  06F7                     l3544:	
  6138  06F7  0827               	movf	___ftmul@f2,w
  6139  06F8  00AA               	movwf	??___ftmul
  6140  06F9  0828               	movf	___ftmul@f2+1,w
  6141  06FA  00AB               	movwf	??___ftmul+1
  6142  06FB  0829               	movf	___ftmul@f2+2,w
  6143  06FC  00AC               	movwf	??___ftmul+2
  6144  06FD  1003               	clrc
  6145  06FE  0D2B               	rlf	??___ftmul+1,w
  6146  06FF  0D2C               	rlf	??___ftmul+2,w
  6147  0700  00AD               	movwf	??___ftmul+3
  6148  0701  082D               	movf	??___ftmul+3,w
  6149  0702  00B3               	movwf	___ftmul@sign
  6150  0703  0833               	movf	___ftmul@sign,w
  6151  0704  1D03               	btfss	3,2
  6152  0705  2F0D               	goto	l3550
  6153  0706  3000               	movlw	0
  6154  0707  00A4               	movwf	?___ftmul
  6155  0708  3000               	movlw	0
  6156  0709  00A5               	movwf	?___ftmul+1
  6157  070A  3000               	movlw	0
  6158  070B  00A6               	movwf	?___ftmul+2
  6159  070C  0008               	return
  6160  070D                     l3550:	
  6161  070D  0833               	movf	___ftmul@sign,w
  6162  070E  3E7B               	addlw	123
  6163  070F  00AA               	movwf	??___ftmul
  6164  0710  082A               	movf	??___ftmul,w
  6165  0711  07AE               	addwf	___ftmul@exp,f
  6166  0712  0824               	movf	___ftmul@f1,w
  6167  0713  00AA               	movwf	??___ftmul
  6168  0714  0825               	movf	___ftmul@f1+1,w
  6169  0715  00AB               	movwf	??___ftmul+1
  6170  0716  0826               	movf	___ftmul@f1+2,w
  6171  0717  00AC               	movwf	??___ftmul+2
  6172  0718  3010               	movlw	16
  6173  0719                     u3795:	
  6174  0719  36AC               	lsrf	??___ftmul+2,f
  6175  071A  0CAB               	rrf	??___ftmul+1,f
  6176  071B  0CAA               	rrf	??___ftmul,f
  6177  071C  0B89               	decfsz	9,f
  6178  071D  2F19               	goto	u3795
  6179  071E  082A               	movf	??___ftmul,w
  6180  071F  00AD               	movwf	??___ftmul+3
  6181  0720  082D               	movf	??___ftmul+3,w
  6182  0721  00B3               	movwf	___ftmul@sign
  6183  0722  0827               	movf	___ftmul@f2,w
  6184  0723  00AA               	movwf	??___ftmul
  6185  0724  0828               	movf	___ftmul@f2+1,w
  6186  0725  00AB               	movwf	??___ftmul+1
  6187  0726  0829               	movf	___ftmul@f2+2,w
  6188  0727  00AC               	movwf	??___ftmul+2
  6189  0728  3010               	movlw	16
  6190  0729                     u3805:	
  6191  0729  36AC               	lsrf	??___ftmul+2,f
  6192  072A  0CAB               	rrf	??___ftmul+1,f
  6193  072B  0CAA               	rrf	??___ftmul,f
  6194  072C  0B89               	decfsz	9,f
  6195  072D  2F29               	goto	u3805
  6196  072E  082A               	movf	??___ftmul,w
  6197  072F  00AD               	movwf	??___ftmul+3
  6198  0730  082D               	movf	??___ftmul+3,w
  6199  0731  06B3               	xorwf	___ftmul@sign,f
  6200  0732  3080               	movlw	128
  6201  0733  00AA               	movwf	??___ftmul
  6202  0734  082A               	movf	??___ftmul,w
  6203  0735  05B3               	andwf	___ftmul@sign,f
  6204  0736  17A5               	bsf	___ftmul@f1+1,7
  6205  0737  17A8               	bsf	___ftmul@f2+1,7
  6206  0738  30FF               	movlw	255
  6207  0739  05A7               	andwf	___ftmul@f2,f
  6208  073A  30FF               	movlw	255
  6209  073B  05A8               	andwf	___ftmul@f2+1,f
  6210  073C  3000               	movlw	0
  6211  073D  05A9               	andwf	___ftmul@f2+2,f
  6212  073E  3000               	movlw	0
  6213  073F  00AF               	movwf	___ftmul@f3_as_product
  6214  0740  3000               	movlw	0
  6215  0741  00B0               	movwf	___ftmul@f3_as_product+1
  6216  0742  3000               	movlw	0
  6217  0743  00B1               	movwf	___ftmul@f3_as_product+2
  6218  0744  3007               	movlw	7
  6219  0745  00AA               	movwf	??___ftmul
  6220  0746  082A               	movf	??___ftmul,w
  6221  0747  00B2               	movwf	___ftmul@cntr
  6222  0748                     l3562:	
  6223  0748  1C24               	btfss	___ftmul@f1,0
  6224  0749  2F50               	goto	l3566
  6225  074A  0827               	movf	___ftmul@f2,w
  6226  074B  07AF               	addwf	___ftmul@f3_as_product,f
  6227  074C  0828               	movf	___ftmul@f2+1,w
  6228  074D  3DB0               	addwfc	___ftmul@f3_as_product+1,f
  6229  074E  0829               	movf	___ftmul@f2+2,w
  6230  074F  3DB1               	addwfc	___ftmul@f3_as_product+2,f
  6231  0750                     l3566:	
  6232  0750  3001               	movlw	1
  6233  0751                     u3825:	
  6234  0751  36A6               	lsrf	___ftmul@f1+2,f
  6235  0752  0CA5               	rrf	___ftmul@f1+1,f
  6236  0753  0CA4               	rrf	___ftmul@f1,f
  6237  0754  0B89               	decfsz	9,f
  6238  0755  2F51               	goto	u3825
  6239  0756  3001               	movlw	1
  6240  0757                     u3835:	
  6241  0757  35A7               	lslf	___ftmul@f2,f
  6242  0758  0DA8               	rlf	___ftmul@f2+1,f
  6243  0759  0DA9               	rlf	___ftmul@f2+2,f
  6244  075A  0B89               	decfsz	9,f
  6245  075B  2F57               	goto	u3835
  6246  075C  3001               	movlw	1
  6247  075D  02B2               	subwf	___ftmul@cntr,f
  6248  075E  1D03               	btfss	3,2
  6249  075F  2F48               	goto	l3562
  6250  0760  3009               	movlw	9
  6251  0761  00AA               	movwf	??___ftmul
  6252  0762  082A               	movf	??___ftmul,w
  6253  0763  00B2               	movwf	___ftmul@cntr
  6254  0764                     l3574:	
  6255  0764  1C24               	btfss	___ftmul@f1,0
  6256  0765  2F6C               	goto	l3578
  6257  0766  0827               	movf	___ftmul@f2,w
  6258  0767  07AF               	addwf	___ftmul@f3_as_product,f
  6259  0768  0828               	movf	___ftmul@f2+1,w
  6260  0769  3DB0               	addwfc	___ftmul@f3_as_product+1,f
  6261  076A  0829               	movf	___ftmul@f2+2,w
  6262  076B  3DB1               	addwfc	___ftmul@f3_as_product+2,f
  6263  076C                     l3578:	
  6264  076C  3001               	movlw	1
  6265  076D                     u3865:	
  6266  076D  36A6               	lsrf	___ftmul@f1+2,f
  6267  076E  0CA5               	rrf	___ftmul@f1+1,f
  6268  076F  0CA4               	rrf	___ftmul@f1,f
  6269  0770  0B89               	decfsz	9,f
  6270  0771  2F6D               	goto	u3865
  6271  0772  3001               	movlw	1
  6272  0773                     u3875:	
  6273  0773  36B1               	lsrf	___ftmul@f3_as_product+2,f
  6274  0774  0CB0               	rrf	___ftmul@f3_as_product+1,f
  6275  0775  0CAF               	rrf	___ftmul@f3_as_product,f
  6276  0776  0B89               	decfsz	9,f
  6277  0777  2F73               	goto	u3875
  6278  0778  3001               	movlw	1
  6279  0779  02B2               	subwf	___ftmul@cntr,f
  6280  077A  1D03               	btfss	3,2
  6281  077B  2F64               	goto	l3574
  6282  077C  082F               	movf	___ftmul@f3_as_product,w
  6283  077D  00F1               	movwf	___ftpack@arg
  6284  077E  0830               	movf	___ftmul@f3_as_product+1,w
  6285  077F  00F2               	movwf	___ftpack@arg+1
  6286  0780  0831               	movf	___ftmul@f3_as_product+2,w
  6287  0781  00F3               	movwf	___ftpack@arg+2
  6288  0782  082E               	movf	___ftmul@exp,w
  6289  0783  00AA               	movwf	??___ftmul
  6290  0784  082A               	movf	??___ftmul,w
  6291  0785  00F4               	movwf	___ftpack@exp
  6292  0786  0833               	movf	___ftmul@sign,w
  6293  0787  00AB               	movwf	??___ftmul+1
  6294  0788  082B               	movf	??___ftmul+1,w
  6295  0789  00F5               	movwf	___ftpack@sign
  6296  078A  3187  2794         	fcall	___ftpack
  6297  078C  0871               	movf	?___ftpack,w
  6298  078D  0020               	movlb	0	; select bank0
  6299  078E  00A4               	movwf	?___ftmul
  6300  078F  0872               	movf	?___ftpack+1,w
  6301  0790  00A5               	movwf	?___ftmul+1
  6302  0791  0873               	movf	?___ftpack+2,w
  6303  0792  00A6               	movwf	?___ftmul+2
  6304  0793  0008               	return
  6305  0794                     __end_of___ftmul:	
  6306                           
  6307                           	psect	text20
  6308  0D1F                     __ptext20:	
  6309 ;; *************** function ___ftge *****************
  6310 ;; Defined at:
  6311 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
  6312 ;; Parameters:    Size  Location     Type
  6313 ;;  ff1             3    1[COMMON] float 
  6314 ;;  ff2             3    4[COMMON] float 
  6315 ;; Auto vars:     Size  Location     Type
  6316 ;;		None
  6317 ;; Return value:  Size  Location     Type
  6318 ;;		None               void
  6319 ;; Registers used:
  6320 ;;		wreg, status,2, status,0
  6321 ;; Tracked objects:
  6322 ;;		On entry : 0/0
  6323 ;;		On exit  : 0/0
  6324 ;;		Unchanged: 0/0
  6325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6326 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6328 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6329 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6330 ;;Total ram usage:        9 bytes
  6331 ;; Hardware stack levels used:    1
  6332 ;; Hardware stack levels required when called:    2
  6333 ;; This function calls:
  6334 ;;		Nothing
  6335 ;; This function is called by:
  6336 ;;		_sqrt
  6337 ;; This function uses a non-reentrant model
  6338 ;;
  6339                           
  6340                           
  6341                           ;psect for function ___ftge
  6342  0D1F                     ___ftge:	
  6343                           
  6344                           ;incstack = 0
  6345                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  6346  0D1F  1FF3               	btfss	___ftge@ff1+2,7
  6347  0D20  2D35               	goto	l3522
  6348  0D21  0971               	comf	___ftge@ff1,w
  6349  0D22  00F7               	movwf	??___ftge
  6350  0D23  0972               	comf	___ftge@ff1+1,w
  6351  0D24  00F8               	movwf	??___ftge+1
  6352  0D25  0973               	comf	___ftge@ff1+2,w
  6353  0D26  00F9               	movwf	??___ftge+2
  6354  0D27  0AF7               	incf	??___ftge,f
  6355  0D28  1903               	skipnz
  6356  0D29  0AF8               	incf	??___ftge+1,f
  6357  0D2A  1903               	skipnz
  6358  0D2B  0AF9               	incf	??___ftge+2,f
  6359  0D2C  3000               	movlw	0
  6360  0D2D  0777               	addwf	??___ftge,w
  6361  0D2E  00F1               	movwf	___ftge@ff1
  6362  0D2F  3000               	movlw	0
  6363  0D30  3D78               	addwfc	??___ftge+1,w
  6364  0D31  00F2               	movwf	___ftge@ff1+1
  6365  0D32  3080               	movlw	128
  6366  0D33  3D79               	addwfc	??___ftge+2,w
  6367  0D34  00F3               	movwf	___ftge@ff1+2
  6368  0D35                     l3522:	
  6369  0D35  1FF6               	btfss	___ftge@ff2+2,7
  6370  0D36  2D4B               	goto	l3526
  6371  0D37  0974               	comf	___ftge@ff2,w
  6372  0D38  00F7               	movwf	??___ftge
  6373  0D39  0975               	comf	___ftge@ff2+1,w
  6374  0D3A  00F8               	movwf	??___ftge+1
  6375  0D3B  0976               	comf	___ftge@ff2+2,w
  6376  0D3C  00F9               	movwf	??___ftge+2
  6377  0D3D  0AF7               	incf	??___ftge,f
  6378  0D3E  1903               	skipnz
  6379  0D3F  0AF8               	incf	??___ftge+1,f
  6380  0D40  1903               	skipnz
  6381  0D41  0AF9               	incf	??___ftge+2,f
  6382  0D42  3000               	movlw	0
  6383  0D43  0777               	addwf	??___ftge,w
  6384  0D44  00F4               	movwf	___ftge@ff2
  6385  0D45  3000               	movlw	0
  6386  0D46  3D78               	addwfc	??___ftge+1,w
  6387  0D47  00F5               	movwf	___ftge@ff2+1
  6388  0D48  3080               	movlw	128
  6389  0D49  3D79               	addwfc	??___ftge+2,w
  6390  0D4A  00F6               	movwf	___ftge@ff2+2
  6391  0D4B                     l3526:	
  6392  0D4B  3080               	movlw	128
  6393  0D4C  06F3               	xorwf	___ftge@ff1+2,f
  6394  0D4D  3080               	movlw	128
  6395  0D4E  06F6               	xorwf	___ftge@ff2+2,f
  6396  0D4F  0876               	movf	___ftge@ff2+2,w
  6397  0D50  0273               	subwf	___ftge@ff1+2,w
  6398  0D51  1D03               	skipz
  6399  0D52  0008               	return
  6400  0D53  0875               	movf	___ftge@ff2+1,w
  6401  0D54  0272               	subwf	___ftge@ff1+1,w
  6402  0D55  1D03               	skipz
  6403  0D56  0008               	return
  6404  0D57  0874               	movf	___ftge@ff2,w
  6405  0D58  0271               	subwf	___ftge@ff1,w
  6406  0D59  0008               	return
  6407  0D5A                     __end_of___ftge:	
  6408                           
  6409                           	psect	text21
  6410  0958                     __ptext21:	
  6411 ;; *************** function ___lwtoft *****************
  6412 ;; Defined at:
  6413 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwtoft.c"
  6414 ;; Parameters:    Size  Location     Type
  6415 ;;  c               2    9[COMMON] unsigned int 
  6416 ;; Auto vars:     Size  Location     Type
  6417 ;;		None
  6418 ;; Return value:  Size  Location     Type
  6419 ;;                  3    9[COMMON] float 
  6420 ;; Registers used:
  6421 ;;		wreg, status,2, status,0, pclath, cstack
  6422 ;; Tracked objects:
  6423 ;;		On entry : 0/0
  6424 ;;		On exit  : 0/0
  6425 ;;		Unchanged: 0/0
  6426 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6427 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6428 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6429 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6430 ;;      Totals:         3       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6431 ;;Total ram usage:        4 bytes
  6432 ;; Hardware stack levels used:    1
  6433 ;; Hardware stack levels required when called:    3
  6434 ;; This function calls:
  6435 ;;		___ftpack
  6436 ;; This function is called by:
  6437 ;;		_ADCConv
  6438 ;; This function uses a non-reentrant model
  6439 ;;
  6440                           
  6441                           
  6442                           ;psect for function ___lwtoft
  6443  0958                     ___lwtoft:	
  6444                           
  6445                           ;incstack = 0
  6446                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  6447  0958  0879               	movf	___lwtoft@c,w
  6448  0959  00F1               	movwf	___ftpack@arg
  6449  095A  087A               	movf	___lwtoft@c+1,w
  6450  095B  00F2               	movwf	___ftpack@arg+1
  6451  095C  01F3               	clrf	___ftpack@arg+2
  6452  095D  308E               	movlw	142
  6453  095E  0020               	movlb	0	; select bank0
  6454  095F  00A0               	movwf	??___lwtoft
  6455  0960  0820               	movf	??___lwtoft,w
  6456  0961  00F4               	movwf	___ftpack@exp
  6457  0962  01F5               	clrf	___ftpack@sign
  6458  0963  3187  2794         	fcall	___ftpack
  6459  0965  0871               	movf	?___ftpack,w
  6460  0966  00F9               	movwf	?___lwtoft
  6461  0967  0872               	movf	?___ftpack+1,w
  6462  0968  00FA               	movwf	?___lwtoft+1
  6463  0969  0873               	movf	?___ftpack+2,w
  6464  096A  00FB               	movwf	?___lwtoft+2
  6465  096B  0008               	return
  6466  096C                     __end_of___lwtoft:	
  6467                           
  6468                           	psect	text22
  6469  0CEB                     __ptext22:	
  6470 ;; *************** function ___lwdiv *****************
  6471 ;; Defined at:
  6472 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  6473 ;; Parameters:    Size  Location     Type
  6474 ;;  divisor         2    1[COMMON] unsigned int 
  6475 ;;  dividend        2    3[COMMON] unsigned int 
  6476 ;; Auto vars:     Size  Location     Type
  6477 ;;  quotient        2    7[COMMON] unsigned int 
  6478 ;;  counter         1    6[COMMON] unsigned char 
  6479 ;; Return value:  Size  Location     Type
  6480 ;;                  2    1[COMMON] unsigned int 
  6481 ;; Registers used:
  6482 ;;		wreg, status,2, status,0
  6483 ;; Tracked objects:
  6484 ;;		On entry : 0/0
  6485 ;;		On exit  : 0/0
  6486 ;;		Unchanged: 0/0
  6487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6488 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6489 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6490 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6491 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6492 ;;Total ram usage:        8 bytes
  6493 ;; Hardware stack levels used:    1
  6494 ;; Hardware stack levels required when called:    2
  6495 ;; This function calls:
  6496 ;;		Nothing
  6497 ;; This function is called by:
  6498 ;;		_ADCConv
  6499 ;; This function uses a non-reentrant model
  6500 ;;
  6501                           
  6502                           
  6503                           ;psect for function ___lwdiv
  6504  0CEB                     ___lwdiv:	
  6505                           
  6506                           ;incstack = 0
  6507                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6508  0CEB  01F7               	clrf	___lwdiv@quotient
  6509  0CEC  01F8               	clrf	___lwdiv@quotient+1
  6510  0CED  0871               	movf	___lwdiv@divisor,w
  6511  0CEE  0472               	iorwf	___lwdiv@divisor+1,w
  6512  0CEF  1903               	btfsc	3,2
  6513  0CF0  2D1A               	goto	l3756
  6514  0CF1  01F6               	clrf	___lwdiv@counter
  6515  0CF2  0AF6               	incf	___lwdiv@counter,f
  6516  0CF3                     l3744:	
  6517  0CF3  1BF2               	btfsc	___lwdiv@divisor+1,7
  6518  0CF4  2CFF               	goto	l3746
  6519  0CF5  3001               	movlw	1
  6520  0CF6                     u4195:	
  6521  0CF6  35F1               	lslf	___lwdiv@divisor,f
  6522  0CF7  0DF2               	rlf	___lwdiv@divisor+1,f
  6523  0CF8  0B89               	decfsz	9,f
  6524  0CF9  2CF6               	goto	u4195
  6525  0CFA  3001               	movlw	1
  6526  0CFB  00F5               	movwf	??___lwdiv
  6527  0CFC  0875               	movf	??___lwdiv,w
  6528  0CFD  07F6               	addwf	___lwdiv@counter,f
  6529  0CFE  2CF3               	goto	l3744
  6530  0CFF                     l3746:	
  6531  0CFF  3001               	movlw	1
  6532  0D00                     u4215:	
  6533  0D00  35F7               	lslf	___lwdiv@quotient,f
  6534  0D01  0DF8               	rlf	___lwdiv@quotient+1,f
  6535  0D02  0B89               	decfsz	9,f
  6536  0D03  2D00               	goto	u4215
  6537  0D04  0872               	movf	___lwdiv@divisor+1,w
  6538  0D05  0274               	subwf	___lwdiv@dividend+1,w
  6539  0D06  1D03               	skipz
  6540  0D07  2D0A               	goto	u4225
  6541  0D08  0871               	movf	___lwdiv@divisor,w
  6542  0D09  0273               	subwf	___lwdiv@dividend,w
  6543  0D0A                     u4225:	
  6544  0D0A  1C03               	skipc
  6545  0D0B  2D11               	goto	l3752
  6546  0D0C  0871               	movf	___lwdiv@divisor,w
  6547  0D0D  02F3               	subwf	___lwdiv@dividend,f
  6548  0D0E  0872               	movf	___lwdiv@divisor+1,w
  6549  0D0F  3BF4               	subwfb	___lwdiv@dividend+1,f
  6550  0D10  1477               	bsf	___lwdiv@quotient,0
  6551  0D11                     l3752:	
  6552  0D11  3001               	movlw	1
  6553  0D12                     u4235:	
  6554  0D12  36F2               	lsrf	___lwdiv@divisor+1,f
  6555  0D13  0CF1               	rrf	___lwdiv@divisor,f
  6556  0D14  0B89               	decfsz	9,f
  6557  0D15  2D12               	goto	u4235
  6558  0D16  3001               	movlw	1
  6559  0D17  02F6               	subwf	___lwdiv@counter,f
  6560  0D18  1D03               	btfss	3,2
  6561  0D19  2CFF               	goto	l3746
  6562  0D1A                     l3756:	
  6563  0D1A  0878               	movf	___lwdiv@quotient+1,w
  6564  0D1B  00F2               	movwf	?___lwdiv+1
  6565  0D1C  0877               	movf	___lwdiv@quotient,w
  6566  0D1D  00F1               	movwf	?___lwdiv
  6567  0D1E  0008               	return
  6568  0D1F                     __end_of___lwdiv:	
  6569                           
  6570                           	psect	text23
  6571  0CB9                     __ptext23:	
  6572 ;; *************** function ___lmul *****************
  6573 ;; Defined at:
  6574 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul32.c"
  6575 ;; Parameters:    Size  Location     Type
  6576 ;;  multiplier      4    1[COMMON] unsigned long 
  6577 ;;  multiplicand    4    5[COMMON] unsigned long 
  6578 ;; Auto vars:     Size  Location     Type
  6579 ;;  product         4    0[BANK0 ] unsigned long 
  6580 ;; Return value:  Size  Location     Type
  6581 ;;                  4    1[COMMON] unsigned long 
  6582 ;; Registers used:
  6583 ;;		wreg, status,2, status,0
  6584 ;; Tracked objects:
  6585 ;;		On entry : 0/0
  6586 ;;		On exit  : 0/0
  6587 ;;		Unchanged: 0/0
  6588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6589 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6590 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6592 ;;      Totals:         8       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6593 ;;Total ram usage:       12 bytes
  6594 ;; Hardware stack levels used:    1
  6595 ;; Hardware stack levels required when called:    2
  6596 ;; This function calls:
  6597 ;;		Nothing
  6598 ;; This function is called by:
  6599 ;;		_ADCConv
  6600 ;; This function uses a non-reentrant model
  6601 ;;
  6602                           
  6603                           
  6604                           ;psect for function ___lmul
  6605  0CB9                     ___lmul:	
  6606                           
  6607                           ;incstack = 0
  6608                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  6609  0CB9  3000               	movlw	0
  6610  0CBA  0020               	movlb	0	; select bank0
  6611  0CBB  00A3               	movwf	___lmul@product+3
  6612  0CBC  3000               	movlw	0
  6613  0CBD  00A2               	movwf	___lmul@product+2
  6614  0CBE  3000               	movlw	0
  6615  0CBF  00A1               	movwf	___lmul@product+1
  6616  0CC0  3000               	movlw	0
  6617  0CC1  00A0               	movwf	___lmul@product
  6618  0CC2                     l3646:	
  6619  0CC2  1C71               	btfss	___lmul@multiplier,0
  6620  0CC3  2CCD               	goto	l3650
  6621  0CC4  0875               	movf	___lmul@multiplicand,w
  6622  0CC5  0020               	movlb	0	; select bank0
  6623  0CC6  07A0               	addwf	___lmul@product,f
  6624  0CC7  0876               	movf	___lmul@multiplicand+1,w
  6625  0CC8  3DA1               	addwfc	___lmul@product+1,f
  6626  0CC9  0877               	movf	___lmul@multiplicand+2,w
  6627  0CCA  3DA2               	addwfc	___lmul@product+2,f
  6628  0CCB  0878               	movf	___lmul@multiplicand+3,w
  6629  0CCC  3DA3               	addwfc	___lmul@product+3,f
  6630  0CCD                     l3650:	
  6631  0CCD  3001               	movlw	1
  6632  0CCE                     u3985:	
  6633  0CCE  35F5               	lslf	___lmul@multiplicand,f
  6634  0CCF  0DF6               	rlf	___lmul@multiplicand+1,f
  6635  0CD0  0DF7               	rlf	___lmul@multiplicand+2,f
  6636  0CD1  0DF8               	rlf	___lmul@multiplicand+3,f
  6637  0CD2  0B89               	decfsz	9,f
  6638  0CD3  2CCE               	goto	u3985
  6639  0CD4  3001               	movlw	1
  6640  0CD5                     u3995:	
  6641  0CD5  36F4               	lsrf	___lmul@multiplier+3,f
  6642  0CD6  0CF3               	rrf	___lmul@multiplier+2,f
  6643  0CD7  0CF2               	rrf	___lmul@multiplier+1,f
  6644  0CD8  0CF1               	rrf	___lmul@multiplier,f
  6645  0CD9  0B89               	decfsz	9,f
  6646  0CDA  2CD5               	goto	u3995
  6647  0CDB  0874               	movf	___lmul@multiplier+3,w
  6648  0CDC  0473               	iorwf	___lmul@multiplier+2,w
  6649  0CDD  0472               	iorwf	___lmul@multiplier+1,w
  6650  0CDE  0471               	iorwf	___lmul@multiplier,w
  6651  0CDF  1D03               	skipz
  6652  0CE0  2CC2               	goto	l3646
  6653  0CE1  0020               	movlb	0	; select bank0
  6654  0CE2  0823               	movf	___lmul@product+3,w
  6655  0CE3  00F4               	movwf	?___lmul+3
  6656  0CE4  0822               	movf	___lmul@product+2,w
  6657  0CE5  00F3               	movwf	?___lmul+2
  6658  0CE6  0821               	movf	___lmul@product+1,w
  6659  0CE7  00F2               	movwf	?___lmul+1
  6660  0CE8  0820               	movf	___lmul@product,w
  6661  0CE9  00F1               	movwf	?___lmul
  6662  0CEA  0008               	return
  6663  0CEB                     __end_of___lmul:	
  6664                           
  6665                           	psect	text24
  6666  0BD0                     __ptext24:	
  6667 ;; *************** function ___lltoft *****************
  6668 ;; Defined at:
  6669 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lltoft.c"
  6670 ;; Parameters:    Size  Location     Type
  6671 ;;  c               4    0[BANK0 ] unsigned long 
  6672 ;; Auto vars:     Size  Location     Type
  6673 ;;  exp             1   10[COMMON] unsigned char 
  6674 ;; Return value:  Size  Location     Type
  6675 ;;                  3    0[BANK0 ] float 
  6676 ;; Registers used:
  6677 ;;		wreg, status,2, status,0, pclath, cstack
  6678 ;; Tracked objects:
  6679 ;;		On entry : 0/0
  6680 ;;		On exit  : 0/0
  6681 ;;		Unchanged: 0/0
  6682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6683 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6684 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6685 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6686 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6687 ;;Total ram usage:        6 bytes
  6688 ;; Hardware stack levels used:    1
  6689 ;; Hardware stack levels required when called:    3
  6690 ;; This function calls:
  6691 ;;		___ftpack
  6692 ;; This function is called by:
  6693 ;;		_ADCConv
  6694 ;; This function uses a non-reentrant model
  6695 ;;
  6696                           
  6697                           
  6698                           ;psect for function ___lltoft
  6699  0BD0                     ___lltoft:	
  6700                           
  6701                           ;incstack = 0
  6702                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  6703  0BD0  308E               	movlw	142
  6704  0BD1  00F9               	movwf	??___lltoft
  6705  0BD2  0879               	movf	??___lltoft,w
  6706  0BD3  00FA               	movwf	___lltoft@exp
  6707  0BD4                     l3728:	
  6708  0BD4  30FF               	movlw	255
  6709  0BD5  0020               	movlb	0	; select bank0
  6710  0BD6  0523               	andwf	___lltoft@c+3,w
  6711  0BD7  1903               	btfsc	3,2
  6712  0BD8  2BE6               	goto	l3730
  6713  0BD9  3001               	movlw	1
  6714  0BDA                     u4165:	
  6715  0BDA  0020               	movlb	0	; select bank0
  6716  0BDB  36A3               	lsrf	___lltoft@c+3,f
  6717  0BDC  0CA2               	rrf	___lltoft@c+2,f
  6718  0BDD  0CA1               	rrf	___lltoft@c+1,f
  6719  0BDE  0CA0               	rrf	___lltoft@c,f
  6720  0BDF  0B89               	decfsz	9,f
  6721  0BE0  2BDA               	goto	u4165
  6722  0BE1  3001               	movlw	1
  6723  0BE2  00F9               	movwf	??___lltoft
  6724  0BE3  0879               	movf	??___lltoft,w
  6725  0BE4  07FA               	addwf	___lltoft@exp,f
  6726  0BE5  2BD4               	goto	l3728
  6727  0BE6                     l3730:	
  6728  0BE6  0820               	movf	___lltoft@c,w
  6729  0BE7  00F1               	movwf	___ftpack@arg
  6730  0BE8  0821               	movf	___lltoft@c+1,w
  6731  0BE9  00F2               	movwf	___ftpack@arg+1
  6732  0BEA  0822               	movf	___lltoft@c+2,w
  6733  0BEB  00F3               	movwf	___ftpack@arg+2
  6734  0BEC  087A               	movf	___lltoft@exp,w
  6735  0BED  00F9               	movwf	??___lltoft
  6736  0BEE  0879               	movf	??___lltoft,w
  6737  0BEF  00F4               	movwf	___ftpack@exp
  6738  0BF0  01F5               	clrf	___ftpack@sign
  6739  0BF1  3187  2794         	fcall	___ftpack
  6740  0BF3  0871               	movf	?___ftpack,w
  6741  0BF4  0020               	movlb	0	; select bank0
  6742  0BF5  00A0               	movwf	?___lltoft
  6743  0BF6  0872               	movf	?___ftpack+1,w
  6744  0BF7  00A1               	movwf	?___lltoft+1
  6745  0BF8  0873               	movf	?___ftpack+2,w
  6746  0BF9  00A2               	movwf	?___lltoft+2
  6747  0BFA  0008               	return
  6748  0BFB                     __end_of___lltoft:	
  6749                           
  6750                           	psect	text25
  6751  0DE5                     __ptext25:	
  6752 ;; *************** function ___lldiv *****************
  6753 ;; Defined at:
  6754 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
  6755 ;; Parameters:    Size  Location     Type
  6756 ;;  divisor         4    1[COMMON] unsigned long 
  6757 ;;  dividend        4    5[COMMON] unsigned long 
  6758 ;; Auto vars:     Size  Location     Type
  6759 ;;  quotient        4    0[BANK0 ] unsigned long 
  6760 ;;  counter         1    4[BANK0 ] unsigned char 
  6761 ;; Return value:  Size  Location     Type
  6762 ;;                  4    1[COMMON] unsigned long 
  6763 ;; Registers used:
  6764 ;;		wreg, status,2, status,0
  6765 ;; Tracked objects:
  6766 ;;		On entry : 0/0
  6767 ;;		On exit  : 0/0
  6768 ;;		Unchanged: 0/0
  6769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6770 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6771 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6772 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6773 ;;      Totals:         9       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6774 ;;Total ram usage:       14 bytes
  6775 ;; Hardware stack levels used:    1
  6776 ;; Hardware stack levels required when called:    2
  6777 ;; This function calls:
  6778 ;;		Nothing
  6779 ;; This function is called by:
  6780 ;;		_ADCConv
  6781 ;; This function uses a non-reentrant model
  6782 ;;
  6783                           
  6784                           
  6785                           ;psect for function ___lldiv
  6786  0DE5                     ___lldiv:	
  6787                           
  6788                           ;incstack = 0
  6789                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  6790  0DE5  3000               	movlw	0
  6791  0DE6  0020               	movlb	0	; select bank0
  6792  0DE7  00A3               	movwf	___lldiv@quotient+3
  6793  0DE8  3000               	movlw	0
  6794  0DE9  00A2               	movwf	___lldiv@quotient+2
  6795  0DEA  3000               	movlw	0
  6796  0DEB  00A1               	movwf	___lldiv@quotient+1
  6797  0DEC  3000               	movlw	0
  6798  0DED  00A0               	movwf	___lldiv@quotient
  6799  0DEE  0874               	movf	___lldiv@divisor+3,w
  6800  0DEF  0473               	iorwf	___lldiv@divisor+2,w
  6801  0DF0  0472               	iorwf	___lldiv@divisor+1,w
  6802  0DF1  0471               	iorwf	___lldiv@divisor,w
  6803  0DF2  1903               	skipnz
  6804  0DF3  2E2F               	goto	l3720
  6805  0DF4  01A4               	clrf	___lldiv@counter
  6806  0DF5  0AA4               	incf	___lldiv@counter,f
  6807  0DF6                     l3706:	
  6808  0DF6  1BF4               	btfsc	___lldiv@divisor+3,7
  6809  0DF7  2E04               	goto	l3708
  6810  0DF8  3001               	movlw	1
  6811  0DF9                     u4105:	
  6812  0DF9  35F1               	lslf	___lldiv@divisor,f
  6813  0DFA  0DF2               	rlf	___lldiv@divisor+1,f
  6814  0DFB  0DF3               	rlf	___lldiv@divisor+2,f
  6815  0DFC  0DF4               	rlf	___lldiv@divisor+3,f
  6816  0DFD  0B89               	decfsz	9,f
  6817  0DFE  2DF9               	goto	u4105
  6818  0DFF  3001               	movlw	1
  6819  0E00  00F9               	movwf	??___lldiv
  6820  0E01  0879               	movf	??___lldiv,w
  6821  0E02  07A4               	addwf	___lldiv@counter,f
  6822  0E03  2DF6               	goto	l3706
  6823  0E04                     l3708:	
  6824  0E04  3001               	movlw	1
  6825  0E05                     u4125:	
  6826  0E05  35A0               	lslf	___lldiv@quotient,f
  6827  0E06  0DA1               	rlf	___lldiv@quotient+1,f
  6828  0E07  0DA2               	rlf	___lldiv@quotient+2,f
  6829  0E08  0DA3               	rlf	___lldiv@quotient+3,f
  6830  0E09  0B89               	decfsz	9,f
  6831  0E0A  2E05               	goto	u4125
  6832  0E0B  0874               	movf	___lldiv@divisor+3,w
  6833  0E0C  0278               	subwf	___lldiv@dividend+3,w
  6834  0E0D  1D03               	skipz
  6835  0E0E  2E19               	goto	u4135
  6836  0E0F  0873               	movf	___lldiv@divisor+2,w
  6837  0E10  0277               	subwf	___lldiv@dividend+2,w
  6838  0E11  1D03               	skipz
  6839  0E12  2E19               	goto	u4135
  6840  0E13  0872               	movf	___lldiv@divisor+1,w
  6841  0E14  0276               	subwf	___lldiv@dividend+1,w
  6842  0E15  1D03               	skipz
  6843  0E16  2E19               	goto	u4135
  6844  0E17  0871               	movf	___lldiv@divisor,w
  6845  0E18  0275               	subwf	___lldiv@dividend,w
  6846  0E19                     u4135:	
  6847  0E19  1C03               	skipc
  6848  0E1A  2E24               	goto	l3716
  6849  0E1B  0871               	movf	___lldiv@divisor,w
  6850  0E1C  02F5               	subwf	___lldiv@dividend,f
  6851  0E1D  0872               	movf	___lldiv@divisor+1,w
  6852  0E1E  3BF6               	subwfb	___lldiv@dividend+1,f
  6853  0E1F  0873               	movf	___lldiv@divisor+2,w
  6854  0E20  3BF7               	subwfb	___lldiv@dividend+2,f
  6855  0E21  0874               	movf	___lldiv@divisor+3,w
  6856  0E22  3BF8               	subwfb	___lldiv@dividend+3,f
  6857  0E23  1420               	bsf	___lldiv@quotient,0
  6858  0E24                     l3716:	
  6859  0E24  3001               	movlw	1
  6860  0E25                     u4145:	
  6861  0E25  36F4               	lsrf	___lldiv@divisor+3,f
  6862  0E26  0CF3               	rrf	___lldiv@divisor+2,f
  6863  0E27  0CF2               	rrf	___lldiv@divisor+1,f
  6864  0E28  0CF1               	rrf	___lldiv@divisor,f
  6865  0E29  0B89               	decfsz	9,f
  6866  0E2A  2E25               	goto	u4145
  6867  0E2B  3001               	movlw	1
  6868  0E2C  02A4               	subwf	___lldiv@counter,f
  6869  0E2D  1D03               	btfss	3,2
  6870  0E2E  2E04               	goto	l3708
  6871  0E2F                     l3720:	
  6872  0E2F  0823               	movf	___lldiv@quotient+3,w
  6873  0E30  00F4               	movwf	?___lldiv+3
  6874  0E31  0822               	movf	___lldiv@quotient+2,w
  6875  0E32  00F3               	movwf	?___lldiv+2
  6876  0E33  0821               	movf	___lldiv@quotient+1,w
  6877  0E34  00F2               	movwf	?___lldiv+1
  6878  0E35  0820               	movf	___lldiv@quotient,w
  6879  0E36  00F1               	movwf	?___lldiv
  6880  0E37  0008               	return
  6881  0E38                     __end_of___lldiv:	
  6882                           
  6883                           	psect	text26
  6884  0F57                     __ptext26:	
  6885 ;; *************** function ___ftdiv *****************
  6886 ;; Defined at:
  6887 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  6888 ;; Parameters:    Size  Location     Type
  6889 ;;  f2              3   39[BANK0 ] float 
  6890 ;;  f1              3   42[BANK0 ] float 
  6891 ;; Auto vars:     Size  Location     Type
  6892 ;;  f3              3   50[BANK0 ] float 
  6893 ;;  sign            1   54[BANK0 ] unsigned char 
  6894 ;;  exp             1   53[BANK0 ] unsigned char 
  6895 ;;  cntr            1   49[BANK0 ] unsigned char 
  6896 ;; Return value:  Size  Location     Type
  6897 ;;                  3   39[BANK0 ] float 
  6898 ;; Registers used:
  6899 ;;		wreg, status,2, status,0, pclath, cstack
  6900 ;; Tracked objects:
  6901 ;;		On entry : 0/0
  6902 ;;		On exit  : 0/0
  6903 ;;		Unchanged: 0/0
  6904 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6905 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6906 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6907 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6908 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6909 ;;Total ram usage:       16 bytes
  6910 ;; Hardware stack levels used:    1
  6911 ;; Hardware stack levels required when called:    3
  6912 ;; This function calls:
  6913 ;;		___ftpack
  6914 ;; This function is called by:
  6915 ;;		_ADCConv
  6916 ;; This function uses a non-reentrant model
  6917 ;;
  6918                           
  6919                           
  6920                           ;psect for function ___ftdiv
  6921  0F57                     ___ftdiv:	
  6922                           
  6923                           ;incstack = 0
  6924                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  6925  0F57  0020               	movlb	0	; select bank0
  6926  0F58  084A               	movf	___ftdiv@f1,w
  6927  0F59  00CD               	movwf	??___ftdiv
  6928  0F5A  084B               	movf	___ftdiv@f1+1,w
  6929  0F5B  00CE               	movwf	??___ftdiv+1
  6930  0F5C  084C               	movf	___ftdiv@f1+2,w
  6931  0F5D  00CF               	movwf	??___ftdiv+2
  6932  0F5E  1003               	clrc
  6933  0F5F  0D4E               	rlf	??___ftdiv+1,w
  6934  0F60  0D4F               	rlf	??___ftdiv+2,w
  6935  0F61  00D0               	movwf	??___ftdiv+3
  6936  0F62  0850               	movf	??___ftdiv+3,w
  6937  0F63  00D5               	movwf	___ftdiv@exp
  6938  0F64  0855               	movf	___ftdiv@exp,w
  6939  0F65  1D03               	btfss	3,2
  6940  0F66  2F6E               	goto	l3664
  6941  0F67  3000               	movlw	0
  6942  0F68  00C7               	movwf	?___ftdiv
  6943  0F69  3000               	movlw	0
  6944  0F6A  00C8               	movwf	?___ftdiv+1
  6945  0F6B  3000               	movlw	0
  6946  0F6C  00C9               	movwf	?___ftdiv+2
  6947  0F6D  0008               	return
  6948  0F6E                     l3664:	
  6949  0F6E  0847               	movf	___ftdiv@f2,w
  6950  0F6F  00CD               	movwf	??___ftdiv
  6951  0F70  0848               	movf	___ftdiv@f2+1,w
  6952  0F71  00CE               	movwf	??___ftdiv+1
  6953  0F72  0849               	movf	___ftdiv@f2+2,w
  6954  0F73  00CF               	movwf	??___ftdiv+2
  6955  0F74  1003               	clrc
  6956  0F75  0D4E               	rlf	??___ftdiv+1,w
  6957  0F76  0D4F               	rlf	??___ftdiv+2,w
  6958  0F77  00D0               	movwf	??___ftdiv+3
  6959  0F78  0850               	movf	??___ftdiv+3,w
  6960  0F79  00D6               	movwf	___ftdiv@sign
  6961  0F7A  0856               	movf	___ftdiv@sign,w
  6962  0F7B  1D03               	btfss	3,2
  6963  0F7C  2F84               	goto	l3670
  6964  0F7D  3000               	movlw	0
  6965  0F7E  00C7               	movwf	?___ftdiv
  6966  0F7F  3000               	movlw	0
  6967  0F80  00C8               	movwf	?___ftdiv+1
  6968  0F81  3000               	movlw	0
  6969  0F82  00C9               	movwf	?___ftdiv+2
  6970  0F83  0008               	return
  6971  0F84                     l3670:	
  6972  0F84  3000               	movlw	0
  6973  0F85  00D2               	movwf	___ftdiv@f3
  6974  0F86  3000               	movlw	0
  6975  0F87  00D3               	movwf	___ftdiv@f3+1
  6976  0F88  3000               	movlw	0
  6977  0F89  00D4               	movwf	___ftdiv@f3+2
  6978  0F8A  3089               	movlw	137
  6979  0F8B  0756               	addwf	___ftdiv@sign,w
  6980  0F8C  00CD               	movwf	??___ftdiv
  6981  0F8D  084D               	movf	??___ftdiv,w
  6982  0F8E  02D5               	subwf	___ftdiv@exp,f
  6983  0F8F  084A               	movf	___ftdiv@f1,w
  6984  0F90  00CD               	movwf	??___ftdiv
  6985  0F91  084B               	movf	___ftdiv@f1+1,w
  6986  0F92  00CE               	movwf	??___ftdiv+1
  6987  0F93  084C               	movf	___ftdiv@f1+2,w
  6988  0F94  00CF               	movwf	??___ftdiv+2
  6989  0F95  3010               	movlw	16
  6990  0F96                     u4035:	
  6991  0F96  36CF               	lsrf	??___ftdiv+2,f
  6992  0F97  0CCE               	rrf	??___ftdiv+1,f
  6993  0F98  0CCD               	rrf	??___ftdiv,f
  6994  0F99  0B89               	decfsz	9,f
  6995  0F9A  2F96               	goto	u4035
  6996  0F9B  084D               	movf	??___ftdiv,w
  6997  0F9C  00D0               	movwf	??___ftdiv+3
  6998  0F9D  0850               	movf	??___ftdiv+3,w
  6999  0F9E  00D6               	movwf	___ftdiv@sign
  7000  0F9F  0847               	movf	___ftdiv@f2,w
  7001  0FA0  00CD               	movwf	??___ftdiv
  7002  0FA1  0848               	movf	___ftdiv@f2+1,w
  7003  0FA2  00CE               	movwf	??___ftdiv+1
  7004  0FA3  0849               	movf	___ftdiv@f2+2,w
  7005  0FA4  00CF               	movwf	??___ftdiv+2
  7006  0FA5  3010               	movlw	16
  7007  0FA6                     u4045:	
  7008  0FA6  36CF               	lsrf	??___ftdiv+2,f
  7009  0FA7  0CCE               	rrf	??___ftdiv+1,f
  7010  0FA8  0CCD               	rrf	??___ftdiv,f
  7011  0FA9  0B89               	decfsz	9,f
  7012  0FAA  2FA6               	goto	u4045
  7013  0FAB  084D               	movf	??___ftdiv,w
  7014  0FAC  00D0               	movwf	??___ftdiv+3
  7015  0FAD  0850               	movf	??___ftdiv+3,w
  7016  0FAE  06D6               	xorwf	___ftdiv@sign,f
  7017  0FAF  3080               	movlw	128
  7018  0FB0  00CD               	movwf	??___ftdiv
  7019  0FB1  084D               	movf	??___ftdiv,w
  7020  0FB2  05D6               	andwf	___ftdiv@sign,f
  7021  0FB3  17CB               	bsf	___ftdiv@f1+1,7
  7022  0FB4  30FF               	movlw	255
  7023  0FB5  05CA               	andwf	___ftdiv@f1,f
  7024  0FB6  30FF               	movlw	255
  7025  0FB7  05CB               	andwf	___ftdiv@f1+1,f
  7026  0FB8  3000               	movlw	0
  7027  0FB9  05CC               	andwf	___ftdiv@f1+2,f
  7028  0FBA  17C8               	bsf	___ftdiv@f2+1,7
  7029  0FBB  30FF               	movlw	255
  7030  0FBC  05C7               	andwf	___ftdiv@f2,f
  7031  0FBD  30FF               	movlw	255
  7032  0FBE  05C8               	andwf	___ftdiv@f2+1,f
  7033  0FBF  3000               	movlw	0
  7034  0FC0  05C9               	andwf	___ftdiv@f2+2,f
  7035  0FC1  3018               	movlw	24
  7036  0FC2  00CD               	movwf	??___ftdiv
  7037  0FC3  084D               	movf	??___ftdiv,w
  7038  0FC4  00D1               	movwf	___ftdiv@cntr
  7039  0FC5                     l3684:	
  7040  0FC5  3001               	movlw	1
  7041  0FC6                     u4055:	
  7042  0FC6  35D2               	lslf	___ftdiv@f3,f
  7043  0FC7  0DD3               	rlf	___ftdiv@f3+1,f
  7044  0FC8  0DD4               	rlf	___ftdiv@f3+2,f
  7045  0FC9  0B89               	decfsz	9,f
  7046  0FCA  2FC6               	goto	u4055
  7047  0FCB  0849               	movf	___ftdiv@f2+2,w
  7048  0FCC  024C               	subwf	___ftdiv@f1+2,w
  7049  0FCD  1D03               	skipz
  7050  0FCE  2FD5               	goto	u4065
  7051  0FCF  0848               	movf	___ftdiv@f2+1,w
  7052  0FD0  024B               	subwf	___ftdiv@f1+1,w
  7053  0FD1  1D03               	skipz
  7054  0FD2  2FD5               	goto	u4065
  7055  0FD3  0847               	movf	___ftdiv@f2,w
  7056  0FD4  024A               	subwf	___ftdiv@f1,w
  7057  0FD5                     u4065:	
  7058  0FD5  1C03               	skipc
  7059  0FD6  2FDE               	goto	l3692
  7060  0FD7  0847               	movf	___ftdiv@f2,w
  7061  0FD8  02CA               	subwf	___ftdiv@f1,f
  7062  0FD9  0848               	movf	___ftdiv@f2+1,w
  7063  0FDA  3BCB               	subwfb	___ftdiv@f1+1,f
  7064  0FDB  0849               	movf	___ftdiv@f2+2,w
  7065  0FDC  3BCC               	subwfb	___ftdiv@f1+2,f
  7066  0FDD  1452               	bsf	___ftdiv@f3,0
  7067  0FDE                     l3692:	
  7068  0FDE  3001               	movlw	1
  7069  0FDF                     u4075:	
  7070  0FDF  35CA               	lslf	___ftdiv@f1,f
  7071  0FE0  0DCB               	rlf	___ftdiv@f1+1,f
  7072  0FE1  0DCC               	rlf	___ftdiv@f1+2,f
  7073  0FE2  0B89               	decfsz	9,f
  7074  0FE3  2FDF               	goto	u4075
  7075  0FE4  3001               	movlw	1
  7076  0FE5  02D1               	subwf	___ftdiv@cntr,f
  7077  0FE6  1D03               	btfss	3,2
  7078  0FE7  2FC5               	goto	l3684
  7079  0FE8  0852               	movf	___ftdiv@f3,w
  7080  0FE9  00F1               	movwf	___ftpack@arg
  7081  0FEA  0853               	movf	___ftdiv@f3+1,w
  7082  0FEB  00F2               	movwf	___ftpack@arg+1
  7083  0FEC  0854               	movf	___ftdiv@f3+2,w
  7084  0FED  00F3               	movwf	___ftpack@arg+2
  7085  0FEE  0855               	movf	___ftdiv@exp,w
  7086  0FEF  00CD               	movwf	??___ftdiv
  7087  0FF0  084D               	movf	??___ftdiv,w
  7088  0FF1  00F4               	movwf	___ftpack@exp
  7089  0FF2  0856               	movf	___ftdiv@sign,w
  7090  0FF3  00CE               	movwf	??___ftdiv+1
  7091  0FF4  084E               	movf	??___ftdiv+1,w
  7092  0FF5  00F5               	movwf	___ftpack@sign
  7093  0FF6  3187  2794         	fcall	___ftpack
  7094  0FF8  0871               	movf	?___ftpack,w
  7095  0FF9  0020               	movlb	0	; select bank0
  7096  0FFA  00C7               	movwf	?___ftdiv
  7097  0FFB  0872               	movf	?___ftpack+1,w
  7098  0FFC  00C8               	movwf	?___ftdiv+1
  7099  0FFD  0873               	movf	?___ftpack+2,w
  7100  0FFE  00C9               	movwf	?___ftdiv+2
  7101  0FFF  0008               	return
  7102  1000                     __end_of___ftdiv:	
  7103                           
  7104                           	psect	text27
  7105  0794                     __ptext27:	
  7106 ;; *************** function ___ftpack *****************
  7107 ;; Defined at:
  7108 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  7109 ;; Parameters:    Size  Location     Type
  7110 ;;  arg             3    1[COMMON] unsigned um
  7111 ;;  exp             1    4[COMMON] unsigned char 
  7112 ;;  sign            1    5[COMMON] unsigned char 
  7113 ;; Auto vars:     Size  Location     Type
  7114 ;;		None
  7115 ;; Return value:  Size  Location     Type
  7116 ;;                  3    1[COMMON] float 
  7117 ;; Registers used:
  7118 ;;		wreg, status,2, status,0
  7119 ;; Tracked objects:
  7120 ;;		On entry : 0/0
  7121 ;;		On exit  : 0/0
  7122 ;;		Unchanged: 0/0
  7123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7124 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7125 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7126 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7127 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7128 ;;Total ram usage:        8 bytes
  7129 ;; Hardware stack levels used:    1
  7130 ;; Hardware stack levels required when called:    2
  7131 ;; This function calls:
  7132 ;;		Nothing
  7133 ;; This function is called by:
  7134 ;;		___ftadd
  7135 ;;		___ftdiv
  7136 ;;		___ftmul
  7137 ;;		___lltoft
  7138 ;;		___lwtoft
  7139 ;; This function uses a non-reentrant model
  7140 ;;
  7141                           
  7142                           
  7143                           ;psect for function ___ftpack
  7144  0794                     ___ftpack:	
  7145                           
  7146                           ;incstack = 0
  7147                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  7148  0794  0874               	movf	___ftpack@exp,w
  7149  0795  1903               	btfsc	3,2
  7150  0796  2F9C               	goto	l3370
  7151  0797  0873               	movf	___ftpack@arg+2,w
  7152  0798  0472               	iorwf	___ftpack@arg+1,w
  7153  0799  0471               	iorwf	___ftpack@arg,w
  7154  079A  1D03               	skipz
  7155  079B  2FAD               	goto	l3376
  7156  079C                     l3370:	
  7157  079C  3000               	movlw	0
  7158  079D  00F1               	movwf	?___ftpack
  7159  079E  3000               	movlw	0
  7160  079F  00F2               	movwf	?___ftpack+1
  7161  07A0  3000               	movlw	0
  7162  07A1  00F3               	movwf	?___ftpack+2
  7163  07A2  0008               	return
  7164  07A3                     l3374:	
  7165  07A3  3001               	movlw	1
  7166  07A4  00F6               	movwf	??___ftpack
  7167  07A5  0876               	movf	??___ftpack,w
  7168  07A6  07F4               	addwf	___ftpack@exp,f
  7169  07A7  3001               	movlw	1
  7170  07A8                     u3365:	
  7171  07A8  36F3               	lsrf	___ftpack@arg+2,f
  7172  07A9  0CF2               	rrf	___ftpack@arg+1,f
  7173  07AA  0CF1               	rrf	___ftpack@arg,f
  7174  07AB  0B89               	decfsz	9,f
  7175  07AC  2FA8               	goto	u3365
  7176  07AD                     l3376:	
  7177  07AD  30FE               	movlw	254
  7178  07AE  0573               	andwf	___ftpack@arg+2,w
  7179  07AF  1903               	btfsc	3,2
  7180  07B0  2FC6               	goto	l856
  7181  07B1  2FA3               	goto	l3374
  7182  07B2                     l3378:	
  7183  07B2  3001               	movlw	1
  7184  07B3  00F6               	movwf	??___ftpack
  7185  07B4  0876               	movf	??___ftpack,w
  7186  07B5  07F4               	addwf	___ftpack@exp,f
  7187  07B6  3001               	movlw	1
  7188  07B7  07F1               	addwf	___ftpack@arg,f
  7189  07B8  3000               	movlw	0
  7190  07B9  1803               	skipnc
  7191  07BA  3001               	movlw	1
  7192  07BB  07F2               	addwf	___ftpack@arg+1,f
  7193  07BC  3000               	movlw	0
  7194  07BD  1803               	skipnc
  7195  07BE  3001               	movlw	1
  7196  07BF  07F3               	addwf	___ftpack@arg+2,f
  7197  07C0  3001               	movlw	1
  7198  07C1                     u3385:	
  7199  07C1  36F3               	lsrf	___ftpack@arg+2,f
  7200  07C2  0CF2               	rrf	___ftpack@arg+1,f
  7201  07C3  0CF1               	rrf	___ftpack@arg,f
  7202  07C4  0B89               	decfsz	9,f
  7203  07C5  2FC1               	goto	u3385
  7204  07C6                     l856:	
  7205  07C6  30FF               	movlw	255
  7206  07C7  0573               	andwf	___ftpack@arg+2,w
  7207  07C8  1903               	btfsc	3,2
  7208  07C9  2FD7               	goto	l3386
  7209  07CA  2FB2               	goto	l3378
  7210  07CB                     l3388:	
  7211  07CB  3002               	movlw	2
  7212  07CC  0274               	subwf	___ftpack@exp,w
  7213  07CD  1C03               	btfss	3,0
  7214  07CE  2FD9               	goto	l863
  7215  07CF  3001               	movlw	1
  7216  07D0  02F4               	subwf	___ftpack@exp,f
  7217  07D1  3001               	movlw	1
  7218  07D2                     u3405:	
  7219  07D2  35F1               	lslf	___ftpack@arg,f
  7220  07D3  0DF2               	rlf	___ftpack@arg+1,f
  7221  07D4  0DF3               	rlf	___ftpack@arg+2,f
  7222  07D5  0B89               	decfsz	9,f
  7223  07D6  2FD2               	goto	u3405
  7224  07D7                     l3386:	
  7225  07D7  1FF2               	btfss	___ftpack@arg+1,7
  7226  07D8  2FCB               	goto	l3388
  7227  07D9                     l863:	
  7228  07D9  1874               	btfsc	___ftpack@exp,0
  7229  07DA  2FE1               	goto	l864
  7230  07DB  30FF               	movlw	255
  7231  07DC  05F1               	andwf	___ftpack@arg,f
  7232  07DD  307F               	movlw	127
  7233  07DE  05F2               	andwf	___ftpack@arg+1,f
  7234  07DF  30FF               	movlw	255
  7235  07E0  05F3               	andwf	___ftpack@arg+2,f
  7236  07E1                     l864:	
  7237  07E1  1003               	clrc
  7238  07E2  0CF4               	rrf	___ftpack@exp,f
  7239  07E3  0874               	movf	___ftpack@exp,w
  7240  07E4  00F6               	movwf	??___ftpack
  7241  07E5  01F7               	clrf	??___ftpack+1
  7242  07E6  01F8               	clrf	??___ftpack+2
  7243  07E7  3010               	movlw	16
  7244  07E8                     u3445:	
  7245  07E8  35F6               	lslf	??___ftpack,f
  7246  07E9  0DF7               	rlf	??___ftpack+1,f
  7247  07EA  0DF8               	rlf	??___ftpack+2,f
  7248  07EB  0B89               	decfsz	9,f
  7249  07EC  2FE8               	goto	u3445
  7250  07ED  0876               	movf	??___ftpack,w
  7251  07EE  04F1               	iorwf	___ftpack@arg,f
  7252  07EF  0877               	movf	??___ftpack+1,w
  7253  07F0  04F2               	iorwf	___ftpack@arg+1,f
  7254  07F1  0878               	movf	??___ftpack+2,w
  7255  07F2  04F3               	iorwf	___ftpack@arg+2,f
  7256  07F3  0875               	movf	___ftpack@sign,w
  7257  07F4  1903               	btfsc	3,2
  7258  07F5  0008               	return
  7259  07F6  17F3               	bsf	___ftpack@arg+2,7
  7260  07F7  0008               	return
  7261  07F8                     __end_of___ftpack:	
  7262                           
  7263                           	psect	text28
  7264  0999                     __ptext28:	
  7265 ;; *************** function _PGMSelLong *****************
  7266 ;; Defined at:
  7267 ;;		line 103 in file "PGM.c"
  7268 ;; Parameters:    Size  Location     Type
  7269 ;;		None
  7270 ;; Auto vars:     Size  Location     Type
  7271 ;;		None
  7272 ;; Return value:  Size  Location     Type
  7273 ;;		None               void
  7274 ;; Registers used:
  7275 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7276 ;; Tracked objects:
  7277 ;;		On entry : 0/0
  7278 ;;		On exit  : 0/0
  7279 ;;		Unchanged: 0/0
  7280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7281 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7282 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7283 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7284 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7285 ;;Total ram usage:        1 bytes
  7286 ;; Hardware stack levels used:    1
  7287 ;; Hardware stack levels required when called:    4
  7288 ;; This function calls:
  7289 ;;		_LEDNormalFlash
  7290 ;;		_PGMWriteNvm
  7291 ;; This function is called by:
  7292 ;;		_SYSTask
  7293 ;; This function uses a non-reentrant model
  7294 ;;
  7295                           
  7296                           
  7297                           ;psect for function _PGMSelLong
  7298  0999                     _PGMSelLong:	
  7299                           
  7300                           ;PGM.c: 106: pgm_cfg.menu.val=0x00;
  7301                           
  7302                           ;incstack = 0
  7303                           ; Regs used in _PGMSelLong: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7304  0999  0021               	movlb	1	; select bank1
  7305  099A  01D3               	clrf	(_pgm_cfg^(0+128)+2)
  7306                           
  7307                           ;PGM.c: 108: pgm_cfg.sensId=TMR1L^TMR1H;
  7308  099B  0020               	movlb	0	; select bank0
  7309  099C  0816               	movf	22,w	;volatile
  7310  099D  0617               	xorwf	23,w	;volatile
  7311  099E  00FA               	movwf	??_PGMSelLong
  7312  099F  087A               	movf	??_PGMSelLong,w
  7313  09A0  0021               	movlb	1	; select bank1
  7314  09A1  00D4               	movwf	(_pgm_cfg^(0+128)+3)
  7315                           
  7316                           ;PGM.c: 109: if(pgm_cfg.sensId==0x00)
  7317  09A2  0854               	movf	(_pgm_cfg^(0+128)+3),w
  7318  09A3  1D03               	btfss	3,2
  7319  09A4  29A9               	goto	l4146
  7320                           
  7321                           ;PGM.c: 110: pgm_cfg.sensId++;
  7322  09A5  3001               	movlw	1
  7323  09A6  00FA               	movwf	??_PGMSelLong
  7324  09A7  087A               	movf	??_PGMSelLong,w
  7325  09A8  07D4               	addwf	(_pgm_cfg^(0+128)+3),f
  7326  09A9                     l4146:	
  7327                           
  7328                           ;PGM.c: 112: PGMWriteNvm();
  7329  09A9  3188  20D7  3189   	fcall	_PGMWriteNvm
  7330                           
  7331                           ;PGM.c: 114: LEDNormalFlash(3);
  7332  09AC  3003               	movlw	3
  7333  09AD  318A  221D         	fcall	_LEDNormalFlash
  7334                           
  7335                           ;PGM.c: 116: pgm_flg.resetDone=1;
  7336  09AF  14FC               	bsf	_pgm_flg,1
  7337  09B0  0008               	return
  7338  09B1                     __end_of_PGMSelLong:	
  7339                           
  7340                           	psect	text29
  7341  0B14                     __ptext29:	
  7342 ;; *************** function _DINTick *****************
  7343 ;; Defined at:
  7344 ;;		line 46 in file "DIN.c"
  7345 ;; Parameters:    Size  Location     Type
  7346 ;;		None
  7347 ;; Auto vars:     Size  Location     Type
  7348 ;;		None
  7349 ;; Return value:  Size  Location     Type
  7350 ;;		None               void
  7351 ;; Registers used:
  7352 ;;		wreg, status,2, status,0
  7353 ;; Tracked objects:
  7354 ;;		On entry : 0/0
  7355 ;;		On exit  : 0/0
  7356 ;;		Unchanged: 0/0
  7357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7359 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7360 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7361 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7362 ;;Total ram usage:        1 bytes
  7363 ;; Hardware stack levels used:    1
  7364 ;; Hardware stack levels required when called:    2
  7365 ;; This function calls:
  7366 ;;		Nothing
  7367 ;; This function is called by:
  7368 ;;		_SYSTask
  7369 ;; This function uses a non-reentrant model
  7370 ;;
  7371                           
  7372                           
  7373                           ;psect for function _DINTick
  7374  0B14                     _DINTick:	
  7375                           
  7376                           ;DIN.c: 50: if(u_flg_din.tmrDbncSel)
  7377                           
  7378                           ;incstack = 0
  7379                           ; Regs used in _DINTick: [wreg+status,2+status,0]
  7380  0B14  0021               	movlb	1	; select bank1
  7381  0B15  1C35               	btfss	_u_flg_din^(0+128),0
  7382  0B16  2B26               	goto	l300
  7383                           
  7384                           ;DIN.c: 51: {
  7385                           ;DIN.c: 52: tmrDbncSel++;
  7386  0B17  3001               	movlw	1
  7387  0B18  00F1               	movwf	??_DINTick
  7388  0B19  0871               	movf	??_DINTick,w
  7389  0B1A  07B2               	addwf	_tmrDbncSel^(0+128),f
  7390                           
  7391                           ;DIN.c: 53: if(tmrDbncSel>5)
  7392  0B1B  3006               	movlw	6
  7393  0B1C  0232               	subwf	_tmrDbncSel^(0+128),w
  7394  0B1D  1C03               	skipc
  7395  0B1E  2B26               	goto	l300
  7396                           
  7397                           ;DIN.c: 54: {
  7398                           ;DIN.c: 55: u_flg_din.tmrDbncSel=0;
  7399  0B1F  1035               	bcf	_u_flg_din^(0+128),0
  7400                           
  7401                           ;DIN.c: 56: tmrDbncSel=0;
  7402  0B20  01B2               	clrf	_tmrDbncSel^(0+128)
  7403                           
  7404                           ;DIN.c: 58: if(u_in_sta_currTask.sel)
  7405  0B21  1C39               	btfss	_u_in_sta_currTask^(0+128),0
  7406  0B22  2B25               	goto	l302
  7407                           
  7408                           ;DIN.c: 59: u_in_ev_down.sel=1;
  7409  0B23  1436               	bsf	_u_in_ev_down^(0+128),0
  7410  0B24  2B26               	goto	l300
  7411  0B25                     l302:	
  7412                           
  7413                           ;DIN.c: 60: else
  7414                           ;DIN.c: 61: u_in_ev_up.sel=1;
  7415  0B25  1438               	bsf	_u_in_ev_up^(0+128),0
  7416  0B26                     l300:	
  7417                           
  7418                           ;DIN.c: 62: }
  7419                           ;DIN.c: 63: }
  7420                           ;DIN.c: 66: if(u_flg_din.tmrLongSel)
  7421  0B26  1CB5               	btfss	_u_flg_din^(0+128),1
  7422  0B27  0008               	return
  7423                           
  7424                           ;DIN.c: 67: {
  7425                           ;DIN.c: 68: tmrLongSel++;
  7426  0B28  3001               	movlw	1
  7427  0B29  07AD               	addwf	_tmrLongSel^(0+128),f
  7428  0B2A  3000               	movlw	0
  7429  0B2B  3DAE               	addwfc	(_tmrLongSel+1)^(0+128),f
  7430                           
  7431                           ;DIN.c: 69: if(tmrLongSel>200)
  7432  0B2C  3000               	movlw	0
  7433  0B2D  022E               	subwf	(_tmrLongSel+1)^(0+128),w
  7434  0B2E  30C9               	movlw	201
  7435  0B2F  1903               	skipnz
  7436  0B30  022D               	subwf	_tmrLongSel^(0+128),w
  7437  0B31  1C03               	skipc
  7438  0B32  0008               	return
  7439                           
  7440                           ;DIN.c: 70: {
  7441                           ;DIN.c: 72: tmrLongSel=0;
  7442  0B33  01AD               	clrf	_tmrLongSel^(0+128)
  7443  0B34  01AE               	clrf	(_tmrLongSel+1)^(0+128)
  7444                           
  7445                           ;DIN.c: 74: u_in_ev_long.sel=1;
  7446  0B35  1437               	bsf	_u_in_ev_long^(0+128),0
  7447  0B36  0008               	return
  7448  0B37                     __end_of_DINTick:	
  7449                           
  7450                           	psect	text30
  7451  0B81                     __ptext30:	
  7452 ;; *************** function _SYSInit *****************
  7453 ;; Defined at:
  7454 ;;		line 18 in file "SYS.c"
  7455 ;; Parameters:    Size  Location     Type
  7456 ;;  state           1    wreg     unsigned char 
  7457 ;; Auto vars:     Size  Location     Type
  7458 ;;  state           1    2[COMMON] unsigned char 
  7459 ;; Return value:  Size  Location     Type
  7460 ;;		None               void
  7461 ;; Registers used:
  7462 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7463 ;; Tracked objects:
  7464 ;;		On entry : 0/0
  7465 ;;		On exit  : 0/0
  7466 ;;		Unchanged: 0/0
  7467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7468 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7469 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7470 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7471 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7472 ;;Total ram usage:        2 bytes
  7473 ;; Hardware stack levels used:    1
  7474 ;; Hardware stack levels required when called:    2
  7475 ;; This function calls:
  7476 ;;		Nothing
  7477 ;; This function is called by:
  7478 ;;		_main
  7479 ;; This function uses a non-reentrant model
  7480 ;;
  7481                           
  7482                           
  7483                           ;psect for function _SYSInit
  7484  0B81                     _SYSInit:	
  7485                           
  7486                           ;incstack = 0
  7487                           ; Regs used in _SYSInit: [wreg-fsr0h+status,2+status,0]
  7488                           ;SYSInit@state stored from wreg
  7489  0B81  00F2               	movwf	SYSInit@state
  7490                           
  7491                           ;SYS.c: 20: switch(state)
  7492  0B82  2B9E               	goto	l4364
  7493  0B83                     l4342:	
  7494                           ;SYS.c: 21: {
  7495                           ;SYS.c: 22: case 0:
  7496                           
  7497                           
  7498                           ;SYS.c: 24: OPTION_REG=0b00000110; OSCCON=0b01110011; WDTCON=0b00001001; IOCBP=0b0000000
      +                          0; IOCBN=0b00000000; TMR0=255-156; INTCON|=0b00100000; INTCON&=0b11111011; PIR1=0b000000
      +                          00; PIR2=0b00000000; PIE1=0b00000000; PIE2=0b00000000;
  7499  0B83  3006               	movlw	6
  7500  0B84  0021               	movlb	1	; select bank1
  7501  0B85  0095               	movwf	21	;volatile
  7502  0B86  3073               	movlw	115
  7503  0B87  0099               	movwf	25	;volatile
  7504  0B88  3009               	movlw	9
  7505  0B89  0097               	movwf	23	;volatile
  7506  0B8A  0027               	movlb	7	; select bank7
  7507  0B8B  0194               	clrf	20	;volatile
  7508  0B8C  0195               	clrf	21	;volatile
  7509  0B8D  3063               	movlw	99
  7510  0B8E  0020               	movlb	0	; select bank0
  7511  0B8F  0095               	movwf	21	;volatile
  7512  0B90  168B               	bsf	11,5	;volatile
  7513  0B91  30FB               	movlw	251
  7514  0B92  00F1               	movwf	??_SYSInit
  7515  0B93  0871               	movf	??_SYSInit,w
  7516  0B94  058B               	andwf	11,f	;volatile
  7517  0B95  0191               	clrf	17	;volatile
  7518  0B96  0192               	clrf	18	;volatile
  7519  0B97  0021               	movlb	1	; select bank1
  7520  0B98  0191               	clrf	17	;volatile
  7521  0B99  0192               	clrf	18	;volatile
  7522                           
  7523                           ;SYS.c: 25: break;
  7524  0B9A  0008               	return
  7525  0B9B                     l4360:	
  7526                           ;SYS.c: 26: case 1:
  7527                           
  7528                           
  7529                           ;SYS.c: 28: u_SYS_STA.VAL=0;
  7530  0B9B  0021               	movlb	1	; select bank1
  7531  0B9C  01B4               	clrf	_u_SYS_STA^(0+128)
  7532                           
  7533                           ;SYS.c: 33: }
  7534                           
  7535                           ;SYS.c: 29: break;
  7536  0B9D  0008               	return
  7537  0B9E                     l4364:	
  7538  0B9E  0872               	movf	SYSInit@state,w
  7539                           
  7540                           ; Switch size 1, requested type "space"
  7541                           ; Number of cases is 2, Range of values is 0 to 1
  7542                           ; switch strategies available:
  7543                           ; Name         Instructions Cycles
  7544                           ; simple_byte            7     4 (average)
  7545                           ; direct_byte           10     6 (fixed)
  7546                           ; jumptable            260     6 (fixed)
  7547                           ;	Chosen strategy is simple_byte
  7548  0B9F  3A00               	xorlw	0	; case 0
  7549  0BA0  1903               	skipnz
  7550  0BA1  2B83               	goto	l4342
  7551  0BA2  3A01               	xorlw	1	; case 1
  7552  0BA3  1903               	skipnz
  7553  0BA4  2B9B               	goto	l4360
  7554  0BA5  2BA6               	goto	l607
  7555  0BA6                     l607:	
  7556  0BA6  0008               	return
  7557  0BA7                     __end_of_SYSInit:	
  7558                           
  7559                           	psect	text31
  7560  0A3B                     __ptext31:	
  7561 ;; *************** function _SPIInit *****************
  7562 ;; Defined at:
  7563 ;;		line 8 in file "SPI.c"
  7564 ;; Parameters:    Size  Location     Type
  7565 ;;  state           1    wreg     unsigned char 
  7566 ;; Auto vars:     Size  Location     Type
  7567 ;;  state           1    2[COMMON] unsigned char 
  7568 ;; Return value:  Size  Location     Type
  7569 ;;		None               void
  7570 ;; Registers used:
  7571 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7572 ;; Tracked objects:
  7573 ;;		On entry : 0/0
  7574 ;;		On exit  : 0/0
  7575 ;;		Unchanged: 0/0
  7576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7577 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7578 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7579 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7580 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7581 ;;Total ram usage:        2 bytes
  7582 ;; Hardware stack levels used:    1
  7583 ;; Hardware stack levels required when called:    2
  7584 ;; This function calls:
  7585 ;;		Nothing
  7586 ;; This function is called by:
  7587 ;;		_main
  7588 ;; This function uses a non-reentrant model
  7589 ;;
  7590                           
  7591                           
  7592                           ;psect for function _SPIInit
  7593  0A3B                     _SPIInit:	
  7594                           
  7595                           ;incstack = 0
  7596                           ; Regs used in _SPIInit: [wreg-fsr0h+status,2+status,0]
  7597                           ;SPIInit@state stored from wreg
  7598  0A3B  00F2               	movwf	SPIInit@state
  7599                           
  7600                           ;SPI.c: 10: switch(state)
  7601  0A3C  2A4D               	goto	l4252
  7602  0A3D                     l60:	
  7603                           ;SPI.c: 11: {
  7604                           ;SPI.c: 12: case 0:
  7605                           
  7606                           
  7607                           ;SPI.c: 14: TRISC|=0b00010000; TRISC&=0b11010111; SSPCONbits.SSPEN=0; SSPBUF=0x00; SSPCO
      +                          N1=0b00000001; SSPCON2=0b00000000; SSPSTAT=0b01000000; SSPCONbits.SSPEN=1;
  7608  0A3D  0021               	movlb	1	; select bank1
  7609  0A3E  160E               	bsf	14,4	;volatile
  7610  0A3F  30D7               	movlw	215
  7611  0A40  00F1               	movwf	??_SPIInit
  7612  0A41  0871               	movf	??_SPIInit,w
  7613  0A42  058E               	andwf	14,f	;volatile
  7614  0A43  0024               	movlb	4	; select bank4
  7615  0A44  1295               	bcf	21,5	;volatile
  7616  0A45  0191               	clrf	17	;volatile
  7617  0A46  3001               	movlw	1
  7618  0A47  0095               	movwf	21	;volatile
  7619  0A48  0196               	clrf	22	;volatile
  7620  0A49  3040               	movlw	64
  7621  0A4A  0094               	movwf	20	;volatile
  7622  0A4B  1695               	bsf	21,5	;volatile
  7623                           
  7624                           ;SPI.c: 22: }
  7625                           
  7626                           ;SPI.c: 21: break;
  7627                           
  7628                           ;SPI.c: 19: case 2:
  7629                           
  7630                           ;SPI.c: 18: break;
  7631                           
  7632                           ;SPI.c: 16: case 1:
  7633                           
  7634                           ;SPI.c: 15: break;
  7635  0A4C  0008               	return
  7636  0A4D                     l4252:	
  7637  0A4D  0872               	movf	SPIInit@state,w
  7638                           
  7639                           ; Switch size 1, requested type "space"
  7640                           ; Number of cases is 3, Range of values is 0 to 2
  7641                           ; switch strategies available:
  7642                           ; Name         Instructions Cycles
  7643                           ; simple_byte           10     6 (average)
  7644                           ; direct_byte           12     6 (fixed)
  7645                           ; jumptable            260     6 (fixed)
  7646                           ;	Chosen strategy is simple_byte
  7647  0A4E  3A00               	xorlw	0	; case 0
  7648  0A4F  1903               	skipnz
  7649  0A50  2A3D               	goto	l60
  7650  0A51  3A01               	xorlw	1	; case 1
  7651  0A52  1903               	skipnz
  7652  0A53  2A58               	goto	l64
  7653  0A54  3A03               	xorlw	3	; case 2
  7654  0A55  1903               	skipnz
  7655  0A56  2A58               	goto	l64
  7656  0A57  2A58               	goto	l64
  7657  0A58                     l64:	
  7658  0A58  0008               	return
  7659  0A59                     __end_of_SPIInit:	
  7660                           
  7661                           	psect	text32
  7662  0889                     __ptext32:	
  7663 ;; *************** function _RTXTask *****************
  7664 ;; Defined at:
  7665 ;;		line 106 in file "RTX.c"
  7666 ;; Parameters:    Size  Location     Type
  7667 ;;		None
  7668 ;; Auto vars:     Size  Location     Type
  7669 ;;		None
  7670 ;; Return value:  Size  Location     Type
  7671 ;;		None               void
  7672 ;; Registers used:
  7673 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7674 ;; Tracked objects:
  7675 ;;		On entry : 0/0
  7676 ;;		On exit  : 0/0
  7677 ;;		Unchanged: 0/0
  7678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7680 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7681 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7682 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7683 ;;Total ram usage:        0 bytes
  7684 ;; Hardware stack levels used:    1
  7685 ;; Hardware stack levels required when called:    6
  7686 ;; This function calls:
  7687 ;;		_RTXReadPkt
  7688 ;; This function is called by:
  7689 ;;		_main
  7690 ;; This function uses a non-reentrant model
  7691 ;;
  7692                           
  7693                           
  7694                           ;psect for function _RTXTask
  7695  0889                     _RTXTask:	
  7696                           
  7697                           ;RTX.c: 109: if(!(PORTBbits.RB0))
  7698                           
  7699                           ;incstack = 0
  7700                           ; Regs used in _RTXTask: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7701  0889  0020               	movlb	0	; select bank0
  7702  088A  180D               	btfsc	13,0	;volatile
  7703  088B  0008               	return
  7704                           
  7705                           ;RTX.c: 110: RTXReadPkt();
  7706  088C  318D  2596         	fcall	_RTXReadPkt
  7707  088E  0008               	return
  7708  088F                     __end_of_RTXTask:	
  7709                           
  7710                           	psect	text33
  7711  0D96                     __ptext33:	
  7712 ;; *************** function _RTXReadPkt *****************
  7713 ;; Defined at:
  7714 ;;		line 158 in file "RTX.c"
  7715 ;; Parameters:    Size  Location     Type
  7716 ;;		None
  7717 ;; Auto vars:     Size  Location     Type
  7718 ;;  numRxByte       1   70[BANK0 ] unsigned char 
  7719 ;; Return value:  Size  Location     Type
  7720 ;;		None               void
  7721 ;; Registers used:
  7722 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7723 ;; Tracked objects:
  7724 ;;		On entry : 0/0
  7725 ;;		On exit  : 0/0
  7726 ;;		Unchanged: 0/0
  7727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7729 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7730 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7731 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7732 ;;Total ram usage:        2 bytes
  7733 ;; Hardware stack levels used:    1
  7734 ;; Hardware stack levels required when called:    5
  7735 ;; This function calls:
  7736 ;;		_CC1Read
  7737 ;;		_CC1Strobe
  7738 ;;		_LEDNormalFlash
  7739 ;;		_PGMPgmOff
  7740 ;;		_PGMWriteNvm
  7741 ;;		_RTXRcvPkt
  7742 ;; This function is called by:
  7743 ;;		_RTXTask
  7744 ;; This function uses a non-reentrant model
  7745 ;;
  7746                           
  7747                           
  7748                           ;psect for function _RTXReadPkt
  7749  0D96                     _RTXReadPkt:	
  7750                           
  7751                           ;RTX.c: 160: unsigned char numRxByte;
  7752                           ;RTX.c: 163: CC1Read(0x3B,(&(numRxByte)),1);
  7753                           
  7754                           ;incstack = 0
  7755                           ; Regs used in _RTXReadPkt: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7756  0D96  3066               	movlw	(low (RTXReadPkt@numRxByte| 0))& (0+255)
  7757  0D97  0020               	movlb	0	; select bank0
  7758  0D98  00E5               	movwf	??_RTXReadPkt
  7759  0D99  0865               	movf	??_RTXReadPkt,w
  7760  0D9A  00F7               	movwf	CC1Read@dst
  7761  0D9B  01F8               	clrf	CC1Read@len
  7762  0D9C  0AF8               	incf	CC1Read@len,f
  7763  0D9D  303B               	movlw	59
  7764  0D9E  3189  21E4  318D   	fcall	_CC1Read
  7765                           
  7766                           ;RTX.c: 164: while(numRxByte>=0x0B)
  7767  0DA1  300B               	movlw	11
  7768  0DA2  0020               	movlb	0	; select bank0
  7769  0DA3  0266               	subwf	RTXReadPkt@numRxByte,w
  7770  0DA4  1C03               	btfss	3,0
  7771  0DA5  0008               	return
  7772  0DA6  0064               	clrwdt	;# 
  7773                           
  7774                           ;RTX.c: 168: RTXRcvPkt(pktRx,0x0B);
  7775  0DA7  300B               	movlw	11
  7776  0DA8  0020               	movlb	0	; select bank0
  7777  0DA9  00E5               	movwf	??_RTXReadPkt
  7778  0DAA  0865               	movf	??_RTXReadPkt,w
  7779  0DAB  00A0               	movwf	RTXRcvPkt@len
  7780  0DAC  30BB               	movlw	(low (_pktRx| 0))& (0+255)
  7781  0DAD  3188  20C9  318D   	fcall	_RTXRcvPkt
  7782                           
  7783                           ;RTX.c: 170: if(pgm_flg.pgmonoff)
  7784  0DB0  1C7C               	btfss	_pgm_flg,0
  7785  0DB1  2DD0               	goto	l4186
  7786                           
  7787                           ;RTX.c: 171: {
  7788                           ;RTX.c: 173: if(pktRx[OP]==rPGM)
  7789  0DB2  3081               	movlw	129
  7790  0DB3  0021               	movlb	1	; select bank1
  7791  0DB4  063F               	xorwf	(_pktRx^(0+128)+4),w
  7792  0DB5  1D03               	btfss	3,2
  7793  0DB6  2D96               	goto	_RTXReadPkt
  7794                           
  7795                           ;RTX.c: 174: {
  7796                           ;RTX.c: 175: if(pktRx[ID_DEST]==pgm_cfg.sensId)
  7797  0DB7  0854               	movf	(_pgm_cfg^(0+128)+3),w
  7798  0DB8  063B               	xorwf	_pktRx^(0+128),w
  7799  0DB9  1D03               	skipz
  7800  0DBA  2D96               	goto	_RTXReadPkt
  7801                           
  7802                           ;RTX.c: 176: {
  7803                           ;RTX.c: 178: pgm_cfg.baseId=pktRx[ID_SOURCE];
  7804  0DBB  083D               	movf	(_pktRx^(0+128)+2),w
  7805  0DBC  0020               	movlb	0	; select bank0
  7806  0DBD  00E5               	movwf	??_RTXReadPkt
  7807  0DBE  0865               	movf	??_RTXReadPkt,w
  7808  0DBF  0021               	movlb	1	; select bank1
  7809  0DC0  00D5               	movwf	(_pgm_cfg^(0+128)+4)
  7810                           
  7811                           ;RTX.c: 180: pgm_cfg.menu.baseIdProg=1;
  7812  0DC1  1453               	bsf	(_pgm_cfg^(0+128)+2),0
  7813                           
  7814                           ;RTX.c: 181: PGMWriteNvm();
  7815  0DC2  3188  20D7  318D   	fcall	_PGMWriteNvm
  7816                           
  7817                           ;RTX.c: 183: PGMPgmOff();
  7818  0DC5  3188  207F  318D   	fcall	_PGMPgmOff
  7819                           
  7820                           ;RTX.c: 185: tmrRcvPkt=0;
  7821  0DC8  0021               	movlb	1	; select bank1
  7822  0DC9  01B3               	clrf	_tmrRcvPkt^(0+128)
  7823                           
  7824                           ;RTX.c: 187: LEDNormalFlash(3);
  7825  0DCA  3003               	movlw	3
  7826  0DCB  318A  221D  318D   	fcall	_LEDNormalFlash
  7827                           
  7828                           ;RTX.c: 189: flg_slp.goSleep=1;
  7829  0DCE  0021               	movlb	1	; select bank1
  7830  0DCF  2DE3               	goto	l4196
  7831  0DD0                     l4186:	
  7832                           ;RTX.c: 190: }
  7833                           ;RTX.c: 191: }
  7834                           ;RTX.c: 192: }
  7835                           
  7836                           
  7837                           ;RTX.c: 193: else
  7838                           ;RTX.c: 194: {
  7839                           ;RTX.c: 196: if(pktRx[OP]==rDAT)
  7840  0DD0  3080               	movlw	128
  7841  0DD1  0021               	movlb	1	; select bank1
  7842  0DD2  063F               	xorwf	(_pktRx^(0+128)+4),w
  7843  0DD3  1D03               	btfss	3,2
  7844  0DD4  2D96               	goto	_RTXReadPkt
  7845                           
  7846                           ;RTX.c: 197: {
  7847                           ;RTX.c: 198: if((pktRx[ID_DEST]==pgm_cfg.sensId) && (pktRx[ID_SOURCE]==pgm_cfg.baseId))
  7848  0DD5  0854               	movf	(_pgm_cfg^(0+128)+3),w
  7849  0DD6  063B               	xorwf	_pktRx^(0+128),w
  7850  0DD7  1D03               	skipz
  7851  0DD8  2D96               	goto	_RTXReadPkt
  7852  0DD9  0855               	movf	(_pgm_cfg^(0+128)+4),w
  7853  0DDA  063D               	xorwf	(_pktRx^(0+128)+2),w
  7854  0DDB  1D03               	skipz
  7855  0DDC  2D96               	goto	_RTXReadPkt
  7856                           
  7857                           ;RTX.c: 199: {
  7858                           ;RTX.c: 201: CC1Strobe(SIDLE);
  7859  0DDD  3036               	movlw	54
  7860  0DDE  3189  2144  318D   	fcall	_CC1Strobe
  7861                           
  7862                           ;RTX.c: 203: tmrRcvPkt=0;
  7863  0DE1  0021               	movlb	1	; select bank1
  7864  0DE2  01B3               	clrf	_tmrRcvPkt^(0+128)
  7865  0DE3                     l4196:	
  7866                           
  7867                           ;RTX.c: 205: flg_slp.goSleep=1;
  7868  0DE3  1430               	bsf	_flg_slp^(0+128),0
  7869  0DE4  2D96               	goto	_RTXReadPkt
  7870  0DE5                     __end_of_RTXReadPkt:	
  7871                           ;RTX.c: 206: }
  7872                           ;RTX.c: 207: }
  7873                           ;RTX.c: 208: }
  7874                           ;RTX.c: 210: CC1Read(0x3B,(&(numRxByte)),1);
  7875                           
  7876                           
  7877                           	psect	text34
  7878  08C9                     __ptext34:	
  7879 ;; *************** function _RTXRcvPkt *****************
  7880 ;; Defined at:
  7881 ;;		line 152 in file "RTX.c"
  7882 ;; Parameters:    Size  Location     Type
  7883 ;;  dst             1    wreg     PTR unsigned char 
  7884 ;;		 -> pktRx(11), 
  7885 ;;  len             1    0[BANK0 ] unsigned char 
  7886 ;; Auto vars:     Size  Location     Type
  7887 ;;  dst             1    3[BANK0 ] PTR unsigned char 
  7888 ;;		 -> pktRx(11), 
  7889 ;; Return value:  Size  Location     Type
  7890 ;;		None               void
  7891 ;; Registers used:
  7892 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7893 ;; Tracked objects:
  7894 ;;		On entry : 0/0
  7895 ;;		On exit  : 0/0
  7896 ;;		Unchanged: 0/0
  7897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7898 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7899 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7900 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7901 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7902 ;;Total ram usage:        4 bytes
  7903 ;; Hardware stack levels used:    1
  7904 ;; Hardware stack levels required when called:    4
  7905 ;; This function calls:
  7906 ;;		_CC1Read
  7907 ;; This function is called by:
  7908 ;;		_RTXReadPkt
  7909 ;; This function uses a non-reentrant model
  7910 ;;
  7911                           
  7912                           
  7913                           ;psect for function _RTXRcvPkt
  7914  08C9                     _RTXRcvPkt:	
  7915                           
  7916                           ;incstack = 0
  7917                           ; Regs used in _RTXRcvPkt: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7918                           ;RTXRcvPkt@dst stored from wreg
  7919  08C9  0020               	movlb	0	; select bank0
  7920  08CA  00A3               	movwf	RTXRcvPkt@dst
  7921                           
  7922                           ;RTX.c: 155: CC1Read(0x3F,dst,len);
  7923  08CB  0823               	movf	RTXRcvPkt@dst,w
  7924  08CC  00A1               	movwf	??_RTXRcvPkt
  7925  08CD  0821               	movf	??_RTXRcvPkt,w
  7926  08CE  00F7               	movwf	CC1Read@dst
  7927  08CF  0820               	movf	RTXRcvPkt@len,w
  7928  08D0  00A2               	movwf	??_RTXRcvPkt+1
  7929  08D1  0822               	movf	??_RTXRcvPkt+1,w
  7930  08D2  00F8               	movwf	CC1Read@len
  7931  08D3  303F               	movlw	63
  7932  08D4  3189  21E4         	fcall	_CC1Read
  7933  08D6  0008               	return
  7934  08D7                     __end_of_RTXRcvPkt:	
  7935                           
  7936                           	psect	text35
  7937  09E4                     __ptext35:	
  7938 ;; *************** function _CC1Read *****************
  7939 ;; Defined at:
  7940 ;;		line 116 in file "CC1.c"
  7941 ;; Parameters:    Size  Location     Type
  7942 ;;  addr            1    wreg     unsigned char 
  7943 ;;  dst             1    7[COMMON] PTR unsigned char 
  7944 ;;		 -> pktRx(11), RTXReadPkt@numRxByte(1), RTXSndPkt@numTxByte(1), RTXSndPkt@numRxByte(1), 
  7945 ;;		 -> RTXSndPkt@sta(1), 
  7946 ;;  len             1    8[COMMON] unsigned char 
  7947 ;; Auto vars:     Size  Location     Type
  7948 ;;  addr            1   10[COMMON] unsigned char 
  7949 ;;  cc1Addr         1   11[COMMON] unsigned char 
  7950 ;; Return value:  Size  Location     Type
  7951 ;;		None               void
  7952 ;; Registers used:
  7953 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7954 ;; Tracked objects:
  7955 ;;		On entry : 0/0
  7956 ;;		On exit  : 0/0
  7957 ;;		Unchanged: 0/0
  7958 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7959 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7960 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7961 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7962 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7963 ;;Total ram usage:        5 bytes
  7964 ;; Hardware stack levels used:    1
  7965 ;; Hardware stack levels required when called:    3
  7966 ;; This function calls:
  7967 ;;		_SPIRead
  7968 ;;		_SPIWrite
  7969 ;; This function is called by:
  7970 ;;		_RTXSndPkt
  7971 ;;		_RTXRcvPkt
  7972 ;;		_RTXReadPkt
  7973 ;; This function uses a non-reentrant model
  7974 ;;
  7975                           
  7976                           
  7977                           ;psect for function _CC1Read
  7978  09E4                     _CC1Read:	
  7979                           
  7980                           ;incstack = 0
  7981                           ; Regs used in _CC1Read: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7982                           ;CC1Read@addr stored from wreg
  7983  09E4  00FA               	movwf	CC1Read@addr
  7984                           
  7985                           ;CC1.c: 118: unsigned char cc1Addr;
  7986                           ;CC1.c: 121: LATAbits.LATA5=0;
  7987  09E5  0022               	movlb	2	; select bank2
  7988  09E6  128C               	bcf	12,5	;volatile
  7989                           
  7990                           ;CC1.c: 124: cc1Addr=((addr&0b00111111)|0b11000000);
  7991  09E7  087A               	movf	CC1Read@addr,w
  7992  09E8  393F               	andlw	63
  7993  09E9  38C0               	iorlw	192
  7994  09EA  00F9               	movwf	??_CC1Read
  7995  09EB  0879               	movf	??_CC1Read,w
  7996  09EC  00FB               	movwf	CC1Read@cc1Addr
  7997                           
  7998                           ;CC1.c: 125: SPIWrite((&(cc1Addr)),1);
  7999  09ED  307B               	movlw	low CC1Read@cc1Addr
  8000  09EE  00F1               	movwf	SPIWrite@srcPtr
  8001  09EF  3000               	movlw	high CC1Read@cc1Addr
  8002  09F0  00F2               	movwf	SPIWrite@srcPtr+1
  8003  09F1  01F3               	clrf	SPIWrite@len
  8004  09F2  0AF3               	incf	SPIWrite@len,f
  8005  09F3  318A  2200  3189   	fcall	_SPIWrite
  8006                           
  8007                           ;CC1.c: 128: SPIRead(dst,len);
  8008  09F6  0878               	movf	CC1Read@len,w
  8009  09F7  00F9               	movwf	??_CC1Read
  8010  09F8  0879               	movf	??_CC1Read,w
  8011  09F9  00F1               	movwf	SPIRead@len
  8012  09FA  0877               	movf	CC1Read@dst,w
  8013  09FB  318A  22D3         	fcall	_SPIRead
  8014                           
  8015                           ;CC1.c: 131: LATAbits.LATA5=1;
  8016  09FD  0022               	movlb	2	; select bank2
  8017  09FE  168C               	bsf	12,5	;volatile
  8018  09FF  0008               	return
  8019  0A00                     __end_of_CC1Read:	
  8020                           
  8021                           	psect	text36
  8022  0AD3                     __ptext36:	
  8023 ;; *************** function _SPIRead *****************
  8024 ;; Defined at:
  8025 ;;		line 25 in file "SPI.c"
  8026 ;; Parameters:    Size  Location     Type
  8027 ;;  dstPtr          1    wreg     PTR unsigned char 
  8028 ;;		 -> pktRx(11), RTXReadPkt@numRxByte(1), RTXSndPkt@numTxByte(1), RTXSndPkt@numRxByte(1), 
  8029 ;;		 -> RTXSndPkt@sta(1), 
  8030 ;;  len             1    1[COMMON] unsigned char 
  8031 ;; Auto vars:     Size  Location     Type
  8032 ;;  dstPtr          1    4[COMMON] PTR unsigned char 
  8033 ;;		 -> pktRx(11), RTXReadPkt@numRxByte(1), RTXSndPkt@numTxByte(1), RTXSndPkt@numRxByte(1), 
  8034 ;;		 -> RTXSndPkt@sta(1), 
  8035 ;;  i               1    5[COMMON] unsigned char 
  8036 ;; Return value:  Size  Location     Type
  8037 ;;		None               void
  8038 ;; Registers used:
  8039 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8040 ;; Tracked objects:
  8041 ;;		On entry : 0/0
  8042 ;;		On exit  : 0/0
  8043 ;;		Unchanged: 0/0
  8044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8045 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8046 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8047 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8048 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8049 ;;Total ram usage:        5 bytes
  8050 ;; Hardware stack levels used:    1
  8051 ;; Hardware stack levels required when called:    2
  8052 ;; This function calls:
  8053 ;;		Nothing
  8054 ;; This function is called by:
  8055 ;;		_CC1Read
  8056 ;; This function uses a non-reentrant model
  8057 ;;
  8058                           
  8059                           
  8060                           ;psect for function _SPIRead
  8061  0AD3                     _SPIRead:	
  8062                           
  8063                           ;incstack = 0
  8064                           ; Regs used in _SPIRead: [wreg+fsr1l+fsr1h+status,2+status,0]
  8065                           ;SPIRead@dstPtr stored from wreg
  8066  0AD3  00F4               	movwf	SPIRead@dstPtr
  8067                           
  8068                           ;SPI.c: 27: unsigned char i;
  8069                           ;SPI.c: 29: for(i=0;i<len;i++)
  8070  0AD4  01F5               	clrf	SPIRead@i
  8071  0AD5                     l3406:	
  8072  0AD5  0871               	movf	SPIRead@len,w
  8073  0AD6  0275               	subwf	SPIRead@i,w
  8074  0AD7  1803               	btfsc	3,0
  8075  0AD8  0008               	return
  8076                           
  8077                           ;SPI.c: 30: {
  8078                           ;SPI.c: 31: PIR1bits.SSPIF=0;
  8079  0AD9  0020               	movlb	0	; select bank0
  8080  0ADA  1191               	bcf	17,3	;volatile
  8081                           
  8082                           ;SPI.c: 32: SSPBUF=0xFF;
  8083  0ADB  30FF               	movlw	255
  8084  0ADC  0024               	movlb	4	; select bank4
  8085  0ADD  0091               	movwf	17	;volatile
  8086  0ADE                     l69:	
  8087                           ;SPI.c: 33: while(!(PIR1bits.SSPIF))
  8088                           
  8089  0ADE  0020               	movlb	0	; select bank0
  8090  0ADF  1991               	btfsc	17,3	;volatile
  8091  0AE0  2AE3               	goto	l3402
  8092                           
  8093                           ;SPI.c: 34: __nop();
  8094  0AE1  0000               	nop
  8095  0AE2  2ADE               	goto	l69
  8096  0AE3                     l3402:	
  8097                           
  8098                           ;SPI.c: 35: (*(dstPtr+i))=SSPBUF;
  8099  0AE3  0024               	movlb	4	; select bank4
  8100  0AE4  0811               	movf	17,w	;volatile
  8101  0AE5  00F2               	movwf	??_SPIRead
  8102  0AE6  0875               	movf	SPIRead@i,w
  8103  0AE7  0774               	addwf	SPIRead@dstPtr,w
  8104  0AE8  00F3               	movwf	??_SPIRead+1
  8105  0AE9  0873               	movf	??_SPIRead+1,w
  8106  0AEA  0086               	movwf	6
  8107  0AEB  0187               	clrf	7
  8108  0AEC  0872               	movf	??_SPIRead,w
  8109  0AED  0081               	movwf	1
  8110  0AEE  3001               	movlw	1
  8111  0AEF  00F2               	movwf	??_SPIRead
  8112  0AF0  0872               	movf	??_SPIRead,w
  8113  0AF1  07F5               	addwf	SPIRead@i,f
  8114  0AF2  2AD5               	goto	l3406
  8115  0AF3                     __end_of_SPIRead:	
  8116                           
  8117                           	psect	text37
  8118  087F                     __ptext37:	
  8119 ;; *************** function _PGMPgmOff *****************
  8120 ;; Defined at:
  8121 ;;		line 71 in file "PGM.c"
  8122 ;; Parameters:    Size  Location     Type
  8123 ;;		None
  8124 ;; Auto vars:     Size  Location     Type
  8125 ;;		None
  8126 ;; Return value:  Size  Location     Type
  8127 ;;		None               void
  8128 ;; Registers used:
  8129 ;;		None
  8130 ;; Tracked objects:
  8131 ;;		On entry : 0/0
  8132 ;;		On exit  : 0/0
  8133 ;;		Unchanged: 0/0
  8134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8138 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8139 ;;Total ram usage:        0 bytes
  8140 ;; Hardware stack levels used:    1
  8141 ;; Hardware stack levels required when called:    2
  8142 ;; This function calls:
  8143 ;;		Nothing
  8144 ;; This function is called by:
  8145 ;;		_RTXReadPkt
  8146 ;;		_RTXSendPgm
  8147 ;;		_SYSTask
  8148 ;; This function uses a non-reentrant model
  8149 ;;
  8150                           
  8151                           
  8152                           ;psect for function _PGMPgmOff
  8153  087F                     _PGMPgmOff:	
  8154                           
  8155                           ;PGM.c: 74: LATCbits.LATC7=1;
  8156                           
  8157                           ;incstack = 0
  8158                           ; Regs used in _PGMPgmOff: []
  8159  087F  0022               	movlb	2	; select bank2
  8160  0880  178E               	bsf	14,7	;volatile
  8161                           
  8162                           ;PGM.c: 76: pgm_flg.pgmonoff=0;
  8163  0881  107C               	bcf	_pgm_flg,0
  8164  0882  0008               	return
  8165  0883                     __end_of_PGMPgmOff:	
  8166                           
  8167                           	psect	text38
  8168  0A1D                     __ptext38:	
  8169 ;; *************** function _LEDNormalFlash *****************
  8170 ;; Defined at:
  8171 ;;		line 24 in file "LED.c"
  8172 ;; Parameters:    Size  Location     Type
  8173 ;;  num             1    wreg     unsigned char 
  8174 ;; Auto vars:     Size  Location     Type
  8175 ;;  num             1    8[COMMON] unsigned char 
  8176 ;;  i               1    9[COMMON] unsigned char 
  8177 ;; Return value:  Size  Location     Type
  8178 ;;		None               void
  8179 ;; Registers used:
  8180 ;;		wreg, status,2, status,0, pclath, cstack
  8181 ;; Tracked objects:
  8182 ;;		On entry : 0/0
  8183 ;;		On exit  : 0/0
  8184 ;;		Unchanged: 0/0
  8185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8187 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8188 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8189 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8190 ;;Total ram usage:        3 bytes
  8191 ;; Hardware stack levels used:    1
  8192 ;; Hardware stack levels required when called:    3
  8193 ;; This function calls:
  8194 ;;		_DLYDelay_ms
  8195 ;; This function is called by:
  8196 ;;		_PGMSelLong
  8197 ;;		_RTXReadPkt
  8198 ;; This function uses a non-reentrant model
  8199 ;;
  8200                           
  8201                           
  8202                           ;psect for function _LEDNormalFlash
  8203  0A1D                     _LEDNormalFlash:	
  8204                           
  8205                           ;incstack = 0
  8206                           ; Regs used in _LEDNormalFlash: [wreg+status,2+status,0+pclath+cstack]
  8207                           ;LEDNormalFlash@num stored from wreg
  8208  0A1D  00F8               	movwf	LEDNormalFlash@num
  8209                           
  8210                           ;LED.c: 26: unsigned char i;
  8211                           ;LED.c: 28: for(i=0;i<num;i++)
  8212  0A1E  01F9               	clrf	LEDNormalFlash@i
  8213  0A1F                     l4046:	
  8214  0A1F  0878               	movf	LEDNormalFlash@num,w
  8215  0A20  0279               	subwf	LEDNormalFlash@i,w
  8216  0A21  1803               	btfsc	3,0
  8217  0A22  0008               	return
  8218  0A23  0064               	clrwdt	;# 
  8219                           
  8220                           ;LED.c: 31: LATCbits.LATC7=0;
  8221  0A24  0022               	movlb	2	; select bank2
  8222  0A25  138E               	bcf	14,7	;volatile
  8223                           
  8224                           ;LED.c: 32: DLYDelay_ms(200);
  8225  0A26  30C8               	movlw	200
  8226  0A27  00F1               	movwf	DLYDelay_ms@val
  8227  0A28  3000               	movlw	0
  8228  0A29  00F2               	movwf	DLYDelay_ms@val+1
  8229  0A2A  3189  21B1  318A   	fcall	_DLYDelay_ms
  8230                           
  8231                           ;LED.c: 33: LATCbits.LATC7=1;
  8232  0A2D  0022               	movlb	2	; select bank2
  8233  0A2E  178E               	bsf	14,7	;volatile
  8234                           
  8235                           ;LED.c: 34: DLYDelay_ms(200);
  8236  0A2F  30C8               	movlw	200
  8237  0A30  00F1               	movwf	DLYDelay_ms@val
  8238  0A31  3000               	movlw	0
  8239  0A32  00F2               	movwf	DLYDelay_ms@val+1
  8240  0A33  3189  21B1  318A   	fcall	_DLYDelay_ms
  8241  0A36  3001               	movlw	1
  8242  0A37  00F7               	movwf	??_LEDNormalFlash
  8243  0A38  0877               	movf	??_LEDNormalFlash,w
  8244  0A39  07F9               	addwf	LEDNormalFlash@i,f
  8245  0A3A  2A1F               	goto	l4046
  8246  0A3B                     __end_of_LEDNormalFlash:	
  8247                           
  8248                           	psect	text39
  8249  09B1                     __ptext39:	
  8250 ;; *************** function _DLYDelay_ms *****************
  8251 ;; Defined at:
  8252 ;;		line 17 in file "DLY.c"
  8253 ;; Parameters:    Size  Location     Type
  8254 ;;  val             2    1[COMMON] unsigned short 
  8255 ;; Auto vars:     Size  Location     Type
  8256 ;;  i               2    5[COMMON] unsigned short 
  8257 ;; Return value:  Size  Location     Type
  8258 ;;		None               void
  8259 ;; Registers used:
  8260 ;;		wreg, status,2
  8261 ;; Tracked objects:
  8262 ;;		On entry : 0/0
  8263 ;;		On exit  : 0/0
  8264 ;;		Unchanged: 0/0
  8265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8266 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8267 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8268 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8269 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8270 ;;Total ram usage:        6 bytes
  8271 ;; Hardware stack levels used:    1
  8272 ;; Hardware stack levels required when called:    2
  8273 ;; This function calls:
  8274 ;;		Nothing
  8275 ;; This function is called by:
  8276 ;;		_ADCConv
  8277 ;;		_CC1Init
  8278 ;;		_LEDNormalFlash
  8279 ;;		_LEDFastFlash
  8280 ;;		_RTXAwake
  8281 ;;		_RTXStartSendData
  8282 ;;		_RTXStartSendPgm
  8283 ;;		_LEDVFastFlash
  8284 ;; This function uses a non-reentrant model
  8285 ;;
  8286                           
  8287                           
  8288                           ;psect for function _DLYDelay_ms
  8289  09B1                     _DLYDelay_ms:	
  8290                           
  8291                           ;DLY.c: 19: unsigned short i;
  8292                           ;DLY.c: 21: for(i=0;i<val;i++)
  8293                           
  8294                           ;incstack = 0
  8295                           ; Regs used in _DLYDelay_ms: [wreg+status,2]
  8296  09B1  01F5               	clrf	DLYDelay_ms@i
  8297  09B2  01F6               	clrf	DLYDelay_ms@i+1
  8298  09B3                     l154:	
  8299  09B3  0872               	movf	DLYDelay_ms@val+1,w
  8300  09B4  0276               	subwf	DLYDelay_ms@i+1,w
  8301  09B5  1D03               	skipz
  8302  09B6  29B9               	goto	u3735
  8303  09B7  0871               	movf	DLYDelay_ms@val,w
  8304  09B8  0275               	subwf	DLYDelay_ms@i,w
  8305  09B9                     u3735:	
  8306  09B9  1803               	btfsc	3,0
  8307  09BA  0008               	return
  8308  09BB  0064               	clrwdt	;# 
  8309                           
  8310                           ;DLY.c: 24: _delay((unsigned long)((1)*(8000000/4000.0)));
  8311  09BC  3003               	movlw	3
  8312  09BD  00F4               	movwf	??_DLYDelay_ms+1
  8313  09BE  3097               	movlw	151
  8314  09BF  00F3               	movwf	??_DLYDelay_ms
  8315  09C0                     u5017:	
  8316  09C0  0BF3               	decfsz	??_DLYDelay_ms,f
  8317  09C1  29C0               	goto	u5017
  8318  09C2  0BF4               	decfsz	??_DLYDelay_ms+1,f
  8319  09C3  29C0               	goto	u5017
  8320  09C4  3200               	nop2
  8321  09C5  3001               	movlw	1
  8322  09C6  07F5               	addwf	DLYDelay_ms@i,f
  8323  09C7  3000               	movlw	0
  8324  09C8  3DF6               	addwfc	DLYDelay_ms@i+1,f
  8325  09C9  29B3               	goto	l154
  8326  09CA                     __end_of_DLYDelay_ms:	
  8327                           
  8328                           	psect	text40
  8329  0944                     __ptext40:	
  8330 ;; *************** function _CC1Strobe *****************
  8331 ;; Defined at:
  8332 ;;		line 101 in file "CC1.c"
  8333 ;; Parameters:    Size  Location     Type
  8334 ;;  e_stb           1    wreg     enum E1836
  8335 ;; Auto vars:     Size  Location     Type
  8336 ;;  e_stb           1    8[COMMON] enum E1836
  8337 ;;  cc1Stb          1    9[COMMON] unsigned char 
  8338 ;; Return value:  Size  Location     Type
  8339 ;;		None               void
  8340 ;; Registers used:
  8341 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8342 ;; Tracked objects:
  8343 ;;		On entry : 0/0
  8344 ;;		On exit  : 0/0
  8345 ;;		Unchanged: 0/0
  8346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8348 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8349 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8350 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8351 ;;Total ram usage:        3 bytes
  8352 ;; Hardware stack levels used:    1
  8353 ;; Hardware stack levels required when called:    3
  8354 ;; This function calls:
  8355 ;;		_SPIWrite
  8356 ;; This function is called by:
  8357 ;;		_CC1Init
  8358 ;;		_RTXInit
  8359 ;;		_RTXSndPkt
  8360 ;;		_RTXReadPkt
  8361 ;;		_CC1Sleep
  8362 ;; This function uses a non-reentrant model
  8363 ;;
  8364                           
  8365                           
  8366                           ;psect for function _CC1Strobe
  8367  0944                     _CC1Strobe:	
  8368                           
  8369                           ;incstack = 0
  8370                           ; Regs used in _CC1Strobe: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8371                           ;CC1Strobe@e_stb stored from wreg
  8372  0944  00F8               	movwf	CC1Strobe@e_stb
  8373                           
  8374                           ;CC1.c: 103: unsigned char cc1Stb;
  8375                           ;CC1.c: 106: LATAbits.LATA5=0;
  8376  0945  0022               	movlb	2	; select bank2
  8377  0946  128C               	bcf	12,5	;volatile
  8378                           
  8379                           ;CC1.c: 109: cc1Stb=((e_stb&0b00111111)|0b10000000);
  8380  0947  0878               	movf	CC1Strobe@e_stb,w
  8381  0948  393F               	andlw	63
  8382  0949  3880               	iorlw	128
  8383  094A  00F7               	movwf	??_CC1Strobe
  8384  094B  0877               	movf	??_CC1Strobe,w
  8385  094C  00F9               	movwf	CC1Strobe@cc1Stb
  8386                           
  8387                           ;CC1.c: 110: SPIWrite((&(cc1Stb)),1);
  8388  094D  3079               	movlw	low CC1Strobe@cc1Stb
  8389  094E  00F1               	movwf	SPIWrite@srcPtr
  8390  094F  3000               	movlw	high CC1Strobe@cc1Stb
  8391  0950  00F2               	movwf	SPIWrite@srcPtr+1
  8392  0951  01F3               	clrf	SPIWrite@len
  8393  0952  0AF3               	incf	SPIWrite@len,f
  8394  0953  318A  2200         	fcall	_SPIWrite
  8395                           
  8396                           ;CC1.c: 113: LATAbits.LATA5=1;
  8397  0955  0022               	movlb	2	; select bank2
  8398  0956  168C               	bsf	12,5	;volatile
  8399  0957  0008               	return
  8400  0958                     __end_of_CC1Strobe:	
  8401                           
  8402                           	psect	text41
  8403  0A00                     __ptext41:	
  8404 ;; *************** function _SPIWrite *****************
  8405 ;; Defined at:
  8406 ;;		line 39 in file "SPI.c"
  8407 ;; Parameters:    Size  Location     Type
  8408 ;;  srcPtr          2    1[COMMON] PTR unsigned char 
  8409 ;;		 -> pktTx(11), CC1Write@cc1Addr(1), CC1Read@cc1Addr(1), CC1Strobe@cc1Stb(1), 
  8410 ;;		 -> cc1PaTable(8), cc1InitVal(47), 
  8411 ;;  len             1    3[COMMON] unsigned char 
  8412 ;; Auto vars:     Size  Location     Type
  8413 ;;  i               1    6[COMMON] unsigned char 
  8414 ;; Return value:  Size  Location     Type
  8415 ;;		None               void
  8416 ;; Registers used:
  8417 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8418 ;; Tracked objects:
  8419 ;;		On entry : 0/0
  8420 ;;		On exit  : 0/0
  8421 ;;		Unchanged: 0/0
  8422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8423 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8424 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8425 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8426 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8427 ;;Total ram usage:        6 bytes
  8428 ;; Hardware stack levels used:    1
  8429 ;; Hardware stack levels required when called:    2
  8430 ;; This function calls:
  8431 ;;		Nothing
  8432 ;; This function is called by:
  8433 ;;		_CC1Strobe
  8434 ;;		_CC1Read
  8435 ;;		_CC1Write
  8436 ;; This function uses a non-reentrant model
  8437 ;;
  8438                           
  8439                           
  8440                           ;psect for function _SPIWrite
  8441  0A00                     _SPIWrite:	
  8442                           
  8443                           ;SPI.c: 41: unsigned char i;
  8444                           ;SPI.c: 43: for(i=0;i<len;i++)
  8445                           
  8446                           ;incstack = 0
  8447                           ; Regs used in _SPIWrite: [wreg+fsr1l+fsr1h+status,2+status,0]
  8448  0A00  01F6               	clrf	SPIWrite@i
  8449  0A01                     l3414:	
  8450  0A01  0873               	movf	SPIWrite@len,w
  8451  0A02  0276               	subwf	SPIWrite@i,w
  8452  0A03  1803               	btfsc	3,0
  8453  0A04  0008               	return
  8454                           
  8455                           ;SPI.c: 44: {
  8456                           ;SPI.c: 45: PIR1bits.SSPIF=0;
  8457  0A05  0020               	movlb	0	; select bank0
  8458  0A06  1191               	bcf	17,3	;volatile
  8459                           
  8460                           ;SPI.c: 46: SSPBUF=(*(srcPtr+i));
  8461  0A07  0876               	movf	SPIWrite@i,w
  8462  0A08  00F4               	movwf	??_SPIWrite
  8463  0A09  01F5               	clrf	??_SPIWrite+1
  8464  0A0A  0874               	movf	??_SPIWrite,w
  8465  0A0B  0771               	addwf	SPIWrite@srcPtr,w
  8466  0A0C  0086               	movwf	6
  8467  0A0D  0875               	movf	??_SPIWrite+1,w
  8468  0A0E  3D72               	addwfc	SPIWrite@srcPtr+1,w
  8469  0A0F  0087               	movwf	7
  8470  0A10  0801               	movf	1,w
  8471  0A11  0024               	movlb	4	; select bank4
  8472  0A12  0091               	movwf	17	;volatile
  8473  0A13                     l78:	
  8474                           ;SPI.c: 47: while(!(PIR1bits.SSPIF))
  8475                           
  8476  0A13  0020               	movlb	0	; select bank0
  8477  0A14  1991               	btfsc	17,3	;volatile
  8478  0A15  2A18               	goto	l3412
  8479                           
  8480                           ;SPI.c: 48: __nop();
  8481  0A16  0000               	nop
  8482  0A17  2A13               	goto	l78
  8483  0A18                     l3412:	
  8484  0A18  3001               	movlw	1
  8485  0A19  00F4               	movwf	??_SPIWrite
  8486  0A1A  0874               	movf	??_SPIWrite,w
  8487  0A1B  07F6               	addwf	SPIWrite@i,f
  8488  0A1C  2A01               	goto	l3414
  8489  0A1D                     __end_of_SPIWrite:	
  8490                           
  8491                           	psect	text42
  8492  096C                     __ptext42:	
  8493 ;; *************** function _PGMInit *****************
  8494 ;; Defined at:
  8495 ;;		line 17 in file "PGM.c"
  8496 ;; Parameters:    Size  Location     Type
  8497 ;;  state           1    wreg     unsigned char 
  8498 ;; Auto vars:     Size  Location     Type
  8499 ;;  state           1   11[COMMON] unsigned char 
  8500 ;; Return value:  Size  Location     Type
  8501 ;;		None               void
  8502 ;; Registers used:
  8503 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8504 ;; Tracked objects:
  8505 ;;		On entry : 0/0
  8506 ;;		On exit  : 0/0
  8507 ;;		Unchanged: 0/0
  8508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8510 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8512 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8513 ;;Total ram usage:        1 bytes
  8514 ;; Hardware stack levels used:    1
  8515 ;; Hardware stack levels required when called:    6
  8516 ;; This function calls:
  8517 ;;		_PGMCheckNvm
  8518 ;;		_PGMReadNvm
  8519 ;; This function is called by:
  8520 ;;		_main
  8521 ;; This function uses a non-reentrant model
  8522 ;;
  8523                           
  8524                           
  8525                           ;psect for function _PGMInit
  8526  096C                     _PGMInit:	
  8527                           
  8528                           ;incstack = 0
  8529                           ; Regs used in _PGMInit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8530                           ;PGMInit@state stored from wreg
  8531  096C  00FB               	movwf	PGMInit@state
  8532                           
  8533                           ;PGM.c: 19: switch(state)
  8534  096D  2979               	goto	l4334
  8535  096E                     l4324:	
  8536                           ;PGM.c: 20: {
  8537                           ;PGM.c: 21: case 0:
  8538                           
  8539                           
  8540                           ;PGM.c: 23: T1CON=0b00000001;
  8541  096E  3001               	movlw	1
  8542  096F  0020               	movlb	0	; select bank0
  8543  0970  0098               	movwf	24	;volatile
  8544                           
  8545                           ;PGM.c: 24: break;
  8546  0971  0008               	return
  8547  0972                     l4326:	
  8548                           ;PGM.c: 25: case 1:
  8549                           
  8550                           
  8551                           ;PGM.c: 27: pgm_flg.val=0;
  8552  0972  01FC               	clrf	_pgm_flg
  8553                           
  8554                           ;PGM.c: 28: PGMReadNvm();
  8555  0973  3188  20E6  3189   	fcall	_PGMReadNvm
  8556                           
  8557                           ;PGM.c: 29: PGMCheckNvm();
  8558  0976  3188  20A5         	fcall	_PGMCheckNvm
  8559                           
  8560                           ;PGM.c: 34: }
  8561                           
  8562                           ;PGM.c: 30: break;
  8563  0978  0008               	return
  8564  0979                     l4334:	
  8565  0979  087B               	movf	PGMInit@state,w
  8566                           
  8567                           ; Switch size 1, requested type "space"
  8568                           ; Number of cases is 2, Range of values is 0 to 1
  8569                           ; switch strategies available:
  8570                           ; Name         Instructions Cycles
  8571                           ; simple_byte            7     4 (average)
  8572                           ; direct_byte           10     6 (fixed)
  8573                           ; jumptable            260     6 (fixed)
  8574                           ;	Chosen strategy is simple_byte
  8575  097A  3A00               	xorlw	0	; case 0
  8576  097B  1903               	skipnz
  8577  097C  296E               	goto	l4324
  8578  097D  3A01               	xorlw	1	; case 1
  8579  097E  1903               	skipnz
  8580  097F  2972               	goto	l4326
  8581  0980  2981               	goto	l383
  8582  0981                     l383:	
  8583  0981  0008               	return
  8584  0982                     __end_of_PGMInit:	
  8585                           
  8586                           	psect	text43
  8587  08E6                     __ptext43:	
  8588 ;; *************** function _PGMReadNvm *****************
  8589 ;; Defined at:
  8590 ;;		line 41 in file "PGM.c"
  8591 ;; Parameters:    Size  Location     Type
  8592 ;;		None
  8593 ;; Auto vars:     Size  Location     Type
  8594 ;;		None
  8595 ;; Return value:  Size  Location     Type
  8596 ;;		None               void
  8597 ;; Registers used:
  8598 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8599 ;; Tracked objects:
  8600 ;;		On entry : 0/0
  8601 ;;		On exit  : 0/0
  8602 ;;		Unchanged: 0/0
  8603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8605 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8606 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8607 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8608 ;;Total ram usage:        2 bytes
  8609 ;; Hardware stack levels used:    1
  8610 ;; Hardware stack levels required when called:    3
  8611 ;; This function calls:
  8612 ;;		_NVMRead
  8613 ;; This function is called by:
  8614 ;;		_PGMInit
  8615 ;; This function uses a non-reentrant model
  8616 ;;
  8617                           
  8618                           
  8619                           ;psect for function _PGMReadNvm
  8620  08E6                     _PGMReadNvm:	
  8621                           
  8622                           ;PGM.c: 43: NVMRead((unsigned short)(&(nvm_pgm_cfg)),(char *)(&(pgm_cfg)),sizeof(ts_PGM_
      +                          CFG));
  8623                           
  8624                           ;incstack = 0
  8625                           ; Regs used in _PGMReadNvm: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8626  08E6  3020               	movlw	32
  8627  08E7  00F1               	movwf	NVMRead@addr
  8628  08E8  3038               	movlw	56
  8629  08E9  00F2               	movwf	NVMRead@addr+1
  8630  08EA  30D1               	movlw	(low (_pgm_cfg| 0))& (0+255)
  8631  08EB  00F8               	movwf	??_PGMReadNvm
  8632  08EC  0878               	movf	??_PGMReadNvm,w
  8633  08ED  00F3               	movwf	NVMRead@dest
  8634  08EE  3005               	movlw	5
  8635  08EF  00F9               	movwf	??_PGMReadNvm+1
  8636  08F0  0879               	movf	??_PGMReadNvm+1,w
  8637  08F1  00F4               	movwf	NVMRead@len
  8638  08F2  318B  235B         	fcall	_NVMRead
  8639  08F4  0008               	return
  8640  08F5                     __end_of_PGMReadNvm:	
  8641                           
  8642                           	psect	text44
  8643  0B5B                     __ptext44:	
  8644 ;; *************** function _NVMRead *****************
  8645 ;; Defined at:
  8646 ;;		line 23 in file "NVM.c"
  8647 ;; Parameters:    Size  Location     Type
  8648 ;;  addr            2    1[COMMON] unsigned short 
  8649 ;;  dest            1    3[COMMON] PTR unsigned char 
  8650 ;;		 -> pgm_cfg(5), 
  8651 ;;  len             1    4[COMMON] unsigned char 
  8652 ;; Auto vars:     Size  Location     Type
  8653 ;;  i               1    7[COMMON] unsigned char 
  8654 ;; Return value:  Size  Location     Type
  8655 ;;		None               void
  8656 ;; Registers used:
  8657 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8658 ;; Tracked objects:
  8659 ;;		On entry : 0/0
  8660 ;;		On exit  : 0/0
  8661 ;;		Unchanged: 0/0
  8662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8663 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8664 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8665 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8666 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8667 ;;Total ram usage:        7 bytes
  8668 ;; Hardware stack levels used:    1
  8669 ;; Hardware stack levels required when called:    2
  8670 ;; This function calls:
  8671 ;;		Nothing
  8672 ;; This function is called by:
  8673 ;;		_PGMReadNvm
  8674 ;; This function uses a non-reentrant model
  8675 ;;
  8676                           
  8677                           
  8678                           ;psect for function _NVMRead
  8679  0B5B                     _NVMRead:	
  8680                           
  8681                           ;NVM.c: 25: unsigned char i;
  8682                           ;NVM.c: 27: PMCON1bits.CFGS=0;
  8683                           
  8684                           ;incstack = 0
  8685                           ; Regs used in _NVMRead: [wreg+fsr1l+fsr1h+status,2+status,0]
  8686  0B5B  0023               	movlb	3	; select bank3
  8687  0B5C  1315               	bcf	21,6	;volatile
  8688                           
  8689                           ;NVM.c: 28: for(i=0;i<len;i++)
  8690  0B5D  01F7               	clrf	NVMRead@i
  8691  0B5E                     l4060:	
  8692  0B5E  0874               	movf	NVMRead@len,w
  8693  0B5F  0277               	subwf	NVMRead@i,w
  8694  0B60  1803               	btfsc	3,0
  8695  0B61  0008               	return
  8696  0B62  0064               	clrwdt	;# 
  8697                           
  8698                           ;NVM.c: 31: PMADR=(addr+i);
  8699  0B63  0877               	movf	NVMRead@i,w
  8700  0B64  0771               	addwf	NVMRead@addr,w
  8701  0B65  00F5               	movwf	??_NVMRead
  8702  0B66  0872               	movf	NVMRead@addr+1,w
  8703  0B67  1803               	skipnc
  8704  0B68  0A72               	incf	NVMRead@addr+1,w
  8705  0B69  00F6               	movwf	??_NVMRead+1
  8706  0B6A  0875               	movf	??_NVMRead,w
  8707  0B6B  0023               	movlb	3	; select bank3
  8708  0B6C  0091               	movwf	17	;volatile
  8709  0B6D  0876               	movf	??_NVMRead+1,w
  8710  0B6E  0092               	movwf	18	;volatile
  8711                           
  8712                           ;NVM.c: 32: PMCON1bits.RD=1;
  8713  0B6F  1415               	bsf	21,0	;volatile
  8714  0B70                     l245:	
  8715                           ;NVM.c: 33: while(PMCON1bits.RD);
  8716                           
  8717  0B70  1815               	btfsc	21,0	;volatile
  8718  0B71  2B70               	goto	l245
  8719                           
  8720                           ;NVM.c: 34: (*(dest+i))=PMDAT;
  8721  0B72  0813               	movf	19,w	;volatile
  8722  0B73  00F5               	movwf	??_NVMRead
  8723  0B74  0877               	movf	NVMRead@i,w
  8724  0B75  0773               	addwf	NVMRead@dest,w
  8725  0B76  00F6               	movwf	??_NVMRead+1
  8726  0B77  0876               	movf	??_NVMRead+1,w
  8727  0B78  0086               	movwf	6
  8728  0B79  0187               	clrf	7
  8729  0B7A  0875               	movf	??_NVMRead,w
  8730  0B7B  0081               	movwf	1
  8731  0B7C  3001               	movlw	1
  8732  0B7D  00F5               	movwf	??_NVMRead
  8733  0B7E  0875               	movf	??_NVMRead,w
  8734  0B7F  07F7               	addwf	NVMRead@i,f
  8735  0B80  2B5E               	goto	l4060
  8736  0B81                     __end_of_NVMRead:	
  8737                           
  8738                           	psect	text45
  8739  08A5                     __ptext45:	
  8740 ;; *************** function _PGMCheckNvm *****************
  8741 ;; Defined at:
  8742 ;;		line 51 in file "PGM.c"
  8743 ;; Parameters:    Size  Location     Type
  8744 ;;		None
  8745 ;; Auto vars:     Size  Location     Type
  8746 ;;		None
  8747 ;; Return value:  Size  Location     Type
  8748 ;;		None               void
  8749 ;; Registers used:
  8750 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8751 ;; Tracked objects:
  8752 ;;		On entry : 0/0
  8753 ;;		On exit  : 0/0
  8754 ;;		Unchanged: 0/0
  8755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8757 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8759 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8760 ;;Total ram usage:        0 bytes
  8761 ;; Hardware stack levels used:    1
  8762 ;; Hardware stack levels required when called:    5
  8763 ;; This function calls:
  8764 ;;		_PGMNvmReset
  8765 ;; This function is called by:
  8766 ;;		_PGMInit
  8767 ;; This function uses a non-reentrant model
  8768 ;;
  8769                           
  8770                           
  8771                           ;psect for function _PGMCheckNvm
  8772  08A5                     _PGMCheckNvm:	
  8773                           
  8774                           ;PGM.c: 53: if(pgm_cfg.valChk1!=0x5C || pgm_cfg.valChk2!=0xC5)
  8775                           
  8776                           ;incstack = 0
  8777                           ; Regs used in _PGMCheckNvm: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8778  08A5  305C               	movlw	92
  8779  08A6  0021               	movlb	1	; select bank1
  8780  08A7  0651               	xorwf	_pgm_cfg^(0+128),w
  8781  08A8  1D03               	btfss	3,2
  8782  08A9  28AE               	goto	l4120
  8783  08AA  30C5               	movlw	197
  8784  08AB  0652               	xorwf	(_pgm_cfg^(0+128)+1),w
  8785  08AC  1903               	btfsc	3,2
  8786  08AD  0008               	return
  8787  08AE                     l4120:	
  8788                           
  8789                           ;PGM.c: 54: PGMNvmReset();
  8790  08AE  3189  2123         	fcall	_PGMNvmReset
  8791  08B0  0008               	return
  8792  08B1                     __end_of_PGMCheckNvm:	
  8793                           
  8794                           	psect	text46
  8795  0923                     __ptext46:	
  8796 ;; *************** function _PGMNvmReset *****************
  8797 ;; Defined at:
  8798 ;;		line 57 in file "PGM.c"
  8799 ;; Parameters:    Size  Location     Type
  8800 ;;		None
  8801 ;; Auto vars:     Size  Location     Type
  8802 ;;		None
  8803 ;; Return value:  Size  Location     Type
  8804 ;;		None               void
  8805 ;; Registers used:
  8806 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8807 ;; Tracked objects:
  8808 ;;		On entry : 0/0
  8809 ;;		On exit  : 0/0
  8810 ;;		Unchanged: 0/0
  8811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8813 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8814 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8815 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8816 ;;Total ram usage:        1 bytes
  8817 ;; Hardware stack levels used:    1
  8818 ;; Hardware stack levels required when called:    4
  8819 ;; This function calls:
  8820 ;;		_PGMWriteNvm
  8821 ;; This function is called by:
  8822 ;;		_PGMCheckNvm
  8823 ;; This function uses a non-reentrant model
  8824 ;;
  8825                           
  8826                           
  8827                           ;psect for function _PGMNvmReset
  8828  0923                     _PGMNvmReset:	
  8829                           
  8830                           ;PGM.c: 60: pgm_cfg.valChk1=0x5C;
  8831                           
  8832                           ;incstack = 0
  8833                           ; Regs used in _PGMNvmReset: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8834  0923  305C               	movlw	92
  8835  0924  00FA               	movwf	??_PGMNvmReset
  8836  0925  087A               	movf	??_PGMNvmReset,w
  8837  0926  0021               	movlb	1	; select bank1
  8838  0927  00D1               	movwf	_pgm_cfg^(0+128)
  8839                           
  8840                           ;PGM.c: 61: pgm_cfg.valChk2=0xC5;
  8841  0928  30C5               	movlw	197
  8842  0929  00FA               	movwf	??_PGMNvmReset
  8843  092A  087A               	movf	??_PGMNvmReset,w
  8844  092B  00D2               	movwf	(_pgm_cfg^(0+128)+1)
  8845                           
  8846                           ;PGM.c: 62: pgm_cfg.menu.val=0x00;
  8847  092C  01D3               	clrf	(_pgm_cfg^(0+128)+2)
  8848                           
  8849                           ;PGM.c: 63: pgm_cfg.sensId=0x00;
  8850  092D  01D4               	clrf	(_pgm_cfg^(0+128)+3)
  8851                           
  8852                           ;PGM.c: 64: pgm_cfg.baseId=0x00;
  8853  092E  01D5               	clrf	(_pgm_cfg^(0+128)+4)
  8854                           
  8855                           ;PGM.c: 66: PGMWriteNvm();
  8856  092F  3188  20D7         	fcall	_PGMWriteNvm
  8857  0931  0001               	reset	;# 
  8858  0932  0008               	return
  8859  0933                     __end_of_PGMNvmReset:	
  8860                           
  8861                           	psect	text47
  8862  08D7                     __ptext47:	
  8863 ;; *************** function _PGMWriteNvm *****************
  8864 ;; Defined at:
  8865 ;;		line 46 in file "PGM.c"
  8866 ;; Parameters:    Size  Location     Type
  8867 ;;		None
  8868 ;; Auto vars:     Size  Location     Type
  8869 ;;		None
  8870 ;; Return value:  Size  Location     Type
  8871 ;;		None               void
  8872 ;; Registers used:
  8873 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8874 ;; Tracked objects:
  8875 ;;		On entry : 0/0
  8876 ;;		On exit  : 0/0
  8877 ;;		Unchanged: 0/0
  8878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8880 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8881 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8882 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8883 ;;Total ram usage:        2 bytes
  8884 ;; Hardware stack levels used:    1
  8885 ;; Hardware stack levels required when called:    3
  8886 ;; This function calls:
  8887 ;;		_NVMWrite
  8888 ;; This function is called by:
  8889 ;;		_PGMNvmReset
  8890 ;;		_PGMSelUp
  8891 ;;		_PGMSelLong
  8892 ;;		_RTXReadPkt
  8893 ;; This function uses a non-reentrant model
  8894 ;;
  8895                           
  8896                           
  8897                           ;psect for function _PGMWriteNvm
  8898  08D7                     _PGMWriteNvm:	
  8899                           
  8900                           ;PGM.c: 48: NVMWrite((unsigned short)(&(nvm_pgm_cfg)),(char *)(&(pgm_cfg)),sizeof(ts_PGM
      +                          _CFG));
  8901                           
  8902                           ;incstack = 0
  8903                           ; Regs used in _PGMWriteNvm: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8904  08D7  3020               	movlw	32
  8905  08D8  00F1               	movwf	NVMWrite@addr
  8906  08D9  3038               	movlw	56
  8907  08DA  00F2               	movwf	NVMWrite@addr+1
  8908  08DB  30D1               	movlw	(low (_pgm_cfg| 0))& (0+255)
  8909  08DC  00F8               	movwf	??_PGMWriteNvm
  8910  08DD  0878               	movf	??_PGMWriteNvm,w
  8911  08DE  00F3               	movwf	NVMWrite@source
  8912  08DF  3005               	movlw	5
  8913  08E0  00F9               	movwf	??_PGMWriteNvm+1
  8914  08E1  0879               	movf	??_PGMWriteNvm+1,w
  8915  08E2  00F4               	movwf	NVMWrite@len
  8916  08E3  3186  2624         	fcall	_NVMWrite
  8917  08E5  0008               	return
  8918  08E6                     __end_of_PGMWriteNvm:	
  8919                           
  8920                           	psect	text48
  8921  0624                     __ptext48:	
  8922 ;; *************** function _NVMWrite *****************
  8923 ;; Defined at:
  8924 ;;		line 38 in file "NVM.c"
  8925 ;; Parameters:    Size  Location     Type
  8926 ;;  addr            2    1[COMMON] unsigned short 
  8927 ;;  source          1    3[COMMON] PTR unsigned char 
  8928 ;;		 -> pgm_cfg(5), 
  8929 ;;  len             1    4[COMMON] unsigned char 
  8930 ;; Auto vars:     Size  Location     Type
  8931 ;;  bufTmpRow      64    0[BANK0 ] unsigned short [32]
  8932 ;;  rowAddr         2   64[BANK0 ] unsigned short 
  8933 ;;  j               1   68[BANK0 ] unsigned char 
  8934 ;;  latchAddr       1   67[BANK0 ] unsigned char 
  8935 ;;  i               1   66[BANK0 ] unsigned char 
  8936 ;; Return value:  Size  Location     Type
  8937 ;;		None               void
  8938 ;; Registers used:
  8939 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8940 ;; Tracked objects:
  8941 ;;		On entry : 0/0
  8942 ;;		On exit  : 0/0
  8943 ;;		Unchanged: 0/0
  8944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8945 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8946 ;;      Locals:         0      69       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8947 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8948 ;;      Totals:         7      69       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8949 ;;Total ram usage:       76 bytes
  8950 ;; Hardware stack levels used:    1
  8951 ;; Hardware stack levels required when called:    2
  8952 ;; This function calls:
  8953 ;;		Nothing
  8954 ;; This function is called by:
  8955 ;;		_PGMWriteNvm
  8956 ;; This function uses a non-reentrant model
  8957 ;;
  8958                           
  8959                           
  8960                           ;psect for function _NVMWrite
  8961  0624                     _NVMWrite:	
  8962                           
  8963                           ;NVM.c: 40: unsigned char i,j,latchAddr;
  8964                           ;NVM.c: 41: unsigned short rowAddr,bufTmpRow[0x20];
  8965                           ;NVM.c: 43: INTCONbits.GIE=0;
  8966                           
  8967                           ;incstack = 0
  8968                           ; Regs used in _NVMWrite: [wreg+fsr1l+fsr1h+status,2+status,0]
  8969  0624  138B               	bcf	11,7	;volatile
  8970                           
  8971                           ;NVM.c: 44: PMCON1bits.WREN=1;
  8972  0625  0023               	movlb	3	; select bank3
  8973  0626  1515               	bsf	21,2	;volatile
  8974                           
  8975                           ;NVM.c: 45: PMCON1bits.CFGS=0;
  8976  0627  1315               	bcf	21,6	;volatile
  8977                           
  8978                           ;NVM.c: 48: i=0;
  8979  0628  0020               	movlb	0	; select bank0
  8980  0629  01E2               	clrf	NVMWrite@i
  8981                           
  8982                           ;NVM.c: 50: rowAddr=(addr&(~(0x001F)));
  8983  062A  30E0               	movlw	224
  8984  062B  0571               	andwf	NVMWrite@addr,w
  8985  062C  00E0               	movwf	NVMWrite@rowAddr
  8986  062D  30FF               	movlw	255
  8987  062E  0572               	andwf	NVMWrite@addr+1,w
  8988  062F  00E1               	movwf	NVMWrite@rowAddr+1
  8989                           
  8990                           ;NVM.c: 51: latchAddr=(addr&0x001F);
  8991  0630  0871               	movf	NVMWrite@addr,w
  8992  0631  391F               	andlw	31
  8993  0632  00F5               	movwf	??_NVMWrite
  8994  0633  0875               	movf	??_NVMWrite,w
  8995  0634  00E3               	movwf	NVMWrite@latchAddr
  8996  0635                     l252:	
  8997                           ;NVM.c: 52: while(i<len)
  8998                           
  8999  0635  0874               	movf	NVMWrite@len,w
  9000  0636  0262               	subwf	NVMWrite@i,w
  9001  0637  1803               	btfsc	3,0
  9002  0638  2EDC               	goto	l272
  9003  0639  0064               	clrwdt	;# 
  9004                           
  9005                           ;NVM.c: 57: for(j=0;j<sizeof(bufTmpRow)/sizeof(unsigned short);j++)
  9006  063A  0020               	movlb	0	; select bank0
  9007  063B  01E4               	clrf	NVMWrite@j
  9008  063C  3020               	movlw	32
  9009  063D  0264               	subwf	NVMWrite@j,w
  9010  063E  1803               	btfsc	3,0
  9011  063F  2E64               	goto	l255
  9012  0640                     l254:	
  9013  0640  0064               	clrwdt	;# 
  9014                           
  9015                           ;NVM.c: 60: PMADR=(rowAddr+j);
  9016  0641  0020               	movlb	0	; select bank0
  9017  0642  0864               	movf	NVMWrite@j,w
  9018  0643  0760               	addwf	NVMWrite@rowAddr,w
  9019  0644  00F5               	movwf	??_NVMWrite
  9020  0645  0861               	movf	NVMWrite@rowAddr+1,w
  9021  0646  1803               	skipnc
  9022  0647  0A61               	incf	NVMWrite@rowAddr+1,w
  9023  0648  00F6               	movwf	??_NVMWrite+1
  9024  0649  0875               	movf	??_NVMWrite,w
  9025  064A  0023               	movlb	3	; select bank3
  9026  064B  0091               	movwf	17	;volatile
  9027  064C  0876               	movf	??_NVMWrite+1,w
  9028  064D  0092               	movwf	18	;volatile
  9029                           
  9030                           ;NVM.c: 61: PMCON1bits.RD=1;
  9031  064E  1415               	bsf	21,0	;volatile
  9032  064F                     l256:	
  9033                           ;NVM.c: 62: while(PMCON1bits.RD);
  9034                           
  9035  064F  1815               	btfsc	21,0	;volatile
  9036  0650  2E4F               	goto	l256
  9037                           
  9038                           ;NVM.c: 63: bufTmpRow[j]=PMDAT;
  9039  0651  0020               	movlb	0	; select bank0
  9040  0652  3564               	lslf	NVMWrite@j,w
  9041  0653  3E20               	addlw	(low (NVMWrite@bufTmpRow| 0))& (0+255)
  9042  0654  0086               	movwf	6
  9043  0655  0187               	clrf	7
  9044  0656  0023               	movlb	3	; select bank3
  9045  0657  0813               	movf	19,w	;volatile
  9046  0658  3FC0               	movwi [0]fsr1
  9047  0659  0814               	movf	20,w	;volatile
  9048  065A  3FC1               	movwi [1]fsr1
  9049  065B  3001               	movlw	1
  9050  065C  00F5               	movwf	??_NVMWrite
  9051  065D  0875               	movf	??_NVMWrite,w
  9052  065E  0020               	movlb	0	; select bank0
  9053  065F  07E4               	addwf	NVMWrite@j,f
  9054  0660  3020               	movlw	32
  9055  0661  0264               	subwf	NVMWrite@j,w
  9056  0662  1C03               	skipc
  9057  0663  2E40               	goto	l254
  9058  0664                     l255:	
  9059                           
  9060                           ;NVM.c: 64: }
  9061                           ;NVM.c: 67: PMCON1bits.FREE=1;
  9062  0664  0023               	movlb	3	; select bank3
  9063  0665  1615               	bsf	21,4	;volatile
  9064                           
  9065                           ;NVM.c: 68: PMADR=rowAddr;
  9066  0666  0020               	movlb	0	; select bank0
  9067  0667  0861               	movf	NVMWrite@rowAddr+1,w
  9068  0668  0023               	movlb	3	; select bank3
  9069  0669  0092               	movwf	18	;volatile
  9070  066A  0020               	movlb	0	; select bank0
  9071  066B  0860               	movf	NVMWrite@rowAddr,w
  9072  066C  0023               	movlb	3	; select bank3
  9073  066D  0091               	movwf	17	;volatile
  9074                           
  9075                           ;NVM.c: 69: PMCON2=0x55;
  9076  066E  3055               	movlw	85
  9077  066F  0096               	movwf	22	;volsfr
  9078                           
  9079                           ;NVM.c: 70: PMCON2=0xAA;
  9080  0670  30AA               	movlw	170
  9081  0671  0096               	movwf	22	;volsfr
  9082                           
  9083                           ;NVM.c: 71: PMCON1bits.WR=1;
  9084  0672  1495               	bsf	21,1	;volatile
  9085  0673                     l259:	
  9086                           ;NVM.c: 72: while(PMCON1bits.WR);
  9087                           
  9088  0673  1895               	btfsc	21,1	;volatile
  9089  0674  2E73               	goto	l259
  9090                           
  9091                           ;NVM.c: 73: __nop();
  9092  0675  0000               	nop
  9093                           
  9094                           ;NVM.c: 74: __nop();
  9095  0676  0000               	nop
  9096                           
  9097                           ;NVM.c: 77: for(;latchAddr<sizeof(bufTmpRow)/sizeof(unsigned short);latchAddr++)
  9098  0677  3020               	movlw	32
  9099  0678  0020               	movlb	0	; select bank0
  9100  0679  0263               	subwf	NVMWrite@latchAddr,w
  9101  067A  1803               	btfsc	3,0
  9102  067B  2E9F               	goto	l3908
  9103  067C                     l262:	
  9104  067C  0064               	clrwdt	;# 
  9105                           
  9106                           ;NVM.c: 81: if(i>=len)
  9107  067D  0874               	movf	NVMWrite@len,w
  9108  067E  0020               	movlb	0	; select bank0
  9109  067F  0262               	subwf	NVMWrite@i,w
  9110  0680  1803               	btfsc	3,0
  9111  0681  2E9F               	goto	l3908
  9112                           
  9113                           ;NVM.c: 84: bufTmpRow[latchAddr]=(*(source+i));
  9114                           
  9115                           ;NVM.c: 82: break;
  9116  0682  0862               	movf	NVMWrite@i,w
  9117  0683  0773               	addwf	NVMWrite@source,w
  9118  0684  00F5               	movwf	??_NVMWrite
  9119  0685  0875               	movf	??_NVMWrite,w
  9120  0686  0086               	movwf	6
  9121  0687  0187               	clrf	7
  9122  0688  0801               	movf	1,w
  9123  0689  00F6               	movwf	??_NVMWrite+1
  9124  068A  01F7               	clrf	??_NVMWrite+2
  9125  068B  3563               	lslf	NVMWrite@latchAddr,w
  9126  068C  3E20               	addlw	(low (NVMWrite@bufTmpRow| 0))& (0+255)
  9127  068D  0086               	movwf	6
  9128  068E  0187               	clrf	7
  9129  068F  0876               	movf	??_NVMWrite+1,w
  9130  0690  3FC0               	movwi [0]fsr1
  9131  0691  0877               	movf	??_NVMWrite+2,w
  9132  0692  3FC1               	movwi [1]fsr1
  9133                           
  9134                           ;NVM.c: 85: i++;
  9135  0693  3001               	movlw	1
  9136  0694  00F5               	movwf	??_NVMWrite
  9137  0695  0875               	movf	??_NVMWrite,w
  9138  0696  07E2               	addwf	NVMWrite@i,f
  9139  0697  3001               	movlw	1
  9140  0698  00F5               	movwf	??_NVMWrite
  9141  0699  0875               	movf	??_NVMWrite,w
  9142  069A  07E3               	addwf	NVMWrite@latchAddr,f
  9143  069B  3020               	movlw	32
  9144  069C  0263               	subwf	NVMWrite@latchAddr,w
  9145  069D  1C03               	skipc
  9146  069E  2E7C               	goto	l262
  9147  069F                     l3908:	
  9148                           
  9149                           ;NVM.c: 86: }
  9150                           ;NVM.c: 88: latchAddr=0;
  9151  069F  01E3               	clrf	NVMWrite@latchAddr
  9152                           
  9153                           ;NVM.c: 91: for(j=0;j<sizeof(bufTmpRow)/sizeof(unsigned short);j++)
  9154  06A0  01E4               	clrf	NVMWrite@j
  9155  06A1  3020               	movlw	32
  9156  06A2  0264               	subwf	NVMWrite@j,w
  9157  06A3  1803               	btfsc	3,0
  9158  06A4  2ED7               	goto	l3930
  9159  06A5                     l3914:	
  9160                           
  9161                           ;NVM.c: 92: {
  9162                           ;NVM.c: 94: PMADR=(rowAddr+j);
  9163  06A5  0864               	movf	NVMWrite@j,w
  9164  06A6  0760               	addwf	NVMWrite@rowAddr,w
  9165  06A7  00F5               	movwf	??_NVMWrite
  9166  06A8  0861               	movf	NVMWrite@rowAddr+1,w
  9167  06A9  1803               	skipnc
  9168  06AA  0A61               	incf	NVMWrite@rowAddr+1,w
  9169  06AB  00F6               	movwf	??_NVMWrite+1
  9170  06AC  0875               	movf	??_NVMWrite,w
  9171  06AD  0023               	movlb	3	; select bank3
  9172  06AE  0091               	movwf	17	;volatile
  9173  06AF  0876               	movf	??_NVMWrite+1,w
  9174  06B0  0092               	movwf	18	;volatile
  9175                           
  9176                           ;NVM.c: 95: PMDAT=bufTmpRow[j];
  9177  06B1  0020               	movlb	0	; select bank0
  9178  06B2  3564               	lslf	NVMWrite@j,w
  9179  06B3  3E20               	addlw	(low (NVMWrite@bufTmpRow| 0))& (0+255)
  9180  06B4  0086               	movwf	6
  9181  06B5  0187               	clrf	7
  9182  06B6  3F40               	moviw [0]fsr1
  9183  06B7  0023               	movlb	3	; select bank3
  9184  06B8  0093               	movwf	19	;volatile
  9185  06B9  3F41               	moviw [1]fsr1
  9186  06BA  0094               	movwf	20	;volatile
  9187                           
  9188                           ;NVM.c: 97: if(j==(sizeof(bufTmpRow)/sizeof(unsigned short)-1))
  9189  06BB  301F               	movlw	31
  9190  06BC  0020               	movlb	0	; select bank0
  9191  06BD  0664               	xorwf	NVMWrite@j,w
  9192  06BE  1D03               	btfss	3,2
  9193  06BF  2EC3               	goto	l267
  9194                           
  9195                           ;NVM.c: 98: PMCON1bits.LWLO=0;
  9196  06C0  0023               	movlb	3	; select bank3
  9197  06C1  1295               	bcf	21,5	;volatile
  9198  06C2  2EC5               	goto	l3922
  9199  06C3                     l267:	
  9200                           
  9201                           ;NVM.c: 99: else
  9202                           ;NVM.c: 100: PMCON1bits.LWLO=1;
  9203  06C3  0023               	movlb	3	; select bank3
  9204  06C4  1695               	bsf	21,5	;volatile
  9205  06C5                     l3922:	
  9206                           
  9207                           ;NVM.c: 101: PMCON2=0x55;
  9208  06C5  3055               	movlw	85
  9209  06C6  0096               	movwf	22	;volsfr
  9210                           
  9211                           ;NVM.c: 102: PMCON2=0xAA;
  9212  06C7  30AA               	movlw	170
  9213  06C8  0096               	movwf	22	;volsfr
  9214                           
  9215                           ;NVM.c: 103: PMCON1bits.WR=1;
  9216  06C9  1495               	bsf	21,1	;volatile
  9217  06CA                     l269:	
  9218                           ;NVM.c: 104: while(PMCON1bits.WR);
  9219                           
  9220  06CA  1895               	btfsc	21,1	;volatile
  9221  06CB  2ECA               	goto	l269
  9222                           
  9223                           ;NVM.c: 105: __nop();
  9224  06CC  0000               	nop
  9225                           
  9226                           ;NVM.c: 106: __nop();
  9227  06CD  0000               	nop
  9228  06CE  3001               	movlw	1
  9229  06CF  00F5               	movwf	??_NVMWrite
  9230  06D0  0875               	movf	??_NVMWrite,w
  9231  06D1  0020               	movlb	0	; select bank0
  9232  06D2  07E4               	addwf	NVMWrite@j,f
  9233  06D3  3020               	movlw	32
  9234  06D4  0264               	subwf	NVMWrite@j,w
  9235  06D5  1C03               	skipc
  9236  06D6  2EA5               	goto	l3914
  9237  06D7                     l3930:	
  9238                           
  9239                           ;NVM.c: 107: }
  9240                           ;NVM.c: 109: rowAddr+=0x0020;
  9241  06D7  3020               	movlw	32
  9242  06D8  07E0               	addwf	NVMWrite@rowAddr,f
  9243  06D9  3000               	movlw	0
  9244  06DA  3DE1               	addwfc	NVMWrite@rowAddr+1,f
  9245  06DB  2E35               	goto	l252
  9246  06DC                     l272:	
  9247                           
  9248                           ;NVM.c: 110: }
  9249                           ;NVM.c: 112: INTCONbits.GIE=1;
  9250  06DC  178B               	bsf	11,7	;volatile
  9251                           
  9252                           ;NVM.c: 113: PMCON1bits.WREN=0;
  9253  06DD  0023               	movlb	3	; select bank3
  9254  06DE  1115               	bcf	21,2	;volatile
  9255  06DF  0008               	return
  9256  06E0                     __end_of_NVMWrite:	
  9257                           
  9258                           	psect	text49
  9259  0BA7                     __ptext49:	
  9260 ;; *************** function _OUTInit *****************
  9261 ;; Defined at:
  9262 ;;		line 6 in file "OUT.c"
  9263 ;; Parameters:    Size  Location     Type
  9264 ;;  sta             1    wreg     unsigned char 
  9265 ;; Auto vars:     Size  Location     Type
  9266 ;;  sta             1    2[COMMON] unsigned char 
  9267 ;; Return value:  Size  Location     Type
  9268 ;;		None               void
  9269 ;; Registers used:
  9270 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9271 ;; Tracked objects:
  9272 ;;		On entry : 0/0
  9273 ;;		On exit  : 0/0
  9274 ;;		Unchanged: 0/0
  9275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9277 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9278 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9279 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9280 ;;Total ram usage:        2 bytes
  9281 ;; Hardware stack levels used:    1
  9282 ;; Hardware stack levels required when called:    2
  9283 ;; This function calls:
  9284 ;;		Nothing
  9285 ;; This function is called by:
  9286 ;;		_main
  9287 ;; This function uses a non-reentrant model
  9288 ;;
  9289                           
  9290                           
  9291                           ;psect for function _OUTInit
  9292  0BA7                     _OUTInit:	
  9293                           
  9294                           ;incstack = 0
  9295                           ; Regs used in _OUTInit: [wreg-fsr0h+status,2+status,0]
  9296                           ;OUTInit@sta stored from wreg
  9297  0BA7  00F2               	movwf	OUTInit@sta
  9298                           
  9299                           ;OUT.c: 8: switch(sta)
  9300  0BA8  2BCA               	goto	l4232
  9301  0BA9                     l4226:	
  9302                           ;OUT.c: 9: {
  9303                           ;OUT.c: 10: case 0:
  9304                           
  9305                           
  9306                           ;OUT.c: 12: TRISA&=0b00000110; TRISB&=0b00100111; TRISC&=0b00010000; ANSELA&=0b00000110;
      +                           ANSELB&=0b00100111; ANSELC&=0b00010000; PORTA&=0b11111110; PORTC|=0b10000000;
  9307  0BA9  3006               	movlw	6
  9308  0BAA  00F1               	movwf	??_OUTInit
  9309  0BAB  0871               	movf	??_OUTInit,w
  9310  0BAC  0021               	movlb	1	; select bank1
  9311  0BAD  058C               	andwf	12,f	;volatile
  9312  0BAE  3027               	movlw	39
  9313  0BAF  00F1               	movwf	??_OUTInit
  9314  0BB0  0871               	movf	??_OUTInit,w
  9315  0BB1  058D               	andwf	13,f	;volatile
  9316  0BB2  3010               	movlw	16
  9317  0BB3  00F1               	movwf	??_OUTInit
  9318  0BB4  0871               	movf	??_OUTInit,w
  9319  0BB5  058E               	andwf	14,f	;volatile
  9320  0BB6  3006               	movlw	6
  9321  0BB7  00F1               	movwf	??_OUTInit
  9322  0BB8  0871               	movf	??_OUTInit,w
  9323  0BB9  0023               	movlb	3	; select bank3
  9324  0BBA  058C               	andwf	12,f	;volatile
  9325  0BBB  3027               	movlw	39
  9326  0BBC  00F1               	movwf	??_OUTInit
  9327  0BBD  0871               	movf	??_OUTInit,w
  9328  0BBE  058D               	andwf	13,f	;volatile
  9329  0BBF  3010               	movlw	16
  9330  0BC0  00F1               	movwf	??_OUTInit
  9331  0BC1  0871               	movf	??_OUTInit,w
  9332  0BC2  058E               	andwf	14,f	;volatile
  9333  0BC3  30FE               	movlw	254
  9334  0BC4  00F1               	movwf	??_OUTInit
  9335  0BC5  0871               	movf	??_OUTInit,w
  9336  0BC6  0020               	movlb	0	; select bank0
  9337  0BC7  058C               	andwf	12,f	;volatile
  9338  0BC8  178E               	bsf	14,7	;volatile
  9339                           
  9340                           ;OUT.c: 20: }
  9341                           
  9342                           ;OUT.c: 13: break;
  9343  0BC9  0008               	return
  9344  0BCA                     l4232:	
  9345  0BCA  0872               	movf	OUTInit@sta,w
  9346                           
  9347                           ; Switch size 1, requested type "space"
  9348                           ; Number of cases is 1, Range of values is 0 to 0
  9349                           ; switch strategies available:
  9350                           ; Name         Instructions Cycles
  9351                           ; simple_byte            4     3 (average)
  9352                           ; direct_byte            8     6 (fixed)
  9353                           ; jumptable            260     6 (fixed)
  9354                           ;	Chosen strategy is simple_byte
  9355  0BCB  3A00               	xorlw	0	; case 0
  9356  0BCC  1903               	skipnz
  9357  0BCD  2BA9               	goto	l4226
  9358  0BCE  2BCF               	goto	l40
  9359  0BCF                     l40:	
  9360  0BCF  0008               	return
  9361  0BD0                     __end_of_OUTInit:	
  9362                           
  9363                           	psect	text50
  9364  089A                     __ptext50:	
  9365 ;; *************** function _NVMInit *****************
  9366 ;; Defined at:
  9367 ;;		line 6 in file "NVM.c"
  9368 ;; Parameters:    Size  Location     Type
  9369 ;;  sta             1    wreg     unsigned char 
  9370 ;; Auto vars:     Size  Location     Type
  9371 ;;  sta             1    1[COMMON] unsigned char 
  9372 ;; Return value:  Size  Location     Type
  9373 ;;		None               void
  9374 ;; Registers used:
  9375 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9376 ;; Tracked objects:
  9377 ;;		On entry : 0/0
  9378 ;;		On exit  : 0/0
  9379 ;;		Unchanged: 0/0
  9380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9382 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9384 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9385 ;;Total ram usage:        1 bytes
  9386 ;; Hardware stack levels used:    1
  9387 ;; Hardware stack levels required when called:    2
  9388 ;; This function calls:
  9389 ;;		Nothing
  9390 ;; This function is called by:
  9391 ;;		_main
  9392 ;; This function uses a non-reentrant model
  9393 ;;
  9394                           
  9395                           
  9396                           ;psect for function _NVMInit
  9397  089A                     _NVMInit:	
  9398                           
  9399                           ;incstack = 0
  9400                           ; Regs used in _NVMInit: [wreg-fsr0h+status,2+status,0]
  9401                           ;NVMInit@sta stored from wreg
  9402  089A  00F1               	movwf	NVMInit@sta
  9403                           
  9404                           ;NVM.c: 8: switch(sta)
  9405  089B  289F               	goto	l4290
  9406  089C                     l4286:	
  9407                           ;NVM.c: 9: {
  9408                           ;NVM.c: 10: case 0:
  9409                           
  9410                           
  9411                           ;NVM.c: 12: PMCON1=0b00000000;
  9412  089C  0023               	movlb	3	; select bank3
  9413  089D  0195               	clrf	21	;volatile
  9414                           
  9415                           ;NVM.c: 20: }
  9416                           
  9417                           ;NVM.c: 13: break;
  9418  089E  0008               	return
  9419  089F                     l4290:	
  9420  089F  0871               	movf	NVMInit@sta,w
  9421                           
  9422                           ; Switch size 1, requested type "space"
  9423                           ; Number of cases is 1, Range of values is 0 to 0
  9424                           ; switch strategies available:
  9425                           ; Name         Instructions Cycles
  9426                           ; simple_byte            4     3 (average)
  9427                           ; direct_byte            8     6 (fixed)
  9428                           ; jumptable            260     6 (fixed)
  9429                           ;	Chosen strategy is simple_byte
  9430  08A0  3A00               	xorlw	0	; case 0
  9431  08A1  1903               	skipnz
  9432  08A2  289C               	goto	l4286
  9433  08A3  28A4               	goto	l240
  9434  08A4                     l240:	
  9435  08A4  0008               	return
  9436  08A5                     __end_of_NVMInit:	
  9437                           
  9438                           	psect	text51
  9439  088F                     __ptext51:	
  9440 ;; *************** function _LEDInit *****************
  9441 ;; Defined at:
  9442 ;;		line 7 in file "LED.c"
  9443 ;; Parameters:    Size  Location     Type
  9444 ;;  sta             1    wreg     unsigned char 
  9445 ;; Auto vars:     Size  Location     Type
  9446 ;;  sta             1    1[COMMON] unsigned char 
  9447 ;; Return value:  Size  Location     Type
  9448 ;;		None               void
  9449 ;; Registers used:
  9450 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9451 ;; Tracked objects:
  9452 ;;		On entry : 0/0
  9453 ;;		On exit  : 0/0
  9454 ;;		Unchanged: 0/0
  9455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9457 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9459 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9460 ;;Total ram usage:        1 bytes
  9461 ;; Hardware stack levels used:    1
  9462 ;; Hardware stack levels required when called:    2
  9463 ;; This function calls:
  9464 ;;		Nothing
  9465 ;; This function is called by:
  9466 ;;		_main
  9467 ;; This function uses a non-reentrant model
  9468 ;;
  9469                           
  9470                           
  9471                           ;psect for function _LEDInit
  9472  088F                     _LEDInit:	
  9473                           
  9474                           ;incstack = 0
  9475                           ; Regs used in _LEDInit: [wreg-fsr0h+status,2+status,0]
  9476                           ;LEDInit@sta stored from wreg
  9477  088F  00F1               	movwf	LEDInit@sta
  9478                           
  9479                           ;LED.c: 9: switch(sta)
  9480  0890  2894               	goto	l4282
  9481  0891                     l200:	
  9482                           ;LED.c: 10: {
  9483                           ;LED.c: 17: case 2:
  9484                           
  9485                           
  9486                           ;LED.c: 19: LATCbits.LATC7=1;
  9487  0891  0022               	movlb	2	; select bank2
  9488  0892  178E               	bsf	14,7	;volatile
  9489                           
  9490                           ;LED.c: 21: }
  9491                           
  9492                           ;LED.c: 20: break;
  9493  0893  0008               	return
  9494  0894                     l4282:	
  9495  0894  0871               	movf	LEDInit@sta,w
  9496                           
  9497                           ; Switch size 1, requested type "space"
  9498                           ; Number of cases is 1, Range of values is 2 to 2
  9499                           ; switch strategies available:
  9500                           ; Name         Instructions Cycles
  9501                           ; simple_byte            4     3 (average)
  9502                           ; direct_byte           11     9 (fixed)
  9503                           ; jumptable            263     9 (fixed)
  9504                           ;	Chosen strategy is simple_byte
  9505  0895  3A02               	xorlw	2	; case 2
  9506  0896  1903               	skipnz
  9507  0897  2891               	goto	l200
  9508  0898  2899               	goto	l202
  9509  0899                     l202:	
  9510  0899  0008               	return
  9511  089A                     __end_of_LEDInit:	
  9512                           
  9513                           	psect	text52
  9514  0AB4                     __ptext52:	
  9515 ;; *************** function _INInit *****************
  9516 ;; Defined at:
  9517 ;;		line 6 in file "IN.c"
  9518 ;; Parameters:    Size  Location     Type
  9519 ;;  sta             1    wreg     unsigned char 
  9520 ;; Auto vars:     Size  Location     Type
  9521 ;;  sta             1    2[COMMON] unsigned char 
  9522 ;; Return value:  Size  Location     Type
  9523 ;;		None               void
  9524 ;; Registers used:
  9525 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9526 ;; Tracked objects:
  9527 ;;		On entry : 0/0
  9528 ;;		On exit  : 0/0
  9529 ;;		Unchanged: 0/0
  9530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9532 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9533 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9534 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9535 ;;Total ram usage:        2 bytes
  9536 ;; Hardware stack levels used:    1
  9537 ;; Hardware stack levels required when called:    2
  9538 ;; This function calls:
  9539 ;;		Nothing
  9540 ;; This function is called by:
  9541 ;;		_main
  9542 ;; This function uses a non-reentrant model
  9543 ;;
  9544                           
  9545                           
  9546                           ;psect for function _INInit
  9547  0AB4                     _INInit:	
  9548                           
  9549                           ;incstack = 0
  9550                           ; Regs used in _INInit: [wreg-fsr0h+status,2+status,0]
  9551                           ;INInit@sta stored from wreg
  9552  0AB4  00F2               	movwf	INInit@sta
  9553                           
  9554                           ;IN.c: 8: switch(sta)
  9555  0AB5  2ACD               	goto	l4222
  9556  0AB6                     l4214:	
  9557                           ;IN.c: 9: {
  9558                           ;IN.c: 10: case 0:
  9559                           
  9560                           
  9561                           ;IN.c: 12: TRISA|=0b00000110; TRISB|=0b00100111; TRISC|=0b00010000; ANSELB&=0b11011000; 
      +                          ANSELC&=0b11101111; WPUB=0b00100111;
  9562  0AB6  3006               	movlw	6
  9563  0AB7  00F1               	movwf	??_INInit
  9564  0AB8  0871               	movf	??_INInit,w
  9565  0AB9  0021               	movlb	1	; select bank1
  9566  0ABA  048C               	iorwf	12,f	;volatile
  9567  0ABB  3027               	movlw	39
  9568  0ABC  00F1               	movwf	??_INInit
  9569  0ABD  0871               	movf	??_INInit,w
  9570  0ABE  048D               	iorwf	13,f	;volatile
  9571  0ABF  160E               	bsf	14,4	;volatile
  9572  0AC0  30D8               	movlw	216
  9573  0AC1  00F1               	movwf	??_INInit
  9574  0AC2  0871               	movf	??_INInit,w
  9575  0AC3  0023               	movlb	3	; select bank3
  9576  0AC4  058D               	andwf	13,f	;volatile
  9577  0AC5  30EF               	movlw	239
  9578  0AC6  00F1               	movwf	??_INInit
  9579  0AC7  0871               	movf	??_INInit,w
  9580  0AC8  058E               	andwf	14,f	;volatile
  9581  0AC9  3027               	movlw	39
  9582  0ACA  0024               	movlb	4	; select bank4
  9583  0ACB  008D               	movwf	13	;volatile
  9584                           
  9585                           ;IN.c: 20: }
  9586                           
  9587                           ;IN.c: 13: break;
  9588  0ACC  0008               	return
  9589  0ACD                     l4222:	
  9590  0ACD  0872               	movf	INInit@sta,w
  9591                           
  9592                           ; Switch size 1, requested type "space"
  9593                           ; Number of cases is 1, Range of values is 0 to 0
  9594                           ; switch strategies available:
  9595                           ; Name         Instructions Cycles
  9596                           ; simple_byte            4     3 (average)
  9597                           ; direct_byte            8     6 (fixed)
  9598                           ; jumptable            260     6 (fixed)
  9599                           ;	Chosen strategy is simple_byte
  9600  0ACE  3A00               	xorlw	0	; case 0
  9601  0ACF  1903               	skipnz
  9602  0AD0  2AB6               	goto	l4214
  9603  0AD1  2AD2               	goto	l18
  9604  0AD2                     l18:	
  9605  0AD2  0008               	return
  9606  0AD3                     __end_of_INInit:	
  9607                           
  9608                           	psect	text53
  9609  0A95                     __ptext53:	
  9610 ;; *************** function _DINTask *****************
  9611 ;; Defined at:
  9612 ;;		line 79 in file "DIN.c"
  9613 ;; Parameters:    Size  Location     Type
  9614 ;;		None
  9615 ;; Auto vars:     Size  Location     Type
  9616 ;;		None
  9617 ;; Return value:  Size  Location     Type
  9618 ;;		None               void
  9619 ;; Registers used:
  9620 ;;		wreg, status,2, status,0
  9621 ;; Tracked objects:
  9622 ;;		On entry : 0/0
  9623 ;;		On exit  : 0/0
  9624 ;;		Unchanged: 0/0
  9625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9627 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9628 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9629 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9630 ;;Total ram usage:        1 bytes
  9631 ;; Hardware stack levels used:    1
  9632 ;; Hardware stack levels required when called:    2
  9633 ;; This function calls:
  9634 ;;		Nothing
  9635 ;; This function is called by:
  9636 ;;		_main
  9637 ;; This function uses a non-reentrant model
  9638 ;;
  9639                           
  9640                           
  9641                           ;psect for function _DINTask
  9642  0A95                     _DINTask:	
  9643                           
  9644                           ;DIN.c: 81: u_in_sta_tmpTask.val=0;
  9645                           
  9646                           ;incstack = 0
  9647                           ; Regs used in _DINTask: [wreg+status,2+status,0]
  9648  0A95  0021               	movlb	1	; select bank1
  9649  0A96  01BA               	clrf	_u_in_sta_tmpTask^(0+128)
  9650                           
  9651                           ;DIN.c: 82: if(!PORTBbits.RB2)
  9652  0A97  0020               	movlb	0	; select bank0
  9653  0A98  190D               	btfsc	13,2	;volatile
  9654  0A99  2A9C               	goto	l4306
  9655                           
  9656                           ;DIN.c: 83: u_in_sta_tmpTask.sel=1;
  9657  0A9A  0021               	movlb	1	; select bank1
  9658  0A9B  143A               	bsf	_u_in_sta_tmpTask^(0+128),0
  9659  0A9C                     l4306:	
  9660                           
  9661                           ;DIN.c: 86: if(u_in_sta_currTask.sel!=u_in_sta_tmpTask.sel)
  9662  0A9C  0021               	movlb	1	; select bank1
  9663  0A9D  083A               	movf	_u_in_sta_tmpTask^(0+128),w
  9664  0A9E  3901               	andlw	1
  9665  0A9F  00F1               	movwf	??_DINTask
  9666  0AA0  0839               	movf	_u_in_sta_currTask^(0+128),w
  9667  0AA1  3901               	andlw	1
  9668  0AA2  0671               	xorwf	??_DINTask,w
  9669  0AA3  1903               	skipnz
  9670  0AA4  2AAC               	goto	l4314
  9671                           
  9672                           ;DIN.c: 87: {
  9673                           ;DIN.c: 88: u_in_sta_currTask.sel=u_in_sta_tmpTask.sel;
  9674  0AA5  1039               	bcf	_u_in_sta_currTask^(0+128),0
  9675  0AA6  1C3A               	btfss	_u_in_sta_tmpTask^(0+128),0
  9676  0AA7  2AA9               	goto	l4310
  9677  0AA8  1439               	bsf	_u_in_sta_currTask^(0+128),0
  9678  0AA9                     l4310:	
  9679                           
  9680                           ;DIN.c: 89: tmrDbncSel=0;
  9681  0AA9  0021               	movlb	1	; select bank1
  9682  0AAA  01B2               	clrf	_tmrDbncSel^(0+128)
  9683                           
  9684                           ;DIN.c: 90: u_flg_din.tmrDbncSel=1;
  9685  0AAB  1435               	bsf	_u_flg_din^(0+128),0
  9686  0AAC                     l4314:	
  9687                           
  9688                           ;DIN.c: 91: }
  9689                           ;DIN.c: 94: if(u_in_sta_currTask.sel)
  9690  0AAC  1C39               	btfss	_u_in_sta_currTask^(0+128),0
  9691  0AAD  2AB0               	goto	l4318
  9692                           
  9693                           ;DIN.c: 95: u_flg_din.tmrLongSel=1;
  9694  0AAE  14B5               	bsf	_u_flg_din^(0+128),1
  9695  0AAF  0008               	return
  9696  0AB0                     l4318:	
  9697                           
  9698                           ;DIN.c: 96: else
  9699                           ;DIN.c: 97: {
  9700                           ;DIN.c: 98: tmrLongSel=0;
  9701  0AB0  01AD               	clrf	_tmrLongSel^(0+128)
  9702  0AB1  01AE               	clrf	(_tmrLongSel+1)^(0+128)
  9703                           
  9704                           ;DIN.c: 99: u_flg_din.tmrLongSel=0;
  9705  0AB2  10B5               	bcf	_u_flg_din^(0+128),1
  9706  0AB3  0008               	return
  9707  0AB4                     __end_of_DINTask:	
  9708                           
  9709                           	psect	text54
  9710  0913                     __ptext54:	
  9711 ;; *************** function _DINInit *****************
  9712 ;; Defined at:
  9713 ;;		line 24 in file "DIN.c"
  9714 ;; Parameters:    Size  Location     Type
  9715 ;;  sta             1    wreg     unsigned char 
  9716 ;; Auto vars:     Size  Location     Type
  9717 ;;  sta             1    1[COMMON] unsigned char 
  9718 ;; Return value:  Size  Location     Type
  9719 ;;		None               void
  9720 ;; Registers used:
  9721 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9722 ;; Tracked objects:
  9723 ;;		On entry : 0/0
  9724 ;;		On exit  : 0/0
  9725 ;;		Unchanged: 0/0
  9726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9728 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9730 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9731 ;;Total ram usage:        1 bytes
  9732 ;; Hardware stack levels used:    1
  9733 ;; Hardware stack levels required when called:    2
  9734 ;; This function calls:
  9735 ;;		Nothing
  9736 ;; This function is called by:
  9737 ;;		_main
  9738 ;; This function uses a non-reentrant model
  9739 ;;
  9740                           
  9741                           
  9742                           ;psect for function _DINInit
  9743  0913                     _DINInit:	
  9744                           
  9745                           ;incstack = 0
  9746                           ; Regs used in _DINInit: [wreg-fsr0h+status,2+status,0]
  9747                           ;DINInit@sta stored from wreg
  9748  0913  00F1               	movwf	DINInit@sta
  9749                           
  9750                           ;DIN.c: 26: switch(sta)
  9751  0914  291D               	goto	l4298
  9752  0915                     l4294:	
  9753                           ;DIN.c: 27: {
  9754                           ;DIN.c: 31: case 1:
  9755                           
  9756                           
  9757                           ;DIN.c: 33: u_flg_din.val=0;
  9758  0915  0021               	movlb	1	; select bank1
  9759  0916  01B5               	clrf	_u_flg_din^(0+128)
  9760                           
  9761                           ;DIN.c: 34: u_in_sta_currTask.val=0;
  9762  0917  01B9               	clrf	_u_in_sta_currTask^(0+128)
  9763                           
  9764                           ;DIN.c: 35: u_in_sta_tmpTask.val=0;
  9765  0918  01BA               	clrf	_u_in_sta_tmpTask^(0+128)
  9766                           
  9767                           ;DIN.c: 36: u_in_ev_up.val=0;
  9768  0919  01B8               	clrf	_u_in_ev_up^(0+128)
  9769                           
  9770                           ;DIN.c: 37: u_in_ev_down.val=0;
  9771  091A  01B6               	clrf	_u_in_ev_down^(0+128)
  9772                           
  9773                           ;DIN.c: 38: u_in_ev_long.val=0;
  9774  091B  01B7               	clrf	_u_in_ev_long^(0+128)
  9775                           
  9776                           ;DIN.c: 43: }
  9777                           
  9778                           ;DIN.c: 39: break;
  9779  091C  0008               	return
  9780  091D                     l4298:	
  9781  091D  0871               	movf	DINInit@sta,w
  9782                           
  9783                           ; Switch size 1, requested type "space"
  9784                           ; Number of cases is 1, Range of values is 1 to 1
  9785                           ; switch strategies available:
  9786                           ; Name         Instructions Cycles
  9787                           ; simple_byte            4     3 (average)
  9788                           ; direct_byte           11     9 (fixed)
  9789                           ; jumptable            263     9 (fixed)
  9790                           ;	Chosen strategy is simple_byte
  9791  091E  3A01               	xorlw	1	; case 1
  9792  091F  1903               	skipnz
  9793  0920  2915               	goto	l4294
  9794  0921  2922               	goto	l297
  9795  0922                     l297:	
  9796  0922  0008               	return
  9797  0923                     __end_of_DINInit:	
  9798                           
  9799                           	psect	text55
  9800  0BFB                     __ptext55:	
  9801 ;; *************** function _ADCInit *****************
  9802 ;; Defined at:
  9803 ;;		line 73 in file "ADC.c"
  9804 ;; Parameters:    Size  Location     Type
  9805 ;;  state           1    wreg     unsigned char 
  9806 ;; Auto vars:     Size  Location     Type
  9807 ;;  state           1    2[COMMON] unsigned char 
  9808 ;; Return value:  Size  Location     Type
  9809 ;;		None               void
  9810 ;; Registers used:
  9811 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9812 ;; Tracked objects:
  9813 ;;		On entry : 0/0
  9814 ;;		On exit  : 0/0
  9815 ;;		Unchanged: 0/0
  9816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9818 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9819 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9820 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9821 ;;Total ram usage:        2 bytes
  9822 ;; Hardware stack levels used:    1
  9823 ;; Hardware stack levels required when called:    2
  9824 ;; This function calls:
  9825 ;;		Nothing
  9826 ;; This function is called by:
  9827 ;;		_main
  9828 ;; This function uses a non-reentrant model
  9829 ;;
  9830                           
  9831                           
  9832                           ;psect for function _ADCInit
  9833  0BFB                     _ADCInit:	
  9834                           
  9835                           ;incstack = 0
  9836                           ; Regs used in _ADCInit: [wreg-fsr0h+status,2+status,0]
  9837                           ;ADCInit@state stored from wreg
  9838  0BFB  00F2               	movwf	ADCInit@state
  9839                           
  9840                           ;ADC.c: 75: switch(state)
  9841  0BFC  2C21               	goto	l4270
  9842  0BFD                     l4256:	
  9843                           ;ADC.c: 76: {
  9844                           ;ADC.c: 77: case 0:
  9845                           
  9846                           
  9847                           ;ADC.c: 79: ADCON0=0b00000101; ADCON1=0b10010011; FVRCON=0b10000001; ANSELA|=0b00000110;
      +                          ;
  9848  0BFD  3005               	movlw	5
  9849  0BFE  0021               	movlb	1	; select bank1
  9850  0BFF  009D               	movwf	29	;volatile
  9851  0C00  3093               	movlw	147
  9852  0C01  009E               	movwf	30	;volatile
  9853  0C02  3081               	movlw	129
  9854  0C03  0022               	movlb	2	; select bank2
  9855  0C04  0097               	movwf	23	;volatile
  9856  0C05  3006               	movlw	6
  9857  0C06  00F1               	movwf	??_ADCInit
  9858  0C07  0871               	movf	??_ADCInit,w
  9859  0C08  0023               	movlb	3	; select bank3
  9860  0C09  048C               	iorwf	12,f	;volatile
  9861                           
  9862                           ;ADC.c: 80: break;
  9863  0C0A  0008               	return
  9864  0C0B                     l4260:	
  9865                           ;ADC.c: 81: case 1:
  9866                           
  9867                           
  9868                           ;ADC.c: 83: batt=0;
  9869  0C0B  0021               	movlb	1	; select bank1
  9870  0C0C  01A9               	clrf	_batt^(0+128)
  9871  0C0D  01AA               	clrf	(_batt+1)^(0+128)
  9872                           
  9873                           ;ADC.c: 84: battV=0;
  9874  0C0E  3000               	movlw	0
  9875  0C0F  00A0               	movwf	_battV^(0+128)
  9876  0C10  3000               	movlw	0
  9877  0C11  00A1               	movwf	(_battV+1)^(0+128)
  9878  0C12  3000               	movlw	0
  9879  0C13  00A2               	movwf	(_battV+2)^(0+128)
  9880                           
  9881                           ;ADC.c: 85: rmsCurr=0;
  9882  0C14  3000               	movlw	0
  9883  0C15  00A6               	movwf	_rmsCurr^(0+128)
  9884  0C16  3000               	movlw	0
  9885  0C17  00A7               	movwf	(_rmsCurr+1)^(0+128)
  9886  0C18  3000               	movlw	0
  9887  0C19  00A8               	movwf	(_rmsCurr+2)^(0+128)
  9888                           
  9889                           ;ADC.c: 86: realRmsCurr=0;
  9890  0C1A  3000               	movlw	0
  9891  0C1B  00A3               	movwf	_realRmsCurr^(0+128)
  9892  0C1C  3000               	movlw	0
  9893  0C1D  00A4               	movwf	(_realRmsCurr+1)^(0+128)
  9894  0C1E  3000               	movlw	0
  9895  0C1F  00A5               	movwf	(_realRmsCurr+2)^(0+128)
  9896                           
  9897                           ;ADC.c: 91: }
  9898                           
  9899                           ;ADC.c: 87: break;
  9900  0C20  0008               	return
  9901  0C21                     l4270:	
  9902  0C21  0872               	movf	ADCInit@state,w
  9903                           
  9904                           ; Switch size 1, requested type "space"
  9905                           ; Number of cases is 2, Range of values is 0 to 1
  9906                           ; switch strategies available:
  9907                           ; Name         Instructions Cycles
  9908                           ; simple_byte            7     4 (average)
  9909                           ; direct_byte           10     6 (fixed)
  9910                           ; jumptable            260     6 (fixed)
  9911                           ;	Chosen strategy is simple_byte
  9912  0C22  3A00               	xorlw	0	; case 0
  9913  0C23  1903               	skipnz
  9914  0C24  2BFD               	goto	l4256
  9915  0C25  3A01               	xorlw	1	; case 1
  9916  0C26  1903               	skipnz
  9917  0C27  2C0B               	goto	l4260
  9918  0C28  2C29               	goto	l121
  9919  0C29                     l121:	
  9920  0C29  0008               	return
  9921  0C2A                     __end_of_ADCInit:	
  9922                           
  9923                           	psect	intentry
  9924  0004                     __pintentry:	
  9925 ;; *************** function _INTIsr *****************
  9926 ;; Defined at:
  9927 ;;		line 37 in file "Sensore.c"
  9928 ;; Parameters:    Size  Location     Type
  9929 ;;		None
  9930 ;; Auto vars:     Size  Location     Type
  9931 ;;		None
  9932 ;; Return value:  Size  Location     Type
  9933 ;;		None               void
  9934 ;; Registers used:
  9935 ;;		wreg, status,2, status,0, pclath, cstack
  9936 ;; Tracked objects:
  9937 ;;		On entry : 0/0
  9938 ;;		On exit  : 0/0
  9939 ;;		Unchanged: 0/0
  9940 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9941 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9942 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9943 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9944 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9945 ;;Total ram usage:        1 bytes
  9946 ;; Hardware stack levels used:    1
  9947 ;; Hardware stack levels required when called:    1
  9948 ;; This function calls:
  9949 ;;		_SYSInt
  9950 ;; This function is called by:
  9951 ;;		Interrupt level 1
  9952 ;; This function uses a non-reentrant model
  9953 ;;
  9954                           
  9955  0004                     _INTIsr:	
  9956                           
  9957                           ;incstack = 0
  9958                           ; Regs used in _INTIsr: [wreg+status,2+status,0+pclath+cstack]
  9959  0004  3180               	pagesel	$
  9960  0005  0020               	movlb	0	; select bank0
  9961  0006  087F               	movf	127,w
  9962  0007  00F0               	movwf	??_INTIsr
  9963                           
  9964                           ;Sensore.c: 40: if(INTCONbits.TMR0IF)
  9965  0008  1D0B               	btfss	11,2	;volatile
  9966  0009  280D               	goto	i1l3334
  9967                           
  9968                           ;Sensore.c: 41: {
  9969                           ;Sensore.c: 43: INTCONbits.TMR0IF=0;
  9970  000A  110B               	bcf	11,2	;volatile
  9971                           
  9972                           ;Sensore.c: 46: SYSInt();
  9973  000B  3188  2083         	fcall	_SYSInt
  9974  000D                     i1l3334:	
  9975                           
  9976                           ;Sensore.c: 47: }
  9977                           ;Sensore.c: 50: if(IOCBFbits.IOCBF2)
  9978  000D  0027               	movlb	7	; select bank7
  9979  000E  1916               	btfsc	22,2	;volatile
  9980                           
  9981                           ;Sensore.c: 51: IOCBFbits.IOCBF2=0;
  9982  000F  1116               	bcf	22,2	;volatile
  9983  0010  0870               	movf	??_INTIsr,w
  9984  0011  0020               	movlb	0	; select bank0
  9985  0012  00FF               	movwf	127
  9986  0013  0009               	retfie
  9987  0014                     __end_of_INTIsr:	
  9988                           
  9989                           	psect	text57
  9990  0883                     __ptext57:	
  9991 ;; *************** function _SYSInt *****************
  9992 ;; Defined at:
  9993 ;;		line 36 in file "SYS.c"
  9994 ;; Parameters:    Size  Location     Type
  9995 ;;		None
  9996 ;; Auto vars:     Size  Location     Type
  9997 ;;		None
  9998 ;; Return value:  Size  Location     Type
  9999 ;;		None               void
 10000 ;; Registers used:
 10001 ;;		wreg
 10002 ;; Tracked objects:
 10003 ;;		On entry : 0/0
 10004 ;;		On exit  : 0/0
 10005 ;;		Unchanged: 0/0
 10006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10008 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10010 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10011 ;;Total ram usage:        0 bytes
 10012 ;; Hardware stack levels used:    1
 10013 ;; This function calls:
 10014 ;;		Nothing
 10015 ;; This function is called by:
 10016 ;;		_INTIsr
 10017 ;; This function uses a non-reentrant model
 10018 ;;
 10019                           
 10020                           
 10021                           ;psect for function _SYSInt
 10022  0883                     _SYSInt:	
 10023                           
 10024                           ;SYS.c: 39: u_SYS_STA.TICK=1;
 10025                           
 10026                           ;incstack = 0
 10027                           ; Regs used in _SYSInt: [wreg]
 10028  0883  0021               	movlb	1	; select bank1
 10029  0884  1434               	bsf	_u_SYS_STA^(0+128),0
 10030                           
 10031                           ;SYS.c: 42: TMR0=255-156;
 10032  0885  3063               	movlw	99
 10033  0886  0020               	movlb	0	; select bank0
 10034  0887  0095               	movwf	21	;volatile
 10035  0888  0008               	return
 10036  0889                     __end_of_SYSInt:	
 10037  007E                     btemp	set	126	;btemp
 10038  007E                     wtemp	set	126
 10039  007E                     wtemp0	set	126
 10040  0080                     wtemp1	set	128
 10041  0082                     wtemp2	set	130
 10042  0084                     wtemp3	set	132
 10043  0086                     wtemp4	set	134
 10044  0088                     wtemp5	set	136
 10045  007F                     wtemp6	set	127
 10046  007E                     ttemp	set	126
 10047  007E                     ttemp0	set	126
 10048  0081                     ttemp1	set	129
 10049  0084                     ttemp2	set	132
 10050  0087                     ttemp3	set	135
 10051  007F                     ttemp4	set	127
 10052  007E                     ltemp	set	126
 10053  007E                     ltemp0	set	126
 10054  0082                     ltemp1	set	130
 10055  0086                     ltemp2	set	134
 10056  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        55
    BSS         55
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     73      73
    BANK1            80      0      62
    BANK2            80     19      66
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10            8      0       0
    BANK11            0      0       0
    BANK12            0      0       0

Pointer List with Targets:

    RTXRcvPkt@dst	PTR unsigned char  size(1) Largest target is 11
		 -> pktRx(BANK1[11]), 

    RTXSndPkt@src	PTR unsigned char  size(1) Largest target is 11
		 -> pktTx(BANK1[11]), 

    NVMWrite@source	PTR unsigned char  size(1) Largest target is 5
		 -> pgm_cfg(BANK1[5]), 

    NVMRead@dest	PTR unsigned char  size(1) Largest target is 5
		 -> pgm_cfg(BANK1[5]), 

    CC1Write@src	PTR unsigned char  size(2) Largest target is 47
		 -> pktTx(BANK1[11]), cc1PaTable(BANK1[8]), cc1InitVal(BANK2[47]), 

    CC1Read@dst	PTR unsigned char  size(1) Largest target is 11
		 -> pktRx(BANK1[11]), RTXReadPkt@numRxByte(BANK0[1]), RTXSndPkt@numTxByte(BANK0[1]), RTXSndPkt@numRxByte(BANK0[1]), 
		 -> RTXSndPkt@sta(BANK0[1]), 

    SPIWrite@srcPtr	PTR unsigned char  size(2) Largest target is 47
		 -> pktTx(BANK1[11]), CC1Write@cc1Addr(BANK0[1]), CC1Read@cc1Addr(COMMON[1]), CC1Strobe@cc1Stb(COMMON[1]), 
		 -> cc1PaTable(BANK1[8]), cc1InitVal(BANK2[47]), 

    SPIRead@dstPtr	PTR unsigned char  size(1) Largest target is 11
		 -> pktRx(BANK1[11]), RTXReadPkt@numRxByte(BANK0[1]), RTXSndPkt@numTxByte(BANK0[1]), RTXSndPkt@numRxByte(BANK0[1]), 
		 -> RTXSndPkt@sta(BANK0[1]), 


Critical Paths under _main in COMMON

    _main->_CC1Init
    _main->_PGMInit
    _RTXAwake->_CC1Init
    _LEDFastFlash->_DLYDelay_ms
    _CC1Init->_CC1Write
    _RTXSndPkt->_CC1Read
    _CC1Write->_SPIWrite
    _ADCConv->___lwtoft
    ___ftsub->___ftadd
    ___ftadd->___ftpack
    ___ftmul->___lwtoft
    ___lwtoft->___ftpack
    ___lltoft->___ftpack
    ___ftdiv->___lwtoft
    _PGMSelLong->_LEDNormalFlash
    _PGMSelLong->_PGMWriteNvm
    _RTXReadPkt->_CC1Read
    _RTXRcvPkt->_CC1Read
    _CC1Read->_SPIWrite
    _LEDNormalFlash->_DLYDelay_ms
    _CC1Strobe->_SPIWrite
    _PGMReadNvm->_NVMRead
    _PGMCheckNvm->_PGMNvmReset
    _PGMNvmReset->_PGMWriteNvm
    _PGMWriteNvm->_NVMWrite

Critical Paths under _INTIsr in COMMON

    None.

Critical Paths under _main in BANK0

    _SYSTask->_PGMSelUp
    _RTXTick->_RTXSendData
    _RTXAwake->_RTXInit
    _RTXStartSendData->_ADCConv
    _RTXSendData->_RTXSndPkt
    _CC1Init->_CC1Write
    _RTXStartSendPgm->_ADCConv
    _RTXSendPgm->_RTXSndPkt
    _RTXSndPkt->_CC1Write
    _ADCConv->___ftdiv
    _sqrt->___ftmul
    ___ftsub->___ftadd
    ___ftmul->___lltoft
    ___ftdiv->_sqrt
    _RTXTask->_RTXReadPkt
    _PGMWriteNvm->_NVMWrite

Critical Paths under _INTIsr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTIsr in BANK1

    None.

Critical Paths under _main in BANK2

    _SYSTask->_ADCConv
    _RTXStartSendData->_ADCConv
    _RTXStartSendPgm->_ADCConv

Critical Paths under _INTIsr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTIsr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTIsr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTIsr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTIsr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTIsr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTIsr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTIsr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTIsr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTIsr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTIsr in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  160322
                                             71 BANK0      2     2      0
                            _ADCInit
                            _CC1Init
                            _DINInit
                            _DINTask
                             _INInit
                            _LEDInit
                            _NVMInit
                            _OUTInit
                            _PGMInit
                            _RTXInit
                            _RTXTask
                            _SPIInit
                            _SYSInit
                            _SYSTask
 ---------------------------------------------------------------------------------
 (1) _SYSTask                                              0     0      0  112929
                            _ADCConv
                            _DINTick
                          _PGMPgmOff
                         _PGMSelLong
                           _PGMSelUp
                            _PGMTick
                           _RTXAwake
                            _RTXTick
 ---------------------------------------------------------------------------------
 (2) _RTXTick                                              0     0      0   10238
                        _RTXSendData
                         _RTXSendPgm
 ---------------------------------------------------------------------------------
 (2) _RTXAwake                                             0     0      0   38916
                            _CC1Init
                        _DLYDelay_ms
                            _RTXInit
 ---------------------------------------------------------------------------------
 (3) _RTXInit                                              1     1      0   34997
                                             63 BANK0      1     1      0
                          _CC1Strobe
                   _RTXStartSendData
 ---------------------------------------------------------------------------------
 (4) _RTXStartSendData                                     0     0      0   34276
                            _ADCConv
                        _DLYDelay_ms
                        _RTXSendData
 ---------------------------------------------------------------------------------
 (3) _RTXSendData                                          7     7      0    5751
                                              8 BANK0      7     7      0
                       _LEDFastFlash
                          _RTXSndPkt
 ---------------------------------------------------------------------------------
 (4) _LEDFastFlash                                         3     3      0    1060
                                              7 COMMON     3     3      0
                        _DLYDelay_ms
 ---------------------------------------------------------------------------------
 (3) _CC1Init                                              2     2      0    2927
                                             11 COMMON     1     1      0
                                              2 BANK0      1     1      0
                          _CC1Strobe
                           _CC1Write
                        _DLYDelay_ms
 ---------------------------------------------------------------------------------
 (2) _PGMTick                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PGMSelUp                                             1     1      0   34097
                                             69 BANK0      1     1      0
                        _PGMWriteNvm
                    _RTXStartSendPgm
 ---------------------------------------------------------------------------------
 (3) _RTXStartSendPgm                                      0     0      0   33012
                            _ADCConv
                        _DLYDelay_ms
                         _RTXSendPgm
 ---------------------------------------------------------------------------------
 (3) _RTXSendPgm                                           1     1      0    4487
                                              8 BANK0      1     1      0
                          _PGMPgmOff
                          _RTXSndPkt
 ---------------------------------------------------------------------------------
 (4) _RTXSndPkt                                            6     5      1    4487
                                              2 BANK0      6     5      1
                            _CC1Read
                          _CC1Strobe
                           _CC1Write
 ---------------------------------------------------------------------------------
 (5) _CC1Write                                             6     3      3    1214
                                              7 COMMON     4     1      3
                                              0 BANK0      2     2      0
                           _SPIWrite
 ---------------------------------------------------------------------------------
 (5) _ADCConv                                             27    27      0   27533
                                             55 BANK0      8     8      0
                                              0 BANK2     19    19      0
                        _DLYDelay_ms
                            ___ftdiv
                            ___ftmul
                            ___lldiv
                           ___lltoft
                             ___lmul
                            ___lwdiv
                           ___lwtoft
                               _sqrt
 ---------------------------------------------------------------------------------
 (6) _sqrt                                                19    16      3   10233
                                             20 BANK0     19    16      3
                             ___ftge
                            ___ftmul
                            ___ftsub
 ---------------------------------------------------------------------------------
 (7) ___ftsub                                              6     0      6    4153
                                             10 BANK0      6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (8) ___ftadd                                             13     7      6    3903
                                              9 COMMON     3     3      0
                                              0 BANK0     10     4      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             16    10      6    4860
                                              4 BANK0     16    10      6
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftge                                               9     3      6     506
                                              1 COMMON     9     3      6
 ---------------------------------------------------------------------------------
 (6) ___lwtoft                                             4     1      3    2632
                                              9 COMMON     3     0      3
                                              0 BANK0      1     1      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              8     4      4     395
                                              1 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (6) ___lmul                                              12     4      8     290
                                              1 COMMON     8     0      8
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (6) ___lltoft                                             6     2      4    2780
                                              9 COMMON     2     2      0
                                              0 BANK0      4     0      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___lldiv                                             14     6      8     395
                                              1 COMMON     9     1      8
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    4022
                                             39 BANK0     16    10      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lltoft (ARG)
                           ___lwtoft (ARG)
                               _sqrt (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftpack                                             8     3      5    2524
                                              1 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (2) _PGMSelLong                                           1     1      0    2145
                                             10 COMMON     1     1      0
                     _LEDNormalFlash
                        _PGMWriteNvm
 ---------------------------------------------------------------------------------
 (2) _DINTick                                              1     1      0       0
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSInit                                              2     2      0      31
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _SPIInit                                              2     2      0      31
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _RTXTask                                              0     0      0    7273
                         _RTXReadPkt
 ---------------------------------------------------------------------------------
 (2) _RTXReadPkt                                           2     2      0    7273
                                             69 BANK0      2     2      0
                            _CC1Read
                          _CC1Strobe
                     _LEDNormalFlash
                          _PGMPgmOff
                        _PGMWriteNvm
                          _RTXRcvPkt
 ---------------------------------------------------------------------------------
 (3) _RTXRcvPkt                                            4     3      1    2260
                                              0 BANK0      4     3      1
                            _CC1Read
 ---------------------------------------------------------------------------------
 (5) _CC1Read                                              5     3      2    2079
                                              7 COMMON     5     3      2
                            _SPIRead
                           _SPIWrite
 ---------------------------------------------------------------------------------
 (6) _SPIRead                                              5     4      1     249
                                              1 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (4) _PGMPgmOff                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _LEDNormalFlash                                       3     3      0    1060
                                              7 COMMON     3     3      0
                        _DLYDelay_ms
 ---------------------------------------------------------------------------------
 (5) _DLYDelay_ms                                          6     4      2     992
                                              1 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (5) _CC1Strobe                                            3     3      0     690
                                              7 COMMON     3     3      0
                           _SPIWrite
 ---------------------------------------------------------------------------------
 (6) _SPIWrite                                             6     3      3     622
                                              1 COMMON     6     3      3
 ---------------------------------------------------------------------------------
 (1) _PGMInit                                              1     1      0    1539
                                             11 COMMON     1     1      0
                        _PGMCheckNvm
                         _PGMReadNvm
 ---------------------------------------------------------------------------------
 (2) _PGMReadNvm                                           2     2      0     423
                                              8 COMMON     2     2      0
                            _NVMRead
 ---------------------------------------------------------------------------------
 (3) _NVMRead                                              7     3      4     423
                                              1 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) _PGMCheckNvm                                          0     0      0    1085
                        _PGMNvmReset
 ---------------------------------------------------------------------------------
 (3) _PGMNvmReset                                          1     1      0    1085
                                             10 COMMON     1     1      0
                        _PGMWriteNvm
 ---------------------------------------------------------------------------------
 (3) _PGMWriteNvm                                          2     2      0    1085
                                              8 COMMON     2     2      0
                           _NVMWrite
 ---------------------------------------------------------------------------------
 (4) _NVMWrite                                            76    72      4    1085
                                              1 COMMON     7     3      4
                                              0 BANK0     69    69      0
 ---------------------------------------------------------------------------------
 (1) _OUTInit                                              2     2      0      31
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _NVMInit                                              1     1      0      31
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LEDInit                                              1     1      0      31
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _INInit                                               2     2      0      31
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DINTask                                              1     1      0       0
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DINInit                                              1     1      0      31
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADCInit                                              2     2      0      31
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _INTIsr                                              1     1      0       0
                                              0 COMMON     1     1      0
                             _SYSInt
 ---------------------------------------------------------------------------------
 (11) _SYSInt                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCInit
   _CC1Init
     _CC1Strobe
       _SPIWrite
     _CC1Write
       _SPIWrite
     _DLYDelay_ms
   _DINInit
   _DINTask
   _INInit
   _LEDInit
   _NVMInit
   _OUTInit
   _PGMInit
     _PGMCheckNvm
       _PGMNvmReset
         _PGMWriteNvm
           _NVMWrite
     _PGMReadNvm
       _NVMRead
   _RTXInit
     _CC1Strobe
       _SPIWrite
     _RTXStartSendData
       _ADCConv
         _DLYDelay_ms
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
           _sqrt (ARG)
             ___ftge
             ___ftmul
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftsub
               ___ftadd
                 ___ftpack
         ___ftmul
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___lldiv
         ___lltoft
           ___ftpack
         ___lmul
         ___lwdiv
         ___lwtoft
           ___ftpack
         _sqrt
           ___ftge
           ___ftmul
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftsub
             ___ftadd
               ___ftpack
       _DLYDelay_ms
       _RTXSendData
         _LEDFastFlash
           _DLYDelay_ms
         _RTXSndPkt
           _CC1Read
             _SPIRead
             _SPIWrite
           _CC1Strobe
             _SPIWrite
           _CC1Write
             _SPIWrite
   _RTXTask
     _RTXReadPkt
       _CC1Read
         _SPIRead
         _SPIWrite
       _CC1Strobe
         _SPIWrite
       _LEDNormalFlash
         _DLYDelay_ms
       _PGMPgmOff
       _PGMWriteNvm
         _NVMWrite
       _RTXRcvPkt
         _CC1Read
           _SPIRead
           _SPIWrite
   _SPIInit
   _SYSInit
   _SYSTask
     _ADCConv
       _DLYDelay_ms
       ___ftdiv
         ___ftmul (ARG)
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
         _sqrt (ARG)
           ___ftge
           ___ftmul
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftsub
             ___ftadd
               ___ftpack
       ___ftmul
         ___ftpack
         ___lltoft (ARG)
           ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lldiv
       ___lltoft
         ___ftpack
       ___lmul
       ___lwdiv
       ___lwtoft
         ___ftpack
       _sqrt
         ___ftge
         ___ftmul
           ___ftpack
           ___lltoft (ARG)
             ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftsub
           ___ftadd
             ___ftpack
     _DINTick
     _PGMPgmOff
     _PGMSelLong
       _LEDNormalFlash
         _DLYDelay_ms
       _PGMWriteNvm
         _NVMWrite
     _PGMSelUp
       _PGMWriteNvm
         _NVMWrite
       _RTXStartSendPgm
         _ADCConv
           _DLYDelay_ms
           ___ftdiv
             ___ftmul (ARG)
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
             _sqrt (ARG)
               ___ftge
               ___ftmul
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftsub
                 ___ftadd
                   ___ftpack
           ___ftmul
             ___ftpack
             ___lltoft (ARG)
               ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___lldiv
           ___lltoft
             ___ftpack
           ___lmul
           ___lwdiv
           ___lwtoft
             ___ftpack
           _sqrt
             ___ftge
             ___ftmul
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftsub
               ___ftadd
                 ___ftpack
         _DLYDelay_ms
         _RTXSendPgm
           _PGMPgmOff
           _RTXSndPkt
             _CC1Read
               _SPIRead
               _SPIWrite
             _CC1Strobe
               _SPIWrite
             _CC1Write
               _SPIWrite
     _PGMTick
     _RTXAwake
       _CC1Init
         _CC1Strobe
           _SPIWrite
         _CC1Write
           _SPIWrite
         _DLYDelay_ms
       _DLYDelay_ms
       _RTXInit
         _CC1Strobe
           _SPIWrite
         _RTXStartSendData
           _ADCConv
             _DLYDelay_ms
             ___ftdiv
               ___ftmul (ARG)
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
               _sqrt (ARG)
                 ___ftge
                 ___ftmul
                   ___ftpack
                   ___lltoft (ARG)
                     ___ftpack
                   ___lwtoft (ARG)
                     ___ftpack
                 ___ftsub
                   ___ftadd
                     ___ftpack
             ___ftmul
               ___ftpack
               ___lltoft (ARG)
                 ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___lldiv
             ___lltoft
               ___ftpack
             ___lmul
             ___lwdiv
             ___lwtoft
               ___ftpack
             _sqrt
               ___ftge
               ___ftmul
                 ___ftpack
                 ___lltoft (ARG)
                   ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftsub
                 ___ftadd
                   ___ftpack
           _DLYDelay_ms
           _RTXSendData
             _LEDFastFlash
               _DLYDelay_ms
             _RTXSndPkt
               _CC1Read
                 _SPIRead
                 _SPIWrite
               _CC1Strobe
                 _SPIWrite
               _CC1Write
                 _SPIWrite
     _RTXTick
       _RTXSendData
         _LEDFastFlash
           _DLYDelay_ms
         _RTXSndPkt
           _CC1Read
             _SPIRead
             _SPIWrite
           _CC1Strobe
             _SPIWrite
           _CC1Write
             _SPIWrite
       _RTXSendPgm
         _PGMPgmOff
         _RTXSndPkt
           _CC1Read
             _SPIRead
             _SPIWrite
           _CC1Strobe
             _SPIWrite
           _CC1Write
             _SPIWrite

 _INTIsr (ROOT)
   _SYSInt

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     49      49       5       91.3%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      3E       7       77.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50     13      42       9       82.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      D6      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10               8      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BANK11               0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BANK12               0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      D6      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed Oct 04 23:57:53 2017

       __size_of_CC1Strobe 0014                 __CFG_CP$ON 0000                         l40 0BCF  
                       l18 0AD2                         l60 0A3D              ?_LEDFastFlash 0070  
                       l64 0A58                         l69 0ADE                         l78 0A13  
             ?_DLYDelay_ms 0071               ___ftadd@exp1 007B               ___ftadd@exp2 007A  
             ___ftadd@sign 0079                        l200 0891                        l121 0C29  
                      l202 0899                        l131 0154                        l300 0B26  
                      l124 005E                        l141 0256                        l133 0157  
                      l302 0B25                        l126 0060                        l240 08A4  
                      l136 01AF                        l129 00B3                        l154 09B3  
                      l252 0635                        l180 0C88                        l245 0B70  
                      l262 067C                        l254 0640                        l255 0664  
                      l272 06DC                        l256 064F                        l522 0F55  
                      l267 06C3                        l259 0673                        l269 06CA  
                      l383 0981                        l607 0BA6                        l297 0922  
                      l479 0B5A                        l496 0E8D                        l686 0E3E  
                      l863 07D9                        l687 0E7F                        l864 07E1  
                      l856 07C6                        l688 0E80                        l887 04DD  
          __end_of_CC1Init 0C89            __end_of_CC1Read 0A00            __end_of_ADCConv 043E  
          __end_of_ADCInit 0C2A               __CFG_BORV$LO 0000                        wreg 0009  
               _RTXReadPkt 0D96            __end_of_DINInit 0923            __end_of_DINTask 0AB4  
          __end_of_DINTick 0B37               __CFG_LVP$OFF 0000                 _RTXSendPgm 0D5A  
         _RTXStartSendData 0904            __end_of_LEDInit 089A               ___ftdiv@cntr 0051  
             ___ftdiv@sign 0056                       l1055 055D                       l1057 0596  
                     l4000 0D74                       l4020 0D91                       l4120 08AE  
                     l3402 0AE3                       l4130 0992                       l4026 0C5C  
                     l4060 0B5E                       l3412 0A18                       l4036 0C7F  
                     l4310 0AA9                       l4214 0AB6                       l4222 0ACD  
                     l3414 0A01                       l4046 0A1F                       l3406 0AD5  
                     l3422 0466                       l4232 0BCA                       l3432 047C  
                     l4136 0997                       l4160 0941                       l4400 0CB2  
                     l4314 0AAC                       l4306 0A9C                       l4226 0BA9  
                     l4146 09A9                       l3370 079C                       l3522 0D35  
                     l3450 04A9                       l3426 046D                       l4082 0B3A  
                     l4090 0B4E                       l4260 0C0B                       l4324 096E  
                     l4252 0A4D                       l3452 04B3                       l3444 0496  
                     l3604 0565                       l4084 0B3F                       l4270 0C21  
                     l4318 0AB0                       l4326 0972                       l4334 0979  
                     l4342 0B83                       l3374 07A3                       l3526 0D4B  
                     l3550 070D                       l3462 04CF                       l3454 04B8  
                     l4256 0BFD                       l4360 0B9B                       l3376 07AD  
                     l3720 0E2F                       l3544 06F7                       l3472 0501  
                     l3464 04D9                       l3456 04BC                       l4282 0894  
                     l4290 089F                       l4186 0DD0                       l3386 07D7  
                     l3378 07B2                       l3706 0DF6                       l3730 0BE6  
                     l3650 0CCD                       l3562 0748                       l3482 051C  
                     l3810 015C                       l3642 0EA7                       l3634 0A79  
                     l4196 0DE3                       l4364 0B9E                       l3388 07CB  
                     l3716 0E24                       l3708 0E04                       l3468 04EF  
                     l4294 0915                       l4286 089C                       l3670 0F84  
                     l3646 0CC2                       l3574 0764                       l3566 0750  
                     l3830 01F7                       l3664 0F6E                       l3728 0BD4  
                     l3752 0D11                       l3744 0CF3                       l3592 0A61  
                     l4392 0CA9                       l4376 0C96                       l4298 091D  
                     l3922 06C5                       l3930 06D7                       l3914 06A5  
                     l3746 0CFF                       l3578 076C                       l3834 0201  
                     l3818 01A2                       l4386 0CA2                       l3908 069F  
                     l3692 0FDE                       l3684 0FC5                       l3756 0D1A  
                     l3860 0286                       l3844 0249                       l3774 0065  
                     l3782 00AC                       l3950 0EFD                       l3864 02C2  
                     l3952 0F03                       l3794 00DA                       l3998 0D6E  
             __CFG_WDTE$ON 0000          NVMWrite@bufTmpRow 0020                       u4105 0DF9  
                     u4035 0F96                       u3405 07D2                       u4045 0FA6  
                     u4125 0E05                       u4055 0FC6                       u4135 0E19  
                     u4215 0D00                       u5007 0195                       _PIE1 0091  
                     _PIE2 0092                       u5017 09C0                       u4065 0FD5  
                     u4145 0E25                       u4225 0D0A                       u4075 0FDF  
                     u4235 0D12                       u3445 07E8                       u3365 07A8  
                     u4165 0BDA                       u3385 07C1                       u3625 04AA  
                     u4345 01D8                       u4195 0CF6                       u3805 0729  
                     u3735 09B9                       u3655 04BD                       u3825 0751  
                     u3835 0757                       u3595 0497                       u3685 04D0  
                     u3925 0581                       u3865 076D                       _PIR1 0011  
                     _PIR2 0012                       u3875 0773                       u3795 0719  
                     u3985 0CCE                       u3995 0CD5                       u4987 0055  
                     u4997 014B                       _TMR0 0015                       _WPUB 020D  
          __end_of_PGMInit 0982            __end_of_PGMTick 0004               __CFG_WRT$OFF 0000  
            __CFG_FCMEN$ON 0000                       _batt 00A9                       _main 0E38  
         __end_of_CC1Write 0B14               ___ftpack@arg 0071            __end_of_NVMInit 08A5  
          __end_of_NVMRead 0B81               ___ftpack@exp 0074            __end_of_SPIInit 0A59  
          __end_of_SPIRead 0AF3                       fsr0h 0005                       fsr1h 0007  
                     fsr0l 0004                       indf0 0000                       indf1 0001  
                     fsr1l 0006                       btemp 007E                       _sqrt 0534  
          __end_of_OUTInit 0BD0              __CFG_BOREN$ON 0000                       ltemp 007E  
                     start 0014            __end_of_RTXInit 0B5B                       ttemp 007E  
        NVMWrite@latchAddr 0063            __end_of_RTXTask 088F            __end_of_RTXTick 0944  
                     wtemp 007E              __CFG_IESO$OFF 0000            __end_of_SYSInit 0BA7  
          __end_of_SYSTask 0CB9               ___ftmul@cntr 0032               ___ftmul@sign 0033  
             _ADCConv$1418 014F                ?_PGMReadNvm 0070              __CFG_LPBOR$ON 0000  
           ??_LEDFastFlash 0077                ?_PGMSelLong 0070                _RTXSendData 0EE1  
             SPIInit@state 0072                      ?_main 0070            __end_of___ftadd 0534  
          __end_of___ftdiv 1000            __end_of___lldiv 0E38                      ?_sqrt 0034  
          __end_of___ftmul 0794                      _T1CON 0018            __end_of___ftsub 0A77  
       __size_of_PGMPgmOff 0004                      _IOCBN 0395                      _IOCBP 0394  
          __end_of___lwdiv 0D1F                      _PMADR 0191                      _PMDAT 0193  
                    _TMR1H 0017                      _TMR1L 0016                      _PORTA 000C  
                    _PORTC 000E                      _TRISA 008C                      _TRISB 008D  
                    _TRISC 008E           __end_of_PGMSelUp 0999        ___lmul@multiplicand 0075  
            __CFG_PWRTE$ON 0000               ___lltoft@exp 007A                      _battV 00A0  
        __end_of_CC1Strobe 0958                      _errno 00AB                      _pktRx 00BB  
                    _pktTx 00C6              ___ftpack@sign 0075                      main@i 0068  
         __end_of_NVMWrite 06E0           __end_of_SPIWrite 0A1D                      ltemp0 007E  
                    ltemp1 0082                      ltemp2 0086                      ltemp3 0080  
         __end_of_RTXAwake 09E4                      ttemp0 007E                      ttemp1 0081  
                    ttemp2 0084                      ttemp3 0087                      ttemp4 007F  
                    sqrt@i 0040                      sqrt@q 0041                      sqrt@x 0044  
                    sqrt@y 0034                      sqrt@z 003D          LEDNormalFlash@num 0078  
                    status 0003                      wtemp0 007E                      wtemp1 0080  
                    wtemp2 0082                      wtemp3 0084                      wtemp4 0086  
                    wtemp5 0088                      wtemp6 007F               ?_PGMCheckNvm 0070  
 __size_of_RTXStartSendPgm 000F             __CFG_MCLRE$OFF 0000            __initialization 0016  
             DLYDelay_ms@i 0075               __end_of_main 0E8B         __size_of_RTXRcvPkt 000E  
       __size_of_RTXSndPkt 0056               __end_of_sqrt 0624                  ??_CC1Init 007B  
                ??_CC1Read 0079                  ??_ADCConv 0057                  ??_ADCInit 0071  
           CC1Strobe@e_stb 0078                     ??_main 0067                 _cc1PaTable 00D6  
                   ??_sqrt 0037               CC1Init@state 0022                  ??_DINInit 0071  
             NVMWrite@addr 0071                  ??_DINTask 0071                  ??_DINTick 0071  
               _cc1InitVal 0120                  ??_LEDInit 0071               ?_PGMNvmReset 0070  
                ??_PGMInit 007B                  ??_PGMTick 0071                ?_RTXReadPkt 0070  
                   _ADCON0 009D                     _ADCON1 009E              SPIRead@dstPtr 0074  
              ?_RTXSendPgm 0070                  ??_NVMInit 0071                  ??_NVMRead 0075  
                   _ADRESH 009C                     _ADRESL 009B                  ??_SPIInit 0071  
                ??_SPIRead 0072             _LEDNormalFlash 0A1D                  ??_OUTInit 0071  
                   _ANSELA 018C                     _ANSELB 018D                     _ANSELC 018E  
         __end_of___ftpack 07F8        __size_of_PGMReadNvm 000F           __end_of___lltoft 0BFB  
                ??_RTXInit 007C               ?_PGMWriteNvm 0070                     i1l3334 000D  
                ??_RTXTask 007C                  ??_RTXTick 007C        __size_of_PGMSelLong 0018  
                   _INTCON 000B                     _FVRCON 0117                  ??_SYSInit 0071  
         __end_of___lwtoft 096C                     _PMCON1 0195                     _PMCON2 0196  
                ??_SYSTask 007C                     _INTIsr 0004                     _OSCCON 0099  
                   _INInit 0AB4                     _WDTCON 0097                     _SSPBUF 0211  
            LEDFastFlash@i 0079          __end_of_PGMPgmOff 0883                     _SYSInt 0883  
      RTXReadPkt@numRxByte 0066                     ___ftge 0D1F                     ___lmul 0CB9  
                ??___ftadd 0026             __CFG_STVREN$ON 0000                  ??___ftdiv 004D  
                ??___lldiv 0079                  ??___ftmul 002A                  ??___ftsub 007C  
                ??___lwdiv 0075      ___ftmul@f3_as_product 002F       __size_of_DLYDelay_ms 0019  
                ?_CC1Write 0077     __end_of_LEDNormalFlash 0A3B                     sqrt@og 003A  
        __end_of_RTXRcvPkt 08D7          __end_of_RTXSndPkt 0EE1       __end_of_LEDFastFlash 0A95  
  __end_of__initialization 0048                 ___ftadd@f1 0020                 ___ftadd@f2 0023  
               ___ftge@ff1 0071                 ___ftge@ff2 0074                 ___ftdiv@f1 004A  
               ___ftdiv@f2 0047                 ___ftdiv@f3 0052                 ___ftmul@f1 0024  
               ___ftmul@f2 0027                 ___ftsub@f1 002D                 ___ftsub@f2 002A  
           __pcstackCOMMON 0070                  ?_PGMSelUp 0070               __pidataBANK1 07F8  
             __pidataBANK2 0C2A        __size_of_RTXReadPkt 004F   __end_of_RTXStartSendData 0913  
               ___lltoft@c 0020            NVMWrite@rowAddr 0060          ??_RTXStartSendPgm 007C  
      __size_of_RTXSendPgm 003C                  ?_NVMWrite 0071            CC1Strobe@cc1Stb 0079  
           ADCConv@maxCurr 0158                 ___lwtoft@c 0079                  ?_SPIWrite 0071  
               CC1Read@len 0078                 CC1Read@dst 0077                  ?_RTXAwake 0070  
               ??_CC1Write 007A               CC1Write@addr 0020             ADCConv@sumBatt 0156  
           ADCConv@sumCurr 0152            ?_LEDNormalFlash 0070                 __pbssBANK1 00A0  
                  ?_INTIsr 0070                    ?_INInit 0070            __CFG_VCAPEN$OFF 0000  
                  ?_SYSInt 0070                  INInit@sta 0072       __size_of_PGMCheckNvm 000C  
               __pmaintext 0E38                 ??_PGMSelUp 0065                    ?___ftge 0071  
                  ?___lmul 0071               ??_PGMReadNvm 0078            CC1Write@cc1Addr 0021  
             ??_PGMSelLong 007A                 __pintentry 0004               ?_RTXSendData 0070  
                  _CC1Init 0C59                    _CC1Read 09E4                    _ADCConv 004B  
                  _ADCInit 0BFB             ___lmul@product 0020          _u_in_sta_currTask 00B9  
                ?___ftpack 0071                 ??_NVMWrite 0075                 _cntSndData 00AF  
                ?___lltoft 0020                 ??_SPIWrite 0074                  ?___lwtoft 0079  
                  _DINInit 0913                 ??_RTXAwake 007C                    _DINTick 0B14  
                  _DINTask 0A95               ADCInit@state 0072                    _LEDInit 088F  
       RTXSendData@valBatt 002C                    _PGMInit 096C                    _PGMTick 0003  
       RTXSendData@valTemp 0029       __size_of_PGMNvmReset 0010                    _SSPCON1 0215  
                  _SSPCON2 0216                    _NVMInit 089A                    _NVMRead 0B5B  
                  _SPIInit 0A3B                    _SPIRead 0AD3                    _SSPSTAT 0214  
                  _OUTInit 0BA7                    _RTXInit 0B37                    _RTXTick 0933  
                  _RTXTask 0889         __end_of_PGMReadNvm 08F5                    _SYSInit 0B81  
        ADCConv@sumEavCurr 015D                    _SYSTask 0C89         __end_of_PGMSelLong 09B1  
                _CC1Strobe 0944            __size_of_INTIsr 0010            __size_of_INInit 001F  
     __size_of_PGMWriteNvm 000F            __size_of_SYSInt 0006                  NVMWrite@i 0062  
                NVMWrite@j 0064                  SPIWrite@i 0076            __size_of___ftge 003B  
          __size_of___lmul 0032                    ___ftadd 043E               RTXInit@state 005F  
                  ___ftdiv 0F57                    ___lldiv 0DE5                    ___ftmul 06E0  
                  ___ftsub 0A59                    ___lwdiv 0CEB                 ??___ftpack 0076  
               ??___lltoft 0079                    __ptext1 0C89                    __ptext2 0933  
                  __ptext3 09CA                    __ptext4 0B37                    __ptext5 0904  
                  __ptext6 0EE1                    __ptext7 0A77                    __ptext8 0C59  
                  __ptext9 0003                    _flg_slp 00B0                 ??___lwtoft 0020  
                  _pgm_cfg 00D1                    _pgm_flg 007C      __size_of_LEDFastFlash 001E  
                _IOCBFbits 0396                    _rmsCurr 00A6               ??_RTXReadPkt 0065  
             ??_RTXSendPgm 0028                    clrloop0 08BE                    _rtx_flg 00B1  
             RTXRcvPkt@len 0020               RTXRcvPkt@dst 0023       end_of_initialization 0048  
               _u_in_ev_up 00B8                 ?_CC1Strobe 0070         RTXSndPkt@numRxByte 0024  
                  init_ram 08B1         RTXSndPkt@numTxByte 0026                    initloop 08B2  
             RTXSndPkt@len 0022               RTXSndPkt@src 0025               RTXSndPkt@sta 0027  
          ___lldiv@divisor 0071            ___lldiv@counter 0024                  _PGMPgmOff 087F  
               _tmrDbncSel 00B2         __end_of_RTXReadPkt 0DE5                 DINInit@sta 0071  
             _LEDFastFlash 0A77         __end_of_RTXSendPgm 0D96                  _PORTBbits 000D  
               _tmrLongSel 00AD           __CFG_FOSC$INTOSC 0000          __size_of_CC1Write 0021  
              NVMRead@addr 0071                NVMRead@dest 0073                  _RTXRcvPkt 08C9  
                _RTXSndPkt 0E8B                ___ftdiv@exp 0055            _RTXStartSendPgm 08F5  
           __end_of_INTIsr 0014             __end_of_INInit 0AD3        _nvm_pgm_cfg_absaddr 3820  
           __end_of_SYSInt 0889                ___ftmul@exp 002E                 ?_PGMPgmOff 0070  
               LEDInit@sta 0071             DLYDelay_ms@val 0071          ?_RTXStartSendData 0070  
           __end_of___ftge 0D5A             __end_of___lmul 0CEB          __size_of_PGMSelUp 0017  
            ??_DLYDelay_ms 0073         ??_RTXStartSendData 007C       __size_of_RTXSendData 0076  
         ??_LEDNormalFlash 0077               SYSInit@state 0072          __size_of_NVMWrite 00BC  
        __size_of_SPIWrite 001D        start_initialization 0016          __size_of_RTXAwake 001A  
              CC1Read@addr 007A                NVMWrite@len 0074                   ADCConv@i 0161  
                 ADCConv@j 015C                   ??_INTIsr 0070                   ??_INInit 0071  
              ??_CC1Strobe 0077                 ?_RTXRcvPkt 0020                 ?_RTXSndPkt 0022  
                 ??_SYSInt 0070             CC1Read@cc1Addr 007B                   ??___ftge 0077  
                 ??___lmul 0079                   ?_CC1Init 0070                __pdataBANK1 00D6  
                 ?_CC1Read 0077                __pdataBANK2 0120                SPIWrite@len 0073  
                 ?_ADCConv 0070                   ?_ADCInit 0070                   ?_DINInit 0070  
                 ?_DINTask 0070                   ?_DINTick 0070          __size_of___ftpack 0064  
              __pbssBIGRAM 2328                   ?_LEDInit 0070          __size_of___lltoft 002B  
              __pbssCOMMON 007C                  ___latbits 0003          __size_of___lwtoft 0014  
            __pcstackBANK0 0020              __pcstackBANK2 014F        __end_of_DLYDelay_ms 09CA  
                 ?_PGMInit 0070                   ?_PGMTick 0070    __end_of_RTXStartSendPgm 0904  
                 ?_NVMInit 0070                   ?_NVMRead 0071                   ?_SPIInit 0070  
                 ?_SPIRead 0071             NVMWrite@source 0073                   ?_OUTInit 0070  
             PGMInit@state 007B                   ?_RTXInit 0070                   ?_RTXTask 0070  
                 ?_RTXTick 0070                CC1Write@len 0079                   ?_SYSInit 0070  
              CC1Write@src 0077                   ?_SYSTask 0070              ??_PGMCheckNvm 007B  
      __p_nvm_pgm_cfg_text 3820           ___lwdiv@dividend 0073                ??_PGMPgmOff 0071  
                 ?___ftadd 0020                   ?___ftdiv 0047                   ?___lldiv 0071  
                 ?___ftmul 0024                   ?___ftsub 002A                   ?___lwdiv 0071  
                _u_SYS_STA 00B4           _u_in_sta_tmpTask 00BA                   NVMRead@i 0077  
            ??_PGMNvmReset 007A                   SPIRead@i 0075                   _CC1Write 0AF3  
         ___lwdiv@quotient 0077              ??_PGMWriteNvm 0078                  _u_flg_din 00B5  
              ??_RTXRcvPkt 0021                ??_RTXSndPkt 0023                   _LATAbits 010C  
                 _LATCbits 010E                  clear_ram0 08BD                   _PIR1bits 0011  
                 _PGMSelUp 0982        __end_of_PGMCheckNvm 08B1                  _tmrRcvPkt 00B3  
         __size_of_CC1Init 0030           __size_of_CC1Read 001C                _DLYDelay_ms 09B1  
                 _NVMWrite 0624           __size_of_ADCConv 03F3           __size_of_ADCInit 002F  
               _ADCON0bits 009D                   _SPIWrite 0A00                 NVMInit@sta 0071  
               NVMRead@len 0074            LEDFastFlash@num 0078                   _RTXAwake 09CA  
         __size_of_DINInit 0010           __size_of_DINTask 001F           __size_of_DINTick 0023  
         __size_of_LEDInit 000B                 SPIRead@len 0071           __size_of_PGMInit 0016  
         ?_RTXStartSendPgm 0070           __size_of_PGMTick 0001          ___lmul@multiplier 0071  
      __end_of_PGMNvmReset 0933           __size_of_NVMInit 000B           __size_of_NVMRead 0026  
         __size_of_SPIInit 001E           __size_of_SPIRead 0020               _u_in_ev_down 00B6  
          LEDNormalFlash@i 0079               _u_in_ev_long 00B7           __size_of_OUTInit 0029  
         __size_of_RTXInit 0024           __size_of_RTXTask 0006           __size_of_RTXTick 0011  
         __size_of_SYSInit 0026           __size_of_SYSTask 0030                 OUTInit@sta 0072  
      __end_of_PGMWriteNvm 08E6           __size_of___ftadd 00F6           __size_of___ftdiv 00A9  
         __size_of___lldiv 0053           __size_of___ftmul 00B4           __size_of___ftsub 001E  
         __size_of___lwdiv 0034                   ___ftpack 0794                   ___lltoft 0BD0  
                 _adc_vals 2328                   ___lwtoft 0958            ___lwdiv@divisor 0071  
          ___lwdiv@counter 0076                   __ptext10 0982                   __ptext11 08F5  
                 __ptext20 0D1F                   __ptext12 0D5A                   __ptext21 0958  
                 __ptext13 0E8B                   __ptext30 0B81                   __ptext22 0CEB  
                 __ptext14 0AF3                   __ptext31 0A3B                   __ptext23 0CB9  
                 __ptext15 004B                   __ptext40 0944                   __ptext32 0889  
                 __ptext24 0BD0                   __ptext16 0534                   __ptext41 0A00  
                 __ptext33 0D96                   __ptext25 0DE5                   __ptext17 0A59  
                 __ptext50 089A                   __ptext42 096C                   __ptext34 08C9  
                 __ptext26 0F57                   __ptext18 043E                   __ptext51 088F  
                 __ptext43 08E6                   __ptext35 09E4                   __ptext27 0794  
                 __ptext19 06E0                   __ptext52 0AB4                   __ptext44 0B5B  
                 __ptext36 0AD3                   __ptext28 0999                   __ptext53 0A95  
                 __ptext45 08A5                   __ptext37 087F                   __ptext29 0B14  
                 __ptext54 0913                   __ptext46 0923                   __ptext38 0A1D  
                 __ptext55 0BFB                   __ptext47 08D7                   __ptext39 09B1  
                 __ptext48 0624                   __ptext57 0883                   __ptext49 0BA7  
              _realRmsCurr 00A3  __size_of_RTXStartSendData 000F        __end_of_nvm_pgm_cfg 3840  
            __size_of_main 0053                _PGMCheckNvm 08A5              __size_of_sqrt 00F0  
            ??_RTXSendData 0028                _PGMNvmReset 0923                 _INTCONbits 000B  
           SPIWrite@srcPtr 0071                   intlevel1 0000                _PGMWriteNvm 08D7  
               _PMCON1bits 0195           ___lldiv@dividend 0075          __CFG_CLKOUTEN$OFF 0000  
               _PGMReadNvm 08E6                 _PGMSelLong 0999                 _OPTION_REG 0095  
      __end_of_RTXSendData 0F57           ___lldiv@quotient 0020                _nvm_pgm_cfg 3820  
  __size_of_LEDNormalFlash 001E                 _SSPCONbits 0215  
