

Microchip Technology PIC LITE Macro Assembler V1.34 build -361300703 
                                                                                               Sat Sep 03 20:16:15 2016

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	_nvm_pgm_cfg_text,global,class=CODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	inittext,global,class=CODE,delta=2
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text3,local,class=CODE,merge=1,delta=2
    21                           	psect	text4,local,class=CODE,merge=1,delta=2
    22                           	psect	text5,local,class=CODE,merge=1,delta=2
    23                           	psect	text6,local,class=CODE,merge=1,delta=2
    24                           	psect	text7,local,class=CODE,merge=1,delta=2
    25                           	psect	text8,local,class=CODE,merge=1,delta=2
    26                           	psect	text9,local,class=CODE,merge=1,delta=2
    27                           	psect	text10,local,class=CODE,merge=1,delta=2
    28                           	psect	text11,local,class=CODE,merge=1,delta=2
    29                           	psect	text12,local,class=CODE,merge=1,delta=2
    30                           	psect	text13,local,class=CODE,merge=1,delta=2
    31                           	psect	text14,local,class=CODE,merge=1,delta=2
    32                           	psect	text15,local,class=CODE,merge=1,delta=2
    33                           	psect	text16,local,class=CODE,merge=1,delta=2
    34                           	psect	text17,local,class=CODE,merge=1,delta=2
    35                           	psect	text18,local,class=CODE,merge=1,delta=2
    36                           	psect	text19,local,class=CODE,merge=1,delta=2
    37                           	psect	text20,local,class=CODE,merge=1,delta=2
    38                           	psect	text21,local,class=CODE,merge=1,delta=2
    39                           	psect	text22,local,class=CODE,merge=1,delta=2
    40                           	psect	text23,local,class=CODE,merge=1,delta=2
    41                           	psect	text24,local,class=CODE,merge=1,delta=2
    42                           	psect	text25,local,class=CODE,merge=1,delta=2
    43                           	psect	text26,local,class=CODE,merge=1,delta=2
    44                           	psect	text27,local,class=CODE,merge=1,delta=2
    45                           	psect	text28,local,class=CODE,merge=1,delta=2
    46                           	psect	text29,local,class=CODE,merge=1,delta=2
    47                           	psect	text30,local,class=CODE,merge=1,delta=2
    48                           	psect	text31,local,class=CODE,merge=1,delta=2
    49                           	psect	text32,local,class=CODE,merge=1,delta=2
    50                           	psect	text33,local,class=CODE,merge=1,delta=2
    51                           	psect	text34,local,class=CODE,merge=1,delta=2
    52                           	psect	text35,local,class=CODE,merge=1,delta=2
    53                           	psect	text36,local,class=CODE,merge=1,delta=2
    54                           	psect	text37,local,class=CODE,merge=1,delta=2
    55                           	psect	text38,local,class=CODE,merge=1,delta=2
    56                           	psect	text39,local,class=CODE,merge=1,delta=2
    57                           	psect	text40,local,class=CODE,merge=1,delta=2
    58                           	psect	text41,local,class=CODE,merge=1,delta=2
    59                           	psect	text42,local,class=CODE,merge=1,delta=2
    60                           	psect	text43,local,class=CODE,merge=1,delta=2
    61                           	psect	text44,local,class=CODE,merge=1,delta=2
    62                           	psect	text45,local,class=CODE,merge=1,delta=2
    63                           	psect	text46,local,class=CODE,merge=1,delta=2
    64                           	psect	text47,local,class=CODE,merge=1,delta=2
    65                           	psect	text48,local,class=CODE,merge=1,delta=2
    66                           	psect	text49,local,class=CODE,merge=1,delta=2
    67                           	psect	text50,local,class=CODE,merge=1,delta=2
    68                           	psect	text51,local,class=CODE,merge=1,delta=2
    69                           	psect	text52,local,class=CODE,merge=1,delta=2
    70                           	psect	text53,local,class=CODE,merge=1,delta=2
    71                           	psect	text54,local,class=CODE,merge=1,delta=2
    72                           	psect	intentry,global,class=CODE,delta=2
    73                           	psect	text56,local,class=CODE,merge=1,delta=2
    74                           	dabs	1,0x7E,2
    75  0000                     	;# 
    76  0001                     	;# 
    77  0002                     	;# 
    78  0003                     	;# 
    79  0004                     	;# 
    80  0005                     	;# 
    81  0006                     	;# 
    82  0007                     	;# 
    83  0008                     	;# 
    84  0009                     	;# 
    85  000A                     	;# 
    86  000B                     	;# 
    87  000C                     	;# 
    88  000D                     	;# 
    89  000E                     	;# 
    90  0010                     	;# 
    91  0011                     	;# 
    92  0012                     	;# 
    93  0015                     	;# 
    94  0016                     	;# 
    95  0016                     	;# 
    96  0017                     	;# 
    97  0018                     	;# 
    98  0019                     	;# 
    99  001A                     	;# 
   100  001B                     	;# 
   101  001C                     	;# 
   102  008C                     	;# 
   103  008D                     	;# 
   104  008E                     	;# 
   105  0090                     	;# 
   106  0091                     	;# 
   107  0092                     	;# 
   108  0095                     	;# 
   109  0096                     	;# 
   110  0097                     	;# 
   111  0099                     	;# 
   112  009A                     	;# 
   113  009B                     	;# 
   114  009B                     	;# 
   115  009C                     	;# 
   116  009D                     	;# 
   117  009E                     	;# 
   118  010C                     	;# 
   119  010D                     	;# 
   120  010E                     	;# 
   121  0116                     	;# 
   122  0117                     	;# 
   123  011D                     	;# 
   124  018C                     	;# 
   125  018D                     	;# 
   126  018E                     	;# 
   127  0191                     	;# 
   128  0191                     	;# 
   129  0192                     	;# 
   130  0193                     	;# 
   131  0193                     	;# 
   132  0194                     	;# 
   133  0195                     	;# 
   134  0196                     	;# 
   135  0197                     	;# 
   136  0199                     	;# 
   137  019A                     	;# 
   138  019B                     	;# 
   139  019B                     	;# 
   140  019B                     	;# 
   141  019B                     	;# 
   142  019C                     	;# 
   143  019C                     	;# 
   144  019D                     	;# 
   145  019E                     	;# 
   146  019F                     	;# 
   147  020D                     	;# 
   148  0210                     	;# 
   149  0211                     	;# 
   150  0211                     	;# 
   151  0212                     	;# 
   152  0212                     	;# 
   153  0213                     	;# 
   154  0213                     	;# 
   155  0214                     	;# 
   156  0214                     	;# 
   157  0215                     	;# 
   158  0215                     	;# 
   159  0215                     	;# 
   160  0216                     	;# 
   161  0216                     	;# 
   162  0217                     	;# 
   163  0217                     	;# 
   164  0291                     	;# 
   165  0291                     	;# 
   166  0292                     	;# 
   167  0293                     	;# 
   168  0298                     	;# 
   169  0298                     	;# 
   170  0299                     	;# 
   171  029A                     	;# 
   172  0394                     	;# 
   173  0395                     	;# 
   174  0396                     	;# 
   175  0FE4                     	;# 
   176  0FE5                     	;# 
   177  0FE6                     	;# 
   178  0FE7                     	;# 
   179  0FE8                     	;# 
   180  0FE9                     	;# 
   181  0FEA                     	;# 
   182  0FEB                     	;# 
   183  0FED                     	;# 
   184  0FEE                     	;# 
   185  0FEF                     	;# 
   186  0000                     	;# 
   187  0001                     	;# 
   188  0002                     	;# 
   189  0003                     	;# 
   190  0004                     	;# 
   191  0005                     	;# 
   192  0006                     	;# 
   193  0007                     	;# 
   194  0008                     	;# 
   195  0009                     	;# 
   196  000A                     	;# 
   197  000B                     	;# 
   198  000C                     	;# 
   199  000D                     	;# 
   200  000E                     	;# 
   201  0010                     	;# 
   202  0011                     	;# 
   203  0012                     	;# 
   204  0015                     	;# 
   205  0016                     	;# 
   206  0016                     	;# 
   207  0017                     	;# 
   208  0018                     	;# 
   209  0019                     	;# 
   210  001A                     	;# 
   211  001B                     	;# 
   212  001C                     	;# 
   213  008C                     	;# 
   214  008D                     	;# 
   215  008E                     	;# 
   216  0090                     	;# 
   217  0091                     	;# 
   218  0092                     	;# 
   219  0095                     	;# 
   220  0096                     	;# 
   221  0097                     	;# 
   222  0099                     	;# 
   223  009A                     	;# 
   224  009B                     	;# 
   225  009B                     	;# 
   226  009C                     	;# 
   227  009D                     	;# 
   228  009E                     	;# 
   229  010C                     	;# 
   230  010D                     	;# 
   231  010E                     	;# 
   232  0116                     	;# 
   233  0117                     	;# 
   234  011D                     	;# 
   235  018C                     	;# 
   236  018D                     	;# 
   237  018E                     	;# 
   238  0191                     	;# 
   239  0191                     	;# 
   240  0192                     	;# 
   241  0193                     	;# 
   242  0193                     	;# 
   243  0194                     	;# 
   244  0195                     	;# 
   245  0196                     	;# 
   246  0197                     	;# 
   247  0199                     	;# 
   248  019A                     	;# 
   249  019B                     	;# 
   250  019B                     	;# 
   251  019B                     	;# 
   252  019B                     	;# 
   253  019C                     	;# 
   254  019C                     	;# 
   255  019D                     	;# 
   256  019E                     	;# 
   257  019F                     	;# 
   258  020D                     	;# 
   259  0210                     	;# 
   260  0211                     	;# 
   261  0211                     	;# 
   262  0212                     	;# 
   263  0212                     	;# 
   264  0213                     	;# 
   265  0213                     	;# 
   266  0214                     	;# 
   267  0214                     	;# 
   268  0215                     	;# 
   269  0215                     	;# 
   270  0215                     	;# 
   271  0216                     	;# 
   272  0216                     	;# 
   273  0217                     	;# 
   274  0217                     	;# 
   275  0291                     	;# 
   276  0291                     	;# 
   277  0292                     	;# 
   278  0293                     	;# 
   279  0298                     	;# 
   280  0298                     	;# 
   281  0299                     	;# 
   282  029A                     	;# 
   283  0394                     	;# 
   284  0395                     	;# 
   285  0396                     	;# 
   286  0FE4                     	;# 
   287  0FE5                     	;# 
   288  0FE6                     	;# 
   289  0FE7                     	;# 
   290  0FE8                     	;# 
   291  0FE9                     	;# 
   292  0FEA                     	;# 
   293  0FEB                     	;# 
   294  0FED                     	;# 
   295  0FEE                     	;# 
   296  0FEF                     	;# 
   297  0000                     	;# 
   298  0001                     	;# 
   299  0002                     	;# 
   300  0003                     	;# 
   301  0004                     	;# 
   302  0005                     	;# 
   303  0006                     	;# 
   304  0007                     	;# 
   305  0008                     	;# 
   306  0009                     	;# 
   307  000A                     	;# 
   308  000B                     	;# 
   309  000C                     	;# 
   310  000D                     	;# 
   311  000E                     	;# 
   312  0010                     	;# 
   313  0011                     	;# 
   314  0012                     	;# 
   315  0015                     	;# 
   316  0016                     	;# 
   317  0016                     	;# 
   318  0017                     	;# 
   319  0018                     	;# 
   320  0019                     	;# 
   321  001A                     	;# 
   322  001B                     	;# 
   323  001C                     	;# 
   324  008C                     	;# 
   325  008D                     	;# 
   326  008E                     	;# 
   327  0090                     	;# 
   328  0091                     	;# 
   329  0092                     	;# 
   330  0095                     	;# 
   331  0096                     	;# 
   332  0097                     	;# 
   333  0099                     	;# 
   334  009A                     	;# 
   335  009B                     	;# 
   336  009B                     	;# 
   337  009C                     	;# 
   338  009D                     	;# 
   339  009E                     	;# 
   340  010C                     	;# 
   341  010D                     	;# 
   342  010E                     	;# 
   343  0116                     	;# 
   344  0117                     	;# 
   345  011D                     	;# 
   346  018C                     	;# 
   347  018D                     	;# 
   348  018E                     	;# 
   349  0191                     	;# 
   350  0191                     	;# 
   351  0192                     	;# 
   352  0193                     	;# 
   353  0193                     	;# 
   354  0194                     	;# 
   355  0195                     	;# 
   356  0196                     	;# 
   357  0197                     	;# 
   358  0199                     	;# 
   359  019A                     	;# 
   360  019B                     	;# 
   361  019B                     	;# 
   362  019B                     	;# 
   363  019B                     	;# 
   364  019C                     	;# 
   365  019C                     	;# 
   366  019D                     	;# 
   367  019E                     	;# 
   368  019F                     	;# 
   369  020D                     	;# 
   370  0210                     	;# 
   371  0211                     	;# 
   372  0211                     	;# 
   373  0212                     	;# 
   374  0212                     	;# 
   375  0213                     	;# 
   376  0213                     	;# 
   377  0214                     	;# 
   378  0214                     	;# 
   379  0215                     	;# 
   380  0215                     	;# 
   381  0215                     	;# 
   382  0216                     	;# 
   383  0216                     	;# 
   384  0217                     	;# 
   385  0217                     	;# 
   386  0291                     	;# 
   387  0291                     	;# 
   388  0292                     	;# 
   389  0293                     	;# 
   390  0298                     	;# 
   391  0298                     	;# 
   392  0299                     	;# 
   393  029A                     	;# 
   394  0394                     	;# 
   395  0395                     	;# 
   396  0396                     	;# 
   397  0FE4                     	;# 
   398  0FE5                     	;# 
   399  0FE6                     	;# 
   400  0FE7                     	;# 
   401  0FE8                     	;# 
   402  0FE9                     	;# 
   403  0FEA                     	;# 
   404  0FEB                     	;# 
   405  0FED                     	;# 
   406  0FEE                     	;# 
   407  0FEF                     	;# 
   408  0000                     	;# 
   409  0001                     	;# 
   410  0002                     	;# 
   411  0003                     	;# 
   412  0004                     	;# 
   413  0005                     	;# 
   414  0006                     	;# 
   415  0007                     	;# 
   416  0008                     	;# 
   417  0009                     	;# 
   418  000A                     	;# 
   419  000B                     	;# 
   420  000C                     	;# 
   421  000D                     	;# 
   422  000E                     	;# 
   423  0010                     	;# 
   424  0011                     	;# 
   425  0012                     	;# 
   426  0015                     	;# 
   427  0016                     	;# 
   428  0016                     	;# 
   429  0017                     	;# 
   430  0018                     	;# 
   431  0019                     	;# 
   432  001A                     	;# 
   433  001B                     	;# 
   434  001C                     	;# 
   435  008C                     	;# 
   436  008D                     	;# 
   437  008E                     	;# 
   438  0090                     	;# 
   439  0091                     	;# 
   440  0092                     	;# 
   441  0095                     	;# 
   442  0096                     	;# 
   443  0097                     	;# 
   444  0099                     	;# 
   445  009A                     	;# 
   446  009B                     	;# 
   447  009B                     	;# 
   448  009C                     	;# 
   449  009D                     	;# 
   450  009E                     	;# 
   451  010C                     	;# 
   452  010D                     	;# 
   453  010E                     	;# 
   454  0116                     	;# 
   455  0117                     	;# 
   456  011D                     	;# 
   457  018C                     	;# 
   458  018D                     	;# 
   459  018E                     	;# 
   460  0191                     	;# 
   461  0191                     	;# 
   462  0192                     	;# 
   463  0193                     	;# 
   464  0193                     	;# 
   465  0194                     	;# 
   466  0195                     	;# 
   467  0196                     	;# 
   468  0197                     	;# 
   469  0199                     	;# 
   470  019A                     	;# 
   471  019B                     	;# 
   472  019B                     	;# 
   473  019B                     	;# 
   474  019B                     	;# 
   475  019C                     	;# 
   476  019C                     	;# 
   477  019D                     	;# 
   478  019E                     	;# 
   479  019F                     	;# 
   480  020D                     	;# 
   481  0210                     	;# 
   482  0211                     	;# 
   483  0211                     	;# 
   484  0212                     	;# 
   485  0212                     	;# 
   486  0213                     	;# 
   487  0213                     	;# 
   488  0214                     	;# 
   489  0214                     	;# 
   490  0215                     	;# 
   491  0215                     	;# 
   492  0215                     	;# 
   493  0216                     	;# 
   494  0216                     	;# 
   495  0217                     	;# 
   496  0217                     	;# 
   497  0291                     	;# 
   498  0291                     	;# 
   499  0292                     	;# 
   500  0293                     	;# 
   501  0298                     	;# 
   502  0298                     	;# 
   503  0299                     	;# 
   504  029A                     	;# 
   505  0394                     	;# 
   506  0395                     	;# 
   507  0396                     	;# 
   508  0FE4                     	;# 
   509  0FE5                     	;# 
   510  0FE6                     	;# 
   511  0FE7                     	;# 
   512  0FE8                     	;# 
   513  0FE9                     	;# 
   514  0FEA                     	;# 
   515  0FEB                     	;# 
   516  0FED                     	;# 
   517  0FEE                     	;# 
   518  0FEF                     	;# 
   519  0000                     	;# 
   520  0001                     	;# 
   521  0002                     	;# 
   522  0003                     	;# 
   523  0004                     	;# 
   524  0005                     	;# 
   525  0006                     	;# 
   526  0007                     	;# 
   527  0008                     	;# 
   528  0009                     	;# 
   529  000A                     	;# 
   530  000B                     	;# 
   531  000C                     	;# 
   532  000D                     	;# 
   533  000E                     	;# 
   534  0010                     	;# 
   535  0011                     	;# 
   536  0012                     	;# 
   537  0015                     	;# 
   538  0016                     	;# 
   539  0016                     	;# 
   540  0017                     	;# 
   541  0018                     	;# 
   542  0019                     	;# 
   543  001A                     	;# 
   544  001B                     	;# 
   545  001C                     	;# 
   546  008C                     	;# 
   547  008D                     	;# 
   548  008E                     	;# 
   549  0090                     	;# 
   550  0091                     	;# 
   551  0092                     	;# 
   552  0095                     	;# 
   553  0096                     	;# 
   554  0097                     	;# 
   555  0099                     	;# 
   556  009A                     	;# 
   557  009B                     	;# 
   558  009B                     	;# 
   559  009C                     	;# 
   560  009D                     	;# 
   561  009E                     	;# 
   562  010C                     	;# 
   563  010D                     	;# 
   564  010E                     	;# 
   565  0116                     	;# 
   566  0117                     	;# 
   567  011D                     	;# 
   568  018C                     	;# 
   569  018D                     	;# 
   570  018E                     	;# 
   571  0191                     	;# 
   572  0191                     	;# 
   573  0192                     	;# 
   574  0193                     	;# 
   575  0193                     	;# 
   576  0194                     	;# 
   577  0195                     	;# 
   578  0196                     	;# 
   579  0197                     	;# 
   580  0199                     	;# 
   581  019A                     	;# 
   582  019B                     	;# 
   583  019B                     	;# 
   584  019B                     	;# 
   585  019B                     	;# 
   586  019C                     	;# 
   587  019C                     	;# 
   588  019D                     	;# 
   589  019E                     	;# 
   590  019F                     	;# 
   591  020D                     	;# 
   592  0210                     	;# 
   593  0211                     	;# 
   594  0211                     	;# 
   595  0212                     	;# 
   596  0212                     	;# 
   597  0213                     	;# 
   598  0213                     	;# 
   599  0214                     	;# 
   600  0214                     	;# 
   601  0215                     	;# 
   602  0215                     	;# 
   603  0215                     	;# 
   604  0216                     	;# 
   605  0216                     	;# 
   606  0217                     	;# 
   607  0217                     	;# 
   608  0291                     	;# 
   609  0291                     	;# 
   610  0292                     	;# 
   611  0293                     	;# 
   612  0298                     	;# 
   613  0298                     	;# 
   614  0299                     	;# 
   615  029A                     	;# 
   616  0394                     	;# 
   617  0395                     	;# 
   618  0396                     	;# 
   619  0FE4                     	;# 
   620  0FE5                     	;# 
   621  0FE6                     	;# 
   622  0FE7                     	;# 
   623  0FE8                     	;# 
   624  0FE9                     	;# 
   625  0FEA                     	;# 
   626  0FEB                     	;# 
   627  0FED                     	;# 
   628  0FEE                     	;# 
   629  0FEF                     	;# 
   630  0000                     	;# 
   631  0001                     	;# 
   632  0002                     	;# 
   633  0003                     	;# 
   634  0004                     	;# 
   635  0005                     	;# 
   636  0006                     	;# 
   637  0007                     	;# 
   638  0008                     	;# 
   639  0009                     	;# 
   640  000A                     	;# 
   641  000B                     	;# 
   642  000C                     	;# 
   643  000D                     	;# 
   644  000E                     	;# 
   645  0010                     	;# 
   646  0011                     	;# 
   647  0012                     	;# 
   648  0015                     	;# 
   649  0016                     	;# 
   650  0016                     	;# 
   651  0017                     	;# 
   652  0018                     	;# 
   653  0019                     	;# 
   654  001A                     	;# 
   655  001B                     	;# 
   656  001C                     	;# 
   657  008C                     	;# 
   658  008D                     	;# 
   659  008E                     	;# 
   660  0090                     	;# 
   661  0091                     	;# 
   662  0092                     	;# 
   663  0095                     	;# 
   664  0096                     	;# 
   665  0097                     	;# 
   666  0099                     	;# 
   667  009A                     	;# 
   668  009B                     	;# 
   669  009B                     	;# 
   670  009C                     	;# 
   671  009D                     	;# 
   672  009E                     	;# 
   673  010C                     	;# 
   674  010D                     	;# 
   675  010E                     	;# 
   676  0116                     	;# 
   677  0117                     	;# 
   678  011D                     	;# 
   679  018C                     	;# 
   680  018D                     	;# 
   681  018E                     	;# 
   682  0191                     	;# 
   683  0191                     	;# 
   684  0192                     	;# 
   685  0193                     	;# 
   686  0193                     	;# 
   687  0194                     	;# 
   688  0195                     	;# 
   689  0196                     	;# 
   690  0197                     	;# 
   691  0199                     	;# 
   692  019A                     	;# 
   693  019B                     	;# 
   694  019B                     	;# 
   695  019B                     	;# 
   696  019B                     	;# 
   697  019C                     	;# 
   698  019C                     	;# 
   699  019D                     	;# 
   700  019E                     	;# 
   701  019F                     	;# 
   702  020D                     	;# 
   703  0210                     	;# 
   704  0211                     	;# 
   705  0211                     	;# 
   706  0212                     	;# 
   707  0212                     	;# 
   708  0213                     	;# 
   709  0213                     	;# 
   710  0214                     	;# 
   711  0214                     	;# 
   712  0215                     	;# 
   713  0215                     	;# 
   714  0215                     	;# 
   715  0216                     	;# 
   716  0216                     	;# 
   717  0217                     	;# 
   718  0217                     	;# 
   719  0291                     	;# 
   720  0291                     	;# 
   721  0292                     	;# 
   722  0293                     	;# 
   723  0298                     	;# 
   724  0298                     	;# 
   725  0299                     	;# 
   726  029A                     	;# 
   727  0394                     	;# 
   728  0395                     	;# 
   729  0396                     	;# 
   730  0FE4                     	;# 
   731  0FE5                     	;# 
   732  0FE6                     	;# 
   733  0FE7                     	;# 
   734  0FE8                     	;# 
   735  0FE9                     	;# 
   736  0FEA                     	;# 
   737  0FEB                     	;# 
   738  0FED                     	;# 
   739  0FEE                     	;# 
   740  0FEF                     	;# 
   741  0000                     	;# 
   742  0001                     	;# 
   743  0002                     	;# 
   744  0003                     	;# 
   745  0004                     	;# 
   746  0005                     	;# 
   747  0006                     	;# 
   748  0007                     	;# 
   749  0008                     	;# 
   750  0009                     	;# 
   751  000A                     	;# 
   752  000B                     	;# 
   753  000C                     	;# 
   754  000D                     	;# 
   755  000E                     	;# 
   756  0010                     	;# 
   757  0011                     	;# 
   758  0012                     	;# 
   759  0015                     	;# 
   760  0016                     	;# 
   761  0016                     	;# 
   762  0017                     	;# 
   763  0018                     	;# 
   764  0019                     	;# 
   765  001A                     	;# 
   766  001B                     	;# 
   767  001C                     	;# 
   768  008C                     	;# 
   769  008D                     	;# 
   770  008E                     	;# 
   771  0090                     	;# 
   772  0091                     	;# 
   773  0092                     	;# 
   774  0095                     	;# 
   775  0096                     	;# 
   776  0097                     	;# 
   777  0099                     	;# 
   778  009A                     	;# 
   779  009B                     	;# 
   780  009B                     	;# 
   781  009C                     	;# 
   782  009D                     	;# 
   783  009E                     	;# 
   784  010C                     	;# 
   785  010D                     	;# 
   786  010E                     	;# 
   787  0116                     	;# 
   788  0117                     	;# 
   789  011D                     	;# 
   790  018C                     	;# 
   791  018D                     	;# 
   792  018E                     	;# 
   793  0191                     	;# 
   794  0191                     	;# 
   795  0192                     	;# 
   796  0193                     	;# 
   797  0193                     	;# 
   798  0194                     	;# 
   799  0195                     	;# 
   800  0196                     	;# 
   801  0197                     	;# 
   802  0199                     	;# 
   803  019A                     	;# 
   804  019B                     	;# 
   805  019B                     	;# 
   806  019B                     	;# 
   807  019B                     	;# 
   808  019C                     	;# 
   809  019C                     	;# 
   810  019D                     	;# 
   811  019E                     	;# 
   812  019F                     	;# 
   813  020D                     	;# 
   814  0210                     	;# 
   815  0211                     	;# 
   816  0211                     	;# 
   817  0212                     	;# 
   818  0212                     	;# 
   819  0213                     	;# 
   820  0213                     	;# 
   821  0214                     	;# 
   822  0214                     	;# 
   823  0215                     	;# 
   824  0215                     	;# 
   825  0215                     	;# 
   826  0216                     	;# 
   827  0216                     	;# 
   828  0217                     	;# 
   829  0217                     	;# 
   830  0291                     	;# 
   831  0291                     	;# 
   832  0292                     	;# 
   833  0293                     	;# 
   834  0298                     	;# 
   835  0298                     	;# 
   836  0299                     	;# 
   837  029A                     	;# 
   838  0394                     	;# 
   839  0395                     	;# 
   840  0396                     	;# 
   841  0FE4                     	;# 
   842  0FE5                     	;# 
   843  0FE6                     	;# 
   844  0FE7                     	;# 
   845  0FE8                     	;# 
   846  0FE9                     	;# 
   847  0FEA                     	;# 
   848  0FEB                     	;# 
   849  0FED                     	;# 
   850  0FEE                     	;# 
   851  0FEF                     	;# 
   852  0000                     	;# 
   853  0001                     	;# 
   854  0002                     	;# 
   855  0003                     	;# 
   856  0004                     	;# 
   857  0005                     	;# 
   858  0006                     	;# 
   859  0007                     	;# 
   860  0008                     	;# 
   861  0009                     	;# 
   862  000A                     	;# 
   863  000B                     	;# 
   864  000C                     	;# 
   865  000D                     	;# 
   866  000E                     	;# 
   867  0010                     	;# 
   868  0011                     	;# 
   869  0012                     	;# 
   870  0015                     	;# 
   871  0016                     	;# 
   872  0016                     	;# 
   873  0017                     	;# 
   874  0018                     	;# 
   875  0019                     	;# 
   876  001A                     	;# 
   877  001B                     	;# 
   878  001C                     	;# 
   879  008C                     	;# 
   880  008D                     	;# 
   881  008E                     	;# 
   882  0090                     	;# 
   883  0091                     	;# 
   884  0092                     	;# 
   885  0095                     	;# 
   886  0096                     	;# 
   887  0097                     	;# 
   888  0099                     	;# 
   889  009A                     	;# 
   890  009B                     	;# 
   891  009B                     	;# 
   892  009C                     	;# 
   893  009D                     	;# 
   894  009E                     	;# 
   895  010C                     	;# 
   896  010D                     	;# 
   897  010E                     	;# 
   898  0116                     	;# 
   899  0117                     	;# 
   900  011D                     	;# 
   901  018C                     	;# 
   902  018D                     	;# 
   903  018E                     	;# 
   904  0191                     	;# 
   905  0191                     	;# 
   906  0192                     	;# 
   907  0193                     	;# 
   908  0193                     	;# 
   909  0194                     	;# 
   910  0195                     	;# 
   911  0196                     	;# 
   912  0197                     	;# 
   913  0199                     	;# 
   914  019A                     	;# 
   915  019B                     	;# 
   916  019B                     	;# 
   917  019B                     	;# 
   918  019B                     	;# 
   919  019C                     	;# 
   920  019C                     	;# 
   921  019D                     	;# 
   922  019E                     	;# 
   923  019F                     	;# 
   924  020D                     	;# 
   925  0210                     	;# 
   926  0211                     	;# 
   927  0211                     	;# 
   928  0212                     	;# 
   929  0212                     	;# 
   930  0213                     	;# 
   931  0213                     	;# 
   932  0214                     	;# 
   933  0214                     	;# 
   934  0215                     	;# 
   935  0215                     	;# 
   936  0215                     	;# 
   937  0216                     	;# 
   938  0216                     	;# 
   939  0217                     	;# 
   940  0217                     	;# 
   941  0291                     	;# 
   942  0291                     	;# 
   943  0292                     	;# 
   944  0293                     	;# 
   945  0298                     	;# 
   946  0298                     	;# 
   947  0299                     	;# 
   948  029A                     	;# 
   949  0394                     	;# 
   950  0395                     	;# 
   951  0396                     	;# 
   952  0FE4                     	;# 
   953  0FE5                     	;# 
   954  0FE6                     	;# 
   955  0FE7                     	;# 
   956  0FE8                     	;# 
   957  0FE9                     	;# 
   958  0FEA                     	;# 
   959  0FEB                     	;# 
   960  0FED                     	;# 
   961  0FEE                     	;# 
   962  0FEF                     	;# 
   963  0000                     	;# 
   964  0001                     	;# 
   965  0002                     	;# 
   966  0003                     	;# 
   967  0004                     	;# 
   968  0005                     	;# 
   969  0006                     	;# 
   970  0007                     	;# 
   971  0008                     	;# 
   972  0009                     	;# 
   973  000A                     	;# 
   974  000B                     	;# 
   975  000C                     	;# 
   976  000D                     	;# 
   977  000E                     	;# 
   978  0010                     	;# 
   979  0011                     	;# 
   980  0012                     	;# 
   981  0015                     	;# 
   982  0016                     	;# 
   983  0016                     	;# 
   984  0017                     	;# 
   985  0018                     	;# 
   986  0019                     	;# 
   987  001A                     	;# 
   988  001B                     	;# 
   989  001C                     	;# 
   990  008C                     	;# 
   991  008D                     	;# 
   992  008E                     	;# 
   993  0090                     	;# 
   994  0091                     	;# 
   995  0092                     	;# 
   996  0095                     	;# 
   997  0096                     	;# 
   998  0097                     	;# 
   999  0099                     	;# 
  1000  009A                     	;# 
  1001  009B                     	;# 
  1002  009B                     	;# 
  1003  009C                     	;# 
  1004  009D                     	;# 
  1005  009E                     	;# 
  1006  010C                     	;# 
  1007  010D                     	;# 
  1008  010E                     	;# 
  1009  0116                     	;# 
  1010  0117                     	;# 
  1011  011D                     	;# 
  1012  018C                     	;# 
  1013  018D                     	;# 
  1014  018E                     	;# 
  1015  0191                     	;# 
  1016  0191                     	;# 
  1017  0192                     	;# 
  1018  0193                     	;# 
  1019  0193                     	;# 
  1020  0194                     	;# 
  1021  0195                     	;# 
  1022  0196                     	;# 
  1023  0197                     	;# 
  1024  0199                     	;# 
  1025  019A                     	;# 
  1026  019B                     	;# 
  1027  019B                     	;# 
  1028  019B                     	;# 
  1029  019B                     	;# 
  1030  019C                     	;# 
  1031  019C                     	;# 
  1032  019D                     	;# 
  1033  019E                     	;# 
  1034  019F                     	;# 
  1035  020D                     	;# 
  1036  0210                     	;# 
  1037  0211                     	;# 
  1038  0211                     	;# 
  1039  0212                     	;# 
  1040  0212                     	;# 
  1041  0213                     	;# 
  1042  0213                     	;# 
  1043  0214                     	;# 
  1044  0214                     	;# 
  1045  0215                     	;# 
  1046  0215                     	;# 
  1047  0215                     	;# 
  1048  0216                     	;# 
  1049  0216                     	;# 
  1050  0217                     	;# 
  1051  0217                     	;# 
  1052  0291                     	;# 
  1053  0291                     	;# 
  1054  0292                     	;# 
  1055  0293                     	;# 
  1056  0298                     	;# 
  1057  0298                     	;# 
  1058  0299                     	;# 
  1059  029A                     	;# 
  1060  0394                     	;# 
  1061  0395                     	;# 
  1062  0396                     	;# 
  1063  0FE4                     	;# 
  1064  0FE5                     	;# 
  1065  0FE6                     	;# 
  1066  0FE7                     	;# 
  1067  0FE8                     	;# 
  1068  0FE9                     	;# 
  1069  0FEA                     	;# 
  1070  0FEB                     	;# 
  1071  0FED                     	;# 
  1072  0FEE                     	;# 
  1073  0FEF                     	;# 
  1074  0000                     	;# 
  1075  0001                     	;# 
  1076  0002                     	;# 
  1077  0003                     	;# 
  1078  0004                     	;# 
  1079  0005                     	;# 
  1080  0006                     	;# 
  1081  0007                     	;# 
  1082  0008                     	;# 
  1083  0009                     	;# 
  1084  000A                     	;# 
  1085  000B                     	;# 
  1086  000C                     	;# 
  1087  000D                     	;# 
  1088  000E                     	;# 
  1089  0010                     	;# 
  1090  0011                     	;# 
  1091  0012                     	;# 
  1092  0015                     	;# 
  1093  0016                     	;# 
  1094  0016                     	;# 
  1095  0017                     	;# 
  1096  0018                     	;# 
  1097  0019                     	;# 
  1098  001A                     	;# 
  1099  001B                     	;# 
  1100  001C                     	;# 
  1101  008C                     	;# 
  1102  008D                     	;# 
  1103  008E                     	;# 
  1104  0090                     	;# 
  1105  0091                     	;# 
  1106  0092                     	;# 
  1107  0095                     	;# 
  1108  0096                     	;# 
  1109  0097                     	;# 
  1110  0099                     	;# 
  1111  009A                     	;# 
  1112  009B                     	;# 
  1113  009B                     	;# 
  1114  009C                     	;# 
  1115  009D                     	;# 
  1116  009E                     	;# 
  1117  010C                     	;# 
  1118  010D                     	;# 
  1119  010E                     	;# 
  1120  0116                     	;# 
  1121  0117                     	;# 
  1122  011D                     	;# 
  1123  018C                     	;# 
  1124  018D                     	;# 
  1125  018E                     	;# 
  1126  0191                     	;# 
  1127  0191                     	;# 
  1128  0192                     	;# 
  1129  0193                     	;# 
  1130  0193                     	;# 
  1131  0194                     	;# 
  1132  0195                     	;# 
  1133  0196                     	;# 
  1134  0197                     	;# 
  1135  0199                     	;# 
  1136  019A                     	;# 
  1137  019B                     	;# 
  1138  019B                     	;# 
  1139  019B                     	;# 
  1140  019B                     	;# 
  1141  019C                     	;# 
  1142  019C                     	;# 
  1143  019D                     	;# 
  1144  019E                     	;# 
  1145  019F                     	;# 
  1146  020D                     	;# 
  1147  0210                     	;# 
  1148  0211                     	;# 
  1149  0211                     	;# 
  1150  0212                     	;# 
  1151  0212                     	;# 
  1152  0213                     	;# 
  1153  0213                     	;# 
  1154  0214                     	;# 
  1155  0214                     	;# 
  1156  0215                     	;# 
  1157  0215                     	;# 
  1158  0215                     	;# 
  1159  0216                     	;# 
  1160  0216                     	;# 
  1161  0217                     	;# 
  1162  0217                     	;# 
  1163  0291                     	;# 
  1164  0291                     	;# 
  1165  0292                     	;# 
  1166  0293                     	;# 
  1167  0298                     	;# 
  1168  0298                     	;# 
  1169  0299                     	;# 
  1170  029A                     	;# 
  1171  0394                     	;# 
  1172  0395                     	;# 
  1173  0396                     	;# 
  1174  0FE4                     	;# 
  1175  0FE5                     	;# 
  1176  0FE6                     	;# 
  1177  0FE7                     	;# 
  1178  0FE8                     	;# 
  1179  0FE9                     	;# 
  1180  0FEA                     	;# 
  1181  0FEB                     	;# 
  1182  0FED                     	;# 
  1183  0FEE                     	;# 
  1184  0FEF                     	;# 
  1185  0000                     	;# 
  1186  0001                     	;# 
  1187  0002                     	;# 
  1188  0003                     	;# 
  1189  0004                     	;# 
  1190  0005                     	;# 
  1191  0006                     	;# 
  1192  0007                     	;# 
  1193  0008                     	;# 
  1194  0009                     	;# 
  1195  000A                     	;# 
  1196  000B                     	;# 
  1197  000C                     	;# 
  1198  000D                     	;# 
  1199  000E                     	;# 
  1200  0010                     	;# 
  1201  0011                     	;# 
  1202  0012                     	;# 
  1203  0015                     	;# 
  1204  0016                     	;# 
  1205  0016                     	;# 
  1206  0017                     	;# 
  1207  0018                     	;# 
  1208  0019                     	;# 
  1209  001A                     	;# 
  1210  001B                     	;# 
  1211  001C                     	;# 
  1212  008C                     	;# 
  1213  008D                     	;# 
  1214  008E                     	;# 
  1215  0090                     	;# 
  1216  0091                     	;# 
  1217  0092                     	;# 
  1218  0095                     	;# 
  1219  0096                     	;# 
  1220  0097                     	;# 
  1221  0099                     	;# 
  1222  009A                     	;# 
  1223  009B                     	;# 
  1224  009B                     	;# 
  1225  009C                     	;# 
  1226  009D                     	;# 
  1227  009E                     	;# 
  1228  010C                     	;# 
  1229  010D                     	;# 
  1230  010E                     	;# 
  1231  0116                     	;# 
  1232  0117                     	;# 
  1233  011D                     	;# 
  1234  018C                     	;# 
  1235  018D                     	;# 
  1236  018E                     	;# 
  1237  0191                     	;# 
  1238  0191                     	;# 
  1239  0192                     	;# 
  1240  0193                     	;# 
  1241  0193                     	;# 
  1242  0194                     	;# 
  1243  0195                     	;# 
  1244  0196                     	;# 
  1245  0197                     	;# 
  1246  0199                     	;# 
  1247  019A                     	;# 
  1248  019B                     	;# 
  1249  019B                     	;# 
  1250  019B                     	;# 
  1251  019B                     	;# 
  1252  019C                     	;# 
  1253  019C                     	;# 
  1254  019D                     	;# 
  1255  019E                     	;# 
  1256  019F                     	;# 
  1257  020D                     	;# 
  1258  0210                     	;# 
  1259  0211                     	;# 
  1260  0211                     	;# 
  1261  0212                     	;# 
  1262  0212                     	;# 
  1263  0213                     	;# 
  1264  0213                     	;# 
  1265  0214                     	;# 
  1266  0214                     	;# 
  1267  0215                     	;# 
  1268  0215                     	;# 
  1269  0215                     	;# 
  1270  0216                     	;# 
  1271  0216                     	;# 
  1272  0217                     	;# 
  1273  0217                     	;# 
  1274  0291                     	;# 
  1275  0291                     	;# 
  1276  0292                     	;# 
  1277  0293                     	;# 
  1278  0298                     	;# 
  1279  0298                     	;# 
  1280  0299                     	;# 
  1281  029A                     	;# 
  1282  0394                     	;# 
  1283  0395                     	;# 
  1284  0396                     	;# 
  1285  0FE4                     	;# 
  1286  0FE5                     	;# 
  1287  0FE6                     	;# 
  1288  0FE7                     	;# 
  1289  0FE8                     	;# 
  1290  0FE9                     	;# 
  1291  0FEA                     	;# 
  1292  0FEB                     	;# 
  1293  0FED                     	;# 
  1294  0FEE                     	;# 
  1295  0FEF                     	;# 
  1296  0000                     	;# 
  1297  0001                     	;# 
  1298  0002                     	;# 
  1299  0003                     	;# 
  1300  0004                     	;# 
  1301  0005                     	;# 
  1302  0006                     	;# 
  1303  0007                     	;# 
  1304  0008                     	;# 
  1305  0009                     	;# 
  1306  000A                     	;# 
  1307  000B                     	;# 
  1308  000C                     	;# 
  1309  000D                     	;# 
  1310  000E                     	;# 
  1311  0010                     	;# 
  1312  0011                     	;# 
  1313  0012                     	;# 
  1314  0015                     	;# 
  1315  0016                     	;# 
  1316  0016                     	;# 
  1317  0017                     	;# 
  1318  0018                     	;# 
  1319  0019                     	;# 
  1320  001A                     	;# 
  1321  001B                     	;# 
  1322  001C                     	;# 
  1323  008C                     	;# 
  1324  008D                     	;# 
  1325  008E                     	;# 
  1326  0090                     	;# 
  1327  0091                     	;# 
  1328  0092                     	;# 
  1329  0095                     	;# 
  1330  0096                     	;# 
  1331  0097                     	;# 
  1332  0099                     	;# 
  1333  009A                     	;# 
  1334  009B                     	;# 
  1335  009B                     	;# 
  1336  009C                     	;# 
  1337  009D                     	;# 
  1338  009E                     	;# 
  1339  010C                     	;# 
  1340  010D                     	;# 
  1341  010E                     	;# 
  1342  0116                     	;# 
  1343  0117                     	;# 
  1344  011D                     	;# 
  1345  018C                     	;# 
  1346  018D                     	;# 
  1347  018E                     	;# 
  1348  0191                     	;# 
  1349  0191                     	;# 
  1350  0192                     	;# 
  1351  0193                     	;# 
  1352  0193                     	;# 
  1353  0194                     	;# 
  1354  0195                     	;# 
  1355  0196                     	;# 
  1356  0197                     	;# 
  1357  0199                     	;# 
  1358  019A                     	;# 
  1359  019B                     	;# 
  1360  019B                     	;# 
  1361  019B                     	;# 
  1362  019B                     	;# 
  1363  019C                     	;# 
  1364  019C                     	;# 
  1365  019D                     	;# 
  1366  019E                     	;# 
  1367  019F                     	;# 
  1368  020D                     	;# 
  1369  0210                     	;# 
  1370  0211                     	;# 
  1371  0211                     	;# 
  1372  0212                     	;# 
  1373  0212                     	;# 
  1374  0213                     	;# 
  1375  0213                     	;# 
  1376  0214                     	;# 
  1377  0214                     	;# 
  1378  0215                     	;# 
  1379  0215                     	;# 
  1380  0215                     	;# 
  1381  0216                     	;# 
  1382  0216                     	;# 
  1383  0217                     	;# 
  1384  0217                     	;# 
  1385  0291                     	;# 
  1386  0291                     	;# 
  1387  0292                     	;# 
  1388  0293                     	;# 
  1389  0298                     	;# 
  1390  0298                     	;# 
  1391  0299                     	;# 
  1392  029A                     	;# 
  1393  0394                     	;# 
  1394  0395                     	;# 
  1395  0396                     	;# 
  1396  0FE4                     	;# 
  1397  0FE5                     	;# 
  1398  0FE6                     	;# 
  1399  0FE7                     	;# 
  1400  0FE8                     	;# 
  1401  0FE9                     	;# 
  1402  0FEA                     	;# 
  1403  0FEB                     	;# 
  1404  0FED                     	;# 
  1405  0FEE                     	;# 
  1406  0FEF                     	;# 
  1407  0000                     	;# 
  1408  0001                     	;# 
  1409  0002                     	;# 
  1410  0003                     	;# 
  1411  0004                     	;# 
  1412  0005                     	;# 
  1413  0006                     	;# 
  1414  0007                     	;# 
  1415  0008                     	;# 
  1416  0009                     	;# 
  1417  000A                     	;# 
  1418  000B                     	;# 
  1419  000C                     	;# 
  1420  000D                     	;# 
  1421  000E                     	;# 
  1422  0010                     	;# 
  1423  0011                     	;# 
  1424  0012                     	;# 
  1425  0015                     	;# 
  1426  0016                     	;# 
  1427  0016                     	;# 
  1428  0017                     	;# 
  1429  0018                     	;# 
  1430  0019                     	;# 
  1431  001A                     	;# 
  1432  001B                     	;# 
  1433  001C                     	;# 
  1434  008C                     	;# 
  1435  008D                     	;# 
  1436  008E                     	;# 
  1437  0090                     	;# 
  1438  0091                     	;# 
  1439  0092                     	;# 
  1440  0095                     	;# 
  1441  0096                     	;# 
  1442  0097                     	;# 
  1443  0099                     	;# 
  1444  009A                     	;# 
  1445  009B                     	;# 
  1446  009B                     	;# 
  1447  009C                     	;# 
  1448  009D                     	;# 
  1449  009E                     	;# 
  1450  010C                     	;# 
  1451  010D                     	;# 
  1452  010E                     	;# 
  1453  0116                     	;# 
  1454  0117                     	;# 
  1455  011D                     	;# 
  1456  018C                     	;# 
  1457  018D                     	;# 
  1458  018E                     	;# 
  1459  0191                     	;# 
  1460  0191                     	;# 
  1461  0192                     	;# 
  1462  0193                     	;# 
  1463  0193                     	;# 
  1464  0194                     	;# 
  1465  0195                     	;# 
  1466  0196                     	;# 
  1467  0197                     	;# 
  1468  0199                     	;# 
  1469  019A                     	;# 
  1470  019B                     	;# 
  1471  019B                     	;# 
  1472  019B                     	;# 
  1473  019B                     	;# 
  1474  019C                     	;# 
  1475  019C                     	;# 
  1476  019D                     	;# 
  1477  019E                     	;# 
  1478  019F                     	;# 
  1479  020D                     	;# 
  1480  0210                     	;# 
  1481  0211                     	;# 
  1482  0211                     	;# 
  1483  0212                     	;# 
  1484  0212                     	;# 
  1485  0213                     	;# 
  1486  0213                     	;# 
  1487  0214                     	;# 
  1488  0214                     	;# 
  1489  0215                     	;# 
  1490  0215                     	;# 
  1491  0215                     	;# 
  1492  0216                     	;# 
  1493  0216                     	;# 
  1494  0217                     	;# 
  1495  0217                     	;# 
  1496  0291                     	;# 
  1497  0291                     	;# 
  1498  0292                     	;# 
  1499  0293                     	;# 
  1500  0298                     	;# 
  1501  0298                     	;# 
  1502  0299                     	;# 
  1503  029A                     	;# 
  1504  0394                     	;# 
  1505  0395                     	;# 
  1506  0396                     	;# 
  1507  0FE4                     	;# 
  1508  0FE5                     	;# 
  1509  0FE6                     	;# 
  1510  0FE7                     	;# 
  1511  0FE8                     	;# 
  1512  0FE9                     	;# 
  1513  0FEA                     	;# 
  1514  0FEB                     	;# 
  1515  0FED                     	;# 
  1516  0FEE                     	;# 
  1517  0FEF                     	;# 
  1518  0000                     	;# 
  1519  0001                     	;# 
  1520  0002                     	;# 
  1521  0003                     	;# 
  1522  0004                     	;# 
  1523  0005                     	;# 
  1524  0006                     	;# 
  1525  0007                     	;# 
  1526  0008                     	;# 
  1527  0009                     	;# 
  1528  000A                     	;# 
  1529  000B                     	;# 
  1530  000C                     	;# 
  1531  000D                     	;# 
  1532  000E                     	;# 
  1533  0010                     	;# 
  1534  0011                     	;# 
  1535  0012                     	;# 
  1536  0015                     	;# 
  1537  0016                     	;# 
  1538  0016                     	;# 
  1539  0017                     	;# 
  1540  0018                     	;# 
  1541  0019                     	;# 
  1542  001A                     	;# 
  1543  001B                     	;# 
  1544  001C                     	;# 
  1545  008C                     	;# 
  1546  008D                     	;# 
  1547  008E                     	;# 
  1548  0090                     	;# 
  1549  0091                     	;# 
  1550  0092                     	;# 
  1551  0095                     	;# 
  1552  0096                     	;# 
  1553  0097                     	;# 
  1554  0099                     	;# 
  1555  009A                     	;# 
  1556  009B                     	;# 
  1557  009B                     	;# 
  1558  009C                     	;# 
  1559  009D                     	;# 
  1560  009E                     	;# 
  1561  010C                     	;# 
  1562  010D                     	;# 
  1563  010E                     	;# 
  1564  0116                     	;# 
  1565  0117                     	;# 
  1566  011D                     	;# 
  1567  018C                     	;# 
  1568  018D                     	;# 
  1569  018E                     	;# 
  1570  0191                     	;# 
  1571  0191                     	;# 
  1572  0192                     	;# 
  1573  0193                     	;# 
  1574  0193                     	;# 
  1575  0194                     	;# 
  1576  0195                     	;# 
  1577  0196                     	;# 
  1578  0197                     	;# 
  1579  0199                     	;# 
  1580  019A                     	;# 
  1581  019B                     	;# 
  1582  019B                     	;# 
  1583  019B                     	;# 
  1584  019B                     	;# 
  1585  019C                     	;# 
  1586  019C                     	;# 
  1587  019D                     	;# 
  1588  019E                     	;# 
  1589  019F                     	;# 
  1590  020D                     	;# 
  1591  0210                     	;# 
  1592  0211                     	;# 
  1593  0211                     	;# 
  1594  0212                     	;# 
  1595  0212                     	;# 
  1596  0213                     	;# 
  1597  0213                     	;# 
  1598  0214                     	;# 
  1599  0214                     	;# 
  1600  0215                     	;# 
  1601  0215                     	;# 
  1602  0215                     	;# 
  1603  0216                     	;# 
  1604  0216                     	;# 
  1605  0217                     	;# 
  1606  0217                     	;# 
  1607  0291                     	;# 
  1608  0291                     	;# 
  1609  0292                     	;# 
  1610  0293                     	;# 
  1611  0298                     	;# 
  1612  0298                     	;# 
  1613  0299                     	;# 
  1614  029A                     	;# 
  1615  0394                     	;# 
  1616  0395                     	;# 
  1617  0396                     	;# 
  1618  0FE4                     	;# 
  1619  0FE5                     	;# 
  1620  0FE6                     	;# 
  1621  0FE7                     	;# 
  1622  0FE8                     	;# 
  1623  0FE9                     	;# 
  1624  0FEA                     	;# 
  1625  0FEB                     	;# 
  1626  0FED                     	;# 
  1627  0FEE                     	;# 
  1628  0FEF                     	;# 
  1629                           
  1630                           	psect	idataBANK1
  1631  0B2C                     __pidataBANK1:	
  1632                           
  1633                           ;initializer for _cc1PaTable
  1634  0B2C  3403               	retlw	3
  1635  0B2D  340F               	retlw	15
  1636  0B2E  341E               	retlw	30
  1637  0B2F  3427               	retlw	39
  1638  0B30  3450               	retlw	80
  1639  0B31  3481               	retlw	129
  1640  0B32  34CB               	retlw	203
  1641  0B33  34C2               	retlw	194
  1642                           
  1643                           	psect	idataBANK2
  1644  0EC6                     __pidataBANK2:	
  1645                           
  1646                           ;initializer for _cc1InitVal
  1647  0EC6  3447               	retlw	71
  1648  0EC7  3446               	retlw	70
  1649  0EC8  344E               	retlw	78
  1650  0EC9  340B               	retlw	11
  1651  0ECA  34D3               	retlw	211
  1652  0ECB  3491               	retlw	145
  1653  0ECC  340B               	retlw	11
  1654  0ECD  3408               	retlw	8
  1655  0ECE  3404               	retlw	4
  1656  0ECF  3400               	retlw	0
  1657  0ED0  3400               	retlw	0
  1658  0ED1  3406               	retlw	6
  1659  0ED2  3400               	retlw	0
  1660  0ED3  3421               	retlw	33
  1661  0ED4  3463               	retlw	99
  1662  0ED5  3491               	retlw	145
  1663  0ED6  34CA               	retlw	202
  1664  0ED7  3483               	retlw	131
  1665  0ED8  3402               	retlw	2
  1666  0ED9  3402               	retlw	2
  1667  0EDA  343B               	retlw	59
  1668  0EDB  3434               	retlw	52
  1669  0EDC  3407               	retlw	7
  1670  0EDD  343F               	retlw	63
  1671  0EDE  3408               	retlw	8
  1672  0EDF  3416               	retlw	22
  1673  0EE0  346C               	retlw	108
  1674  0EE1  3403               	retlw	3
  1675  0EE2  3440               	retlw	64
  1676  0EE3  3491               	retlw	145
  1677  0EE4  3487               	retlw	135
  1678  0EE5  346B               	retlw	107
  1679  0EE6  34FB               	retlw	251
  1680  0EE7  3456               	retlw	86
  1681  0EE8  3416               	retlw	22
  1682  0EE9  34E9               	retlw	233
  1683  0EEA  342A               	retlw	42
  1684  0EEB  3400               	retlw	0
  1685  0EEC  341F               	retlw	31
  1686  0EED  3441               	retlw	65
  1687  0EEE  3400               	retlw	0
  1688  0EEF  3459               	retlw	89
  1689  0EF0  347F               	retlw	127
  1690  0EF1  343F               	retlw	63
  1691  0EF2  3481               	retlw	129
  1692  0EF3  3435               	retlw	53
  1693  0EF4  3409               	retlw	9
  1694  3820                     _nvm_pgm_cfg_absaddr	set	14368
  1695  3820                     _nvm_pgm_cfg_absaddr	set	14368
  1696                           
  1697                           	psect	_nvm_pgm_cfg_text
  1698  3820                     __p_nvm_pgm_cfg_text:	
  1699  3820                     _nvm_pgm_cfg:	
  1700  3820  345C               	retlw	92
  1701  3821  34C5               	retlw	197
  1702  3822  3400               	retlw	0
  1703  3823  3400               	retlw	0
  1704  3824  3400               	retlw	0
  1705  3825  3400               	retlw	0
  1706  3826  3400               	retlw	0
  1707  3827  3400               	retlw	0
  1708  3828  3400               	retlw	0
  1709  3829  3400               	retlw	0
  1710  382A  3400               	retlw	0
  1711  382B  3400               	retlw	0
  1712  382C  3400               	retlw	0
  1713  382D  3400               	retlw	0
  1714  382E  3400               	retlw	0
  1715  382F  3400               	retlw	0
  1716  3830  3400               	retlw	0
  1717  3831  3400               	retlw	0
  1718  3832  3400               	retlw	0
  1719  3833  3400               	retlw	0
  1720  3834  3400               	retlw	0
  1721  3835  3400               	retlw	0
  1722  3836  3400               	retlw	0
  1723  3837  3400               	retlw	0
  1724  3838  3400               	retlw	0
  1725  3839  3400               	retlw	0
  1726  383A  3400               	retlw	0
  1727  383B  3400               	retlw	0
  1728  383C  3400               	retlw	0
  1729  383D  3400               	retlw	0
  1730  383E  3400               	retlw	0
  1731  383F  3400               	retlw	0
  1732  3840                     __end_of_nvm_pgm_cfg:	
  1733  000B                     _INTCON	set	11
  1734  000B                     _INTCONbits	set	11
  1735  0011                     _PIR1	set	17
  1736  0011                     _PIR1bits	set	17
  1737  0012                     _PIR2	set	18
  1738  000C                     _PORTA	set	12
  1739  000D                     _PORTBbits	set	13
  1740  000E                     _PORTC	set	14
  1741  0018                     _T1CON	set	24
  1742  0015                     _TMR0	set	21
  1743  0017                     _TMR1H	set	23
  1744  0016                     _TMR1L	set	22
  1745  009D                     _ADCON0	set	157
  1746  009D                     _ADCON0bits	set	157
  1747  009E                     _ADCON1	set	158
  1748  009C                     _ADRESH	set	156
  1749  009B                     _ADRESL	set	155
  1750  0095                     _OPTION_REG	set	149
  1751  0099                     _OSCCON	set	153
  1752  0091                     _PIE1	set	145
  1753  0092                     _PIE2	set	146
  1754  008C                     _TRISA	set	140
  1755  008D                     _TRISB	set	141
  1756  008E                     _TRISC	set	142
  1757  0097                     _WDTCON	set	151
  1758  0117                     _FVRCON	set	279
  1759  010C                     _LATAbits	set	268
  1760  010E                     _LATCbits	set	270
  1761  0191                     _PMADR	set	401
  1762  0193                     _PMDAT	set	403
  1763  018C                     _ANSELA	set	396
  1764  018D                     _ANSELB	set	397
  1765  018E                     _ANSELC	set	398
  1766  0195                     _PMCON1	set	405
  1767  0195                     _PMCON1bits	set	405
  1768  0196                     _PMCON2	set	406
  1769  0211                     _SSPBUF	set	529
  1770  0215                     _SSPCON1	set	533
  1771  0216                     _SSPCON2	set	534
  1772  0215                     _SSPCONbits	set	533
  1773  0214                     _SSPSTAT	set	532
  1774  020D                     _WPUB	set	525
  1775  0396                     _IOCBFbits	set	918
  1776  0395                     _IOCBN	set	917
  1777  0394                     _IOCBP	set	916
  1778                           
  1779                           ; #config settings
  1780  0000                     
  1781                           	psect	cinit
  1782  0016                     start_initialization:	
  1783  0016                     __initialization:	
  1784                           
  1785                           ; Clear objects allocated to COMMON
  1786  0016  01FC               	clrf	__pbssCOMMON& (0+127)
  1787                           
  1788                           ; Clear objects allocated to BANK0
  1789  0017  3069               	movlw	low __pbssBANK0
  1790  0018  0084               	movwf	4
  1791  0019  3000               	movlw	high __pbssBANK0
  1792  001A  0085               	movwf	5
  1793  001B  3007               	movlw	7
  1794  001C  318B  2326  3180   	fcall	clear_ram0
  1795                           
  1796                           ; Clear objects allocated to BANK1
  1797  001F  30A0               	movlw	low __pbssBANK1
  1798  0020  0084               	movwf	4
  1799  0021  3000               	movlw	high __pbssBANK1
  1800  0022  0085               	movwf	5
  1801  0023  302D               	movlw	45
  1802  0024  318B  2326  3180   	fcall	clear_ram0
  1803                           
  1804                           ; Initialize objects allocated to BANK1
  1805  0027  302C               	movlw	low __pidataBANK1
  1806  0028  0084               	movwf	4
  1807  0029  308B               	movlw	(high __pidataBANK1)| (0+128)
  1808  002A  0085               	movwf	5
  1809  002B  30CD               	movlw	low __pdataBANK1
  1810  002C  0086               	movwf	6
  1811  002D  3000               	movlw	high __pdataBANK1
  1812  002E  0087               	movwf	7
  1813  002F  3008               	movlw	8
  1814  0030  318B  2320  3180   	fcall	init_ram
  1815                           
  1816                           ; Initialize objects allocated to BANK2
  1817  0033  30C6               	movlw	low __pidataBANK2
  1818  0034  0084               	movwf	4
  1819  0035  308E               	movlw	(high __pidataBANK2)| (0+128)
  1820  0036  0085               	movwf	5
  1821  0037  3020               	movlw	low __pdataBANK2
  1822  0038  0086               	movwf	6
  1823  0039  3001               	movlw	high __pdataBANK2
  1824  003A  0087               	movwf	7
  1825  003B  302F               	movlw	47
  1826  003C  318B  2320         	fcall	init_ram
  1827  003E                     end_of_initialization:	
  1828                           ;End of C runtime variable initialization code
  1829                           
  1830  003E                     __end_of__initialization:	
  1831  003E  0020               	movlb	0
  1832  003F  3187  2F4D         	ljmp	_main	;jump to C main() function
  1833                           
  1834                           	psect	bssCOMMON
  1835  007C                     __pbssCOMMON:	
  1836  007C                     _pgm_flg:	
  1837  007C                     	ds	1
  1838                           
  1839                           	psect	bssBANK0
  1840  0069                     __pbssBANK0:	
  1841  0069                     _rmsCurr:	
  1842  0069                     	ds	3
  1843  006C                     _adc_ch:	
  1844  006C                     	ds	1
  1845  006D                     _u_flg_din:	
  1846  006D                     	ds	1
  1847  006E                     _u_in_sta_currTask:	
  1848  006E                     	ds	1
  1849  006F                     _u_in_sta_tmpTask:	
  1850  006F                     	ds	1
  1851                           
  1852                           	psect	bssBANK1
  1853  00A0                     __pbssBANK1:	
  1854  00A0                     _battV:	
  1855  00A0                     	ds	3
  1856  00A3                     _batt:	
  1857  00A3                     	ds	2
  1858  00A5                     _errno:	
  1859  00A5                     	ds	2
  1860  00A7                     _tmrLongSel:	
  1861  00A7                     	ds	2
  1862  00A9                     _cntSndData:	
  1863  00A9                     	ds	1
  1864  00AA                     _flg_slp:	
  1865  00AA                     	ds	1
  1866  00AB                     _rtx_flg:	
  1867  00AB                     	ds	1
  1868  00AC                     _tmrDbncSel:	
  1869  00AC                     	ds	1
  1870  00AD                     _tmrRcvPkt:	
  1871  00AD                     	ds	1
  1872  00AE                     _u_SYS_STA:	
  1873  00AE                     	ds	1
  1874  00AF                     _u_in_ev_down:	
  1875  00AF                     	ds	1
  1876  00B0                     _u_in_ev_long:	
  1877  00B0                     	ds	1
  1878  00B1                     _u_in_ev_up:	
  1879  00B1                     	ds	1
  1880  00B2                     _pktRx:	
  1881  00B2                     	ds	11
  1882  00BD                     _pktTx:	
  1883  00BD                     	ds	11
  1884  00C8                     _pgm_cfg:	
  1885  00C8                     	ds	5
  1886                           
  1887                           	psect	dataBANK1
  1888  00CD                     __pdataBANK1:	
  1889  00CD                     _cc1PaTable:	
  1890  00CD                     	ds	8
  1891                           
  1892                           	psect	dataBANK2
  1893  0120                     __pdataBANK2:	
  1894  0120                     _cc1InitVal:	
  1895  0120                     	ds	47
  1896                           
  1897                           	psect	clrtext
  1898  0B26                     clear_ram0:	
  1899                           ;	Called with FSR0 containing the base address, and
  1900                           ;	WREG with the size to clear
  1901                           
  1902  0B26  0064               	clrwdt	;clear the watchdog before getting into this loop
  1903  0B27                     clrloop0:	
  1904  0B27  0180               	clrf	0	;clear RAM location pointed to by FSR
  1905  0B28  3101               	addfsr 0,1
  1906  0B29  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  1907  0B2A  2B27               	goto	clrloop0	;have we reached the end yet?
  1908  0B2B  3400               	retlw	0	;all done for this memory range, return
  1909                           
  1910                           	psect	inittext
  1911  0B20                     init_ram:	
  1912  0B20  00FE               	movwf	126
  1913  0B21                     initloop:	
  1914  0B21  0012               	moviw fsr0++
  1915  0B22  001E               	movwi fsr1++
  1916  0B23  0BFE               	decfsz	126,f
  1917  0B24  2B21               	goto	initloop
  1918  0B25  3400               	retlw	0
  1919                           
  1920                           	psect	cstackCOMMON
  1921  0070                     __pcstackCOMMON:	
  1922  0070                     ?_CC1Strobe:	
  1923  0070                     ?_PGMReadNvm:	
  1924                           ; 0 bytes @ 0x0
  1925                           
  1926  0070                     ?_PGMCheckNvm:	
  1927                           ; 0 bytes @ 0x0
  1928                           
  1929  0070                     ?_PGMNvmReset:	
  1930                           ; 0 bytes @ 0x0
  1931                           
  1932  0070                     ?_RTXStartSendPgm:	
  1933                           ; 0 bytes @ 0x0
  1934                           
  1935  0070                     ?_RTXStartSendData:	
  1936                           ; 0 bytes @ 0x0
  1937                           
  1938  0070                     ?_RTXSendPgm:	
  1939                           ; 0 bytes @ 0x0
  1940                           
  1941  0070                     ?_RTXSendData:	
  1942                           ; 0 bytes @ 0x0
  1943                           
  1944  0070                     ?_RTXReadPkt:	
  1945                           ; 0 bytes @ 0x0
  1946                           
  1947  0070                     ?_INInit:	
  1948                           ; 0 bytes @ 0x0
  1949                           
  1950  0070                     ?_OUTInit:	
  1951                           ; 0 bytes @ 0x0
  1952                           
  1953  0070                     ?_SPIInit:	
  1954                           ; 0 bytes @ 0x0
  1955                           
  1956  0070                     ?_ADCInit:	
  1957                           ; 0 bytes @ 0x0
  1958                           
  1959  0070                     ?_ADCConv:	
  1960                           ; 0 bytes @ 0x0
  1961                           
  1962  0070                     ?_CC1Init:	
  1963                           ; 0 bytes @ 0x0
  1964                           
  1965  0070                     ?_LEDInit:	
  1966                           ; 0 bytes @ 0x0
  1967                           
  1968  0070                     ?_LEDNormalFlash:	
  1969                           ; 0 bytes @ 0x0
  1970                           
  1971  0070                     ?_LEDFastFlash:	
  1972                           ; 0 bytes @ 0x0
  1973                           
  1974  0070                     ?_NVMInit:	
  1975                           ; 0 bytes @ 0x0
  1976                           
  1977  0070                     ?_DINInit:	
  1978                           ; 0 bytes @ 0x0
  1979                           
  1980  0070                     ?_DINTick:	
  1981                           ; 0 bytes @ 0x0
  1982                           
  1983  0070                     ?_DINTask:	
  1984                           ; 0 bytes @ 0x0
  1985                           
  1986  0070                     ?_PGMInit:	
  1987                           ; 0 bytes @ 0x0
  1988                           
  1989  0070                     ?_PGMTick:	
  1990                           ; 0 bytes @ 0x0
  1991                           
  1992  0070                     ?_PGMWriteNvm:	
  1993                           ; 0 bytes @ 0x0
  1994                           
  1995  0070                     ?_PGMPgmOff:	
  1996                           ; 0 bytes @ 0x0
  1997                           
  1998  0070                     ?_PGMSelUp:	
  1999                           ; 0 bytes @ 0x0
  2000                           
  2001  0070                     ?_PGMSelLong:	
  2002                           ; 0 bytes @ 0x0
  2003                           
  2004  0070                     ?_RTXInit:	
  2005                           ; 0 bytes @ 0x0
  2006                           
  2007  0070                     ?_RTXTick:	
  2008                           ; 0 bytes @ 0x0
  2009                           
  2010  0070                     ?_RTXTask:	
  2011                           ; 0 bytes @ 0x0
  2012                           
  2013  0070                     ?_RTXAwake:	
  2014                           ; 0 bytes @ 0x0
  2015                           
  2016  0070                     ?_SYSInit:	
  2017                           ; 0 bytes @ 0x0
  2018                           
  2019  0070                     ?_SYSInt:	
  2020                           ; 0 bytes @ 0x0
  2021                           
  2022  0070                     ??_SYSInt:	
  2023                           ; 0 bytes @ 0x0
  2024                           
  2025  0070                     ?_SYSTask:	
  2026                           ; 0 bytes @ 0x0
  2027                           
  2028  0070                     ?_INTIsr:	
  2029                           ; 0 bytes @ 0x0
  2030                           
  2031  0070                     ??_INTIsr:	
  2032                           ; 0 bytes @ 0x0
  2033                           
  2034  0070                     ?_main:	
  2035                           ; 0 bytes @ 0x0
  2036                           
  2037                           
  2038                           ; 0 bytes @ 0x0
  2039  0070                     	ds	1
  2040  0071                     ?_DLYDelay_ms:	
  2041  0071                     ??_INInit:	
  2042                           ; 0 bytes @ 0x1
  2043                           
  2044  0071                     ??_OUTInit:	
  2045                           ; 0 bytes @ 0x1
  2046                           
  2047  0071                     ??_SPIInit:	
  2048                           ; 0 bytes @ 0x1
  2049                           
  2050  0071                     ?_SPIRead:	
  2051                           ; 0 bytes @ 0x1
  2052                           
  2053  0071                     ?_SPIWrite:	
  2054                           ; 0 bytes @ 0x1
  2055                           
  2056  0071                     ??_ADCInit:	
  2057                           ; 0 bytes @ 0x1
  2058                           
  2059  0071                     ??_LEDInit:	
  2060                           ; 0 bytes @ 0x1
  2061                           
  2062  0071                     ??_NVMInit:	
  2063                           ; 0 bytes @ 0x1
  2064                           
  2065  0071                     ?_NVMRead:	
  2066                           ; 0 bytes @ 0x1
  2067                           
  2068  0071                     ?_NVMWrite:	
  2069                           ; 0 bytes @ 0x1
  2070                           
  2071  0071                     ??_DINInit:	
  2072                           ; 0 bytes @ 0x1
  2073                           
  2074  0071                     ??_DINTick:	
  2075                           ; 0 bytes @ 0x1
  2076                           
  2077  0071                     ??_DINTask:	
  2078                           ; 0 bytes @ 0x1
  2079                           
  2080  0071                     ??_PGMTick:	
  2081                           ; 0 bytes @ 0x1
  2082                           
  2083  0071                     ??_PGMPgmOff:	
  2084                           ; 0 bytes @ 0x1
  2085                           
  2086  0071                     ??_SYSInit:	
  2087                           ; 0 bytes @ 0x1
  2088                           
  2089  0071                     ?___ftge:	
  2090                           ; 0 bytes @ 0x1
  2091                           
  2092  0071                     ?___wmul:	
  2093                           ; 1 bit 
  2094                           
  2095  0071                     ?___lwdiv:	
  2096                           ; 2 bytes @ 0x1
  2097                           
  2098  0071                     ?___ftpack:	
  2099                           ; 2 bytes @ 0x1
  2100                           
  2101  0071                     SPIRead@len:	
  2102                           ; 3 bytes @ 0x1
  2103                           
  2104  0071                     LEDInit@sta:	
  2105                           ; 1 bytes @ 0x1
  2106                           
  2107  0071                     NVMInit@sta:	
  2108                           ; 1 bytes @ 0x1
  2109                           
  2110  0071                     DINInit@sta:	
  2111                           ; 1 bytes @ 0x1
  2112                           
  2113  0071                     SPIWrite@srcPtr:	
  2114                           ; 1 bytes @ 0x1
  2115                           
  2116  0071                     DLYDelay_ms@val:	
  2117                           ; 2 bytes @ 0x1
  2118                           
  2119  0071                     NVMRead@addr:	
  2120                           ; 2 bytes @ 0x1
  2121                           
  2122  0071                     NVMWrite@addr:	
  2123                           ; 2 bytes @ 0x1
  2124                           
  2125  0071                     ___wmul@multiplier:	
  2126                           ; 2 bytes @ 0x1
  2127                           
  2128  0071                     ___lwdiv@divisor:	
  2129                           ; 2 bytes @ 0x1
  2130                           
  2131  0071                     ___ftpack@arg:	
  2132                           ; 2 bytes @ 0x1
  2133                           
  2134  0071                     ___ftge@ff1:	
  2135                           ; 3 bytes @ 0x1
  2136                           
  2137                           
  2138                           ; 3 bytes @ 0x1
  2139  0071                     	ds	1
  2140  0072                     ??_SPIRead:	
  2141  0072                     INInit@sta:	
  2142                           ; 0 bytes @ 0x2
  2143                           
  2144  0072                     OUTInit@sta:	
  2145                           ; 1 bytes @ 0x2
  2146                           
  2147  0072                     SPIInit@state:	
  2148                           ; 1 bytes @ 0x2
  2149                           
  2150  0072                     ADCInit@state:	
  2151                           ; 1 bytes @ 0x2
  2152                           
  2153  0072                     SYSInit@state:	
  2154                           ; 1 bytes @ 0x2
  2155                           
  2156                           
  2157                           ; 1 bytes @ 0x2
  2158  0072                     	ds	1
  2159  0073                     ??_DLYDelay_ms:	
  2160  0073                     SPIWrite@len:	
  2161                           ; 0 bytes @ 0x3
  2162                           
  2163  0073                     NVMRead@dest:	
  2164                           ; 1 bytes @ 0x3
  2165                           
  2166  0073                     NVMWrite@source:	
  2167                           ; 1 bytes @ 0x3
  2168                           
  2169  0073                     ___wmul@multiplicand:	
  2170                           ; 1 bytes @ 0x3
  2171                           
  2172  0073                     ___lwdiv@dividend:	
  2173                           ; 2 bytes @ 0x3
  2174                           
  2175                           
  2176                           ; 2 bytes @ 0x3
  2177  0073                     	ds	1
  2178  0074                     ??_SPIWrite:	
  2179  0074                     SPIRead@dstPtr:	
  2180                           ; 0 bytes @ 0x4
  2181                           
  2182  0074                     NVMRead@len:	
  2183                           ; 1 bytes @ 0x4
  2184                           
  2185  0074                     NVMWrite@len:	
  2186                           ; 1 bytes @ 0x4
  2187                           
  2188  0074                     ___ftpack@exp:	
  2189                           ; 1 bytes @ 0x4
  2190                           
  2191  0074                     ___ftge@ff2:	
  2192                           ; 1 bytes @ 0x4
  2193                           
  2194                           
  2195                           ; 3 bytes @ 0x4
  2196  0074                     	ds	1
  2197  0075                     ??_NVMRead:	
  2198  0075                     ??_NVMWrite:	
  2199                           ; 0 bytes @ 0x5
  2200                           
  2201  0075                     ??___wmul:	
  2202                           ; 0 bytes @ 0x5
  2203                           
  2204  0075                     ??___lwdiv:	
  2205                           ; 0 bytes @ 0x5
  2206                           
  2207  0075                     SPIRead@i:	
  2208                           ; 0 bytes @ 0x5
  2209                           
  2210  0075                     ___ftpack@sign:	
  2211                           ; 1 bytes @ 0x5
  2212                           
  2213  0075                     DLYDelay_ms@i:	
  2214                           ; 1 bytes @ 0x5
  2215                           
  2216  0075                     ___wmul@product:	
  2217                           ; 2 bytes @ 0x5
  2218                           
  2219                           
  2220                           ; 2 bytes @ 0x5
  2221  0075                     	ds	1
  2222  0076                     ??___ftpack:	
  2223  0076                     SPIWrite@i:	
  2224                           ; 0 bytes @ 0x6
  2225                           
  2226  0076                     ___lwdiv@quotient:	
  2227                           ; 1 bytes @ 0x6
  2228                           
  2229                           
  2230                           ; 2 bytes @ 0x6
  2231  0076                     	ds	1
  2232  0077                     ??_CC1Strobe:	
  2233  0077                     ?_CC1Write:	
  2234                           ; 0 bytes @ 0x7
  2235                           
  2236  0077                     ?_CC1Read:	
  2237                           ; 0 bytes @ 0x7
  2238                           
  2239  0077                     ??_LEDNormalFlash:	
  2240                           ; 0 bytes @ 0x7
  2241                           
  2242  0077                     ??_LEDFastFlash:	
  2243                           ; 0 bytes @ 0x7
  2244                           
  2245  0077                     ??___ftge:	
  2246                           ; 0 bytes @ 0x7
  2247                           
  2248  0077                     CC1Read@dst:	
  2249                           ; 0 bytes @ 0x7
  2250                           
  2251  0077                     NVMRead@i:	
  2252                           ; 1 bytes @ 0x7
  2253                           
  2254  0077                     CC1Write@src:	
  2255                           ; 1 bytes @ 0x7
  2256                           
  2257                           
  2258                           ; 2 bytes @ 0x7
  2259  0077                     	ds	1
  2260  0078                     ??_PGMReadNvm:	
  2261  0078                     ??_PGMWriteNvm:	
  2262                           ; 0 bytes @ 0x8
  2263                           
  2264  0078                     CC1Strobe@e_stb:	
  2265                           ; 0 bytes @ 0x8
  2266                           
  2267  0078                     CC1Read@len:	
  2268                           ; 1 bytes @ 0x8
  2269                           
  2270  0078                     LEDNormalFlash@num:	
  2271                           ; 1 bytes @ 0x8
  2272                           
  2273  0078                     LEDFastFlash@num:	
  2274                           ; 1 bytes @ 0x8
  2275                           
  2276  0078                     ___lwdiv@counter:	
  2277                           ; 1 bytes @ 0x8
  2278                           
  2279                           
  2280                           ; 1 bytes @ 0x8
  2281  0078                     	ds	1
  2282  0079                     ??_CC1Read:	
  2283  0079                     ??___lltoft:	
  2284                           ; 0 bytes @ 0x9
  2285                           
  2286  0079                     ?___lwtoft:	
  2287                           ; 0 bytes @ 0x9
  2288                           
  2289  0079                     CC1Strobe@cc1Stb:	
  2290                           ; 3 bytes @ 0x9
  2291                           
  2292  0079                     CC1Write@len:	
  2293                           ; 1 bytes @ 0x9
  2294                           
  2295  0079                     LEDNormalFlash@i:	
  2296                           ; 1 bytes @ 0x9
  2297                           
  2298  0079                     LEDFastFlash@i:	
  2299                           ; 1 bytes @ 0x9
  2300                           
  2301  0079                     ___ftadd@sign:	
  2302                           ; 1 bytes @ 0x9
  2303                           
  2304  0079                     ___lwtoft@c:	
  2305                           ; 1 bytes @ 0x9
  2306                           
  2307                           
  2308                           ; 2 bytes @ 0x9
  2309  0079                     	ds	1
  2310  007A                     ??_CC1Write:	
  2311  007A                     ??_PGMNvmReset:	
  2312                           ; 0 bytes @ 0xA
  2313                           
  2314  007A                     ??_PGMSelLong:	
  2315                           ; 0 bytes @ 0xA
  2316                           
  2317  007A                     CC1Read@addr:	
  2318                           ; 0 bytes @ 0xA
  2319                           
  2320  007A                     ___ftadd@exp2:	
  2321                           ; 1 bytes @ 0xA
  2322                           
  2323  007A                     ___lltoft@exp:	
  2324                           ; 1 bytes @ 0xA
  2325                           
  2326                           
  2327                           ; 1 bytes @ 0xA
  2328  007A                     	ds	1
  2329  007B                     ??_PGMCheckNvm:	
  2330  007B                     ??_CC1Init:	
  2331                           ; 0 bytes @ 0xB
  2332                           
  2333  007B                     ??_PGMInit:	
  2334                           ; 0 bytes @ 0xB
  2335                           
  2336  007B                     CC1Read@cc1Addr:	
  2337                           ; 0 bytes @ 0xB
  2338                           
  2339  007B                     PGMInit@state:	
  2340                           ; 1 bytes @ 0xB
  2341                           
  2342  007B                     ___ftadd@exp1:	
  2343                           ; 1 bytes @ 0xB
  2344                           
  2345                           
  2346                           ; 1 bytes @ 0xB
  2347  007B                     	ds	1
  2348  007C                     ??_RTXStartSendPgm:	
  2349  007C                     ??_RTXStartSendData:	
  2350                           ; 0 bytes @ 0xC
  2351                           
  2352  007C                     ??_RTXInit:	
  2353                           ; 0 bytes @ 0xC
  2354                           
  2355  007C                     ??_RTXTick:	
  2356                           ; 0 bytes @ 0xC
  2357                           
  2358  007C                     ??_RTXTask:	
  2359                           ; 0 bytes @ 0xC
  2360                           
  2361  007C                     ??_RTXAwake:	
  2362                           ; 0 bytes @ 0xC
  2363                           
  2364  007C                     ??_SYSTask:	
  2365                           ; 0 bytes @ 0xC
  2366                           
  2367  007C                     ??___ftsub:	
  2368                           ; 0 bytes @ 0xC
  2369                           
  2370                           
  2371                           	psect	cstackBANK0
  2372  0020                     __pcstackBANK0:	
  2373                           ; 0 bytes @ 0xC
  2374                           
  2375  0020                     ?_RTXRcvPkt:	
  2376  0020                     ??___lwtoft:	
  2377                           ; 0 bytes @ 0x0
  2378                           
  2379  0020                     ?___ftadd:	
  2380                           ; 0 bytes @ 0x0
  2381                           
  2382  0020                     ?___lltoft:	
  2383                           ; 3 bytes @ 0x0
  2384                           
  2385  0020                     CC1Write@addr:	
  2386                           ; 3 bytes @ 0x0
  2387                           
  2388  0020                     RTXRcvPkt@len:	
  2389                           ; 1 bytes @ 0x0
  2390                           
  2391  0020                     ___ftadd@f1:	
  2392                           ; 1 bytes @ 0x0
  2393                           
  2394  0020                     ___lltoft@c:	
  2395                           ; 3 bytes @ 0x0
  2396                           
  2397  0020                     NVMWrite@bufTmpRow:	
  2398                           ; 4 bytes @ 0x0
  2399                           
  2400                           
  2401                           ; 64 bytes @ 0x0
  2402  0020                     	ds	1
  2403  0021                     ??_RTXRcvPkt:	
  2404  0021                     ?___ftmul:	
  2405                           ; 0 bytes @ 0x1
  2406                           
  2407  0021                     CC1Write@cc1Addr:	
  2408                           ; 3 bytes @ 0x1
  2409                           
  2410  0021                     ___ftmul@f1:	
  2411                           ; 1 bytes @ 0x1
  2412                           
  2413                           
  2414                           ; 3 bytes @ 0x1
  2415  0021                     	ds	1
  2416  0022                     ?_RTXSndPkt:	
  2417  0022                     CC1Init@state:	
  2418                           ; 0 bytes @ 0x2
  2419                           
  2420  0022                     RTXSndPkt@len:	
  2421                           ; 1 bytes @ 0x2
  2422                           
  2423                           
  2424                           ; 1 bytes @ 0x2
  2425  0022                     	ds	1
  2426  0023                     ??_RTXSndPkt:	
  2427  0023                     RTXRcvPkt@dst:	
  2428                           ; 0 bytes @ 0x3
  2429                           
  2430  0023                     ___ftadd@f2:	
  2431                           ; 1 bytes @ 0x3
  2432                           
  2433                           
  2434                           ; 3 bytes @ 0x3
  2435  0023                     	ds	1
  2436  0024                     RTXSndPkt@numRxByte:	
  2437  0024                     ___ftmul@f2:	
  2438                           ; 1 bytes @ 0x4
  2439                           
  2440                           
  2441                           ; 3 bytes @ 0x4
  2442  0024                     	ds	1
  2443  0025                     RTXSndPkt@src:	
  2444                           
  2445                           ; 1 bytes @ 0x5
  2446  0025                     	ds	1
  2447  0026                     ??___ftadd:	
  2448  0026                     RTXSndPkt@numTxByte:	
  2449                           ; 0 bytes @ 0x6
  2450                           
  2451                           
  2452                           ; 1 bytes @ 0x6
  2453  0026                     	ds	1
  2454  0027                     ??___ftmul:	
  2455  0027                     RTXSndPkt@sta:	
  2456                           ; 0 bytes @ 0x7
  2457                           
  2458                           
  2459                           ; 1 bytes @ 0x7
  2460  0027                     	ds	1
  2461  0028                     ??_RTXSendPgm:	
  2462  0028                     ??_RTXSendData:	
  2463                           ; 0 bytes @ 0x8
  2464                           
  2465                           
  2466                           ; 0 bytes @ 0x8
  2467  0028                     	ds	1
  2468  0029                     RTXSendData@valTemp:	
  2469                           
  2470                           ; 3 bytes @ 0x9
  2471  0029                     	ds	1
  2472  002A                     ?___ftsub:	
  2473  002A                     ___ftsub@f2:	
  2474                           ; 3 bytes @ 0xA
  2475                           
  2476                           
  2477                           ; 3 bytes @ 0xA
  2478  002A                     	ds	1
  2479  002B                     ___ftmul@exp:	
  2480                           
  2481                           ; 1 bytes @ 0xB
  2482  002B                     	ds	1
  2483  002C                     RTXSendData@valBatt:	
  2484  002C                     ___ftmul@f3_as_product:	
  2485                           ; 3 bytes @ 0xC
  2486                           
  2487                           
  2488                           ; 3 bytes @ 0xC
  2489  002C                     	ds	1
  2490  002D                     ___ftsub@f1:	
  2491                           
  2492                           ; 3 bytes @ 0xD
  2493  002D                     	ds	2
  2494  002F                     ___ftmul@cntr:	
  2495                           
  2496                           ; 1 bytes @ 0xF
  2497  002F                     	ds	1
  2498  0030                     ___ftmul@sign:	
  2499                           
  2500                           ; 1 bytes @ 0x10
  2501  0030                     	ds	1
  2502  0031                     ?_sqrt:	
  2503  0031                     ?___ftdiv:	
  2504                           ; 3 bytes @ 0x11
  2505                           
  2506  0031                     ___ftdiv@f2:	
  2507                           ; 3 bytes @ 0x11
  2508                           
  2509  0031                     sqrt@y:	
  2510                           ; 3 bytes @ 0x11
  2511                           
  2512                           
  2513                           ; 3 bytes @ 0x11
  2514  0031                     	ds	3
  2515  0034                     ??_sqrt:	
  2516  0034                     ___ftdiv@f1:	
  2517                           ; 0 bytes @ 0x14
  2518                           
  2519                           
  2520                           ; 3 bytes @ 0x14
  2521  0034                     	ds	3
  2522  0037                     ??___ftdiv:	
  2523  0037                     sqrt@og:	
  2524                           ; 0 bytes @ 0x17
  2525                           
  2526                           
  2527                           ; 3 bytes @ 0x17
  2528  0037                     	ds	3
  2529  003A                     sqrt@z:	
  2530                           
  2531                           ; 3 bytes @ 0x1A
  2532  003A                     	ds	1
  2533  003B                     ___ftdiv@cntr:	
  2534                           
  2535                           ; 1 bytes @ 0x1B
  2536  003B                     	ds	1
  2537  003C                     ___ftdiv@f3:	
  2538                           
  2539                           ; 3 bytes @ 0x1C
  2540  003C                     	ds	1
  2541  003D                     sqrt@i:	
  2542                           
  2543                           ; 1 bytes @ 0x1D
  2544  003D                     	ds	1
  2545  003E                     sqrt@q:	
  2546                           
  2547                           ; 3 bytes @ 0x1E
  2548  003E                     	ds	1
  2549  003F                     ___ftdiv@exp:	
  2550                           
  2551                           ; 1 bytes @ 0x1F
  2552  003F                     	ds	1
  2553  0040                     ___ftdiv@sign:	
  2554                           
  2555                           ; 1 bytes @ 0x20
  2556  0040                     	ds	1
  2557  0041                     sqrt@x:	
  2558                           
  2559                           ; 3 bytes @ 0x21
  2560  0041                     	ds	3
  2561  0044                     ??_ADCConv:	
  2562                           
  2563                           ; 0 bytes @ 0x24
  2564  0044                     	ds	14
  2565  0052                     _ADCConv$1407:	
  2566                           
  2567                           ; 3 bytes @ 0x32
  2568  0052                     	ds	3
  2569  0055                     ADCConv@sumCurr:	
  2570                           
  2571                           ; 4 bytes @ 0x35
  2572  0055                     	ds	4
  2573  0059                     ADCConv@sumBatt:	
  2574                           
  2575                           ; 2 bytes @ 0x39
  2576  0059                     	ds	2
  2577  005B                     ADCConv@cntSum:	
  2578                           
  2579                           ; 1 bytes @ 0x3B
  2580  005B                     	ds	1
  2581  005C                     RTXInit@state:	
  2582                           
  2583                           ; 1 bytes @ 0x3C
  2584  005C                     	ds	4
  2585  0060                     NVMWrite@rowAddr:	
  2586                           
  2587                           ; 2 bytes @ 0x40
  2588  0060                     	ds	2
  2589  0062                     NVMWrite@i:	
  2590                           
  2591                           ; 1 bytes @ 0x42
  2592  0062                     	ds	1
  2593  0063                     NVMWrite@latchAddr:	
  2594                           
  2595                           ; 1 bytes @ 0x43
  2596  0063                     	ds	1
  2597  0064                     NVMWrite@j:	
  2598                           
  2599                           ; 1 bytes @ 0x44
  2600  0064                     	ds	1
  2601  0065                     ??_RTXReadPkt:	
  2602  0065                     ??_PGMSelUp:	
  2603                           ; 0 bytes @ 0x45
  2604                           
  2605                           
  2606                           ; 0 bytes @ 0x45
  2607  0065                     	ds	1
  2608  0066                     RTXReadPkt@numRxByte:	
  2609                           
  2610                           ; 1 bytes @ 0x46
  2611  0066                     	ds	1
  2612  0067                     ??_main:	
  2613                           
  2614                           ; 0 bytes @ 0x47
  2615  0067                     	ds	1
  2616  0068                     main@i:	
  2617                           
  2618                           ; 1 bytes @ 0x48
  2619  0068                     	ds	1
  2620                           
  2621                           	psect	maintext
  2622  074D                     __pmaintext:	
  2623 ;;
  2624 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2625 ;;
  2626 ;; *************** function _main *****************
  2627 ;; Defined at:
  2628 ;;		line 54 in file "Sensore.c"
  2629 ;; Parameters:    Size  Location     Type
  2630 ;;		None
  2631 ;; Auto vars:     Size  Location     Type
  2632 ;;  i               1   72[BANK0 ] unsigned char 
  2633 ;; Return value:  Size  Location     Type
  2634 ;;		None               void
  2635 ;; Registers used:
  2636 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2637 ;; Tracked objects:
  2638 ;;		On entry : B1F/0
  2639 ;;		On exit  : 0/0
  2640 ;;		Unchanged: 0/0
  2641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2643 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2644 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2645 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2646 ;;Total ram usage:        2 bytes
  2647 ;; Hardware stack levels required when called:   11
  2648 ;; This function calls:
  2649 ;;		_ADCInit
  2650 ;;		_CC1Init
  2651 ;;		_DINInit
  2652 ;;		_DINTask
  2653 ;;		_INInit
  2654 ;;		_LEDInit
  2655 ;;		_NVMInit
  2656 ;;		_OUTInit
  2657 ;;		_PGMInit
  2658 ;;		_RTXInit
  2659 ;;		_RTXTask
  2660 ;;		_SPIInit
  2661 ;;		_SYSInit
  2662 ;;		_SYSTask
  2663 ;; This function is called by:
  2664 ;;		Startup code after reset
  2665 ;; This function uses a non-reentrant model
  2666 ;;
  2667                           
  2668                           
  2669                           ;psect for function _main
  2670  074D                     _main:	
  2671                           
  2672                           ;Sensore.c: 56: unsigned char i;
  2673                           ;Sensore.c: 59: for(i=0;i<3;i++)
  2674                           
  2675                           ;incstack = 0
  2676                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2677  074D  0020               	movlb	0	; select bank0
  2678  074E  01E8               	clrf	main@i
  2679  074F  3003               	movlw	3
  2680  0750  0268               	subwf	main@i,w
  2681  0751  1803               	btfsc	3,0
  2682  0752  2F94               	goto	l676
  2683  0753                     l675:	
  2684  0753  0064               	clrwdt	;# 
  2685                           
  2686                           ;Sensore.c: 63: SYSInit(i);
  2687  0754  0020               	movlb	0	; select bank0
  2688  0755  0868               	movf	main@i,w
  2689  0756  318D  25F5  3187   	fcall	_SYSInit
  2690                           
  2691                           ;Sensore.c: 64: INInit(i);
  2692  0759  0020               	movlb	0	; select bank0
  2693  075A  0868               	movf	main@i,w
  2694  075B  318D  254B  3187   	fcall	_INInit
  2695                           
  2696                           ;Sensore.c: 65: OUTInit(i);
  2697  075E  0020               	movlb	0	; select bank0
  2698  075F  0868               	movf	main@i,w
  2699  0760  318E  261B  3187   	fcall	_OUTInit
  2700                           
  2701                           ;Sensore.c: 66: DINInit(i);
  2702  0763  0020               	movlb	0	; select bank0
  2703  0764  0868               	movf	main@i,w
  2704  0765  318B  23B0  3187   	fcall	_DINInit
  2705                           
  2706                           ;Sensore.c: 67: LEDInit(i);
  2707  0768  0020               	movlb	0	; select bank0
  2708  0769  0868               	movf	main@i,w
  2709  076A  318B  2334  3187   	fcall	_LEDInit
  2710                           
  2711                           ;Sensore.c: 68: SPIInit(i);
  2712  076D  0020               	movlb	0	; select bank0
  2713  076E  0868               	movf	main@i,w
  2714  076F  318C  24F1  3187   	fcall	_SPIInit
  2715                           
  2716                           ;Sensore.c: 69: CC1Init(i);
  2717  0772  0020               	movlb	0	; select bank0
  2718  0773  0868               	movf	main@i,w
  2719  0774  318E  26F5  3187   	fcall	_CC1Init
  2720                           
  2721                           ;Sensore.c: 70: NVMInit(i);
  2722  0777  0020               	movlb	0	; select bank0
  2723  0778  0868               	movf	main@i,w
  2724  0779  318B  233F  3187   	fcall	_NVMInit
  2725                           
  2726                           ;Sensore.c: 71: RTXInit(i);
  2727  077C  0020               	movlb	0	; select bank0
  2728  077D  0868               	movf	main@i,w
  2729  077E  318D  25AB  3187   	fcall	_RTXInit
  2730                           
  2731                           ;Sensore.c: 72: PGMInit(i);
  2732  0781  0020               	movlb	0	; select bank0
  2733  0782  0868               	movf	main@i,w
  2734  0783  318B  23E9  3187   	fcall	_PGMInit
  2735                           
  2736                           ;Sensore.c: 73: ADCInit(i);
  2737  0786  0020               	movlb	0	; select bank0
  2738  0787  0868               	movf	main@i,w
  2739  0788  318E  269A  3187   	fcall	_ADCInit
  2740  078B  3001               	movlw	1
  2741  078C  0020               	movlb	0	; select bank0
  2742  078D  00E7               	movwf	??_main
  2743  078E  0867               	movf	??_main,w
  2744  078F  07E8               	addwf	main@i,f
  2745  0790  3003               	movlw	3
  2746  0791  0268               	subwf	main@i,w
  2747  0792  1C03               	skipc
  2748  0793  2F53               	goto	l675
  2749  0794                     l676:	
  2750                           
  2751                           ;Sensore.c: 74: }
  2752                           ;Sensore.c: 77: INTCONbits.GIE=1;
  2753  0794  178B               	bsf	11,7	;volatile
  2754  0795                     l677:	
  2755                           ;Sensore.c: 80: while(1)
  2756                           
  2757  0795  0064               	clrwdt	;# 
  2758                           
  2759                           ;Sensore.c: 84: SYSTask();
  2760  0796  318F  2725  3187   	fcall	_SYSTask
  2761                           
  2762                           ;Sensore.c: 85: DINTask();
  2763  0799  318C  24B5  3187   	fcall	_DINTask
  2764                           
  2765                           ;Sensore.c: 86: RTXTask();
  2766  079C  318B  231A  3187   	fcall	_RTXTask
  2767  079F  2F95               	goto	l677
  2768  07A0                     __end_of_main:	
  2769                           
  2770                           	psect	text1
  2771  0F25                     __ptext1:	
  2772 ;; *************** function _SYSTask *****************
  2773 ;; Defined at:
  2774 ;;		line 44 in file "SYS.c"
  2775 ;; Parameters:    Size  Location     Type
  2776 ;;		None
  2777 ;; Auto vars:     Size  Location     Type
  2778 ;;		None
  2779 ;; Return value:  Size  Location     Type
  2780 ;;		None               void
  2781 ;; Registers used:
  2782 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2783 ;; Tracked objects:
  2784 ;;		On entry : 0/0
  2785 ;;		On exit  : 0/0
  2786 ;;		Unchanged: 0/0
  2787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2788 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2789 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2790 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2791 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2792 ;;Total ram usage:        0 bytes
  2793 ;; Hardware stack levels used:    1
  2794 ;; Hardware stack levels required when called:   10
  2795 ;; This function calls:
  2796 ;;		_ADCConv
  2797 ;;		_DINTick
  2798 ;;		_PGMPgmOff
  2799 ;;		_PGMSelLong
  2800 ;;		_PGMSelUp
  2801 ;;		_PGMTick
  2802 ;;		_RTXAwake
  2803 ;;		_RTXTick
  2804 ;; This function is called by:
  2805 ;;		_main
  2806 ;; This function uses a non-reentrant model
  2807 ;;
  2808                           
  2809                           
  2810                           ;psect for function _SYSTask
  2811  0F25                     _SYSTask:	
  2812                           
  2813                           ;SYS.c: 47: if(u_SYS_STA.TICK)
  2814                           
  2815                           ;incstack = 0
  2816                           ; Regs used in _SYSTask: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2817  0F25  0021               	movlb	1	; select bank1
  2818  0F26  1C2E               	btfss	_u_SYS_STA^(0+128),0
  2819  0F27  2F32               	goto	l3815
  2820                           
  2821                           ;SYS.c: 48: {
  2822                           ;SYS.c: 50: u_SYS_STA.TICK=0;
  2823  0F28  102E               	bcf	_u_SYS_STA^(0+128),0
  2824                           
  2825                           ;SYS.c: 53: RTXTick();
  2826  0F29  3187  27EF  318F   	fcall	_RTXTick
  2827                           
  2828                           ;SYS.c: 54: DINTick();
  2829  0F2C  318E  2644  318F   	fcall	_DINTick
  2830                           
  2831                           ;SYS.c: 55: PGMTick();
  2832  0F2F  3180  2003  318F   	fcall	_PGMTick
  2833  0F32                     l3815:	
  2834                           
  2835                           ;SYS.c: 56: }
  2836                           ;SYS.c: 58: ADCConv();
  2837  0F32  3180  2041  318F   	fcall	_ADCConv
  2838                           
  2839                           ;SYS.c: 60: if(u_in_ev_down.sel)
  2840  0F35  0021               	movlb	1	; select bank1
  2841  0F36  182F               	btfsc	_u_in_ev_down^(0+128),0
  2842                           
  2843                           ;SYS.c: 61: {
  2844                           ;SYS.c: 63: u_in_ev_down.sel=0;
  2845  0F37  102F               	bcf	_u_in_ev_down^(0+128),0
  2846                           
  2847                           ;SYS.c: 64: }
  2848                           ;SYS.c: 65: if(u_in_ev_up.sel)
  2849  0F38  1C31               	btfss	_u_in_ev_up^(0+128),0
  2850  0F39  2F3E               	goto	l3825
  2851                           
  2852                           ;SYS.c: 66: {
  2853                           ;SYS.c: 68: u_in_ev_up.sel=0;
  2854  0F3A  1031               	bcf	_u_in_ev_up^(0+128),0
  2855                           
  2856                           ;SYS.c: 69: PGMSelUp();
  2857  0F3B  318B  23FF  318F   	fcall	_PGMSelUp
  2858  0F3E                     l3825:	
  2859                           
  2860                           ;SYS.c: 70: }
  2861                           ;SYS.c: 71: if(u_in_ev_long.sel)
  2862  0F3E  0021               	movlb	1	; select bank1
  2863  0F3F  1C30               	btfss	_u_in_ev_long^(0+128),0
  2864  0F40  2F45               	goto	l3831
  2865                           
  2866                           ;SYS.c: 72: {
  2867                           ;SYS.c: 74: u_in_ev_long.sel=0;
  2868  0F41  1030               	bcf	_u_in_ev_long^(0+128),0
  2869                           
  2870                           ;SYS.c: 75: PGMSelLong();
  2871  0F42  318C  2416  318F   	fcall	_PGMSelLong
  2872  0F45                     l3831:	
  2873                           
  2874                           ;SYS.c: 76: }
  2875                           ;SYS.c: 79: if(flg_slp.goSleep)
  2876  0F45  0021               	movlb	1	; select bank1
  2877  0F46  182A               	btfsc	_flg_slp^(0+128),0
  2878                           
  2879                           ;SYS.c: 80: {
  2880                           ;SYS.c: 82: flg_slp.goSleep=0;
  2881  0F47  102A               	bcf	_flg_slp^(0+128),0
  2882                           
  2883                           ;SYS.c: 86: }
  2884                           ;SYS.c: 89: if(rtx_flg.pgmDone)
  2885  0F48  1C2B               	btfss	_rtx_flg^(0+128),0
  2886  0F49  2F4E               	goto	l3839
  2887                           
  2888                           ;SYS.c: 90: {
  2889                           ;SYS.c: 92: rtx_flg.pgmDone=0;
  2890  0F4A  102B               	bcf	_rtx_flg^(0+128),0
  2891                           
  2892                           ;SYS.c: 94: PGMPgmOff();
  2893  0F4B  318B  2310  318F   	fcall	_PGMPgmOff
  2894  0F4E                     l3839:	
  2895                           
  2896                           ;SYS.c: 95: }
  2897                           ;SYS.c: 98: if(flg_slp.exitSleep)
  2898  0F4E  0021               	movlb	1	; select bank1
  2899  0F4F  1CAA               	btfss	_flg_slp^(0+128),1
  2900  0F50  0008               	return
  2901                           
  2902                           ;SYS.c: 99: {
  2903                           ;SYS.c: 101: flg_slp.exitSleep=0;
  2904  0F51  10AA               	bcf	_flg_slp^(0+128),1
  2905                           
  2906                           ;SYS.c: 103: RTXAwake();
  2907  0F52  318C  2447         	fcall	_RTXAwake
  2908  0F54  0008               	return
  2909  0F55                     __end_of_SYSTask:	
  2910                           
  2911                           	psect	text2
  2912  07EF                     __ptext2:	
  2913 ;; *************** function _RTXTick *****************
  2914 ;; Defined at:
  2915 ;;		line 90 in file "RTX.c"
  2916 ;; Parameters:    Size  Location     Type
  2917 ;;		None
  2918 ;; Auto vars:     Size  Location     Type
  2919 ;;		None
  2920 ;; Return value:  Size  Location     Type
  2921 ;;		None               void
  2922 ;; Registers used:
  2923 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2924 ;; Tracked objects:
  2925 ;;		On entry : 0/0
  2926 ;;		On exit  : 0/0
  2927 ;;		Unchanged: 0/0
  2928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  2929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2930 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2932 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  2933 ;;Total ram usage:        0 bytes
  2934 ;; Hardware stack levels used:    1
  2935 ;; Hardware stack levels required when called:    6
  2936 ;; This function calls:
  2937 ;;		_RTXSendData
  2938 ;;		_RTXSendPgm
  2939 ;; This function is called by:
  2940 ;;		_SYSTask
  2941 ;; This function uses a non-reentrant model
  2942 ;;
  2943                           
  2944                           
  2945                           ;psect for function _RTXTick
  2946  07EF                     _RTXTick:	
  2947                           
  2948                           ;RTX.c: 93: if(tmrRcvPkt)
  2949                           
  2950                           ;incstack = 0
  2951                           ; Regs used in _RTXTick: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2952  07EF  0021               	movlb	1	; select bank1
  2953  07F0  082D               	movf	_tmrRcvPkt^(0+128),w
  2954  07F1  1903               	btfsc	3,2
  2955  07F2  0008               	return
  2956                           
  2957                           ;RTX.c: 94: {
  2958                           ;RTX.c: 95: tmrRcvPkt--;
  2959  07F3  3001               	movlw	1
  2960  07F4  02AD               	subwf	_tmrRcvPkt^(0+128),f
  2961                           
  2962                           ;RTX.c: 96: if(!(tmrRcvPkt))
  2963  07F5  082D               	movf	_tmrRcvPkt^(0+128),w
  2964  07F6  1D03               	btfss	3,2
  2965  07F7  0008               	return
  2966                           
  2967                           ;RTX.c: 97: {
  2968                           ;RTX.c: 98: if(pgm_flg.pgmonoff)
  2969  07F8  1C7C               	btfss	_pgm_flg,0
  2970  07F9  2FFD               	goto	l3743
  2971                           
  2972                           ;RTX.c: 99: RTXSendPgm();
  2973  07FA  318F  27C4         	fcall	_RTXSendPgm
  2974  07FC  0008               	return
  2975  07FD                     l3743:	
  2976                           
  2977                           ;RTX.c: 100: else
  2978                           ;RTX.c: 101: RTXSendData();
  2979  07FD  3186  2621         	fcall	_RTXSendData
  2980  07FF  0008               	return
  2981  0800                     __end_of_RTXTick:	
  2982                           
  2983                           	psect	text3
  2984  0C47                     __ptext3:	
  2985 ;; *************** function _RTXAwake *****************
  2986 ;; Defined at:
  2987 ;;		line 113 in file "RTX.c"
  2988 ;; Parameters:    Size  Location     Type
  2989 ;;		None
  2990 ;; Auto vars:     Size  Location     Type
  2991 ;;		None
  2992 ;; Return value:  Size  Location     Type
  2993 ;;		None               void
  2994 ;; Registers used:
  2995 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2996 ;; Tracked objects:
  2997 ;;		On entry : 0/0
  2998 ;;		On exit  : 0/0
  2999 ;;		Unchanged: 0/0
  3000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3002 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3004 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3005 ;;Total ram usage:        0 bytes
  3006 ;; Hardware stack levels used:    1
  3007 ;; Hardware stack levels required when called:    9
  3008 ;; This function calls:
  3009 ;;		_CC1Init
  3010 ;;		_DLYDelay_ms
  3011 ;;		_RTXInit
  3012 ;; This function is called by:
  3013 ;;		_SYSTask
  3014 ;; This function uses a non-reentrant model
  3015 ;;
  3016                           
  3017                           
  3018                           ;psect for function _RTXAwake
  3019  0C47                     _RTXAwake:	
  3020                           
  3021                           ;RTX.c: 116: LATAbits.LATA5=0;
  3022                           
  3023                           ;incstack = 0
  3024                           ; Regs used in _RTXAwake: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3025  0C47  0022               	movlb	2	; select bank2
  3026  0C48  128C               	bcf	12,5	;volatile
  3027                           
  3028                           ;RTX.c: 117: DLYDelay_ms(1);
  3029  0C49  3001               	movlw	1
  3030  0C4A  00F1               	movwf	DLYDelay_ms@val
  3031  0C4B  3000               	movlw	0
  3032  0C4C  00F2               	movwf	DLYDelay_ms@val+1
  3033  0C4D  318C  242E  318C   	fcall	_DLYDelay_ms
  3034                           
  3035                           ;RTX.c: 118: LATAbits.LATA5=1;
  3036  0C50  0022               	movlb	2	; select bank2
  3037  0C51  168C               	bsf	12,5	;volatile
  3038                           
  3039                           ;RTX.c: 119: DLYDelay_ms(1);
  3040  0C52  3001               	movlw	1
  3041  0C53  00F1               	movwf	DLYDelay_ms@val
  3042  0C54  3000               	movlw	0
  3043  0C55  00F2               	movwf	DLYDelay_ms@val+1
  3044  0C56  318C  242E  318C   	fcall	_DLYDelay_ms
  3045                           
  3046                           ;RTX.c: 122: CC1Init(2);
  3047  0C59  3002               	movlw	2
  3048  0C5A  318E  26F5  318C   	fcall	_CC1Init
  3049                           
  3050                           ;RTX.c: 125: RTXInit(2);
  3051  0C5D  3002               	movlw	2
  3052  0C5E  318D  25AB         	fcall	_RTXInit
  3053  0C60  0008               	return
  3054  0C61                     __end_of_RTXAwake:	
  3055                           
  3056                           	psect	text4
  3057  0DAB                     __ptext4:	
  3058 ;; *************** function _RTXInit *****************
  3059 ;; Defined at:
  3060 ;;		line 67 in file "RTX.c"
  3061 ;; Parameters:    Size  Location     Type
  3062 ;;  state           1    wreg     unsigned char 
  3063 ;; Auto vars:     Size  Location     Type
  3064 ;;  state           1   60[BANK0 ] unsigned char 
  3065 ;; Return value:  Size  Location     Type
  3066 ;;		None               void
  3067 ;; Registers used:
  3068 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3069 ;; Tracked objects:
  3070 ;;		On entry : 0/0
  3071 ;;		On exit  : 0/0
  3072 ;;		Unchanged: 0/0
  3073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3074 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3075 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3076 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3077 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3078 ;;Total ram usage:        1 bytes
  3079 ;; Hardware stack levels used:    1
  3080 ;; Hardware stack levels required when called:    8
  3081 ;; This function calls:
  3082 ;;		_CC1Strobe
  3083 ;;		_RTXStartSendData
  3084 ;; This function is called by:
  3085 ;;		_RTXAwake
  3086 ;;		_main
  3087 ;; This function uses a non-reentrant model
  3088 ;;
  3089                           
  3090                           
  3091                           ;psect for function _RTXInit
  3092  0DAB                     _RTXInit:	
  3093                           
  3094                           ;incstack = 0
  3095                           ; Regs used in _RTXInit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3096                           ;RTXInit@state stored from wreg
  3097  0DAB  0020               	movlb	0	; select bank0
  3098  0DAC  00DC               	movwf	RTXInit@state
  3099                           
  3100                           ;RTX.c: 69: switch(state)
  3101  0DAD  2DC2               	goto	l3701
  3102  0DAE                     l3693:	
  3103                           ;RTX.c: 74: case 1:
  3104                           
  3105                           ;RTX.c: 73: break;
  3106                           
  3107                           ;RTX.c: 70: {
  3108                           ;RTX.c: 71: case 0:
  3109                           
  3110                           
  3111                           ;RTX.c: 76: tmrRcvPkt=0;
  3112  0DAE  0021               	movlb	1	; select bank1
  3113  0DAF  01AD               	clrf	_tmrRcvPkt^(0+128)
  3114                           
  3115                           ;RTX.c: 77: cntSndData=0;
  3116  0DB0  01A9               	clrf	_cntSndData^(0+128)
  3117                           
  3118                           ;RTX.c: 78: rtx_flg.val=0;
  3119  0DB1  01AB               	clrf	_rtx_flg^(0+128)
  3120                           
  3121                           ;RTX.c: 79: break;
  3122  0DB2  0008               	return
  3123  0DB3                     l3695:	
  3124                           ;RTX.c: 80: case 2:
  3125                           
  3126                           
  3127                           ;RTX.c: 82: CC1Strobe(SIDLE);
  3128  0DB3  3036               	movlw	54
  3129  0DB4  318B  23C1  318D   	fcall	_CC1Strobe
  3130                           
  3131                           ;RTX.c: 83: CC1Strobe(SCAL);
  3132  0DB7  3033               	movlw	51
  3133  0DB8  318B  23C1  318D   	fcall	_CC1Strobe
  3134                           
  3135                           ;RTX.c: 84: CC1Strobe(SRX);
  3136  0DBB  3034               	movlw	52
  3137  0DBC  318B  23C1  318D   	fcall	_CC1Strobe
  3138                           
  3139                           ;RTX.c: 85: RTXStartSendData();
  3140  0DBF  318B  2391         	fcall	_RTXStartSendData
  3141                           
  3142                           ;RTX.c: 87: }
  3143                           
  3144                           ;RTX.c: 86: break;
  3145  0DC1  0008               	return
  3146  0DC2                     l3701:	
  3147  0DC2  0020               	movlb	0	; select bank0
  3148  0DC3  085C               	movf	RTXInit@state,w
  3149                           
  3150                           ; Switch size 1, requested type "space"
  3151                           ; Number of cases is 3, Range of values is 0 to 2
  3152                           ; switch strategies available:
  3153                           ; Name         Instructions Cycles
  3154                           ; simple_byte           10     6 (average)
  3155                           ; direct_byte           12     6 (fixed)
  3156                           ; jumptable            260     6 (fixed)
  3157                           ;	Chosen strategy is simple_byte
  3158  0DC4  3A00               	xorlw	0	; case 0
  3159  0DC5  1903               	skipnz
  3160  0DC6  2DCE               	goto	l472
  3161  0DC7  3A01               	xorlw	1	; case 1
  3162  0DC8  1903               	skipnz
  3163  0DC9  2DAE               	goto	l3693
  3164  0DCA  3A03               	xorlw	3	; case 2
  3165  0DCB  1903               	skipnz
  3166  0DCC  2DB3               	goto	l3695
  3167  0DCD  2DCE               	goto	l472
  3168  0DCE                     l472:	
  3169  0DCE  0008               	return
  3170  0DCF                     __end_of_RTXInit:	
  3171                           
  3172                           	psect	text5
  3173  0B91                     __ptext5:	
  3174 ;; *************** function _RTXStartSendData *****************
  3175 ;; Defined at:
  3176 ;;		line 214 in file "RTX.c"
  3177 ;; Parameters:    Size  Location     Type
  3178 ;;		None
  3179 ;; Auto vars:     Size  Location     Type
  3180 ;;		None
  3181 ;; Return value:  Size  Location     Type
  3182 ;;		None               void
  3183 ;; Registers used:
  3184 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3185 ;; Tracked objects:
  3186 ;;		On entry : 0/0
  3187 ;;		On exit  : 0/0
  3188 ;;		Unchanged: 0/0
  3189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3191 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3192 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3193 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3194 ;;Total ram usage:        0 bytes
  3195 ;; Hardware stack levels used:    1
  3196 ;; Hardware stack levels required when called:    7
  3197 ;; This function calls:
  3198 ;;		_ADCConv
  3199 ;;		_DLYDelay_ms
  3200 ;;		_RTXSendData
  3201 ;; This function is called by:
  3202 ;;		_RTXInit
  3203 ;; This function uses a non-reentrant model
  3204 ;;
  3205                           
  3206                           
  3207                           ;psect for function _RTXStartSendData
  3208  0B91                     _RTXStartSendData:	
  3209                           
  3210                           ;RTX.c: 217: DLYDelay_ms(100);
  3211                           
  3212                           ;incstack = 0
  3213                           ; Regs used in _RTXStartSendData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3214  0B91  3064               	movlw	100
  3215  0B92  00F1               	movwf	DLYDelay_ms@val
  3216  0B93  3000               	movlw	0
  3217  0B94  00F2               	movwf	DLYDelay_ms@val+1
  3218  0B95  318C  242E  318B   	fcall	_DLYDelay_ms
  3219                           
  3220                           ;RTX.c: 219: ADCConv();
  3221  0B98  3180  2041  318B   	fcall	_ADCConv
  3222                           
  3223                           ;RTX.c: 222: cntSndData=0;
  3224  0B9B  0021               	movlb	1	; select bank1
  3225  0B9C  01A9               	clrf	_cntSndData^(0+128)
  3226                           
  3227                           ;RTX.c: 224: RTXSendData();
  3228  0B9D  3186  2621         	fcall	_RTXSendData
  3229  0B9F  0008               	return
  3230  0BA0                     __end_of_RTXStartSendData:	
  3231                           
  3232                           	psect	text6
  3233  0621                     __ptext6:	
  3234 ;; *************** function _RTXSendData *****************
  3235 ;; Defined at:
  3236 ;;		line 227 in file "RTX.c"
  3237 ;; Parameters:    Size  Location     Type
  3238 ;;		None
  3239 ;; Auto vars:     Size  Location     Type
  3240 ;;  valBatt         3   12[BANK0 ] struct _RTX_DATA
  3241 ;;  valTemp         3    9[BANK0 ] struct _RTX_DATA
  3242 ;; Return value:  Size  Location     Type
  3243 ;;		None               void
  3244 ;; Registers used:
  3245 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3246 ;; Tracked objects:
  3247 ;;		On entry : 0/0
  3248 ;;		On exit  : 0/0
  3249 ;;		Unchanged: 0/0
  3250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3252 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3253 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3254 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3255 ;;Total ram usage:        7 bytes
  3256 ;; Hardware stack levels used:    1
  3257 ;; Hardware stack levels required when called:    5
  3258 ;; This function calls:
  3259 ;;		_LEDFastFlash
  3260 ;;		_RTXSndPkt
  3261 ;; This function is called by:
  3262 ;;		_RTXTick
  3263 ;;		_RTXStartSendData
  3264 ;; This function uses a non-reentrant model
  3265 ;;
  3266                           
  3267                           
  3268                           ;psect for function _RTXSendData
  3269  0621                     _RTXSendData:	
  3270                           
  3271                           ;RTX.c: 229: tu_RTX_DATA valTemp,valBatt;
  3272                           ;RTX.c: 231: if(!(pgm_flg.pgmonoff))
  3273                           
  3274                           ;incstack = 0
  3275                           ; Regs used in _RTXSendData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3276  0621  187C               	btfsc	_pgm_flg,0
  3277  0622  0008               	return
  3278                           
  3279                           ;RTX.c: 232: {
  3280                           ;RTX.c: 234: if(cntSndData<5 && pgm_cfg.menu.baseIdProg)
  3281  0623  3005               	movlw	5
  3282  0624  0021               	movlb	1	; select bank1
  3283  0625  0229               	subwf	_cntSndData^(0+128),w
  3284  0626  1C03               	btfss	3,0
  3285  0627  1C4A               	btfss	(_pgm_cfg^(0+128)+2),0
  3286  0628  2E91               	goto	l515
  3287                           
  3288                           ;RTX.c: 235: {
  3289                           ;RTX.c: 237: pktTx[ID_DEST]=pgm_cfg.baseId;
  3290  0629  084C               	movf	(_pgm_cfg^(0+128)+4),w
  3291  062A  0020               	movlb	0	; select bank0
  3292  062B  00A8               	movwf	??_RTXSendData
  3293  062C  0828               	movf	??_RTXSendData,w
  3294  062D  0021               	movlb	1	; select bank1
  3295  062E  00BD               	movwf	_pktTx^(0+128)
  3296                           
  3297                           ;RTX.c: 238: pktTx[TYPE_DEST]=BASE;
  3298  062F  01BE               	clrf	(_pktTx^(0+128)+1)
  3299                           
  3300                           ;RTX.c: 239: pktTx[ID_SOURCE]=pgm_cfg.sensId;
  3301  0630  084B               	movf	(_pgm_cfg^(0+128)+3),w
  3302  0631  0020               	movlb	0	; select bank0
  3303  0632  00A8               	movwf	??_RTXSendData
  3304  0633  0828               	movf	??_RTXSendData,w
  3305  0634  0021               	movlb	1	; select bank1
  3306  0635  00BF               	movwf	(_pktTx^(0+128)+2)
  3307                           
  3308                           ;RTX.c: 241: if(PORTBbits.RB5)
  3309  0636  0020               	movlb	0	; select bank0
  3310  0637  1E8D               	btfss	13,5	;volatile
  3311  0638  2E3D               	goto	l3587
  3312                           
  3313                           ;RTX.c: 242: pktTx[TYPE_SOURCE]=SENS_CURRGEN;
  3314  0639  0021               	movlb	1	; select bank1
  3315  063A  01C0               	clrf	(_pktTx^(0+128)+3)
  3316  063B  0AC0               	incf	(_pktTx^(0+128)+3),f
  3317  063C  2E43               	goto	l3589
  3318  063D                     l3587:	
  3319                           
  3320                           ;RTX.c: 243: else
  3321                           ;RTX.c: 244: pktTx[TYPE_SOURCE]=SENS_CURRCON;
  3322  063D  3002               	movlw	2
  3323  063E  0020               	movlb	0	; select bank0
  3324  063F  00A8               	movwf	??_RTXSendData
  3325  0640  0828               	movf	??_RTXSendData,w
  3326  0641  0021               	movlb	1	; select bank1
  3327  0642  00C0               	movwf	(_pktTx^(0+128)+3)
  3328  0643                     l3589:	
  3329                           
  3330                           ;RTX.c: 245: pktTx[OP]=DAT;
  3331  0643  01C1               	clrf	(_pktTx^(0+128)+4)
  3332                           
  3333                           ;RTX.c: 246: valTemp.val=rmsCurr+0;
  3334  0644  0020               	movlb	0	; select bank0
  3335  0645  0869               	movf	_rmsCurr,w
  3336  0646  00A9               	movwf	RTXSendData@valTemp
  3337  0647  086A               	movf	_rmsCurr+1,w
  3338  0648  00AA               	movwf	RTXSendData@valTemp+1
  3339  0649  086B               	movf	_rmsCurr+2,w
  3340  064A  00AB               	movwf	RTXSendData@valTemp+2
  3341                           
  3342                           ;RTX.c: 247: pktTx[VAL]=valTemp.val_byte[0];
  3343  064B  0829               	movf	RTXSendData@valTemp,w
  3344  064C  00A8               	movwf	??_RTXSendData
  3345  064D  0828               	movf	??_RTXSendData,w
  3346  064E  0021               	movlb	1	; select bank1
  3347  064F  00C2               	movwf	(_pktTx^(0+128)+5)
  3348                           
  3349                           ;RTX.c: 248: pktTx[VAL+1]=valTemp.val_byte[1];
  3350  0650  0020               	movlb	0	; select bank0
  3351  0651  082A               	movf	RTXSendData@valTemp+1,w
  3352  0652  00A8               	movwf	??_RTXSendData
  3353  0653  0828               	movf	??_RTXSendData,w
  3354  0654  0021               	movlb	1	; select bank1
  3355  0655  00C3               	movwf	(_pktTx^(0+128)+6)
  3356                           
  3357                           ;RTX.c: 249: pktTx[VAL+2]=valTemp.val_byte[2];
  3358  0656  0020               	movlb	0	; select bank0
  3359  0657  082B               	movf	RTXSendData@valTemp+2,w
  3360  0658  00A8               	movwf	??_RTXSendData
  3361  0659  0828               	movf	??_RTXSendData,w
  3362  065A  0021               	movlb	1	; select bank1
  3363  065B  00C4               	movwf	(_pktTx^(0+128)+7)
  3364                           
  3365                           ;RTX.c: 250: valBatt.val=battV;
  3366  065C  0820               	movf	_battV^(0+128),w
  3367  065D  0020               	movlb	0	; select bank0
  3368  065E  00AC               	movwf	RTXSendData@valBatt
  3369  065F  0021               	movlb	1	; select bank1
  3370  0660  0821               	movf	(_battV+1)^(0+128),w
  3371  0661  0020               	movlb	0	; select bank0
  3372  0662  00AD               	movwf	RTXSendData@valBatt+1
  3373  0663  0021               	movlb	1	; select bank1
  3374  0664  0822               	movf	(_battV+2)^(0+128),w
  3375  0665  0020               	movlb	0	; select bank0
  3376  0666  00AE               	movwf	RTXSendData@valBatt+2
  3377                           
  3378                           ;RTX.c: 251: pktTx[BAT]=valBatt.val_byte[0];
  3379  0667  082C               	movf	RTXSendData@valBatt,w
  3380  0668  00A8               	movwf	??_RTXSendData
  3381  0669  0828               	movf	??_RTXSendData,w
  3382  066A  0021               	movlb	1	; select bank1
  3383  066B  00C5               	movwf	(_pktTx^(0+128)+8)
  3384                           
  3385                           ;RTX.c: 252: pktTx[BAT+1]=valBatt.val_byte[1];
  3386  066C  0020               	movlb	0	; select bank0
  3387  066D  082D               	movf	RTXSendData@valBatt+1,w
  3388  066E  00A8               	movwf	??_RTXSendData
  3389  066F  0828               	movf	??_RTXSendData,w
  3390  0670  0021               	movlb	1	; select bank1
  3391  0671  00C6               	movwf	(_pktTx^(0+128)+9)
  3392                           
  3393                           ;RTX.c: 253: pktTx[BAT+2]=valBatt.val_byte[2];
  3394  0672  0020               	movlb	0	; select bank0
  3395  0673  082E               	movf	RTXSendData@valBatt+2,w
  3396  0674  00A8               	movwf	??_RTXSendData
  3397  0675  0828               	movf	??_RTXSendData,w
  3398  0676  0021               	movlb	1	; select bank1
  3399  0677  00C7               	movwf	(_pktTx^(0+128)+10)
  3400                           
  3401                           ;RTX.c: 256: RTXSndPkt(pktTx,0x0B);
  3402  0678  300B               	movlw	11
  3403  0679  0020               	movlb	0	; select bank0
  3404  067A  00A8               	movwf	??_RTXSendData
  3405  067B  0828               	movf	??_RTXSendData,w
  3406  067C  00A2               	movwf	RTXSndPkt@len
  3407  067D  30BD               	movlw	(low (_pktTx| 0))& (0+255)
  3408  067E  3186  26F7  3186   	fcall	_RTXSndPkt
  3409                           
  3410                           ;RTX.c: 259: cntSndData++;
  3411  0681  3001               	movlw	1
  3412  0682  0020               	movlb	0	; select bank0
  3413  0683  00A8               	movwf	??_RTXSendData
  3414  0684  0828               	movf	??_RTXSendData,w
  3415  0685  0021               	movlb	1	; select bank1
  3416  0686  07A9               	addwf	_cntSndData^(0+128),f
  3417                           
  3418                           ;RTX.c: 262: LEDFastFlash(1);
  3419  0687  3001               	movlw	1
  3420  0688  318D  252D         	fcall	_LEDFastFlash
  3421                           
  3422                           ;RTX.c: 265: tmrRcvPkt=100;
  3423  068A  3064               	movlw	100
  3424  068B  0020               	movlb	0	; select bank0
  3425  068C  00A8               	movwf	??_RTXSendData
  3426  068D  0828               	movf	??_RTXSendData,w
  3427  068E  0021               	movlb	1	; select bank1
  3428  068F  00AD               	movwf	_tmrRcvPkt^(0+128)
  3429                           
  3430                           ;RTX.c: 266: }
  3431  0690  0008               	return
  3432  0691                     l515:	
  3433                           
  3434                           ;RTX.c: 267: else
  3435                           ;RTX.c: 268: flg_slp.goSleep=1;
  3436  0691  142A               	bsf	_flg_slp^(0+128),0
  3437  0692  0008               	return
  3438  0693                     __end_of_RTXSendData:	
  3439                           
  3440                           	psect	text7
  3441  0D2D                     __ptext7:	
  3442 ;; *************** function _LEDFastFlash *****************
  3443 ;; Defined at:
  3444 ;;		line 38 in file "LED.c"
  3445 ;; Parameters:    Size  Location     Type
  3446 ;;  num             1    wreg     unsigned char 
  3447 ;; Auto vars:     Size  Location     Type
  3448 ;;  num             1    8[COMMON] unsigned char 
  3449 ;;  i               1    9[COMMON] unsigned char 
  3450 ;; Return value:  Size  Location     Type
  3451 ;;		None               void
  3452 ;; Registers used:
  3453 ;;		wreg, status,2, status,0, pclath, cstack
  3454 ;; Tracked objects:
  3455 ;;		On entry : 0/0
  3456 ;;		On exit  : 0/0
  3457 ;;		Unchanged: 0/0
  3458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3460 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3461 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3462 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3463 ;;Total ram usage:        3 bytes
  3464 ;; Hardware stack levels used:    1
  3465 ;; Hardware stack levels required when called:    3
  3466 ;; This function calls:
  3467 ;;		_DLYDelay_ms
  3468 ;; This function is called by:
  3469 ;;		_RTXSendData
  3470 ;; This function uses a non-reentrant model
  3471 ;;
  3472                           
  3473                           
  3474                           ;psect for function _LEDFastFlash
  3475  0D2D                     _LEDFastFlash:	
  3476                           
  3477                           ;incstack = 0
  3478                           ; Regs used in _LEDFastFlash: [wreg+status,2+status,0+pclath+cstack]
  3479                           ;LEDFastFlash@num stored from wreg
  3480  0D2D  00F8               	movwf	LEDFastFlash@num
  3481                           
  3482                           ;LED.c: 40: unsigned char i;
  3483                           ;LED.c: 42: for(i=0;i<num;i++)
  3484  0D2E  01F9               	clrf	LEDFastFlash@i
  3485  0D2F                     l3451:	
  3486  0D2F  0878               	movf	LEDFastFlash@num,w
  3487  0D30  0279               	subwf	LEDFastFlash@i,w
  3488  0D31  1803               	btfsc	3,0
  3489  0D32  0008               	return
  3490  0D33  0064               	clrwdt	;# 
  3491                           
  3492                           ;LED.c: 45: LATCbits.LATC7=0;
  3493  0D34  0022               	movlb	2	; select bank2
  3494  0D35  138E               	bcf	14,7	;volatile
  3495                           
  3496                           ;LED.c: 46: DLYDelay_ms(5);
  3497  0D36  3005               	movlw	5
  3498  0D37  00F1               	movwf	DLYDelay_ms@val
  3499  0D38  3000               	movlw	0
  3500  0D39  00F2               	movwf	DLYDelay_ms@val+1
  3501  0D3A  318C  242E  318D   	fcall	_DLYDelay_ms
  3502                           
  3503                           ;LED.c: 47: LATCbits.LATC7=1;
  3504  0D3D  0022               	movlb	2	; select bank2
  3505  0D3E  178E               	bsf	14,7	;volatile
  3506                           
  3507                           ;LED.c: 48: DLYDelay_ms(5);
  3508  0D3F  3005               	movlw	5
  3509  0D40  00F1               	movwf	DLYDelay_ms@val
  3510  0D41  3000               	movlw	0
  3511  0D42  00F2               	movwf	DLYDelay_ms@val+1
  3512  0D43  318C  242E  318D   	fcall	_DLYDelay_ms
  3513  0D46  3001               	movlw	1
  3514  0D47  00F7               	movwf	??_LEDFastFlash
  3515  0D48  0877               	movf	??_LEDFastFlash,w
  3516  0D49  07F9               	addwf	LEDFastFlash@i,f
  3517  0D4A  2D2F               	goto	l3451
  3518  0D4B                     __end_of_LEDFastFlash:	
  3519                           
  3520                           	psect	text8
  3521  0EF5                     __ptext8:	
  3522 ;; *************** function _CC1Init *****************
  3523 ;; Defined at:
  3524 ;;		line 74 in file "CC1.c"
  3525 ;; Parameters:    Size  Location     Type
  3526 ;;  state           1    wreg     unsigned char 
  3527 ;; Auto vars:     Size  Location     Type
  3528 ;;  state           1    2[BANK0 ] unsigned char 
  3529 ;; Return value:  Size  Location     Type
  3530 ;;		None               void
  3531 ;; Registers used:
  3532 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3533 ;; Tracked objects:
  3534 ;;		On entry : 0/0
  3535 ;;		On exit  : 0/0
  3536 ;;		Unchanged: 0/0
  3537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3539 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3540 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3541 ;;      Totals:         1       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3542 ;;Total ram usage:        2 bytes
  3543 ;; Hardware stack levels used:    1
  3544 ;; Hardware stack levels required when called:    4
  3545 ;; This function calls:
  3546 ;;		_CC1Strobe
  3547 ;;		_CC1Write
  3548 ;;		_DLYDelay_ms
  3549 ;; This function is called by:
  3550 ;;		_RTXAwake
  3551 ;;		_main
  3552 ;; This function uses a non-reentrant model
  3553 ;;
  3554                           
  3555                           
  3556                           ;psect for function _CC1Init
  3557  0EF5                     _CC1Init:	
  3558                           
  3559                           ;incstack = 0
  3560                           ; Regs used in _CC1Init: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3561                           ;CC1Init@state stored from wreg
  3562  0EF5  0020               	movlb	0	; select bank0
  3563  0EF6  00A2               	movwf	CC1Init@state
  3564                           
  3565                           ;CC1.c: 76: switch(state)
  3566  0EF7  2F1B               	goto	l3671
  3567  0EF8                     l3661:	
  3568                           ;CC1.c: 84: case 2:
  3569                           
  3570                           ;CC1.c: 83: break;
  3571                           
  3572                           ;CC1.c: 77: {
  3573                           ;CC1.c: 81: case 1:
  3574                           
  3575                           
  3576                           ;CC1.c: 87: CC1Strobe(SRES);
  3577  0EF8  3030               	movlw	48
  3578  0EF9  318B  23C1  318E   	fcall	_CC1Strobe
  3579                           
  3580                           ;CC1.c: 89: DLYDelay_ms(5);
  3581  0EFC  3005               	movlw	5
  3582  0EFD  00F1               	movwf	DLYDelay_ms@val
  3583  0EFE  3000               	movlw	0
  3584  0EFF  00F2               	movwf	DLYDelay_ms@val+1
  3585  0F00  318C  242E  318E   	fcall	_DLYDelay_ms
  3586                           
  3587                           ;CC1.c: 91: CC1Write(0x00,cc1InitVal,0x2E);
  3588  0F03  3020               	movlw	low _cc1InitVal
  3589  0F04  00F7               	movwf	CC1Write@src
  3590  0F05  3001               	movlw	high _cc1InitVal
  3591  0F06  00F8               	movwf	CC1Write@src+1
  3592  0F07  302E               	movlw	46
  3593  0F08  00FB               	movwf	??_CC1Init
  3594  0F09  087B               	movf	??_CC1Init,w
  3595  0F0A  00F9               	movwf	CC1Write@len
  3596  0F0B  3000               	movlw	0
  3597  0F0C  318D  258A  318E   	fcall	_CC1Write
  3598                           
  3599                           ;CC1.c: 92: CC1Write(0x3E,cc1PaTable,8);
  3600  0F0F  30CD               	movlw	low _cc1PaTable
  3601  0F10  00F7               	movwf	CC1Write@src
  3602  0F11  3000               	movlw	high _cc1PaTable
  3603  0F12  00F8               	movwf	CC1Write@src+1
  3604  0F13  3008               	movlw	8
  3605  0F14  00FB               	movwf	??_CC1Init
  3606  0F15  087B               	movf	??_CC1Init,w
  3607  0F16  00F9               	movwf	CC1Write@len
  3608  0F17  303E               	movlw	62
  3609  0F18  318D  258A         	fcall	_CC1Write
  3610                           
  3611                           ;CC1.c: 98: }
  3612                           
  3613                           ;CC1.c: 97: break;
  3614  0F1A  0008               	return
  3615  0F1B                     l3671:	
  3616  0F1B  0020               	movlb	0	; select bank0
  3617  0F1C  0822               	movf	CC1Init@state,w
  3618                           
  3619                           ; Switch size 1, requested type "space"
  3620                           ; Number of cases is 2, Range of values is 1 to 2
  3621                           ; switch strategies available:
  3622                           ; Name         Instructions Cycles
  3623                           ; simple_byte            7     4 (average)
  3624                           ; direct_byte           13     9 (fixed)
  3625                           ; jumptable            263     9 (fixed)
  3626                           ;	Chosen strategy is simple_byte
  3627  0F1D  3A01               	xorlw	1	; case 1
  3628  0F1E  1903               	skipnz
  3629  0F1F  2F24               	goto	l175
  3630  0F20  3A03               	xorlw	3	; case 2
  3631  0F21  1903               	skipnz
  3632  0F22  2EF8               	goto	l3661
  3633  0F23  2F24               	goto	l175
  3634  0F24                     l175:	
  3635  0F24  0008               	return
  3636  0F25                     __end_of_CC1Init:	
  3637                           
  3638                           	psect	text9
  3639  0003                     __ptext9:	
  3640 ;; *************** function _PGMTick *****************
  3641 ;; Defined at:
  3642 ;;		line 37 in file "PGM.c"
  3643 ;; Parameters:    Size  Location     Type
  3644 ;;		None
  3645 ;; Auto vars:     Size  Location     Type
  3646 ;;		None
  3647 ;; Return value:  Size  Location     Type
  3648 ;;		None               void
  3649 ;; Registers used:
  3650 ;;		None
  3651 ;; Tracked objects:
  3652 ;;		On entry : 0/0
  3653 ;;		On exit  : 0/0
  3654 ;;		Unchanged: 0/0
  3655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3657 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3659 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3660 ;;Total ram usage:        0 bytes
  3661 ;; Hardware stack levels used:    1
  3662 ;; Hardware stack levels required when called:    2
  3663 ;; This function calls:
  3664 ;;		Nothing
  3665 ;; This function is called by:
  3666 ;;		_SYSTask
  3667 ;; This function uses a non-reentrant model
  3668 ;;
  3669                           
  3670                           
  3671                           ;psect for function _PGMTick
  3672  0003                     _PGMTick:	
  3673                           
  3674                           ;incstack = 0
  3675                           ; Regs used in _PGMTick: []
  3676  0003  0008               	return
  3677  0004                     __end_of_PGMTick:	
  3678                           
  3679                           	psect	text10
  3680  0BFF                     __ptext10:	
  3681 ;; *************** function _PGMSelUp *****************
  3682 ;; Defined at:
  3683 ;;		line 79 in file "PGM.c"
  3684 ;; Parameters:    Size  Location     Type
  3685 ;;		None
  3686 ;; Auto vars:     Size  Location     Type
  3687 ;;		None
  3688 ;; Return value:  Size  Location     Type
  3689 ;;		None               void
  3690 ;; Registers used:
  3691 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3692 ;; Tracked objects:
  3693 ;;		On entry : 0/0
  3694 ;;		On exit  : 0/0
  3695 ;;		Unchanged: 0/0
  3696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3698 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3699 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3700 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3701 ;;Total ram usage:        1 bytes
  3702 ;; Hardware stack levels used:    1
  3703 ;; Hardware stack levels required when called:    8
  3704 ;; This function calls:
  3705 ;;		_PGMWriteNvm
  3706 ;;		_RTXStartSendPgm
  3707 ;; This function is called by:
  3708 ;;		_SYSTask
  3709 ;; This function uses a non-reentrant model
  3710 ;;
  3711                           
  3712                           
  3713                           ;psect for function _PGMSelUp
  3714  0BFF                     _PGMSelUp:	
  3715                           
  3716                           ;PGM.c: 82: if(!(pgm_flg.resetDone))
  3717                           
  3718                           ;incstack = 0
  3719                           ; Regs used in _PGMSelUp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3720  0BFF  18FC               	btfsc	_pgm_flg,1
  3721  0C00  2C14               	goto	l3719
  3722                           
  3723                           ;PGM.c: 83: {
  3724                           ;PGM.c: 85: if(pgm_cfg.sensId==0x00)
  3725  0C01  0021               	movlb	1	; select bank1
  3726  0C02  084B               	movf	(_pgm_cfg^(0+128)+3),w
  3727  0C03  1D03               	btfss	3,2
  3728  0C04  2C0F               	goto	l3713
  3729                           
  3730                           ;PGM.c: 86: {
  3731                           ;PGM.c: 88: pgm_cfg.sensId=TMR1L^TMR1H;
  3732  0C05  0020               	movlb	0	; select bank0
  3733  0C06  0816               	movf	22,w	;volatile
  3734  0C07  0617               	xorwf	23,w	;volatile
  3735  0C08  00E5               	movwf	??_PGMSelUp
  3736  0C09  0865               	movf	??_PGMSelUp,w
  3737  0C0A  0021               	movlb	1	; select bank1
  3738  0C0B  00CB               	movwf	(_pgm_cfg^(0+128)+3)
  3739                           
  3740                           ;PGM.c: 90: PGMWriteNvm();
  3741  0C0C  318B  2364  318B   	fcall	_PGMWriteNvm
  3742  0C0F                     l3713:	
  3743                           
  3744                           ;PGM.c: 91: }
  3745                           ;PGM.c: 93: pgm_flg.pgmonoff=1;
  3746  0C0F  147C               	bsf	_pgm_flg,0
  3747                           
  3748                           ;PGM.c: 95: LATCbits.LATC7=0;
  3749  0C10  0022               	movlb	2	; select bank2
  3750  0C11  138E               	bcf	14,7	;volatile
  3751                           
  3752                           ;PGM.c: 97: RTXStartSendPgm();
  3753  0C12  318B  2382         	fcall	_RTXStartSendPgm
  3754  0C14                     l3719:	
  3755                           
  3756                           ;PGM.c: 98: }
  3757                           ;PGM.c: 100: pgm_flg.resetDone=0;
  3758  0C14  10FC               	bcf	_pgm_flg,1
  3759  0C15  0008               	return
  3760  0C16                     __end_of_PGMSelUp:	
  3761                           
  3762                           	psect	text11
  3763  0B82                     __ptext11:	
  3764 ;; *************** function _RTXStartSendPgm *****************
  3765 ;; Defined at:
  3766 ;;		line 272 in file "RTX.c"
  3767 ;; Parameters:    Size  Location     Type
  3768 ;;		None
  3769 ;; Auto vars:     Size  Location     Type
  3770 ;;		None
  3771 ;; Return value:  Size  Location     Type
  3772 ;;		None               void
  3773 ;; Registers used:
  3774 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3775 ;; Tracked objects:
  3776 ;;		On entry : 0/0
  3777 ;;		On exit  : 0/0
  3778 ;;		Unchanged: 0/0
  3779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3781 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3782 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3783 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3784 ;;Total ram usage:        0 bytes
  3785 ;; Hardware stack levels used:    1
  3786 ;; Hardware stack levels required when called:    7
  3787 ;; This function calls:
  3788 ;;		_ADCConv
  3789 ;;		_DLYDelay_ms
  3790 ;;		_RTXSendPgm
  3791 ;; This function is called by:
  3792 ;;		_PGMSelUp
  3793 ;; This function uses a non-reentrant model
  3794 ;;
  3795                           
  3796                           
  3797                           ;psect for function _RTXStartSendPgm
  3798  0B82                     _RTXStartSendPgm:	
  3799                           
  3800                           ;RTX.c: 275: DLYDelay_ms(100);
  3801                           
  3802                           ;incstack = 0
  3803                           ; Regs used in _RTXStartSendPgm: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3804  0B82  3064               	movlw	100
  3805  0B83  00F1               	movwf	DLYDelay_ms@val
  3806  0B84  3000               	movlw	0
  3807  0B85  00F2               	movwf	DLYDelay_ms@val+1
  3808  0B86  318C  242E  318B   	fcall	_DLYDelay_ms
  3809                           
  3810                           ;RTX.c: 277: ADCConv();
  3811  0B89  3180  2041  318B   	fcall	_ADCConv
  3812                           
  3813                           ;RTX.c: 280: cntSndData=0;
  3814  0B8C  0021               	movlb	1	; select bank1
  3815  0B8D  01A9               	clrf	_cntSndData^(0+128)
  3816                           
  3817                           ;RTX.c: 282: RTXSendPgm();
  3818  0B8E  318F  27C4         	fcall	_RTXSendPgm
  3819  0B90  0008               	return
  3820  0B91                     __end_of_RTXStartSendPgm:	
  3821                           
  3822                           	psect	text12
  3823  0FC4                     __ptext12:	
  3824 ;; *************** function _RTXSendPgm *****************
  3825 ;; Defined at:
  3826 ;;		line 285 in file "RTX.c"
  3827 ;; Parameters:    Size  Location     Type
  3828 ;;		None
  3829 ;; Auto vars:     Size  Location     Type
  3830 ;;		None
  3831 ;; Return value:  Size  Location     Type
  3832 ;;		None               void
  3833 ;; Registers used:
  3834 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3835 ;; Tracked objects:
  3836 ;;		On entry : 0/0
  3837 ;;		On exit  : 0/0
  3838 ;;		Unchanged: 0/0
  3839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3842 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3843 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3844 ;;Total ram usage:        1 bytes
  3845 ;; Hardware stack levels used:    1
  3846 ;; Hardware stack levels required when called:    5
  3847 ;; This function calls:
  3848 ;;		_PGMPgmOff
  3849 ;;		_RTXSndPkt
  3850 ;; This function is called by:
  3851 ;;		_RTXTick
  3852 ;;		_RTXStartSendPgm
  3853 ;; This function uses a non-reentrant model
  3854 ;;
  3855                           
  3856                           
  3857                           ;psect for function _RTXSendPgm
  3858  0FC4                     _RTXSendPgm:	
  3859                           
  3860                           ;RTX.c: 288: if(cntSndData<5)
  3861                           
  3862                           ;incstack = 0
  3863                           ; Regs used in _RTXSendPgm: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3864  0FC4  3005               	movlw	5
  3865  0FC5  0021               	movlb	1	; select bank1
  3866  0FC6  0229               	subwf	_cntSndData^(0+128),w
  3867  0FC7  1803               	skipnc
  3868  0FC8  2FFB               	goto	l3655
  3869                           
  3870                           ;RTX.c: 289: {
  3871                           ;RTX.c: 291: pktTx[ID_DEST]=0x00;
  3872  0FC9  01BD               	clrf	_pktTx^(0+128)
  3873                           
  3874                           ;RTX.c: 292: pktTx[TYPE_DEST]=BASE;
  3875  0FCA  01BE               	clrf	(_pktTx^(0+128)+1)
  3876                           
  3877                           ;RTX.c: 293: pktTx[ID_SOURCE]=pgm_cfg.sensId;
  3878  0FCB  084B               	movf	(_pgm_cfg^(0+128)+3),w
  3879  0FCC  0020               	movlb	0	; select bank0
  3880  0FCD  00A8               	movwf	??_RTXSendPgm
  3881  0FCE  0828               	movf	??_RTXSendPgm,w
  3882  0FCF  0021               	movlb	1	; select bank1
  3883  0FD0  00BF               	movwf	(_pktTx^(0+128)+2)
  3884                           
  3885                           ;RTX.c: 295: if(PORTBbits.RB5)
  3886  0FD1  0020               	movlb	0	; select bank0
  3887  0FD2  1E8D               	btfss	13,5	;volatile
  3888  0FD3  2FD8               	goto	l3633
  3889                           
  3890                           ;RTX.c: 296: pktTx[TYPE_SOURCE]=SENS_CURRGEN;
  3891  0FD4  0021               	movlb	1	; select bank1
  3892  0FD5  01C0               	clrf	(_pktTx^(0+128)+3)
  3893  0FD6  0AC0               	incf	(_pktTx^(0+128)+3),f
  3894  0FD7  2FDE               	goto	l3635
  3895  0FD8                     l3633:	
  3896                           
  3897                           ;RTX.c: 297: else
  3898                           ;RTX.c: 298: pktTx[TYPE_SOURCE]=SENS_CURRCON;
  3899  0FD8  3002               	movlw	2
  3900  0FD9  0020               	movlb	0	; select bank0
  3901  0FDA  00A8               	movwf	??_RTXSendPgm
  3902  0FDB  0828               	movf	??_RTXSendPgm,w
  3903  0FDC  0021               	movlb	1	; select bank1
  3904  0FDD  00C0               	movwf	(_pktTx^(0+128)+3)
  3905  0FDE                     l3635:	
  3906                           
  3907                           ;RTX.c: 299: pktTx[OP]=PGM;
  3908  0FDE  01C1               	clrf	(_pktTx^(0+128)+4)
  3909  0FDF  0AC1               	incf	(_pktTx^(0+128)+4),f
  3910                           
  3911                           ;RTX.c: 300: pktTx[VAL]=0x00;
  3912  0FE0  01C2               	clrf	(_pktTx^(0+128)+5)
  3913                           
  3914                           ;RTX.c: 301: pktTx[VAL+1]=0x00;
  3915  0FE1  01C3               	clrf	(_pktTx^(0+128)+6)
  3916                           
  3917                           ;RTX.c: 302: pktTx[VAL+2]=0x00;
  3918  0FE2  01C4               	clrf	(_pktTx^(0+128)+7)
  3919                           
  3920                           ;RTX.c: 303: pktTx[BAT]=0x00;
  3921  0FE3  01C5               	clrf	(_pktTx^(0+128)+8)
  3922                           
  3923                           ;RTX.c: 304: pktTx[BAT+1]=0x00;
  3924  0FE4  01C6               	clrf	(_pktTx^(0+128)+9)
  3925                           
  3926                           ;RTX.c: 305: pktTx[BAT+2]=0x00;
  3927  0FE5  01C7               	clrf	(_pktTx^(0+128)+10)
  3928                           
  3929                           ;RTX.c: 308: RTXSndPkt(pktTx,0x0B);
  3930  0FE6  300B               	movlw	11
  3931  0FE7  0020               	movlb	0	; select bank0
  3932  0FE8  00A8               	movwf	??_RTXSendPgm
  3933  0FE9  0828               	movf	??_RTXSendPgm,w
  3934  0FEA  00A2               	movwf	RTXSndPkt@len
  3935  0FEB  30BD               	movlw	(low (_pktTx| 0))& (0+255)
  3936  0FEC  3186  26F7         	fcall	_RTXSndPkt
  3937                           
  3938                           ;RTX.c: 311: cntSndData++;
  3939  0FEE  3001               	movlw	1
  3940  0FEF  0020               	movlb	0	; select bank0
  3941  0FF0  00A8               	movwf	??_RTXSendPgm
  3942  0FF1  0828               	movf	??_RTXSendPgm,w
  3943  0FF2  0021               	movlb	1	; select bank1
  3944  0FF3  07A9               	addwf	_cntSndData^(0+128),f
  3945                           
  3946                           ;RTX.c: 314: tmrRcvPkt=100;
  3947  0FF4  3064               	movlw	100
  3948  0FF5  0020               	movlb	0	; select bank0
  3949  0FF6  00A8               	movwf	??_RTXSendPgm
  3950  0FF7  0828               	movf	??_RTXSendPgm,w
  3951  0FF8  0021               	movlb	1	; select bank1
  3952  0FF9  00AD               	movwf	_tmrRcvPkt^(0+128)
  3953                           
  3954                           ;RTX.c: 315: }
  3955  0FFA  0008               	return
  3956  0FFB                     l3655:	
  3957                           
  3958                           ;RTX.c: 316: else
  3959                           ;RTX.c: 317: {
  3960                           ;RTX.c: 319: PGMPgmOff();
  3961  0FFB  318B  2310         	fcall	_PGMPgmOff
  3962                           
  3963                           ;RTX.c: 321: flg_slp.goSleep=1;
  3964  0FFD  0021               	movlb	1	; select bank1
  3965  0FFE  142A               	bsf	_flg_slp^(0+128),0
  3966  0FFF  0008               	return
  3967  1000                     __end_of_RTXSendPgm:	
  3968                           
  3969                           	psect	text13
  3970  06F7                     __ptext13:	
  3971 ;; *************** function _RTXSndPkt *****************
  3972 ;; Defined at:
  3973 ;;		line 128 in file "RTX.c"
  3974 ;; Parameters:    Size  Location     Type
  3975 ;;  src             1    wreg     PTR unsigned char 
  3976 ;;		 -> pktTx(11), 
  3977 ;;  len             1    2[BANK0 ] unsigned char 
  3978 ;; Auto vars:     Size  Location     Type
  3979 ;;  src             1    5[BANK0 ] PTR unsigned char 
  3980 ;;		 -> pktTx(11), 
  3981 ;;  sta             1    7[BANK0 ] unsigned char 
  3982 ;;  numTxByte       1    6[BANK0 ] unsigned char 
  3983 ;;  numRxByte       1    4[BANK0 ] unsigned char 
  3984 ;; Return value:  Size  Location     Type
  3985 ;;		None               void
  3986 ;; Registers used:
  3987 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3988 ;; Tracked objects:
  3989 ;;		On entry : 0/0
  3990 ;;		On exit  : 0/0
  3991 ;;		Unchanged: 0/0
  3992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  3993 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3994 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3995 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3996 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  3997 ;;Total ram usage:        6 bytes
  3998 ;; Hardware stack levels used:    1
  3999 ;; Hardware stack levels required when called:    4
  4000 ;; This function calls:
  4001 ;;		_CC1Read
  4002 ;;		_CC1Strobe
  4003 ;;		_CC1Write
  4004 ;; This function is called by:
  4005 ;;		_RTXSendData
  4006 ;;		_RTXSendPgm
  4007 ;; This function uses a non-reentrant model
  4008 ;;
  4009                           
  4010                           
  4011                           ;psect for function _RTXSndPkt
  4012  06F7                     _RTXSndPkt:	
  4013                           
  4014                           ;incstack = 0
  4015                           ; Regs used in _RTXSndPkt: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4016                           ;RTXSndPkt@src stored from wreg
  4017  06F7  0020               	movlb	0	; select bank0
  4018  06F8  00A5               	movwf	RTXSndPkt@src
  4019  06F9                     l489:	
  4020                           ;RTX.c: 130: unsigned char sta,numRxByte,numTxByte;
  4021                           ;RTX.c: 133: do
  4022                           
  4023  06F9  0064               	clrwdt	;# 
  4024                           
  4025                           ;RTX.c: 136: CC1Read(0x35,(&(sta)),1);
  4026  06FA  3027               	movlw	(low (RTXSndPkt@sta| 0))& (0+255)
  4027  06FB  0020               	movlb	0	; select bank0
  4028  06FC  00A3               	movwf	??_RTXSndPkt
  4029  06FD  0823               	movf	??_RTXSndPkt,w
  4030  06FE  00F7               	movwf	CC1Read@dst
  4031  06FF  01F8               	clrf	CC1Read@len
  4032  0700  0AF8               	incf	CC1Read@len,f
  4033  0701  3035               	movlw	53
  4034  0702  318C  247C  3186   	fcall	_CC1Read
  4035                           
  4036                           ;RTX.c: 137: }
  4037                           ;RTX.c: 138: while(!(((sta&0b00011111)==0x0D) || ((sta&0b00011111)==0x01)));
  4038  0705  301F               	movlw	31
  4039  0706  0020               	movlb	0	; select bank0
  4040  0707  0527               	andwf	RTXSndPkt@sta,w
  4041  0708  00A3               	movwf	??_RTXSndPkt
  4042  0709  300D               	movlw	13
  4043  070A  0623               	xorwf	??_RTXSndPkt,w
  4044  070B  1903               	btfsc	3,2
  4045  070C  2F13               	goto	l3459
  4046  070D  301F               	movlw	31
  4047  070E  0527               	andwf	RTXSndPkt@sta,w
  4048  070F  00A3               	movwf	??_RTXSndPkt
  4049  0710  0323               	decf	??_RTXSndPkt,w
  4050  0711  1D03               	btfss	3,2
  4051  0712  2EF9               	goto	l489
  4052  0713                     l3459:	
  4053                           
  4054                           ;RTX.c: 140: CC1Strobe(SIDLE);
  4055  0713  3036               	movlw	54
  4056  0714  318B  23C1  3186   	fcall	_CC1Strobe
  4057                           
  4058                           ;RTX.c: 141: CC1Read(0x3B,(&(numRxByte)),1);
  4059  0717  3024               	movlw	(low (RTXSndPkt@numRxByte| 0))& (0+255)
  4060  0718  0020               	movlb	0	; select bank0
  4061  0719  00A3               	movwf	??_RTXSndPkt
  4062  071A  0823               	movf	??_RTXSndPkt,w
  4063  071B  00F7               	movwf	CC1Read@dst
  4064  071C  01F8               	clrf	CC1Read@len
  4065  071D  0AF8               	incf	CC1Read@len,f
  4066  071E  303B               	movlw	59
  4067  071F  318C  247C  3186   	fcall	_CC1Read
  4068                           
  4069                           ;RTX.c: 142: CC1Read(0x3A,(&(numTxByte)),1);
  4070  0722  3026               	movlw	(low (RTXSndPkt@numTxByte| 0))& (0+255)
  4071  0723  0020               	movlb	0	; select bank0
  4072  0724  00A3               	movwf	??_RTXSndPkt
  4073  0725  0823               	movf	??_RTXSndPkt,w
  4074  0726  00F7               	movwf	CC1Read@dst
  4075  0727  01F8               	clrf	CC1Read@len
  4076  0728  0AF8               	incf	CC1Read@len,f
  4077  0729  303A               	movlw	58
  4078  072A  318C  247C  3186   	fcall	_CC1Read
  4079                           
  4080                           ;RTX.c: 144: CC1Strobe(SFTX);
  4081  072D  303B               	movlw	59
  4082  072E  318B  23C1  3186   	fcall	_CC1Strobe
  4083                           
  4084                           ;RTX.c: 145: CC1Read(0x3A,(&(numTxByte)),1);
  4085  0731  3026               	movlw	(low (RTXSndPkt@numTxByte| 0))& (0+255)
  4086  0732  0020               	movlb	0	; select bank0
  4087  0733  00A3               	movwf	??_RTXSndPkt
  4088  0734  0823               	movf	??_RTXSndPkt,w
  4089  0735  00F7               	movwf	CC1Read@dst
  4090  0736  01F8               	clrf	CC1Read@len
  4091  0737  0AF8               	incf	CC1Read@len,f
  4092  0738  303A               	movlw	58
  4093  0739  318C  247C  3186   	fcall	_CC1Read
  4094                           
  4095                           ;RTX.c: 147: CC1Write(0x3F,src,len);
  4096  073C  0020               	movlb	0	; select bank0
  4097  073D  0825               	movf	RTXSndPkt@src,w
  4098  073E  00F7               	movwf	CC1Write@src
  4099  073F  3000               	movlw	0
  4100  0740  00F8               	movwf	CC1Write@src+1
  4101  0741  0822               	movf	RTXSndPkt@len,w
  4102  0742  00A3               	movwf	??_RTXSndPkt
  4103  0743  0823               	movf	??_RTXSndPkt,w
  4104  0744  00F9               	movwf	CC1Write@len
  4105  0745  303F               	movlw	63
  4106  0746  318D  258A  3186   	fcall	_CC1Write
  4107                           
  4108                           ;RTX.c: 149: CC1Strobe(STX);
  4109  0749  3035               	movlw	53
  4110  074A  318B  23C1         	fcall	_CC1Strobe
  4111  074C  0008               	return
  4112  074D                     __end_of_RTXSndPkt:	
  4113                           
  4114                           	psect	text14
  4115  0D8A                     __ptext14:	
  4116 ;; *************** function _CC1Write *****************
  4117 ;; Defined at:
  4118 ;;		line 134 in file "CC1.c"
  4119 ;; Parameters:    Size  Location     Type
  4120 ;;  addr            1    wreg     unsigned char 
  4121 ;;  src             2    7[COMMON] PTR unsigned char 
  4122 ;;		 -> pktTx(11), cc1PaTable(8), cc1InitVal(47), 
  4123 ;;  len             1    9[COMMON] unsigned char 
  4124 ;; Auto vars:     Size  Location     Type
  4125 ;;  addr            1    0[BANK0 ] unsigned char 
  4126 ;;  cc1Addr         1    1[BANK0 ] unsigned char 
  4127 ;; Return value:  Size  Location     Type
  4128 ;;		None               void
  4129 ;; Registers used:
  4130 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4131 ;; Tracked objects:
  4132 ;;		On entry : 0/0
  4133 ;;		On exit  : 0/0
  4134 ;;		Unchanged: 0/0
  4135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4136 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4137 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4138 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4139 ;;      Totals:         4       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4140 ;;Total ram usage:        6 bytes
  4141 ;; Hardware stack levels used:    1
  4142 ;; Hardware stack levels required when called:    3
  4143 ;; This function calls:
  4144 ;;		_SPIWrite
  4145 ;; This function is called by:
  4146 ;;		_CC1Init
  4147 ;;		_RTXSndPkt
  4148 ;; This function uses a non-reentrant model
  4149 ;;
  4150                           
  4151                           
  4152                           ;psect for function _CC1Write
  4153  0D8A                     _CC1Write:	
  4154                           
  4155                           ;incstack = 0
  4156                           ; Regs used in _CC1Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4157                           ;CC1Write@addr stored from wreg
  4158  0D8A  0020               	movlb	0	; select bank0
  4159  0D8B  00A0               	movwf	CC1Write@addr
  4160                           
  4161                           ;CC1.c: 136: unsigned char cc1Addr;
  4162                           ;CC1.c: 139: LATAbits.LATA5=0;
  4163  0D8C  0022               	movlb	2	; select bank2
  4164  0D8D  128C               	bcf	12,5	;volatile
  4165                           
  4166                           ;CC1.c: 142: cc1Addr=((addr&0b00111111)|0b01000000);
  4167  0D8E  0020               	movlb	0	; select bank0
  4168  0D8F  0820               	movf	CC1Write@addr,w
  4169  0D90  393F               	andlw	63
  4170  0D91  3840               	iorlw	64
  4171  0D92  00FA               	movwf	??_CC1Write
  4172  0D93  087A               	movf	??_CC1Write,w
  4173  0D94  00A1               	movwf	CC1Write@cc1Addr
  4174                           
  4175                           ;CC1.c: 143: SPIWrite((&(cc1Addr)),1);
  4176  0D95  3021               	movlw	low CC1Write@cc1Addr
  4177  0D96  00F1               	movwf	SPIWrite@srcPtr
  4178  0D97  3000               	movlw	high CC1Write@cc1Addr
  4179  0D98  00F2               	movwf	SPIWrite@srcPtr+1
  4180  0D99  01F3               	clrf	SPIWrite@len
  4181  0D9A  0AF3               	incf	SPIWrite@len,f
  4182  0D9B  318C  2498  318D   	fcall	_SPIWrite
  4183                           
  4184                           ;CC1.c: 146: SPIWrite(src,len);
  4185  0D9E  0877               	movf	CC1Write@src,w
  4186  0D9F  00F1               	movwf	SPIWrite@srcPtr
  4187  0DA0  0878               	movf	CC1Write@src+1,w
  4188  0DA1  00F2               	movwf	SPIWrite@srcPtr+1
  4189  0DA2  0879               	movf	CC1Write@len,w
  4190  0DA3  00FA               	movwf	??_CC1Write
  4191  0DA4  087A               	movf	??_CC1Write,w
  4192  0DA5  00F3               	movwf	SPIWrite@len
  4193  0DA6  318C  2498         	fcall	_SPIWrite
  4194                           
  4195                           ;CC1.c: 149: LATAbits.LATA5=1;
  4196  0DA8  0022               	movlb	2	; select bank2
  4197  0DA9  168C               	bsf	12,5	;volatile
  4198  0DAA  0008               	return
  4199  0DAB                     __end_of_CC1Write:	
  4200                           
  4201                           	psect	text15
  4202  0041                     __ptext15:	
  4203 ;; *************** function _ADCConv *****************
  4204 ;; Defined at:
  4205 ;;		line 52 in file "ADC.c"
  4206 ;; Parameters:    Size  Location     Type
  4207 ;;		None
  4208 ;; Auto vars:     Size  Location     Type
  4209 ;;  sumCurr         4   53[BANK0 ] unsigned long 
  4210 ;;  sumBatt         2   57[BANK0 ] unsigned short 
  4211 ;;  cntSum          1   59[BANK0 ] unsigned char 
  4212 ;; Return value:  Size  Location     Type
  4213 ;;		None               void
  4214 ;; Registers used:
  4215 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4216 ;; Tracked objects:
  4217 ;;		On entry : 0/0
  4218 ;;		On exit  : 0/0
  4219 ;;		Unchanged: 0/0
  4220 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4222 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4223 ;;      Temps:          0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4224 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4225 ;;Total ram usage:       24 bytes
  4226 ;; Hardware stack levels used:    1
  4227 ;; Hardware stack levels required when called:    6
  4228 ;; This function calls:
  4229 ;;		_DLYDelay_ms
  4230 ;;		___ftdiv
  4231 ;;		___ftmul
  4232 ;;		___lltoft
  4233 ;;		___lwdiv
  4234 ;;		___lwtoft
  4235 ;;		___wmul
  4236 ;;		_sqrt
  4237 ;; This function is called by:
  4238 ;;		_RTXStartSendData
  4239 ;;		_RTXStartSendPgm
  4240 ;;		_SYSTask
  4241 ;; This function uses a non-reentrant model
  4242 ;;
  4243                           
  4244                           
  4245                           ;psect for function _ADCConv
  4246  0041                     _ADCConv:	
  4247                           
  4248                           ;ADC.c: 59: {
  4249                           ;ADC.c: 61: switch(adc_ch)
  4250                           
  4251                           ;incstack = 0
  4252                           ; Regs used in _ADCConv: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4253                           ;ADC.c: 54: unsigned char cntSum;
  4254                           ;ADC.c: 55: unsigned short sumBatt;
  4255                           ;ADC.c: 56: unsigned long sumCurr;
  4256                           ;ADC.c: 58: while(1)
  4257  0041  29FD               	goto	l3561
  4258  0042                     l124:	
  4259                           ;ADC.c: 62: {
  4260                           ;ADC.c: 63: case ADC_CH_OFF:
  4261                           
  4262                           
  4263                           ;ADC.c: 65: LATAbits.LATA0=1;
  4264  0042  0022               	movlb	2	; select bank2
  4265  0043  140C               	bsf	12,0	;volatile
  4266                           
  4267                           ;ADC.c: 67: sumBatt=0;
  4268  0044  0020               	movlb	0	; select bank0
  4269  0045  01D9               	clrf	ADCConv@sumBatt
  4270  0046  01DA               	clrf	ADCConv@sumBatt+1
  4271                           
  4272                           ;ADC.c: 69: cntSum=0;
  4273  0047  01DB               	clrf	ADCConv@cntSum
  4274                           
  4275                           ;ADC.c: 71: ADCON1=0b10000011;
  4276  0048  3083               	movlw	131
  4277  0049  0021               	movlb	1	; select bank1
  4278  004A  009E               	movwf	30	;volatile
  4279                           
  4280                           ;ADC.c: 72: ADCON0=0b00000101;
  4281  004B  3005               	movlw	5
  4282  004C  009D               	movwf	29	;volatile
  4283                           
  4284                           ;ADC.c: 73: adc_ch=ADC_CH_BATT;
  4285  004D  0020               	movlb	0	; select bank0
  4286  004E  01EC               	clrf	_adc_ch
  4287  004F  0AEC               	incf	_adc_ch,f
  4288                           
  4289                           ;ADC.c: 74: break;
  4290  0050  2A09               	goto	l3563
  4291  0051                     l3525:	
  4292                           ;ADC.c: 75: case ADC_CH_BATT:
  4293                           
  4294                           
  4295                           ;ADC.c: 77: if(cntSum==10)
  4296  0051  300A               	movlw	10
  4297  0052  065B               	xorwf	ADCConv@cntSum,w
  4298  0053  1D03               	btfss	3,2
  4299  0054  28C7               	goto	l3541
  4300                           
  4301                           ;ADC.c: 78: {
  4302                           ;ADC.c: 80: batt=sumBatt/10;
  4303  0055  300A               	movlw	10
  4304  0056  00F1               	movwf	___lwdiv@divisor
  4305  0057  3000               	movlw	0
  4306  0058  00F2               	movwf	___lwdiv@divisor+1
  4307  0059  085A               	movf	ADCConv@sumBatt+1,w
  4308  005A  00F4               	movwf	___lwdiv@dividend+1
  4309  005B  0859               	movf	ADCConv@sumBatt,w
  4310  005C  00F3               	movwf	___lwdiv@dividend
  4311  005D  318F  2755  3180   	fcall	___lwdiv
  4312  0060  0872               	movf	?___lwdiv+1,w
  4313  0061  0021               	movlb	1	; select bank1
  4314  0062  00A4               	movwf	(_batt+1)^(0+128)
  4315  0063  0871               	movf	?___lwdiv,w
  4316  0064  00A3               	movwf	_batt^(0+128)
  4317                           
  4318                           ;ADC.c: 84: battV=batt*1.024/1024*11;
  4319  0065  3000               	movlw	0
  4320  0066  0020               	movlb	0	; select bank0
  4321  0067  00B1               	movwf	___ftdiv@f2
  4322  0068  3080               	movlw	128
  4323  0069  00B2               	movwf	___ftdiv@f2+1
  4324  006A  3044               	movlw	68
  4325  006B  00B3               	movwf	___ftdiv@f2+2
  4326  006C  3012               	movlw	18
  4327  006D  00A1               	movwf	___ftmul@f1
  4328  006E  3083               	movlw	131
  4329  006F  00A2               	movwf	___ftmul@f1+1
  4330  0070  303F               	movlw	63
  4331  0071  00A3               	movwf	___ftmul@f1+2
  4332  0072  0021               	movlb	1	; select bank1
  4333  0073  0824               	movf	(_batt+1)^(0+128),w
  4334  0074  00FA               	movwf	___lwtoft@c+1
  4335  0075  0823               	movf	_batt^(0+128),w
  4336  0076  00F9               	movwf	___lwtoft@c
  4337  0077  318B  23D5  3180   	fcall	___lwtoft
  4338  007A  0879               	movf	?___lwtoft,w
  4339  007B  0020               	movlb	0	; select bank0
  4340  007C  00A4               	movwf	___ftmul@f2
  4341  007D  087A               	movf	?___lwtoft+1,w
  4342  007E  00A5               	movwf	___ftmul@f2+1
  4343  007F  087B               	movf	?___lwtoft+2,w
  4344  0080  00A6               	movwf	___ftmul@f2+2
  4345  0081  3184  24C4  3180   	fcall	___ftmul
  4346  0084  0020               	movlb	0	; select bank0
  4347  0085  0821               	movf	?___ftmul,w
  4348  0086  00B4               	movwf	___ftdiv@f1
  4349  0087  0822               	movf	?___ftmul+1,w
  4350  0088  00B5               	movwf	___ftdiv@f1+1
  4351  0089  0823               	movf	?___ftmul+2,w
  4352  008A  00B6               	movwf	___ftdiv@f1+2
  4353  008B  3185  2578  3180   	fcall	___ftdiv
  4354  008E  0020               	movlb	0	; select bank0
  4355  008F  0831               	movf	?___ftdiv,w
  4356  0090  00D2               	movwf	_ADCConv$1407
  4357  0091  0832               	movf	?___ftdiv+1,w
  4358  0092  00D3               	movwf	_ADCConv$1407+1
  4359  0093  0833               	movf	?___ftdiv+2,w
  4360  0094  00D4               	movwf	_ADCConv$1407+2
  4361                           
  4362                           ;ADC.c: 84: battV=batt*1.024/1024*11;
  4363  0095  3000               	movlw	0
  4364  0096  00A1               	movwf	___ftmul@f1
  4365  0097  3030               	movlw	48
  4366  0098  00A2               	movwf	___ftmul@f1+1
  4367  0099  3041               	movlw	65
  4368  009A  00A3               	movwf	___ftmul@f1+2
  4369  009B  0852               	movf	_ADCConv$1407,w
  4370  009C  00A4               	movwf	___ftmul@f2
  4371  009D  0853               	movf	_ADCConv$1407+1,w
  4372  009E  00A5               	movwf	___ftmul@f2+1
  4373  009F  0854               	movf	_ADCConv$1407+2,w
  4374  00A0  00A6               	movwf	___ftmul@f2+2
  4375  00A1  3184  24C4  3180   	fcall	___ftmul
  4376  00A4  0020               	movlb	0	; select bank0
  4377  00A5  0821               	movf	?___ftmul,w
  4378  00A6  0021               	movlb	1	; select bank1
  4379  00A7  00A0               	movwf	_battV^(0+128)
  4380  00A8  0020               	movlb	0	; select bank0
  4381  00A9  0822               	movf	?___ftmul+1,w
  4382  00AA  0021               	movlb	1	; select bank1
  4383  00AB  00A1               	movwf	(_battV+1)^(0+128)
  4384  00AC  0020               	movlb	0	; select bank0
  4385  00AD  0823               	movf	?___ftmul+2,w
  4386  00AE  0021               	movlb	1	; select bank1
  4387  00AF  00A2               	movwf	(_battV+2)^(0+128)
  4388                           
  4389                           ;ADC.c: 86: sumCurr=0;
  4390  00B0  3000               	movlw	0
  4391  00B1  0020               	movlb	0	; select bank0
  4392  00B2  00D8               	movwf	ADCConv@sumCurr+3
  4393  00B3  3000               	movlw	0
  4394  00B4  00D7               	movwf	ADCConv@sumCurr+2
  4395  00B5  3000               	movlw	0
  4396  00B6  00D6               	movwf	ADCConv@sumCurr+1
  4397  00B7  3000               	movlw	0
  4398  00B8  00D5               	movwf	ADCConv@sumCurr
  4399                           
  4400                           ;ADC.c: 88: cntSum=0;
  4401  00B9  01DB               	clrf	ADCConv@cntSum
  4402                           
  4403                           ;ADC.c: 90: LATAbits.LATA0=0;
  4404  00BA  0022               	movlb	2	; select bank2
  4405  00BB  100C               	bcf	12,0	;volatile
  4406                           
  4407                           ;ADC.c: 92: ADCON1=0b10000011;
  4408  00BC  3083               	movlw	131
  4409  00BD  0021               	movlb	1	; select bank1
  4410  00BE  009E               	movwf	30	;volatile
  4411                           
  4412                           ;ADC.c: 93: ADCON0=0b00001001;
  4413  00BF  3009               	movlw	9
  4414  00C0  009D               	movwf	29	;volatile
  4415                           
  4416                           ;ADC.c: 94: adc_ch=ADC_CH_CURR;
  4417  00C1  3002               	movlw	2
  4418  00C2  0020               	movlb	0	; select bank0
  4419  00C3  00C4               	movwf	??_ADCConv
  4420  00C4  0844               	movf	??_ADCConv,w
  4421  00C5  00EC               	movwf	_adc_ch
  4422                           
  4423                           ;ADC.c: 95: }
  4424  00C6  2A09               	goto	l3563
  4425  00C7                     l3541:	
  4426                           
  4427                           ;ADC.c: 96: else
  4428                           ;ADC.c: 97: {
  4429                           ;ADC.c: 99: sumBatt+=(ADRESH<<8|ADRESL);
  4430  00C7  0021               	movlb	1	; select bank1
  4431  00C8  081B               	movf	27,w	;volatile
  4432  00C9  0020               	movlb	0	; select bank0
  4433  00CA  07D9               	addwf	ADCConv@sumBatt,f
  4434  00CB  0021               	movlb	1	; select bank1
  4435  00CC  081C               	movf	28,w	;volatile
  4436  00CD  0020               	movlb	0	; select bank0
  4437  00CE  3DDA               	addwfc	ADCConv@sumBatt+1,f
  4438  00CF  29F8               	goto	l3557
  4439  00D0                     l3545:	
  4440                           ;ADC.c: 104: case ADC_CH_CURR:
  4441                           
  4442                           ;ADC.c: 102: }
  4443                           ;ADC.c: 103: break;
  4444                           
  4445                           ;ADC.c: 101: cntSum++;
  4446                           
  4447                           
  4448                           ;ADC.c: 106: if(cntSum==20)
  4449  00D0  3014               	movlw	20
  4450  00D1  065B               	xorwf	ADCConv@cntSum,w
  4451  00D2  1D03               	btfss	3,2
  4452  00D3  29BD               	goto	l3555
  4453                           
  4454                           ;ADC.c: 107: {
  4455                           ;ADC.c: 114: rmsCurr=(float)sumCurr;
  4456  00D4  0858               	movf	ADCConv@sumCurr+3,w
  4457  00D5  00A3               	movwf	___lltoft@c+3
  4458  00D6  0857               	movf	ADCConv@sumCurr+2,w
  4459  00D7  00A2               	movwf	___lltoft@c+2
  4460  00D8  0856               	movf	ADCConv@sumCurr+1,w
  4461  00D9  00A1               	movwf	___lltoft@c+1
  4462  00DA  0855               	movf	ADCConv@sumCurr,w
  4463  00DB  00A0               	movwf	___lltoft@c
  4464  00DC  318E  266F  3180   	fcall	___lltoft
  4465  00DF  0020               	movlb	0	; select bank0
  4466  00E0  0820               	movf	?___lltoft,w
  4467  00E1  00E9               	movwf	_rmsCurr
  4468  00E2  0821               	movf	?___lltoft+1,w
  4469  00E3  00EA               	movwf	_rmsCurr+1
  4470  00E4  0822               	movf	?___lltoft+2,w
  4471  00E5  00EB               	movwf	_rmsCurr+2
  4472                           
  4473                           ;ADC.c: 115: rmsCurr*=(float)1.024;
  4474  00E6  3012               	movlw	18
  4475  00E7  00A1               	movwf	___ftmul@f1
  4476  00E8  3083               	movlw	131
  4477  00E9  00A2               	movwf	___ftmul@f1+1
  4478  00EA  303F               	movlw	63
  4479  00EB  00A3               	movwf	___ftmul@f1+2
  4480  00EC  0869               	movf	_rmsCurr,w
  4481  00ED  00A4               	movwf	___ftmul@f2
  4482  00EE  086A               	movf	_rmsCurr+1,w
  4483  00EF  00A5               	movwf	___ftmul@f2+1
  4484  00F0  086B               	movf	_rmsCurr+2,w
  4485  00F1  00A6               	movwf	___ftmul@f2+2
  4486  00F2  3184  24C4  3180   	fcall	___ftmul
  4487  00F5  0020               	movlb	0	; select bank0
  4488  00F6  0821               	movf	?___ftmul,w
  4489  00F7  00E9               	movwf	_rmsCurr
  4490  00F8  0822               	movf	?___ftmul+1,w
  4491  00F9  00EA               	movwf	_rmsCurr+1
  4492  00FA  0823               	movf	?___ftmul+2,w
  4493  00FB  00EB               	movwf	_rmsCurr+2
  4494                           
  4495                           ;ADC.c: 116: rmsCurr*=(float)1.024;
  4496  00FC  3012               	movlw	18
  4497  00FD  00A1               	movwf	___ftmul@f1
  4498  00FE  3083               	movlw	131
  4499  00FF  00A2               	movwf	___ftmul@f1+1
  4500  0100  303F               	movlw	63
  4501  0101  00A3               	movwf	___ftmul@f1+2
  4502  0102  0869               	movf	_rmsCurr,w
  4503  0103  00A4               	movwf	___ftmul@f2
  4504  0104  086A               	movf	_rmsCurr+1,w
  4505  0105  00A5               	movwf	___ftmul@f2+1
  4506  0106  086B               	movf	_rmsCurr+2,w
  4507  0107  00A6               	movwf	___ftmul@f2+2
  4508  0108  3184  24C4  3180   	fcall	___ftmul
  4509  010B  0020               	movlb	0	; select bank0
  4510  010C  0821               	movf	?___ftmul,w
  4511  010D  00E9               	movwf	_rmsCurr
  4512  010E  0822               	movf	?___ftmul+1,w
  4513  010F  00EA               	movwf	_rmsCurr+1
  4514  0110  0823               	movf	?___ftmul+2,w
  4515  0111  00EB               	movwf	_rmsCurr+2
  4516                           
  4517                           ;ADC.c: 117: rmsCurr*=(float)2000;
  4518  0112  3000               	movlw	0
  4519  0113  00A1               	movwf	___ftmul@f1
  4520  0114  30FA               	movlw	250
  4521  0115  00A2               	movwf	___ftmul@f1+1
  4522  0116  3044               	movlw	68
  4523  0117  00A3               	movwf	___ftmul@f1+2
  4524  0118  0869               	movf	_rmsCurr,w
  4525  0119  00A4               	movwf	___ftmul@f2
  4526  011A  086A               	movf	_rmsCurr+1,w
  4527  011B  00A5               	movwf	___ftmul@f2+1
  4528  011C  086B               	movf	_rmsCurr+2,w
  4529  011D  00A6               	movwf	___ftmul@f2+2
  4530  011E  3184  24C4  3180   	fcall	___ftmul
  4531  0121  0020               	movlb	0	; select bank0
  4532  0122  0821               	movf	?___ftmul,w
  4533  0123  00E9               	movwf	_rmsCurr
  4534  0124  0822               	movf	?___ftmul+1,w
  4535  0125  00EA               	movwf	_rmsCurr+1
  4536  0126  0823               	movf	?___ftmul+2,w
  4537  0127  00EB               	movwf	_rmsCurr+2
  4538                           
  4539                           ;ADC.c: 118: rmsCurr*=(float)2000;
  4540  0128  3000               	movlw	0
  4541  0129  00A1               	movwf	___ftmul@f1
  4542  012A  30FA               	movlw	250
  4543  012B  00A2               	movwf	___ftmul@f1+1
  4544  012C  3044               	movlw	68
  4545  012D  00A3               	movwf	___ftmul@f1+2
  4546  012E  0869               	movf	_rmsCurr,w
  4547  012F  00A4               	movwf	___ftmul@f2
  4548  0130  086A               	movf	_rmsCurr+1,w
  4549  0131  00A5               	movwf	___ftmul@f2+1
  4550  0132  086B               	movf	_rmsCurr+2,w
  4551  0133  00A6               	movwf	___ftmul@f2+2
  4552  0134  3184  24C4  3180   	fcall	___ftmul
  4553  0137  0020               	movlb	0	; select bank0
  4554  0138  0821               	movf	?___ftmul,w
  4555  0139  00E9               	movwf	_rmsCurr
  4556  013A  0822               	movf	?___ftmul+1,w
  4557  013B  00EA               	movwf	_rmsCurr+1
  4558  013C  0823               	movf	?___ftmul+2,w
  4559  013D  00EB               	movwf	_rmsCurr+2
  4560                           
  4561                           ;ADC.c: 119: rmsCurr/=(float)1024;
  4562  013E  3000               	movlw	0
  4563  013F  00B1               	movwf	___ftdiv@f2
  4564  0140  3080               	movlw	128
  4565  0141  00B2               	movwf	___ftdiv@f2+1
  4566  0142  3044               	movlw	68
  4567  0143  00B3               	movwf	___ftdiv@f2+2
  4568  0144  0869               	movf	_rmsCurr,w
  4569  0145  00B4               	movwf	___ftdiv@f1
  4570  0146  086A               	movf	_rmsCurr+1,w
  4571  0147  00B5               	movwf	___ftdiv@f1+1
  4572  0148  086B               	movf	_rmsCurr+2,w
  4573  0149  00B6               	movwf	___ftdiv@f1+2
  4574  014A  3185  2578  3180   	fcall	___ftdiv
  4575  014D  0020               	movlb	0	; select bank0
  4576  014E  0831               	movf	?___ftdiv,w
  4577  014F  00E9               	movwf	_rmsCurr
  4578  0150  0832               	movf	?___ftdiv+1,w
  4579  0151  00EA               	movwf	_rmsCurr+1
  4580  0152  0833               	movf	?___ftdiv+2,w
  4581  0153  00EB               	movwf	_rmsCurr+2
  4582                           
  4583                           ;ADC.c: 120: rmsCurr/=(float)1024;
  4584  0154  3000               	movlw	0
  4585  0155  00B1               	movwf	___ftdiv@f2
  4586  0156  3080               	movlw	128
  4587  0157  00B2               	movwf	___ftdiv@f2+1
  4588  0158  3044               	movlw	68
  4589  0159  00B3               	movwf	___ftdiv@f2+2
  4590  015A  0869               	movf	_rmsCurr,w
  4591  015B  00B4               	movwf	___ftdiv@f1
  4592  015C  086A               	movf	_rmsCurr+1,w
  4593  015D  00B5               	movwf	___ftdiv@f1+1
  4594  015E  086B               	movf	_rmsCurr+2,w
  4595  015F  00B6               	movwf	___ftdiv@f1+2
  4596  0160  3185  2578  3180   	fcall	___ftdiv
  4597  0163  0020               	movlb	0	; select bank0
  4598  0164  0831               	movf	?___ftdiv,w
  4599  0165  00E9               	movwf	_rmsCurr
  4600  0166  0832               	movf	?___ftdiv+1,w
  4601  0167  00EA               	movwf	_rmsCurr+1
  4602  0168  0833               	movf	?___ftdiv+2,w
  4603  0169  00EB               	movwf	_rmsCurr+2
  4604                           
  4605                           ;ADC.c: 121: rmsCurr/=(float)33;
  4606  016A  3000               	movlw	0
  4607  016B  00B1               	movwf	___ftdiv@f2
  4608  016C  3004               	movlw	4
  4609  016D  00B2               	movwf	___ftdiv@f2+1
  4610  016E  3042               	movlw	66
  4611  016F  00B3               	movwf	___ftdiv@f2+2
  4612  0170  0869               	movf	_rmsCurr,w
  4613  0171  00B4               	movwf	___ftdiv@f1
  4614  0172  086A               	movf	_rmsCurr+1,w
  4615  0173  00B5               	movwf	___ftdiv@f1+1
  4616  0174  086B               	movf	_rmsCurr+2,w
  4617  0175  00B6               	movwf	___ftdiv@f1+2
  4618  0176  3185  2578  3180   	fcall	___ftdiv
  4619  0179  0020               	movlb	0	; select bank0
  4620  017A  0831               	movf	?___ftdiv,w
  4621  017B  00E9               	movwf	_rmsCurr
  4622  017C  0832               	movf	?___ftdiv+1,w
  4623  017D  00EA               	movwf	_rmsCurr+1
  4624  017E  0833               	movf	?___ftdiv+2,w
  4625  017F  00EB               	movwf	_rmsCurr+2
  4626                           
  4627                           ;ADC.c: 122: rmsCurr/=(float)33;
  4628  0180  3000               	movlw	0
  4629  0181  00B1               	movwf	___ftdiv@f2
  4630  0182  3004               	movlw	4
  4631  0183  00B2               	movwf	___ftdiv@f2+1
  4632  0184  3042               	movlw	66
  4633  0185  00B3               	movwf	___ftdiv@f2+2
  4634  0186  0869               	movf	_rmsCurr,w
  4635  0187  00B4               	movwf	___ftdiv@f1
  4636  0188  086A               	movf	_rmsCurr+1,w
  4637  0189  00B5               	movwf	___ftdiv@f1+1
  4638  018A  086B               	movf	_rmsCurr+2,w
  4639  018B  00B6               	movwf	___ftdiv@f1+2
  4640  018C  3185  2578  3180   	fcall	___ftdiv
  4641  018F  0020               	movlb	0	; select bank0
  4642  0190  0831               	movf	?___ftdiv,w
  4643  0191  00E9               	movwf	_rmsCurr
  4644  0192  0832               	movf	?___ftdiv+1,w
  4645  0193  00EA               	movwf	_rmsCurr+1
  4646  0194  0833               	movf	?___ftdiv+2,w
  4647  0195  00EB               	movwf	_rmsCurr+2
  4648                           
  4649                           ;ADC.c: 123: rmsCurr/=(float)20;
  4650  0196  3000               	movlw	0
  4651  0197  00B1               	movwf	___ftdiv@f2
  4652  0198  30A0               	movlw	160
  4653  0199  00B2               	movwf	___ftdiv@f2+1
  4654  019A  3041               	movlw	65
  4655  019B  00B3               	movwf	___ftdiv@f2+2
  4656  019C  0869               	movf	_rmsCurr,w
  4657  019D  00B4               	movwf	___ftdiv@f1
  4658  019E  086A               	movf	_rmsCurr+1,w
  4659  019F  00B5               	movwf	___ftdiv@f1+1
  4660  01A0  086B               	movf	_rmsCurr+2,w
  4661  01A1  00B6               	movwf	___ftdiv@f1+2
  4662  01A2  3185  2578  3180   	fcall	___ftdiv
  4663  01A5  0020               	movlb	0	; select bank0
  4664  01A6  0831               	movf	?___ftdiv,w
  4665  01A7  00E9               	movwf	_rmsCurr
  4666  01A8  0832               	movf	?___ftdiv+1,w
  4667  01A9  00EA               	movwf	_rmsCurr+1
  4668  01AA  0833               	movf	?___ftdiv+2,w
  4669  01AB  00EB               	movwf	_rmsCurr+2
  4670                           
  4671                           ;ADC.c: 124: rmsCurr=sqrt(rmsCurr);
  4672  01AC  0869               	movf	_rmsCurr,w
  4673  01AD  00B1               	movwf	sqrt@y
  4674  01AE  086A               	movf	_rmsCurr+1,w
  4675  01AF  00B2               	movwf	sqrt@y+1
  4676  01B0  086B               	movf	_rmsCurr+2,w
  4677  01B1  00B3               	movwf	sqrt@y+2
  4678  01B2  3183  2318         	fcall	_sqrt
  4679  01B4  0020               	movlb	0	; select bank0
  4680  01B5  0831               	movf	?_sqrt,w
  4681  01B6  00E9               	movwf	_rmsCurr
  4682  01B7  0832               	movf	?_sqrt+1,w
  4683  01B8  00EA               	movwf	_rmsCurr+1
  4684  01B9  0833               	movf	?_sqrt+2,w
  4685  01BA  00EB               	movwf	_rmsCurr+2
  4686                           
  4687                           ;ADC.c: 126: adc_ch=ADC_CH_OFF;
  4688  01BB  01EC               	clrf	_adc_ch
  4689                           
  4690                           ;ADC.c: 127: return;
  4691  01BC  0008               	return
  4692  01BD                     l3555:	
  4693                           ;ADC.c: 128: }
  4694                           
  4695                           
  4696                           ;ADC.c: 129: else
  4697                           ;ADC.c: 130: {
  4698                           ;ADC.c: 132: sumCurr+=((ADRESH<<8|ADRESL)*(ADRESH<<8|ADRESL));
  4699  01BD  0021               	movlb	1	; select bank1
  4700  01BE  081B               	movf	27,w	;volatile
  4701  01BF  0020               	movlb	0	; select bank0
  4702  01C0  00C4               	movwf	??_ADCConv
  4703  01C1  01C5               	clrf	??_ADCConv+1
  4704  01C2  0021               	movlb	1	; select bank1
  4705  01C3  081C               	movf	28,w	;volatile
  4706  01C4  0020               	movlb	0	; select bank0
  4707  01C5  00C6               	movwf	??_ADCConv+2
  4708  01C6  01C7               	clrf	??_ADCConv+3
  4709  01C7  0846               	movf	??_ADCConv+2,w
  4710  01C8  00C7               	movwf	??_ADCConv+3
  4711  01C9  01C6               	clrf	??_ADCConv+2
  4712  01CA  0844               	movf	??_ADCConv,w
  4713  01CB  0446               	iorwf	??_ADCConv+2,w
  4714  01CC  00F1               	movwf	___wmul@multiplier
  4715  01CD  0845               	movf	??_ADCConv+1,w
  4716  01CE  0447               	iorwf	??_ADCConv+3,w
  4717  01CF  00F2               	movwf	___wmul@multiplier+1
  4718  01D0  0021               	movlb	1	; select bank1
  4719  01D1  081B               	movf	27,w	;volatile
  4720  01D2  0020               	movlb	0	; select bank0
  4721  01D3  00C9               	movwf	??_ADCConv+5
  4722  01D4  01CA               	clrf	??_ADCConv+6
  4723  01D5  0021               	movlb	1	; select bank1
  4724  01D6  081C               	movf	28,w	;volatile
  4725  01D7  0020               	movlb	0	; select bank0
  4726  01D8  00CB               	movwf	??_ADCConv+7
  4727  01D9  01CC               	clrf	??_ADCConv+8
  4728  01DA  084B               	movf	??_ADCConv+7,w
  4729  01DB  00CC               	movwf	??_ADCConv+8
  4730  01DC  01CB               	clrf	??_ADCConv+7
  4731  01DD  0849               	movf	??_ADCConv+5,w
  4732  01DE  044B               	iorwf	??_ADCConv+7,w
  4733  01DF  00F3               	movwf	___wmul@multiplicand
  4734  01E0  084A               	movf	??_ADCConv+6,w
  4735  01E1  044C               	iorwf	??_ADCConv+8,w
  4736  01E2  00F4               	movwf	___wmul@multiplicand+1
  4737  01E3  318C  2461  3180   	fcall	___wmul
  4738  01E6  0871               	movf	?___wmul,w
  4739  01E7  0020               	movlb	0	; select bank0
  4740  01E8  00CE               	movwf	??_ADCConv+10
  4741  01E9  0872               	movf	?___wmul+1,w
  4742  01EA  00CF               	movwf	??_ADCConv+11
  4743  01EB  3000               	movlw	0
  4744  01EC  1BCF               	btfsc	??_ADCConv+11,7
  4745  01ED  30FF               	movlw	255
  4746  01EE  00D0               	movwf	??_ADCConv+12
  4747  01EF  00D1               	movwf	??_ADCConv+13
  4748  01F0  084E               	movf	??_ADCConv+10,w
  4749  01F1  07D5               	addwf	ADCConv@sumCurr,f
  4750  01F2  084F               	movf	??_ADCConv+11,w
  4751  01F3  3DD6               	addwfc	ADCConv@sumCurr+1,f
  4752  01F4  0850               	movf	??_ADCConv+12,w
  4753  01F5  3DD7               	addwfc	ADCConv@sumCurr+2,f
  4754  01F6  0851               	movf	??_ADCConv+13,w
  4755  01F7  3DD8               	addwfc	ADCConv@sumCurr+3,f
  4756  01F8                     l3557:	
  4757                           
  4758                           ;ADC.c: 134: cntSum++;
  4759  01F8  3001               	movlw	1
  4760  01F9  00C4               	movwf	??_ADCConv
  4761  01FA  0844               	movf	??_ADCConv,w
  4762  01FB  07DB               	addwf	ADCConv@cntSum,f
  4763                           
  4764                           ;ADC.c: 137: }
  4765                           
  4766                           ;ADC.c: 135: }
  4767                           ;ADC.c: 136: break;
  4768  01FC  2A09               	goto	l3563
  4769  01FD                     l3561:	
  4770  01FD  0020               	movlb	0	; select bank0
  4771  01FE  086C               	movf	_adc_ch,w
  4772                           
  4773                           ; Switch size 1, requested type "space"
  4774                           ; Number of cases is 3, Range of values is 0 to 2
  4775                           ; switch strategies available:
  4776                           ; Name         Instructions Cycles
  4777                           ; simple_byte           10     6 (average)
  4778                           ; direct_byte           12     6 (fixed)
  4779                           ; jumptable            260     6 (fixed)
  4780                           ;	Chosen strategy is simple_byte
  4781  01FF  3A00               	xorlw	0	; case 0
  4782  0200  1903               	skipnz
  4783  0201  2842               	goto	l124
  4784  0202  3A01               	xorlw	1	; case 1
  4785  0203  1903               	skipnz
  4786  0204  2851               	goto	l3525
  4787  0205  3A03               	xorlw	3	; case 2
  4788  0206  1903               	skipnz
  4789  0207  28D0               	goto	l3545
  4790  0208  2A09               	goto	l3563
  4791  0209                     l3563:	
  4792                           
  4793                           ;ADC.c: 139: _delay((unsigned long)((10)*(8000000/4000000.0)));
  4794  0209  3006               	movlw	6
  4795  020A  00C4               	movwf	??_ADCConv
  4796  020B                     u4057:	
  4797  020B  0BC4               	decfsz	??_ADCConv,f
  4798  020C  2A0B               	goto	u4057
  4799  020D  0000               	nop
  4800                           
  4801                           ;ADC.c: 141: ADCON0bits.GO=1;
  4802  020E  0021               	movlb	1	; select bank1
  4803  020F  149D               	bsf	29,1	;volatile
  4804  0210                     l133:	
  4805                           ;ADC.c: 143: while(ADCON0bits.GO)
  4806                           
  4807  0210  0021               	movlb	1	; select bank1
  4808  0211  1C9D               	btfss	29,1	;volatile
  4809  0212  2A15               	goto	l3567
  4810  0213  0064               	clrwdt	;# 
  4811  0214  2A10               	goto	l133
  4812  0215                     l3567:	
  4813                           
  4814                           ;ADC.c: 146: if(adc_ch==ADC_CH_CURR)
  4815  0215  3002               	movlw	2
  4816  0216  0020               	movlb	0	; select bank0
  4817  0217  066C               	xorwf	_adc_ch,w
  4818  0218  1D03               	btfss	3,2
  4819  0219  29FD               	goto	l3561
  4820                           
  4821                           ;ADC.c: 147: DLYDelay_ms(8);
  4822  021A  3008               	movlw	8
  4823  021B  00F1               	movwf	DLYDelay_ms@val
  4824  021C  3000               	movlw	0
  4825  021D  00F2               	movwf	DLYDelay_ms@val+1
  4826  021E  318C  242E  3180   	fcall	_DLYDelay_ms
  4827  0221  29FD               	goto	l3561
  4828  0222                     __end_of_ADCConv:	
  4829                           
  4830                           	psect	text16
  4831  0318                     __ptext16:	
  4832 ;; *************** function _sqrt *****************
  4833 ;; Defined at:
  4834 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\sqrt.c"
  4835 ;; Parameters:    Size  Location     Type
  4836 ;;  y               3   17[BANK0 ] unsigned char 
  4837 ;; Auto vars:     Size  Location     Type
  4838 ;;  x               3   33[BANK0 ] unsigned char 
  4839 ;;  q               3   30[BANK0 ] unsigned char 
  4840 ;;  z               3   26[BANK0 ] unsigned char 
  4841 ;;  og              3   23[BANK0 ] unsigned char 
  4842 ;;  i               1   29[BANK0 ] unsigned char 
  4843 ;; Return value:  Size  Location     Type
  4844 ;;                  3   17[BANK0 ] unsigned char 
  4845 ;; Registers used:
  4846 ;;		wreg, status,2, status,0, pclath, cstack
  4847 ;; Tracked objects:
  4848 ;;		On entry : 0/0
  4849 ;;		On exit  : 0/0
  4850 ;;		Unchanged: 0/0
  4851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4852 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4853 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4854 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4855 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4856 ;;Total ram usage:       19 bytes
  4857 ;; Hardware stack levels used:    1
  4858 ;; Hardware stack levels required when called:    5
  4859 ;; This function calls:
  4860 ;;		___ftge
  4861 ;;		___ftmul
  4862 ;;		___ftsub
  4863 ;; This function is called by:
  4864 ;;		_ADCConv
  4865 ;; This function uses a non-reentrant model
  4866 ;;
  4867                           
  4868                           
  4869                           ;psect for function _sqrt
  4870  0318                     _sqrt:	
  4871                           
  4872                           ;incstack = 0
  4873                           ; Regs used in _sqrt: [wreg+status,2+status,0+pclath+cstack]
  4874  0318  3000               	movlw	0
  4875  0319  00F1               	movwf	___ftge@ff1
  4876  031A  3000               	movlw	0
  4877  031B  00F2               	movwf	___ftge@ff1+1
  4878  031C  3000               	movlw	0
  4879  031D  00F3               	movwf	___ftge@ff1+2
  4880  031E  0020               	movlb	0	; select bank0
  4881  031F  0831               	movf	sqrt@y,w
  4882  0320  00F4               	movwf	___ftge@ff2
  4883  0321  0832               	movf	sqrt@y+1,w
  4884  0322  00F5               	movwf	___ftge@ff2+1
  4885  0323  0833               	movf	sqrt@y+2,w
  4886  0324  00F6               	movwf	___ftge@ff2+2
  4887  0325  318F  2789  3183   	fcall	___ftge
  4888  0328  1C03               	btfss	3,0
  4889  0329  2B49               	goto	l3421
  4890  032A  0020               	movlb	0	; select bank0
  4891  032B  0831               	movf	sqrt@y,w
  4892  032C  00F1               	movwf	___ftge@ff1
  4893  032D  0832               	movf	sqrt@y+1,w
  4894  032E  00F2               	movwf	___ftge@ff1+1
  4895  032F  0833               	movf	sqrt@y+2,w
  4896  0330  00F3               	movwf	___ftge@ff1+2
  4897  0331  3000               	movlw	0
  4898  0332  00F4               	movwf	___ftge@ff2
  4899  0333  3000               	movlw	0
  4900  0334  00F5               	movwf	___ftge@ff2+1
  4901  0335  3000               	movlw	0
  4902  0336  00F6               	movwf	___ftge@ff2+2
  4903  0337  318F  2789  3183   	fcall	___ftge
  4904  033A  1803               	btfsc	3,0
  4905  033B  2B41               	goto	l1044
  4906  033C  3021               	movlw	33
  4907  033D  0021               	movlb	1	; select bank1
  4908  033E  00A5               	movwf	_errno^(0+128)
  4909  033F  3000               	movlw	0
  4910  0340  00A6               	movwf	(_errno^(0+128)+1)
  4911  0341                     l1044:	
  4912  0341  3000               	movlw	0
  4913  0342  0020               	movlb	0	; select bank0
  4914  0343  00B1               	movwf	?_sqrt
  4915  0344  3000               	movlw	0
  4916  0345  00B2               	movwf	?_sqrt+1
  4917  0346  3000               	movlw	0
  4918  0347  00B3               	movwf	?_sqrt+2
  4919  0348  0008               	return
  4920  0349                     l3421:	
  4921  0349  0020               	movlb	0	; select bank0
  4922  034A  0831               	movf	sqrt@y,w
  4923  034B  00BA               	movwf	sqrt@z
  4924  034C  0832               	movf	sqrt@y+1,w
  4925  034D  00BB               	movwf	sqrt@z+1
  4926  034E  0833               	movf	sqrt@y+2,w
  4927  034F  00BC               	movwf	sqrt@z+2
  4928  0350  0931               	comf	sqrt@y,w
  4929  0351  00B4               	movwf	??_sqrt
  4930  0352  0932               	comf	sqrt@y+1,w
  4931  0353  00B5               	movwf	??_sqrt+1
  4932  0354  0933               	comf	sqrt@y+2,w
  4933  0355  00B6               	movwf	??_sqrt+2
  4934  0356  0AB4               	incf	??_sqrt,f
  4935  0357  1903               	skipnz
  4936  0358  0AB5               	incf	??_sqrt+1,f
  4937  0359  1903               	skipnz
  4938  035A  0AB6               	incf	??_sqrt+2,f
  4939  035B  30C8               	movlw	200
  4940  035C  0734               	addwf	??_sqrt,w
  4941  035D  00C1               	movwf	sqrt@x
  4942  035E  306E               	movlw	110
  4943  035F  3D35               	addwfc	??_sqrt+1,w
  4944  0360  00C2               	movwf	sqrt@x+1
  4945  0361  30BE               	movlw	190
  4946  0362  3D36               	addwfc	??_sqrt+2,w
  4947  0363  00C3               	movwf	sqrt@x+2
  4948  0364  3001               	movlw	1
  4949  0365                     u3535:	
  4950  0365  36C3               	lsrf	sqrt@x+2,f
  4951  0366  0CC2               	rrf	sqrt@x+1,f
  4952  0367  0CC1               	rrf	sqrt@x,f
  4953  0368  0B89               	decfsz	9,f
  4954  0369  2B65               	goto	u3535
  4955  036A  3000               	movlw	0
  4956  036B  00B4               	movwf	??_sqrt
  4957  036C  3080               	movlw	128
  4958  036D  00B5               	movwf	??_sqrt+1
  4959  036E  3000               	movlw	0
  4960  036F  00B6               	movwf	??_sqrt+2
  4961  0370  0834               	movf	??_sqrt,w
  4962  0371  02BA               	subwf	sqrt@z,f
  4963  0372  0835               	movf	??_sqrt+1,w
  4964  0373  3BBB               	subwfb	sqrt@z+1,f
  4965  0374  0836               	movf	??_sqrt+2,w
  4966  0375  3BBC               	subwfb	sqrt@z+2,f
  4967  0376  3004               	movlw	4
  4968  0377  00B4               	movwf	??_sqrt
  4969  0378  0834               	movf	??_sqrt,w
  4970  0379  00BD               	movwf	sqrt@i
  4971  037A                     l1046:	
  4972  037A  0841               	movf	sqrt@x,w
  4973  037B  00B7               	movwf	sqrt@og
  4974  037C  0842               	movf	sqrt@x+1,w
  4975  037D  00B8               	movwf	sqrt@og+1
  4976  037E  0843               	movf	sqrt@x+2,w
  4977  037F  00B9               	movwf	sqrt@og+2
  4978  0380  083A               	movf	sqrt@z,w
  4979  0381  00A1               	movwf	___ftmul@f1
  4980  0382  083B               	movf	sqrt@z+1,w
  4981  0383  00A2               	movwf	___ftmul@f1+1
  4982  0384  083C               	movf	sqrt@z+2,w
  4983  0385  00A3               	movwf	___ftmul@f1+2
  4984  0386  0841               	movf	sqrt@x,w
  4985  0387  00A4               	movwf	___ftmul@f2
  4986  0388  0842               	movf	sqrt@x+1,w
  4987  0389  00A5               	movwf	___ftmul@f2+1
  4988  038A  0843               	movf	sqrt@x+2,w
  4989  038B  00A6               	movwf	___ftmul@f2+2
  4990  038C  3184  24C4  3183   	fcall	___ftmul
  4991  038F  0020               	movlb	0	; select bank0
  4992  0390  0821               	movf	?___ftmul,w
  4993  0391  00BE               	movwf	sqrt@q
  4994  0392  0822               	movf	?___ftmul+1,w
  4995  0393  00BF               	movwf	sqrt@q+1
  4996  0394  0823               	movf	?___ftmul+2,w
  4997  0395  00C0               	movwf	sqrt@q+2
  4998  0396  0841               	movf	sqrt@x,w
  4999  0397  00A1               	movwf	___ftmul@f1
  5000  0398  0842               	movf	sqrt@x+1,w
  5001  0399  00A2               	movwf	___ftmul@f1+1
  5002  039A  0843               	movf	sqrt@x+2,w
  5003  039B  00A3               	movwf	___ftmul@f1+2
  5004  039C  083E               	movf	sqrt@q,w
  5005  039D  00A4               	movwf	___ftmul@f2
  5006  039E  083F               	movf	sqrt@q+1,w
  5007  039F  00A5               	movwf	___ftmul@f2+1
  5008  03A0  0840               	movf	sqrt@q+2,w
  5009  03A1  00A6               	movwf	___ftmul@f2+2
  5010  03A2  3184  24C4  3183   	fcall	___ftmul
  5011  03A5  0020               	movlb	0	; select bank0
  5012  03A6  0821               	movf	?___ftmul,w
  5013  03A7  00BE               	movwf	sqrt@q
  5014  03A8  0822               	movf	?___ftmul+1,w
  5015  03A9  00BF               	movwf	sqrt@q+1
  5016  03AA  0823               	movf	?___ftmul+2,w
  5017  03AB  00C0               	movwf	sqrt@q+2
  5018  03AC  0841               	movf	sqrt@x,w
  5019  03AD  00A1               	movwf	___ftmul@f1
  5020  03AE  0842               	movf	sqrt@x+1,w
  5021  03AF  00A2               	movwf	___ftmul@f1+1
  5022  03B0  0843               	movf	sqrt@x+2,w
  5023  03B1  00A3               	movwf	___ftmul@f1+2
  5024  03B2  083E               	movf	sqrt@q,w
  5025  03B3  00A4               	movwf	___ftmul@f2
  5026  03B4  083F               	movf	sqrt@q+1,w
  5027  03B5  00A5               	movwf	___ftmul@f2+1
  5028  03B6  0840               	movf	sqrt@q+2,w
  5029  03B7  00A6               	movwf	___ftmul@f2+2
  5030  03B8  3184  24C4  3183   	fcall	___ftmul
  5031  03BB  0020               	movlb	0	; select bank0
  5032  03BC  0821               	movf	?___ftmul,w
  5033  03BD  00BE               	movwf	sqrt@q
  5034  03BE  0822               	movf	?___ftmul+1,w
  5035  03BF  00BF               	movwf	sqrt@q+1
  5036  03C0  0823               	movf	?___ftmul+2,w
  5037  03C1  00C0               	movwf	sqrt@q+2
  5038  03C2  3000               	movlw	0
  5039  03C3  00A1               	movwf	___ftmul@f1
  5040  03C4  30C0               	movlw	192
  5041  03C5  00A2               	movwf	___ftmul@f1+1
  5042  03C6  303F               	movlw	63
  5043  03C7  00A3               	movwf	___ftmul@f1+2
  5044  03C8  0841               	movf	sqrt@x,w
  5045  03C9  00A4               	movwf	___ftmul@f2
  5046  03CA  0842               	movf	sqrt@x+1,w
  5047  03CB  00A5               	movwf	___ftmul@f2+1
  5048  03CC  0843               	movf	sqrt@x+2,w
  5049  03CD  00A6               	movwf	___ftmul@f2+2
  5050  03CE  3184  24C4  3183   	fcall	___ftmul
  5051  03D1  0020               	movlb	0	; select bank0
  5052  03D2  0821               	movf	?___ftmul,w
  5053  03D3  00C1               	movwf	sqrt@x
  5054  03D4  0822               	movf	?___ftmul+1,w
  5055  03D5  00C2               	movwf	sqrt@x+1
  5056  03D6  0823               	movf	?___ftmul+2,w
  5057  03D7  00C3               	movwf	sqrt@x+2
  5058  03D8  083E               	movf	sqrt@q,w
  5059  03D9  00AA               	movwf	___ftsub@f2
  5060  03DA  083F               	movf	sqrt@q+1,w
  5061  03DB  00AB               	movwf	___ftsub@f2+1
  5062  03DC  0840               	movf	sqrt@q+2,w
  5063  03DD  00AC               	movwf	___ftsub@f2+2
  5064  03DE  0841               	movf	sqrt@x,w
  5065  03DF  00AD               	movwf	___ftsub@f1
  5066  03E0  0842               	movf	sqrt@x+1,w
  5067  03E1  00AE               	movwf	___ftsub@f1+1
  5068  03E2  0843               	movf	sqrt@x+2,w
  5069  03E3  00AF               	movwf	___ftsub@f1+2
  5070  03E4  318D  250F  3183   	fcall	___ftsub
  5071  03E7  0020               	movlb	0	; select bank0
  5072  03E8  082A               	movf	?___ftsub,w
  5073  03E9  00C1               	movwf	sqrt@x
  5074  03EA  082B               	movf	?___ftsub+1,w
  5075  03EB  00C2               	movwf	sqrt@x+1
  5076  03EC  082C               	movf	?___ftsub+2,w
  5077  03ED  00C3               	movwf	sqrt@x+2
  5078  03EE  3001               	movlw	1
  5079  03EF  02BD               	subwf	sqrt@i,f
  5080  03F0  1D03               	btfss	3,2
  5081  03F1  2B7A               	goto	l1046
  5082  03F2  0831               	movf	sqrt@y,w
  5083  03F3  00A1               	movwf	___ftmul@f1
  5084  03F4  0832               	movf	sqrt@y+1,w
  5085  03F5  00A2               	movwf	___ftmul@f1+1
  5086  03F6  0833               	movf	sqrt@y+2,w
  5087  03F7  00A3               	movwf	___ftmul@f1+2
  5088  03F8  0841               	movf	sqrt@x,w
  5089  03F9  00A4               	movwf	___ftmul@f2
  5090  03FA  0842               	movf	sqrt@x+1,w
  5091  03FB  00A5               	movwf	___ftmul@f2+1
  5092  03FC  0843               	movf	sqrt@x+2,w
  5093  03FD  00A6               	movwf	___ftmul@f2+2
  5094  03FE  3184  24C4         	fcall	___ftmul
  5095  0400  0020               	movlb	0	; select bank0
  5096  0401  0821               	movf	?___ftmul,w
  5097  0402  00B1               	movwf	?_sqrt
  5098  0403  0822               	movf	?___ftmul+1,w
  5099  0404  00B2               	movwf	?_sqrt+1
  5100  0405  0823               	movf	?___ftmul+2,w
  5101  0406  00B3               	movwf	?_sqrt+2
  5102  0407  0008               	return
  5103  0408                     __end_of_sqrt:	
  5104                           
  5105                           	psect	text17
  5106  0D0F                     __ptext17:	
  5107 ;; *************** function ___ftsub *****************
  5108 ;; Defined at:
  5109 ;;		line 18 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftsub.c"
  5110 ;; Parameters:    Size  Location     Type
  5111 ;;  f2              3   10[BANK0 ] float 
  5112 ;;  f1              3   13[BANK0 ] float 
  5113 ;; Auto vars:     Size  Location     Type
  5114 ;;		None
  5115 ;; Return value:  Size  Location     Type
  5116 ;;                  3   10[BANK0 ] float 
  5117 ;; Registers used:
  5118 ;;		wreg, status,2, status,0, pclath, cstack
  5119 ;; Tracked objects:
  5120 ;;		On entry : 0/0
  5121 ;;		On exit  : 0/0
  5122 ;;		Unchanged: 0/0
  5123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5124 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5125 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5127 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5128 ;;Total ram usage:        6 bytes
  5129 ;; Hardware stack levels used:    1
  5130 ;; Hardware stack levels required when called:    4
  5131 ;; This function calls:
  5132 ;;		___ftadd
  5133 ;; This function is called by:
  5134 ;;		_sqrt
  5135 ;; This function uses a non-reentrant model
  5136 ;;
  5137                           
  5138                           
  5139                           ;psect for function ___ftsub
  5140  0D0F                     ___ftsub:	
  5141                           
  5142                           ;incstack = 0
  5143                           ; Regs used in ___ftsub: [wreg+status,2+status,0+pclath+cstack]
  5144  0D0F  0020               	movlb	0	; select bank0
  5145  0D10  082C               	movf	___ftsub@f2+2,w
  5146  0D11  042B               	iorwf	___ftsub@f2+1,w
  5147  0D12  042A               	iorwf	___ftsub@f2,w
  5148  0D13  1903               	skipnz
  5149  0D14  2D17               	goto	l3409
  5150  0D15  3080               	movlw	128
  5151  0D16  06AC               	xorwf	___ftsub@f2+2,f
  5152  0D17                     l3409:	
  5153  0D17  082D               	movf	___ftsub@f1,w
  5154  0D18  00A0               	movwf	___ftadd@f1
  5155  0D19  082E               	movf	___ftsub@f1+1,w
  5156  0D1A  00A1               	movwf	___ftadd@f1+1
  5157  0D1B  082F               	movf	___ftsub@f1+2,w
  5158  0D1C  00A2               	movwf	___ftadd@f1+2
  5159  0D1D  082A               	movf	___ftsub@f2,w
  5160  0D1E  00A3               	movwf	___ftadd@f2
  5161  0D1F  082B               	movf	___ftsub@f2+1,w
  5162  0D20  00A4               	movwf	___ftadd@f2+1
  5163  0D21  082C               	movf	___ftsub@f2+2,w
  5164  0D22  00A5               	movwf	___ftadd@f2+2
  5165  0D23  3182  2222         	fcall	___ftadd
  5166  0D25  0020               	movlb	0	; select bank0
  5167  0D26  0820               	movf	?___ftadd,w
  5168  0D27  00AA               	movwf	?___ftsub
  5169  0D28  0821               	movf	?___ftadd+1,w
  5170  0D29  00AB               	movwf	?___ftsub+1
  5171  0D2A  0822               	movf	?___ftadd+2,w
  5172  0D2B  00AC               	movwf	?___ftsub+2
  5173  0D2C  0008               	return
  5174  0D2D                     __end_of___ftsub:	
  5175                           
  5176                           	psect	text18
  5177  0222                     __ptext18:	
  5178 ;; *************** function ___ftadd *****************
  5179 ;; Defined at:
  5180 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftadd.c"
  5181 ;; Parameters:    Size  Location     Type
  5182 ;;  f1              3    0[BANK0 ] float 
  5183 ;;  f2              3    3[BANK0 ] float 
  5184 ;; Auto vars:     Size  Location     Type
  5185 ;;  exp1            1   11[COMMON] unsigned char 
  5186 ;;  exp2            1   10[COMMON] unsigned char 
  5187 ;;  sign            1    9[COMMON] unsigned char 
  5188 ;; Return value:  Size  Location     Type
  5189 ;;                  3    0[BANK0 ] float 
  5190 ;; Registers used:
  5191 ;;		wreg, status,2, status,0, pclath, cstack
  5192 ;; Tracked objects:
  5193 ;;		On entry : 0/0
  5194 ;;		On exit  : 0/0
  5195 ;;		Unchanged: 0/0
  5196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5197 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5198 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5199 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5200 ;;      Totals:         3      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5201 ;;Total ram usage:       13 bytes
  5202 ;; Hardware stack levels used:    1
  5203 ;; Hardware stack levels required when called:    3
  5204 ;; This function calls:
  5205 ;;		___ftpack
  5206 ;; This function is called by:
  5207 ;;		___ftsub
  5208 ;; This function uses a non-reentrant model
  5209 ;;
  5210                           
  5211                           
  5212                           ;psect for function ___ftadd
  5213  0222                     ___ftadd:	
  5214                           
  5215                           ;incstack = 0
  5216                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  5217  0222  0020               	movlb	0	; select bank0
  5218  0223  0820               	movf	___ftadd@f1,w
  5219  0224  00A6               	movwf	??___ftadd
  5220  0225  0821               	movf	___ftadd@f1+1,w
  5221  0226  00A7               	movwf	??___ftadd+1
  5222  0227  0822               	movf	___ftadd@f1+2,w
  5223  0228  00A8               	movwf	??___ftadd+2
  5224  0229  1003               	clrc
  5225  022A  0D27               	rlf	??___ftadd+1,w
  5226  022B  0D28               	rlf	??___ftadd+2,w
  5227  022C  00A9               	movwf	??___ftadd+3
  5228  022D  0829               	movf	??___ftadd+3,w
  5229  022E  00FB               	movwf	___ftadd@exp1
  5230  022F  0823               	movf	___ftadd@f2,w
  5231  0230  00A6               	movwf	??___ftadd
  5232  0231  0824               	movf	___ftadd@f2+1,w
  5233  0232  00A7               	movwf	??___ftadd+1
  5234  0233  0825               	movf	___ftadd@f2+2,w
  5235  0234  00A8               	movwf	??___ftadd+2
  5236  0235  1003               	clrc
  5237  0236  0D27               	rlf	??___ftadd+1,w
  5238  0237  0D28               	rlf	??___ftadd+2,w
  5239  0238  00A9               	movwf	??___ftadd+3
  5240  0239  0829               	movf	??___ftadd+3,w
  5241  023A  00FA               	movwf	___ftadd@exp2
  5242  023B  087B               	movf	___ftadd@exp1,w
  5243  023C  1903               	btfsc	3,2
  5244  023D  2A4A               	goto	l3259
  5245  023E  087A               	movf	___ftadd@exp2,w
  5246  023F  027B               	subwf	___ftadd@exp1,w
  5247  0240  1803               	skipnc
  5248  0241  2A51               	goto	l3263
  5249  0242  037B               	decf	___ftadd@exp1,w
  5250  0243  3AFF               	xorlw	255
  5251  0244  077A               	addwf	___ftadd@exp2,w
  5252  0245  00A6               	movwf	??___ftadd
  5253  0246  3019               	movlw	25
  5254  0247  0226               	subwf	??___ftadd,w
  5255  0248  1C03               	skipc
  5256  0249  2A51               	goto	l3263
  5257  024A                     l3259:	
  5258  024A  0823               	movf	___ftadd@f2,w
  5259  024B  00A0               	movwf	?___ftadd
  5260  024C  0824               	movf	___ftadd@f2+1,w
  5261  024D  00A1               	movwf	?___ftadd+1
  5262  024E  0825               	movf	___ftadd@f2+2,w
  5263  024F  00A2               	movwf	?___ftadd+2
  5264  0250  0008               	return
  5265  0251                     l3263:	
  5266  0251  087A               	movf	___ftadd@exp2,w
  5267  0252  1903               	btfsc	3,2
  5268  0253  0008               	return
  5269  0254  087B               	movf	___ftadd@exp1,w
  5270  0255  027A               	subwf	___ftadd@exp2,w
  5271  0256  1803               	skipnc
  5272  0257  2A60               	goto	l3269
  5273  0258  037A               	decf	___ftadd@exp2,w
  5274  0259  3AFF               	xorlw	255
  5275  025A  077B               	addwf	___ftadd@exp1,w
  5276  025B  00A6               	movwf	??___ftadd
  5277  025C  3019               	movlw	25
  5278  025D  0226               	subwf	??___ftadd,w
  5279  025E  1803               	btfsc	3,0
  5280  025F  0008               	return
  5281  0260                     l3269:	
  5282  0260  3006               	movlw	6
  5283  0261  00A6               	movwf	??___ftadd
  5284  0262  0826               	movf	??___ftadd,w
  5285  0263  00F9               	movwf	___ftadd@sign
  5286  0264  1BA2               	btfsc	___ftadd@f1+2,7
  5287  0265  17F9               	bsf	___ftadd@sign,7
  5288  0266  1BA5               	btfsc	___ftadd@f2+2,7
  5289  0267  1779               	bsf	___ftadd@sign,6
  5290  0268  17A1               	bsf	___ftadd@f1+1,7
  5291  0269  30FF               	movlw	255
  5292  026A  05A0               	andwf	___ftadd@f1,f
  5293  026B  30FF               	movlw	255
  5294  026C  05A1               	andwf	___ftadd@f1+1,f
  5295  026D  3000               	movlw	0
  5296  026E  05A2               	andwf	___ftadd@f1+2,f
  5297  026F  17A4               	bsf	___ftadd@f2+1,7
  5298  0270  30FF               	movlw	255
  5299  0271  05A3               	andwf	___ftadd@f2,f
  5300  0272  30FF               	movlw	255
  5301  0273  05A4               	andwf	___ftadd@f2+1,f
  5302  0274  3000               	movlw	0
  5303  0275  05A5               	andwf	___ftadd@f2+2,f
  5304  0276  087A               	movf	___ftadd@exp2,w
  5305  0277  027B               	subwf	___ftadd@exp1,w
  5306  0278  1803               	skipnc
  5307  0279  2A9C               	goto	l3291
  5308  027A                     l3281:	
  5309  027A  3001               	movlw	1
  5310  027B                     u3235:	
  5311  027B  35A3               	lslf	___ftadd@f2,f
  5312  027C  0DA4               	rlf	___ftadd@f2+1,f
  5313  027D  0DA5               	rlf	___ftadd@f2+2,f
  5314  027E  0B89               	decfsz	9,f
  5315  027F  2A7B               	goto	u3235
  5316  0280  3001               	movlw	1
  5317  0281  02FA               	subwf	___ftadd@exp2,f
  5318  0282  087A               	movf	___ftadd@exp2,w
  5319  0283  067B               	xorwf	___ftadd@exp1,w
  5320  0284  1903               	skipnz
  5321  0285  2A97               	goto	l3289
  5322  0286  3001               	movlw	1
  5323  0287  02F9               	subwf	___ftadd@sign,f
  5324  0288  0879               	movf	___ftadd@sign,w
  5325  0289  3907               	andlw	7
  5326  028A  1903               	btfsc	3,2
  5327  028B  2A97               	goto	l3289
  5328  028C  2A7A               	goto	l3281
  5329  028D                     l3287:	
  5330  028D  3001               	movlw	1
  5331  028E                     u3265:	
  5332  028E  36A2               	lsrf	___ftadd@f1+2,f
  5333  028F  0CA1               	rrf	___ftadd@f1+1,f
  5334  0290  0CA0               	rrf	___ftadd@f1,f
  5335  0291  0B89               	decfsz	9,f
  5336  0292  2A8E               	goto	u3265
  5337  0293  3001               	movlw	1
  5338  0294  00A6               	movwf	??___ftadd
  5339  0295  0826               	movf	??___ftadd,w
  5340  0296  07FB               	addwf	___ftadd@exp1,f
  5341  0297                     l3289:	
  5342  0297  087B               	movf	___ftadd@exp1,w
  5343  0298  067A               	xorwf	___ftadd@exp2,w
  5344  0299  1903               	btfsc	3,2
  5345  029A  2AC1               	goto	l876
  5346  029B  2A8D               	goto	l3287
  5347  029C                     l3291:	
  5348  029C  087B               	movf	___ftadd@exp1,w
  5349  029D  027A               	subwf	___ftadd@exp2,w
  5350  029E  1803               	skipnc
  5351  029F  2AC1               	goto	l876
  5352  02A0                     l3293:	
  5353  02A0  3001               	movlw	1
  5354  02A1                     u3295:	
  5355  02A1  35A0               	lslf	___ftadd@f1,f
  5356  02A2  0DA1               	rlf	___ftadd@f1+1,f
  5357  02A3  0DA2               	rlf	___ftadd@f1+2,f
  5358  02A4  0B89               	decfsz	9,f
  5359  02A5  2AA1               	goto	u3295
  5360  02A6  3001               	movlw	1
  5361  02A7  02FB               	subwf	___ftadd@exp1,f
  5362  02A8  087A               	movf	___ftadd@exp2,w
  5363  02A9  067B               	xorwf	___ftadd@exp1,w
  5364  02AA  1903               	skipnz
  5365  02AB  2ABD               	goto	l3301
  5366  02AC  3001               	movlw	1
  5367  02AD  02F9               	subwf	___ftadd@sign,f
  5368  02AE  0879               	movf	___ftadd@sign,w
  5369  02AF  3907               	andlw	7
  5370  02B0  1903               	btfsc	3,2
  5371  02B1  2ABD               	goto	l3301
  5372  02B2  2AA0               	goto	l3293
  5373  02B3                     l3299:	
  5374  02B3  3001               	movlw	1
  5375  02B4                     u3325:	
  5376  02B4  36A5               	lsrf	___ftadd@f2+2,f
  5377  02B5  0CA4               	rrf	___ftadd@f2+1,f
  5378  02B6  0CA3               	rrf	___ftadd@f2,f
  5379  02B7  0B89               	decfsz	9,f
  5380  02B8  2AB4               	goto	u3325
  5381  02B9  3001               	movlw	1
  5382  02BA  00A6               	movwf	??___ftadd
  5383  02BB  0826               	movf	??___ftadd,w
  5384  02BC  07FA               	addwf	___ftadd@exp2,f
  5385  02BD                     l3301:	
  5386  02BD  087B               	movf	___ftadd@exp1,w
  5387  02BE  067A               	xorwf	___ftadd@exp2,w
  5388  02BF  1D03               	skipz
  5389  02C0  2AB3               	goto	l3299
  5390  02C1                     l876:	
  5391  02C1  1FF9               	btfss	___ftadd@sign,7
  5392  02C2  2AD3               	goto	l3305
  5393  02C3  30FF               	movlw	255
  5394  02C4  06A0               	xorwf	___ftadd@f1,f
  5395  02C5  30FF               	movlw	255
  5396  02C6  06A1               	xorwf	___ftadd@f1+1,f
  5397  02C7  30FF               	movlw	255
  5398  02C8  06A2               	xorwf	___ftadd@f1+2,f
  5399  02C9  3001               	movlw	1
  5400  02CA  07A0               	addwf	___ftadd@f1,f
  5401  02CB  3000               	movlw	0
  5402  02CC  1803               	skipnc
  5403  02CD  3001               	movlw	1
  5404  02CE  07A1               	addwf	___ftadd@f1+1,f
  5405  02CF  3000               	movlw	0
  5406  02D0  1803               	skipnc
  5407  02D1  3001               	movlw	1
  5408  02D2  07A2               	addwf	___ftadd@f1+2,f
  5409  02D3                     l3305:	
  5410  02D3  1F79               	btfss	___ftadd@sign,6
  5411  02D4  2AE5               	goto	l3309
  5412  02D5  30FF               	movlw	255
  5413  02D6  06A3               	xorwf	___ftadd@f2,f
  5414  02D7  30FF               	movlw	255
  5415  02D8  06A4               	xorwf	___ftadd@f2+1,f
  5416  02D9  30FF               	movlw	255
  5417  02DA  06A5               	xorwf	___ftadd@f2+2,f
  5418  02DB  3001               	movlw	1
  5419  02DC  07A3               	addwf	___ftadd@f2,f
  5420  02DD  3000               	movlw	0
  5421  02DE  1803               	skipnc
  5422  02DF  3001               	movlw	1
  5423  02E0  07A4               	addwf	___ftadd@f2+1,f
  5424  02E1  3000               	movlw	0
  5425  02E2  1803               	skipnc
  5426  02E3  3001               	movlw	1
  5427  02E4  07A5               	addwf	___ftadd@f2+2,f
  5428  02E5                     l3309:	
  5429  02E5  01F9               	clrf	___ftadd@sign
  5430  02E6  0820               	movf	___ftadd@f1,w
  5431  02E7  07A3               	addwf	___ftadd@f2,f
  5432  02E8  0821               	movf	___ftadd@f1+1,w
  5433  02E9  3DA4               	addwfc	___ftadd@f2+1,f
  5434  02EA  0822               	movf	___ftadd@f1+2,w
  5435  02EB  3DA5               	addwfc	___ftadd@f2+2,f
  5436  02EC  1FA5               	btfss	___ftadd@f2+2,7
  5437  02ED  2B00               	goto	l3319
  5438  02EE  30FF               	movlw	255
  5439  02EF  06A3               	xorwf	___ftadd@f2,f
  5440  02F0  30FF               	movlw	255
  5441  02F1  06A4               	xorwf	___ftadd@f2+1,f
  5442  02F2  30FF               	movlw	255
  5443  02F3  06A5               	xorwf	___ftadd@f2+2,f
  5444  02F4  3001               	movlw	1
  5445  02F5  07A3               	addwf	___ftadd@f2,f
  5446  02F6  3000               	movlw	0
  5447  02F7  1803               	skipnc
  5448  02F8  3001               	movlw	1
  5449  02F9  07A4               	addwf	___ftadd@f2+1,f
  5450  02FA  3000               	movlw	0
  5451  02FB  1803               	skipnc
  5452  02FC  3001               	movlw	1
  5453  02FD  07A5               	addwf	___ftadd@f2+2,f
  5454  02FE  01F9               	clrf	___ftadd@sign
  5455  02FF  0AF9               	incf	___ftadd@sign,f
  5456  0300                     l3319:	
  5457  0300  0823               	movf	___ftadd@f2,w
  5458  0301  00F1               	movwf	___ftpack@arg
  5459  0302  0824               	movf	___ftadd@f2+1,w
  5460  0303  00F2               	movwf	___ftpack@arg+1
  5461  0304  0825               	movf	___ftadd@f2+2,w
  5462  0305  00F3               	movwf	___ftpack@arg+2
  5463  0306  087B               	movf	___ftadd@exp1,w
  5464  0307  00A6               	movwf	??___ftadd
  5465  0308  0826               	movf	??___ftadd,w
  5466  0309  00F4               	movwf	___ftpack@exp
  5467  030A  0879               	movf	___ftadd@sign,w
  5468  030B  00A7               	movwf	??___ftadd+1
  5469  030C  0827               	movf	??___ftadd+1,w
  5470  030D  00F5               	movwf	___ftpack@sign
  5471  030E  3186  2693         	fcall	___ftpack
  5472  0310  0871               	movf	?___ftpack,w
  5473  0311  0020               	movlb	0	; select bank0
  5474  0312  00A0               	movwf	?___ftadd
  5475  0313  0872               	movf	?___ftpack+1,w
  5476  0314  00A1               	movwf	?___ftadd+1
  5477  0315  0873               	movf	?___ftpack+2,w
  5478  0316  00A2               	movwf	?___ftadd+2
  5479  0317  0008               	return
  5480  0318                     __end_of___ftadd:	
  5481                           
  5482                           	psect	text19
  5483  04C4                     __ptext19:	
  5484 ;; *************** function ___ftmul *****************
  5485 ;; Defined at:
  5486 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  5487 ;; Parameters:    Size  Location     Type
  5488 ;;  f1              3    1[BANK0 ] float 
  5489 ;;  f2              3    4[BANK0 ] float 
  5490 ;; Auto vars:     Size  Location     Type
  5491 ;;  f3_as_produc    3   12[BANK0 ] unsigned um
  5492 ;;  sign            1   16[BANK0 ] unsigned char 
  5493 ;;  cntr            1   15[BANK0 ] unsigned char 
  5494 ;;  exp             1   11[BANK0 ] unsigned char 
  5495 ;; Return value:  Size  Location     Type
  5496 ;;                  3    1[BANK0 ] float 
  5497 ;; Registers used:
  5498 ;;		wreg, status,2, status,0, pclath, cstack
  5499 ;; Tracked objects:
  5500 ;;		On entry : 0/0
  5501 ;;		On exit  : 0/0
  5502 ;;		Unchanged: 0/0
  5503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5504 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5505 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5506 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5507 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5508 ;;Total ram usage:       16 bytes
  5509 ;; Hardware stack levels used:    1
  5510 ;; Hardware stack levels required when called:    3
  5511 ;; This function calls:
  5512 ;;		___ftpack
  5513 ;; This function is called by:
  5514 ;;		_ADCConv
  5515 ;;		_sqrt
  5516 ;; This function uses a non-reentrant model
  5517 ;;
  5518                           
  5519                           
  5520                           ;psect for function ___ftmul
  5521  04C4                     ___ftmul:	
  5522                           
  5523                           ;incstack = 0
  5524                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  5525  04C4  0020               	movlb	0	; select bank0
  5526  04C5  0821               	movf	___ftmul@f1,w
  5527  04C6  00A7               	movwf	??___ftmul
  5528  04C7  0822               	movf	___ftmul@f1+1,w
  5529  04C8  00A8               	movwf	??___ftmul+1
  5530  04C9  0823               	movf	___ftmul@f1+2,w
  5531  04CA  00A9               	movwf	??___ftmul+2
  5532  04CB  1003               	clrc
  5533  04CC  0D28               	rlf	??___ftmul+1,w
  5534  04CD  0D29               	rlf	??___ftmul+2,w
  5535  04CE  00AA               	movwf	??___ftmul+3
  5536  04CF  082A               	movf	??___ftmul+3,w
  5537  04D0  00AB               	movwf	___ftmul@exp
  5538  04D1  082B               	movf	___ftmul@exp,w
  5539  04D2  1D03               	btfss	3,2
  5540  04D3  2CDB               	goto	l3361
  5541  04D4  3000               	movlw	0
  5542  04D5  00A1               	movwf	?___ftmul
  5543  04D6  3000               	movlw	0
  5544  04D7  00A2               	movwf	?___ftmul+1
  5545  04D8  3000               	movlw	0
  5546  04D9  00A3               	movwf	?___ftmul+2
  5547  04DA  0008               	return
  5548  04DB                     l3361:	
  5549  04DB  0824               	movf	___ftmul@f2,w
  5550  04DC  00A7               	movwf	??___ftmul
  5551  04DD  0825               	movf	___ftmul@f2+1,w
  5552  04DE  00A8               	movwf	??___ftmul+1
  5553  04DF  0826               	movf	___ftmul@f2+2,w
  5554  04E0  00A9               	movwf	??___ftmul+2
  5555  04E1  1003               	clrc
  5556  04E2  0D28               	rlf	??___ftmul+1,w
  5557  04E3  0D29               	rlf	??___ftmul+2,w
  5558  04E4  00AA               	movwf	??___ftmul+3
  5559  04E5  082A               	movf	??___ftmul+3,w
  5560  04E6  00B0               	movwf	___ftmul@sign
  5561  04E7  0830               	movf	___ftmul@sign,w
  5562  04E8  1D03               	btfss	3,2
  5563  04E9  2CF1               	goto	l3367
  5564  04EA  3000               	movlw	0
  5565  04EB  00A1               	movwf	?___ftmul
  5566  04EC  3000               	movlw	0
  5567  04ED  00A2               	movwf	?___ftmul+1
  5568  04EE  3000               	movlw	0
  5569  04EF  00A3               	movwf	?___ftmul+2
  5570  04F0  0008               	return
  5571  04F1                     l3367:	
  5572  04F1  0830               	movf	___ftmul@sign,w
  5573  04F2  3E7B               	addlw	123
  5574  04F3  00A7               	movwf	??___ftmul
  5575  04F4  0827               	movf	??___ftmul,w
  5576  04F5  07AB               	addwf	___ftmul@exp,f
  5577  04F6  0821               	movf	___ftmul@f1,w
  5578  04F7  00A7               	movwf	??___ftmul
  5579  04F8  0822               	movf	___ftmul@f1+1,w
  5580  04F9  00A8               	movwf	??___ftmul+1
  5581  04FA  0823               	movf	___ftmul@f1+2,w
  5582  04FB  00A9               	movwf	??___ftmul+2
  5583  04FC  3010               	movlw	16
  5584  04FD                     u3405:	
  5585  04FD  36A9               	lsrf	??___ftmul+2,f
  5586  04FE  0CA8               	rrf	??___ftmul+1,f
  5587  04FF  0CA7               	rrf	??___ftmul,f
  5588  0500  0B89               	decfsz	9,f
  5589  0501  2CFD               	goto	u3405
  5590  0502  0827               	movf	??___ftmul,w
  5591  0503  00AA               	movwf	??___ftmul+3
  5592  0504  082A               	movf	??___ftmul+3,w
  5593  0505  00B0               	movwf	___ftmul@sign
  5594  0506  0824               	movf	___ftmul@f2,w
  5595  0507  00A7               	movwf	??___ftmul
  5596  0508  0825               	movf	___ftmul@f2+1,w
  5597  0509  00A8               	movwf	??___ftmul+1
  5598  050A  0826               	movf	___ftmul@f2+2,w
  5599  050B  00A9               	movwf	??___ftmul+2
  5600  050C  3010               	movlw	16
  5601  050D                     u3415:	
  5602  050D  36A9               	lsrf	??___ftmul+2,f
  5603  050E  0CA8               	rrf	??___ftmul+1,f
  5604  050F  0CA7               	rrf	??___ftmul,f
  5605  0510  0B89               	decfsz	9,f
  5606  0511  2D0D               	goto	u3415
  5607  0512  0827               	movf	??___ftmul,w
  5608  0513  00AA               	movwf	??___ftmul+3
  5609  0514  082A               	movf	??___ftmul+3,w
  5610  0515  06B0               	xorwf	___ftmul@sign,f
  5611  0516  3080               	movlw	128
  5612  0517  00A7               	movwf	??___ftmul
  5613  0518  0827               	movf	??___ftmul,w
  5614  0519  05B0               	andwf	___ftmul@sign,f
  5615  051A  17A2               	bsf	___ftmul@f1+1,7
  5616  051B  17A5               	bsf	___ftmul@f2+1,7
  5617  051C  30FF               	movlw	255
  5618  051D  05A4               	andwf	___ftmul@f2,f
  5619  051E  30FF               	movlw	255
  5620  051F  05A5               	andwf	___ftmul@f2+1,f
  5621  0520  3000               	movlw	0
  5622  0521  05A6               	andwf	___ftmul@f2+2,f
  5623  0522  3000               	movlw	0
  5624  0523  00AC               	movwf	___ftmul@f3_as_product
  5625  0524  3000               	movlw	0
  5626  0525  00AD               	movwf	___ftmul@f3_as_product+1
  5627  0526  3000               	movlw	0
  5628  0527  00AE               	movwf	___ftmul@f3_as_product+2
  5629  0528  3007               	movlw	7
  5630  0529  00A7               	movwf	??___ftmul
  5631  052A  0827               	movf	??___ftmul,w
  5632  052B  00AF               	movwf	___ftmul@cntr
  5633  052C                     l3379:	
  5634  052C  1C21               	btfss	___ftmul@f1,0
  5635  052D  2D34               	goto	l3383
  5636  052E  0824               	movf	___ftmul@f2,w
  5637  052F  07AC               	addwf	___ftmul@f3_as_product,f
  5638  0530  0825               	movf	___ftmul@f2+1,w
  5639  0531  3DAD               	addwfc	___ftmul@f3_as_product+1,f
  5640  0532  0826               	movf	___ftmul@f2+2,w
  5641  0533  3DAE               	addwfc	___ftmul@f3_as_product+2,f
  5642  0534                     l3383:	
  5643  0534  3001               	movlw	1
  5644  0535                     u3435:	
  5645  0535  36A3               	lsrf	___ftmul@f1+2,f
  5646  0536  0CA2               	rrf	___ftmul@f1+1,f
  5647  0537  0CA1               	rrf	___ftmul@f1,f
  5648  0538  0B89               	decfsz	9,f
  5649  0539  2D35               	goto	u3435
  5650  053A  3001               	movlw	1
  5651  053B                     u3445:	
  5652  053B  35A4               	lslf	___ftmul@f2,f
  5653  053C  0DA5               	rlf	___ftmul@f2+1,f
  5654  053D  0DA6               	rlf	___ftmul@f2+2,f
  5655  053E  0B89               	decfsz	9,f
  5656  053F  2D3B               	goto	u3445
  5657  0540  3001               	movlw	1
  5658  0541  02AF               	subwf	___ftmul@cntr,f
  5659  0542  1D03               	btfss	3,2
  5660  0543  2D2C               	goto	l3379
  5661  0544  3009               	movlw	9
  5662  0545  00A7               	movwf	??___ftmul
  5663  0546  0827               	movf	??___ftmul,w
  5664  0547  00AF               	movwf	___ftmul@cntr
  5665  0548                     l3391:	
  5666  0548  1C21               	btfss	___ftmul@f1,0
  5667  0549  2D50               	goto	l3395
  5668  054A  0824               	movf	___ftmul@f2,w
  5669  054B  07AC               	addwf	___ftmul@f3_as_product,f
  5670  054C  0825               	movf	___ftmul@f2+1,w
  5671  054D  3DAD               	addwfc	___ftmul@f3_as_product+1,f
  5672  054E  0826               	movf	___ftmul@f2+2,w
  5673  054F  3DAE               	addwfc	___ftmul@f3_as_product+2,f
  5674  0550                     l3395:	
  5675  0550  3001               	movlw	1
  5676  0551                     u3475:	
  5677  0551  36A3               	lsrf	___ftmul@f1+2,f
  5678  0552  0CA2               	rrf	___ftmul@f1+1,f
  5679  0553  0CA1               	rrf	___ftmul@f1,f
  5680  0554  0B89               	decfsz	9,f
  5681  0555  2D51               	goto	u3475
  5682  0556  3001               	movlw	1
  5683  0557                     u3485:	
  5684  0557  36AE               	lsrf	___ftmul@f3_as_product+2,f
  5685  0558  0CAD               	rrf	___ftmul@f3_as_product+1,f
  5686  0559  0CAC               	rrf	___ftmul@f3_as_product,f
  5687  055A  0B89               	decfsz	9,f
  5688  055B  2D57               	goto	u3485
  5689  055C  3001               	movlw	1
  5690  055D  02AF               	subwf	___ftmul@cntr,f
  5691  055E  1D03               	btfss	3,2
  5692  055F  2D48               	goto	l3391
  5693  0560  082C               	movf	___ftmul@f3_as_product,w
  5694  0561  00F1               	movwf	___ftpack@arg
  5695  0562  082D               	movf	___ftmul@f3_as_product+1,w
  5696  0563  00F2               	movwf	___ftpack@arg+1
  5697  0564  082E               	movf	___ftmul@f3_as_product+2,w
  5698  0565  00F3               	movwf	___ftpack@arg+2
  5699  0566  082B               	movf	___ftmul@exp,w
  5700  0567  00A7               	movwf	??___ftmul
  5701  0568  0827               	movf	??___ftmul,w
  5702  0569  00F4               	movwf	___ftpack@exp
  5703  056A  0830               	movf	___ftmul@sign,w
  5704  056B  00A8               	movwf	??___ftmul+1
  5705  056C  0828               	movf	??___ftmul+1,w
  5706  056D  00F5               	movwf	___ftpack@sign
  5707  056E  3186  2693         	fcall	___ftpack
  5708  0570  0871               	movf	?___ftpack,w
  5709  0571  0020               	movlb	0	; select bank0
  5710  0572  00A1               	movwf	?___ftmul
  5711  0573  0872               	movf	?___ftpack+1,w
  5712  0574  00A2               	movwf	?___ftmul+1
  5713  0575  0873               	movf	?___ftpack+2,w
  5714  0576  00A3               	movwf	?___ftmul+2
  5715  0577  0008               	return
  5716  0578                     __end_of___ftmul:	
  5717                           
  5718                           	psect	text20
  5719  0F89                     __ptext20:	
  5720 ;; *************** function ___ftge *****************
  5721 ;; Defined at:
  5722 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
  5723 ;; Parameters:    Size  Location     Type
  5724 ;;  ff1             3    1[COMMON] float 
  5725 ;;  ff2             3    4[COMMON] float 
  5726 ;; Auto vars:     Size  Location     Type
  5727 ;;		None
  5728 ;; Return value:  Size  Location     Type
  5729 ;;		None               void
  5730 ;; Registers used:
  5731 ;;		wreg, status,2, status,0
  5732 ;; Tracked objects:
  5733 ;;		On entry : 0/0
  5734 ;;		On exit  : 0/0
  5735 ;;		Unchanged: 0/0
  5736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5737 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5738 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5739 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5740 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5741 ;;Total ram usage:        9 bytes
  5742 ;; Hardware stack levels used:    1
  5743 ;; Hardware stack levels required when called:    2
  5744 ;; This function calls:
  5745 ;;		Nothing
  5746 ;; This function is called by:
  5747 ;;		_sqrt
  5748 ;; This function uses a non-reentrant model
  5749 ;;
  5750                           
  5751                           
  5752                           ;psect for function ___ftge
  5753  0F89                     ___ftge:	
  5754                           
  5755                           ;incstack = 0
  5756                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  5757  0F89  1FF3               	btfss	___ftge@ff1+2,7
  5758  0F8A  2F9F               	goto	l2305
  5759  0F8B  0971               	comf	___ftge@ff1,w
  5760  0F8C  00F7               	movwf	??___ftge
  5761  0F8D  0972               	comf	___ftge@ff1+1,w
  5762  0F8E  00F8               	movwf	??___ftge+1
  5763  0F8F  0973               	comf	___ftge@ff1+2,w
  5764  0F90  00F9               	movwf	??___ftge+2
  5765  0F91  0AF7               	incf	??___ftge,f
  5766  0F92  1903               	skipnz
  5767  0F93  0AF8               	incf	??___ftge+1,f
  5768  0F94  1903               	skipnz
  5769  0F95  0AF9               	incf	??___ftge+2,f
  5770  0F96  3000               	movlw	0
  5771  0F97  0777               	addwf	??___ftge,w
  5772  0F98  00F1               	movwf	___ftge@ff1
  5773  0F99  3000               	movlw	0
  5774  0F9A  3D78               	addwfc	??___ftge+1,w
  5775  0F9B  00F2               	movwf	___ftge@ff1+1
  5776  0F9C  3080               	movlw	128
  5777  0F9D  3D79               	addwfc	??___ftge+2,w
  5778  0F9E  00F3               	movwf	___ftge@ff1+2
  5779  0F9F                     l2305:	
  5780  0F9F  1FF6               	btfss	___ftge@ff2+2,7
  5781  0FA0  2FB5               	goto	l2309
  5782  0FA1  0974               	comf	___ftge@ff2,w
  5783  0FA2  00F7               	movwf	??___ftge
  5784  0FA3  0975               	comf	___ftge@ff2+1,w
  5785  0FA4  00F8               	movwf	??___ftge+1
  5786  0FA5  0976               	comf	___ftge@ff2+2,w
  5787  0FA6  00F9               	movwf	??___ftge+2
  5788  0FA7  0AF7               	incf	??___ftge,f
  5789  0FA8  1903               	skipnz
  5790  0FA9  0AF8               	incf	??___ftge+1,f
  5791  0FAA  1903               	skipnz
  5792  0FAB  0AF9               	incf	??___ftge+2,f
  5793  0FAC  3000               	movlw	0
  5794  0FAD  0777               	addwf	??___ftge,w
  5795  0FAE  00F4               	movwf	___ftge@ff2
  5796  0FAF  3000               	movlw	0
  5797  0FB0  3D78               	addwfc	??___ftge+1,w
  5798  0FB1  00F5               	movwf	___ftge@ff2+1
  5799  0FB2  3080               	movlw	128
  5800  0FB3  3D79               	addwfc	??___ftge+2,w
  5801  0FB4  00F6               	movwf	___ftge@ff2+2
  5802  0FB5                     l2309:	
  5803  0FB5  3080               	movlw	128
  5804  0FB6  06F3               	xorwf	___ftge@ff1+2,f
  5805  0FB7  3080               	movlw	128
  5806  0FB8  06F6               	xorwf	___ftge@ff2+2,f
  5807  0FB9  0876               	movf	___ftge@ff2+2,w
  5808  0FBA  0273               	subwf	___ftge@ff1+2,w
  5809  0FBB  1D03               	skipz
  5810  0FBC  0008               	return
  5811  0FBD  0875               	movf	___ftge@ff2+1,w
  5812  0FBE  0272               	subwf	___ftge@ff1+1,w
  5813  0FBF  1D03               	skipz
  5814  0FC0  0008               	return
  5815  0FC1  0874               	movf	___ftge@ff2,w
  5816  0FC2  0271               	subwf	___ftge@ff1,w
  5817  0FC3  0008               	return
  5818  0FC4                     __end_of___ftge:	
  5819                           
  5820                           	psect	text21
  5821  0C61                     __ptext21:	
  5822 ;; *************** function ___wmul *****************
  5823 ;; Defined at:
  5824 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  5825 ;; Parameters:    Size  Location     Type
  5826 ;;  multiplier      2    1[COMMON] unsigned int 
  5827 ;;  multiplicand    2    3[COMMON] unsigned int 
  5828 ;; Auto vars:     Size  Location     Type
  5829 ;;  product         2    5[COMMON] unsigned int 
  5830 ;; Return value:  Size  Location     Type
  5831 ;;                  2    1[COMMON] unsigned int 
  5832 ;; Registers used:
  5833 ;;		wreg, status,2, status,0
  5834 ;; Tracked objects:
  5835 ;;		On entry : 0/0
  5836 ;;		On exit  : 0/0
  5837 ;;		Unchanged: 0/0
  5838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5839 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5840 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5842 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5843 ;;Total ram usage:        6 bytes
  5844 ;; Hardware stack levels used:    1
  5845 ;; Hardware stack levels required when called:    2
  5846 ;; This function calls:
  5847 ;;		Nothing
  5848 ;; This function is called by:
  5849 ;;		_ADCConv
  5850 ;; This function uses a non-reentrant model
  5851 ;;
  5852                           
  5853                           
  5854                           ;psect for function ___wmul
  5855  0C61                     ___wmul:	
  5856                           
  5857                           ;incstack = 0
  5858                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5859  0C61  01F5               	clrf	___wmul@product
  5860  0C62  01F6               	clrf	___wmul@product+1
  5861  0C63                     l2429:	
  5862  0C63  1C71               	btfss	___wmul@multiplier,0
  5863  0C64  2C69               	goto	l684
  5864  0C65  0873               	movf	___wmul@multiplicand,w
  5865  0C66  07F5               	addwf	___wmul@product,f
  5866  0C67  0874               	movf	___wmul@multiplicand+1,w
  5867  0C68  3DF6               	addwfc	___wmul@product+1,f
  5868  0C69                     l684:	
  5869  0C69  3001               	movlw	1
  5870  0C6A                     u2145:	
  5871  0C6A  35F3               	lslf	___wmul@multiplicand,f
  5872  0C6B  0DF4               	rlf	___wmul@multiplicand+1,f
  5873  0C6C  0B89               	decfsz	9,f
  5874  0C6D  2C6A               	goto	u2145
  5875  0C6E  3001               	movlw	1
  5876  0C6F                     u2155:	
  5877  0C6F  36F2               	lsrf	___wmul@multiplier+1,f
  5878  0C70  0CF1               	rrf	___wmul@multiplier,f
  5879  0C71  0B89               	decfsz	9,f
  5880  0C72  2C6F               	goto	u2155
  5881  0C73  0871               	movf	___wmul@multiplier,w
  5882  0C74  0472               	iorwf	___wmul@multiplier+1,w
  5883  0C75  1D03               	btfss	3,2
  5884  0C76  2C63               	goto	l2429
  5885  0C77  0876               	movf	___wmul@product+1,w
  5886  0C78  00F2               	movwf	?___wmul+1
  5887  0C79  0875               	movf	___wmul@product,w
  5888  0C7A  00F1               	movwf	?___wmul
  5889  0C7B  0008               	return
  5890  0C7C                     __end_of___wmul:	
  5891                           
  5892                           	psect	text22
  5893  0BD5                     __ptext22:	
  5894 ;; *************** function ___lwtoft *****************
  5895 ;; Defined at:
  5896 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwtoft.c"
  5897 ;; Parameters:    Size  Location     Type
  5898 ;;  c               2    9[COMMON] unsigned int 
  5899 ;; Auto vars:     Size  Location     Type
  5900 ;;		None
  5901 ;; Return value:  Size  Location     Type
  5902 ;;                  3    9[COMMON] float 
  5903 ;; Registers used:
  5904 ;;		wreg, status,2, status,0, pclath, cstack
  5905 ;; Tracked objects:
  5906 ;;		On entry : 0/0
  5907 ;;		On exit  : 0/0
  5908 ;;		Unchanged: 0/0
  5909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5910 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5911 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5912 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5913 ;;      Totals:         3       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5914 ;;Total ram usage:        4 bytes
  5915 ;; Hardware stack levels used:    1
  5916 ;; Hardware stack levels required when called:    3
  5917 ;; This function calls:
  5918 ;;		___ftpack
  5919 ;; This function is called by:
  5920 ;;		_ADCConv
  5921 ;; This function uses a non-reentrant model
  5922 ;;
  5923                           
  5924                           
  5925                           ;psect for function ___lwtoft
  5926  0BD5                     ___lwtoft:	
  5927                           
  5928                           ;incstack = 0
  5929                           ; Regs used in ___lwtoft: [wreg+status,2+status,0+pclath+cstack]
  5930  0BD5  0879               	movf	___lwtoft@c,w
  5931  0BD6  00F1               	movwf	___ftpack@arg
  5932  0BD7  087A               	movf	___lwtoft@c+1,w
  5933  0BD8  00F2               	movwf	___ftpack@arg+1
  5934  0BD9  01F3               	clrf	___ftpack@arg+2
  5935  0BDA  308E               	movlw	142
  5936  0BDB  0020               	movlb	0	; select bank0
  5937  0BDC  00A0               	movwf	??___lwtoft
  5938  0BDD  0820               	movf	??___lwtoft,w
  5939  0BDE  00F4               	movwf	___ftpack@exp
  5940  0BDF  01F5               	clrf	___ftpack@sign
  5941  0BE0  3186  2693         	fcall	___ftpack
  5942  0BE2  0871               	movf	?___ftpack,w
  5943  0BE3  00F9               	movwf	?___lwtoft
  5944  0BE4  0872               	movf	?___ftpack+1,w
  5945  0BE5  00FA               	movwf	?___lwtoft+1
  5946  0BE6  0873               	movf	?___ftpack+2,w
  5947  0BE7  00FB               	movwf	?___lwtoft+2
  5948  0BE8  0008               	return
  5949  0BE9                     __end_of___lwtoft:	
  5950                           
  5951                           	psect	text23
  5952  0F55                     __ptext23:	
  5953 ;; *************** function ___lwdiv *****************
  5954 ;; Defined at:
  5955 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  5956 ;; Parameters:    Size  Location     Type
  5957 ;;  divisor         2    1[COMMON] unsigned int 
  5958 ;;  dividend        2    3[COMMON] unsigned int 
  5959 ;; Auto vars:     Size  Location     Type
  5960 ;;  quotient        2    6[COMMON] unsigned int 
  5961 ;;  counter         1    8[COMMON] unsigned char 
  5962 ;; Return value:  Size  Location     Type
  5963 ;;                  2    1[COMMON] unsigned int 
  5964 ;; Registers used:
  5965 ;;		wreg, status,2, status,0
  5966 ;; Tracked objects:
  5967 ;;		On entry : 0/0
  5968 ;;		On exit  : 0/0
  5969 ;;		Unchanged: 0/0
  5970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5971 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5972 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5973 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5974 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5975 ;;Total ram usage:        8 bytes
  5976 ;; Hardware stack levels used:    1
  5977 ;; Hardware stack levels required when called:    2
  5978 ;; This function calls:
  5979 ;;		Nothing
  5980 ;; This function is called by:
  5981 ;;		_ADCConv
  5982 ;; This function uses a non-reentrant model
  5983 ;;
  5984                           
  5985                           
  5986                           ;psect for function ___lwdiv
  5987  0F55                     ___lwdiv:	
  5988                           
  5989                           ;incstack = 0
  5990                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  5991  0F55  01F6               	clrf	___lwdiv@quotient
  5992  0F56  01F7               	clrf	___lwdiv@quotient+1
  5993  0F57  0871               	movf	___lwdiv@divisor,w
  5994  0F58  0472               	iorwf	___lwdiv@divisor+1,w
  5995  0F59  1903               	btfsc	3,2
  5996  0F5A  2F84               	goto	l2515
  5997  0F5B  01F8               	clrf	___lwdiv@counter
  5998  0F5C  0AF8               	incf	___lwdiv@counter,f
  5999  0F5D                     l2503:	
  6000  0F5D  1BF2               	btfsc	___lwdiv@divisor+1,7
  6001  0F5E  2F69               	goto	l2505
  6002  0F5F  3001               	movlw	1
  6003  0F60                     u2285:	
  6004  0F60  35F1               	lslf	___lwdiv@divisor,f
  6005  0F61  0DF2               	rlf	___lwdiv@divisor+1,f
  6006  0F62  0B89               	decfsz	9,f
  6007  0F63  2F60               	goto	u2285
  6008  0F64  3001               	movlw	1
  6009  0F65  00F5               	movwf	??___lwdiv
  6010  0F66  0875               	movf	??___lwdiv,w
  6011  0F67  07F8               	addwf	___lwdiv@counter,f
  6012  0F68  2F5D               	goto	l2503
  6013  0F69                     l2505:	
  6014  0F69  3001               	movlw	1
  6015  0F6A                     u2305:	
  6016  0F6A  35F6               	lslf	___lwdiv@quotient,f
  6017  0F6B  0DF7               	rlf	___lwdiv@quotient+1,f
  6018  0F6C  0B89               	decfsz	9,f
  6019  0F6D  2F6A               	goto	u2305
  6020  0F6E  0872               	movf	___lwdiv@divisor+1,w
  6021  0F6F  0274               	subwf	___lwdiv@dividend+1,w
  6022  0F70  1D03               	skipz
  6023  0F71  2F74               	goto	u2315
  6024  0F72  0871               	movf	___lwdiv@divisor,w
  6025  0F73  0273               	subwf	___lwdiv@dividend,w
  6026  0F74                     u2315:	
  6027  0F74  1C03               	skipc
  6028  0F75  2F7B               	goto	l2511
  6029  0F76  0871               	movf	___lwdiv@divisor,w
  6030  0F77  02F3               	subwf	___lwdiv@dividend,f
  6031  0F78  0872               	movf	___lwdiv@divisor+1,w
  6032  0F79  3BF4               	subwfb	___lwdiv@dividend+1,f
  6033  0F7A  1476               	bsf	___lwdiv@quotient,0
  6034  0F7B                     l2511:	
  6035  0F7B  3001               	movlw	1
  6036  0F7C                     u2325:	
  6037  0F7C  36F2               	lsrf	___lwdiv@divisor+1,f
  6038  0F7D  0CF1               	rrf	___lwdiv@divisor,f
  6039  0F7E  0B89               	decfsz	9,f
  6040  0F7F  2F7C               	goto	u2325
  6041  0F80  3001               	movlw	1
  6042  0F81  02F8               	subwf	___lwdiv@counter,f
  6043  0F82  1D03               	btfss	3,2
  6044  0F83  2F69               	goto	l2505
  6045  0F84                     l2515:	
  6046  0F84  0877               	movf	___lwdiv@quotient+1,w
  6047  0F85  00F2               	movwf	?___lwdiv+1
  6048  0F86  0876               	movf	___lwdiv@quotient,w
  6049  0F87  00F1               	movwf	?___lwdiv
  6050  0F88  0008               	return
  6051  0F89                     __end_of___lwdiv:	
  6052                           
  6053                           	psect	text24
  6054  0E6F                     __ptext24:	
  6055 ;; *************** function ___lltoft *****************
  6056 ;; Defined at:
  6057 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lltoft.c"
  6058 ;; Parameters:    Size  Location     Type
  6059 ;;  c               4    0[BANK0 ] unsigned long 
  6060 ;; Auto vars:     Size  Location     Type
  6061 ;;  exp             1   10[COMMON] unsigned char 
  6062 ;; Return value:  Size  Location     Type
  6063 ;;                  3    0[BANK0 ] float 
  6064 ;; Registers used:
  6065 ;;		wreg, status,2, status,0, pclath, cstack
  6066 ;; Tracked objects:
  6067 ;;		On entry : 0/0
  6068 ;;		On exit  : 0/0
  6069 ;;		Unchanged: 0/0
  6070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6071 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6072 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6073 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6074 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6075 ;;Total ram usage:        6 bytes
  6076 ;; Hardware stack levels used:    1
  6077 ;; Hardware stack levels required when called:    3
  6078 ;; This function calls:
  6079 ;;		___ftpack
  6080 ;; This function is called by:
  6081 ;;		_ADCConv
  6082 ;; This function uses a non-reentrant model
  6083 ;;
  6084                           
  6085                           
  6086                           ;psect for function ___lltoft
  6087  0E6F                     ___lltoft:	
  6088                           
  6089                           ;incstack = 0
  6090                           ; Regs used in ___lltoft: [wreg+status,2+status,0+pclath+cstack]
  6091  0E6F  308E               	movlw	142
  6092  0E70  00F9               	movwf	??___lltoft
  6093  0E71  0879               	movf	??___lltoft,w
  6094  0E72  00FA               	movwf	___lltoft@exp
  6095  0E73                     l3507:	
  6096  0E73  30FF               	movlw	255
  6097  0E74  0020               	movlb	0	; select bank0
  6098  0E75  0523               	andwf	___lltoft@c+3,w
  6099  0E76  1903               	btfsc	3,2
  6100  0E77  2E85               	goto	l3509
  6101  0E78  3001               	movlw	1
  6102  0E79                     u3665:	
  6103  0E79  0020               	movlb	0	; select bank0
  6104  0E7A  36A3               	lsrf	___lltoft@c+3,f
  6105  0E7B  0CA2               	rrf	___lltoft@c+2,f
  6106  0E7C  0CA1               	rrf	___lltoft@c+1,f
  6107  0E7D  0CA0               	rrf	___lltoft@c,f
  6108  0E7E  0B89               	decfsz	9,f
  6109  0E7F  2E79               	goto	u3665
  6110  0E80  3001               	movlw	1
  6111  0E81  00F9               	movwf	??___lltoft
  6112  0E82  0879               	movf	??___lltoft,w
  6113  0E83  07FA               	addwf	___lltoft@exp,f
  6114  0E84  2E73               	goto	l3507
  6115  0E85                     l3509:	
  6116  0E85  0820               	movf	___lltoft@c,w
  6117  0E86  00F1               	movwf	___ftpack@arg
  6118  0E87  0821               	movf	___lltoft@c+1,w
  6119  0E88  00F2               	movwf	___ftpack@arg+1
  6120  0E89  0822               	movf	___lltoft@c+2,w
  6121  0E8A  00F3               	movwf	___ftpack@arg+2
  6122  0E8B  087A               	movf	___lltoft@exp,w
  6123  0E8C  00F9               	movwf	??___lltoft
  6124  0E8D  0879               	movf	??___lltoft,w
  6125  0E8E  00F4               	movwf	___ftpack@exp
  6126  0E8F  01F5               	clrf	___ftpack@sign
  6127  0E90  3186  2693         	fcall	___ftpack
  6128  0E92  0871               	movf	?___ftpack,w
  6129  0E93  0020               	movlb	0	; select bank0
  6130  0E94  00A0               	movwf	?___lltoft
  6131  0E95  0872               	movf	?___ftpack+1,w
  6132  0E96  00A1               	movwf	?___lltoft+1
  6133  0E97  0873               	movf	?___ftpack+2,w
  6134  0E98  00A2               	movwf	?___lltoft+2
  6135  0E99  0008               	return
  6136  0E9A                     __end_of___lltoft:	
  6137                           
  6138                           	psect	text25
  6139  0578                     __ptext25:	
  6140 ;; *************** function ___ftdiv *****************
  6141 ;; Defined at:
  6142 ;;		line 56 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  6143 ;; Parameters:    Size  Location     Type
  6144 ;;  f2              3   17[BANK0 ] float 
  6145 ;;  f1              3   20[BANK0 ] float 
  6146 ;; Auto vars:     Size  Location     Type
  6147 ;;  f3              3   28[BANK0 ] float 
  6148 ;;  sign            1   32[BANK0 ] unsigned char 
  6149 ;;  exp             1   31[BANK0 ] unsigned char 
  6150 ;;  cntr            1   27[BANK0 ] unsigned char 
  6151 ;; Return value:  Size  Location     Type
  6152 ;;                  3   17[BANK0 ] float 
  6153 ;; Registers used:
  6154 ;;		wreg, status,2, status,0, pclath, cstack
  6155 ;; Tracked objects:
  6156 ;;		On entry : 0/0
  6157 ;;		On exit  : 0/0
  6158 ;;		Unchanged: 0/0
  6159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6160 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6161 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6162 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6163 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6164 ;;Total ram usage:       16 bytes
  6165 ;; Hardware stack levels used:    1
  6166 ;; Hardware stack levels required when called:    3
  6167 ;; This function calls:
  6168 ;;		___ftpack
  6169 ;; This function is called by:
  6170 ;;		_ADCConv
  6171 ;; This function uses a non-reentrant model
  6172 ;;
  6173                           
  6174                           
  6175                           ;psect for function ___ftdiv
  6176  0578                     ___ftdiv:	
  6177                           
  6178                           ;incstack = 0
  6179                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  6180  0578  0020               	movlb	0	; select bank0
  6181  0579  0834               	movf	___ftdiv@f1,w
  6182  057A  00B7               	movwf	??___ftdiv
  6183  057B  0835               	movf	___ftdiv@f1+1,w
  6184  057C  00B8               	movwf	??___ftdiv+1
  6185  057D  0836               	movf	___ftdiv@f1+2,w
  6186  057E  00B9               	movwf	??___ftdiv+2
  6187  057F  1003               	clrc
  6188  0580  0D38               	rlf	??___ftdiv+1,w
  6189  0581  0D39               	rlf	??___ftdiv+2,w
  6190  0582  00BA               	movwf	??___ftdiv+3
  6191  0583  083A               	movf	??___ftdiv+3,w
  6192  0584  00BF               	movwf	___ftdiv@exp
  6193  0585  083F               	movf	___ftdiv@exp,w
  6194  0586  1D03               	btfss	3,2
  6195  0587  2D8F               	goto	l3467
  6196  0588  3000               	movlw	0
  6197  0589  00B1               	movwf	?___ftdiv
  6198  058A  3000               	movlw	0
  6199  058B  00B2               	movwf	?___ftdiv+1
  6200  058C  3000               	movlw	0
  6201  058D  00B3               	movwf	?___ftdiv+2
  6202  058E  0008               	return
  6203  058F                     l3467:	
  6204  058F  0831               	movf	___ftdiv@f2,w
  6205  0590  00B7               	movwf	??___ftdiv
  6206  0591  0832               	movf	___ftdiv@f2+1,w
  6207  0592  00B8               	movwf	??___ftdiv+1
  6208  0593  0833               	movf	___ftdiv@f2+2,w
  6209  0594  00B9               	movwf	??___ftdiv+2
  6210  0595  1003               	clrc
  6211  0596  0D38               	rlf	??___ftdiv+1,w
  6212  0597  0D39               	rlf	??___ftdiv+2,w
  6213  0598  00BA               	movwf	??___ftdiv+3
  6214  0599  083A               	movf	??___ftdiv+3,w
  6215  059A  00C0               	movwf	___ftdiv@sign
  6216  059B  0840               	movf	___ftdiv@sign,w
  6217  059C  1D03               	btfss	3,2
  6218  059D  2DA5               	goto	l3473
  6219  059E  3000               	movlw	0
  6220  059F  00B1               	movwf	?___ftdiv
  6221  05A0  3000               	movlw	0
  6222  05A1  00B2               	movwf	?___ftdiv+1
  6223  05A2  3000               	movlw	0
  6224  05A3  00B3               	movwf	?___ftdiv+2
  6225  05A4  0008               	return
  6226  05A5                     l3473:	
  6227  05A5  3000               	movlw	0
  6228  05A6  00BC               	movwf	___ftdiv@f3
  6229  05A7  3000               	movlw	0
  6230  05A8  00BD               	movwf	___ftdiv@f3+1
  6231  05A9  3000               	movlw	0
  6232  05AA  00BE               	movwf	___ftdiv@f3+2
  6233  05AB  3089               	movlw	137
  6234  05AC  0740               	addwf	___ftdiv@sign,w
  6235  05AD  00B7               	movwf	??___ftdiv
  6236  05AE  0837               	movf	??___ftdiv,w
  6237  05AF  02BF               	subwf	___ftdiv@exp,f
  6238  05B0  0834               	movf	___ftdiv@f1,w
  6239  05B1  00B7               	movwf	??___ftdiv
  6240  05B2  0835               	movf	___ftdiv@f1+1,w
  6241  05B3  00B8               	movwf	??___ftdiv+1
  6242  05B4  0836               	movf	___ftdiv@f1+2,w
  6243  05B5  00B9               	movwf	??___ftdiv+2
  6244  05B6  3010               	movlw	16
  6245  05B7                     u3605:	
  6246  05B7  36B9               	lsrf	??___ftdiv+2,f
  6247  05B8  0CB8               	rrf	??___ftdiv+1,f
  6248  05B9  0CB7               	rrf	??___ftdiv,f
  6249  05BA  0B89               	decfsz	9,f
  6250  05BB  2DB7               	goto	u3605
  6251  05BC  0837               	movf	??___ftdiv,w
  6252  05BD  00BA               	movwf	??___ftdiv+3
  6253  05BE  083A               	movf	??___ftdiv+3,w
  6254  05BF  00C0               	movwf	___ftdiv@sign
  6255  05C0  0831               	movf	___ftdiv@f2,w
  6256  05C1  00B7               	movwf	??___ftdiv
  6257  05C2  0832               	movf	___ftdiv@f2+1,w
  6258  05C3  00B8               	movwf	??___ftdiv+1
  6259  05C4  0833               	movf	___ftdiv@f2+2,w
  6260  05C5  00B9               	movwf	??___ftdiv+2
  6261  05C6  3010               	movlw	16
  6262  05C7                     u3615:	
  6263  05C7  36B9               	lsrf	??___ftdiv+2,f
  6264  05C8  0CB8               	rrf	??___ftdiv+1,f
  6265  05C9  0CB7               	rrf	??___ftdiv,f
  6266  05CA  0B89               	decfsz	9,f
  6267  05CB  2DC7               	goto	u3615
  6268  05CC  0837               	movf	??___ftdiv,w
  6269  05CD  00BA               	movwf	??___ftdiv+3
  6270  05CE  083A               	movf	??___ftdiv+3,w
  6271  05CF  06C0               	xorwf	___ftdiv@sign,f
  6272  05D0  3080               	movlw	128
  6273  05D1  00B7               	movwf	??___ftdiv
  6274  05D2  0837               	movf	??___ftdiv,w
  6275  05D3  05C0               	andwf	___ftdiv@sign,f
  6276  05D4  17B5               	bsf	___ftdiv@f1+1,7
  6277  05D5  30FF               	movlw	255
  6278  05D6  05B4               	andwf	___ftdiv@f1,f
  6279  05D7  30FF               	movlw	255
  6280  05D8  05B5               	andwf	___ftdiv@f1+1,f
  6281  05D9  3000               	movlw	0
  6282  05DA  05B6               	andwf	___ftdiv@f1+2,f
  6283  05DB  17B2               	bsf	___ftdiv@f2+1,7
  6284  05DC  30FF               	movlw	255
  6285  05DD  05B1               	andwf	___ftdiv@f2,f
  6286  05DE  30FF               	movlw	255
  6287  05DF  05B2               	andwf	___ftdiv@f2+1,f
  6288  05E0  3000               	movlw	0
  6289  05E1  05B3               	andwf	___ftdiv@f2+2,f
  6290  05E2  3018               	movlw	24
  6291  05E3  00B7               	movwf	??___ftdiv
  6292  05E4  0837               	movf	??___ftdiv,w
  6293  05E5  00BB               	movwf	___ftdiv@cntr
  6294  05E6                     l3487:	
  6295  05E6  3001               	movlw	1
  6296  05E7                     u3625:	
  6297  05E7  35BC               	lslf	___ftdiv@f3,f
  6298  05E8  0DBD               	rlf	___ftdiv@f3+1,f
  6299  05E9  0DBE               	rlf	___ftdiv@f3+2,f
  6300  05EA  0B89               	decfsz	9,f
  6301  05EB  2DE7               	goto	u3625
  6302  05EC  0833               	movf	___ftdiv@f2+2,w
  6303  05ED  0236               	subwf	___ftdiv@f1+2,w
  6304  05EE  1D03               	skipz
  6305  05EF  2DF6               	goto	u3635
  6306  05F0  0832               	movf	___ftdiv@f2+1,w
  6307  05F1  0235               	subwf	___ftdiv@f1+1,w
  6308  05F2  1D03               	skipz
  6309  05F3  2DF6               	goto	u3635
  6310  05F4  0831               	movf	___ftdiv@f2,w
  6311  05F5  0234               	subwf	___ftdiv@f1,w
  6312  05F6                     u3635:	
  6313  05F6  1C03               	skipc
  6314  05F7  2DFF               	goto	l3495
  6315  05F8  0831               	movf	___ftdiv@f2,w
  6316  05F9  02B4               	subwf	___ftdiv@f1,f
  6317  05FA  0832               	movf	___ftdiv@f2+1,w
  6318  05FB  3BB5               	subwfb	___ftdiv@f1+1,f
  6319  05FC  0833               	movf	___ftdiv@f2+2,w
  6320  05FD  3BB6               	subwfb	___ftdiv@f1+2,f
  6321  05FE  143C               	bsf	___ftdiv@f3,0
  6322  05FF                     l3495:	
  6323  05FF  3001               	movlw	1
  6324  0600                     u3645:	
  6325  0600  35B4               	lslf	___ftdiv@f1,f
  6326  0601  0DB5               	rlf	___ftdiv@f1+1,f
  6327  0602  0DB6               	rlf	___ftdiv@f1+2,f
  6328  0603  0B89               	decfsz	9,f
  6329  0604  2E00               	goto	u3645
  6330  0605  3001               	movlw	1
  6331  0606  02BB               	subwf	___ftdiv@cntr,f
  6332  0607  1D03               	btfss	3,2
  6333  0608  2DE6               	goto	l3487
  6334  0609  083C               	movf	___ftdiv@f3,w
  6335  060A  00F1               	movwf	___ftpack@arg
  6336  060B  083D               	movf	___ftdiv@f3+1,w
  6337  060C  00F2               	movwf	___ftpack@arg+1
  6338  060D  083E               	movf	___ftdiv@f3+2,w
  6339  060E  00F3               	movwf	___ftpack@arg+2
  6340  060F  083F               	movf	___ftdiv@exp,w
  6341  0610  00B7               	movwf	??___ftdiv
  6342  0611  0837               	movf	??___ftdiv,w
  6343  0612  00F4               	movwf	___ftpack@exp
  6344  0613  0840               	movf	___ftdiv@sign,w
  6345  0614  00B8               	movwf	??___ftdiv+1
  6346  0615  0838               	movf	??___ftdiv+1,w
  6347  0616  00F5               	movwf	___ftpack@sign
  6348  0617  3186  2693         	fcall	___ftpack
  6349  0619  0871               	movf	?___ftpack,w
  6350  061A  0020               	movlb	0	; select bank0
  6351  061B  00B1               	movwf	?___ftdiv
  6352  061C  0872               	movf	?___ftpack+1,w
  6353  061D  00B2               	movwf	?___ftdiv+1
  6354  061E  0873               	movf	?___ftpack+2,w
  6355  061F  00B3               	movwf	?___ftdiv+2
  6356  0620  0008               	return
  6357  0621                     __end_of___ftdiv:	
  6358                           
  6359                           	psect	text26
  6360  0693                     __ptext26:	
  6361 ;; *************** function ___ftpack *****************
  6362 ;; Defined at:
  6363 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  6364 ;; Parameters:    Size  Location     Type
  6365 ;;  arg             3    1[COMMON] unsigned um
  6366 ;;  exp             1    4[COMMON] unsigned char 
  6367 ;;  sign            1    5[COMMON] unsigned char 
  6368 ;; Auto vars:     Size  Location     Type
  6369 ;;		None
  6370 ;; Return value:  Size  Location     Type
  6371 ;;                  3    1[COMMON] float 
  6372 ;; Registers used:
  6373 ;;		wreg, status,2, status,0
  6374 ;; Tracked objects:
  6375 ;;		On entry : 0/0
  6376 ;;		On exit  : 0/0
  6377 ;;		Unchanged: 0/0
  6378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6379 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6380 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6381 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6382 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6383 ;;Total ram usage:        8 bytes
  6384 ;; Hardware stack levels used:    1
  6385 ;; Hardware stack levels required when called:    2
  6386 ;; This function calls:
  6387 ;;		Nothing
  6388 ;; This function is called by:
  6389 ;;		___ftadd
  6390 ;;		___ftdiv
  6391 ;;		___ftmul
  6392 ;;		___lltoft
  6393 ;;		___lwtoft
  6394 ;; This function uses a non-reentrant model
  6395 ;;
  6396                           
  6397                           
  6398                           ;psect for function ___ftpack
  6399  0693                     ___ftpack:	
  6400                           
  6401                           ;incstack = 0
  6402                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  6403  0693  0874               	movf	___ftpack@exp,w
  6404  0694  1903               	btfsc	3,2
  6405  0695  2E9B               	goto	l3207
  6406  0696  0873               	movf	___ftpack@arg+2,w
  6407  0697  0472               	iorwf	___ftpack@arg+1,w
  6408  0698  0471               	iorwf	___ftpack@arg,w
  6409  0699  1D03               	skipz
  6410  069A  2EAC               	goto	l3213
  6411  069B                     l3207:	
  6412  069B  3000               	movlw	0
  6413  069C  00F1               	movwf	?___ftpack
  6414  069D  3000               	movlw	0
  6415  069E  00F2               	movwf	?___ftpack+1
  6416  069F  3000               	movlw	0
  6417  06A0  00F3               	movwf	?___ftpack+2
  6418  06A1  0008               	return
  6419  06A2                     l3211:	
  6420  06A2  3001               	movlw	1
  6421  06A3  00F6               	movwf	??___ftpack
  6422  06A4  0876               	movf	??___ftpack,w
  6423  06A5  07F4               	addwf	___ftpack@exp,f
  6424  06A6  3001               	movlw	1
  6425  06A7                     u3005:	
  6426  06A7  36F3               	lsrf	___ftpack@arg+2,f
  6427  06A8  0CF2               	rrf	___ftpack@arg+1,f
  6428  06A9  0CF1               	rrf	___ftpack@arg,f
  6429  06AA  0B89               	decfsz	9,f
  6430  06AB  2EA7               	goto	u3005
  6431  06AC                     l3213:	
  6432  06AC  30FE               	movlw	254
  6433  06AD  0573               	andwf	___ftpack@arg+2,w
  6434  06AE  1903               	btfsc	3,2
  6435  06AF  2EC5               	goto	l845
  6436  06B0  2EA2               	goto	l3211
  6437  06B1                     l3215:	
  6438  06B1  3001               	movlw	1
  6439  06B2  00F6               	movwf	??___ftpack
  6440  06B3  0876               	movf	??___ftpack,w
  6441  06B4  07F4               	addwf	___ftpack@exp,f
  6442  06B5  3001               	movlw	1
  6443  06B6  07F1               	addwf	___ftpack@arg,f
  6444  06B7  3000               	movlw	0
  6445  06B8  1803               	skipnc
  6446  06B9  3001               	movlw	1
  6447  06BA  07F2               	addwf	___ftpack@arg+1,f
  6448  06BB  3000               	movlw	0
  6449  06BC  1803               	skipnc
  6450  06BD  3001               	movlw	1
  6451  06BE  07F3               	addwf	___ftpack@arg+2,f
  6452  06BF  3001               	movlw	1
  6453  06C0                     u3025:	
  6454  06C0  36F3               	lsrf	___ftpack@arg+2,f
  6455  06C1  0CF2               	rrf	___ftpack@arg+1,f
  6456  06C2  0CF1               	rrf	___ftpack@arg,f
  6457  06C3  0B89               	decfsz	9,f
  6458  06C4  2EC0               	goto	u3025
  6459  06C5                     l845:	
  6460  06C5  30FF               	movlw	255
  6461  06C6  0573               	andwf	___ftpack@arg+2,w
  6462  06C7  1903               	btfsc	3,2
  6463  06C8  2ED6               	goto	l3223
  6464  06C9  2EB1               	goto	l3215
  6465  06CA                     l3225:	
  6466  06CA  3002               	movlw	2
  6467  06CB  0274               	subwf	___ftpack@exp,w
  6468  06CC  1C03               	btfss	3,0
  6469  06CD  2ED8               	goto	l852
  6470  06CE  3001               	movlw	1
  6471  06CF  02F4               	subwf	___ftpack@exp,f
  6472  06D0  3001               	movlw	1
  6473  06D1                     u3045:	
  6474  06D1  35F1               	lslf	___ftpack@arg,f
  6475  06D2  0DF2               	rlf	___ftpack@arg+1,f
  6476  06D3  0DF3               	rlf	___ftpack@arg+2,f
  6477  06D4  0B89               	decfsz	9,f
  6478  06D5  2ED1               	goto	u3045
  6479  06D6                     l3223:	
  6480  06D6  1FF2               	btfss	___ftpack@arg+1,7
  6481  06D7  2ECA               	goto	l3225
  6482  06D8                     l852:	
  6483  06D8  1874               	btfsc	___ftpack@exp,0
  6484  06D9  2EE0               	goto	l853
  6485  06DA  30FF               	movlw	255
  6486  06DB  05F1               	andwf	___ftpack@arg,f
  6487  06DC  307F               	movlw	127
  6488  06DD  05F2               	andwf	___ftpack@arg+1,f
  6489  06DE  30FF               	movlw	255
  6490  06DF  05F3               	andwf	___ftpack@arg+2,f
  6491  06E0                     l853:	
  6492  06E0  1003               	clrc
  6493  06E1  0CF4               	rrf	___ftpack@exp,f
  6494  06E2  0874               	movf	___ftpack@exp,w
  6495  06E3  00F6               	movwf	??___ftpack
  6496  06E4  01F7               	clrf	??___ftpack+1
  6497  06E5  01F8               	clrf	??___ftpack+2
  6498  06E6  3010               	movlw	16
  6499  06E7                     u3085:	
  6500  06E7  35F6               	lslf	??___ftpack,f
  6501  06E8  0DF7               	rlf	??___ftpack+1,f
  6502  06E9  0DF8               	rlf	??___ftpack+2,f
  6503  06EA  0B89               	decfsz	9,f
  6504  06EB  2EE7               	goto	u3085
  6505  06EC  0876               	movf	??___ftpack,w
  6506  06ED  04F1               	iorwf	___ftpack@arg,f
  6507  06EE  0877               	movf	??___ftpack+1,w
  6508  06EF  04F2               	iorwf	___ftpack@arg+1,f
  6509  06F0  0878               	movf	??___ftpack+2,w
  6510  06F1  04F3               	iorwf	___ftpack@arg+2,f
  6511  06F2  0875               	movf	___ftpack@sign,w
  6512  06F3  1903               	btfsc	3,2
  6513  06F4  0008               	return
  6514  06F5  17F3               	bsf	___ftpack@arg+2,7
  6515  06F6  0008               	return
  6516  06F7                     __end_of___ftpack:	
  6517                           
  6518                           	psect	text27
  6519  0C16                     __ptext27:	
  6520 ;; *************** function _PGMSelLong *****************
  6521 ;; Defined at:
  6522 ;;		line 103 in file "PGM.c"
  6523 ;; Parameters:    Size  Location     Type
  6524 ;;		None
  6525 ;; Auto vars:     Size  Location     Type
  6526 ;;		None
  6527 ;; Return value:  Size  Location     Type
  6528 ;;		None               void
  6529 ;; Registers used:
  6530 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6531 ;; Tracked objects:
  6532 ;;		On entry : 0/0
  6533 ;;		On exit  : 0/0
  6534 ;;		Unchanged: 0/0
  6535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6537 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6538 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6539 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6540 ;;Total ram usage:        1 bytes
  6541 ;; Hardware stack levels used:    1
  6542 ;; Hardware stack levels required when called:    4
  6543 ;; This function calls:
  6544 ;;		_LEDNormalFlash
  6545 ;;		_PGMWriteNvm
  6546 ;; This function is called by:
  6547 ;;		_SYSTask
  6548 ;; This function uses a non-reentrant model
  6549 ;;
  6550                           
  6551                           
  6552                           ;psect for function _PGMSelLong
  6553  0C16                     _PGMSelLong:	
  6554                           
  6555                           ;PGM.c: 106: pgm_cfg.menu.val=0x00;
  6556                           
  6557                           ;incstack = 0
  6558                           ; Regs used in _PGMSelLong: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6559  0C16  0021               	movlb	1	; select bank1
  6560  0C17  01CA               	clrf	(_pgm_cfg^(0+128)+2)
  6561                           
  6562                           ;PGM.c: 108: pgm_cfg.sensId=TMR1L^TMR1H;
  6563  0C18  0020               	movlb	0	; select bank0
  6564  0C19  0816               	movf	22,w	;volatile
  6565  0C1A  0617               	xorwf	23,w	;volatile
  6566  0C1B  00FA               	movwf	??_PGMSelLong
  6567  0C1C  087A               	movf	??_PGMSelLong,w
  6568  0C1D  0021               	movlb	1	; select bank1
  6569  0C1E  00CB               	movwf	(_pgm_cfg^(0+128)+3)
  6570                           
  6571                           ;PGM.c: 109: if(pgm_cfg.sensId==0x00)
  6572  0C1F  084B               	movf	(_pgm_cfg^(0+128)+3),w
  6573  0C20  1D03               	btfss	3,2
  6574  0C21  2C26               	goto	l3729
  6575                           
  6576                           ;PGM.c: 110: pgm_cfg.sensId++;
  6577  0C22  3001               	movlw	1
  6578  0C23  00FA               	movwf	??_PGMSelLong
  6579  0C24  087A               	movf	??_PGMSelLong,w
  6580  0C25  07CB               	addwf	(_pgm_cfg^(0+128)+3),f
  6581  0C26                     l3729:	
  6582                           
  6583                           ;PGM.c: 112: PGMWriteNvm();
  6584  0C26  318B  2364  318C   	fcall	_PGMWriteNvm
  6585                           
  6586                           ;PGM.c: 114: LEDNormalFlash(3);
  6587  0C29  3003               	movlw	3
  6588  0C2A  318C  24D3         	fcall	_LEDNormalFlash
  6589                           
  6590                           ;PGM.c: 116: pgm_flg.resetDone=1;
  6591  0C2C  14FC               	bsf	_pgm_flg,1
  6592  0C2D  0008               	return
  6593  0C2E                     __end_of_PGMSelLong:	
  6594                           
  6595                           	psect	text28
  6596  0E44                     __ptext28:	
  6597 ;; *************** function _DINTick *****************
  6598 ;; Defined at:
  6599 ;;		line 46 in file "DIN.c"
  6600 ;; Parameters:    Size  Location     Type
  6601 ;;		None
  6602 ;; Auto vars:     Size  Location     Type
  6603 ;;		None
  6604 ;; Return value:  Size  Location     Type
  6605 ;;		None               void
  6606 ;; Registers used:
  6607 ;;		wreg, status,2, status,0
  6608 ;; Tracked objects:
  6609 ;;		On entry : 0/0
  6610 ;;		On exit  : 0/0
  6611 ;;		Unchanged: 0/0
  6612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6614 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6615 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6616 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6617 ;;Total ram usage:        1 bytes
  6618 ;; Hardware stack levels used:    1
  6619 ;; Hardware stack levels required when called:    2
  6620 ;; This function calls:
  6621 ;;		Nothing
  6622 ;; This function is called by:
  6623 ;;		_SYSTask
  6624 ;; This function uses a non-reentrant model
  6625 ;;
  6626                           
  6627                           
  6628                           ;psect for function _DINTick
  6629  0E44                     _DINTick:	
  6630                           
  6631                           ;DIN.c: 50: if(u_flg_din.tmrDbncSel)
  6632                           
  6633                           ;incstack = 0
  6634                           ; Regs used in _DINTick: [wreg+status,2+status,0]
  6635  0E44  0020               	movlb	0	; select bank0
  6636  0E45  1C6D               	btfss	_u_flg_din,0
  6637  0E46  2E5C               	goto	l295
  6638                           
  6639                           ;DIN.c: 51: {
  6640                           ;DIN.c: 52: tmrDbncSel++;
  6641  0E47  3001               	movlw	1
  6642  0E48  00F1               	movwf	??_DINTick
  6643  0E49  0871               	movf	??_DINTick,w
  6644  0E4A  0021               	movlb	1	; select bank1
  6645  0E4B  07AC               	addwf	_tmrDbncSel^(0+128),f
  6646                           
  6647                           ;DIN.c: 53: if(tmrDbncSel>5)
  6648  0E4C  3006               	movlw	6
  6649  0E4D  022C               	subwf	_tmrDbncSel^(0+128),w
  6650  0E4E  1C03               	skipc
  6651  0E4F  2E5C               	goto	l295
  6652                           
  6653                           ;DIN.c: 54: {
  6654                           ;DIN.c: 55: u_flg_din.tmrDbncSel=0;
  6655  0E50  0020               	movlb	0	; select bank0
  6656  0E51  106D               	bcf	_u_flg_din,0
  6657                           
  6658                           ;DIN.c: 56: tmrDbncSel=0;
  6659  0E52  0021               	movlb	1	; select bank1
  6660  0E53  01AC               	clrf	_tmrDbncSel^(0+128)
  6661                           
  6662                           ;DIN.c: 58: if(u_in_sta_currTask.sel)
  6663  0E54  0020               	movlb	0	; select bank0
  6664  0E55  1C6E               	btfss	_u_in_sta_currTask,0
  6665  0E56  2E5A               	goto	l297
  6666                           
  6667                           ;DIN.c: 59: u_in_ev_down.sel=1;
  6668  0E57  0021               	movlb	1	; select bank1
  6669  0E58  142F               	bsf	_u_in_ev_down^(0+128),0
  6670  0E59  2E5C               	goto	l295
  6671  0E5A                     l297:	
  6672                           
  6673                           ;DIN.c: 60: else
  6674                           ;DIN.c: 61: u_in_ev_up.sel=1;
  6675  0E5A  0021               	movlb	1	; select bank1
  6676  0E5B  1431               	bsf	_u_in_ev_up^(0+128),0
  6677  0E5C                     l295:	
  6678                           
  6679                           ;DIN.c: 62: }
  6680                           ;DIN.c: 63: }
  6681                           ;DIN.c: 66: if(u_flg_din.tmrLongSel)
  6682  0E5C  0020               	movlb	0	; select bank0
  6683  0E5D  1CED               	btfss	_u_flg_din,1
  6684  0E5E  0008               	return
  6685                           
  6686                           ;DIN.c: 67: {
  6687                           ;DIN.c: 68: tmrLongSel++;
  6688  0E5F  3001               	movlw	1
  6689  0E60  0021               	movlb	1	; select bank1
  6690  0E61  07A7               	addwf	_tmrLongSel^(0+128),f
  6691  0E62  3000               	movlw	0
  6692  0E63  3DA8               	addwfc	(_tmrLongSel+1)^(0+128),f
  6693                           
  6694                           ;DIN.c: 69: if(tmrLongSel>200)
  6695  0E64  3000               	movlw	0
  6696  0E65  0228               	subwf	(_tmrLongSel+1)^(0+128),w
  6697  0E66  30C9               	movlw	201
  6698  0E67  1903               	skipnz
  6699  0E68  0227               	subwf	_tmrLongSel^(0+128),w
  6700  0E69  1C03               	skipc
  6701  0E6A  0008               	return
  6702                           
  6703                           ;DIN.c: 70: {
  6704                           ;DIN.c: 72: tmrLongSel=0;
  6705  0E6B  01A7               	clrf	_tmrLongSel^(0+128)
  6706  0E6C  01A8               	clrf	(_tmrLongSel+1)^(0+128)
  6707                           
  6708                           ;DIN.c: 74: u_in_ev_long.sel=1;
  6709  0E6D  1430               	bsf	_u_in_ev_long^(0+128),0
  6710  0E6E  0008               	return
  6711  0E6F                     __end_of_DINTick:	
  6712                           
  6713                           	psect	text29
  6714  0DF5                     __ptext29:	
  6715 ;; *************** function _SYSInit *****************
  6716 ;; Defined at:
  6717 ;;		line 17 in file "SYS.c"
  6718 ;; Parameters:    Size  Location     Type
  6719 ;;  state           1    wreg     unsigned char 
  6720 ;; Auto vars:     Size  Location     Type
  6721 ;;  state           1    2[COMMON] unsigned char 
  6722 ;; Return value:  Size  Location     Type
  6723 ;;		None               void
  6724 ;; Registers used:
  6725 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6726 ;; Tracked objects:
  6727 ;;		On entry : 0/0
  6728 ;;		On exit  : 0/0
  6729 ;;		Unchanged: 0/0
  6730 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6731 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6732 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6733 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6734 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6735 ;;Total ram usage:        2 bytes
  6736 ;; Hardware stack levels used:    1
  6737 ;; Hardware stack levels required when called:    2
  6738 ;; This function calls:
  6739 ;;		Nothing
  6740 ;; This function is called by:
  6741 ;;		_main
  6742 ;; This function uses a non-reentrant model
  6743 ;;
  6744                           
  6745                           
  6746                           ;psect for function _SYSInit
  6747  0DF5                     _SYSInit:	
  6748                           
  6749                           ;incstack = 0
  6750                           ; Regs used in _SYSInit: [wreg-fsr0h+status,2+status,0]
  6751                           ;SYSInit@state stored from wreg
  6752  0DF5  00F2               	movwf	SYSInit@state
  6753                           
  6754                           ;SYS.c: 19: switch(state)
  6755  0DF6  2E12               	goto	l3073
  6756  0DF7                     l3051:	
  6757                           ;SYS.c: 20: {
  6758                           ;SYS.c: 21: case 0:
  6759                           
  6760                           
  6761                           ;SYS.c: 23: OPTION_REG=0b00000110; OSCCON=0b01110011; WDTCON=0b00001001; IOCBP=0b0000000
      +                          0; IOCBN=0b00000000; TMR0=255-156; INTCON|=0b00100000; INTCON&=0b11111011; PIR1=0b000000
      +                          00; PIR2=0b00000000; PIE1=0b00000000; PIE2=0b00000000;
  6762  0DF7  3006               	movlw	6
  6763  0DF8  0021               	movlb	1	; select bank1
  6764  0DF9  0095               	movwf	21	;volatile
  6765  0DFA  3073               	movlw	115
  6766  0DFB  0099               	movwf	25	;volatile
  6767  0DFC  3009               	movlw	9
  6768  0DFD  0097               	movwf	23	;volatile
  6769  0DFE  0027               	movlb	7	; select bank7
  6770  0DFF  0194               	clrf	20	;volatile
  6771  0E00  0195               	clrf	21	;volatile
  6772  0E01  3063               	movlw	99
  6773  0E02  0020               	movlb	0	; select bank0
  6774  0E03  0095               	movwf	21	;volatile
  6775  0E04  168B               	bsf	11,5	;volatile
  6776  0E05  30FB               	movlw	251
  6777  0E06  00F1               	movwf	??_SYSInit
  6778  0E07  0871               	movf	??_SYSInit,w
  6779  0E08  058B               	andwf	11,f	;volatile
  6780  0E09  0191               	clrf	17	;volatile
  6781  0E0A  0192               	clrf	18	;volatile
  6782  0E0B  0021               	movlb	1	; select bank1
  6783  0E0C  0191               	clrf	17	;volatile
  6784  0E0D  0192               	clrf	18	;volatile
  6785                           
  6786                           ;SYS.c: 24: break;
  6787  0E0E  0008               	return
  6788  0E0F                     l3069:	
  6789                           ;SYS.c: 25: case 1:
  6790                           
  6791                           
  6792                           ;SYS.c: 27: u_SYS_STA.VAL=0;
  6793  0E0F  0021               	movlb	1	; select bank1
  6794  0E10  01AE               	clrf	_u_SYS_STA^(0+128)
  6795                           
  6796                           ;SYS.c: 32: }
  6797                           
  6798                           ;SYS.c: 28: break;
  6799  0E11  0008               	return
  6800  0E12                     l3073:	
  6801  0E12  0872               	movf	SYSInit@state,w
  6802                           
  6803                           ; Switch size 1, requested type "space"
  6804                           ; Number of cases is 2, Range of values is 0 to 1
  6805                           ; switch strategies available:
  6806                           ; Name         Instructions Cycles
  6807                           ; simple_byte            7     4 (average)
  6808                           ; direct_byte           10     6 (fixed)
  6809                           ; jumptable            260     6 (fixed)
  6810                           ;	Chosen strategy is simple_byte
  6811  0E13  3A00               	xorlw	0	; case 0
  6812  0E14  1903               	skipnz
  6813  0E15  2DF7               	goto	l3051
  6814  0E16  3A01               	xorlw	1	; case 1
  6815  0E17  1903               	skipnz
  6816  0E18  2E0F               	goto	l3069
  6817  0E19  2E1A               	goto	l598
  6818  0E1A                     l598:	
  6819  0E1A  0008               	return
  6820  0E1B                     __end_of_SYSInit:	
  6821                           
  6822                           	psect	text30
  6823  0CF1                     __ptext30:	
  6824 ;; *************** function _SPIInit *****************
  6825 ;; Defined at:
  6826 ;;		line 8 in file "SPI.c"
  6827 ;; Parameters:    Size  Location     Type
  6828 ;;  state           1    wreg     unsigned char 
  6829 ;; Auto vars:     Size  Location     Type
  6830 ;;  state           1    2[COMMON] unsigned char 
  6831 ;; Return value:  Size  Location     Type
  6832 ;;		None               void
  6833 ;; Registers used:
  6834 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6835 ;; Tracked objects:
  6836 ;;		On entry : 0/0
  6837 ;;		On exit  : 0/0
  6838 ;;		Unchanged: 0/0
  6839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6841 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6842 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6843 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6844 ;;Total ram usage:        2 bytes
  6845 ;; Hardware stack levels used:    1
  6846 ;; Hardware stack levels required when called:    2
  6847 ;; This function calls:
  6848 ;;		Nothing
  6849 ;; This function is called by:
  6850 ;;		_main
  6851 ;; This function uses a non-reentrant model
  6852 ;;
  6853                           
  6854                           
  6855                           ;psect for function _SPIInit
  6856  0CF1                     _SPIInit:	
  6857                           
  6858                           ;incstack = 0
  6859                           ; Regs used in _SPIInit: [wreg-fsr0h+status,2+status,0]
  6860                           ;SPIInit@state stored from wreg
  6861  0CF1  00F2               	movwf	SPIInit@state
  6862                           
  6863                           ;SPI.c: 10: switch(state)
  6864  0CF2  2D03               	goto	l2963
  6865  0CF3                     l60:	
  6866                           ;SPI.c: 11: {
  6867                           ;SPI.c: 12: case 0:
  6868                           
  6869                           
  6870                           ;SPI.c: 14: TRISC|=0b00010000; TRISC&=0b11010111; SSPCONbits.SSPEN=0; SSPBUF=0x00; SSPCO
      +                          N1=0b00000001; SSPCON2=0b00000000; SSPSTAT=0b01000000; SSPCONbits.SSPEN=1;
  6871  0CF3  0021               	movlb	1	; select bank1
  6872  0CF4  160E               	bsf	14,4	;volatile
  6873  0CF5  30D7               	movlw	215
  6874  0CF6  00F1               	movwf	??_SPIInit
  6875  0CF7  0871               	movf	??_SPIInit,w
  6876  0CF8  058E               	andwf	14,f	;volatile
  6877  0CF9  0024               	movlb	4	; select bank4
  6878  0CFA  1295               	bcf	21,5	;volatile
  6879  0CFB  0191               	clrf	17	;volatile
  6880  0CFC  3001               	movlw	1
  6881  0CFD  0095               	movwf	21	;volatile
  6882  0CFE  0196               	clrf	22	;volatile
  6883  0CFF  3040               	movlw	64
  6884  0D00  0094               	movwf	20	;volatile
  6885  0D01  1695               	bsf	21,5	;volatile
  6886                           
  6887                           ;SPI.c: 22: }
  6888                           
  6889                           ;SPI.c: 21: break;
  6890                           
  6891                           ;SPI.c: 19: case 2:
  6892                           
  6893                           ;SPI.c: 18: break;
  6894                           
  6895                           ;SPI.c: 16: case 1:
  6896                           
  6897                           ;SPI.c: 15: break;
  6898  0D02  0008               	return
  6899  0D03                     l2963:	
  6900  0D03  0872               	movf	SPIInit@state,w
  6901                           
  6902                           ; Switch size 1, requested type "space"
  6903                           ; Number of cases is 3, Range of values is 0 to 2
  6904                           ; switch strategies available:
  6905                           ; Name         Instructions Cycles
  6906                           ; simple_byte           10     6 (average)
  6907                           ; direct_byte           12     6 (fixed)
  6908                           ; jumptable            260     6 (fixed)
  6909                           ;	Chosen strategy is simple_byte
  6910  0D04  3A00               	xorlw	0	; case 0
  6911  0D05  1903               	skipnz
  6912  0D06  2CF3               	goto	l60
  6913  0D07  3A01               	xorlw	1	; case 1
  6914  0D08  1903               	skipnz
  6915  0D09  2D0E               	goto	l64
  6916  0D0A  3A03               	xorlw	3	; case 2
  6917  0D0B  1903               	skipnz
  6918  0D0C  2D0E               	goto	l64
  6919  0D0D  2D0E               	goto	l64
  6920  0D0E                     l64:	
  6921  0D0E  0008               	return
  6922  0D0F                     __end_of_SPIInit:	
  6923                           
  6924                           	psect	text31
  6925  0B1A                     __ptext31:	
  6926 ;; *************** function _RTXTask *****************
  6927 ;; Defined at:
  6928 ;;		line 106 in file "RTX.c"
  6929 ;; Parameters:    Size  Location     Type
  6930 ;;		None
  6931 ;; Auto vars:     Size  Location     Type
  6932 ;;		None
  6933 ;; Return value:  Size  Location     Type
  6934 ;;		None               void
  6935 ;; Registers used:
  6936 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6937 ;; Tracked objects:
  6938 ;;		On entry : 0/0
  6939 ;;		On exit  : 0/0
  6940 ;;		Unchanged: 0/0
  6941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6943 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6945 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6946 ;;Total ram usage:        0 bytes
  6947 ;; Hardware stack levels used:    1
  6948 ;; Hardware stack levels required when called:    6
  6949 ;; This function calls:
  6950 ;;		_RTXReadPkt
  6951 ;; This function is called by:
  6952 ;;		_main
  6953 ;; This function uses a non-reentrant model
  6954 ;;
  6955                           
  6956                           
  6957                           ;psect for function _RTXTask
  6958  0B1A                     _RTXTask:	
  6959                           
  6960                           ;RTX.c: 109: if(!(PORTBbits.RB0))
  6961                           
  6962                           ;incstack = 0
  6963                           ; Regs used in _RTXTask: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6964  0B1A  0020               	movlb	0	; select bank0
  6965  0B1B  180D               	btfsc	13,0	;volatile
  6966  0B1C  0008               	return
  6967                           
  6968                           ;RTX.c: 110: RTXReadPkt();
  6969  0B1D  3187  27A0         	fcall	_RTXReadPkt
  6970  0B1F  0008               	return
  6971  0B20                     __end_of_RTXTask:	
  6972                           
  6973                           	psect	text32
  6974  07A0                     __ptext32:	
  6975 ;; *************** function _RTXReadPkt *****************
  6976 ;; Defined at:
  6977 ;;		line 158 in file "RTX.c"
  6978 ;; Parameters:    Size  Location     Type
  6979 ;;		None
  6980 ;; Auto vars:     Size  Location     Type
  6981 ;;  numRxByte       1   70[BANK0 ] unsigned char 
  6982 ;; Return value:  Size  Location     Type
  6983 ;;		None               void
  6984 ;; Registers used:
  6985 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6986 ;; Tracked objects:
  6987 ;;		On entry : 0/0
  6988 ;;		On exit  : 0/0
  6989 ;;		Unchanged: 0/0
  6990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6992 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6993 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6994 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6995 ;;Total ram usage:        2 bytes
  6996 ;; Hardware stack levels used:    1
  6997 ;; Hardware stack levels required when called:    5
  6998 ;; This function calls:
  6999 ;;		_CC1Read
  7000 ;;		_CC1Strobe
  7001 ;;		_LEDNormalFlash
  7002 ;;		_PGMPgmOff
  7003 ;;		_PGMWriteNvm
  7004 ;;		_RTXRcvPkt
  7005 ;; This function is called by:
  7006 ;;		_RTXTask
  7007 ;; This function uses a non-reentrant model
  7008 ;;
  7009                           
  7010                           
  7011                           ;psect for function _RTXReadPkt
  7012  07A0                     _RTXReadPkt:	
  7013                           
  7014                           ;RTX.c: 160: unsigned char numRxByte;
  7015                           ;RTX.c: 163: CC1Read(0x3B,(&(numRxByte)),1);
  7016                           
  7017                           ;incstack = 0
  7018                           ; Regs used in _RTXReadPkt: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7019  07A0  3066               	movlw	(low (RTXReadPkt@numRxByte| 0))& (0+255)
  7020  07A1  0020               	movlb	0	; select bank0
  7021  07A2  00E5               	movwf	??_RTXReadPkt
  7022  07A3  0865               	movf	??_RTXReadPkt,w
  7023  07A4  00F7               	movwf	CC1Read@dst
  7024  07A5  01F8               	clrf	CC1Read@len
  7025  07A6  0AF8               	incf	CC1Read@len,f
  7026  07A7  303B               	movlw	59
  7027  07A8  318C  247C  3187   	fcall	_CC1Read
  7028                           
  7029                           ;RTX.c: 164: while(numRxByte>=0x0B)
  7030  07AB  300B               	movlw	11
  7031  07AC  0020               	movlb	0	; select bank0
  7032  07AD  0266               	subwf	RTXReadPkt@numRxByte,w
  7033  07AE  1C03               	btfss	3,0
  7034  07AF  0008               	return
  7035  07B0  0064               	clrwdt	;# 
  7036                           
  7037                           ;RTX.c: 168: RTXRcvPkt(pktRx,0x0B);
  7038  07B1  300B               	movlw	11
  7039  07B2  0020               	movlb	0	; select bank0
  7040  07B3  00E5               	movwf	??_RTXReadPkt
  7041  07B4  0865               	movf	??_RTXReadPkt,w
  7042  07B5  00A0               	movwf	RTXRcvPkt@len
  7043  07B6  30B2               	movlw	(low (_pktRx| 0))& (0+255)
  7044  07B7  318B  2356  3187   	fcall	_RTXRcvPkt
  7045                           
  7046                           ;RTX.c: 170: if(pgm_flg.pgmonoff)
  7047  07BA  1C7C               	btfss	_pgm_flg,0
  7048  07BB  2FDA               	goto	l3769
  7049                           
  7050                           ;RTX.c: 171: {
  7051                           ;RTX.c: 173: if(pktRx[OP]==rPGM)
  7052  07BC  3081               	movlw	129
  7053  07BD  0021               	movlb	1	; select bank1
  7054  07BE  0636               	xorwf	(_pktRx^(0+128)+4),w
  7055  07BF  1D03               	btfss	3,2
  7056  07C0  2FA0               	goto	_RTXReadPkt
  7057                           
  7058                           ;RTX.c: 174: {
  7059                           ;RTX.c: 175: if(pktRx[ID_DEST]==pgm_cfg.sensId)
  7060  07C1  084B               	movf	(_pgm_cfg^(0+128)+3),w
  7061  07C2  0632               	xorwf	_pktRx^(0+128),w
  7062  07C3  1D03               	skipz
  7063  07C4  2FA0               	goto	_RTXReadPkt
  7064                           
  7065                           ;RTX.c: 176: {
  7066                           ;RTX.c: 178: pgm_cfg.baseId=pktRx[ID_SOURCE];
  7067  07C5  0834               	movf	(_pktRx^(0+128)+2),w
  7068  07C6  0020               	movlb	0	; select bank0
  7069  07C7  00E5               	movwf	??_RTXReadPkt
  7070  07C8  0865               	movf	??_RTXReadPkt,w
  7071  07C9  0021               	movlb	1	; select bank1
  7072  07CA  00CC               	movwf	(_pgm_cfg^(0+128)+4)
  7073                           
  7074                           ;RTX.c: 180: pgm_cfg.menu.baseIdProg=1;
  7075  07CB  144A               	bsf	(_pgm_cfg^(0+128)+2),0
  7076                           
  7077                           ;RTX.c: 181: PGMWriteNvm();
  7078  07CC  318B  2364  3187   	fcall	_PGMWriteNvm
  7079                           
  7080                           ;RTX.c: 183: PGMPgmOff();
  7081  07CF  318B  2310  3187   	fcall	_PGMPgmOff
  7082                           
  7083                           ;RTX.c: 185: tmrRcvPkt=0;
  7084  07D2  0021               	movlb	1	; select bank1
  7085  07D3  01AD               	clrf	_tmrRcvPkt^(0+128)
  7086                           
  7087                           ;RTX.c: 187: LEDNormalFlash(3);
  7088  07D4  3003               	movlw	3
  7089  07D5  318C  24D3  3187   	fcall	_LEDNormalFlash
  7090                           
  7091                           ;RTX.c: 189: flg_slp.goSleep=1;
  7092  07D8  0021               	movlb	1	; select bank1
  7093  07D9  2FED               	goto	l3779
  7094  07DA                     l3769:	
  7095                           ;RTX.c: 190: }
  7096                           ;RTX.c: 191: }
  7097                           ;RTX.c: 192: }
  7098                           
  7099                           
  7100                           ;RTX.c: 193: else
  7101                           ;RTX.c: 194: {
  7102                           ;RTX.c: 196: if(pktRx[OP]==rDAT)
  7103  07DA  3080               	movlw	128
  7104  07DB  0021               	movlb	1	; select bank1
  7105  07DC  0636               	xorwf	(_pktRx^(0+128)+4),w
  7106  07DD  1D03               	btfss	3,2
  7107  07DE  2FA0               	goto	_RTXReadPkt
  7108                           
  7109                           ;RTX.c: 197: {
  7110                           ;RTX.c: 198: if((pktRx[ID_DEST]==pgm_cfg.sensId) && (pktRx[ID_SOURCE]==pgm_cfg.baseId))
  7111  07DF  084B               	movf	(_pgm_cfg^(0+128)+3),w
  7112  07E0  0632               	xorwf	_pktRx^(0+128),w
  7113  07E1  1D03               	skipz
  7114  07E2  2FA0               	goto	_RTXReadPkt
  7115  07E3  084C               	movf	(_pgm_cfg^(0+128)+4),w
  7116  07E4  0634               	xorwf	(_pktRx^(0+128)+2),w
  7117  07E5  1D03               	skipz
  7118  07E6  2FA0               	goto	_RTXReadPkt
  7119                           
  7120                           ;RTX.c: 199: {
  7121                           ;RTX.c: 201: CC1Strobe(SIDLE);
  7122  07E7  3036               	movlw	54
  7123  07E8  318B  23C1  3187   	fcall	_CC1Strobe
  7124                           
  7125                           ;RTX.c: 203: tmrRcvPkt=0;
  7126  07EB  0021               	movlb	1	; select bank1
  7127  07EC  01AD               	clrf	_tmrRcvPkt^(0+128)
  7128  07ED                     l3779:	
  7129                           
  7130                           ;RTX.c: 205: flg_slp.goSleep=1;
  7131  07ED  142A               	bsf	_flg_slp^(0+128),0
  7132  07EE  2FA0               	goto	_RTXReadPkt
  7133  07EF                     __end_of_RTXReadPkt:	
  7134                           ;RTX.c: 206: }
  7135                           ;RTX.c: 207: }
  7136                           ;RTX.c: 208: }
  7137                           ;RTX.c: 210: CC1Read(0x3B,(&(numRxByte)),1);
  7138                           
  7139                           
  7140                           	psect	text33
  7141  0B56                     __ptext33:	
  7142 ;; *************** function _RTXRcvPkt *****************
  7143 ;; Defined at:
  7144 ;;		line 152 in file "RTX.c"
  7145 ;; Parameters:    Size  Location     Type
  7146 ;;  dst             1    wreg     PTR unsigned char 
  7147 ;;		 -> pktRx(11), 
  7148 ;;  len             1    0[BANK0 ] unsigned char 
  7149 ;; Auto vars:     Size  Location     Type
  7150 ;;  dst             1    3[BANK0 ] PTR unsigned char 
  7151 ;;		 -> pktRx(11), 
  7152 ;; Return value:  Size  Location     Type
  7153 ;;		None               void
  7154 ;; Registers used:
  7155 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7156 ;; Tracked objects:
  7157 ;;		On entry : 0/0
  7158 ;;		On exit  : 0/0
  7159 ;;		Unchanged: 0/0
  7160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7161 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7162 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7163 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7164 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7165 ;;Total ram usage:        4 bytes
  7166 ;; Hardware stack levels used:    1
  7167 ;; Hardware stack levels required when called:    4
  7168 ;; This function calls:
  7169 ;;		_CC1Read
  7170 ;; This function is called by:
  7171 ;;		_RTXReadPkt
  7172 ;; This function uses a non-reentrant model
  7173 ;;
  7174                           
  7175                           
  7176                           ;psect for function _RTXRcvPkt
  7177  0B56                     _RTXRcvPkt:	
  7178                           
  7179                           ;incstack = 0
  7180                           ; Regs used in _RTXRcvPkt: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7181                           ;RTXRcvPkt@dst stored from wreg
  7182  0B56  0020               	movlb	0	; select bank0
  7183  0B57  00A3               	movwf	RTXRcvPkt@dst
  7184                           
  7185                           ;RTX.c: 155: CC1Read(0x3F,dst,len);
  7186  0B58  0823               	movf	RTXRcvPkt@dst,w
  7187  0B59  00A1               	movwf	??_RTXRcvPkt
  7188  0B5A  0821               	movf	??_RTXRcvPkt,w
  7189  0B5B  00F7               	movwf	CC1Read@dst
  7190  0B5C  0820               	movf	RTXRcvPkt@len,w
  7191  0B5D  00A2               	movwf	??_RTXRcvPkt+1
  7192  0B5E  0822               	movf	??_RTXRcvPkt+1,w
  7193  0B5F  00F8               	movwf	CC1Read@len
  7194  0B60  303F               	movlw	63
  7195  0B61  318C  247C         	fcall	_CC1Read
  7196  0B63  0008               	return
  7197  0B64                     __end_of_RTXRcvPkt:	
  7198                           
  7199                           	psect	text34
  7200  0C7C                     __ptext34:	
  7201 ;; *************** function _CC1Read *****************
  7202 ;; Defined at:
  7203 ;;		line 116 in file "CC1.c"
  7204 ;; Parameters:    Size  Location     Type
  7205 ;;  addr            1    wreg     unsigned char 
  7206 ;;  dst             1    7[COMMON] PTR unsigned char 
  7207 ;;		 -> pktRx(11), RTXReadPkt@numRxByte(1), RTXSndPkt@numTxByte(1), RTXSndPkt@numRxByte(1), 
  7208 ;;		 -> RTXSndPkt@sta(1), 
  7209 ;;  len             1    8[COMMON] unsigned char 
  7210 ;; Auto vars:     Size  Location     Type
  7211 ;;  addr            1   10[COMMON] unsigned char 
  7212 ;;  cc1Addr         1   11[COMMON] unsigned char 
  7213 ;; Return value:  Size  Location     Type
  7214 ;;		None               void
  7215 ;; Registers used:
  7216 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7217 ;; Tracked objects:
  7218 ;;		On entry : 0/0
  7219 ;;		On exit  : 0/0
  7220 ;;		Unchanged: 0/0
  7221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7222 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7223 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7224 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7225 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7226 ;;Total ram usage:        5 bytes
  7227 ;; Hardware stack levels used:    1
  7228 ;; Hardware stack levels required when called:    3
  7229 ;; This function calls:
  7230 ;;		_SPIRead
  7231 ;;		_SPIWrite
  7232 ;; This function is called by:
  7233 ;;		_RTXSndPkt
  7234 ;;		_RTXRcvPkt
  7235 ;;		_RTXReadPkt
  7236 ;; This function uses a non-reentrant model
  7237 ;;
  7238                           
  7239                           
  7240                           ;psect for function _CC1Read
  7241  0C7C                     _CC1Read:	
  7242                           
  7243                           ;incstack = 0
  7244                           ; Regs used in _CC1Read: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7245                           ;CC1Read@addr stored from wreg
  7246  0C7C  00FA               	movwf	CC1Read@addr
  7247                           
  7248                           ;CC1.c: 118: unsigned char cc1Addr;
  7249                           ;CC1.c: 121: LATAbits.LATA5=0;
  7250  0C7D  0022               	movlb	2	; select bank2
  7251  0C7E  128C               	bcf	12,5	;volatile
  7252                           
  7253                           ;CC1.c: 124: cc1Addr=((addr&0b00111111)|0b11000000);
  7254  0C7F  087A               	movf	CC1Read@addr,w
  7255  0C80  393F               	andlw	63
  7256  0C81  38C0               	iorlw	192
  7257  0C82  00F9               	movwf	??_CC1Read
  7258  0C83  0879               	movf	??_CC1Read,w
  7259  0C84  00FB               	movwf	CC1Read@cc1Addr
  7260                           
  7261                           ;CC1.c: 125: SPIWrite((&(cc1Addr)),1);
  7262  0C85  307B               	movlw	low CC1Read@cc1Addr
  7263  0C86  00F1               	movwf	SPIWrite@srcPtr
  7264  0C87  3000               	movlw	high CC1Read@cc1Addr
  7265  0C88  00F2               	movwf	SPIWrite@srcPtr+1
  7266  0C89  01F3               	clrf	SPIWrite@len
  7267  0C8A  0AF3               	incf	SPIWrite@len,f
  7268  0C8B  318C  2498  318C   	fcall	_SPIWrite
  7269                           
  7270                           ;CC1.c: 128: SPIRead(dst,len);
  7271  0C8E  0878               	movf	CC1Read@len,w
  7272  0C8F  00F9               	movwf	??_CC1Read
  7273  0C90  0879               	movf	??_CC1Read,w
  7274  0C91  00F1               	movwf	SPIRead@len
  7275  0C92  0877               	movf	CC1Read@dst,w
  7276  0C93  318D  256A         	fcall	_SPIRead
  7277                           
  7278                           ;CC1.c: 131: LATAbits.LATA5=1;
  7279  0C95  0022               	movlb	2	; select bank2
  7280  0C96  168C               	bsf	12,5	;volatile
  7281  0C97  0008               	return
  7282  0C98                     __end_of_CC1Read:	
  7283                           
  7284                           	psect	text35
  7285  0D6A                     __ptext35:	
  7286 ;; *************** function _SPIRead *****************
  7287 ;; Defined at:
  7288 ;;		line 25 in file "SPI.c"
  7289 ;; Parameters:    Size  Location     Type
  7290 ;;  dstPtr          1    wreg     PTR unsigned char 
  7291 ;;		 -> pktRx(11), RTXReadPkt@numRxByte(1), RTXSndPkt@numTxByte(1), RTXSndPkt@numRxByte(1), 
  7292 ;;		 -> RTXSndPkt@sta(1), 
  7293 ;;  len             1    1[COMMON] unsigned char 
  7294 ;; Auto vars:     Size  Location     Type
  7295 ;;  dstPtr          1    4[COMMON] PTR unsigned char 
  7296 ;;		 -> pktRx(11), RTXReadPkt@numRxByte(1), RTXSndPkt@numTxByte(1), RTXSndPkt@numRxByte(1), 
  7297 ;;		 -> RTXSndPkt@sta(1), 
  7298 ;;  i               1    5[COMMON] unsigned char 
  7299 ;; Return value:  Size  Location     Type
  7300 ;;		None               void
  7301 ;; Registers used:
  7302 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7303 ;; Tracked objects:
  7304 ;;		On entry : 0/0
  7305 ;;		On exit  : 0/0
  7306 ;;		Unchanged: 0/0
  7307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7308 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7309 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7310 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7311 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7312 ;;Total ram usage:        5 bytes
  7313 ;; Hardware stack levels used:    1
  7314 ;; Hardware stack levels required when called:    2
  7315 ;; This function calls:
  7316 ;;		Nothing
  7317 ;; This function is called by:
  7318 ;;		_CC1Read
  7319 ;; This function uses a non-reentrant model
  7320 ;;
  7321                           
  7322                           
  7323                           ;psect for function _SPIRead
  7324  0D6A                     _SPIRead:	
  7325                           
  7326                           ;incstack = 0
  7327                           ; Regs used in _SPIRead: [wreg+fsr1l+fsr1h+status,2+status,0]
  7328                           ;SPIRead@dstPtr stored from wreg
  7329  0D6A  00F4               	movwf	SPIRead@dstPtr
  7330                           
  7331                           ;SPI.c: 27: unsigned char i;
  7332                           ;SPI.c: 29: for(i=0;i<len;i++)
  7333  0D6B  01F5               	clrf	SPIRead@i
  7334  0D6C                     l3243:	
  7335  0D6C  0871               	movf	SPIRead@len,w
  7336  0D6D  0275               	subwf	SPIRead@i,w
  7337  0D6E  1803               	btfsc	3,0
  7338  0D6F  0008               	return
  7339                           
  7340                           ;SPI.c: 30: {
  7341                           ;SPI.c: 31: PIR1bits.SSPIF=0;
  7342  0D70  0020               	movlb	0	; select bank0
  7343  0D71  1191               	bcf	17,3	;volatile
  7344                           
  7345                           ;SPI.c: 32: SSPBUF=0xFF;
  7346  0D72  30FF               	movlw	255
  7347  0D73  0024               	movlb	4	; select bank4
  7348  0D74  0091               	movwf	17	;volatile
  7349  0D75                     l69:	
  7350                           ;SPI.c: 33: while(!(PIR1bits.SSPIF))
  7351                           
  7352  0D75  0020               	movlb	0	; select bank0
  7353  0D76  1991               	btfsc	17,3	;volatile
  7354  0D77  2D7A               	goto	l3239
  7355                           
  7356                           ;SPI.c: 34: __nop();
  7357  0D78  0000               	nop
  7358  0D79  2D75               	goto	l69
  7359  0D7A                     l3239:	
  7360                           
  7361                           ;SPI.c: 35: (*(dstPtr+i))=SSPBUF;
  7362  0D7A  0024               	movlb	4	; select bank4
  7363  0D7B  0811               	movf	17,w	;volatile
  7364  0D7C  00F2               	movwf	??_SPIRead
  7365  0D7D  0875               	movf	SPIRead@i,w
  7366  0D7E  0774               	addwf	SPIRead@dstPtr,w
  7367  0D7F  00F3               	movwf	??_SPIRead+1
  7368  0D80  0873               	movf	??_SPIRead+1,w
  7369  0D81  0086               	movwf	6
  7370  0D82  0187               	clrf	7
  7371  0D83  0872               	movf	??_SPIRead,w
  7372  0D84  0081               	movwf	1
  7373  0D85  3001               	movlw	1
  7374  0D86  00F2               	movwf	??_SPIRead
  7375  0D87  0872               	movf	??_SPIRead,w
  7376  0D88  07F5               	addwf	SPIRead@i,f
  7377  0D89  2D6C               	goto	l3243
  7378  0D8A                     __end_of_SPIRead:	
  7379                           
  7380                           	psect	text36
  7381  0B10                     __ptext36:	
  7382 ;; *************** function _PGMPgmOff *****************
  7383 ;; Defined at:
  7384 ;;		line 71 in file "PGM.c"
  7385 ;; Parameters:    Size  Location     Type
  7386 ;;		None
  7387 ;; Auto vars:     Size  Location     Type
  7388 ;;		None
  7389 ;; Return value:  Size  Location     Type
  7390 ;;		None               void
  7391 ;; Registers used:
  7392 ;;		None
  7393 ;; Tracked objects:
  7394 ;;		On entry : 0/0
  7395 ;;		On exit  : 0/0
  7396 ;;		Unchanged: 0/0
  7397 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7398 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7401 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7402 ;;Total ram usage:        0 bytes
  7403 ;; Hardware stack levels used:    1
  7404 ;; Hardware stack levels required when called:    2
  7405 ;; This function calls:
  7406 ;;		Nothing
  7407 ;; This function is called by:
  7408 ;;		_RTXReadPkt
  7409 ;;		_RTXSendPgm
  7410 ;;		_SYSTask
  7411 ;; This function uses a non-reentrant model
  7412 ;;
  7413                           
  7414                           
  7415                           ;psect for function _PGMPgmOff
  7416  0B10                     _PGMPgmOff:	
  7417                           
  7418                           ;PGM.c: 74: LATCbits.LATC7=1;
  7419                           
  7420                           ;incstack = 0
  7421                           ; Regs used in _PGMPgmOff: []
  7422  0B10  0022               	movlb	2	; select bank2
  7423  0B11  178E               	bsf	14,7	;volatile
  7424                           
  7425                           ;PGM.c: 76: pgm_flg.pgmonoff=0;
  7426  0B12  107C               	bcf	_pgm_flg,0
  7427  0B13  0008               	return
  7428  0B14                     __end_of_PGMPgmOff:	
  7429                           
  7430                           	psect	text37
  7431  0CD3                     __ptext37:	
  7432 ;; *************** function _LEDNormalFlash *****************
  7433 ;; Defined at:
  7434 ;;		line 24 in file "LED.c"
  7435 ;; Parameters:    Size  Location     Type
  7436 ;;  num             1    wreg     unsigned char 
  7437 ;; Auto vars:     Size  Location     Type
  7438 ;;  num             1    8[COMMON] unsigned char 
  7439 ;;  i               1    9[COMMON] unsigned char 
  7440 ;; Return value:  Size  Location     Type
  7441 ;;		None               void
  7442 ;; Registers used:
  7443 ;;		wreg, status,2, status,0, pclath, cstack
  7444 ;; Tracked objects:
  7445 ;;		On entry : 0/0
  7446 ;;		On exit  : 0/0
  7447 ;;		Unchanged: 0/0
  7448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7449 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7450 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7451 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7452 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7453 ;;Total ram usage:        3 bytes
  7454 ;; Hardware stack levels used:    1
  7455 ;; Hardware stack levels required when called:    3
  7456 ;; This function calls:
  7457 ;;		_DLYDelay_ms
  7458 ;; This function is called by:
  7459 ;;		_PGMSelLong
  7460 ;;		_RTXReadPkt
  7461 ;; This function uses a non-reentrant model
  7462 ;;
  7463                           
  7464                           
  7465                           ;psect for function _LEDNormalFlash
  7466  0CD3                     _LEDNormalFlash:	
  7467                           
  7468                           ;incstack = 0
  7469                           ; Regs used in _LEDNormalFlash: [wreg+status,2+status,0+pclath+cstack]
  7470                           ;LEDNormalFlash@num stored from wreg
  7471  0CD3  00F8               	movwf	LEDNormalFlash@num
  7472                           
  7473                           ;LED.c: 26: unsigned char i;
  7474                           ;LED.c: 28: for(i=0;i<num;i++)
  7475  0CD4  01F9               	clrf	LEDNormalFlash@i
  7476  0CD5                     l3681:	
  7477  0CD5  0878               	movf	LEDNormalFlash@num,w
  7478  0CD6  0279               	subwf	LEDNormalFlash@i,w
  7479  0CD7  1803               	btfsc	3,0
  7480  0CD8  0008               	return
  7481  0CD9  0064               	clrwdt	;# 
  7482                           
  7483                           ;LED.c: 31: LATCbits.LATC7=0;
  7484  0CDA  0022               	movlb	2	; select bank2
  7485  0CDB  138E               	bcf	14,7	;volatile
  7486                           
  7487                           ;LED.c: 32: DLYDelay_ms(200);
  7488  0CDC  30C8               	movlw	200
  7489  0CDD  00F1               	movwf	DLYDelay_ms@val
  7490  0CDE  3000               	movlw	0
  7491  0CDF  00F2               	movwf	DLYDelay_ms@val+1
  7492  0CE0  318C  242E  318C   	fcall	_DLYDelay_ms
  7493                           
  7494                           ;LED.c: 33: LATCbits.LATC7=1;
  7495  0CE3  0022               	movlb	2	; select bank2
  7496  0CE4  178E               	bsf	14,7	;volatile
  7497                           
  7498                           ;LED.c: 34: DLYDelay_ms(200);
  7499  0CE5  30C8               	movlw	200
  7500  0CE6  00F1               	movwf	DLYDelay_ms@val
  7501  0CE7  3000               	movlw	0
  7502  0CE8  00F2               	movwf	DLYDelay_ms@val+1
  7503  0CE9  318C  242E  318C   	fcall	_DLYDelay_ms
  7504  0CEC  3001               	movlw	1
  7505  0CED  00F7               	movwf	??_LEDNormalFlash
  7506  0CEE  0877               	movf	??_LEDNormalFlash,w
  7507  0CEF  07F9               	addwf	LEDNormalFlash@i,f
  7508  0CF0  2CD5               	goto	l3681
  7509  0CF1                     __end_of_LEDNormalFlash:	
  7510                           
  7511                           	psect	text38
  7512  0C2E                     __ptext38:	
  7513 ;; *************** function _DLYDelay_ms *****************
  7514 ;; Defined at:
  7515 ;;		line 17 in file "DLY.c"
  7516 ;; Parameters:    Size  Location     Type
  7517 ;;  val             2    1[COMMON] unsigned short 
  7518 ;; Auto vars:     Size  Location     Type
  7519 ;;  i               2    5[COMMON] unsigned short 
  7520 ;; Return value:  Size  Location     Type
  7521 ;;		None               void
  7522 ;; Registers used:
  7523 ;;		wreg, status,2
  7524 ;; Tracked objects:
  7525 ;;		On entry : 0/0
  7526 ;;		On exit  : 0/0
  7527 ;;		Unchanged: 0/0
  7528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7529 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7530 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7531 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7532 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7533 ;;Total ram usage:        6 bytes
  7534 ;; Hardware stack levels used:    1
  7535 ;; Hardware stack levels required when called:    2
  7536 ;; This function calls:
  7537 ;;		Nothing
  7538 ;; This function is called by:
  7539 ;;		_ADCConv
  7540 ;;		_CC1Init
  7541 ;;		_LEDNormalFlash
  7542 ;;		_LEDFastFlash
  7543 ;;		_RTXAwake
  7544 ;;		_RTXStartSendData
  7545 ;;		_RTXStartSendPgm
  7546 ;;		_LEDVFastFlash
  7547 ;; This function uses a non-reentrant model
  7548 ;;
  7549                           
  7550                           
  7551                           ;psect for function _DLYDelay_ms
  7552  0C2E                     _DLYDelay_ms:	
  7553                           
  7554                           ;DLY.c: 19: unsigned short i;
  7555                           ;DLY.c: 21: for(i=0;i<val;i++)
  7556                           
  7557                           ;incstack = 0
  7558                           ; Regs used in _DLYDelay_ms: [wreg+status,2]
  7559  0C2E  01F5               	clrf	DLYDelay_ms@i
  7560  0C2F  01F6               	clrf	DLYDelay_ms@i+1
  7561  0C30                     l149:	
  7562  0C30  0872               	movf	DLYDelay_ms@val+1,w
  7563  0C31  0276               	subwf	DLYDelay_ms@i+1,w
  7564  0C32  1D03               	skipz
  7565  0C33  2C36               	goto	u3375
  7566  0C34  0871               	movf	DLYDelay_ms@val,w
  7567  0C35  0275               	subwf	DLYDelay_ms@i,w
  7568  0C36                     u3375:	
  7569  0C36  1803               	btfsc	3,0
  7570  0C37  0008               	return
  7571  0C38  0064               	clrwdt	;# 
  7572                           
  7573                           ;DLY.c: 24: _delay((unsigned long)((1)*(8000000/4000.0)));
  7574  0C39  3003               	movlw	3
  7575  0C3A  00F4               	movwf	??_DLYDelay_ms+1
  7576  0C3B  3097               	movlw	151
  7577  0C3C  00F3               	movwf	??_DLYDelay_ms
  7578  0C3D                     u4067:	
  7579  0C3D  0BF3               	decfsz	??_DLYDelay_ms,f
  7580  0C3E  2C3D               	goto	u4067
  7581  0C3F  0BF4               	decfsz	??_DLYDelay_ms+1,f
  7582  0C40  2C3D               	goto	u4067
  7583  0C41  3200               	nop2
  7584  0C42  3001               	movlw	1
  7585  0C43  07F5               	addwf	DLYDelay_ms@i,f
  7586  0C44  3000               	movlw	0
  7587  0C45  3DF6               	addwfc	DLYDelay_ms@i+1,f
  7588  0C46  2C30               	goto	l149
  7589  0C47                     __end_of_DLYDelay_ms:	
  7590                           
  7591                           	psect	text39
  7592  0BC1                     __ptext39:	
  7593 ;; *************** function _CC1Strobe *****************
  7594 ;; Defined at:
  7595 ;;		line 101 in file "CC1.c"
  7596 ;; Parameters:    Size  Location     Type
  7597 ;;  e_stb           1    wreg     enum E1836
  7598 ;; Auto vars:     Size  Location     Type
  7599 ;;  e_stb           1    8[COMMON] enum E1836
  7600 ;;  cc1Stb          1    9[COMMON] unsigned char 
  7601 ;; Return value:  Size  Location     Type
  7602 ;;		None               void
  7603 ;; Registers used:
  7604 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7605 ;; Tracked objects:
  7606 ;;		On entry : 0/0
  7607 ;;		On exit  : 0/0
  7608 ;;		Unchanged: 0/0
  7609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7610 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7611 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7612 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7613 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7614 ;;Total ram usage:        3 bytes
  7615 ;; Hardware stack levels used:    1
  7616 ;; Hardware stack levels required when called:    3
  7617 ;; This function calls:
  7618 ;;		_SPIWrite
  7619 ;; This function is called by:
  7620 ;;		_CC1Init
  7621 ;;		_RTXInit
  7622 ;;		_RTXSndPkt
  7623 ;;		_RTXReadPkt
  7624 ;;		_CC1Sleep
  7625 ;; This function uses a non-reentrant model
  7626 ;;
  7627                           
  7628                           
  7629                           ;psect for function _CC1Strobe
  7630  0BC1                     _CC1Strobe:	
  7631                           
  7632                           ;incstack = 0
  7633                           ; Regs used in _CC1Strobe: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7634                           ;CC1Strobe@e_stb stored from wreg
  7635  0BC1  00F8               	movwf	CC1Strobe@e_stb
  7636                           
  7637                           ;CC1.c: 103: unsigned char cc1Stb;
  7638                           ;CC1.c: 106: LATAbits.LATA5=0;
  7639  0BC2  0022               	movlb	2	; select bank2
  7640  0BC3  128C               	bcf	12,5	;volatile
  7641                           
  7642                           ;CC1.c: 109: cc1Stb=((e_stb&0b00111111)|0b10000000);
  7643  0BC4  0878               	movf	CC1Strobe@e_stb,w
  7644  0BC5  393F               	andlw	63
  7645  0BC6  3880               	iorlw	128
  7646  0BC7  00F7               	movwf	??_CC1Strobe
  7647  0BC8  0877               	movf	??_CC1Strobe,w
  7648  0BC9  00F9               	movwf	CC1Strobe@cc1Stb
  7649                           
  7650                           ;CC1.c: 110: SPIWrite((&(cc1Stb)),1);
  7651  0BCA  3079               	movlw	low CC1Strobe@cc1Stb
  7652  0BCB  00F1               	movwf	SPIWrite@srcPtr
  7653  0BCC  3000               	movlw	high CC1Strobe@cc1Stb
  7654  0BCD  00F2               	movwf	SPIWrite@srcPtr+1
  7655  0BCE  01F3               	clrf	SPIWrite@len
  7656  0BCF  0AF3               	incf	SPIWrite@len,f
  7657  0BD0  318C  2498         	fcall	_SPIWrite
  7658                           
  7659                           ;CC1.c: 113: LATAbits.LATA5=1;
  7660  0BD2  0022               	movlb	2	; select bank2
  7661  0BD3  168C               	bsf	12,5	;volatile
  7662  0BD4  0008               	return
  7663  0BD5                     __end_of_CC1Strobe:	
  7664                           
  7665                           	psect	text40
  7666  0C98                     __ptext40:	
  7667 ;; *************** function _SPIWrite *****************
  7668 ;; Defined at:
  7669 ;;		line 39 in file "SPI.c"
  7670 ;; Parameters:    Size  Location     Type
  7671 ;;  srcPtr          2    1[COMMON] PTR unsigned char 
  7672 ;;		 -> pktTx(11), CC1Write@cc1Addr(1), CC1Read@cc1Addr(1), CC1Strobe@cc1Stb(1), 
  7673 ;;		 -> cc1PaTable(8), cc1InitVal(47), 
  7674 ;;  len             1    3[COMMON] unsigned char 
  7675 ;; Auto vars:     Size  Location     Type
  7676 ;;  i               1    6[COMMON] unsigned char 
  7677 ;; Return value:  Size  Location     Type
  7678 ;;		None               void
  7679 ;; Registers used:
  7680 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7681 ;; Tracked objects:
  7682 ;;		On entry : 0/0
  7683 ;;		On exit  : 0/0
  7684 ;;		Unchanged: 0/0
  7685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7686 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7687 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7688 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7689 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7690 ;;Total ram usage:        6 bytes
  7691 ;; Hardware stack levels used:    1
  7692 ;; Hardware stack levels required when called:    2
  7693 ;; This function calls:
  7694 ;;		Nothing
  7695 ;; This function is called by:
  7696 ;;		_CC1Strobe
  7697 ;;		_CC1Read
  7698 ;;		_CC1Write
  7699 ;; This function uses a non-reentrant model
  7700 ;;
  7701                           
  7702                           
  7703                           ;psect for function _SPIWrite
  7704  0C98                     _SPIWrite:	
  7705                           
  7706                           ;SPI.c: 41: unsigned char i;
  7707                           ;SPI.c: 43: for(i=0;i<len;i++)
  7708                           
  7709                           ;incstack = 0
  7710                           ; Regs used in _SPIWrite: [wreg+fsr1l+fsr1h+status,2+status,0]
  7711  0C98  01F6               	clrf	SPIWrite@i
  7712  0C99                     l3251:	
  7713  0C99  0873               	movf	SPIWrite@len,w
  7714  0C9A  0276               	subwf	SPIWrite@i,w
  7715  0C9B  1803               	btfsc	3,0
  7716  0C9C  0008               	return
  7717                           
  7718                           ;SPI.c: 44: {
  7719                           ;SPI.c: 45: PIR1bits.SSPIF=0;
  7720  0C9D  0020               	movlb	0	; select bank0
  7721  0C9E  1191               	bcf	17,3	;volatile
  7722                           
  7723                           ;SPI.c: 46: SSPBUF=(*(srcPtr+i));
  7724  0C9F  0876               	movf	SPIWrite@i,w
  7725  0CA0  00F4               	movwf	??_SPIWrite
  7726  0CA1  01F5               	clrf	??_SPIWrite+1
  7727  0CA2  0874               	movf	??_SPIWrite,w
  7728  0CA3  0771               	addwf	SPIWrite@srcPtr,w
  7729  0CA4  0086               	movwf	6
  7730  0CA5  0875               	movf	??_SPIWrite+1,w
  7731  0CA6  3D72               	addwfc	SPIWrite@srcPtr+1,w
  7732  0CA7  0087               	movwf	7
  7733  0CA8  0801               	movf	1,w
  7734  0CA9  0024               	movlb	4	; select bank4
  7735  0CAA  0091               	movwf	17	;volatile
  7736  0CAB                     l78:	
  7737                           ;SPI.c: 47: while(!(PIR1bits.SSPIF))
  7738                           
  7739  0CAB  0020               	movlb	0	; select bank0
  7740  0CAC  1991               	btfsc	17,3	;volatile
  7741  0CAD  2CB0               	goto	l3249
  7742                           
  7743                           ;SPI.c: 48: __nop();
  7744  0CAE  0000               	nop
  7745  0CAF  2CAB               	goto	l78
  7746  0CB0                     l3249:	
  7747  0CB0  3001               	movlw	1
  7748  0CB1  00F4               	movwf	??_SPIWrite
  7749  0CB2  0874               	movf	??_SPIWrite,w
  7750  0CB3  07F6               	addwf	SPIWrite@i,f
  7751  0CB4  2C99               	goto	l3251
  7752  0CB5                     __end_of_SPIWrite:	
  7753                           
  7754                           	psect	text41
  7755  0BE9                     __ptext41:	
  7756 ;; *************** function _PGMInit *****************
  7757 ;; Defined at:
  7758 ;;		line 17 in file "PGM.c"
  7759 ;; Parameters:    Size  Location     Type
  7760 ;;  state           1    wreg     unsigned char 
  7761 ;; Auto vars:     Size  Location     Type
  7762 ;;  state           1   11[COMMON] unsigned char 
  7763 ;; Return value:  Size  Location     Type
  7764 ;;		None               void
  7765 ;; Registers used:
  7766 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7767 ;; Tracked objects:
  7768 ;;		On entry : 0/0
  7769 ;;		On exit  : 0/0
  7770 ;;		Unchanged: 0/0
  7771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7773 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7775 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7776 ;;Total ram usage:        1 bytes
  7777 ;; Hardware stack levels used:    1
  7778 ;; Hardware stack levels required when called:    6
  7779 ;; This function calls:
  7780 ;;		_PGMCheckNvm
  7781 ;;		_PGMReadNvm
  7782 ;; This function is called by:
  7783 ;;		_main
  7784 ;; This function uses a non-reentrant model
  7785 ;;
  7786                           
  7787                           
  7788                           ;psect for function _PGMInit
  7789  0BE9                     _PGMInit:	
  7790                           
  7791                           ;incstack = 0
  7792                           ; Regs used in _PGMInit: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7793                           ;PGMInit@state stored from wreg
  7794  0BE9  00FB               	movwf	PGMInit@state
  7795                           
  7796                           ;PGM.c: 19: switch(state)
  7797  0BEA  2BF6               	goto	l3043
  7798  0BEB                     l3033:	
  7799                           ;PGM.c: 20: {
  7800                           ;PGM.c: 21: case 0:
  7801                           
  7802                           
  7803                           ;PGM.c: 23: T1CON=0b00000001;
  7804  0BEB  3001               	movlw	1
  7805  0BEC  0020               	movlb	0	; select bank0
  7806  0BED  0098               	movwf	24	;volatile
  7807                           
  7808                           ;PGM.c: 24: break;
  7809  0BEE  0008               	return
  7810  0BEF                     l3035:	
  7811                           ;PGM.c: 25: case 1:
  7812                           
  7813                           
  7814                           ;PGM.c: 27: pgm_flg.val=0;
  7815  0BEF  01FC               	clrf	_pgm_flg
  7816                           
  7817                           ;PGM.c: 28: PGMReadNvm();
  7818  0BF0  318B  2373  318B   	fcall	_PGMReadNvm
  7819                           
  7820                           ;PGM.c: 29: PGMCheckNvm();
  7821  0BF3  318B  234A         	fcall	_PGMCheckNvm
  7822                           
  7823                           ;PGM.c: 34: }
  7824                           
  7825                           ;PGM.c: 30: break;
  7826  0BF5  0008               	return
  7827  0BF6                     l3043:	
  7828  0BF6  087B               	movf	PGMInit@state,w
  7829                           
  7830                           ; Switch size 1, requested type "space"
  7831                           ; Number of cases is 2, Range of values is 0 to 1
  7832                           ; switch strategies available:
  7833                           ; Name         Instructions Cycles
  7834                           ; simple_byte            7     4 (average)
  7835                           ; direct_byte           10     6 (fixed)
  7836                           ; jumptable            260     6 (fixed)
  7837                           ;	Chosen strategy is simple_byte
  7838  0BF7  3A00               	xorlw	0	; case 0
  7839  0BF8  1903               	skipnz
  7840  0BF9  2BEB               	goto	l3033
  7841  0BFA  3A01               	xorlw	1	; case 1
  7842  0BFB  1903               	skipnz
  7843  0BFC  2BEF               	goto	l3035
  7844  0BFD  2BFE               	goto	l378
  7845  0BFE                     l378:	
  7846  0BFE  0008               	return
  7847  0BFF                     __end_of_PGMInit:	
  7848                           
  7849                           	psect	text42
  7850  0B73                     __ptext42:	
  7851 ;; *************** function _PGMReadNvm *****************
  7852 ;; Defined at:
  7853 ;;		line 41 in file "PGM.c"
  7854 ;; Parameters:    Size  Location     Type
  7855 ;;		None
  7856 ;; Auto vars:     Size  Location     Type
  7857 ;;		None
  7858 ;; Return value:  Size  Location     Type
  7859 ;;		None               void
  7860 ;; Registers used:
  7861 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7862 ;; Tracked objects:
  7863 ;;		On entry : 0/0
  7864 ;;		On exit  : 0/0
  7865 ;;		Unchanged: 0/0
  7866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7868 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7869 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7870 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7871 ;;Total ram usage:        2 bytes
  7872 ;; Hardware stack levels used:    1
  7873 ;; Hardware stack levels required when called:    3
  7874 ;; This function calls:
  7875 ;;		_NVMRead
  7876 ;; This function is called by:
  7877 ;;		_PGMInit
  7878 ;; This function uses a non-reentrant model
  7879 ;;
  7880                           
  7881                           
  7882                           ;psect for function _PGMReadNvm
  7883  0B73                     _PGMReadNvm:	
  7884                           
  7885                           ;PGM.c: 43: NVMRead((unsigned short)(&(nvm_pgm_cfg)),(char *)(&(pgm_cfg)),sizeof(ts_PGM_
      +                          CFG));
  7886                           
  7887                           ;incstack = 0
  7888                           ; Regs used in _PGMReadNvm: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7889  0B73  3020               	movlw	32
  7890  0B74  00F1               	movwf	NVMRead@addr
  7891  0B75  3038               	movlw	56
  7892  0B76  00F2               	movwf	NVMRead@addr+1
  7893  0B77  30C8               	movlw	(low (_pgm_cfg| 0))& (0+255)
  7894  0B78  00F8               	movwf	??_PGMReadNvm
  7895  0B79  0878               	movf	??_PGMReadNvm,w
  7896  0B7A  00F3               	movwf	NVMRead@dest
  7897  0B7B  3005               	movlw	5
  7898  0B7C  00F9               	movwf	??_PGMReadNvm+1
  7899  0B7D  0879               	movf	??_PGMReadNvm+1,w
  7900  0B7E  00F4               	movwf	NVMRead@len
  7901  0B7F  318D  25CF         	fcall	_NVMRead
  7902  0B81  0008               	return
  7903  0B82                     __end_of_PGMReadNvm:	
  7904                           
  7905                           	psect	text43
  7906  0DCF                     __ptext43:	
  7907 ;; *************** function _NVMRead *****************
  7908 ;; Defined at:
  7909 ;;		line 23 in file "NVM.c"
  7910 ;; Parameters:    Size  Location     Type
  7911 ;;  addr            2    1[COMMON] unsigned short 
  7912 ;;  dest            1    3[COMMON] PTR unsigned char 
  7913 ;;		 -> pgm_cfg(5), 
  7914 ;;  len             1    4[COMMON] unsigned char 
  7915 ;; Auto vars:     Size  Location     Type
  7916 ;;  i               1    7[COMMON] unsigned char 
  7917 ;; Return value:  Size  Location     Type
  7918 ;;		None               void
  7919 ;; Registers used:
  7920 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7921 ;; Tracked objects:
  7922 ;;		On entry : 0/0
  7923 ;;		On exit  : 0/0
  7924 ;;		Unchanged: 0/0
  7925 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7926 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7927 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7928 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7929 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7930 ;;Total ram usage:        7 bytes
  7931 ;; Hardware stack levels used:    1
  7932 ;; Hardware stack levels required when called:    2
  7933 ;; This function calls:
  7934 ;;		Nothing
  7935 ;; This function is called by:
  7936 ;;		_PGMReadNvm
  7937 ;; This function uses a non-reentrant model
  7938 ;;
  7939                           
  7940                           
  7941                           ;psect for function _NVMRead
  7942  0DCF                     _NVMRead:	
  7943                           
  7944                           ;NVM.c: 25: unsigned char i;
  7945                           ;NVM.c: 27: PMCON1bits.CFGS=0;
  7946                           
  7947                           ;incstack = 0
  7948                           ; Regs used in _NVMRead: [wreg+fsr1l+fsr1h+status,2+status,0]
  7949  0DCF  0023               	movlb	3	; select bank3
  7950  0DD0  1315               	bcf	21,6	;volatile
  7951                           
  7952                           ;NVM.c: 28: for(i=0;i<len;i++)
  7953  0DD1  01F7               	clrf	NVMRead@i
  7954  0DD2                     l2771:	
  7955  0DD2  0874               	movf	NVMRead@len,w
  7956  0DD3  0277               	subwf	NVMRead@i,w
  7957  0DD4  1803               	btfsc	3,0
  7958  0DD5  0008               	return
  7959  0DD6  0064               	clrwdt	;# 
  7960                           
  7961                           ;NVM.c: 31: PMADR=(addr+i);
  7962  0DD7  0877               	movf	NVMRead@i,w
  7963  0DD8  0771               	addwf	NVMRead@addr,w
  7964  0DD9  00F5               	movwf	??_NVMRead
  7965  0DDA  0872               	movf	NVMRead@addr+1,w
  7966  0DDB  1803               	skipnc
  7967  0DDC  0A72               	incf	NVMRead@addr+1,w
  7968  0DDD  00F6               	movwf	??_NVMRead+1
  7969  0DDE  0875               	movf	??_NVMRead,w
  7970  0DDF  0023               	movlb	3	; select bank3
  7971  0DE0  0091               	movwf	17	;volatile
  7972  0DE1  0876               	movf	??_NVMRead+1,w
  7973  0DE2  0092               	movwf	18	;volatile
  7974                           
  7975                           ;NVM.c: 32: PMCON1bits.RD=1;
  7976  0DE3  1415               	bsf	21,0	;volatile
  7977  0DE4                     l240:	
  7978                           ;NVM.c: 33: while(PMCON1bits.RD);
  7979                           
  7980  0DE4  1815               	btfsc	21,0	;volatile
  7981  0DE5  2DE4               	goto	l240
  7982                           
  7983                           ;NVM.c: 34: (*(dest+i))=PMDAT;
  7984  0DE6  0813               	movf	19,w	;volatile
  7985  0DE7  00F5               	movwf	??_NVMRead
  7986  0DE8  0877               	movf	NVMRead@i,w
  7987  0DE9  0773               	addwf	NVMRead@dest,w
  7988  0DEA  00F6               	movwf	??_NVMRead+1
  7989  0DEB  0876               	movf	??_NVMRead+1,w
  7990  0DEC  0086               	movwf	6
  7991  0DED  0187               	clrf	7
  7992  0DEE  0875               	movf	??_NVMRead,w
  7993  0DEF  0081               	movwf	1
  7994  0DF0  3001               	movlw	1
  7995  0DF1  00F5               	movwf	??_NVMRead
  7996  0DF2  0875               	movf	??_NVMRead,w
  7997  0DF3  07F7               	addwf	NVMRead@i,f
  7998  0DF4  2DD2               	goto	l2771
  7999  0DF5                     __end_of_NVMRead:	
  8000                           
  8001                           	psect	text44
  8002  0B4A                     __ptext44:	
  8003 ;; *************** function _PGMCheckNvm *****************
  8004 ;; Defined at:
  8005 ;;		line 51 in file "PGM.c"
  8006 ;; Parameters:    Size  Location     Type
  8007 ;;		None
  8008 ;; Auto vars:     Size  Location     Type
  8009 ;;		None
  8010 ;; Return value:  Size  Location     Type
  8011 ;;		None               void
  8012 ;; Registers used:
  8013 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8014 ;; Tracked objects:
  8015 ;;		On entry : 0/0
  8016 ;;		On exit  : 0/0
  8017 ;;		Unchanged: 0/0
  8018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8020 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8021 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8022 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8023 ;;Total ram usage:        0 bytes
  8024 ;; Hardware stack levels used:    1
  8025 ;; Hardware stack levels required when called:    5
  8026 ;; This function calls:
  8027 ;;		_PGMNvmReset
  8028 ;; This function is called by:
  8029 ;;		_PGMInit
  8030 ;; This function uses a non-reentrant model
  8031 ;;
  8032                           
  8033                           
  8034                           ;psect for function _PGMCheckNvm
  8035  0B4A                     _PGMCheckNvm:	
  8036                           
  8037                           ;PGM.c: 53: if(pgm_cfg.valChk1!=0x5C || pgm_cfg.valChk2!=0xC5)
  8038                           
  8039                           ;incstack = 0
  8040                           ; Regs used in _PGMCheckNvm: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8041  0B4A  305C               	movlw	92
  8042  0B4B  0021               	movlb	1	; select bank1
  8043  0B4C  0648               	xorwf	_pgm_cfg^(0+128),w
  8044  0B4D  1D03               	btfss	3,2
  8045  0B4E  2B53               	goto	l2831
  8046  0B4F  30C5               	movlw	197
  8047  0B50  0649               	xorwf	(_pgm_cfg^(0+128)+1),w
  8048  0B51  1903               	btfsc	3,2
  8049  0B52  0008               	return
  8050  0B53                     l2831:	
  8051                           
  8052                           ;PGM.c: 54: PGMNvmReset();
  8053  0B53  318B  23A0         	fcall	_PGMNvmReset
  8054  0B55  0008               	return
  8055  0B56                     __end_of_PGMCheckNvm:	
  8056                           
  8057                           	psect	text45
  8058  0BA0                     __ptext45:	
  8059 ;; *************** function _PGMNvmReset *****************
  8060 ;; Defined at:
  8061 ;;		line 57 in file "PGM.c"
  8062 ;; Parameters:    Size  Location     Type
  8063 ;;		None
  8064 ;; Auto vars:     Size  Location     Type
  8065 ;;		None
  8066 ;; Return value:  Size  Location     Type
  8067 ;;		None               void
  8068 ;; Registers used:
  8069 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8070 ;; Tracked objects:
  8071 ;;		On entry : 0/0
  8072 ;;		On exit  : 0/0
  8073 ;;		Unchanged: 0/0
  8074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8076 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8077 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8078 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8079 ;;Total ram usage:        1 bytes
  8080 ;; Hardware stack levels used:    1
  8081 ;; Hardware stack levels required when called:    4
  8082 ;; This function calls:
  8083 ;;		_PGMWriteNvm
  8084 ;; This function is called by:
  8085 ;;		_PGMCheckNvm
  8086 ;; This function uses a non-reentrant model
  8087 ;;
  8088                           
  8089                           
  8090                           ;psect for function _PGMNvmReset
  8091  0BA0                     _PGMNvmReset:	
  8092                           
  8093                           ;PGM.c: 60: pgm_cfg.valChk1=0x5C;
  8094                           
  8095                           ;incstack = 0
  8096                           ; Regs used in _PGMNvmReset: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8097  0BA0  305C               	movlw	92
  8098  0BA1  00FA               	movwf	??_PGMNvmReset
  8099  0BA2  087A               	movf	??_PGMNvmReset,w
  8100  0BA3  0021               	movlb	1	; select bank1
  8101  0BA4  00C8               	movwf	_pgm_cfg^(0+128)
  8102                           
  8103                           ;PGM.c: 61: pgm_cfg.valChk2=0xC5;
  8104  0BA5  30C5               	movlw	197
  8105  0BA6  00FA               	movwf	??_PGMNvmReset
  8106  0BA7  087A               	movf	??_PGMNvmReset,w
  8107  0BA8  00C9               	movwf	(_pgm_cfg^(0+128)+1)
  8108                           
  8109                           ;PGM.c: 62: pgm_cfg.menu.val=0x00;
  8110  0BA9  01CA               	clrf	(_pgm_cfg^(0+128)+2)
  8111                           
  8112                           ;PGM.c: 63: pgm_cfg.sensId=0x00;
  8113  0BAA  01CB               	clrf	(_pgm_cfg^(0+128)+3)
  8114                           
  8115                           ;PGM.c: 64: pgm_cfg.baseId=0x00;
  8116  0BAB  01CC               	clrf	(_pgm_cfg^(0+128)+4)
  8117                           
  8118                           ;PGM.c: 66: PGMWriteNvm();
  8119  0BAC  318B  2364         	fcall	_PGMWriteNvm
  8120  0BAE  0001               	reset	;# 
  8121  0BAF  0008               	return
  8122  0BB0                     __end_of_PGMNvmReset:	
  8123                           
  8124                           	psect	text46
  8125  0B64                     __ptext46:	
  8126 ;; *************** function _PGMWriteNvm *****************
  8127 ;; Defined at:
  8128 ;;		line 46 in file "PGM.c"
  8129 ;; Parameters:    Size  Location     Type
  8130 ;;		None
  8131 ;; Auto vars:     Size  Location     Type
  8132 ;;		None
  8133 ;; Return value:  Size  Location     Type
  8134 ;;		None               void
  8135 ;; Registers used:
  8136 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8137 ;; Tracked objects:
  8138 ;;		On entry : 0/0
  8139 ;;		On exit  : 0/0
  8140 ;;		Unchanged: 0/0
  8141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8142 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8143 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8144 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8145 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8146 ;;Total ram usage:        2 bytes
  8147 ;; Hardware stack levels used:    1
  8148 ;; Hardware stack levels required when called:    3
  8149 ;; This function calls:
  8150 ;;		_NVMWrite
  8151 ;; This function is called by:
  8152 ;;		_PGMNvmReset
  8153 ;;		_PGMSelUp
  8154 ;;		_PGMSelLong
  8155 ;;		_RTXReadPkt
  8156 ;; This function uses a non-reentrant model
  8157 ;;
  8158                           
  8159                           
  8160                           ;psect for function _PGMWriteNvm
  8161  0B64                     _PGMWriteNvm:	
  8162                           
  8163                           ;PGM.c: 48: NVMWrite((unsigned short)(&(nvm_pgm_cfg)),(char *)(&(pgm_cfg)),sizeof(ts_PGM
      +                          _CFG));
  8164                           
  8165                           ;incstack = 0
  8166                           ; Regs used in _PGMWriteNvm: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8167  0B64  3020               	movlw	32
  8168  0B65  00F1               	movwf	NVMWrite@addr
  8169  0B66  3038               	movlw	56
  8170  0B67  00F2               	movwf	NVMWrite@addr+1
  8171  0B68  30C8               	movlw	(low (_pgm_cfg| 0))& (0+255)
  8172  0B69  00F8               	movwf	??_PGMWriteNvm
  8173  0B6A  0878               	movf	??_PGMWriteNvm,w
  8174  0B6B  00F3               	movwf	NVMWrite@source
  8175  0B6C  3005               	movlw	5
  8176  0B6D  00F9               	movwf	??_PGMWriteNvm+1
  8177  0B6E  0879               	movf	??_PGMWriteNvm+1,w
  8178  0B6F  00F4               	movwf	NVMWrite@len
  8179  0B70  3184  2408         	fcall	_NVMWrite
  8180  0B72  0008               	return
  8181  0B73                     __end_of_PGMWriteNvm:	
  8182                           
  8183                           	psect	text47
  8184  0408                     __ptext47:	
  8185 ;; *************** function _NVMWrite *****************
  8186 ;; Defined at:
  8187 ;;		line 38 in file "NVM.c"
  8188 ;; Parameters:    Size  Location     Type
  8189 ;;  addr            2    1[COMMON] unsigned short 
  8190 ;;  source          1    3[COMMON] PTR unsigned char 
  8191 ;;		 -> pgm_cfg(5), 
  8192 ;;  len             1    4[COMMON] unsigned char 
  8193 ;; Auto vars:     Size  Location     Type
  8194 ;;  bufTmpRow      64    0[BANK0 ] unsigned short [32]
  8195 ;;  rowAddr         2   64[BANK0 ] unsigned short 
  8196 ;;  j               1   68[BANK0 ] unsigned char 
  8197 ;;  latchAddr       1   67[BANK0 ] unsigned char 
  8198 ;;  i               1   66[BANK0 ] unsigned char 
  8199 ;; Return value:  Size  Location     Type
  8200 ;;		None               void
  8201 ;; Registers used:
  8202 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8203 ;; Tracked objects:
  8204 ;;		On entry : 0/0
  8205 ;;		On exit  : 0/0
  8206 ;;		Unchanged: 0/0
  8207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8208 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8209 ;;      Locals:         0      69       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8210 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8211 ;;      Totals:         7      69       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8212 ;;Total ram usage:       76 bytes
  8213 ;; Hardware stack levels used:    1
  8214 ;; Hardware stack levels required when called:    2
  8215 ;; This function calls:
  8216 ;;		Nothing
  8217 ;; This function is called by:
  8218 ;;		_PGMWriteNvm
  8219 ;; This function uses a non-reentrant model
  8220 ;;
  8221                           
  8222                           
  8223                           ;psect for function _NVMWrite
  8224  0408                     _NVMWrite:	
  8225                           
  8226                           ;NVM.c: 40: unsigned char i,j,latchAddr;
  8227                           ;NVM.c: 41: unsigned short rowAddr,bufTmpRow[0x20];
  8228                           ;NVM.c: 43: INTCONbits.GIE=0;
  8229                           
  8230                           ;incstack = 0
  8231                           ; Regs used in _NVMWrite: [wreg+fsr1l+fsr1h+status,2+status,0]
  8232  0408  138B               	bcf	11,7	;volatile
  8233                           
  8234                           ;NVM.c: 44: PMCON1bits.WREN=1;
  8235  0409  0023               	movlb	3	; select bank3
  8236  040A  1515               	bsf	21,2	;volatile
  8237                           
  8238                           ;NVM.c: 45: PMCON1bits.CFGS=0;
  8239  040B  1315               	bcf	21,6	;volatile
  8240                           
  8241                           ;NVM.c: 48: i=0;
  8242  040C  0020               	movlb	0	; select bank0
  8243  040D  01E2               	clrf	NVMWrite@i
  8244                           
  8245                           ;NVM.c: 50: rowAddr=(addr&(~(0x001F)));
  8246  040E  30E0               	movlw	224
  8247  040F  0571               	andwf	NVMWrite@addr,w
  8248  0410  00E0               	movwf	NVMWrite@rowAddr
  8249  0411  30FF               	movlw	255
  8250  0412  0572               	andwf	NVMWrite@addr+1,w
  8251  0413  00E1               	movwf	NVMWrite@rowAddr+1
  8252                           
  8253                           ;NVM.c: 51: latchAddr=(addr&0x001F);
  8254  0414  0871               	movf	NVMWrite@addr,w
  8255  0415  391F               	andlw	31
  8256  0416  00F5               	movwf	??_NVMWrite
  8257  0417  0875               	movf	??_NVMWrite,w
  8258  0418  00E3               	movwf	NVMWrite@latchAddr
  8259  0419                     l247:	
  8260                           ;NVM.c: 52: while(i<len)
  8261                           
  8262  0419  0874               	movf	NVMWrite@len,w
  8263  041A  0262               	subwf	NVMWrite@i,w
  8264  041B  1803               	btfsc	3,0
  8265  041C  2CC0               	goto	l267
  8266  041D  0064               	clrwdt	;# 
  8267                           
  8268                           ;NVM.c: 57: for(j=0;j<sizeof(bufTmpRow)/sizeof(unsigned short);j++)
  8269  041E  0020               	movlb	0	; select bank0
  8270  041F  01E4               	clrf	NVMWrite@j
  8271  0420  3020               	movlw	32
  8272  0421  0264               	subwf	NVMWrite@j,w
  8273  0422  1803               	btfsc	3,0
  8274  0423  2C48               	goto	l250
  8275  0424                     l249:	
  8276  0424  0064               	clrwdt	;# 
  8277                           
  8278                           ;NVM.c: 60: PMADR=(rowAddr+j);
  8279  0425  0020               	movlb	0	; select bank0
  8280  0426  0864               	movf	NVMWrite@j,w
  8281  0427  0760               	addwf	NVMWrite@rowAddr,w
  8282  0428  00F5               	movwf	??_NVMWrite
  8283  0429  0861               	movf	NVMWrite@rowAddr+1,w
  8284  042A  1803               	skipnc
  8285  042B  0A61               	incf	NVMWrite@rowAddr+1,w
  8286  042C  00F6               	movwf	??_NVMWrite+1
  8287  042D  0875               	movf	??_NVMWrite,w
  8288  042E  0023               	movlb	3	; select bank3
  8289  042F  0091               	movwf	17	;volatile
  8290  0430  0876               	movf	??_NVMWrite+1,w
  8291  0431  0092               	movwf	18	;volatile
  8292                           
  8293                           ;NVM.c: 61: PMCON1bits.RD=1;
  8294  0432  1415               	bsf	21,0	;volatile
  8295  0433                     l251:	
  8296                           ;NVM.c: 62: while(PMCON1bits.RD);
  8297                           
  8298  0433  1815               	btfsc	21,0	;volatile
  8299  0434  2C33               	goto	l251
  8300                           
  8301                           ;NVM.c: 63: bufTmpRow[j]=PMDAT;
  8302  0435  0020               	movlb	0	; select bank0
  8303  0436  3564               	lslf	NVMWrite@j,w
  8304  0437  3E20               	addlw	(low (NVMWrite@bufTmpRow| 0))& (0+255)
  8305  0438  0086               	movwf	6
  8306  0439  0187               	clrf	7
  8307  043A  0023               	movlb	3	; select bank3
  8308  043B  0813               	movf	19,w	;volatile
  8309  043C  3FC0               	movwi [0]fsr1
  8310  043D  0814               	movf	20,w	;volatile
  8311  043E  3FC1               	movwi [1]fsr1
  8312  043F  3001               	movlw	1
  8313  0440  00F5               	movwf	??_NVMWrite
  8314  0441  0875               	movf	??_NVMWrite,w
  8315  0442  0020               	movlb	0	; select bank0
  8316  0443  07E4               	addwf	NVMWrite@j,f
  8317  0444  3020               	movlw	32
  8318  0445  0264               	subwf	NVMWrite@j,w
  8319  0446  1C03               	skipc
  8320  0447  2C24               	goto	l249
  8321  0448                     l250:	
  8322                           
  8323                           ;NVM.c: 64: }
  8324                           ;NVM.c: 67: PMCON1bits.FREE=1;
  8325  0448  0023               	movlb	3	; select bank3
  8326  0449  1615               	bsf	21,4	;volatile
  8327                           
  8328                           ;NVM.c: 68: PMADR=rowAddr;
  8329  044A  0020               	movlb	0	; select bank0
  8330  044B  0861               	movf	NVMWrite@rowAddr+1,w
  8331  044C  0023               	movlb	3	; select bank3
  8332  044D  0092               	movwf	18	;volatile
  8333  044E  0020               	movlb	0	; select bank0
  8334  044F  0860               	movf	NVMWrite@rowAddr,w
  8335  0450  0023               	movlb	3	; select bank3
  8336  0451  0091               	movwf	17	;volatile
  8337                           
  8338                           ;NVM.c: 69: PMCON2=0x55;
  8339  0452  3055               	movlw	85
  8340  0453  0096               	movwf	22	;volsfr
  8341                           
  8342                           ;NVM.c: 70: PMCON2=0xAA;
  8343  0454  30AA               	movlw	170
  8344  0455  0096               	movwf	22	;volsfr
  8345                           
  8346                           ;NVM.c: 71: PMCON1bits.WR=1;
  8347  0456  1495               	bsf	21,1	;volatile
  8348  0457                     l254:	
  8349                           ;NVM.c: 72: while(PMCON1bits.WR);
  8350                           
  8351  0457  1895               	btfsc	21,1	;volatile
  8352  0458  2C57               	goto	l254
  8353                           
  8354                           ;NVM.c: 73: __nop();
  8355  0459  0000               	nop
  8356                           
  8357                           ;NVM.c: 74: __nop();
  8358  045A  0000               	nop
  8359                           
  8360                           ;NVM.c: 77: for(;latchAddr<sizeof(bufTmpRow)/sizeof(unsigned short);latchAddr++)
  8361  045B  3020               	movlw	32
  8362  045C  0020               	movlb	0	; select bank0
  8363  045D  0263               	subwf	NVMWrite@latchAddr,w
  8364  045E  1803               	btfsc	3,0
  8365  045F  2C83               	goto	l2619
  8366  0460                     l257:	
  8367  0460  0064               	clrwdt	;# 
  8368                           
  8369                           ;NVM.c: 81: if(i>=len)
  8370  0461  0874               	movf	NVMWrite@len,w
  8371  0462  0020               	movlb	0	; select bank0
  8372  0463  0262               	subwf	NVMWrite@i,w
  8373  0464  1803               	btfsc	3,0
  8374  0465  2C83               	goto	l2619
  8375                           
  8376                           ;NVM.c: 84: bufTmpRow[latchAddr]=(*(source+i));
  8377                           
  8378                           ;NVM.c: 82: break;
  8379  0466  0862               	movf	NVMWrite@i,w
  8380  0467  0773               	addwf	NVMWrite@source,w
  8381  0468  00F5               	movwf	??_NVMWrite
  8382  0469  0875               	movf	??_NVMWrite,w
  8383  046A  0086               	movwf	6
  8384  046B  0187               	clrf	7
  8385  046C  0801               	movf	1,w
  8386  046D  00F6               	movwf	??_NVMWrite+1
  8387  046E  01F7               	clrf	??_NVMWrite+2
  8388  046F  3563               	lslf	NVMWrite@latchAddr,w
  8389  0470  3E20               	addlw	(low (NVMWrite@bufTmpRow| 0))& (0+255)
  8390  0471  0086               	movwf	6
  8391  0472  0187               	clrf	7
  8392  0473  0876               	movf	??_NVMWrite+1,w
  8393  0474  3FC0               	movwi [0]fsr1
  8394  0475  0877               	movf	??_NVMWrite+2,w
  8395  0476  3FC1               	movwi [1]fsr1
  8396                           
  8397                           ;NVM.c: 85: i++;
  8398  0477  3001               	movlw	1
  8399  0478  00F5               	movwf	??_NVMWrite
  8400  0479  0875               	movf	??_NVMWrite,w
  8401  047A  07E2               	addwf	NVMWrite@i,f
  8402  047B  3001               	movlw	1
  8403  047C  00F5               	movwf	??_NVMWrite
  8404  047D  0875               	movf	??_NVMWrite,w
  8405  047E  07E3               	addwf	NVMWrite@latchAddr,f
  8406  047F  3020               	movlw	32
  8407  0480  0263               	subwf	NVMWrite@latchAddr,w
  8408  0481  1C03               	skipc
  8409  0482  2C60               	goto	l257
  8410  0483                     l2619:	
  8411                           
  8412                           ;NVM.c: 86: }
  8413                           ;NVM.c: 88: latchAddr=0;
  8414  0483  01E3               	clrf	NVMWrite@latchAddr
  8415                           
  8416                           ;NVM.c: 91: for(j=0;j<sizeof(bufTmpRow)/sizeof(unsigned short);j++)
  8417  0484  01E4               	clrf	NVMWrite@j
  8418  0485  3020               	movlw	32
  8419  0486  0264               	subwf	NVMWrite@j,w
  8420  0487  1803               	btfsc	3,0
  8421  0488  2CBB               	goto	l2641
  8422  0489                     l2625:	
  8423                           
  8424                           ;NVM.c: 92: {
  8425                           ;NVM.c: 94: PMADR=(rowAddr+j);
  8426  0489  0864               	movf	NVMWrite@j,w
  8427  048A  0760               	addwf	NVMWrite@rowAddr,w
  8428  048B  00F5               	movwf	??_NVMWrite
  8429  048C  0861               	movf	NVMWrite@rowAddr+1,w
  8430  048D  1803               	skipnc
  8431  048E  0A61               	incf	NVMWrite@rowAddr+1,w
  8432  048F  00F6               	movwf	??_NVMWrite+1
  8433  0490  0875               	movf	??_NVMWrite,w
  8434  0491  0023               	movlb	3	; select bank3
  8435  0492  0091               	movwf	17	;volatile
  8436  0493  0876               	movf	??_NVMWrite+1,w
  8437  0494  0092               	movwf	18	;volatile
  8438                           
  8439                           ;NVM.c: 95: PMDAT=bufTmpRow[j];
  8440  0495  0020               	movlb	0	; select bank0
  8441  0496  3564               	lslf	NVMWrite@j,w
  8442  0497  3E20               	addlw	(low (NVMWrite@bufTmpRow| 0))& (0+255)
  8443  0498  0086               	movwf	6
  8444  0499  0187               	clrf	7
  8445  049A  3F40               	moviw [0]fsr1
  8446  049B  0023               	movlb	3	; select bank3
  8447  049C  0093               	movwf	19	;volatile
  8448  049D  3F41               	moviw [1]fsr1
  8449  049E  0094               	movwf	20	;volatile
  8450                           
  8451                           ;NVM.c: 97: if(j==(sizeof(bufTmpRow)/sizeof(unsigned short)-1))
  8452  049F  301F               	movlw	31
  8453  04A0  0020               	movlb	0	; select bank0
  8454  04A1  0664               	xorwf	NVMWrite@j,w
  8455  04A2  1D03               	btfss	3,2
  8456  04A3  2CA7               	goto	l262
  8457                           
  8458                           ;NVM.c: 98: PMCON1bits.LWLO=0;
  8459  04A4  0023               	movlb	3	; select bank3
  8460  04A5  1295               	bcf	21,5	;volatile
  8461  04A6  2CA9               	goto	l2633
  8462  04A7                     l262:	
  8463                           
  8464                           ;NVM.c: 99: else
  8465                           ;NVM.c: 100: PMCON1bits.LWLO=1;
  8466  04A7  0023               	movlb	3	; select bank3
  8467  04A8  1695               	bsf	21,5	;volatile
  8468  04A9                     l2633:	
  8469                           
  8470                           ;NVM.c: 101: PMCON2=0x55;
  8471  04A9  3055               	movlw	85
  8472  04AA  0096               	movwf	22	;volsfr
  8473                           
  8474                           ;NVM.c: 102: PMCON2=0xAA;
  8475  04AB  30AA               	movlw	170
  8476  04AC  0096               	movwf	22	;volsfr
  8477                           
  8478                           ;NVM.c: 103: PMCON1bits.WR=1;
  8479  04AD  1495               	bsf	21,1	;volatile
  8480  04AE                     l264:	
  8481                           ;NVM.c: 104: while(PMCON1bits.WR);
  8482                           
  8483  04AE  1895               	btfsc	21,1	;volatile
  8484  04AF  2CAE               	goto	l264
  8485                           
  8486                           ;NVM.c: 105: __nop();
  8487  04B0  0000               	nop
  8488                           
  8489                           ;NVM.c: 106: __nop();
  8490  04B1  0000               	nop
  8491  04B2  3001               	movlw	1
  8492  04B3  00F5               	movwf	??_NVMWrite
  8493  04B4  0875               	movf	??_NVMWrite,w
  8494  04B5  0020               	movlb	0	; select bank0
  8495  04B6  07E4               	addwf	NVMWrite@j,f
  8496  04B7  3020               	movlw	32
  8497  04B8  0264               	subwf	NVMWrite@j,w
  8498  04B9  1C03               	skipc
  8499  04BA  2C89               	goto	l2625
  8500  04BB                     l2641:	
  8501                           
  8502                           ;NVM.c: 107: }
  8503                           ;NVM.c: 109: rowAddr+=0x0020;
  8504  04BB  3020               	movlw	32
  8505  04BC  07E0               	addwf	NVMWrite@rowAddr,f
  8506  04BD  3000               	movlw	0
  8507  04BE  3DE1               	addwfc	NVMWrite@rowAddr+1,f
  8508  04BF  2C19               	goto	l247
  8509  04C0                     l267:	
  8510                           
  8511                           ;NVM.c: 110: }
  8512                           ;NVM.c: 112: INTCONbits.GIE=1;
  8513  04C0  178B               	bsf	11,7	;volatile
  8514                           
  8515                           ;NVM.c: 113: PMCON1bits.WREN=0;
  8516  04C1  0023               	movlb	3	; select bank3
  8517  04C2  1115               	bcf	21,2	;volatile
  8518  04C3  0008               	return
  8519  04C4                     __end_of_NVMWrite:	
  8520                           
  8521                           	psect	text48
  8522  0E1B                     __ptext48:	
  8523 ;; *************** function _OUTInit *****************
  8524 ;; Defined at:
  8525 ;;		line 6 in file "OUT.c"
  8526 ;; Parameters:    Size  Location     Type
  8527 ;;  sta             1    wreg     unsigned char 
  8528 ;; Auto vars:     Size  Location     Type
  8529 ;;  sta             1    2[COMMON] unsigned char 
  8530 ;; Return value:  Size  Location     Type
  8531 ;;		None               void
  8532 ;; Registers used:
  8533 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8534 ;; Tracked objects:
  8535 ;;		On entry : 0/0
  8536 ;;		On exit  : 0/0
  8537 ;;		Unchanged: 0/0
  8538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8539 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8540 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8541 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8542 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8543 ;;Total ram usage:        2 bytes
  8544 ;; Hardware stack levels used:    1
  8545 ;; Hardware stack levels required when called:    2
  8546 ;; This function calls:
  8547 ;;		Nothing
  8548 ;; This function is called by:
  8549 ;;		_main
  8550 ;; This function uses a non-reentrant model
  8551 ;;
  8552                           
  8553                           
  8554                           ;psect for function _OUTInit
  8555  0E1B                     _OUTInit:	
  8556                           
  8557                           ;incstack = 0
  8558                           ; Regs used in _OUTInit: [wreg-fsr0h+status,2+status,0]
  8559                           ;OUTInit@sta stored from wreg
  8560  0E1B  00F2               	movwf	OUTInit@sta
  8561                           
  8562                           ;OUT.c: 8: switch(sta)
  8563  0E1C  2E3E               	goto	l2943
  8564  0E1D                     l2937:	
  8565                           ;OUT.c: 9: {
  8566                           ;OUT.c: 10: case 0:
  8567                           
  8568                           
  8569                           ;OUT.c: 12: TRISA&=0b00000110; TRISB&=0b00100111; TRISC&=0b00010000; ANSELA&=0b00000110;
      +                           ANSELB&=0b00100111; ANSELC&=0b00010000; PORTA&=0b11111110; PORTC|=0b10000000;
  8570  0E1D  3006               	movlw	6
  8571  0E1E  00F1               	movwf	??_OUTInit
  8572  0E1F  0871               	movf	??_OUTInit,w
  8573  0E20  0021               	movlb	1	; select bank1
  8574  0E21  058C               	andwf	12,f	;volatile
  8575  0E22  3027               	movlw	39
  8576  0E23  00F1               	movwf	??_OUTInit
  8577  0E24  0871               	movf	??_OUTInit,w
  8578  0E25  058D               	andwf	13,f	;volatile
  8579  0E26  3010               	movlw	16
  8580  0E27  00F1               	movwf	??_OUTInit
  8581  0E28  0871               	movf	??_OUTInit,w
  8582  0E29  058E               	andwf	14,f	;volatile
  8583  0E2A  3006               	movlw	6
  8584  0E2B  00F1               	movwf	??_OUTInit
  8585  0E2C  0871               	movf	??_OUTInit,w
  8586  0E2D  0023               	movlb	3	; select bank3
  8587  0E2E  058C               	andwf	12,f	;volatile
  8588  0E2F  3027               	movlw	39
  8589  0E30  00F1               	movwf	??_OUTInit
  8590  0E31  0871               	movf	??_OUTInit,w
  8591  0E32  058D               	andwf	13,f	;volatile
  8592  0E33  3010               	movlw	16
  8593  0E34  00F1               	movwf	??_OUTInit
  8594  0E35  0871               	movf	??_OUTInit,w
  8595  0E36  058E               	andwf	14,f	;volatile
  8596  0E37  30FE               	movlw	254
  8597  0E38  00F1               	movwf	??_OUTInit
  8598  0E39  0871               	movf	??_OUTInit,w
  8599  0E3A  0020               	movlb	0	; select bank0
  8600  0E3B  058C               	andwf	12,f	;volatile
  8601  0E3C  178E               	bsf	14,7	;volatile
  8602                           
  8603                           ;OUT.c: 20: }
  8604                           
  8605                           ;OUT.c: 13: break;
  8606  0E3D  0008               	return
  8607  0E3E                     l2943:	
  8608  0E3E  0872               	movf	OUTInit@sta,w
  8609                           
  8610                           ; Switch size 1, requested type "space"
  8611                           ; Number of cases is 1, Range of values is 0 to 0
  8612                           ; switch strategies available:
  8613                           ; Name         Instructions Cycles
  8614                           ; simple_byte            4     3 (average)
  8615                           ; direct_byte            8     6 (fixed)
  8616                           ; jumptable            260     6 (fixed)
  8617                           ;	Chosen strategy is simple_byte
  8618  0E3F  3A00               	xorlw	0	; case 0
  8619  0E40  1903               	skipnz
  8620  0E41  2E1D               	goto	l2937
  8621  0E42  2E43               	goto	l40
  8622  0E43                     l40:	
  8623  0E43  0008               	return
  8624  0E44                     __end_of_OUTInit:	
  8625                           
  8626                           	psect	text49
  8627  0B3F                     __ptext49:	
  8628 ;; *************** function _NVMInit *****************
  8629 ;; Defined at:
  8630 ;;		line 6 in file "NVM.c"
  8631 ;; Parameters:    Size  Location     Type
  8632 ;;  sta             1    wreg     unsigned char 
  8633 ;; Auto vars:     Size  Location     Type
  8634 ;;  sta             1    1[COMMON] unsigned char 
  8635 ;; Return value:  Size  Location     Type
  8636 ;;		None               void
  8637 ;; Registers used:
  8638 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8639 ;; Tracked objects:
  8640 ;;		On entry : 0/0
  8641 ;;		On exit  : 0/0
  8642 ;;		Unchanged: 0/0
  8643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8645 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8646 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8647 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8648 ;;Total ram usage:        1 bytes
  8649 ;; Hardware stack levels used:    1
  8650 ;; Hardware stack levels required when called:    2
  8651 ;; This function calls:
  8652 ;;		Nothing
  8653 ;; This function is called by:
  8654 ;;		_main
  8655 ;; This function uses a non-reentrant model
  8656 ;;
  8657                           
  8658                           
  8659                           ;psect for function _NVMInit
  8660  0B3F                     _NVMInit:	
  8661                           
  8662                           ;incstack = 0
  8663                           ; Regs used in _NVMInit: [wreg-fsr0h+status,2+status,0]
  8664                           ;NVMInit@sta stored from wreg
  8665  0B3F  00F1               	movwf	NVMInit@sta
  8666                           
  8667                           ;NVM.c: 8: switch(sta)
  8668  0B40  2B44               	goto	l2999
  8669  0B41                     l2995:	
  8670                           ;NVM.c: 9: {
  8671                           ;NVM.c: 10: case 0:
  8672                           
  8673                           
  8674                           ;NVM.c: 12: PMCON1=0b00000000;
  8675  0B41  0023               	movlb	3	; select bank3
  8676  0B42  0195               	clrf	21	;volatile
  8677                           
  8678                           ;NVM.c: 20: }
  8679                           
  8680                           ;NVM.c: 13: break;
  8681  0B43  0008               	return
  8682  0B44                     l2999:	
  8683  0B44  0871               	movf	NVMInit@sta,w
  8684                           
  8685                           ; Switch size 1, requested type "space"
  8686                           ; Number of cases is 1, Range of values is 0 to 0
  8687                           ; switch strategies available:
  8688                           ; Name         Instructions Cycles
  8689                           ; simple_byte            4     3 (average)
  8690                           ; direct_byte            8     6 (fixed)
  8691                           ; jumptable            260     6 (fixed)
  8692                           ;	Chosen strategy is simple_byte
  8693  0B45  3A00               	xorlw	0	; case 0
  8694  0B46  1903               	skipnz
  8695  0B47  2B41               	goto	l2995
  8696  0B48  2B49               	goto	l235
  8697  0B49                     l235:	
  8698  0B49  0008               	return
  8699  0B4A                     __end_of_NVMInit:	
  8700                           
  8701                           	psect	text50
  8702  0B34                     __ptext50:	
  8703 ;; *************** function _LEDInit *****************
  8704 ;; Defined at:
  8705 ;;		line 7 in file "LED.c"
  8706 ;; Parameters:    Size  Location     Type
  8707 ;;  sta             1    wreg     unsigned char 
  8708 ;; Auto vars:     Size  Location     Type
  8709 ;;  sta             1    1[COMMON] unsigned char 
  8710 ;; Return value:  Size  Location     Type
  8711 ;;		None               void
  8712 ;; Registers used:
  8713 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8714 ;; Tracked objects:
  8715 ;;		On entry : 0/0
  8716 ;;		On exit  : 0/0
  8717 ;;		Unchanged: 0/0
  8718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8720 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8722 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8723 ;;Total ram usage:        1 bytes
  8724 ;; Hardware stack levels used:    1
  8725 ;; Hardware stack levels required when called:    2
  8726 ;; This function calls:
  8727 ;;		Nothing
  8728 ;; This function is called by:
  8729 ;;		_main
  8730 ;; This function uses a non-reentrant model
  8731 ;;
  8732                           
  8733                           
  8734                           ;psect for function _LEDInit
  8735  0B34                     _LEDInit:	
  8736                           
  8737                           ;incstack = 0
  8738                           ; Regs used in _LEDInit: [wreg-fsr0h+status,2+status,0]
  8739                           ;LEDInit@sta stored from wreg
  8740  0B34  00F1               	movwf	LEDInit@sta
  8741                           
  8742                           ;LED.c: 9: switch(sta)
  8743  0B35  2B39               	goto	l2991
  8744  0B36                     l195:	
  8745                           ;LED.c: 10: {
  8746                           ;LED.c: 17: case 2:
  8747                           
  8748                           
  8749                           ;LED.c: 19: LATCbits.LATC7=1;
  8750  0B36  0022               	movlb	2	; select bank2
  8751  0B37  178E               	bsf	14,7	;volatile
  8752                           
  8753                           ;LED.c: 21: }
  8754                           
  8755                           ;LED.c: 20: break;
  8756  0B38  0008               	return
  8757  0B39                     l2991:	
  8758  0B39  0871               	movf	LEDInit@sta,w
  8759                           
  8760                           ; Switch size 1, requested type "space"
  8761                           ; Number of cases is 1, Range of values is 2 to 2
  8762                           ; switch strategies available:
  8763                           ; Name         Instructions Cycles
  8764                           ; simple_byte            4     3 (average)
  8765                           ; direct_byte           11     9 (fixed)
  8766                           ; jumptable            263     9 (fixed)
  8767                           ;	Chosen strategy is simple_byte
  8768  0B3A  3A02               	xorlw	2	; case 2
  8769  0B3B  1903               	skipnz
  8770  0B3C  2B36               	goto	l195
  8771  0B3D  2B3E               	goto	l197
  8772  0B3E                     l197:	
  8773  0B3E  0008               	return
  8774  0B3F                     __end_of_LEDInit:	
  8775                           
  8776                           	psect	text51
  8777  0D4B                     __ptext51:	
  8778 ;; *************** function _INInit *****************
  8779 ;; Defined at:
  8780 ;;		line 6 in file "IN.c"
  8781 ;; Parameters:    Size  Location     Type
  8782 ;;  sta             1    wreg     unsigned char 
  8783 ;; Auto vars:     Size  Location     Type
  8784 ;;  sta             1    2[COMMON] unsigned char 
  8785 ;; Return value:  Size  Location     Type
  8786 ;;		None               void
  8787 ;; Registers used:
  8788 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8789 ;; Tracked objects:
  8790 ;;		On entry : 0/0
  8791 ;;		On exit  : 0/0
  8792 ;;		Unchanged: 0/0
  8793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8795 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8796 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8797 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8798 ;;Total ram usage:        2 bytes
  8799 ;; Hardware stack levels used:    1
  8800 ;; Hardware stack levels required when called:    2
  8801 ;; This function calls:
  8802 ;;		Nothing
  8803 ;; This function is called by:
  8804 ;;		_main
  8805 ;; This function uses a non-reentrant model
  8806 ;;
  8807                           
  8808                           
  8809                           ;psect for function _INInit
  8810  0D4B                     _INInit:	
  8811                           
  8812                           ;incstack = 0
  8813                           ; Regs used in _INInit: [wreg-fsr0h+status,2+status,0]
  8814                           ;INInit@sta stored from wreg
  8815  0D4B  00F2               	movwf	INInit@sta
  8816                           
  8817                           ;IN.c: 8: switch(sta)
  8818  0D4C  2D64               	goto	l2933
  8819  0D4D                     l2925:	
  8820                           ;IN.c: 9: {
  8821                           ;IN.c: 10: case 0:
  8822                           
  8823                           
  8824                           ;IN.c: 12: TRISA|=0b00000110; TRISB|=0b00100111; TRISC|=0b00010000; ANSELB&=0b11011000; 
      +                          ANSELC&=0b11101111; WPUB=0b00100111;
  8825  0D4D  3006               	movlw	6
  8826  0D4E  00F1               	movwf	??_INInit
  8827  0D4F  0871               	movf	??_INInit,w
  8828  0D50  0021               	movlb	1	; select bank1
  8829  0D51  048C               	iorwf	12,f	;volatile
  8830  0D52  3027               	movlw	39
  8831  0D53  00F1               	movwf	??_INInit
  8832  0D54  0871               	movf	??_INInit,w
  8833  0D55  048D               	iorwf	13,f	;volatile
  8834  0D56  160E               	bsf	14,4	;volatile
  8835  0D57  30D8               	movlw	216
  8836  0D58  00F1               	movwf	??_INInit
  8837  0D59  0871               	movf	??_INInit,w
  8838  0D5A  0023               	movlb	3	; select bank3
  8839  0D5B  058D               	andwf	13,f	;volatile
  8840  0D5C  30EF               	movlw	239
  8841  0D5D  00F1               	movwf	??_INInit
  8842  0D5E  0871               	movf	??_INInit,w
  8843  0D5F  058E               	andwf	14,f	;volatile
  8844  0D60  3027               	movlw	39
  8845  0D61  0024               	movlb	4	; select bank4
  8846  0D62  008D               	movwf	13	;volatile
  8847                           
  8848                           ;IN.c: 20: }
  8849                           
  8850                           ;IN.c: 13: break;
  8851  0D63  0008               	return
  8852  0D64                     l2933:	
  8853  0D64  0872               	movf	INInit@sta,w
  8854                           
  8855                           ; Switch size 1, requested type "space"
  8856                           ; Number of cases is 1, Range of values is 0 to 0
  8857                           ; switch strategies available:
  8858                           ; Name         Instructions Cycles
  8859                           ; simple_byte            4     3 (average)
  8860                           ; direct_byte            8     6 (fixed)
  8861                           ; jumptable            260     6 (fixed)
  8862                           ;	Chosen strategy is simple_byte
  8863  0D65  3A00               	xorlw	0	; case 0
  8864  0D66  1903               	skipnz
  8865  0D67  2D4D               	goto	l2925
  8866  0D68  2D69               	goto	l18
  8867  0D69                     l18:	
  8868  0D69  0008               	return
  8869  0D6A                     __end_of_INInit:	
  8870                           
  8871                           	psect	text52
  8872  0CB5                     __ptext52:	
  8873 ;; *************** function _DINTask *****************
  8874 ;; Defined at:
  8875 ;;		line 79 in file "DIN.c"
  8876 ;; Parameters:    Size  Location     Type
  8877 ;;		None
  8878 ;; Auto vars:     Size  Location     Type
  8879 ;;		None
  8880 ;; Return value:  Size  Location     Type
  8881 ;;		None               void
  8882 ;; Registers used:
  8883 ;;		wreg, status,2, status,0
  8884 ;; Tracked objects:
  8885 ;;		On entry : 0/0
  8886 ;;		On exit  : 0/0
  8887 ;;		Unchanged: 0/0
  8888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8891 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8892 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8893 ;;Total ram usage:        1 bytes
  8894 ;; Hardware stack levels used:    1
  8895 ;; Hardware stack levels required when called:    2
  8896 ;; This function calls:
  8897 ;;		Nothing
  8898 ;; This function is called by:
  8899 ;;		_main
  8900 ;; This function uses a non-reentrant model
  8901 ;;
  8902                           
  8903                           
  8904                           ;psect for function _DINTask
  8905  0CB5                     _DINTask:	
  8906                           
  8907                           ;DIN.c: 81: u_in_sta_tmpTask.val=0;
  8908                           
  8909                           ;incstack = 0
  8910                           ; Regs used in _DINTask: [wreg+status,2+status,0]
  8911  0CB5  0020               	movlb	0	; select bank0
  8912  0CB6  01EF               	clrf	_u_in_sta_tmpTask
  8913                           
  8914                           ;DIN.c: 82: if(!PORTBbits.RB2)
  8915  0CB7  1D0D               	btfss	13,2	;volatile
  8916                           
  8917                           ;DIN.c: 83: u_in_sta_tmpTask.sel=1;
  8918  0CB8  146F               	bsf	_u_in_sta_tmpTask,0
  8919                           
  8920                           ;DIN.c: 86: if(u_in_sta_currTask.sel!=u_in_sta_tmpTask.sel)
  8921  0CB9  086F               	movf	_u_in_sta_tmpTask,w
  8922  0CBA  3901               	andlw	1
  8923  0CBB  00F1               	movwf	??_DINTask
  8924  0CBC  086E               	movf	_u_in_sta_currTask,w
  8925  0CBD  3901               	andlw	1
  8926  0CBE  0671               	xorwf	??_DINTask,w
  8927  0CBF  1903               	skipnz
  8928  0CC0  2CC9               	goto	l3023
  8929                           
  8930                           ;DIN.c: 87: {
  8931                           ;DIN.c: 88: u_in_sta_currTask.sel=u_in_sta_tmpTask.sel;
  8932  0CC1  106E               	bcf	_u_in_sta_currTask,0
  8933  0CC2  1C6F               	btfss	_u_in_sta_tmpTask,0
  8934  0CC3  2CC5               	goto	l3019
  8935  0CC4  146E               	bsf	_u_in_sta_currTask,0
  8936  0CC5                     l3019:	
  8937                           
  8938                           ;DIN.c: 89: tmrDbncSel=0;
  8939  0CC5  0021               	movlb	1	; select bank1
  8940  0CC6  01AC               	clrf	_tmrDbncSel^(0+128)
  8941                           
  8942                           ;DIN.c: 90: u_flg_din.tmrDbncSel=1;
  8943  0CC7  0020               	movlb	0	; select bank0
  8944  0CC8  146D               	bsf	_u_flg_din,0
  8945  0CC9                     l3023:	
  8946                           
  8947                           ;DIN.c: 91: }
  8948                           ;DIN.c: 94: if(u_in_sta_currTask.sel)
  8949  0CC9  1C6E               	btfss	_u_in_sta_currTask,0
  8950  0CCA  2CCD               	goto	l3027
  8951                           
  8952                           ;DIN.c: 95: u_flg_din.tmrLongSel=1;
  8953  0CCB  14ED               	bsf	_u_flg_din,1
  8954  0CCC  0008               	return
  8955  0CCD                     l3027:	
  8956                           
  8957                           ;DIN.c: 96: else
  8958                           ;DIN.c: 97: {
  8959                           ;DIN.c: 98: tmrLongSel=0;
  8960  0CCD  0021               	movlb	1	; select bank1
  8961  0CCE  01A7               	clrf	_tmrLongSel^(0+128)
  8962  0CCF  01A8               	clrf	(_tmrLongSel+1)^(0+128)
  8963                           
  8964                           ;DIN.c: 99: u_flg_din.tmrLongSel=0;
  8965  0CD0  0020               	movlb	0	; select bank0
  8966  0CD1  10ED               	bcf	_u_flg_din,1
  8967  0CD2  0008               	return
  8968  0CD3                     __end_of_DINTask:	
  8969                           
  8970                           	psect	text53
  8971  0BB0                     __ptext53:	
  8972 ;; *************** function _DINInit *****************
  8973 ;; Defined at:
  8974 ;;		line 24 in file "DIN.c"
  8975 ;; Parameters:    Size  Location     Type
  8976 ;;  sta             1    wreg     unsigned char 
  8977 ;; Auto vars:     Size  Location     Type
  8978 ;;  sta             1    1[COMMON] unsigned char 
  8979 ;; Return value:  Size  Location     Type
  8980 ;;		None               void
  8981 ;; Registers used:
  8982 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  8983 ;; Tracked objects:
  8984 ;;		On entry : 0/0
  8985 ;;		On exit  : 0/0
  8986 ;;		Unchanged: 0/0
  8987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8989 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8990 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8991 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8992 ;;Total ram usage:        1 bytes
  8993 ;; Hardware stack levels used:    1
  8994 ;; Hardware stack levels required when called:    2
  8995 ;; This function calls:
  8996 ;;		Nothing
  8997 ;; This function is called by:
  8998 ;;		_main
  8999 ;; This function uses a non-reentrant model
  9000 ;;
  9001                           
  9002                           
  9003                           ;psect for function _DINInit
  9004  0BB0                     _DINInit:	
  9005                           
  9006                           ;incstack = 0
  9007                           ; Regs used in _DINInit: [wreg-fsr0h+status,2+status,0]
  9008                           ;DINInit@sta stored from wreg
  9009  0BB0  00F1               	movwf	DINInit@sta
  9010                           
  9011                           ;DIN.c: 26: switch(sta)
  9012  0BB1  2BBB               	goto	l3007
  9013  0BB2                     l3003:	
  9014                           ;DIN.c: 27: {
  9015                           ;DIN.c: 31: case 1:
  9016                           
  9017                           
  9018                           ;DIN.c: 33: u_flg_din.val=0;
  9019  0BB2  0020               	movlb	0	; select bank0
  9020  0BB3  01ED               	clrf	_u_flg_din
  9021                           
  9022                           ;DIN.c: 34: u_in_sta_currTask.val=0;
  9023  0BB4  01EE               	clrf	_u_in_sta_currTask
  9024                           
  9025                           ;DIN.c: 35: u_in_sta_tmpTask.val=0;
  9026  0BB5  01EF               	clrf	_u_in_sta_tmpTask
  9027                           
  9028                           ;DIN.c: 36: u_in_ev_up.val=0;
  9029  0BB6  0021               	movlb	1	; select bank1
  9030  0BB7  01B1               	clrf	_u_in_ev_up^(0+128)
  9031                           
  9032                           ;DIN.c: 37: u_in_ev_down.val=0;
  9033  0BB8  01AF               	clrf	_u_in_ev_down^(0+128)
  9034                           
  9035                           ;DIN.c: 38: u_in_ev_long.val=0;
  9036  0BB9  01B0               	clrf	_u_in_ev_long^(0+128)
  9037                           
  9038                           ;DIN.c: 43: }
  9039                           
  9040                           ;DIN.c: 39: break;
  9041  0BBA  0008               	return
  9042  0BBB                     l3007:	
  9043  0BBB  0871               	movf	DINInit@sta,w
  9044                           
  9045                           ; Switch size 1, requested type "space"
  9046                           ; Number of cases is 1, Range of values is 1 to 1
  9047                           ; switch strategies available:
  9048                           ; Name         Instructions Cycles
  9049                           ; simple_byte            4     3 (average)
  9050                           ; direct_byte           11     9 (fixed)
  9051                           ; jumptable            263     9 (fixed)
  9052                           ;	Chosen strategy is simple_byte
  9053  0BBC  3A01               	xorlw	1	; case 1
  9054  0BBD  1903               	skipnz
  9055  0BBE  2BB2               	goto	l3003
  9056  0BBF  2BC0               	goto	l292
  9057  0BC0                     l292:	
  9058  0BC0  0008               	return
  9059  0BC1                     __end_of_DINInit:	
  9060                           
  9061                           	psect	text54
  9062  0E9A                     __ptext54:	
  9063 ;; *************** function _ADCInit *****************
  9064 ;; Defined at:
  9065 ;;		line 31 in file "ADC.c"
  9066 ;; Parameters:    Size  Location     Type
  9067 ;;  state           1    wreg     unsigned char 
  9068 ;; Auto vars:     Size  Location     Type
  9069 ;;  state           1    2[COMMON] unsigned char 
  9070 ;; Return value:  Size  Location     Type
  9071 ;;		None               void
  9072 ;; Registers used:
  9073 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9074 ;; Tracked objects:
  9075 ;;		On entry : 0/0
  9076 ;;		On exit  : 0/0
  9077 ;;		Unchanged: 0/0
  9078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9080 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9081 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9082 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9083 ;;Total ram usage:        2 bytes
  9084 ;; Hardware stack levels used:    1
  9085 ;; Hardware stack levels required when called:    2
  9086 ;; This function calls:
  9087 ;;		Nothing
  9088 ;; This function is called by:
  9089 ;;		_main
  9090 ;; This function uses a non-reentrant model
  9091 ;;
  9092                           
  9093                           
  9094                           ;psect for function _ADCInit
  9095  0E9A                     _ADCInit:	
  9096                           
  9097                           ;incstack = 0
  9098                           ; Regs used in _ADCInit: [wreg-fsr0h+status,2+status,0]
  9099                           ;ADCInit@state stored from wreg
  9100  0E9A  00F2               	movwf	ADCInit@state
  9101                           
  9102                           ;ADC.c: 33: switch(state)
  9103  0E9B  2EBD               	goto	l2979
  9104  0E9C                     l2967:	
  9105                           ;ADC.c: 34: {
  9106                           ;ADC.c: 35: case 0:
  9107                           
  9108                           
  9109                           ;ADC.c: 37: ADCON0=0b00000101; ADCON1=0b10000011; FVRCON=0b10000001; ANSELA|=0b00000110;
      +                          ;
  9110  0E9C  3005               	movlw	5
  9111  0E9D  0021               	movlb	1	; select bank1
  9112  0E9E  009D               	movwf	29	;volatile
  9113  0E9F  3083               	movlw	131
  9114  0EA0  009E               	movwf	30	;volatile
  9115  0EA1  3081               	movlw	129
  9116  0EA2  0022               	movlb	2	; select bank2
  9117  0EA3  0097               	movwf	23	;volatile
  9118  0EA4  3006               	movlw	6
  9119  0EA5  00F1               	movwf	??_ADCInit
  9120  0EA6  0871               	movf	??_ADCInit,w
  9121  0EA7  0023               	movlb	3	; select bank3
  9122  0EA8  048C               	iorwf	12,f	;volatile
  9123                           
  9124                           ;ADC.c: 38: break;
  9125  0EA9  0008               	return
  9126  0EAA                     l2971:	
  9127                           ;ADC.c: 39: case 1:
  9128                           
  9129                           
  9130                           ;ADC.c: 41: adc_ch=ADC_CH_OFF;
  9131  0EAA  0020               	movlb	0	; select bank0
  9132  0EAB  01EC               	clrf	_adc_ch
  9133                           
  9134                           ;ADC.c: 42: batt=0;
  9135  0EAC  0021               	movlb	1	; select bank1
  9136  0EAD  01A3               	clrf	_batt^(0+128)
  9137  0EAE  01A4               	clrf	(_batt+1)^(0+128)
  9138                           
  9139                           ;ADC.c: 43: battV=0;
  9140  0EAF  3000               	movlw	0
  9141  0EB0  00A0               	movwf	_battV^(0+128)
  9142  0EB1  3000               	movlw	0
  9143  0EB2  00A1               	movwf	(_battV+1)^(0+128)
  9144  0EB3  3000               	movlw	0
  9145  0EB4  00A2               	movwf	(_battV+2)^(0+128)
  9146                           
  9147                           ;ADC.c: 44: rmsCurr=0;
  9148  0EB5  3000               	movlw	0
  9149  0EB6  0020               	movlb	0	; select bank0
  9150  0EB7  00E9               	movwf	_rmsCurr
  9151  0EB8  3000               	movlw	0
  9152  0EB9  00EA               	movwf	_rmsCurr+1
  9153  0EBA  3000               	movlw	0
  9154  0EBB  00EB               	movwf	_rmsCurr+2
  9155                           
  9156                           ;ADC.c: 49: }
  9157                           
  9158                           ;ADC.c: 45: break;
  9159  0EBC  0008               	return
  9160  0EBD                     l2979:	
  9161  0EBD  0872               	movf	ADCInit@state,w
  9162                           
  9163                           ; Switch size 1, requested type "space"
  9164                           ; Number of cases is 2, Range of values is 0 to 1
  9165                           ; switch strategies available:
  9166                           ; Name         Instructions Cycles
  9167                           ; simple_byte            7     4 (average)
  9168                           ; direct_byte           10     6 (fixed)
  9169                           ; jumptable            260     6 (fixed)
  9170                           ;	Chosen strategy is simple_byte
  9171  0EBE  3A00               	xorlw	0	; case 0
  9172  0EBF  1903               	skipnz
  9173  0EC0  2E9C               	goto	l2967
  9174  0EC1  3A01               	xorlw	1	; case 1
  9175  0EC2  1903               	skipnz
  9176  0EC3  2EAA               	goto	l2971
  9177  0EC4  2EC5               	goto	l119
  9178  0EC5                     l119:	
  9179  0EC5  0008               	return
  9180  0EC6                     __end_of_ADCInit:	
  9181                           
  9182                           	psect	intentry
  9183  0004                     __pintentry:	
  9184 ;; *************** function _INTIsr *****************
  9185 ;; Defined at:
  9186 ;;		line 37 in file "Sensore.c"
  9187 ;; Parameters:    Size  Location     Type
  9188 ;;		None
  9189 ;; Auto vars:     Size  Location     Type
  9190 ;;		None
  9191 ;; Return value:  Size  Location     Type
  9192 ;;		None               void
  9193 ;; Registers used:
  9194 ;;		wreg, status,2, status,0, pclath, cstack
  9195 ;; Tracked objects:
  9196 ;;		On entry : 0/0
  9197 ;;		On exit  : 0/0
  9198 ;;		Unchanged: 0/0
  9199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9200 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9201 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9202 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9203 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9204 ;;Total ram usage:        1 bytes
  9205 ;; Hardware stack levels used:    1
  9206 ;; Hardware stack levels required when called:    1
  9207 ;; This function calls:
  9208 ;;		_SYSInt
  9209 ;; This function is called by:
  9210 ;;		Interrupt level 1
  9211 ;; This function uses a non-reentrant model
  9212 ;;
  9213                           
  9214  0004                     _INTIsr:	
  9215                           
  9216                           ;incstack = 0
  9217                           ; Regs used in _INTIsr: [wreg+status,2+status,0+pclath+cstack]
  9218  0004  3180               	pagesel	$
  9219  0005  0020               	movlb	0	; select bank0
  9220  0006  087F               	movf	127,w
  9221  0007  00F0               	movwf	??_INTIsr
  9222                           
  9223                           ;Sensore.c: 40: if(INTCONbits.TMR0IF)
  9224  0008  1D0B               	btfss	11,2	;volatile
  9225  0009  280D               	goto	i1l3175
  9226                           
  9227                           ;Sensore.c: 41: {
  9228                           ;Sensore.c: 43: INTCONbits.TMR0IF=0;
  9229  000A  110B               	bcf	11,2	;volatile
  9230                           
  9231                           ;Sensore.c: 46: SYSInt();
  9232  000B  318B  2314         	fcall	_SYSInt
  9233  000D                     i1l3175:	
  9234                           
  9235                           ;Sensore.c: 47: }
  9236                           ;Sensore.c: 50: if(IOCBFbits.IOCBF2)
  9237  000D  0027               	movlb	7	; select bank7
  9238  000E  1916               	btfsc	22,2	;volatile
  9239                           
  9240                           ;Sensore.c: 51: IOCBFbits.IOCBF2=0;
  9241  000F  1116               	bcf	22,2	;volatile
  9242  0010  0870               	movf	??_INTIsr,w
  9243  0011  0020               	movlb	0	; select bank0
  9244  0012  00FF               	movwf	127
  9245  0013  0009               	retfie
  9246  0014                     __end_of_INTIsr:	
  9247                           
  9248                           	psect	text56
  9249  0B14                     __ptext56:	
  9250 ;; *************** function _SYSInt *****************
  9251 ;; Defined at:
  9252 ;;		line 35 in file "SYS.c"
  9253 ;; Parameters:    Size  Location     Type
  9254 ;;		None
  9255 ;; Auto vars:     Size  Location     Type
  9256 ;;		None
  9257 ;; Return value:  Size  Location     Type
  9258 ;;		None               void
  9259 ;; Registers used:
  9260 ;;		wreg
  9261 ;; Tracked objects:
  9262 ;;		On entry : 0/0
  9263 ;;		On exit  : 0/0
  9264 ;;		Unchanged: 0/0
  9265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9267 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9268 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9269 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9270 ;;Total ram usage:        0 bytes
  9271 ;; Hardware stack levels used:    1
  9272 ;; This function calls:
  9273 ;;		Nothing
  9274 ;; This function is called by:
  9275 ;;		_INTIsr
  9276 ;; This function uses a non-reentrant model
  9277 ;;
  9278                           
  9279                           
  9280                           ;psect for function _SYSInt
  9281  0B14                     _SYSInt:	
  9282                           
  9283                           ;SYS.c: 38: u_SYS_STA.TICK=1;
  9284                           
  9285                           ;incstack = 0
  9286                           ; Regs used in _SYSInt: [wreg]
  9287  0B14  0021               	movlb	1	; select bank1
  9288  0B15  142E               	bsf	_u_SYS_STA^(0+128),0
  9289                           
  9290                           ;SYS.c: 41: TMR0=255-156;
  9291  0B16  3063               	movlw	99
  9292  0B17  0020               	movlb	0	; select bank0
  9293  0B18  0095               	movwf	21	;volatile
  9294  0B19  0008               	return
  9295  0B1A                     __end_of_SYSInt:	
  9296  007E                     btemp	set	126	;btemp
  9297  007E                     wtemp	set	126
  9298  007E                     wtemp0	set	126
  9299  0080                     wtemp1	set	128
  9300  0082                     wtemp2	set	130
  9301  0084                     wtemp3	set	132
  9302  0086                     wtemp4	set	134
  9303  0088                     wtemp5	set	136
  9304  007F                     wtemp6	set	127
  9305  007E                     ttemp	set	126
  9306  007E                     ttemp0	set	126
  9307  0081                     ttemp1	set	129
  9308  0084                     ttemp2	set	132
  9309  0087                     ttemp3	set	135
  9310  007F                     ttemp4	set	127
  9311  007E                     ltemp	set	126
  9312  007E                     ltemp0	set	126
  9313  0082                     ltemp1	set	130
  9314  0086                     ltemp2	set	134
  9315  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        55
    BSS         53
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      13
    BANK0            80     73      80
    BANK1            80      0      53
    BANK2            80      0      47
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    RTXRcvPkt@dst	PTR unsigned char  size(1) Largest target is 11
		 -> pktRx(BANK1[11]), 

    RTXSndPkt@src	PTR unsigned char  size(1) Largest target is 11
		 -> pktTx(BANK1[11]), 

    NVMWrite@source	PTR unsigned char  size(1) Largest target is 5
		 -> pgm_cfg(BANK1[5]), 

    NVMRead@dest	PTR unsigned char  size(1) Largest target is 5
		 -> pgm_cfg(BANK1[5]), 

    CC1Write@src	PTR unsigned char  size(2) Largest target is 47
		 -> pktTx(BANK1[11]), cc1PaTable(BANK1[8]), cc1InitVal(BANK2[47]), 

    CC1Read@dst	PTR unsigned char  size(1) Largest target is 11
		 -> pktRx(BANK1[11]), RTXReadPkt@numRxByte(BANK0[1]), RTXSndPkt@numTxByte(BANK0[1]), RTXSndPkt@numRxByte(BANK0[1]), 
		 -> RTXSndPkt@sta(BANK0[1]), 

    SPIWrite@srcPtr	PTR unsigned char  size(2) Largest target is 47
		 -> pktTx(BANK1[11]), CC1Write@cc1Addr(BANK0[1]), CC1Read@cc1Addr(COMMON[1]), CC1Strobe@cc1Stb(COMMON[1]), 
		 -> cc1PaTable(BANK1[8]), cc1InitVal(BANK2[47]), 

    SPIRead@dstPtr	PTR unsigned char  size(1) Largest target is 11
		 -> pktRx(BANK1[11]), RTXReadPkt@numRxByte(BANK0[1]), RTXSndPkt@numTxByte(BANK0[1]), RTXSndPkt@numRxByte(BANK0[1]), 
		 -> RTXSndPkt@sta(BANK0[1]), 


Critical Paths under _main in COMMON

    _main->_CC1Init
    _main->_PGMInit
    _RTXAwake->_CC1Init
    _LEDFastFlash->_DLYDelay_ms
    _CC1Init->_CC1Write
    _RTXSndPkt->_CC1Read
    _CC1Write->_SPIWrite
    _ADCConv->___lwtoft
    ___ftsub->___ftadd
    ___ftadd->___ftpack
    ___ftmul->___lwtoft
    ___lwtoft->___ftpack
    ___lltoft->___ftpack
    ___ftdiv->___lwtoft
    _PGMSelLong->_LEDNormalFlash
    _PGMSelLong->_PGMWriteNvm
    _RTXReadPkt->_CC1Read
    _RTXRcvPkt->_CC1Read
    _CC1Read->_SPIWrite
    _LEDNormalFlash->_DLYDelay_ms
    _CC1Strobe->_SPIWrite
    _PGMReadNvm->_NVMRead
    _PGMCheckNvm->_PGMNvmReset
    _PGMNvmReset->_PGMWriteNvm
    _PGMWriteNvm->_NVMWrite

Critical Paths under _INTIsr in COMMON

    None.

Critical Paths under _main in BANK0

    _SYSTask->_PGMSelUp
    _RTXTick->_RTXSendData
    _RTXAwake->_RTXInit
    _RTXStartSendData->_ADCConv
    _RTXSendData->_RTXSndPkt
    _CC1Init->_CC1Write
    _RTXStartSendPgm->_ADCConv
    _RTXSendPgm->_RTXSndPkt
    _RTXSndPkt->_CC1Write
    _ADCConv->_sqrt
    _sqrt->___ftmul
    ___ftsub->___ftadd
    ___ftmul->___lwtoft
    ___ftdiv->___ftmul
    _RTXTask->_RTXReadPkt
    _PGMWriteNvm->_NVMWrite

Critical Paths under _INTIsr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTIsr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTIsr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTIsr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTIsr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTIsr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTIsr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTIsr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTIsr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTIsr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTIsr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTIsr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTIsr in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0  150716
                                             71 BANK0      2     2      0
                            _ADCInit
                            _CC1Init
                            _DINInit
                            _DINTask
                             _INInit
                            _LEDInit
                            _NVMInit
                            _OUTInit
                            _PGMInit
                            _RTXInit
                            _RTXTask
                            _SPIInit
                            _SYSInit
                            _SYSTask
 ---------------------------------------------------------------------------------
 (1) _SYSTask                                              0     0      0  106163
                            _ADCConv
                            _DINTick
                          _PGMPgmOff
                         _PGMSelLong
                           _PGMSelUp
                            _PGMTick
                           _RTXAwake
                            _RTXTick
 ---------------------------------------------------------------------------------
 (2) _RTXTick                                              0     0      0   10238
                        _RTXSendData
                         _RTXSendPgm
 ---------------------------------------------------------------------------------
 (2) _RTXAwake                                             0     0      0   36864
                            _CC1Init
                        _DLYDelay_ms
                            _RTXInit
 ---------------------------------------------------------------------------------
 (3) _RTXInit                                              1     1      0   32945
                                             60 BANK0      1     1      0
                          _CC1Strobe
                   _RTXStartSendData
 ---------------------------------------------------------------------------------
 (4) _RTXStartSendData                                     0     0      0   32224
                            _ADCConv
                        _DLYDelay_ms
                        _RTXSendData
 ---------------------------------------------------------------------------------
 (3) _RTXSendData                                          7     7      0    5751
                                              8 BANK0      7     7      0
                       _LEDFastFlash
                          _RTXSndPkt
 ---------------------------------------------------------------------------------
 (4) _LEDFastFlash                                         3     3      0    1060
                                              7 COMMON     3     3      0
                        _DLYDelay_ms
 ---------------------------------------------------------------------------------
 (3) _CC1Init                                              2     2      0    2927
                                             11 COMMON     1     1      0
                                              2 BANK0      1     1      0
                          _CC1Strobe
                           _CC1Write
                        _DLYDelay_ms
 ---------------------------------------------------------------------------------
 (2) _PGMTick                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PGMSelUp                                             1     1      0   31740
                                             69 BANK0      1     1      0
                        _PGMWriteNvm
                    _RTXStartSendPgm
 ---------------------------------------------------------------------------------
 (3) _RTXStartSendPgm                                      0     0      0   30960
                            _ADCConv
                        _DLYDelay_ms
                         _RTXSendPgm
 ---------------------------------------------------------------------------------
 (3) _RTXSendPgm                                           1     1      0    4487
                                              8 BANK0      1     1      0
                          _PGMPgmOff
                          _RTXSndPkt
 ---------------------------------------------------------------------------------
 (4) _RTXSndPkt                                            6     5      1    4487
                                              2 BANK0      6     5      1
                            _CC1Read
                          _CC1Strobe
                           _CC1Write
 ---------------------------------------------------------------------------------
 (5) _CC1Write                                             6     3      3    1214
                                              7 COMMON     4     1      3
                                              0 BANK0      2     2      0
                           _SPIWrite
 ---------------------------------------------------------------------------------
 (5) _ADCConv                                             24    24      0   25481
                                             36 BANK0     24    24      0
                        _DLYDelay_ms
                            ___ftdiv
                            ___ftmul
                           ___lltoft
                            ___lwdiv
                           ___lwtoft
                             ___wmul
                               _sqrt
 ---------------------------------------------------------------------------------
 (6) _sqrt                                                19    16      3    9888
                                             17 BANK0     19    16      3
                             ___ftge
                            ___ftmul
                            ___ftsub
 ---------------------------------------------------------------------------------
 (7) ___ftsub                                              6     0      6    4153
                                             10 BANK0      6     0      6
                            ___ftadd
 ---------------------------------------------------------------------------------
 (8) ___ftadd                                             13     7      6    3903
                                              9 COMMON     3     3      0
                                              0 BANK0     10     4      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             16    10      6    4706
                                              1 BANK0     16    10      6
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftge                                               9     3      6     392
                                              1 COMMON     9     3      6
 ---------------------------------------------------------------------------------
 (6) ___wmul                                               6     2      4     220
                                              1 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___lwtoft                                             4     1      3    2632
                                              9 COMMON     3     0      3
                                              0 BANK0      1     1      0
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___lwdiv                                              8     4      4     290
                                              1 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (6) ___lltoft                                             6     2      4    2703
                                              9 COMMON     2     2      0
                                              0 BANK0      4     0      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (6) ___ftdiv                                             16    10      6    3868
                                             17 BANK0     16    10      6
                            ___ftmul (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftpack                                             8     3      5    2524
                                              1 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (2) _PGMSelLong                                           1     1      0    1840
                                             10 COMMON     1     1      0
                     _LEDNormalFlash
                        _PGMWriteNvm
 ---------------------------------------------------------------------------------
 (2) _DINTick                                              1     1      0       0
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SYSInit                                              2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _SPIInit                                              2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _RTXTask                                              0     0      0    6968
                         _RTXReadPkt
 ---------------------------------------------------------------------------------
 (2) _RTXReadPkt                                           2     2      0    6968
                                             69 BANK0      2     2      0
                            _CC1Read
                          _CC1Strobe
                     _LEDNormalFlash
                          _PGMPgmOff
                        _PGMWriteNvm
                          _RTXRcvPkt
 ---------------------------------------------------------------------------------
 (3) _RTXRcvPkt                                            4     3      1    2260
                                              0 BANK0      4     3      1
                            _CC1Read
 ---------------------------------------------------------------------------------
 (5) _CC1Read                                              5     3      2    2079
                                              7 COMMON     5     3      2
                            _SPIRead
                           _SPIWrite
 ---------------------------------------------------------------------------------
 (6) _SPIRead                                              5     4      1     249
                                              1 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 (4) _PGMPgmOff                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _LEDNormalFlash                                       3     3      0    1060
                                              7 COMMON     3     3      0
                        _DLYDelay_ms
 ---------------------------------------------------------------------------------
 (5) _DLYDelay_ms                                          6     4      2     992
                                              1 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (5) _CC1Strobe                                            3     3      0     690
                                              7 COMMON     3     3      0
                           _SPIWrite
 ---------------------------------------------------------------------------------
 (6) _SPIWrite                                             6     3      3     622
                                              1 COMMON     6     3      3
 ---------------------------------------------------------------------------------
 (1) _PGMInit                                              1     1      0    1128
                                             11 COMMON     1     1      0
                        _PGMCheckNvm
                         _PGMReadNvm
 ---------------------------------------------------------------------------------
 (2) _PGMReadNvm                                           2     2      0     326
                                              8 COMMON     2     2      0
                            _NVMRead
 ---------------------------------------------------------------------------------
 (3) _NVMRead                                              7     3      4     326
                                              1 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) _PGMCheckNvm                                          0     0      0     780
                        _PGMNvmReset
 ---------------------------------------------------------------------------------
 (3) _PGMNvmReset                                          1     1      0     780
                                             10 COMMON     1     1      0
                        _PGMWriteNvm
 ---------------------------------------------------------------------------------
 (3) _PGMWriteNvm                                          2     2      0     780
                                              8 COMMON     2     2      0
                           _NVMWrite
 ---------------------------------------------------------------------------------
 (4) _NVMWrite                                            76    72      4     780
                                              1 COMMON     7     3      4
                                              0 BANK0     69    69      0
 ---------------------------------------------------------------------------------
 (1) _OUTInit                                              2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _NVMInit                                              1     1      0      22
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LEDInit                                              1     1      0      22
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _INInit                                               2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DINTask                                              1     1      0       0
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DINInit                                              1     1      0      22
                                              1 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADCInit                                              2     2      0      22
                                              1 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (10) _INTIsr                                              1     1      0       0
                                              0 COMMON     1     1      0
                             _SYSInt
 ---------------------------------------------------------------------------------
 (11) _SYSInt                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADCInit
   _CC1Init
     _CC1Strobe
       _SPIWrite
     _CC1Write
       _SPIWrite
     _DLYDelay_ms
   _DINInit
   _DINTask
   _INInit
   _LEDInit
   _NVMInit
   _OUTInit
   _PGMInit
     _PGMCheckNvm
       _PGMNvmReset
         _PGMWriteNvm
           _NVMWrite
     _PGMReadNvm
       _NVMRead
   _RTXInit
     _CC1Strobe
       _SPIWrite
     _RTXStartSendData
       _ADCConv
         _DLYDelay_ms
         ___ftdiv
           ___ftmul (ARG)
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
         ___ftmul
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___lltoft
           ___ftpack
         ___lwdiv
         ___lwtoft
           ___ftpack
         ___wmul
         _sqrt
           ___ftge
           ___ftmul
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___ftsub
             ___ftadd
               ___ftpack
       _DLYDelay_ms
       _RTXSendData
         _LEDFastFlash
           _DLYDelay_ms
         _RTXSndPkt
           _CC1Read
             _SPIRead
             _SPIWrite
           _CC1Strobe
             _SPIWrite
           _CC1Write
             _SPIWrite
   _RTXTask
     _RTXReadPkt
       _CC1Read
         _SPIRead
         _SPIWrite
       _CC1Strobe
         _SPIWrite
       _LEDNormalFlash
         _DLYDelay_ms
       _PGMPgmOff
       _PGMWriteNvm
         _NVMWrite
       _RTXRcvPkt
         _CC1Read
           _SPIRead
           _SPIWrite
   _SPIInit
   _SYSInit
   _SYSTask
     _ADCConv
       _DLYDelay_ms
       ___ftdiv
         ___ftmul (ARG)
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
       ___ftmul
         ___ftpack
         ___lwtoft (ARG)
           ___ftpack
       ___lltoft
         ___ftpack
       ___lwdiv
       ___lwtoft
         ___ftpack
       ___wmul
       _sqrt
         ___ftge
         ___ftmul
           ___ftpack
           ___lwtoft (ARG)
             ___ftpack
         ___ftsub
           ___ftadd
             ___ftpack
     _DINTick
     _PGMPgmOff
     _PGMSelLong
       _LEDNormalFlash
         _DLYDelay_ms
       _PGMWriteNvm
         _NVMWrite
     _PGMSelUp
       _PGMWriteNvm
         _NVMWrite
       _RTXStartSendPgm
         _ADCConv
           _DLYDelay_ms
           ___ftdiv
             ___ftmul (ARG)
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
           ___ftmul
             ___ftpack
             ___lwtoft (ARG)
               ___ftpack
           ___lltoft
             ___ftpack
           ___lwdiv
           ___lwtoft
             ___ftpack
           ___wmul
           _sqrt
             ___ftge
             ___ftmul
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___ftsub
               ___ftadd
                 ___ftpack
         _DLYDelay_ms
         _RTXSendPgm
           _PGMPgmOff
           _RTXSndPkt
             _CC1Read
               _SPIRead
               _SPIWrite
             _CC1Strobe
               _SPIWrite
             _CC1Write
               _SPIWrite
     _PGMTick
     _RTXAwake
       _CC1Init
         _CC1Strobe
           _SPIWrite
         _CC1Write
           _SPIWrite
         _DLYDelay_ms
       _DLYDelay_ms
       _RTXInit
         _CC1Strobe
           _SPIWrite
         _RTXStartSendData
           _ADCConv
             _DLYDelay_ms
             ___ftdiv
               ___ftmul (ARG)
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftpack (ARG)
               ___lwtoft (ARG)
                 ___ftpack
             ___ftmul
               ___ftpack
               ___lwtoft (ARG)
                 ___ftpack
             ___lltoft
               ___ftpack
             ___lwdiv
             ___lwtoft
               ___ftpack
             ___wmul
             _sqrt
               ___ftge
               ___ftmul
                 ___ftpack
                 ___lwtoft (ARG)
                   ___ftpack
               ___ftsub
                 ___ftadd
                   ___ftpack
           _DLYDelay_ms
           _RTXSendData
             _LEDFastFlash
               _DLYDelay_ms
             _RTXSndPkt
               _CC1Read
                 _SPIRead
                 _SPIWrite
               _CC1Strobe
                 _SPIWrite
               _CC1Write
                 _SPIWrite
     _RTXTick
       _RTXSendData
         _LEDFastFlash
           _DLYDelay_ms
         _RTXSndPkt
           _CC1Read
             _SPIRead
             _SPIWrite
           _CC1Strobe
             _SPIWrite
           _CC1Write
             _SPIWrite
       _RTXSendPgm
         _PGMPgmOff
         _RTXSndPkt
           _CC1Read
             _SPIRead
             _SPIWrite
           _CC1Strobe
             _SPIWrite
           _CC1Write
             _SPIWrite

 _INTIsr (ROOT)
   _SYSInt

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       D       2       92.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     49      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      35       7       66.3%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      2F       9       58.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      C1      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      C1      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sat Sep 03 20:16:15 2016

       __size_of_CC1Strobe 0014                 __CFG_CP$ON 0000                         l40 0E43  
                       l18 0D69                         l60 0CF3              ?_LEDFastFlash 0070  
                       l64 0D0E                         l69 0D75                         l78 0CAB  
      ___wmul@multiplicand 0073               ?_DLYDelay_ms 0071               ___ftadd@exp1 007B  
             ___ftadd@exp2 007A               ___ftadd@sign 0079                        l124 0042  
                      l133 0210                        l119 0EC5                        l240 0DE4  
                      l250 0448                        l235 0B49                        l251 0433  
                      l149 0C30                        l262 04A7                        l254 0457  
                      l247 0419                        l175 0F24                        l264 04AE  
                      l257 0460                        l249 0424                        l195 0B36  
                      l267 04C0                        l515 0691                        l292 0BC0  
                      l197 0B3E                        l295 0E5C                        l472 0DCE  
                      l297 0E5A                        l378 0BFE                        l489 06F9  
                      l675 0753                        l852 06D8                        l684 0C69  
                      l676 0794                        l853 06E0                        l845 06C5  
                      l677 0795                        l598 0E1A                        l876 02C1  
          __end_of_CC1Init 0F25            __end_of_CC1Read 0C98            __end_of_ADCConv 0222  
          __end_of_ADCInit 0EC6               __CFG_BORV$LO 0000                        wreg 0009  
               _RTXReadPkt 07A0            __end_of_DINInit 0BC1            __end_of_DINTask 0CD3  
          __end_of_DINTick 0E6F               __CFG_LVP$OFF 0000                 _RTXSendPgm 0FC4  
         _RTXStartSendData 0B91            __end_of_LEDInit 0B3F               ___ftdiv@cntr 003B  
             ___ftdiv@sign 0040                       l1044 0341                       l1046 037A  
                     l3003 0BB2                       l3007 0BBB                       l3023 0CC9  
                     l3033 0BEB                       l2305 0F9F                       l3027 0CCD  
                     l3019 0CC5                       l3035 0BEF                       l3043 0BF6  
                     l3051 0DF7                       l3211 06A2                       l3213 06AC  
                     l2309 0FB5                       l3301 02BD                       l3223 06D6  
                     l3215 06B1                       l3207 069B                       l2511 0F7B  
                     l2503 0F5D                       l3073 0E12                       l3225 06CA  
                     l2505 0F69                       l3305 02D3                       l3251 0C99  
                     l3243 0D6C                       l2515 0F84                       l3069 0E0F  
                     l2429 0C63                       l3309 02E5                       l3421 0349  
                     l3239 0D7A                       l3319 0300                       l3263 0251  
                     l2633 04A9                       l2641 04BB                       l2625 0489  
                     l3249 0CB0                       l3361 04DB                       l3281 027A  
                     l3409 0D17                       l2619 0483                       l3507 0E73  
                     l3291 029C                       l3259 024A                       l3451 0D2F  
                     l3509 0E85                       l3293 02A0                       l3269 0260  
                     l3541 00C7                       l3525 0051                       l3701 0DC2  
                     l2831 0B53                       l3391 0548                       l3383 0534  
                     l3367 04F1                       l3287 028D                       l3473 05A5  
                     l3289 0297                       l3545 00D0                       l3561 01FD  
                     l3633 0FD8                       l3713 0C0F                       l2771 0DD2  
                     l3467 058F                       l3395 0550                       l3379 052C  
                     l3299 02B3                       l3555 01BD                       l3563 0209  
                     l3459 0713                       l3635 0FDE                       l2925 0D4D  
                     l2933 0D64                       l3557 01F8                       l3661 0EF8  
                     l2943 0E3E                       l3495 05FF                       l3487 05E6  
                     l3567 0215                       l3655 0FFB                       l3719 0C14  
                     l3671 0F1B                       l3743 07FD                       l3831 0F45  
                     l3815 0F32                       l2937 0E1D                       l3681 0CD5  
                     l3729 0C26                       l3825 0F3E                       l2971 0EAA  
                     l2963 0D03                       l3587 063D                       l3589 0643  
                     l3693 0DAE                       l2967 0E9C                       l2991 0B39  
                     l3695 0DB3                       l3839 0F4E                       l3769 07DA  
                     l2979 0EBD                       l2995 0B41                       l3779 07ED  
                     l2999 0B44               __CFG_WDTE$ON 0000          NVMWrite@bufTmpRow 0020  
                     u3005 06A7                       u3025 06C0                       u2305 0F6A  
                     u2145 0C6A                       u2315 0F74                       u2155 0C6F  
                     u3045 06D1                       u2325 0F7C                       u3235 027B  
                     u3085 06E7                       u2285 0F60                       u3405 04FD  
                     u3325 02B4                       u3415 050D                       _PIE1 0091  
                     _PIE2 0092                       u3265 028E                       u4057 020B  
                     u4067 0C3D                       u3435 0535                       u3605 05B7  
                     u3445 053B                       u3375 0C36                       u3615 05C7  
                     u3295 02A1                       u3535 0365                       u3625 05E7  
                     u3635 05F6                       u3475 0551                       u3645 0600  
                     u3485 0557                       u3665 0E79                       _PIR1 0011  
                     _PIR2 0012                       _TMR0 0015                       _WPUB 020D  
          __end_of_PGMInit 0BFF            __end_of_PGMTick 0004               __CFG_WRT$OFF 0000  
            __CFG_FCMEN$ON 0000                       _batt 00A3                       _main 074D  
         __end_of_CC1Write 0DAB               ___ftpack@arg 0071            __end_of_NVMInit 0B4A  
          __end_of_NVMRead 0DF5               ___ftpack@exp 0074            __end_of_SPIInit 0D0F  
          __end_of_SPIRead 0D8A                       fsr0h 0005                       fsr1h 0007  
                     fsr0l 0004                       indf0 0000                       indf1 0001  
                     fsr1l 0006                       btemp 007E                       _sqrt 0318  
          __end_of_OUTInit 0E44              __CFG_BOREN$ON 0000                       ltemp 007E  
                     start 0014            __end_of_RTXInit 0DCF                       ttemp 007E  
        NVMWrite@latchAddr 0063            __end_of_RTXTask 0B20            __end_of_RTXTick 0800  
                     wtemp 007E              __CFG_IESO$OFF 0000            __end_of_SYSInit 0E1B  
          __end_of_SYSTask 0F55               ___ftmul@cntr 002F               ___ftmul@sign 0030  
             _ADCConv$1407 0052                ?_PGMReadNvm 0070              __CFG_LPBOR$ON 0000  
           ??_LEDFastFlash 0077                ?_PGMSelLong 0070                _RTXSendData 0621  
             SPIInit@state 0072                      ?_main 0070            __end_of___ftadd 0318  
          __end_of___ftdiv 0621                      ?_sqrt 0031            __end_of___ftmul 0578  
                    _T1CON 0018            __end_of___ftsub 0D2D         __size_of_PGMPgmOff 0004  
                    _IOCBN 0395                      _IOCBP 0394            __end_of___lwdiv 0F89  
                    _PMADR 0191                      _PMDAT 0193                      _TMR1H 0017  
                    _TMR1L 0016                      _PORTA 000C                      _PORTC 000E  
                    _TRISA 008C                      _TRISB 008D                      _TRISC 008E  
         __end_of_PGMSelUp 0C16              __CFG_PWRTE$ON 0000               ___lltoft@exp 007A  
                    _battV 00A0          __end_of_CC1Strobe 0BD5                      _errno 00A5  
                    _pktRx 00B2                      _pktTx 00BD              ___ftpack@sign 0075  
                    main@i 0068           __end_of_NVMWrite 04C4           __end_of_SPIWrite 0CB5  
                    ltemp0 007E                      ltemp1 0082                      ltemp2 0086  
                    ltemp3 0080           __end_of_RTXAwake 0C61                      ttemp0 007E  
                    ttemp1 0081                      ttemp2 0084                      ttemp3 0087  
                    ttemp4 007F                      sqrt@i 003D                      sqrt@q 003E  
                    sqrt@x 0041                      sqrt@y 0031                      sqrt@z 003A  
        LEDNormalFlash@num 0078                      status 0003                      wtemp0 007E  
                    wtemp1 0080                      wtemp2 0082                      wtemp3 0084  
                    wtemp4 0086                      wtemp5 0088                      wtemp6 007F  
             ?_PGMCheckNvm 0070   __size_of_RTXStartSendPgm 000F             __CFG_MCLRE$OFF 0000  
          __initialization 0016               DLYDelay_ms@i 0075               __end_of_main 07A0  
       __size_of_RTXRcvPkt 000E         __size_of_RTXSndPkt 0056               __end_of_sqrt 0408  
                ??_CC1Init 007B                  ??_CC1Read 0079                  ??_ADCConv 0044  
                ??_ADCInit 0071             CC1Strobe@e_stb 0078                     ??_main 0067  
               _cc1PaTable 00CD                     ??_sqrt 0034               CC1Init@state 0022  
                ??_DINInit 0071               NVMWrite@addr 0071                  ??_DINTask 0071  
                ??_DINTick 0071                 _cc1InitVal 0120                  ??_LEDInit 0071  
             ?_PGMNvmReset 0070                  ??_PGMInit 007B                  ??_PGMTick 0071  
              ?_RTXReadPkt 0070                     _ADCON0 009D                     _ADCON1 009E  
            SPIRead@dstPtr 0074                ?_RTXSendPgm 0070                  ??_NVMInit 0071  
                ??_NVMRead 0075                     _ADRESH 009C                     _ADRESL 009B  
                ??_SPIInit 0071                  ??_SPIRead 0072             _LEDNormalFlash 0CD3  
                ??_OUTInit 0071                     _ANSELA 018C                     _ANSELB 018D  
                   _ANSELC 018E           __end_of___ftpack 06F7        __size_of_PGMReadNvm 000F  
         __end_of___lltoft 0E9A                  ??_RTXInit 007C               ?_PGMWriteNvm 0070  
                   i1l3175 000D                  ??_RTXTask 007C                  ??_RTXTick 007C  
      __size_of_PGMSelLong 0018                     _INTCON 000B                     _FVRCON 0117  
                ??_SYSInit 0071           __end_of___lwtoft 0BE9                     _PMCON1 0195  
                   _PMCON2 0196                  ??_SYSTask 007C                     _INTIsr 0004  
                   _OSCCON 0099                     _INInit 0D4B                     _WDTCON 0097  
                   _SSPBUF 0211              LEDFastFlash@i 0079          __end_of_PGMPgmOff 0B14  
                   _SYSInt 0B14        RTXReadPkt@numRxByte 0066                     ___ftge 0F89  
                   _adc_ch 006C                     ___wmul 0C61                  ??___ftadd 0026  
           __CFG_STVREN$ON 0000                  ??___ftdiv 0037                  ??___ftmul 0027  
                ??___ftsub 007C                  ??___lwdiv 0075      ___ftmul@f3_as_product 002C  
     __size_of_DLYDelay_ms 0019                  ?_CC1Write 0077     __end_of_LEDNormalFlash 0CF1  
                   sqrt@og 0037          __end_of_RTXRcvPkt 0B64          __end_of_RTXSndPkt 074D  
     __end_of_LEDFastFlash 0D4B    __end_of__initialization 003E                 ___ftadd@f1 0020  
               ___ftadd@f2 0023                 ___ftge@ff1 0071                 ___ftge@ff2 0074  
               ___ftdiv@f1 0034                 ___ftdiv@f2 0031                 ___ftdiv@f3 003C  
               ___ftmul@f1 0021                 ___ftmul@f2 0024                 ___ftsub@f1 002D  
               ___ftsub@f2 002A             __pcstackCOMMON 0070                  ?_PGMSelUp 0070  
             __pidataBANK1 0B2C               __pidataBANK2 0EC6        __size_of_RTXReadPkt 004F  
 __end_of_RTXStartSendData 0BA0                 ___lltoft@c 0020            NVMWrite@rowAddr 0060  
        ??_RTXStartSendPgm 007C        __size_of_RTXSendPgm 003C                  ?_NVMWrite 0071  
          CC1Strobe@cc1Stb 0079                 ___lwtoft@c 0079                  ?_SPIWrite 0071  
               CC1Read@len 0078                 CC1Read@dst 0077                  ?_RTXAwake 0070  
               ??_CC1Write 007A               CC1Write@addr 0020             ADCConv@sumBatt 0059  
           ADCConv@sumCurr 0055            ?_LEDNormalFlash 0070                 __pbssBANK0 0069  
               __pbssBANK1 00A0                    ?_INTIsr 0070                    ?_INInit 0070  
          __CFG_VCAPEN$OFF 0000                    ?_SYSInt 0070                  INInit@sta 0072  
     __size_of_PGMCheckNvm 000C                 __pmaintext 074D                 ??_PGMSelUp 0065  
                  ?___ftge 0071               ??_PGMReadNvm 0078            CC1Write@cc1Addr 0021  
                  ?___wmul 0071               ??_PGMSelLong 007A                 __pintentry 0004  
             ?_RTXSendData 0070                    _CC1Init 0EF5                    _CC1Read 0C7C  
                  _ADCConv 0041                    _ADCInit 0E9A          _u_in_sta_currTask 006E  
                ?___ftpack 0071                 ??_NVMWrite 0075                 _cntSndData 00A9  
                ?___lltoft 0020                 ??_SPIWrite 0074                  ?___lwtoft 0079  
                  _DINInit 0BB0                 ??_RTXAwake 007C                    _DINTick 0E44  
                  _DINTask 0CB5               ADCInit@state 0072                    _LEDInit 0B34  
       RTXSendData@valBatt 002C                    _PGMInit 0BE9                    _PGMTick 0003  
       RTXSendData@valTemp 0029       __size_of_PGMNvmReset 0010                    _SSPCON1 0215  
                  _SSPCON2 0216                    _NVMInit 0B3F                    _NVMRead 0DCF  
                  _SPIInit 0CF1                    _SPIRead 0D6A                    _SSPSTAT 0214  
                  _OUTInit 0E1B                    _RTXInit 0DAB                    _RTXTick 07EF  
                  _RTXTask 0B1A         __end_of_PGMReadNvm 0B82                    _SYSInit 0DF5  
                  _SYSTask 0F25         __end_of_PGMSelLong 0C2E                  _CC1Strobe 0BC1  
          __size_of_INTIsr 0010            __size_of_INInit 001F       __size_of_PGMWriteNvm 000F  
          __size_of_SYSInt 0006                  NVMWrite@i 0062                  NVMWrite@j 0064  
                SPIWrite@i 0076            __size_of___ftge 003B                    ___ftadd 0222  
             RTXInit@state 005C                    ___ftdiv 0578            __size_of___wmul 001B  
                  ___ftmul 04C4                    ___ftsub 0D0F                    ___lwdiv 0F55  
               ??___ftpack 0076                 ??___lltoft 0079                    __ptext1 0F25  
                  __ptext2 07EF                    __ptext3 0C47                    __ptext4 0DAB  
                  __ptext5 0B91                    __ptext6 0621                    __ptext7 0D2D  
                  __ptext8 0EF5                    __ptext9 0003                    _flg_slp 00AA  
               ??___lwtoft 0020                    _pgm_cfg 00C8                    _pgm_flg 007C  
    __size_of_LEDFastFlash 001E                  _IOCBFbits 0396                    _rmsCurr 0069  
             ??_RTXReadPkt 0065               ??_RTXSendPgm 0028                    clrloop0 0B27  
                  _rtx_flg 00AB               RTXRcvPkt@len 0020               RTXRcvPkt@dst 0023  
     end_of_initialization 003E                 _u_in_ev_up 00B1                 ?_CC1Strobe 0070  
       RTXSndPkt@numRxByte 0024                    init_ram 0B20         RTXSndPkt@numTxByte 0026  
                  initloop 0B21               RTXSndPkt@len 0022               RTXSndPkt@src 0025  
             RTXSndPkt@sta 0027                  _PGMPgmOff 0B10                 _tmrDbncSel 00AC  
       __end_of_RTXReadPkt 07EF                 DINInit@sta 0071               _LEDFastFlash 0D2D  
       __end_of_RTXSendPgm 1000                  _PORTBbits 000D                 _tmrLongSel 00A7  
         __CFG_FOSC$INTOSC 0000          __size_of_CC1Write 0021                NVMRead@addr 0071  
              NVMRead@dest 0073                  _RTXRcvPkt 0B56                  _RTXSndPkt 06F7  
              ___ftdiv@exp 003F            _RTXStartSendPgm 0B82             __end_of_INTIsr 0014  
           __end_of_INInit 0D6A        _nvm_pgm_cfg_absaddr 3820             __end_of_SYSInt 0B1A  
              ___ftmul@exp 002B                 ?_PGMPgmOff 0070                 LEDInit@sta 0071  
           DLYDelay_ms@val 0071          ?_RTXStartSendData 0070             __end_of___ftge 0FC4  
        __size_of_PGMSelUp 0017             __end_of___wmul 0C7C              ??_DLYDelay_ms 0073  
       ??_RTXStartSendData 007C       __size_of_RTXSendData 0072           ??_LEDNormalFlash 0077  
             SYSInit@state 0072          __size_of_NVMWrite 00BC          __size_of_SPIWrite 001D  
      start_initialization 0016          __size_of_RTXAwake 001A                CC1Read@addr 007A  
              NVMWrite@len 0074                   ??_INTIsr 0070                   ??_INInit 0071  
              ??_CC1Strobe 0077                 ?_RTXRcvPkt 0020                 ?_RTXSndPkt 0022  
                 ??_SYSInt 0070             CC1Read@cc1Addr 007B                   ??___ftge 0077  
                 ??___wmul 0075                   ?_CC1Init 0070                __pdataBANK1 00CD  
                 ?_CC1Read 0077                __pdataBANK2 0120                SPIWrite@len 0073  
                 ?_ADCConv 0070                   ?_ADCInit 0070                   ?_DINInit 0070  
                 ?_DINTask 0070                   ?_DINTick 0070          __size_of___ftpack 0064  
                 ?_LEDInit 0070          __size_of___lltoft 002B                __pbssCOMMON 007C  
                ___latbits 0003          __size_of___lwtoft 0014              __pcstackBANK0 0020  
      __end_of_DLYDelay_ms 0C47                   ?_PGMInit 0070                   ?_PGMTick 0070  
  __end_of_RTXStartSendPgm 0B91                   ?_NVMInit 0070                   ?_NVMRead 0071  
                 ?_SPIInit 0070              ADCConv@cntSum 005B                   ?_SPIRead 0071  
           NVMWrite@source 0073                   ?_OUTInit 0070               PGMInit@state 007B  
                 ?_RTXInit 0070                   ?_RTXTask 0070                   ?_RTXTick 0070  
              CC1Write@len 0079                   ?_SYSInit 0070                CC1Write@src 0077  
                 ?_SYSTask 0070              ??_PGMCheckNvm 007B        __p_nvm_pgm_cfg_text 3820  
         ___lwdiv@dividend 0073                ??_PGMPgmOff 0071                   ?___ftadd 0020  
                 ?___ftdiv 0031                   ?___ftmul 0021                   ?___ftsub 002A  
                 ?___lwdiv 0071                  _u_SYS_STA 00AE           _u_in_sta_tmpTask 006F  
                 NVMRead@i 0077              ??_PGMNvmReset 007A                   SPIRead@i 0075  
                 _CC1Write 0D8A           ___lwdiv@quotient 0076              ??_PGMWriteNvm 0078  
                _u_flg_din 006D                ??_RTXRcvPkt 0021                ??_RTXSndPkt 0023  
           ___wmul@product 0075                   _LATAbits 010C                   _LATCbits 010E  
                clear_ram0 0B26                   _PIR1bits 0011                   _PGMSelUp 0BFF  
      __end_of_PGMCheckNvm 0B56                  _tmrRcvPkt 00AD           __size_of_CC1Init 0030  
         __size_of_CC1Read 001C                _DLYDelay_ms 0C2E                   _NVMWrite 0408  
         __size_of_ADCConv 01E1           __size_of_ADCInit 002C                 _ADCON0bits 009D  
                 _SPIWrite 0C98          ___wmul@multiplier 0071                 NVMInit@sta 0071  
               NVMRead@len 0074            LEDFastFlash@num 0078                   _RTXAwake 0C47  
         __size_of_DINInit 0011           __size_of_DINTask 001E           __size_of_DINTick 002B  
         __size_of_LEDInit 000B                 SPIRead@len 0071           __size_of_PGMInit 0016  
         ?_RTXStartSendPgm 0070           __size_of_PGMTick 0001        __end_of_PGMNvmReset 0BB0  
         __size_of_NVMInit 000B           __size_of_NVMRead 0026           __size_of_SPIInit 001E  
         __size_of_SPIRead 0020               _u_in_ev_down 00AF            LEDNormalFlash@i 0079  
             _u_in_ev_long 00B0           __size_of_OUTInit 0029           __size_of_RTXInit 0024  
         __size_of_RTXTask 0006           __size_of_RTXTick 0011           __size_of_SYSInit 0026  
         __size_of_SYSTask 0030                 OUTInit@sta 0072        __end_of_PGMWriteNvm 0B73  
         __size_of___ftadd 00F6           __size_of___ftdiv 00A9           __size_of___ftmul 00B4  
         __size_of___ftsub 001E           __size_of___lwdiv 0034                   ___ftpack 0693  
                 ___lltoft 0E6F                   ___lwtoft 0BD5            ___lwdiv@divisor 0071  
          ___lwdiv@counter 0078                   __ptext10 0BFF                   __ptext11 0B82  
                 __ptext20 0F89                   __ptext12 0FC4                   __ptext21 0C61  
                 __ptext13 06F7                   __ptext30 0CF1                   __ptext22 0BD5  
                 __ptext14 0D8A                   __ptext31 0B1A                   __ptext23 0F55  
                 __ptext15 0041                   __ptext40 0C98                   __ptext32 07A0  
                 __ptext24 0E6F                   __ptext16 0318                   __ptext41 0BE9  
                 __ptext33 0B56                   __ptext25 0578                   __ptext17 0D0F  
                 __ptext50 0B34                   __ptext42 0B73                   __ptext34 0C7C  
                 __ptext26 0693                   __ptext18 0222                   __ptext51 0D4B  
                 __ptext43 0DCF                   __ptext35 0D6A                   __ptext27 0C16  
                 __ptext19 04C4                   __ptext52 0CB5                   __ptext44 0B4A  
                 __ptext36 0B10                   __ptext28 0E44                   __ptext53 0BB0  
                 __ptext45 0BA0                   __ptext37 0CD3                   __ptext29 0DF5  
                 __ptext54 0E9A                   __ptext46 0B64                   __ptext38 0C2E  
                 __ptext47 0408                   __ptext39 0BC1                   __ptext56 0B14  
                 __ptext48 0E1B                   __ptext49 0B3F  __size_of_RTXStartSendData 000F  
      __end_of_nvm_pgm_cfg 3840              __size_of_main 0053                _PGMCheckNvm 0B4A  
            __size_of_sqrt 00F0              ??_RTXSendData 0028                _PGMNvmReset 0BA0  
               _INTCONbits 000B             SPIWrite@srcPtr 0071                   intlevel1 0000  
              _PGMWriteNvm 0B64                 _PMCON1bits 0195          __CFG_CLKOUTEN$OFF 0000  
               _PGMReadNvm 0B73                 _PGMSelLong 0C16                 _OPTION_REG 0095  
      __end_of_RTXSendData 0693                _nvm_pgm_cfg 3820    __size_of_LEDNormalFlash 001E  
               _SSPCONbits 0215  
